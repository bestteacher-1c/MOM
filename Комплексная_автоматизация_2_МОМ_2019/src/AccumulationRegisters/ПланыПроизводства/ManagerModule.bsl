#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура выполняет фоновое проведение плана производства.
//
// Параметры:
//	Параметры - Структура - набор параметров для фонового проведения:
//		*КоличествоОшибок - Число - текущее количество ошибок.
//		*МаксимальноеКоличествоОшибок - Число - максимальноеколичество ошибок после которого проведение прервется.
//		*ДокументСсылка - Ссылка на документ.
Процедура ВыполнитьПроведение(Параметры) Экспорт
	
	Если КоличествоОшибокПревысилоЛимит(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ПланПроизводства = Параметры.ДокументСсылка;
	
	ПровестиДокумент(ПланПроизводства, Параметры);
	
	РассчитатьПотребности(ПланПроизводства, Параметры);
	
	ДопланироватьПолуфабрикаты(ПланПроизводства, Параметры);
	
	Если ЕстьЗаданияВОчереди(ПланПроизводства) Тогда
		ВыполнитьПроведение(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет полный пересчет потребностей планов производства.
//
// Параметры:
//  Параметры - Структура - содержит следующие данные:
//		* Ссылки - Массив - ссылки на планы производства для обработки.
//  АдресХранилища - Строка - адрес хранилища, в которое может быть помещен результат работы процедуры.
//
Процедура ПересчитатьПотребностиПланов(Параметры, АдресХранилища) Экспорт
	
	Ссылки = Параметры.Ссылки;
	Сценарии = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ссылки, "Сценарий");
	
	Для Каждого Ссылка Из Ссылки Цикл
		
		Сценарий = Сценарии.Получить(Ссылка);
		Документы.ПланПроизводства.ЗаписатьОчередьФоновогоПроведения(Ссылка, Сценарий, Истина);
		
		Параметры = Новый Структура("ДокументСсылка", Ссылка);
		ВыполнитьПроведение(Параметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные регистра по заданному плану.
//
// Параметры:
//  Ссылка					 - ДокументСсылка.ПланПроизводства - план, данные которого необходимо прочитать.
//  ПолучитьПродукцию		 - Булево - Истина, если требуется получить план выпуска готовой продукции.
//  ПолучитьПолуфабрикаты	 - Булево - Истина, если требуется получить план выпуска производимых полуфабрикатов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные регистра.
//
Функция ПрочитатьПланПроизводства(Ссылка, ПолучитьПродукцию = Истина, ПолучитьПолуфабрикаты = Истина) Экспорт
	
	Если НЕ ПолучитьПродукцию И НЕ ПолучитьПолуфабрикаты Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка чтения данных плана производства. В процедуру переданы некорректные параметры.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПланыПроизводства.*
		|ИЗ
		|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
		|ГДЕ
		|	ПланыПроизводства.Регистратор = &Ссылка
		|	И &ПродукцияПолуфабрикат";
		
	Если ПолучитьПродукцию И ПолучитьПолуфабрикаты Тогда
		ТекстУсловия = "ИСТИНА";
	ИначеЕсли ПолучитьПродукцию Тогда
		ТекстУсловия = "ПланыПроизводства.ЭтоПолуфабрикат = ЛОЖЬ";
	ИначеЕсли ПолучитьПолуфабрикаты Тогда
		ТекстУсловия = "ПланыПроизводства.ЭтоПолуфабрикат = ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПродукцияПолуфабрикат", ТекстУсловия);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФоновоеПроведение

#Область РасчетПотребностей

Процедура РассчитатьПотребности(ПланПроизводства, Параметры)
	
	Попытка
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ЕстьЗаписиВОчереди = ОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц);
		
		Если ЕстьЗаписиВОчереди Тогда
			
			ОбработатьОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц);
		
			ОчиститьОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц);
			
		КонецЕсли;
		
	Исключение
		
		Параметры.КоличествоОшибок = Параметры.КоличествоОшибок + 1;
		
		ЗаписатьВЖурналОшибкуРассчета(ПланПроизводства, Параметры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Движения = ИнициализироватьТаблицыДвижений();
	
	Действия = ОпределитьДействияДляОбработки(МенеджерВременныхТаблиц);
	
	Если Действия.ПересчитатьПродукцию Тогда
		
		ПересчитатьПродукцию(МенеджерВременныхТаблиц, Движения);
		
	КонецЕсли;
	
	Если Действия.РазузловатьПродукцию Тогда
		
		РазузловатьПродукцию(ПланПроизводства, МенеджерВременныхТаблиц, Движения);
		
	КонецЕсли;
	
	ЗаписатьДвижения(Движения, ПланПроизводства, МенеджерВременныхТаблиц, Истина);
	
КонецПроцедуры

Функция ОпределитьДействияДляОбработки(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьРасчета.ДатаПроизводства КАК ДатаПроизводства,
	|	ОчередьРасчета.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчета.Подразделение КАК Подразделение,
	|	ОчередьРасчета.Спецификация КАК Спецификация,
	|	ОчередьРасчета.Назначение КАК Назначение,
	|	ОчередьРасчета.Сценарий КАК Сценарий,
	|	ПланыПроизводства.*
	|ПОМЕСТИТЬ ВТПродукция
	|ИЗ
	|	ОчередьРасчета КАК ОчередьРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|		ПО ОчередьРасчета.ДатаПроизводства = ПланыПроизводства.Период
	|			И ОчередьРасчета.ПланПроизводства = ПланыПроизводства.ПланПроизводства
	|			И ОчередьРасчета.Подразделение = ПланыПроизводства.Подразделение
	|			И ОчередьРасчета.Спецификация = ПланыПроизводства.Спецификация
	|			И ОчередьРасчета.Назначение = ПланыПроизводства.Назначение
	|			И ОчередьРасчета.Сценарий = ПланыПроизводства.Сценарий
	|ГДЕ
	|	ПланыПроизводства.Количество <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаПроизводства,
	|	ПланПроизводства,
	|	Подразделение,
	|	Спецификация,
	|	Назначение,
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПродукция.ДатаПроизводства КАК ДатаПроизводства,
	|	ВТПродукция.ПланПроизводства КАК ПланПроизводства,
	|	ВТПродукция.Подразделение КАК Подразделение,
	|	ВТПродукция.Спецификация КАК Спецификация,
	|	ВТПродукция.Назначение КАК Назначение,
	|	ВТПродукция.Сценарий КАК Сценарий,
	|	МИНИМУМ(ВТПродукция.ПовторноеРазузлование) КАК ПовторноеРазузлование
	|ПОМЕСТИТЬ ВТИтоги
	|ИЗ
	|	ВТПродукция КАК ВТПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПродукция.ДатаПроизводства,
	|	ВТПродукция.ПланПроизводства,
	|	ВТПродукция.Подразделение,
	|	ВТПродукция.Спецификация,
	|	ВТПродукция.Назначение,
	|	ВТПродукция.Сценарий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаПроизводства,
	|	ПланПроизводства,
	|	Подразделение,
	|	Спецификация,
	|	Назначение,
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтоги.ПовторноеРазузлование,
	|	ВТПродукция.*
	|ПОМЕСТИТЬ ПродукцияПересчитать
	|ИЗ
	|	ВТПродукция КАК ВТПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтоги КАК ВТИтоги
	|		ПО ВТПродукция.ДатаПроизводства = ВТИтоги.ДатаПроизводства
	|			И ВТПродукция.ПланПроизводства = ВТИтоги.ПланПроизводства
	|			И ВТПродукция.Подразделение = ВТИтоги.Подразделение
	|			И ВТПродукция.Спецификация = ВТИтоги.Спецификация
	|			И ВТПродукция.Назначение = ВТИтоги.Назначение
	|			И ВТПродукция.Сценарий = ВТИтоги.Сценарий
	|ГДЕ
	|	ВТИтоги.ПовторноеРазузлование = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтоги.ПовторноеРазузлование,
	|	ВТПродукция.*
	|ПОМЕСТИТЬ ПродукцияРазузловать
	|ИЗ
	|	ВТПродукция КАК ВТПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтоги КАК ВТИтоги
	|		ПО ВТПродукция.ДатаПроизводства = ВТИтоги.ДатаПроизводства
	|			И ВТПродукция.ПланПроизводства = ВТИтоги.ПланПроизводства
	|			И ВТПродукция.Подразделение = ВТИтоги.Подразделение
	|			И ВТПродукция.Спецификация = ВТИтоги.Спецификация
	|			И ВТПродукция.Назначение = ВТИтоги.Назначение
	|			И ВТПродукция.Сценарий = ВТИтоги.Сценарий
	|ГДЕ
	|	ВТИтоги.ПовторноеРазузлование = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИтоги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПродукцияПересчитать.ДатаПроизводства
	|ИЗ
	|	ПродукцияПересчитать КАК ПродукцияПересчитать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПродукцияРазузловать.ДатаПроизводства
	|ИЗ
	|	ПродукцияРазузловать КАК ПродукцияРазузловать";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Действия = Новый Структура;
	
	Действия.Вставить("ПересчитатьПродукцию", НЕ МассивРезультатов[6].Пустой());
	Действия.Вставить("РазузловатьПродукцию", НЕ МассивРезультатов[7].Пустой());
	
	Возврат Действия;
	
КонецФункции

Функция ИнициализироватьТаблицыДвижений()
	
	Регистры = Новый Массив;
	Регистры.Добавить("ПланыПроизводства");
	Регистры.Добавить("ПланыВыпускаИзделий");
	Регистры.Добавить("ПланыПотребленияМатериалов");
	Регистры.Добавить("ПланыЗанятостиТрудовыхРесурсов");
	
	Результат = Новый Структура;
	
	Для каждого Регистр Из Регистры Цикл
		
		Набор = РегистрыНакопления[Регистр].СоздатьНаборЗаписей();
		
		Таблица = Набор.ВыгрузитьКолонки();
		
		Если Регистр <> "ПланыПроизводства" Тогда
			
			Таблица.Колонки.Добавить("ДнейОтПотребности", Новый ОписаниеТипов("Число"));
			
		КонецЕсли;
		
		Результат.Вставить(Регистр, Таблица);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Проведение

Процедура ПровестиДокумент(ПланПроизводства, Параметры)
	
	Попытка
		
		Очередь = ОчередьПроведения(ПланПроизводства);
		
		Если Очередь.ЕстьЗаписиВОчереди Тогда
			
			ДокументОбъект = ПланПроизводства.ПолучитьОбъект();
			
			Если Очередь.ПересчитатьВсеПотребности Тогда
				
				ОчиститьДвижения(ДокументОбъект);
				
			КонецЕсли;
			
			СформироватьДвижения(ДокументОбъект);
			
			РегистрыСведений.ОчередьРасчетаПланаПроизводства.ОчиститьОчередь(Очередь.Записи, ПланПроизводства);
			
		КонецЕсли;
		
	Исключение
		
		Параметры.КоличествоОшибок = Параметры.КоличествоОшибок + 1;
		
		ЗаписатьВЖурналОшибкуРассчета(ПланПроизводства, Параметры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Функция ОчередьПроведения(ПланПроизводства)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОчередьРасчетаПлановПроизводства.ПланПроизводства КАК ПланПроизводства,
		|	ОчередьРасчетаПлановПроизводства.Сценарий КАК Сценарий,
		|	ОчередьРасчетаПлановПроизводства.Проведение КАК Проведение,
		|	ОчередьРасчетаПлановПроизводства.Разделитель КАК Разделитель
		|ИЗ
		|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
		|ГДЕ
		|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства
		|	И ОчередьРасчетаПлановПроизводства.Проведение = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ОчередьРасчетаПлановПроизводства.ПересчитатьВсеПотребности) КАК ПересчитатьВсеПотребности
		|ИЗ
		|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
		|ГДЕ
		|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства
		|	И ОчередьРасчетаПлановПроизводства.Проведение = ИСТИНА");
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьОчередьРасчета(ПланПроизводства);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
	
		Результат = Новый Структура("ЕстьЗаписиВОчереди, Записи, ПересчитатьВсеПотребности");
		
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			
			Результат.ЕстьЗаписиВОчереди = Истина;
			Результат.Записи = МассивРезультатов[0].Выгрузить();
			
			Выборка = МассивРезультатов[1].Выбрать();
			Выборка.Следующий();
			
			Результат.ПересчитатьВсеПотребности = Выборка.ПересчитатьВсеПотребности;
			
		Иначе
			
			Результат.ЕстьЗаписиВОчереди = Ложь;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция НадоОбновитьСтатусПотребностей(ПланПроизводства, Статус)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланыВыпускаИзделийОбороты.ПланПроизводства
		|ИЗ
		|	РегистрНакопления.ПланыВыпускаИзделий.Обороты(
		|			,
		|			,
		|			,
		|			ПланПроизводства = &ПланПроизводства
		|				И Статус <> &Статус) КАК ПланыВыпускаИзделийОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланыПотребленияМатериаловОбороты.ПланПроизводства
		|ИЗ
		|	РегистрНакопления.ПланыПотребленияМатериалов.Обороты(
		|			,
		|			,
		|			,
		|			ПланПроизводства = &ПланПроизводства
		|				И Статус <> &Статус) КАК ПланыПотребленияМатериаловОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланыЗанятостиТрудовыхРесурсовОбороты.ПланПроизводства
		|ИЗ
		|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов.Обороты(
		|			,
		|			,
		|			,
		|			ПланПроизводства = &ПланПроизводства
		|				И Статус <> &Статус) КАК ПланыЗанятостиТрудовыхРесурсовОбороты
		|");
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОбновитьСтатусВДвиженияхПоПотребностям(ПланПроизводства, Движения)
	
	Запрос = Новый Запрос(ТекстЗапросаПотребностиСАктуальнымСтатусом());
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеДвижений = Новый Соответствие;
	ДанныеДвижений.Вставить("ПланыВыпускаИзделий", МассивРезультатов[0].Выгрузить());
	ДанныеДвижений.Вставить("ПланыПотребленияМатериалов", МассивРезультатов[1].Выгрузить());
	ДанныеДвижений.Вставить("ПланыЗанятостиТрудовыхРесурсов", МассивРезультатов[2].Выгрузить());
	
	Для каждого КлючИЗначение Из ДанныеДвижений Цикл
		
		Если КлючИЗначение.Значение.Количество() > 0 Тогда
			
			ДвиженияПоРегистру = Движения[КлючИЗначение.Ключ];
			ДвиженияПоРегистру.Записывать = Истина;
			ДвиженияПоРегистру.Загрузить(КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПотребностиСАктуальнымСтатусом()
	
	Возврат
	"ВЫБРАТЬ
	|	ПланыВыпускаИзделий.ПланПроизводства.Статус КАК Статус,
	|	ПланыВыпускаИзделий.*
	|ИЗ
	|	РегистрНакопления.ПланыВыпускаИзделий КАК ПланыВыпускаИзделий
	|ГДЕ
	|	ПланыВыпускаИзделий.Регистратор = &ПланПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПотребленияМатериалов.ПланПроизводства.Статус КАК Статус,
	|	ПланыПотребленияМатериалов.*
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
	|ГДЕ
	|	ПланыПотребленияМатериалов.Регистратор = &ПланПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыЗанятостиТрудовыхРесурсов.ПланПроизводства.Статус КАК Статус,
	|	ПланыЗанятостиТрудовыхРесурсов.*
	|ИЗ
	|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК ПланыЗанятостиТрудовыхРесурсов
	|ГДЕ
	|	ПланыЗанятостиТрудовыхРесурсов.Регистратор = &ПланПроизводства
	|";
	
КонецФункции

Процедура ЗаполнитьПланыВыпускаПоПланамПроизводства(Движения)
	
	Движения.ПланыВыпускаИзделий.Очистить();
	
	Для каждого Запись Из Движения.ПланыПроизводства Цикл
		
		НоваяЗапись = Движения.ПланыВыпускаИзделий.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись,
			"Период,
			|Сценарий,
			|Статус,
			|Номенклатура,
			|Характеристика,
			|Назначение,
			|ПланПроизводства,
			|Спецификация,
			|Количество");
		
		НоваяЗапись.ПодразделениеДиспетчер  = Запись.Подразделение;
		НоваяЗапись.ТипВыпуска              = Перечисления.ТипыВыпусковПлановПроизводства.Основной;
		НоваяЗапись.ДатаПроизводства        = Запись.Период;
		НоваяЗапись.СпецификацияПродукции   = Запись.Спецификация;
		НоваяЗапись.НазначениеПродукции     = Запись.Назначение;
		НоваяЗапись.НоменклатураПродукции   = Запись.Номенклатура;
		НоваяЗапись.ХарактеристикаПродукции = Запись.Характеристика;
		
	КонецЦикла;
	
	Движения.ПланыВыпускаИзделий.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Пересчет

Процедура ПересчитатьПродукцию(МенеджерВременныхТаблиц, Движения)
	
	Запрос = Новый Запрос(ТекстЗапросаПересчетПродукции());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураРезультатов = Новый Структура;
	СтруктураРезультатов.Вставить("ПланыПроизводства", МассивРезультатов[4].Выбрать());
	СтруктураРезультатов.Вставить("ПланыВыпускаИзделий", МассивРезультатов[5].Выбрать());
	СтруктураРезультатов.Вставить("ПланыПотребленияМатериалов", МассивРезультатов[6].Выбрать());
	СтруктураРезультатов.Вставить("ПланыЗанятостиТрудовыхРесурсов", МассивРезультатов[7].Выбрать());
	
	Для каждого КлючИЗначение Из СтруктураРезультатов Цикл
		
		Пока КлючИЗначение.Значение.Следующий() Цикл
			
			НоваяСтрока = Движения[КлючИЗначение.Ключ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючИЗначение.Значение);
			НоваяСтрока.Активность = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПересчетПродукции()
	
	Возврат
	"ВЫБРАТЬ
	|	ПродукцияПересчитать.ДатаПроизводства  КАК ДатаПроизводства,
	|	ПродукцияПересчитать.ПланПроизводства  КАК ПланПроизводства,
	|	ПродукцияПересчитать.Подразделение     КАК Подразделение,
	|	ПродукцияПересчитать.Спецификация      КАК Спецификация,
	|	ПродукцияПересчитать.Назначение        КАК Назначение,
	|	ПродукцияПересчитать.Сценарий          КАК Сценарий,
	|	ПродукцияПересчитать.Номенклатура      КАК Номенклатура,
	|	ПродукцияПересчитать.Характеристика    КАК Характеристика,
	|	СУММА(ПродукцияПересчитать.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТИтогиПересчитать
	|ИЗ
	|	ПродукцияПересчитать КАК ПродукцияПересчитать
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродукцияПересчитать.ДатаПроизводства,
	|	ПродукцияПересчитать.ПланПроизводства,
	|	ПродукцияПересчитать.Подразделение,
	|	ПродукцияПересчитать.Спецификация,
	|	ПродукцияПересчитать.Назначение,
	|	ПродукцияПересчитать.Сценарий,
	|	ПродукцияПересчитать.Номенклатура,
	|	ПродукцияПересчитать.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТИтогиПересчитать.Спецификация,
	|	ВТИтогиПересчитать.Номенклатура,
	|	ВТИтогиПересчитать.Характеристика
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	ВТИтогиПересчитать КАК ВТИтогиПересчитать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоЧеткаяХарактеристика > 0
	|			ТОГДА ВложенныйЗапрос.КоличествоЧеткаяХарактеристика
	|		ИНАЧЕ ВложенныйЗапрос.КоличествоНеЧеткаяХарактеристика
	|	КОНЕЦ КАК КоличествоНаЕдиницуПартию
	|ПОМЕСТИТЬ ВТКоличествоНаЕдиницуПартию
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТНоменклатура.Спецификация КАК Спецификация,
	|		ВТНоменклатура.Номенклатура КАК Номенклатура,
	|		ВТНоменклатура.Характеристика КАК Характеристика,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ВТНоменклатура.Характеристика = ТаблицаИзделия.Характеристика
	|					ТОГДА ТаблицаИзделия.Количество
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК КоличествоЧеткаяХарактеристика,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ВТНоменклатура.Характеристика = ТаблицаИзделия.Характеристика
	|					ТОГДА 0
	|				ИНАЧЕ ТаблицаИзделия.Количество
	|			КОНЕЦ) КАК КоличествоНеЧеткаяХарактеристика
	|	ИЗ
	|		ВТНоменклатура КАК ВТНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТаблицаИзделия
	|			ПО ВТНоменклатура.Спецификация = ТаблицаИзделия.Ссылка
	|				И ВТНоменклатура.Номенклатура = ТаблицаИзделия.Номенклатура
	|				И (ВТНоменклатура.Характеристика = ТаблицаИзделия.Характеристика
	|					ИЛИ ТаблицаИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|			ПО ВТНоменклатура.Спецификация = РесурсныеСпецификации.Ссылка
	|	ГДЕ
	|		РесурсныеСпецификации.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|															  ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТНоменклатура.Спецификация,
	|		ВТНоменклатура.Номенклатура,
	|		ВТНоменклатура.Характеристика
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВТНоменклатура.Спецификация КАК Спецификация,
	|		ВТНоменклатура.Номенклатура КАК Номенклатура,
	|		ВТНоменклатура.Характеристика КАК Характеристика,
	|		РесурсныеСпецификации.КоличествоВходящегоИзделия,
	|		0
	|	ИЗ
	|		ВТНоменклатура КАК ВТНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|			ПО ВТНоменклатура.Спецификация = РесурсныеСпецификации.Ссылка
	|	ГДЕ
	|		РесурсныеСпецификации.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтогиПересчитать.ДатаПроизводства КАК ДатаПроизводства,
	|	ВТИтогиПересчитать.ПланПроизводства КАК ПланПроизводства,
	|	ВТИтогиПересчитать.Подразделение КАК Подразделение,
	|	ВТИтогиПересчитать.Спецификация КАК Спецификация,
	|	ВТИтогиПересчитать.Назначение КАК Назначение,
	|	ВТИтогиПересчитать.Сценарий КАК Сценарий,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТИтогиПересчитать.Спецификация.ВыпускПроизвольнымиПорциями
	|				ТОГДА
	|					ВТИтогиПересчитать.Количество / ВТПартии.КоличествоНаЕдиницуПартию
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТИтогиПересчитать.Количество / ВТПартии.КоличествоНаЕдиницуПартию = (ВЫРАЗИТЬ(ВТИтогиПересчитать.Количество / ВТПартии.КоличествоНаЕдиницуПартию КАК ЧИСЛО(15, 0)))
	|						ТОГДА ВТИтогиПересчитать.Количество / ВТПартии.КоличествоНаЕдиницуПартию
	|					ИНАЧЕ (ВЫРАЗИТЬ(ВТИтогиПересчитать.Количество / ВТПартии.КоличествоНаЕдиницуПартию - 0.5 КАК ЧИСЛО(15, 0))) + 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕдиницПартийИзделий
	|ПОМЕСТИТЬ ВТКоличествоПартий
	|ИЗ
	|	ВТИтогиПересчитать КАК ВТИтогиПересчитать
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоНаЕдиницуПартию КАК ВТПартии
	|		ПО ВТИтогиПересчитать.Спецификация = ВТПартии.Спецификация
	|			И ВТИтогиПересчитать.Номенклатура = ВТПартии.Номенклатура
	|			И ВТИтогиПересчитать.Характеристика = ВТПартии.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИтогиПересчитать.ДатаПроизводства,
	|	ВТИтогиПересчитать.ПланПроизводства,
	|	ВТИтогиПересчитать.Подразделение,
	|	ВТИтогиПересчитать.Спецификация,
	|	ВТИтогиПересчитать.Назначение,
	|	ВТИтогиПересчитать.Сценарий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаПроизводства,
	|	ПланПроизводства,
	|	Подразделение,
	|	Спецификация,
	|	Назначение,
	|	Сценарий
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродукцияПересчитать.*
	|ИЗ
	|	ПродукцияПересчитать КАК ПродукцияПересчитать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыВыпускаИзделий.КоличествоНаЕдиницуПродукции * ВТКоличествоПартий.ЕдиницПартийИзделий КАК Количество,
	|	ПланыВыпускаИзделий.*
	|ИЗ
	|	РегистрНакопления.ПланыВыпускаИзделий КАК ПланыВыпускаИзделий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоПартий КАК ВТКоличествоПартий
	|		ПО ПланыВыпускаИзделий.ДатаПроизводства = ВТКоличествоПартий.ДатаПроизводства
	|			И ПланыВыпускаИзделий.ПланПроизводства = ВТКоличествоПартий.ПланПроизводства
	|			И ПланыВыпускаИзделий.СпецификацияПродукции = ВТКоличествоПартий.Спецификация
	|			И ПланыВыпускаИзделий.НазначениеПродукции = ВТКоличествоПартий.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПотребленияМатериалов.КоличествоНаЕдиницуПродукции * ВТКоличествоПартий.ЕдиницПартийИзделий КАК Количество,
	|	ПланыПотребленияМатериалов.*
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоПартий КАК ВТКоличествоПартий
	|		ПО ПланыПотребленияМатериалов.ДатаПроизводства = ВТКоличествоПартий.ДатаПроизводства
	|			И ПланыПотребленияМатериалов.ПланПроизводства = ВТКоличествоПартий.ПланПроизводства
	|			И ПланыПотребленияМатериалов.Спецификация = ВТКоличествоПартий.Спецификация
	|			И ПланыПотребленияМатериалов.НазначениеПродукции = ВТКоличествоПартий.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыЗанятостиТрудовыхРесурсов.КоличествоНаЕдиницуПродукции * ВТКоличествоПартий.ЕдиницПартийИзделий КАК Количество,
	|	ПланыЗанятостиТрудовыхРесурсов.*
	|ИЗ
	|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК ПланыЗанятостиТрудовыхРесурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоПартий КАК ВТКоличествоПартий
	|		ПО ПланыЗанятостиТрудовыхРесурсов.ДатаПроизводства = ВТКоличествоПартий.ДатаПроизводства
	|			И ПланыЗанятостиТрудовыхРесурсов.ПланПроизводства = ВТКоличествоПартий.ПланПроизводства
	|			И ПланыЗанятостиТрудовыхРесурсов.Спецификация = ВТКоличествоПартий.Спецификация
	|			И ПланыЗанятостиТрудовыхРесурсов.НазначениеПродукции = ВТКоличествоПартий.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|УНИЧТОЖИТЬ ВТИтогиПересчитать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКоличествоНаЕдиницуПартию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКоличествоПартий";
	
КонецФункции

#КонецОбласти

#Область Разузлование

Процедура РазузловатьПродукцию(ПланПроизводства, МенеджерВременныхТаблиц, Движения)
	
	Запрос = Новый Запрос(ТекстЗапросаОчередьРазузлованияПродукции());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Продукция = Запрос.Выполнить().Выгрузить();
	
	Измерения = Новый Структура("Назначение, Спецификация, Период, Номенклатура, Характеристика, БольшеНуля");
	ЗаполнитьЗначенияСвойств(Измерения, Продукция[0]);
	
	СпецификацииСНечеткойХарактеристикой = Справочники.РесурсныеСпецификации.СпецификацииСНечеткойХарактеристикойИзделий(
		Продукция.ВыгрузитьКолонку("Спецификация"));
	
	ДанныеСпецификации = Неопределено;
	ПараметрыСпецификации = Неопределено;
	Строки = Новый Массив;
	
	Для Индекс = 0 По Продукция.Количество()-1 Цикл
		
		Строка = Продукция[Индекс];
		
		ИзменилисьНечеткиеХарактеристики = ЗначениеЗаполнено(Строка.Характеристика)
			И СпецификацииСНечеткойХарактеристикой.Найти(Строка.Спецификация) <> Неопределено
			И (Строка.Номенклатура <> Измерения.Номенклатура
				ИЛИ Строка.Характеристика <> Измерения.Характеристика);
		
		ИзменилисьПараметрыСпецификации = Строка.Назначение <> Измерения.Назначение
			ИЛИ Строка.Спецификация <> Измерения.Спецификация
			ИЛИ ИзменилисьНечеткиеХарактеристики;
		
		ИзменилисьПрочиеПараметры = Строка.Период <> Измерения.Период
			ИЛИ Строка.БольшеНуля <> Измерения.БольшеНуля;
			
		Если ИзменилисьПараметрыСпецификации ИЛИ ИзменилисьПрочиеПараметры Тогда
			
			РазузловатьИДобавитьДвижения(ДанныеСпецификации, ПараметрыСпецификации, Строки, Движения, Измерения.БольшеНуля);
			
			Если ИзменилисьПараметрыСпецификации Тогда
				
				ДанныеСпецификации = Неопределено;
				ПараметрыСпецификации = Неопределено;
				
			КонецЕсли;
			
			Строки.Очистить();
			ЗаполнитьЗначенияСвойств(Измерения, Строка);
			
		КонецЕсли;
		
		Строки.Добавить(Строка);
		
	КонецЦикла;
	
	РазузловатьИДобавитьДвижения(ДанныеСпецификации, ПараметрыСпецификации, Строки, Движения, Измерения.БольшеНуля);
	
	ЗаполнитьПериодВПланахПотребленияИЗанятости(ПланПроизводства, Движения);
	
КонецПроцедуры

Процедура РазузловатьИДобавитьДвижения(ДанныеСпецификации, ПараметрыСпецификации, Изделия, Движения, БольшеНуля)
	
	РазузловатьПересчитатьСпецификацию(Изделия, ДанныеСпецификации, ПараметрыСпецификации);
	
	ДобавитьДвиженияВПланыПроизводства(Изделия, Движения, ПараметрыСпецификации);
	
	ЗначенияЗаполнения = ЗначенияЗаполненияРегистровПотребностей(Изделия, ПараметрыСпецификации);
	Знак = ?(БольшеНуля, 1, -1);
	
	Для каждого Данные Из ДанныеСпецификации.ДанныеСпецификаций Цикл
		
		ЗначенияЗаполнения.Вставить("НазначениеПродукции", Данные.Назначение);
		
		// Планы выпуска изделий
		ЗначенияЗаполнения.Вставить("Спецификация", Данные.Спецификация);
		
		Если ЗначенияЗаполнения.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			ЗначенияЗаполнения.Вставить("Назначение", Данные.Назначение);
		ИначеЕсли ЗначенияЗаполнения.Свойство("Назначение") Тогда
			ЗначенияЗаполнения.Удалить("Назначение");
		КонецЕсли;
		
		ТипВыпуска = Перечисления.ТипыВыпусковПлановПроизводства.Основной;
		ДобавитьДвиженияВПланыВыпускаИзделий(ЗначенияЗаполнения, Движения, Данные.ВыходныеИзделия, ТипВыпуска, Знак);
			
		ТипВыпуска = Перечисления.ТипыВыпусковПлановПроизводства.Побочный;
		ДобавитьДвиженияВПланыВыпускаИзделий(ЗначенияЗаполнения, Движения, Данные.ВозвратныеОтходы, ТипВыпуска, Знак);
		
		// Планы потребления материалов
		ЗначенияЗаполнения.Вставить("Спецификация", ЗначенияЗаполнения.СпецификацияПродукции);
		ЗначенияЗаполнения.Вставить("Назначение", Данные.Назначение);
		
		ДобавитьДвиженияМатериалыВПланыПотребленияМатериалов(ЗначенияЗаполнения, Движения, Данные.МатериалыИУслуги, Знак);
		
		
		// Планы по трудозатратам и ВРЦ
		ДобавитьДвиженияВПланыЗанятостиТрудовыхРесурсов(ЗначенияЗаполнения, Движения, Данные.Трудозатраты, Знак);
		
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаОчередьРазузлованияПродукции()
	
	Возврат
	"ВЫБРАТЬ
	|	Продукция.*,
	|	ВЫРАЗИТЬ(Продукция.ПланПроизводства КАК Документ.ПланПроизводства).УправлениеПроизводством2_2 КАК УправлениеПроизводством2_2,
	|	ВЫРАЗИТЬ(Продукция.ПланПроизводства КАК Документ.ПланПроизводства).СпособРасчетаПотребностейВМатериалах КАК СпособРасчетаПотребностейВМатериалах,
	|	ВЫБОР
	|		КОГДА Продукция.Количество > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БольшеНуля
	|ИЗ
	|	ПродукцияРазузловать КАК Продукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	Назначение, Спецификация, Период, Номенклатура, Характеристика, БольшеНуля";
	
КонецФункции

Процедура РазузловатьПересчитатьСпецификацию(Изделия, ДанныеСпецификации, ПараметрыСпецификации)
	
	Если ДанныеСпецификации = Неопределено
		ИЛИ ПараметрыСпецификации.НечеткиеХарактеристики Тогда
		
		РазузловатьСпецификациюИзделий(Изделия, ДанныеСпецификации, ПараметрыСпецификации);
		
	Иначе
		
		ЕдиницПартийИзделий = ЕдиницПартийИзделийВКоллекции(Изделия, ПараметрыСпецификации);
		
		Если ЕдиницПартийИзделий <> ПараметрыСпецификации.ЕдиницПартийИзделий Тогда
		
			Если ПараметрыСпецификации.ПовторноеРазузлование
				ИЛИ ЕдиницПартийИзделий = 0 Тогда
				
				РазузловатьСпецификациюИзделий(Изделия, ДанныеСпецификации, ПараметрыСпецификации);
				
			Иначе
				
				ПересчитатьДанныеСпецификацииПоКоличествуПартий(ЕдиницПартийИзделий, ДанныеСпецификации, ПараметрыСпецификации);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазузловатьСпецификациюИзделий(Изделия, ДанныеСпецификации, ПараметрыСпецификации)
	
	Потребности = ПотребностиДляПолученияДанныхСпецификаций(Изделия);
	
	ПараметрыВыборкиДанных = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных();
		
	Если Изделия[0].УправлениеПроизводством2_2 Тогда
		ПараметрыВыборкиДанных.ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения;
	Иначе
		ПараметрыВыборкиДанных.ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводствоДляПланов;
	КонецЕсли;
	
	ПараметрыВыборкиДанных.РассчитыватьДляПлановПроизводства = Истина;
	ПараметрыВыборкиДанных.СпособРасчетаМатериалов = Изделия[0].СпособРасчетаПотребностейВМатериалах;
	ПараметрыВыборкиДанных.ОкруглятьКоличествоШтучныхТоваров = Ложь;
	
	ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоПотребности(
		Потребности,
		ПараметрыВыборкиДанных);
	
	Если ДанныеСпецификации.ЕстьОшибка Тогда
		
		ВызватьИсключение ДанныеСпецификации.ОшибкаТекст;
		
	КонецЕсли;
	
	Для каждого Элемент Из ДанныеСпецификации.ДанныеСпецификаций Цикл
		Справочники.РесурсныеСпецификации.ИсключитьПроизводимыеНаЭтапеПолуфабрикаты(Элемент.МатериалыИУслуги, Элемент.ВозвратныеОтходы);
	КонецЦикла;
	
	ЗаполнитьПараметрыСпецификации(ДанныеСпецификации, Изделия, ПараметрыСпецификации);
	
КонецПроцедуры

Функция ПотребностиДляПолученияДанныхСпецификаций(Изделия)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ПланПроизводства"));
	Результат.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ТипыСклад = Новый Массив;
	ТипыСклад.Добавить(Тип("СправочникСсылка.Склады"));
	ТипыСклад.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ОТСклад = Новый ОписаниеТипов(ТипыСклад);
	Результат.Колонки.Добавить("Получатель", ОТСклад);
	Результат.Колонки.Добавить("Отправитель", ОТСклад);
	
	Результат.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Результат.Колонки.Добавить("ПодразделениеДиспетчер", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ДатаЗапуска", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаВыпуска", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("РазмещениеВыпуска",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПривязкиОперацийПроизводства"));
		
	ОТЭтап = Новый ОписаниеТипов("Неопределено");
	Результат.Колонки.Добавить("ЭтапИсточник", ОТЭтап);
	
	Результат.Колонки.Добавить("Обособленно", Новый ОписаниеТипов("Булево"));
	
	Для каждого Изделие Из Изделия Цикл
		
		НоваяСтрока = Результат.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Изделие);
		
		НоваяСтрока.ПодразделениеДиспетчер = Изделие.Подразделение;
		НоваяСтрока.ДатаЗапуска = Изделие.ДатаПроизводства;
		НоваяСтрока.ДатаВыпуска = Изделие.ДатаПроизводства;
		НоваяСтрока.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию;
		НоваяСтрока.Обособленно = Истина;
		
		НоваяСтрока.Количество = ?(Изделие.Количество > 0, Изделие.Количество, -Изделие.Количество);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыСпецификации(ДанныеСпецификации, Изделия, ПараметрыСпецификации)
	
	ДанныеКорневыхСпецификаций = ДанныеКорневыхСпецификаций(Изделия[0].Спецификация, ДанныеСпецификации);
	
	ЕдиницПартийИзделий = 0;
	НечеткиеХарактеристики = Ложь;
	СтруктураПоиска = Новый Структура("ХарактеристикиИспользуются, ЛюбаяХарактеристика", Истина, Истина);
	
	Для каждого Данные Из ДанныеКорневыхСпецификаций Цикл
		
		ЕдиницПартийИзделий = ЕдиницПартийИзделий + Данные.КоличествоПартийВыпуска;
		
		Если НЕ НечеткиеХарактеристики Тогда
			
			НечеткиеХарактеристики = Данные.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1
				ИЛИ Данные.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1
				ИЛИ Данные.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыпускПроизвольнымиПорциями = ?(ДанныеКорневыхСпецификаций.ВГраница() <> -1,
		ДанныеКорневыхСпецификаций[0].ВыпускПроизвольнымиПорциями, Ложь);
	
	НекратныйВыпускПФ = Ложь;
	Для каждого Изделие Из Изделия Цикл
		Если Изделие.ЭтоПолуфабрикат Тогда
			
			НекратныйВыпускПФ = ?(ДанныеКорневыхСпецификаций.ВГраница() <> -1,
				ДанныеКорневыхСпецификаций[0].ОсновноеИзделие.КоличествоНаЕдиницуПартииВыпуска <> 1, Ложь);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыСпецификации = Новый Структура;
	
	ПараметрыСпецификации.Вставить("НечеткиеХарактеристики", НечеткиеХарактеристики);
	ПараметрыСпецификации.Вставить("ВыпускПроизвольнымиПорциями", ВыпускПроизвольнымиПорциями);
	ПараметрыСпецификации.Вставить("ЕдиницПартийИзделий", ЕдиницПартийИзделий);
	
	ПараметрыСпецификации.Вставить(
		"ПовторноеРазузлование",
		НечеткиеХарактеристики
			ИЛИ НекратныйВыпускПФ
			ИЛИ ПовторноеРазузлованиеСпецификации(ДанныеСпецификации));
	
	ПараметрыСпецификации.Вставить(
		"Изделия",
		ИзделияСпецификаций(ДанныеКорневыхСпецификаций, ЕдиницПартийИзделий));
	
КонецПроцедуры

Функция ДанныеКорневыхСпецификаций(Спецификация, ДанныеСпецификации)
	
	Результат = Новый Массив;
	
	Для каждого Элемент Из ДанныеСпецификации.ДанныеСпецификаций Цикл
		
		Если Элемент.Спецификация = Спецификация Тогда
			
			Результат.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПовторноеРазузлованиеСпецификации(ДанныеСпецификации)
	
	ПовторноеРазузлование = Ложь;
	СоставТЧ = СтрРазделить("ВыходныеИзделия,МатериалыИУслуги,ВозвратныеОтходы,Трудозатраты,ВидыРабочихЦентров",",");
	
	Для каждого Элемент Из ДанныеСпецификации.ДанныеСпецификаций Цикл
		
		Если Элемент.НекратныйВыпуск
			ИЛИ Элемент.ВыпускПроизвольнымиПорциями
			ИЛИ Элемент.ОптимальнаяПартияВыпуска <> 0
			ИЛИ Элемент.МинимальнаяПартияВыпуска <> 0 Тогда
			ПовторноеРазузлование = Истина;
			Прервать;
		КонецЕсли;
		
		Для каждого ИмяТЧ Из СоставТЧ Цикл
			Если Элемент.Свойство(ИмяТЧ) Тогда
				Для каждого ДанныеСтроки Из Элемент[ИмяТЧ] Цикл
					
					ЕстьРасчетПоФормулам = ПустаяСтрока(ДанныеСтроки.АлгоритмРасчетаКоличества) <> Истина;
					ЕстьВероятность = (ИмяТЧ = "МатериалыИУслуги") И ДанныеСтроки.Вероятность <> 0;
					Если ЕстьРасчетПоФормулам ИЛИ ЕстьВероятность Тогда
						ПовторноеРазузлование = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			Если ПовторноеРазузлование Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПовторноеРазузлование Тогда
			Прервать;
		КонецЕсли;
		
		НекратныеНормативыВРЦ = Ложь;
		Для каждого Этап Из Элемент.Этапы Цикл
			НекратныеНормативыВРЦ = Этап.ПланироватьРаботуВидовРабочихЦентров
				И Этап.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий <> 1;
			Если НекратныеНормативыВРЦ Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НекратныеНормативыВРЦ Тогда
			ПовторноеРазузлование = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПовторноеРазузлование;
	
КонецФункции

Функция ИзделияСпецификаций(ДанныеСпецификаций, ЕдиницПартийИзделий)
	
	Результат = Неопределено;
	
	Для каждого Данные Из ДанныеСпецификаций Цикл
		
		ИмяТЧ = ?(Данные.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка,
			"ВходящиеИзделия",
			"ВыходныеИзделия");
		
		Если Результат = Неопределено Тогда
			
			Результат = Данные[ИмяТЧ].Скопировать(, "Номенклатура, Характеристика, Количество");
			
		Иначе
			
			Для каждого Строка Из Данные[ИмяТЧ] Цикл
				
				ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка, "Номенклатура, Характеристика, Количество");
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Свернуть("Номенклатура, Характеристика", "Количество");
	
	Результат.Колонки.Добавить("КоличествоНаЕдиницуИзделий", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Для каждого Строка Из Результат Цикл
		
		Строка.КоличествоНаЕдиницуИзделий = Строка.Количество/ЕдиницПартийИзделий;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЕдиницПартийИзделийВКоллекции(Изделия, ПараметрыСпецификации)
	
	Если Изделия.Количество() <> 1 Тогда
		
		ТаблицаИтоги = Новый ТаблицаЗначений;
		ТаблицаИтоги.Колонки.Добавить("Номенклатура");
		ТаблицаИтоги.Колонки.Добавить("Характеристика");
		ТаблицаИтоги.Колонки.Добавить("Количество");
		
		Для каждого Изделие Из Изделия Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаИтоги.Добавить(), Изделие);
		КонецЦикла;
		
		ТаблицаИтоги.Свернуть("Номенклатура, Характеристика", "Количество");
		
		Результат = 1;
		Для каждого Строка Из ТаблицаИтоги Цикл
			ЕдиницПартий = ЕдиницПартийПоПараметрамСпецификации(Строка, ПараметрыСпецификации);
			Результат = Макс(Результат, ЕдиницПартий);
		КонецЦикла;
		
	Иначе
		
		Результат = ЕдиницПартийПоПараметрамСпецификации(Изделия[0], ПараметрыСпецификации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕдиницПартийПоПараметрамСпецификации(Потребность, ПараметрыСпецификации)
	
	СтрокаИзделия = ИзделиеПоПараметрамСпецификации(Потребность, ПараметрыСпецификации);
	Результат = 0;
	
	Если СтрокаИзделия <> Неопределено Тогда
		
		Количество = МодульЧисла(Потребность.Количество);
		
		Если ПараметрыСпецификации.ВыпускПроизвольнымиПорциями
			ИЛИ Количество % СтрокаИзделия.КоличествоНаЕдиницуИзделий = 0 Тогда
			
			Результат = Количество/СтрокаИзделия.КоличествоНаЕдиницуИзделий;
		Иначе
			
			Результат = Цел(Количество/СтрокаИзделия.КоличествоНаЕдиницуИзделий) + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИзделиеПоПараметрамСпецификации(Потребность, ПараметрыСпецификации)
	
	Результат = Неопределено;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика",
		Потребность.Номенклатура, Потребность.Характеристика);
	
	НайденныеСтроки = ПараметрыСпецификации.Изделия.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Результат = НайденныеСтроки[0];
		
	ИначеЕсли ЗначениеЗаполнено(Потребность.Характеристика) Тогда
		
		СтруктураПоиска.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
		НайденныеСтроки = ПараметрыСпецификации.Изделия.НайтиСтроки(СтруктураПоиска);
	
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Результат = НайденныеСтроки[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПересчитатьДанныеСпецификацииПоКоличествуПартий(ЕдиницПартийИзделий, ДанныеСпецификации, ПараметрыСпецификации)
	
	ПартийБыло = ПараметрыСпецификации.ЕдиницПартийИзделий;
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить("ВыходныеИзделия");
	ИменаТЧ.Добавить("ВозвратныеОтходы");
	ИменаТЧ.Добавить("ВходящиеИзделия");
	ИменаТЧ.Добавить("МатериалыИУслуги");
	ИменаТЧ.Добавить("Трудозатраты");
	// Таблицу с ВРЦ не надо пересчитывать, так как ее данные рассчитаны без учета
	// количества ед/партий изделий.
	
	Для каждого Элемент Из ДанныеСпецификации.ДанныеСпецификаций Цикл
		
		Для каждого ИмяТЧ Из ИменаТЧ Цикл
			
			Для каждого Строка Из Элемент[ИмяТЧ] Цикл
				Строка.Количество = Строка.Количество/ПартийБыло * ЕдиницПартийИзделий;
			КонецЦикла;
			
		КонецЦикла;
		
		Элемент.КоличествоПартийВыпуска = Элемент.КоличествоПартийВыпуска/ПартийБыло * ЕдиницПартийИзделий;
		
	КонецЦикла;
	
	ПараметрыСпецификации.ЕдиницПартийИзделий = ЕдиницПартийИзделий;
	
КонецПроцедуры

Процедура ДобавитьДвиженияВПланыПроизводства(Изделия, Движения, ПараметрыСпецификации)
	
	Для каждого Изделие Из Изделия Цикл
		
		НоваяСтрока = Движения.ПланыПроизводства.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Изделие);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСпецификации, "ПовторноеРазузлование");
		
		НоваяСтрока.Активность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначенияЗаполненияРегистровПотребностей(Изделия, ПараметрыСпецификации)
	
	Результат = Новый Структура;
	
	ДанныеЗаполнения = Изделия[0];
	
	Результат.Вставить("ДатаПроизводства",             ДанныеЗаполнения.ДатаПроизводства);
	Результат.Вставить("ПланПроизводства",             ДанныеЗаполнения.ПланПроизводства);
	Результат.Вставить("Регистратор",                  ДанныеЗаполнения.Регистратор);
	Результат.Вставить("ПодразделениеДиспетчер",       ДанныеЗаполнения.Подразделение);
	Результат.Вставить("НоменклатураПродукции",        ДанныеЗаполнения.Номенклатура);
	Результат.Вставить("ХарактеристикаПродукции",      ДанныеЗаполнения.Характеристика);
	Результат.Вставить("Сценарий",                     ДанныеЗаполнения.Сценарий);
	Результат.Вставить("СпецификацияПродукции",        ДанныеЗаполнения.Спецификация);
	Результат.Вставить("ЭтоПолуфабрикат",              ДанныеЗаполнения.ЭтоПолуфабрикат);
	Результат.Вставить("ТипПроизводственногоПроцесса", ДанныеЗаполнения.ТипПроизводственногоПроцесса);
	Результат.Вставить("ЕдиницПартийИзделий",          ПараметрыСпецификации.ЕдиницПартийИзделий);
	Результат.Вставить("Активность",                   Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьДвиженияВПланыВыпускаИзделий(ЗначенияЗаполнения, Движения, ТаблицаИсточник, ТипВыпуска, Знак)
	
	Для каждого Строка Из ТаблицаИсточник Цикл
		
		Если Строка.КлючСвязиПолучатель <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Движения.ПланыВыпускаИзделий.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
		
		Если ЗначенияЗаполнения.ЭтоПолуфабрикат
			И Строка.Номенклатура = ЗначенияЗаполнения.НоменклатураПродукции
			И Строка.Характеристика = ЗначенияЗаполнения.ХарактеристикаПродукции Тогда
			НоваяСтрока.ТипВыпуска = Перечисления.ТипыВыпусковПлановПроизводства.Полуфабрикат;
		Иначе
			НоваяСтрока.ТипВыпуска = ТипВыпуска;
		КонецЕсли;
		
		НоваяСтрока.ПодразделениеИсполнитель = Строка.ПодразделениеЭтапа;
		НоваяСтрока.КоличествоНаЕдиницуПродукции = Строка.Количество/ЗначенияЗаполнения.ЕдиницПартийИзделий;
		
		НоваяСтрока.Количество = НоваяСтрока.Количество * Знак;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДвиженияМатериалыВПланыПотребленияМатериалов(ЗначенияЗаполнения, Движения, ТаблицаИсточник, Знак)
	
	Для каждого Строка Из ТаблицаИсточник Цикл
		
		Если ЗначениеЗаполнено(Строка.СпособПолученияПолуфабриката)
			ИЛИ Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Движения.ПланыПотребленияМатериалов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
		
		НоваяСтрока.ПодразделениеИсполнитель = Строка.Подразделение;
		НоваяСтрока.КоличествоНаЕдиницуПродукции = Строка.Количество/ЗначенияЗаполнения.ЕдиницПартийИзделий;
		
		Если Строка.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Обособленно Тогда
			НоваяСтрока.Назначение = Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
		
		НоваяСтрока.ЭтоПолуфабрикат = Строка.Запланировать;
		НоваяСтрока.Количество = НоваяСтрока.Количество * Знак;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ДобавитьДвиженияВПланыЗанятостиТрудовыхРесурсов(ЗначенияЗаполнения, Движения, ТаблицаИсточник, Знак)
	
	Для каждого Строка Из ТаблицаИсточник Цикл
		
		НоваяСтрока = Движения.ПланыЗанятостиТрудовыхРесурсов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
		
		НоваяСтрока.ПодразделениеИсполнитель = Строка.Подразделение;
		НоваяСтрока.КоличествоНаЕдиницуПродукции = Строка.Количество/ЗначенияЗаполнения.ЕдиницПартийИзделий;
		НоваяСтрока.Количество = НоваяСтрока.Количество * Знак;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьДатуЗапускаВыпускаВПланахПроизводства(ПланПроизводства, Таблица)
	
	СтрокиИскатьНазад = Новый Массив;
	СтрокиИскатьВперед = Новый Массив;
	
	СтруктураПоиска = Новый Структура("ДатаЗапускаВыпуска", '00010101');
	Для каждого Строка Из Таблица.НайтиСтроки(СтруктураПоиска) Цикл
		
		Если Строка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			ИЛИ Строка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
			СтрокиИскатьНазад.Добавить(Строка);
		ИначеЕсли Строка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			СтрокиИскатьВперед.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПланПроизводства,
		"Сценарий, СпособРасчетаПотребностейВМатериалах");
	
	Если СтрокиИскатьНазад.Количество() > 0 Тогда
		Планирование.ПолучитьДлительностьСпецификацийИЗаполнитьДатыПоГрафику(
			СтрокиИскатьНазад,
			"Период",
			"ДатаЗапускаВыпуска",
			Реквизиты.Сценарий,
			Ложь,
			Реквизиты.СпособРасчетаПотребностейВМатериалах);
	КонецЕсли;
	
	Если СтрокиИскатьВперед.Количество() > 0 Тогда
		Планирование.ПолучитьДлительностьСпецификацийИЗаполнитьДатыПоГрафику(
			СтрокиИскатьВперед,
			"Период",
			"ДатаЗапускаВыпуска",
			Реквизиты.Сценарий,
			Истина,
			Реквизиты.СпособРасчетаПотребностейВМатериалах);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПериодВПланахПотребленияИЗанятости(ПланПроизводства, Движения)
	
	СтруктураПоиска = Новый Структура("Период", '00010101');
	КолонкиПоиска = "ДатаПроизводства, ДнейОтПотребности";
	
	СтрокиИскатьВперед = Новый ТаблицаЗначений;
	СтрокиИскатьВперед.Колонки.Добавить("СтрокаТаблицыДвижений", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	СтрокиИскатьВперед.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	СтрокиИскатьВперед.Колонки.Добавить("ДнейОтПотребности", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	СтрокиИскатьНазад = СтрокиИскатьВперед.Скопировать();
	
	Для каждого КлючИЗначение Из Движения Цикл
		
		Если КлючИЗначение.Ключ = "ПланыПроизводства" Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = КлючИЗначение.Значение.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			НоваяСтрока = ?(Строка.ДнейОтПотребности >= 0,
				СтрокиИскатьВперед.Добавить(),
				СтрокиИскатьНазад.Добавить());
			
			НоваяСтрока.СтрокаТаблицыДвижений = Строка;
			НоваяСтрока.ДатаПроизводства = Строка.ДатаПроизводства;
			НоваяСтрока.ДнейОтПотребности = ?(Строка.ДнейОтПотребности >= 0,
				Строка.ДнейОтПотребности,
				-Строка.ДнейОтПотребности);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтрокиИскатьВперед.Количество() = 0
		И СтрокиИскатьНазад.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч = 1 По 2 Цикл
		
		Таблица = ?(Сч = 1, СтрокиИскатьВперед, СтрокиИскатьНазад);
		Если Таблица.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаСвернутая = Таблица.Скопировать(, КолонкиПоиска);
		ТаблицаСвернутая.Свернуть(КолонкиПоиска);
		
		Периоды = ПериодыПлановПотребленияИЗанятости(ПланПроизводства, ТаблицаСвернутая, Сч = 1);
		Периоды.Индексы.Добавить(КолонкиПоиска);
		
		СтруктураПоиска = Новый Структура(КолонкиПоиска);
		
		Для каждого Строка Из Таблица Цикл
		
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка, КолонкиПоиска);
			НайденныеСтроки = Периоды.НайтиСтроки(СтруктураПоиска);
			
			Строка.СтрокаТаблицыДвижений.Период = НайденныеСтроки[0].Период;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПериодыПлановПотребленияИЗанятости(ПланПроизводства, СрокиВыпуска, ИскатьВперед)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СрокиВыпуска.ДатаПроизводства КАК ДатаОтсчета,
		|	СрокиВыпуска.ДнейОтПотребности КАК ЧислоДней
		|ПОМЕСТИТЬ ВтДатыОтсчета
		|ИЗ
		|	&СрокиВыпуска КАК СрокиВыпуска");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СрокиВыпуска", СрокиВыпуска);
	Запрос.Выполнить();
	
	Результат = Планирование.ПолучитьДатыПоГрафику(
		Запрос.МенеджерВременныхТаблиц,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланПроизводства, "Сценарий"),
		ИскатьВперед);
	
	Результат.Колонки.ДатаОтсчета.Имя = "ДатаПроизводства";
	Результат.Колонки.ЧислоДней.Имя = "ДнейОтПотребности";
	Результат.Колонки.ДатаПоГрафику.Имя = "Период";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаписьДвижений

Процедура ЗаписатьДвижения(Движения, ПланПроизводства, МенеджерВременныхТаблиц, ИсключитьСторно)
	
	АктуальныеДвижения = АктуальныеДвиженияОчереди(ПланПроизводства, МенеджерВременныхТаблиц, ИсключитьСторно);
	
	ДокументОбъект = ПланПроизводства.ПолучитьОбъект();
	
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ЭтоНовый",    Ложь);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ПланПроизводства, ДополнительныеСвойства);
	
	Для каждого КлючИЗначение Из Движения Цикл
		
		ИмяРегистра = КлючИЗначение.Ключ;
		
		ДвиженияПоРегистру = ДокументОбъект.Движения[ИмяРегистра];
		
		ДвиженияПоРегистру.Загрузить(АктуальныеДвижения[ИмяРегистра]);
		
		Для каждого Строка Из КлючИЗначение.Значение Цикл
			
			Запись = ДвиженияПоРегистру.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Запись.Статус = ДокументОбъект.Статус;
			
		КонецЦикла;
		
		ДвиженияПоРегистру.Записывать = Истина;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Проведен = ЗаблокироватьИПроверитьПроведение(ПланПроизводства);
		
		Если Проведен Тогда
			ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ДокументОбъект);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
			
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Функция АктуальныеДвиженияОчереди(ПланПроизводства, МенеджерВременныхТаблиц, ИсключитьСторно)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Регистр.ПланПроизводства.Статус КАК Статус,
	|	*
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчета КАК ОчередьРасчета
	|		ПО Регистр.Период = ОчередьРасчета.ДатаПроизводства
	|			И Регистр.ПланПроизводства = ОчередьРасчета.ПланПроизводства
	|			И Регистр.Спецификация = ОчередьРасчета.Спецификация
	|			И Регистр.Назначение = ОчередьРасчета.Назначение
	|ГДЕ
	|	Регистр.Регистратор = &ПланПроизводства
	|	И ОчередьРасчета.Сценарий ЕСТЬ NULL
	|	И &УсловиеИсключитьСторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистр.ПланПроизводства.Статус КАК Статус,
	|	*
	|ИЗ
	|	РегистрНакопления.ПланыВыпускаИзделий КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчета КАК ОчередьРасчета
	|		ПО Регистр.ДатаПроизводства = ОчередьРасчета.ДатаПроизводства
	|			И Регистр.ПланПроизводства = ОчередьРасчета.ПланПроизводства
	|			И Регистр.СпецификацияПродукции = ОчередьРасчета.Спецификация
	|			И Регистр.НазначениеПродукции = ОчередьРасчета.Назначение
	|ГДЕ
	|	Регистр.Регистратор = &ПланПроизводства
	|	И ОчередьРасчета.Сценарий ЕСТЬ NULL
	|	И &УсловиеИсключитьСторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистр.ПланПроизводства.Статус КАК Статус,
	|	*
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияМатериалов КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчета КАК ОчередьРасчета
	|		ПО Регистр.ДатаПроизводства = ОчередьРасчета.ДатаПроизводства
	|			И Регистр.ПланПроизводства = ОчередьРасчета.ПланПроизводства
	|			И Регистр.Спецификация = ОчередьРасчета.Спецификация
	|			И Регистр.НазначениеПродукции = ОчередьРасчета.Назначение
	|ГДЕ
	|	Регистр.Регистратор = &ПланПроизводства
	|	И ОчередьРасчета.Сценарий ЕСТЬ NULL
	|	И &УсловиеИсключитьСторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистр.ПланПроизводства.Статус КАК Статус,
	|	*
	|ИЗ
	|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчета КАК ОчередьРасчета
	|		ПО Регистр.ДатаПроизводства = ОчередьРасчета.ДатаПроизводства
	|			И Регистр.ПланПроизводства = ОчередьРасчета.ПланПроизводства
	|			И Регистр.Спецификация = ОчередьРасчета.Спецификация
	|			И Регистр.НазначениеПродукции = ОчередьРасчета.Назначение
	|ГДЕ
	|	Регистр.Регистратор = &ПланПроизводства
	|	И ОчередьРасчета.Сценарий ЕСТЬ NULL
	|	И &УсловиеИсключитьСторно
	|";
	
	Если ИсключитьСторно Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеИсключитьСторно", "Регистр.ПланПроизводства = &ПланПроизводства");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеИсключитьСторно", "ИСТИНА");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПланыПроизводства", МассивРезультатов[0].Выгрузить());
	
	Результат.Вставить("ПланыВыпускаИзделий", МассивРезультатов[1].Выгрузить());
	
	Результат.Вставить("ПланыПотребленияМатериалов", МассивРезультатов[2].Выгрузить());
	
	Результат.Вставить("ПланыЗанятостиТрудовыхРесурсов", МассивРезультатов[3].Выгрузить());
	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДопланированиеПолуфабрикатов

Процедура ДопланироватьПолуфабрикаты(ПланПроизводства, Параметры)
	
	Попытка
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ЕстьЗаписиВОчереди = ОчередьПолуфабрикатов(ПланПроизводства, МенеджерВременныхТаблиц);
		
		Если ЕстьЗаписиВОчереди Тогда
			
			Таблицы = ПолучитьТаблицыДляДопланирования(ПланПроизводства, МенеджерВременныхТаблиц, Параметры);
			
			Если Таблицы.Допланировать.Количество() > 0 Тогда
				
				Для каждого Строка Из Таблицы.Допланировать Цикл
					
					ДопланироватьПолуфабрикат(Строка, Таблицы);
					
				КонецЦикла;
				
				ЗаписатьДопланированныеПолуфабрикаты(ПланПроизводства, Таблицы.Результаты);
				
			КонецЕсли;
			
			ОчиститьОчередьПолуфабрикатов(ПланПроизводства, МенеджерВременныхТаблиц);
			
		КонецЕсли;
		
	Исключение
		
		Параметры.КоличествоОшибок = Параметры.КоличествоОшибок + 1;
		
		ЗаписатьВЖурналОшибкуРассчета(ПланПроизводства, Параметры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДопланироватьПолуфабрикат(Полуфабрикат, Таблицы)
	
	Если Полуфабрикат.КоличествоЗапланировано = 0 Тогда
		
		ДобавитьВыпускПолуфабриката(Полуфабрикат, Таблицы, Полуфабрикат.КоличествоТребуется);
		
	Иначе
		
		Если ЧислаОдногоЗнака(Полуфабрикат.КоличествоТребуется, Полуфабрикат.КоличествоЗапланировано) Тогда
			
			Если МодульЧисла(Полуфабрикат.КоличествоТребуется) > МодульЧисла(Полуфабрикат.КоличествоЗапланировано) Тогда
				
				Количество = (Полуфабрикат.КоличествоЗапланировано - Полуфабрикат.КоличествоТребуется) * -1;
				ДобавитьВыпускПолуфабриката(Полуфабрикат, Таблицы, Количество);
				
			Иначе
				
				Количество = (Полуфабрикат.КоличествоТребуется - Полуфабрикат.КоличествоЗапланировано) * -1;
				УдалитьВыпускПолуфабриката(Полуфабрикат, Таблицы, Количество);
				
			КонецЕсли;
			
		Иначе
			
			УдалитьВыпускПолуфабриката(Полуфабрикат, Таблицы, Полуфабрикат.КоличествоЗапланировано);
			ДобавитьВыпускПолуфабриката(Полуфабрикат, Таблицы, Полуфабрикат.КоличествоТребуется);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОчередьПолуфабрикатов(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьРасчетаПлановПроизводства.ДатаПроизводства КАК ДатаПроизводства,
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчетаПлановПроизводства.Подразделение КАК Подразделение,
	|	ОчередьРасчетаПлановПроизводства.Назначение КАК Назначение,
	|	ОчередьРасчетаПлановПроизводства.Сценарий КАК Сценарий,
	|	ОчередьРасчетаПлановПроизводства.Номенклатура КАК Номенклатура,
	|	ОчередьРасчетаПлановПроизводства.Характеристика КАК Характеристика,
	|	ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов КАК ВыпускПолуфабрикатов,
	|	МАКСИМУМ(ОчередьРасчетаПлановПроизводства.Разделитель) КАК Разделитель
	|ПОМЕСТИТЬ ОчередьРасчетаПолуфабрикатов
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
	|ГДЕ
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства
	|	И ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьРасчетаПлановПроизводства.ДатаПроизводства,
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства,
	|	ОчередьРасчетаПлановПроизводства.Подразделение,
	|	ОчередьРасчетаПлановПроизводства.Назначение,
	|	ОчередьРасчетаПлановПроизводства.Сценарий,
	|	ОчередьРасчетаПлановПроизводства.Номенклатура,
	|	ОчередьРасчетаПлановПроизводства.Характеристика,
	|	ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьРасчетаПолуфабрикатов.ПланПроизводства
	|ИЗ
	|	ОчередьРасчетаПолуфабрикатов КАК ОчередьРасчетаПолуфабрикатов";
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьОчередьРасчета(ПланПроизводства);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
	
		ЕстьЗаписиВОчереди = НЕ МассивРезультатов[1].Пустой();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ЕстьЗаписиВОчереди;
	
КонецФункции

Процедура ОчиститьОчередьПолуфабрикатов(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьРасчетаПолуфабрикатов.ДатаПроизводства КАК ДатаПроизводства,
	|	ОчередьРасчетаПолуфабрикатов.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчетаПолуфабрикатов.Подразделение КАК Подразделение,
	|	ОчередьРасчетаПолуфабрикатов.Сценарий КАК Сценарий,
	|	ОчередьРасчетаПолуфабрикатов.Назначение КАК Назначение,
	|	ОчередьРасчетаПолуфабрикатов.Номенклатура КАК Номенклатура,
	|	ОчередьРасчетаПолуфабрикатов.Характеристика КАК Характеристика,
	|	ОчередьРасчетаПолуфабрикатов.ВыпускПолуфабрикатов КАК ВыпускПолуфабрикатов,
	|	ОчередьРасчетаПланаПроизводства.Разделитель КАК Разделитель
	|ИЗ
	|	ОчередьРасчетаПолуфабрикатов КАК ОчередьРасчетаПолуфабрикатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПланаПроизводства
	|		ПО ОчередьРасчетаПолуфабрикатов.ДатаПроизводства = ОчередьРасчетаПланаПроизводства.ДатаПроизводства
	|			И ОчередьРасчетаПолуфабрикатов.ПланПроизводства = ОчередьРасчетаПланаПроизводства.ПланПроизводства
	|			И ОчередьРасчетаПолуфабрикатов.Подразделение = ОчередьРасчетаПланаПроизводства.Подразделение
	|			И ОчередьРасчетаПолуфабрикатов.Сценарий = ОчередьРасчетаПланаПроизводства.Сценарий
	|			И ОчередьРасчетаПолуфабрикатов.Назначение = ОчередьРасчетаПланаПроизводства.Назначение
	|			И ОчередьРасчетаПолуфабрикатов.Номенклатура = ОчередьРасчетаПланаПроизводства.Номенклатура
	|			И ОчередьРасчетаПолуфабрикатов.Характеристика = ОчередьРасчетаПланаПроизводства.Характеристика
	|			И ОчередьРасчетаПолуфабрикатов.ВыпускПолуфабрикатов = ОчередьРасчетаПланаПроизводства.ВыпускПолуфабрикатов
	|			И ОчередьРасчетаПолуфабрикатов.Разделитель >= ОчередьРасчетаПланаПроизводства.Разделитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОчередьРасчетаПолуфабрикатов");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Очередь = МассивРезультатов[0].Выгрузить();
	
	РегистрыСведений.ОчередьРасчетаПланаПроизводства.ОчиститьОчередь(Очередь, ПланПроизводства);
	
КонецПроцедуры

Функция ПолучитьТаблицыДляДопланирования(ПланПроизводства, МенеджерВременныхТаблиц, Параметры)
	
	СоздатьВТПолуфабрикатыДляДопланирования(ПланПроизводства, МенеджерВременныхТаблиц);
	
	ПроверитьЗацикливаниеПолуфабрикатов(МенеджерВременныхТаблиц, Параметры);
	
	Результат = Новый Структура;
	
	// Таблица Допланировать содержит ПФ, которые необходимо добавить в план или исключить из плана.
	Результат.Вставить("Допланировать", ПолуфбрикатыДляДопланирования(МенеджерВременныхТаблиц));
	
	Если Результат.Допланировать.Количество() > 0 Тогда
		
		ТаблицыСпецификаций = СпецификацииДляДопланирования(МенеджерВременныхТаблиц);
		
		// Таблица Спецификации содержит данные существующих планов в разрезе спецификаций.
		Результат.Вставить("Спецификации", ТаблицыСпецификаций.Спецификации);
		
		// Таблица НоменклатураСпецификаций детализирует таблицу Спецификации до Номенклатур/Характеристик.
		Результат.Вставить("НоменклатураСпецификаций", ТаблицыСпецификаций.НоменклатураСпецификаций);
		
		// Таблица ПланПолуфабрикатов используется для уменьшения плана выпуска ПФ и содержит
		// привязку потребностей к выпуску (т.е. полный набор измерений регистра ПланыПроизводства).
		Результат.Вставить("ПланПолуфабрикатов", ПланПолуфабрикатов(МенеджерВременныхТаблиц));
		
		// Таблица Результаты содержит результаты допланирования - изменения регистра ПланыПроизводства.
		Результат.Вставить("Результаты", ТаблицаДопланированияПолуфабрикатов());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьВТПолуфабрикатыДляДопланирования(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьРасчетаПолуфабрикатов.ДатаПроизводства КАК ДатаВыпускаПолуфабриката,
		|	ОчередьРасчетаПолуфабрикатов.ПланПроизводства КАК ПланПроизводства,
		|	ОчередьРасчетаПолуфабрикатов.Подразделение КАК Подразделение,
		|	ОчередьРасчетаПолуфабрикатов.Назначение КАК Назначение,
		|	ОчередьРасчетаПолуфабрикатов.Сценарий КАК Сценарий,
		|	ОчередьРасчетаПолуфабрикатов.Номенклатура КАК Номенклатура,
		|	ОчередьРасчетаПолуфабрикатов.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ПланыПотребленияМатериаловОбороты.КоличествоОборот, 0) КАК КоличествоТребуется,
		|	ЕСТЬNULL(ПланыПроизводстваОбороты.КоличествоОборот, 0) КАК КоличествоЗапланировано
		|ПОМЕСТИТЬ ВТПолуфабрикаты
		|ИЗ
		|	ОчередьРасчетаПолуфабрикатов КАК ОчередьРасчетаПолуфабрикатов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПотребленияМатериалов.Обороты(, , День, ПланПроизводства = &ПланПроизводства) КАК ПланыПотребленияМатериаловОбороты
		|		ПО ОчередьРасчетаПолуфабрикатов.ДатаПроизводства = ПланыПотребленияМатериаловОбороты.Период
		|			И ОчередьРасчетаПолуфабрикатов.ПланПроизводства = ПланыПотребленияМатериаловОбороты.ПланПроизводства
		|			И ОчередьРасчетаПолуфабрикатов.Подразделение = ПланыПотребленияМатериаловОбороты.ПодразделениеДиспетчер
		|			И ОчередьРасчетаПолуфабрикатов.Назначение = ПланыПотребленияМатериаловОбороты.Назначение
		|			И ОчередьРасчетаПолуфабрикатов.Сценарий = ПланыПотребленияМатериаловОбороты.Сценарий
		|			И ОчередьРасчетаПолуфабрикатов.Номенклатура = ПланыПотребленияМатериаловОбороты.Номенклатура
		|			И ОчередьРасчетаПолуфабрикатов.Характеристика = ПланыПотребленияМатериаловОбороты.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства.Обороты(, , , ПланПроизводства = &ПланПроизводства) КАК ПланыПроизводстваОбороты
		|		ПО ОчередьРасчетаПолуфабрикатов.ДатаПроизводства = ПланыПроизводстваОбороты.ДатаВыпускаПолуфабриката
		|			И ОчередьРасчетаПолуфабрикатов.ПланПроизводства = ПланыПроизводстваОбороты.ПланПроизводства
		|			И ОчередьРасчетаПолуфабрикатов.Подразделение = ПланыПроизводстваОбороты.Подразделение
		|			И ОчередьРасчетаПолуфабрикатов.Назначение = ПланыПроизводстваОбороты.Назначение
		|			И ОчередьРасчетаПолуфабрикатов.Сценарий = ПланыПроизводстваОбороты.Сценарий
		|			И ОчередьРасчетаПолуфабрикатов.Номенклатура = ПланыПроизводстваОбороты.Номенклатура
		|			И ОчередьРасчетаПолуфабрикатов.Характеристика = ПланыПроизводстваОбороты.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ПланыПотребленияМатериаловОбороты.КоличествоОборот, 0) <> ЕСТЬNULL(ПланыПроизводстваОбороты.КоличествоОборот, 0)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Подразделение,
		|	ДатаВыпускаПолуфабриката
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПолуфабрикаты.Номенклатура КАК Номенклатура,
		|	ВТПолуфабрикаты.Характеристика КАК Характеристика,
		|	ВТПолуфабрикаты.Подразделение КАК Подразделение,
		|	ВТПолуфабрикаты.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
		|	ВЫБОР
		|		КОГДА &ЗаполнятьСпецификациюПоПериодам
		|			ТОГДА ВТПолуфабрикаты.ДатаВыпускаПолуфабриката
		|		КОГДА ВТПолуфабрикаты.ДатаВыпускаПолуфабриката < &НачалоПериода
		|			ТОГДА ВТПолуфабрикаты.ДатаВыпускаПолуфабриката
		|		ИНАЧЕ &НачалоПериода
		|	КОНЕЦ КАК НачалоПроизводства
		|ПОМЕСТИТЬ ВТНоменклатура
		|ИЗ
		|	ВТПолуфабрикаты КАК ВТПолуфабрикаты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВТПолуфабрикаты.Номенклатура,
		|	ВТПолуфабрикаты.Характеристика,
		|	ВТПолуфабрикаты.Подразделение,
		|	НачалоПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"
		+ УправлениеДаннымиОбИзделиях.ТекстЗапросаСоздатьВТСпецификацииНоменклатурыПоУмолчанию("ВТНоменклатура", Истина)
		+ "
		|ВЫБРАТЬ
		|	ВТНоменклатура.Номенклатура КАК Номенклатура,
		|	ВТНоменклатура.Характеристика КАК Характеристика,
		|	ВТНоменклатура.Подразделение КАК Подразделение,
		|	ВТНоменклатура.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
		|	МАКСИМУМ(Спецификации.Спецификация) КАК Спецификация
		|ПОМЕСТИТЬ ВТСпецификации
		|ИЗ
		|	ВТНоменклатура КАК ВТНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпецификацииНоменклатурыПоУмолчанию КАК Спецификации
		|		ПО ВТНоменклатура.Номенклатура = Спецификации.Номенклатура
		|			И ВТНоменклатура.Характеристика = Спецификации.Характеристика
		|			И ВТНоменклатура.Подразделение = Спецификации.Подразделение
		|			И ВТНоменклатура.НачалоПроизводства = Спецификации.НачалоПроизводства
		|ГДЕ
		|	Спецификации.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНоменклатура.Номенклатура,
		|	ВТНоменклатура.Характеристика,
		|	ВТНоменклатура.Подразделение,
		|	ВТНоменклатура.ДатаВыпускаПолуфабриката
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Подразделение,
		|	ДатаВыпускаПолуфабриката
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСпецификации.Спецификация              КАК Спецификация,
		|	ВТПолуфабрикаты.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
		|	ВТПолуфабрикаты.ПланПроизводства         КАК ПланПроизводства,
		|	ВТПолуфабрикаты.Подразделение            КАК Подразделение,
		|	ВТПолуфабрикаты.Назначение               КАК Назначение,
		|	ВТПолуфабрикаты.Сценарий                 КАК Сценарий,
		|	ВТПолуфабрикаты.Номенклатура             КАК Номенклатура,
		|	ВТПолуфабрикаты.Характеристика           КАК Характеристика,
		|	ВТПолуфабрикаты.КоличествоТребуется      КАК КоличествоТребуется,
		|	ВТПолуфабрикаты.КоличествоЗапланировано  КАК КоличествоЗапланировано
		|ПОМЕСТИТЬ ВТПолуфабрикатыДляДопланирования
		|ИЗ
		|	ВТПолуфабрикаты КАК ВТПолуфабрикаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпецификации КАК ВТСпецификации
		|		ПО ВТПолуфабрикаты.Номенклатура = ВТСпецификации.Номенклатура
		|			И ВТПолуфабрикаты.Характеристика = ВТСпецификации.Характеристика
		|			И ВТПолуфабрикаты.Подразделение = ВТСпецификации.Подразделение
		|			И ВТПолуфабрикаты.ДатаВыпускаПолуфабриката = ВТСпецификации.ДатаВыпускаПолуфабриката");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РеквизитыПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПланПроизводства,
		"ВидПлана.ЗаполнятьСпецификациюПоПериодам, НачалоПериода");
		
	Запрос.УстановитьПараметр(
		"ЗаполнятьСпецификациюПоПериодам",
		РеквизитыПлана.ВидПланаЗаполнятьСпецификациюПоПериодам);
	
	Запрос.УстановитьПараметр("НачалоПериода", РеквизитыПлана.НачалоПериода);
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроверитьЗацикливаниеПолуфабрикатов(МенеджерВременныхТаблиц, Параметры)
	
	Если Параметры.Свойство("СвязиСпецификаций") Тогда
		СвязиСпецификаций = Параметры.СвязиСпецификаций;
	Иначе
		СвязиСпецификаций = Новый Соответствие;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеЦикла = "";
	Спецификации = СвязиСпецификацийПродукцииИПолуфабрикатов(МенеджерВременныхТаблиц);
	
	Для каждого Строка Из Спецификации Цикл
		
		НайтиЦиклыВСвязяхСпецификацийРекурсивно(
			СвязиСпецификаций, Строка.Спецификация, Строка.СпецификацияПродукции, ОписаниеЦикла, Отказ);
		
		Если Отказ Тогда
			
			ОписаниеЦикла = ОписаниеЦикла + "\" + Строка.Спецификация;
			ТекстИсключения = СтрШаблон("ru = 'При планировании полуфабрикатов обнаружено зацикливание спецификаций: %1'", ОписаниеЦикла);
			ВызватьИсключение ТекстИсключения;
			
		Иначе
			
			Связь = СвязиСпецификаций.Получить(Строка.Спецификация);
			Если Связь = Неопределено Тогда
				СвязиСпецификаций.Вставить(
					Строка.Спецификация,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка.СпецификацияПродукции));
			Иначе
				Если Связь.Найти(Строка.СпецификацияПродукции) = Неопределено Тогда
					Связь.Добавить(Строка.СпецификацияПродукции);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.Вставить("СвязиСпецификаций", СвязиСпецификаций);
	
КонецПроцедуры

Функция СвязиСпецификацийПродукцииИПолуфабрикатов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланыПотребленияМатериалов.Спецификация КАК СпецификацияПродукции,
		|	Таблица.Спецификация КАК Спецификация
		|ИЗ
		|	ВТПолуфабрикатыДляДопланирования КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
		|		ПО Таблица.ДатаВыпускаПолуфабриката = ПланыПотребленияМатериалов.Период
		|			И Таблица.ПланПроизводства = ПланыПотребленияМатериалов.ПланПроизводства
		|			И Таблица.Подразделение = ПланыПотребленияМатериалов.ПодразделениеДиспетчер
		|			И Таблица.Назначение = ПланыПотребленияМатериалов.Назначение
		|			И Таблица.Сценарий = ПланыПотребленияМатериалов.Сценарий
		|			И Таблица.Номенклатура = ПланыПотребленияМатериалов.Номенклатура
		|			И Таблица.Характеристика = ПланыПотребленияМатериалов.Характеристика");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура НайтиЦиклыВСвязяхСпецификацийРекурсивно(СвязиСпецификаций, ЗначениеПоиска, Спецификация, ОписаниеЦикла, Отказ)
	
	Связь = СвязиСпецификаций.Получить(Спецификация);
	Если Связь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Предшественник Из Связь Цикл
		
		Если Предшественник = ЗначениеПоиска Тогда
			
			Отказ = Истина;
			ОписаниеЦикла = "" + ЗначениеПоиска;
			
		Иначе
			
			НайтиЦиклыВСвязяхСпецификацийРекурсивно(
				СвязиСпецификаций, ЗначениеПоиска, Предшественник, ОписаниеЦикла, Отказ);
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			ОписаниеЦикла = ОписаниеЦикла + "\" + Спецификация;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолуфбрикатыДляДопланирования(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Спецификация             КАК Спецификация,
		|	Таблица.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
		|	Таблица.ПланПроизводства         КАК ПланПроизводства,
		|	Таблица.Подразделение            КАК Подразделение,
		|	Таблица.Назначение               КАК Назначение,
		|	Таблица.Сценарий                 КАК Сценарий,
		|	Таблица.Номенклатура             КАК Номенклатура,
		|	Таблица.Характеристика           КАК Характеристика,
		|	Таблица.КоличествоТребуется      КАК КоличествоТребуется,
		|	Таблица.КоличествоЗапланировано  КАК КоличествоЗапланировано
		|ИЗ
		|	ВТПолуфабрикатыДляДопланирования КАК Таблица
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.ДатаВыпускаПолуфабриката");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СпецификацииДляДопланирования(МенеджерВременныхТаблиц)
	
	Спецификации = ИнициализироватьСпецификацииДляДопланирования();
	НоменклатураСпецификаций = ИнициализироватьНоменклатураСпецификацийДляДопланирования();
	
	Запрос = Новый Запрос(ТекстЗапросаСпецификацииДляДопланирования());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Разрезы = "ДатаПроизводства, Назначение, Спецификация";
	
	ЗапланированнаяНоменклатура = МассивРезультатов[3].Выгрузить();
	ЗапланированнаяНоменклатура.Индексы.Добавить(Разрезы);
	
	СтруктураПоиска = Новый Структура(Разрезы);
	
	ВыборкаДатаПроизводства = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДатаПроизводства.Следующий() Цикл
		
		ВыборкаНазначение = ВыборкаДатаПроизводства.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНазначение.Следующий() Цикл
					
			ВыборкаСпецификация = ВыборкаНазначение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСпецификация.Следующий() Цикл
				
				НоваяСтрока = Спецификации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСпецификация);
				НоваяСтрока.ПометкаУдаления = Ложь;
				
				ИндексыНоменклатуры = Новый Массив;
				ЗаполнитьОбщиеСвойства = Истина;
				
				Выборка = ВыборкаСпецификация.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					НоваяСтрокаНоменклатура = НоменклатураСпецификаций.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатура, Выборка);
					
					Если ЗаполнитьОбщиеСвойства Тогда
						ЗаполнитьОбщиеСвойства = Ложь;
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "ПланПроизводства, Подразделение, Сценарий");
					КонецЕсли;
					
					ИндексыНоменклатуры.Добавить(НоменклатураСпецификаций.Индекс(НоваяСтрокаНоменклатура));
					
				КонецЦикла;
				
				НоваяСтрока.ИндексыНоменклатуры = ИндексыНоменклатуры;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаСпецификация);
				НайденныеСтроки = ЗапланированнаяНоменклатура.НайтиСтроки(СтруктураПоиска);
				
				Для каждого Строка Из НайденныеСтроки Цикл
					
					СтрокаНоменклатуры = ПолучитьНоменклатуруСпецификации(
						Строка, НоменклатураСпецификаций, ИндексыНоменклатуры);
					
					Если НЕ СтрокаНоменклатуры = Неопределено Тогда
						
						СтрокаНоменклатуры.КоличествоЗапланировано = СтрокаНоменклатуры.КоличествоЗапланировано
							+ Строка.КоличествоЗапланировано;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Спецификации);
	
	Спецификации.Индексы.Добавить(ИзмеренияСпецификацииДопланированиеБезПериода());
	Спецификации.Индексы.Добавить(ИзмеренияСпецификацииДопланированиеСПериодом());
	
	Результат = Новый Структура;
	Результат.Вставить("Спецификации", Спецификации);
	Результат.Вставить("НоменклатураСпецификаций", НоменклатураСпецификаций);
	
	Возврат Результат;
	
КонецФункции

Функция ИзмеренияСпецификацииДопланированиеБезПериода()
	
	Возврат "ПланПроизводства, Подразделение, Спецификация, Назначение, Сценарий";
	
КонецФункции

Функция ИзмеренияСпецификацииДопланированиеСПериодом()
	
	Возврат "ПланПроизводства, Подразделение, Спецификация, Назначение, Сценарий, ДатаПроизводства";
	
КонецФункции

Функция ИнициализироватьСпецификацииДляДопланирования()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ДатаПроизводства");
	Результат.Колонки.Добавить("ПланПроизводства");
	Результат.Колонки.Добавить("Подразделение");
	Результат.Колонки.Добавить("Спецификация");
	Результат.Колонки.Добавить("Назначение");
	Результат.Колонки.Добавить("Сценарий");
	Результат.Колонки.Добавить("ИндексыНоменклатуры");
	Результат.Колонки.Добавить("ОграниченСрокПролеживания");
	Результат.Колонки.Добавить("ГраницаСрокаПролеживания");
	Результат.Колонки.Добавить("ПометкаУдаления");
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьНоменклатураСпецификацийДляДопланирования()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("ЛюбаяХарактеристика", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("КоличествоЗапланировано", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("КоличествоОптимальнаяПартия", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСпецификацииДляДопланирования()
	
	Возврат
	"ВЫБРАТЬ
	|	ПланыПроизводстваОбороты.Период КАК ДатаПроизводства,
	|	ПланыПроизводстваОбороты.ПланПроизводства КАК ПланПроизводства,
	|	ПланыПроизводстваОбороты.Подразделение КАК Подразделение,
	|	ПланыПроизводстваОбороты.Спецификация КАК Спецификация,
	|	ПланыПроизводстваОбороты.Назначение КАК Назначение,
	|	ПланыПроизводстваОбороты.Сценарий КАК Сценарий,
	|	ПланыПроизводстваОбороты.Номенклатура КАК Номенклатура,
	|	ПланыПроизводстваОбороты.Характеристика КАК Характеристика,
	|	ПланыПроизводстваОбороты.КоличествоОборот КАК КоличествоЗапланировано
	|ПОМЕСТИТЬ ВТПланы
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства.Обороты(
	|			&ТекущаяДата,
	|			,
	|			День,
	|			(ПланПроизводства, Подразделение, Назначение, Сценарий) В
	|				(ВЫБРАТЬ
	|					Т.ПланПроизводства,
	|					Т.Подразделение,
	|					Т.Назначение,
	|					Т.Сценарий
	|				ИЗ
	|					ОчередьРасчетаПолуфабрикатов КАК Т)) КАК ПланыПроизводстваОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПланы.ДатаПроизводства,
	|	ВТПланы.ПланПроизводства,
	|	ВТПланы.Подразделение,
	|	ВТПланы.Спецификация,
	|	ВТПланы.Назначение,
	|	ВТПланы.Сценарий
	|ПОМЕСТИТЬ ВТРазрезыПланов
	|ИЗ
	|	ВТПланы КАК ВТПланы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРазрезыПланов.ДатаПроизводства КАК ДатаПроизводства,
	|	ВТРазрезыПланов.ПланПроизводства КАК ПланПроизводства,
	|	ВТРазрезыПланов.Подразделение КАК Подразделение,
	|	ВТРазрезыПланов.Спецификация КАК Спецификация,
	|	ВТРазрезыПланов.Назначение КАК Назначение,
	|	ВТРазрезыПланов.Сценарий КАК Сценарий,
	|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	РесурсныеСпецификацииВыходныеИзделия.Характеристика КАК Характеристика,
	|	РесурсныеСпецификацииВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|	РесурсныеСпецификацииВыходныеИзделия.Количество * РесурсныеСпецификацииВыходныеИзделия.Ссылка.ОптимальнаяПартияВыпуска КАК КоличествоОптимальнаяПартия,
	|	ДОБАВИТЬКДАТЕ(ВТРазрезыПланов.ДатаПроизводства, ДЕНЬ, РесурсныеСпецификацииВыходныеИзделия.Ссылка.МаксимальныйСрокПролеживанияВыходныхИзделий) КАК ГраницаСрокаПролеживания,
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка.ОграниченСрокПролеживанияВыходныхИзделий КАК ОграниченСрокПролеживания
	|ИЗ
	|	ВТРазрезыПланов КАК ВТРазрезыПланов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|		ПО ВТРазрезыПланов.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПроизводства
	|ИТОГИ
	|	МАКСИМУМ(ГраницаСрокаПролеживания),
	|	МАКСИМУМ(ОграниченСрокПролеживания)
	|ПО
	|	ДатаПроизводства,
	|	Назначение,
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПланы.ДатаПроизводства,
	|	ВТПланы.ПланПроизводства,
	|	ВТПланы.Подразделение,
	|	ВТПланы.Спецификация,
	|	ВТПланы.Назначение,
	|	ВТПланы.Сценарий,
	|	ВТПланы.Номенклатура,
	|	ВТПланы.Характеристика,
	|	ВТПланы.КоличествоЗапланировано
	|ИЗ
	|	ВТПланы КАК ВТПланы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПланы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРазрезыПланов";
	
КонецФункции

Функция ТаблицаДопланированияПолуфабрикатов()
	
	Набор = РегистрыНакопления.ПланыПроизводства.СоздатьНаборЗаписей();
	
	Возврат Набор.Выгрузить();
	
КонецФункции

Функция ПланПолуфабрикатов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(ТекстЗапросаВыпускПолуфабрикатовДляДопланирвания());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Результат);
	
	Результат.Индексы.Добавить(ИзмеренияТаблицыПланПолуфабрикатовДопланирование());
	
	Возврат Результат;
	
КонецФункции

Функция ИзмеренияТаблицыПланПолуфабрикатовДопланирование()
	
	Возврат "ДатаВыпускаПолуфабриката, ПланПроизводства, Подразделение, Назначение, Сценарий, Номенклатура, Характеристика";
	
КонецФункции

Функция ТекстЗапросаВыпускПолуфабрикатовДляДопланирвания()
	
	Возврат
	"ВЫБРАТЬ
	|	ПланыПроизводства.Период КАК ДатаПроизводства,
	|	ПланыПроизводства.Сценарий,
	|	ПланыПроизводства.Назначение,
	|	ПланыПроизводства.Номенклатура,
	|	ПланыПроизводства.Характеристика,
	|	ПланыПроизводства.Подразделение,
	|	ПланыПроизводства.ПланПроизводства,
	|	ПланыПроизводства.Спецификация,
	|	ПланыПроизводства.ДатаВыпускаПолуфабриката,
	|	ПланыПроизводства.ПланПроизводства,
	|	ПланыПроизводства.Количество
	|ИЗ
	|	ОчередьРасчетаПолуфабрикатов КАК ОчередьРасчетаПолуфабрикатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|		ПО ОчередьРасчетаПолуфабрикатов.ДатаПроизводства = ПланыПроизводства.ДатаВыпускаПолуфабриката
	|			И ОчередьРасчетаПолуфабрикатов.ПланПроизводства = ПланыПроизводства.ПланПроизводства
	|			И ОчередьРасчетаПолуфабрикатов.Подразделение = ПланыПроизводства.Подразделение
	|			И ОчередьРасчетаПолуфабрикатов.Назначение = ПланыПроизводства.Назначение
	|			И ОчередьРасчетаПолуфабрикатов.Сценарий = ПланыПроизводства.Сценарий
	|			И ОчередьРасчетаПолуфабрикатов.Номенклатура = ПланыПроизводства.Номенклатура
	|			И ОчередьРасчетаПолуфабрикатов.Характеристика = ПланыПроизводства.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
КонецФункции

Функция ПолучитьНоменклатуруСпецификации(ЗначенияПоиска, НоменклатураСпецификаций, Индексы)
	
	Результат = Неопределено;
	
	// Поиск по соответствию Номенклатура-Характеристика
	Для каждого Индекс Из Индексы Цикл
		
		Строка = НоменклатураСпецификаций[Индекс];
		
		Если Строка.Номенклатура = ЗначенияПоиска.Номенклатура
			И Строка.Характеристика = ЗначенияПоиска.Характеристика Тогда
			
			Результат = Строка;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Поиск по соответствию Номенклатура-Пустая характеристика
	Если Результат = Неопределено
		И ЗначениеЗаполнено(ЗначенияПоиска.Характеристика) Тогда
		
		Для каждого Индекс Из Индексы Цикл
		
			Строка = НоменклатураСпецификаций[Индекс];
			
			Если Строка.Номенклатура = ЗначенияПоиска.Номенклатура
				И Строка.Характеристика.Пустая() Тогда
			
				Результат = Строка;
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВыпускПолуфабриката(Полуфабрикат, Таблицы, КоличествоОстаток)
	
	ДобавитьПолуфабрикатВСуществующиеВыпуски(Полуфабрикат, Таблицы, КоличествоОстаток);
	
	Если КоличествоОстаток <> 0 Тогда
		
		ДобавитьПолуфабрикатВНовыйВыпуск(Полуфабрикат, Таблицы, КоличествоОстаток);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПолуфабрикатВСуществующиеВыпуски(Полуфабрикат, Таблицы, КоличествоОстаток)
	
	СтруктураПоиска = Новый Структура(ИзмеренияСпецификацииДопланированиеБезПериода());
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Полуфабрикат);
	
	НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
		Таблицы.Спецификации, СтруктураПоиска, Истина);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Если КоличествоОстаток = 0 Тогда
			Прервать;
		ИначеЕсли (
					// Не соблюдено ограничение на срок пролеживания.
					Строка.ОграниченСрокПролеживания
					И Строка.ГраницаСрокаПролеживания < Полуфабрикат.ДатаВыпускаПолуфабриката
					)
			ИЛИ Строка.ДатаПроизводства > Полуфабрикат.ДатаВыпускаПолуфабриката
			ИЛИ Строка.ПометкаУдаления Тогда
			
			Продолжить; 
			
		КонецЕсли;
		
		Номенклатура = ПолучитьНоменклатуруСпецификации(
			Полуфабрикат, Таблицы.НоменклатураСпецификаций, Строка.ИндексыНоменклатуры);
		
		Если НЕ Номенклатура = Неопределено Тогда
			
			Если Номенклатура.КоличествоЗапланировано <> 0 
				И НЕ ЧислаОдногоЗнака(КоличествоОстаток, Номенклатура.КоличествоЗапланировано) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗнакЧисла = ЗнакЧисла(КоличествоОстаток);
			
			Если ЗначениеЗаполнено(Номенклатура.КоличествоОптимальнаяПартия) Тогда
				
				// Ограничение на оптимальную партию.
				ДоступныйОстаток = ЗнакЧисла
					* (
						Номенклатура.КоличествоОптимальнаяПартия
						- МИН(МодульЧисла(Номенклатура.КоличествоЗапланировано),Номенклатура.КоличествоОптимальнаяПартия)
						);
				
			Иначе
				
				ДоступныйОстаток = КоличествоОстаток;
				
			КонецЕсли;
			
			Если ДоступныйОстаток <> 0 Тогда
				
				КоличествоЗачет = ?(ЗнакЧисла = 1,
					МИН(КоличествоОстаток, ДоступныйОстаток),
					МАКС(КоличествоОстаток, ДоступныйОстаток));
				
				ДобавитьРезультатДопланирования(Таблицы, Строка, Полуфабрикат, Строка.ДатаПроизводства, КоличествоЗачет);
				
				Номенклатура.КоличествоЗапланировано = Номенклатура.КоличествоЗапланировано + КоличествоЗачет;
				
				КоличествоОстаток = КоличествоОстаток - КоличествоЗачет;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолуфабрикатВНовыйВыпуск(Полуфабрикат, Таблицы, КоличествоОстаток)
	
	ДатаПроизводства = Полуфабрикат.ДатаВыпускаПолуфабриката;
	
	ДобавитьРезультатДопланирования(
		Таблицы, Полуфабрикат, Полуфабрикат, ДатаПроизводства, КоличествоОстаток);
	
	// Добавление новых данных в таблицы Спецификации и НоменклатураСпецификаций
	
	Запрос = Новый Запрос(ТекстЗапросаИзделияСпецификации());
	
	Запрос.УстановитьПараметр("Спецификация", Полуфабрикат.Спецификация);
	Запрос.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства);
	
	ВыборкаСпецификация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСпецификация.Следующий();
	
	НоваяСтрока = Таблицы.Спецификации.Добавить();
	
	ОбщегоНазначенияУТ.ЗаполнитьПорядковыйНомерВНовойСтроке(Таблицы.Спецификации, НоваяСтрока);
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Полуфабрикат);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСпецификация, "ОграниченСрокПролеживания, ГраницаСрокаПролеживания");
	
	НоваяСтрока.ДатаПроизводства = ДатаПроизводства;
	НоваяСтрока.ПометкаУдаления = Ложь;
	
	Выборка = ВыборкаСпецификация.Выбрать();
	ИндексыНоменклатуры = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаНоменклатура = Таблицы.НоменклатураСпецификаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатура, Выборка);
		
		ИндексыНоменклатуры.Добавить(Таблицы.НоменклатураСпецификаций.Индекс(НоваяСтрокаНоменклатура));
		
	КонецЦикла;
	
	НоваяСтрока.ИндексыНоменклатуры = ИндексыНоменклатуры;
	
	СтрокаНоменклатуры = ПолучитьНоменклатуруСпецификации(
		Полуфабрикат, Таблицы.НоменклатураСпецификаций, ИндексыНоменклатуры);
							
	Если НЕ СтрокаНоменклатуры = Неопределено Тогда
							
		СтрокаНоменклатуры.КоличествоЗапланировано = КоличествоОстаток;
									
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаИзделияСпецификации()
	
	Возврат
	"ВЫБРАТЬ
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка КАК Ссылка,
	|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура,
	|	РесурсныеСпецификацииВыходныеИзделия.Характеристика,
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка.ОграниченСрокПролеживанияВыходныхИзделий КАК ОграниченСрокПролеживания,
	|	ДОБАВИТЬКДАТЕ(&ДатаПроизводства, ДЕНЬ, РесурсныеСпецификацииВыходныеИзделия.Ссылка.МаксимальныйСрокПролеживанияВыходныхИзделий) КАК ГраницаСрокаПролеживания,
	|	РесурсныеСпецификацииВыходныеИзделия.Количество * РесурсныеСпецификацииВыходныеИзделия.Ссылка.ОптимальнаяПартияВыпуска КАК КоличествоОптимальнаяПартия
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|ГДЕ
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка = &Спецификация
	|ИТОГИ
	|	МАКСИМУМ(ОграниченСрокПролеживания),
	|	МАКСИМУМ(ГраницаСрокаПролеживания)
	|ПО
	|	Ссылка";
	
КонецФункции

Процедура УдалитьВыпускПолуфабриката(Полуфабрикат, Таблицы, КоличествоОстаток)
	
	СтруктураПоиска = Новый Структура(ИзмеренияТаблицыПланПолуфабрикатовДопланирование());
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Полуфабрикат);
	
	НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
		Таблицы.ПланПолуфабрикатов, СтруктураПоиска, Истина);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Если КоличествоОстаток = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоЗачет = ?(ЗнакЧисла(КоличествоОстаток) = 1,
			МИН(КоличествоОстаток, Строка.Количество),
			МАКС(КоличествоОстаток, Строка.Количество));
		
		Строка.Количество = Строка.Количество - КоличествоЗачет;
		КоличествоОстаток = КоличествоОстаток - КоличествоЗачет;
		
		ДобавитьРезультатДопланирования(Таблицы, Строка, Полуфабрикат, Строка.ДатаПроизводства, -КоличествоЗачет);
		УдалитьПолуфабрикатИзТаблицДляДопланирования(Таблицы, Полуфабрикат, КоличествоЗачет);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРезультатДопланирования(Таблицы, ЗначенияЗаполнения, Полуфабрикат, ДатаПроизводства, Количество)
	
	НоваяСтрока = Таблицы.Результаты.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
	
	ЗаполнитьЗначенияСвойств(
		НоваяСтрока,
		Полуфабрикат,
		"ДатаВыпускаПолуфабриката, Номенклатура, Характеристика");
	
	НоваяСтрока.Период = ДатаПроизводства;
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.ЭтоПолуфабрикат = Истина;
	
КонецПроцедуры

Процедура УдалитьПолуфабрикатИзТаблицДляДопланирования(Таблицы, Полуфабрикат, Знач Количество)
	
	СтруктураПоиска = Новый Структура(ИзмеренияСпецификацииДопланированиеСПериодом());
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Полуфабрикат);
	СтруктураПоиска.ДатаПроизводства = Полуфабрикат.ДатаВыпускаПолуфабриката;
	
	НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
		Таблицы.Спецификации, СтруктураПоиска, Истина);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Если Строка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ПометкаУдаления = Истина;
		ИндексыУдалить = Новый Массив;
		
		Для Индекс = 0 По Строка.ИндексыНоменклатуры.ВГраница() Цикл
			
			ИндексНоменклатуры = Строка.ИндексыНоменклатуры[Индекс];
			
			Номенклатура = Таблицы.НоменклатураСпецификаций[ИндексНоменклатуры];
			
			Если Номенклатура.Номенклатура = Полуфабрикат.Номенклатура
				И (Номенклатура.Характеристика = Полуфабрикат.Характеристика ИЛИ Номенклатура.ЛюбаяХарактеристика)
				И Количество <> 0 Тогда
				
				КоличествоЗачет = ?(ЗнакЧисла(Количество) = 1,
					МИН(Количество, Номенклатура.КоличествоЗапланировано),
					МАКС(Количество, Номенклатура.КоличествоЗапланировано));
					
				Номенклатура.КоличествоЗапланировано = Номенклатура.КоличествоЗапланировано - КоличествоЗачет;
				
				Если Номенклатура.КоличествоЗапланировано = 0 Тогда
					ИндексыУдалить.Добавить(Индекс);
				КонецЕсли;
				
				Количество = Количество - КоличествоЗачет;
				
			КонецЕсли;
			
			Если Номенклатура.КоличествоЗапланировано <> 0 Тогда
				
				ПометкаУдаления = Ложь;
				
				Если Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Строка.ПометкаУдаления = ПометкаУдаления;
		
		Для Индекс = -ИндексыУдалить.ВГраница() По 0 Цикл
			
			Строка.ИндексыНоменклатуры.Удалить(ИндексыУдалить[-Индекс]);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДопланированныеПолуфабрикаты(ПланПроизводства, Полуфабрикаты)
	
	СвернутьТаблицуПолуфабрикатов(Полуфабрикаты);
	
	Запрос = Новый Запрос(ТекстЗапросаЗаписьДопланированныхПолуфабрикатов());
	
	Запрос.УстановитьПараметр("Полуфабрикаты", Полуфабрикаты);
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Движения = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьДатуЗапускаВыпускаВПланахПроизводства(ПланПроизводства, Движения);
		
	Набор = РегистрыНакопления.ПланыПроизводства.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ПланПроизводства);
	Набор.Загрузить(Движения);
	
	НачатьТранзакцию();
	
	Попытка
		
		Проведен = ЗаблокироватьИПроверитьПроведение(ПланПроизводства);
		
		Если Проведен Тогда
			
			Набор.Записать();
		
			ОбновитьДвиженияОборотыБюджетов(ПланПроизводства);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СвернутьТаблицуПолуфабрикатов(Полуфабрикаты)
	
	Колонки = "";
	
	Для каждого Колонка Из Полуфабрикаты.Колонки Цикл
		
		Если Колонка.Имя = "Количество" Тогда
			Продолжить;
		КонецЕсли;
		
		Колонки = Колонки + ?(ЗначениеЗаполнено(Колонки), ",", "") + Колонка.Имя;
		
	КонецЦикла;
	
	Полуфабрикаты.Свернуть(Колонки, "Количество");
	
КонецПроцедуры

Функция ТекстЗапросаЗаписьДопланированныхПолуфабрикатов()
	
	Возврат 
	"ВЫБРАТЬ
	|	Полуфабрикаты.Период КАК Период,
	|	Полуфабрикаты.Сценарий КАК Сценарий,
	|	ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка) КАК ВидПлана,
	|	Полуфабрикаты.Назначение КАК Назначение,
	|	Полуфабрикаты.Номенклатура КАК Номенклатура,
	|	Полуфабрикаты.Характеристика КАК Характеристика,
	|	Полуфабрикаты.Подразделение КАК Подразделение,
	|	ВЫРАЗИТЬ(Полуфабрикаты.ПланПроизводства КАК Документ.ПланПроизводства) КАК ПланПроизводства,
	|	Полуфабрикаты.Спецификация КАК Спецификация,
	|	Полуфабрикаты.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	Полуфабрикаты.Количество КАК Количество,
	|	Полуфабрикаты.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат
	|ПОМЕСТИТЬ ВТПолуфабрикаты
	|ИЗ
	|	&Полуфабрикаты КАК Полуфабрикаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПроизводства.Период КАК Период,
	|	ПланыПроизводства.Регистратор КАК Регистратор,
	|	ПланыПроизводства.ВидПлана КАК ВидПлана,
	|	ПланыПроизводства.НомерСтроки КАК НомерСтроки,
	|	ПланыПроизводства.Активность КАК Активность,
	|	ПланыПроизводства.Сценарий КАК Сценарий,
	|	ПланыПроизводства.Статус КАК Статус,
	|	ПланыПроизводства.Номенклатура КАК Номенклатура,
	|	ПланыПроизводства.Характеристика КАК Характеристика,
	|	ПланыПроизводства.Подразделение КАК Подразделение,
	|	ПланыПроизводства.ПланПроизводства КАК ПланПроизводства,
	|	ПланыПроизводства.Спецификация КАК Спецификация,
	|	ПланыПроизводства.Назначение КАК Назначение,
	|	ПланыПроизводства.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	ПланыПроизводства.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	ПланыПроизводства.ДатаЗапускаВыпуска КАК ДатаЗапускаВыпуска,
	|	ПланыПроизводства.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	ПланыПроизводства.Количество КАК Количество,
	|	ПланыПроизводства.ПовторноеРазузлование КАК ПовторноеРазузлование,
	|	ПланыПроизводства.РучнаяКорректировка КАК РучнаяКорректировка,
	|	ПланыПроизводства.ДатаКорректировки КАК ДатаКорректировки,
	|	ПланыПроизводства.АвторКорректировки КАК АвторКорректировки,
	|	ПланыПроизводства.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ВТДвижения
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|ГДЕ
	|	ПланыПроизводства.Регистратор = &ПланПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДвижения.Период КАК Период,
	|	ВТДвижения.Регистратор КАК Регистратор,
	|	ВТДвижения.ВидПлана КАК ВидПлана,
	|	ВТДвижения.Сценарий КАК Сценарий,
	|	ВТДвижения.Статус КАК Статус,
	|	ВТДвижения.Номенклатура КАК Номенклатура,
	|	ВТДвижения.Характеристика КАК Характеристика,
	|	ВТДвижения.Подразделение КАК Подразделение,
	|	ВТДвижения.ПланПроизводства КАК ПланПроизводства,
	|	ВТДвижения.Спецификация КАК Спецификация,
	|	ВТДвижения.Назначение КАК Назначение,
	|	ВТДвижения.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	ВТДвижения.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	ВТДвижения.ДатаЗапускаВыпуска КАК ДатаЗапускаВыпуска,
	|	ВТДвижения.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	ВТДвижения.Количество + ЕСТЬNULL(ВТПолуфабрикаты.Количество, 0) КАК Количество,
	|	ВТДвижения.ПовторноеРазузлование КАК ПовторноеРазузлование,
	|	ВЫБОР
	|		КОГДА ВТПолуфабрикаты.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВТДвижения.РучнаяКорректировка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА ВТПолуфабрикаты.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВТДвижения.ДатаКорректировки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаКорректировки,
	|	ВЫБОР
	|		КОГДА ВТПолуфабрикаты.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВТДвижения.АвторКорректировки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АвторКорректировки,
	|	ВЫБОР
	|		КОГДА ВТПолуфабрикаты.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВТДвижения.Комментарий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Комментарий
	|ИЗ
	|	ВТДвижения КАК ВТДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолуфабрикаты КАК ВТПолуфабрикаты
	|		ПО ВТДвижения.Период = ВТПолуфабрикаты.Период
	|			И ВТДвижения.Сценарий = ВТПолуфабрикаты.Сценарий
	|			И ВТДвижения.Назначение = ВТПолуфабрикаты.Назначение
	|			И ВТДвижения.Номенклатура = ВТПолуфабрикаты.Номенклатура
	|			И ВТДвижения.Характеристика = ВТПолуфабрикаты.Характеристика
	|			И ВТДвижения.Подразделение = ВТПолуфабрикаты.Подразделение
	|			И ВТДвижения.ПланПроизводства = ВТПолуфабрикаты.ПланПроизводства
	|			И ВТДвижения.Спецификация = ВТПолуфабрикаты.Спецификация
	|			И ВТДвижения.ДатаВыпускаПолуфабриката = ВТПолуфабрикаты.ДатаВыпускаПолуфабриката
	|ГДЕ
	|	ВТДвижения.Количество + ЕСТЬNULL(ВТПолуфабрикаты.Количество, 0) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПолуфабрикаты.Период,
	|	ВТПолуфабрикаты.ПланПроизводства,
	|	ВТПолуфабрикаты.ВидПлана,
	|	ВТПолуфабрикаты.Сценарий,
	|	ВТПолуфабрикаты.ПланПроизводства.Статус,
	|	ВТПолуфабрикаты.Номенклатура,
	|	ВТПолуфабрикаты.Характеристика,
	|	ВТПолуфабрикаты.Подразделение,
	|	ВТПолуфабрикаты.ПланПроизводства,
	|	ВТПолуфабрикаты.Спецификация,
	|	ВТПолуфабрикаты.Назначение,
	|	РесурсныеСпецификации.ТипПроизводственногоПроцесса,
	|	ВТПолуфабрикаты.ДатаВыпускаПолуфабриката,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВТПолуфабрикаты.ЭтоПолуфабрикат,
	|	ВТПолуфабрикаты.Количество,
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТПолуфабрикаты КАК ВТПолуфабрикаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвижения КАК ВТДвижения
	|		ПО ВТПолуфабрикаты.Период = ВТДвижения.Период
	|			И ВТПолуфабрикаты.Сценарий = ВТДвижения.Сценарий
	|			И ВТПолуфабрикаты.Назначение = ВТДвижения.Назначение
	|			И ВТПолуфабрикаты.Номенклатура = ВТДвижения.Номенклатура
	|			И ВТПолуфабрикаты.Характеристика = ВТДвижения.Характеристика
	|			И ВТПолуфабрикаты.Подразделение = ВТДвижения.Подразделение
	|			И ВТПолуфабрикаты.ПланПроизводства = ВТДвижения.ПланПроизводства
	|			И ВТПолуфабрикаты.Спецификация = ВТДвижения.Спецификация
	|			И ВТПолуфабрикаты.ДатаВыпускаПолуфабриката = ВТДвижения.ДатаВыпускаПолуфабриката
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|		ПО ВТПолуфабрикаты.Спецификация = РесурсныеСпецификации.Ссылка
	|ГДЕ
	|	ВТДвижения.Период ЕСТЬ NULL";
	
КонецФункции

#КонецОбласти

#Область РаботаСДвижениями

Процедура ОчиститьДвижения(ДокументОбъект)
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ЭтоНовый",    Ложь);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ДокументОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура СформироватьДвижения(ДокументОбъект)
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ЭтоНовый",    Ложь);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства);
	
	Документы.ПланПроизводства.ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	ЗаполнитьДатуЗапускаВыпускаВПланахПроизводства(
		ДокументСсылка,
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыПроизводства);
	
	Планирование.ОтразитьПланПроизводства(ДополнительныеСвойства, ДокументОбъект.Движения, Ложь);
	
	РегистрыНакопления.ОборотыБюджетов.ОтразитьДвижения(ДополнительныеСвойства, ДокументОбъект.Движения, Ложь);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументОбъект.Сценарий, "ИспользоватьДляПланированияМатериалов") Тогда
		
		Если НадоОбновитьСтатусПотребностей(ДокументСсылка, ДокументОбъект.Статус) Тогда
			ОбновитьСтатусВДвиженияхПоПотребностям(ДокументСсылка, ДокументОбъект.Движения);
		КонецЕсли;
		
	Иначе
		ЗаполнитьПланыВыпускаПоПланамПроизводства(ДокументОбъект.Движения);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Проведен = ЗаблокироватьИПроверитьПроведение(ДокументОбъект.Ссылка);
		
		Если Проведен Тогда
			ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ДокументОбъект);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
			
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗаблокироватьОчередьРасчета(ПланПроизводства)
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаПланаПроизводства");
	ЭлементБлокировки.УстановитьЗначение("ПланПроизводства", ПланПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ЗаблокироватьИПроверитьПроведение(ПланПроизводства)
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ПланПроизводства");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ПланПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	Блокировка.Заблокировать();
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланПроизводства, "Проведен");
	
КонецФункции

Функция КоличествоОшибокПревысилоЛимит(Параметры)
	
	Результат = Ложь;
	
	Если Параметры.Свойство("КоличествоОшибок") Тогда
		
		МаксимальноеКоличествоОшибок = 3;
		Если Параметры.Свойство("МаксимальноеКоличествоОшибок") Тогда
			МаксимальноеКоличествоОшибок = Параметры.МаксимальноеКоличествоОшибок;
		КонецЕсли;
		
		Если Параметры.КоличествоОшибок >= МаксимальноеКоличествоОшибок Тогда
			
			Результат = Истина;
			
			ТекстСообщения = НСтр("ru = 'Проведение документа: %Ссылка% остановлено. Количество неудачных попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Параметры.ДокументСсылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", Параметры.КоличествоОшибок);
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииОшибкаРасчета(),
				УровеньЖурналаРегистрации.Ошибка,
				Параметры.ДокументСсылка.Метаданные(),
				Параметры.ДокументСсылка,
				ТекстСообщения);
			
			РегистрыСведений.ОчередьРасчетаПланаПроизводства.ЗаписатьЕстьОшибкиРасчета(Параметры.ДокументСсылка);
			
			Попытка
				
				// Очистка неконсистентных движений
				ДокументОбъект = Параметры.ДокументСсылка.ПолучитьОбъект();
				ОчиститьДвижения(ДокументОбъект);
				
			Исключение
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не удалось очистить движения документа: %Ссылка% по причине: %Причина%'"),
					Параметры.ДокументСсылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрацииОшибкаРасчета(),
					УровеньЖурналаРегистрации.Ошибка,
					Параметры.ДокументСсылка.Метаданные(),
					Параметры.ДокументСсылка,
					ТекстСообщения);
				
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		Параметры.Вставить("КоличествоОшибок", 0);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьРасчетаПлановПроизводства.ДатаПроизводства КАК ДатаПроизводства,
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчетаПлановПроизводства.Подразделение КАК Подразделение,
	|	ОчередьРасчетаПлановПроизводства.Спецификация КАК Спецификация,
	|	ОчередьРасчетаПлановПроизводства.Сценарий КАК Сценарий,
	|	ОчередьРасчетаПлановПроизводства.Назначение КАК Назначение,
	|	ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов КАК ВыпускПолуфабрикатов,
	|	МАКСИМУМ(ОчередьРасчетаПлановПроизводства.Разделитель) КАК Разделитель
	|ПОМЕСТИТЬ ОчередьРасчета
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
	|ГДЕ
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства
	|	И ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов = ЛОЖЬ
	|	И ОчередьРасчетаПлановПроизводства.Проведение = ЛОЖЬ
	|	И ОчередьРасчетаПлановПроизводства.ПланПроизводстваПересчет = ЗНАЧЕНИЕ(Документ.ПланПроизводства.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьРасчетаПлановПроизводства.ДатаПроизводства,
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства,
	|	ОчередьРасчетаПлановПроизводства.Подразделение,
	|	ОчередьРасчетаПлановПроизводства.Спецификация,
	|	ОчередьРасчетаПлановПроизводства.Назначение,
	|	ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов,
	|	ОчередьРасчетаПлановПроизводства.Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьРасчета.ПланПроизводства
	|ИЗ
	|	ОчередьРасчета КАК ОчередьРасчета";
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьОчередьРасчета(ПланПроизводства);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
	
		ЕстьЗаписиВОчереди = НЕ МассивРезультатов[1].Пустой();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ЕстьЗаписиВОчереди;
	
КонецФункции

Процедура ОчиститьОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьРасчета.ДатаПроизводства КАК ДатаПроизводства,
	|	ОчередьРасчета.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчета.Подразделение КАК Подразделение,
	|	ОчередьРасчета.Спецификация КАК Спецификация,
	|	ОчередьРасчета.Сценарий КАК Сценарий,
	|	ОчередьРасчета.Назначение КАК Назначение,
	|	ОчередьРасчета.ВыпускПолуфабрикатов КАК ВыпускПолуфабрикатов,
	|	ОчередьРасчетаПланаПроизводства.Разделитель КАК Разделитель
	|ИЗ
	|	ОчередьРасчета КАК ОчередьРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПланаПроизводства
	|		ПО ОчередьРасчета.ДатаПроизводства = ОчередьРасчетаПланаПроизводства.ДатаПроизводства
	|			И ОчередьРасчета.ПланПроизводства = ОчередьРасчетаПланаПроизводства.ПланПроизводства
	|			И ОчередьРасчета.Подразделение = ОчередьРасчетаПланаПроизводства.Подразделение
	|			И ОчередьРасчета.Спецификация = ОчередьРасчетаПланаПроизводства.Спецификация
	|			И ОчередьРасчета.Сценарий = ОчередьРасчетаПланаПроизводства.Сценарий
	|			И ОчередьРасчета.Назначение = ОчередьРасчетаПланаПроизводства.Назначение
	|			И ОчередьРасчета.ВыпускПолуфабрикатов = ОчередьРасчетаПланаПроизводства.ВыпускПолуфабрикатов
	|			И ОчередьРасчета.Разделитель >= ОчередьРасчетаПланаПроизводства.Разделитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОчередьРасчета");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Очередь = МассивРезультатов[0].Выгрузить();
	
	РегистрыСведений.ОчередьРасчетаПланаПроизводства.ОчиститьОчередь(Очередь, ПланПроизводства);
	
КонецПроцедуры

Функция ЕстьЗаданияВОчереди(ПланПроизводства)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьРасчетаПлановПроизводства.Разделитель
		|ИЗ
		|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
		|ГДЕ
		|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства");
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ЗаписатьВЖурналОшибкуРассчета(ПланПроизводства, Параметры, Причина)
	
	ТекстСообщения = НСтр("ru = 'Не удалось выполнить проведение документа: %Ссылка% количество попыток: %КоличествоОшибок% по причине: %Причина%'");
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ПланПроизводства);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", Параметры.КоличествоОшибок);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", Причина);
		
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрацииОшибкаРасчета(),
		УровеньЖурналаРегистрации.Ошибка,
		ПланПроизводства.Метаданные(),
		ПланПроизводства,
		ТекстСообщения);
	
КонецПроцедуры

Функция МодульЧисла(Число)
	
	Возврат ?(Число >= 0, Число, -Число);
	
КонецФункции

Функция ЧислаОдногоЗнака(Число1, Число2)
	
	Возврат (Число1 > 0 И Число2 > 0)
		ИЛИ (Число1 < 0 И Число2 < 0);
	
КонецФункции

Функция ЗнакЧисла(Число)
	
	Возврат ?(Число >= 0, 1, -1);
	
КонецФункции

Функция ДвиженияПланаПроизводстваПоРегистру(ПланПроизводства, Регистр)
	
	ДополнительныеСвойства = Новый Структура;
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ПланПроизводства, ДополнительныеСвойства);
	
	Документы.ПланПроизводства.ИнициализироватьДанныеДокумента(ПланПроизводства, ДополнительныеСвойства, Регистр);
	
	Возврат ДополнительныеСвойства.ТаблицыДляДвижений["Таблица" + Регистр];
	
КонецФункции

Процедура ОбновитьДвиженияОборотыБюджетов(ПланПроизводства)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Движения = ДвиженияПланаПроизводстваПоРегистру(ПланПроизводства, "ОборотыБюджетов");
	
	Если Движения.Количество() > 0
		ИЛИ ЕстьДвиженияПланаВРегистреНакопления(ПланПроизводства, "ОборотыБюджетов") Тогда
		
		Набор = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
		
		Набор.Отбор.Регистратор.Установить(ПланПроизводства);
		
		Набор.Загрузить(Движения);
		
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьДвиженияПланаВРегистреНакопления(ПланПроизводства, ИмяРегистра)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистр.Период
		|ИЗ
		|	РегистрНакопления.#ИмяРегистра КАК Регистр
		|ГДЕ
		|	Регистр.Регистратор = &ПланПроизводства";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СобытиеЖурналаРегистрацииОшибкаРасчета() Экспорт
	
	Возврат НСтр("ru = 'Фоновое проведение.План производства'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли
