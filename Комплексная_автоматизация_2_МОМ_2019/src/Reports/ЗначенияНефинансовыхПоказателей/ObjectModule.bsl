#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		РеквизитыПоказателя = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(
				Параметры.ПараметрКоманды, "Периодичность, УстанавливатьЗначениеНаКаждыйПериод, ПоПериодам");
		
		Если РеквизитыПоказателя.УстанавливатьЗначениеНаКаждыйПериод ИЛИ РеквизитыПоказателя.ПоПериодам Тогда
			Периодичность = РеквизитыПоказателя.Периодичность;
		Иначе
			Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
		КонецЕсли;
		
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("НефинансовыйПоказатель", Параметры.ПараметрКоманды);
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("Периодичность", Периодичность);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	Если Не КомпоновщикНастроекФормы.Настройки.ДополнительныеСвойства.Свойство("КлючТекущегоВарианта") Тогда
		КомпоновщикНастроекФормы.Настройки.ДополнительныеСвойства.Вставить("КлючТекущегоВарианта", ЭтаФорма.КлючТекущегоВарианта);
	КонецЕсли;
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;
	

КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПриЗагрузкеВариантаНаСервере
//
Процедура ПриЗагрузкеВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	
	Если ЭтаФорма.КлючТекущегоВарианта = "Расшифровка" Тогда
		
		ФиксированныеНастройки = КомпоновщикНастроекФормы.ФиксированныеНастройки;
		
		ИсточникДобавления = ФиксированныеНастройки.Структура;
		МестоДобавления = КомпоновщикНастроекФормы.Настройки.Структура;
		МестоДобавления.Очистить();
		
		Пока ИсточникДобавления.Количество() Цикл
			Группировка = ИсточникДобавления[0];
			НоваяГруппировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(МестоДобавления, Группировка.Имя,, Ложь);
			Для каждого ПолеГруппировки Из Группировка.ПоляГруппировки.Элементы Цикл
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(
					НоваяГруппировка,
					Строка(ПолеГруппировки.Поле));
			КонецЦикла;
			МестоДобавления = НоваяГруппировка.Структура;
			ИсточникДобавления = Группировка.Структура;
		КонецЦикла;
		
		Если ФиксированныеНастройки.Выбор.Элементы.Количество() > 0 Тогда
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроекФормы.Настройки.Выбор, ФиксированныеНастройки.Выбор, Истина);
		КонецЕсли;
		КомпоновщикНастроекФормы.Настройки.ДополнительныеСвойства.Вставить("КлючТекущегоВарианта", "Расшифровка");
		КомпоновщикНастроекФормы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("РежимРасшифровки", Истина);
		
	Иначе
		
		КомпоновщикНастроекФормы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("РежимРасшифровки", ЭтаФорма.РежимРасшифровки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	БюджетированиеСервер.ДополнитьСКДАналитикойПоВиду(СхемаКомпоновкиДанных, "НефинансовыйПоказатель");
	
	БюджетированиеСервер.ДополнитьСКДВыражениямиПредставленияАналитики(СхемаКомпоновкиДанных,
	                                                                   "НаборыДанных.ЗначенияНефинансовыхПоказателей.Поля",
	                                                                   "НефинансовыйПоказатель");
	
	Параметры = ПараметрыПолученияЗначенийНефинансовыхПоказателей(НастройкиОтчета);
	ЗначенияНефинансовыхПоказателей = БюджетированиеСервер.ЗначенияНефинансовыхПоказателей(НастройкиОтчета, Параметры);
	
	НастроитьДополнениеПериода(НастройкиОтчета);
	ДобавитьРесурсыПоСценариям(ЗначенияНефинансовыхПоказателей, НастройкиОтчета);
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЗначенияНефинансовыхПоказателей", ЗначенияНефинансовыхПоказателей);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	ОтчетПустой = ВзаиморасчетыСервер.ОтчетПустой(ПроцессорКомпоновкиДанных);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Функция ПараметрыПолученияЗначенийНефинансовыхПоказателей(НастройкиОтчета)
	
	Параметры = БюджетированиеСервер.ШаблонПараметровПолученияЗначенийНефинансовыхПоказателей();
	
	Параметры.Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период").Значение; 
	Параметры.Периодичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Периодичность").Значение;
	Параметры.ПоОрганизациям = Истина;
	Параметры.ПоПодразделениям = Истина;
	Параметры.Вставить("ВалютаОтчета", Параметры.ВалютаУпр);
	
	Возврат Параметры; 
	
КонецФункции

Процедура НастроитьДополнениеПериода(НастройкиОтчета) 
	
	Перидичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Периодичность").Значение;
	
	Если Не ЗначениеЗаполнено(Перидичность) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПериодичность = ОбщегоНазначения.ИмяЗначенияПеречисления(Перидичность);
	ТипДополнения = ТипДополненияПериодаКомпоновкиДанных[СтрокаПериодичность];
	
	Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период").Значение;
	ПолеПериод = Новый ПолеКомпоновкиДанных("Период");
	
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Группировки = КомпоновкаДанныхКлиентСервер.ПолучитьГруппировки(ЭлементСтруктуры);
		Для каждого Группировка Из Группировки Цикл
			ЭлементыГруппировки = Группировка.Значение.ПоляГруппировки.Элементы;
			Если ЭлементыГруппировки.Количество() = 1 И ЭлементыГруппировки[0].Поле = ПолеПериод Тогда
				ГруппировкаПериод = ЭлементыГруппировки[0];
				ГруппировкаПериод.ТипДополнения = ТипДополнения;
				ГруппировкаПериод.НачалоПериода = Период.ДатаНачала;
				ГруппировкаПериод.КонецПериода = Период.ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРесурсыПоСценариям(ЗначенияНефинансовыхПоказателей, НастройкиОтчета)
	
	Группировки = Новый Массив;
	Группировки.Добавить("НефинансовыйПоказатель");
	Группировки.Добавить("Организация");
	Группировки.Добавить("Подразделение");
	Группировки.Добавить("Аналитика1");
	Группировки.Добавить("Аналитика2");
	Группировки.Добавить("Аналитика3");
	Группировки.Добавить("Аналитика4");
	Группировки.Добавить("Аналитика5");
	Группировки.Добавить("Аналитика6");
	Группировки.Добавить("Сценарий");
	Группировки.Добавить("Регистратор");
	
	РежимРасшифровки = Ложь;
	ПараметрРежимРасшифровки = Новый ПараметрКомпоновкиДанных("РежимРасшифровки");
	ПараметрРежимРасшифровки = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрРежимРасшифровки);
	Если НЕ ПараметрРежимРасшифровки = Неопределено Тогда
		РежимРасшифровки = ПараметрРежимРасшифровки.Значение;
	КонецЕсли;
	
	Если РежимРасшифровки Тогда
		Группировки.Добавить("Период");
		
		ГруппировкиСтруктурыНастроек = Новый Массив;
		ЗаполнитьГруппировкиСтруктурыНастроек(ГруппировкиСтруктурыНастроек,
		                                      НастройкиОтчета.Структура);
		
		КоличествоГруппировок = Группировки.Количество();
		Для НомерСчетчика = 1 По КоличествоГруппировок Цикл
			ИндексМассива = КоличествоГруппировок - НомерСчетчика;
			ИмяГруппировки = Группировки[ИндексМассива];
			Если ГруппировкиСтруктурыНастроек.Найти(ИмяГруппировки) = Неопределено Тогда
				Группировки.Удалить(ИндексМассива);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаСценариев = ЗначенияНефинансовыхПоказателей.Скопировать();
	ТаблицаСценариев.Свернуть("Сценарий");
	
	Для каждого СтрокаСценарий Из ТаблицаСценариев Цикл
		
		Сценарий = СтрокаСценарий.Сценарий;
		Если Не ЗначениеЗаполнено(Сценарий) Тогда
			Заголовок = НСтр("ru = '<По всем сценариям>'");
			ИдентификаторСценария = "ПустойСценарий";
		Иначе
			Заголовок = Строка(Сценарий);
			ИдентификаторСценария = "Сценарий_" + СтрЗаменить(Строка(Сценарий.УникальныйИдентификатор()), "-", "");
		КонецЕсли;
		
		Выражение = "ВЫБОР КОГДА Сценарий = &ИдентификаторСценария ТОГДА ЗначениеПоказателя ИНАЧЕ 0 КОНЕЦ";
		Выражение = СтрЗаменить(Выражение, "ИдентификаторСценария", ИдентификаторСценария);
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		Параметр.Имя = ИдентификаторСценария;
		Параметр.Значение = Сценарий;
		Параметр.ОграничениеИспользования = Истина;
		
		НовоеВычисляемоеПоле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
			СхемаКомпоновкиДанных, ИдентификаторСценария, Выражение, Заголовок);
		НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0));
		
		Для каждого Группировка Из Группировки Цикл
			
			НовыйРесурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			НовыйРесурс.ПутьКДанным = Строка(ИдентификаторСценария);
			Выражение =
			"Отчеты.ЗначенияНефинансовыхПоказателей.Подключаемый_ЗначениеПоказателяДляГруппировки(
			|	ВычислитьВыражениеСГруппировкойТаблицаЗначений(%ИмяВыражения%,,,%ИмяОтбора%),
			|	Валюта,
			|	ЕдиницаИзмерения,
			|	НефинансовыйПоказатель,
			|	НефинансовыйПоказатель.ВидПоказателя,
			|	НефинансовыйПоказатель.ПоПериодам,
			|	НефинансовыйПоказатель.ПоОрганизациям,
			|	НефинансовыйПоказатель.ПоПодразделениям,
			|	НефинансовыйПоказатель.КоличествоИспользуемыхАналитик,
			|	НефинансовыйПоказатель.УстанавливатьЗначениеНаКаждыйПериод,
			|	Период,
			|	&Периодичность,
			|	ВЫБОР
			|		КОГДА НефинансовыйПоказатель.ПоПериодам
			|			ТОГДА НефинансовыйПоказатель.ПериодичностьПодпериодов
			|		ИНАЧЕ НефинансовыйПоказатель.Периодичность
			|	КОНЕЦ,
			|	""%Группировка%"",
			|	&РежимРасшифровки,
			|	&Кэш)";
			
			Выражение = СтрЗаменить(Выражение, "%ИмяВыражения%", """
			| НомерПодпериода КАК НомерПодпериода,
			| ПериодУстановки КАК ПериодУстановки,
			| СУММА(%ИдентификаторСценария%) КАК Значение""");
			
			Выражение = СтрЗаменить(Выражение, "%ИмяОтбора%", """СУММА(%ИдентификаторСценария%) <> 0""");
			
			Выражение = СтрЗаменить(Выражение, "%ИдентификаторСценария%", ИдентификаторСценария);
			
			Выражение = СтрЗаменить(Выражение, "%Группировка%", Группировка);
			
			НовыйРесурс.Выражение = Выражение;
			НовыйРесурс.Группировки.Добавить(Группировка);
			
		КонецЦикла;
		
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(НастройкиОтчета, ИдентификаторСценария, Заголовок);
		
		ЭлементУсловногоОформления = НастройкиОтчета.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		
		ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементПоля.Использование = Истина;
		ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ИдентификаторСценария);
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 20);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 20);
		
	КонецЦикла;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	Параметр.ОграничениеИспользования = Истина;
	Параметр.ВключатьВДоступныеПоля = Ложь;
	Параметр.Имя = "Кэш";
	Параметр.Значение = Новый Соответствие;

КонецПроцедуры

Процедура ЗаполнитьГруппировкиСтруктурыНастроек(ГруппировкиСтруктурыНастроек, ЭлементСтруктурыНастроек)
	
	Для каждого ЭлементСтруктуры Из ЭлементСтруктурыНастроек Цикл
		Если ЭлементСтруктуры.Использование Тогда
			Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировки.Использование Тогда
					ИмяГруппировки = Строка(ПолеГруппировки.Поле);
					Если ГруппировкиСтруктурыНастроек.Найти(ИмяГруппировки) = Неопределено Тогда
						ГруппировкиСтруктурыНастроек.Добавить(ИмяГруппировки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьГруппировкиСтруктурыНастроек(ГруппировкиСтруктурыНастроек, ЭлементСтруктуры.Структура);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
