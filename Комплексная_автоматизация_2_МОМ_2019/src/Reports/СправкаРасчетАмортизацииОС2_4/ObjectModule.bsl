#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды")
		И Параметры.Свойство("ОписаниеКоманды")
		И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда 
		
		ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды;
		Параметры.КлючНазначенияИспользования = Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды;
		
		Если Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "СправкаРасчетПоОС" Тогда
			ЭтаФорма.ФормаПараметры.Отбор.Вставить("ОсновноеСредство", Параметры.ПараметрКоманды);
			Параметры.КлючВарианта = "СправкаРасчетАмортизацииОС";
		ИначеЕсли Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "СправкаРасчетПоДокументуАмортизацииОС" Тогда
			ЭтаФорма.ФормаПараметры.Отбор.Вставить("ДокументРасчетаАмортизации", Параметры.ПараметрКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. синтакс-помощник "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	Отчет = Форма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	УстановитьПериодОтчета(Форма, КомпоновщикНастроекФормы);
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	ЗначенияОтбораДанных = ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы);
	
	ТекстСообщения = НСтр("ru = 'Отчет не поддерживает получение данных до даты начала учета внеоборотных активов версии 2.4 - %1.
                           |Необходимо воспользоваться отчетом ""Регламентированный учет"" - ""Справки-расчеты"" - ""Справка-расчет амортизации"".'");

	Если НЕ ЗначениеЗаполнено(ЗначенияОтбораДанных.ДокументРасчетаАмортизации) Тогда
		ВнеоборотныеАктивыСлужебный.ПроверитьПериодОтчетаВерсии24(
			ЗначенияОтбораДанных.НачалоПериода, 
			ЗначенияОтбораДанных.ОкончаниеПериода, 
			ТекстСообщения,
			Отказ); 
	КонецЕсли; 
		
	Если НЕ ЗначенияОтбораДанных.ПоказатьРасчетБУ
		И НЕ ЗначенияОтбораДанных.ПоказатьРасчетНУ
		И НЕ ЗначенияОтбораДанных.ПоказатьРасчетУУ Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать какие данные нужно получить: БУ, НУ, УУ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	УстановитьТекстЗапроса(СхемаКомпоновкиДанных);
	
	ЗначенияОтбораДанных = ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы);
	
	УстановитьПараметрыОтчета(ЗначенияОтбораДанных, НастройкиОсновнойСхемы);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);	
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Неопределено, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	ДобавитьИнформационноеСообщениеВШапку(ДокументРезультат, ЗначенияОтбораДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы)

	ЭлементыОтбора = НастройкиОсновнойСхемы.Отбор.Элементы;
	
	ЗначенияОтбораДанных = Новый Структура;
	
	ЗначенияОтбораДанных.Вставить("СписокОрганизаций", ВнеоборотныеАктивыСлужебный.ЗначениеОтбораОтчета("Организация", ЭлементыОтбора));
	Если ЗначенияОтбораДанных.СписокОрганизаций.Количество() = 0 Тогда
		ЗначенияОтбораДанных.СписокОрганизаций = ВнеоборотныеАктивыСлужебный.СписокРазрешенныхОрганизаций();
	КонецЕсли;
	
	ЗначенияОтбораДанных.Вставить("СписокОС", ВнеоборотныеАктивыСлужебный.ЗначениеОтбораОтчета("ОсновноеСредство", ЭлементыОтбора));
	ЗначенияОтбораДанных.Вставить("ДокументРасчетаАмортизации", ВнеоборотныеАктивыСлужебный.ЗначениеОтбораОтчета("ДокументРасчетаАмортизации", ЭлементыОтбора));
	
	ВнеоборотныеАктивыСлужебный.ПериодОтчета(НастройкиОсновнойСхемы, ЗначенияОтбораДанных);
	
	ПоказатьРасчетБУ = ВнеоборотныеАктивыСлужебный.ЗначениеПараметраСКД(НастройкиОсновнойСхемы, "ПоказатьРасчетБУ", Ложь);
	ПоказатьРасчетНУ = ВнеоборотныеАктивыСлужебный.ЗначениеПараметраСКД(НастройкиОсновнойСхемы, "ПоказатьРасчетНУ", Ложь);
	ПоказатьРасчетУУ = ВнеоборотныеАктивыСлужебный.ЗначениеПараметраСКД(НастройкиОсновнойСхемы, "ПоказатьРасчетУУ", Ложь);
	
	ЗначенияОтбораДанных.Вставить("ПоказатьРасчетБУ", ПоказатьРасчетБУ);
	ЗначенияОтбораДанных.Вставить("ПоказатьРасчетНУ", ПоказатьРасчетНУ);
	ЗначенияОтбораДанных.Вставить("ПоказатьРасчетУУ", ПоказатьРасчетУУ);
	
	Возврат ЗначенияОтбораДанных;
	
КонецФункции

Процедура УстановитьПараметрыОтчета(ЗначенияОтбораДанных, НастройкиОсновнойСхемы)

	Если ЗначениеЗаполнено(ЗначенияОтбораДанных.НачалоПериода) Тогда
		НачалоГода = НачалоГода(ЗначенияОтбораДанных.НачалоПериода);
	Иначе
		НачалоГода = '000101010000';
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "НачалоГода", НачалоГода);
	
	Если ЗначениеЗаполнено(ЗначенияОтбораДанных.ОкончаниеПериода) Тогда
		КонецГода = КонецГода(ЗначенияОтбораДанных.ОкончаниеПериода);
	Иначе
		КонецГода = '000101010000';
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "КонецГода", КонецГода);
	
	ПоСтандартамМУ = Константы.ПорядокУчетаВНАВУпрУчете.Получить() = Перечисления.ПорядокУчетаВНАВУпрУчете.ПоСтандартамМУ;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ПоСтандартамМУ", ПоСтандартамМУ);
	
	ДатаПереходаКЛинейномуМетоду = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьДатуПереходаКЛинейномуМетоду(
										ЗначенияОтбораДанных.НачалоПериода, Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ДатаПереходаКЛинейномуМетоду", ДатаПереходаКЛинейномуМетоду);
	
КонецПроцедуры

Процедура УстановитьТекстЗапроса(СхемаКомпоновкиДанных)

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Амортизация.Запрос;

	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&НормаАмортизации", 
		ВнеоборотныеАктивыЛокализация.ТекстПоляНормаАмортизации("ОбъектыЭксплуатации.АмортизационнаяГруппа"));
		
	СхемаКомпоновкиДанных.НаборыДанных.Амортизация.Запрос = ТекстЗапроса;
	
КонецПроцедуры

Процедура УстановитьПериодОтчета(Форма, КомпоновщикНастроекФормы)

	ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекФормы, "ПериодОтчета"); 
	
	Если Форма.Параметры.КлючНазначенияИспользования = "СправкаРасчетПоДокументуАмортизацииОС" Тогда
		
		ДокументРасчетаАмортизации = ВнеоборотныеАктивыСлужебный.ЗначениеОтбораОтчета(
										"ДокументРасчетаАмортизации", 
										КомпоновщикНастроекФормы.Настройки.Отбор.Элементы);
										
		Если ЗначениеЗаполнено(ДокументРасчетаАмортизации) Тогда
			ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРасчетаАмортизации[0], "Дата");
			
			ПараметрПериод.Значение.ДатаНачала = НачалоМесяца(ДатаДокумента);
			ПараметрПериод.Значение.ДатаОкончания = КонецМесяца(ДатаДокумента);
		КонецЕсли; 
		
	Иначе	
		
		Если НЕ ЗначениеЗаполнено(ПараметрПериод.Значение.ДатаНачала) Тогда
			
			ПараметрПериод.Значение.ДатаНачала = Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить();
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьИнформационноеСообщениеВШапку(ТабДок, ЗначенияОтбораДанных)

	СписокПроблем = Новый Массив;
	
	ПроверитьАктуальностьРасчетаАмортизации(ЗначенияОтбораДанных, СписокПроблем);
	ПроверитьНаличиеПараметровРасчетаАмортизации(ЗначенияОтбораДанных, СписокПроблем);
	
	Если СписокПроблем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СписокПроблем = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокПроблем);
	
	ТекстСообщения = СтрСоединить(СписокПроблем, Символы.ПС);

	ТабДок.Область("R1C1").Текст = ТекстСообщения;
	ТабДок.Область("R1C1").ЦветТекста = Метаданные.ЭлементыСтиля.ЦветТекстаПроблема.Значение;
	ТабДок.Область(1, 1, 1, ).ВысотаСтроки = 0;
	
КонецПроцедуры

Процедура ПроверитьАктуальностьРасчетаАмортизации(ЗначенияОтбораДанных, СписокПроблем)

	РегистрыСведений.ПакетыАмортизацииОС.СоздатьПакетыАмортизации(ЗначенияОтбораДанных.СписокОрганизаций);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументАмортизация.Организация.Представление КАК ОрганизацияПредставление
	|ИЗ
	|	Документ.АмортизацияОС2_4 КАК ДокументАмортизация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуАмортизацииОС КАК ЗаданияКРасчету
	|		ПО (ЗаданияКРасчету.Организация = ДокументАмортизация.Организация)
	|			И (ЗаданияКРасчету.Месяц <= ДокументАмортизация.Дата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииОС КАК ПакетыАмортизацииОС
	|		ПО ПакетыАмортизацииОС.Организация = ЗаданияКРасчету.Организация
	|			И ПакетыАмортизацииОС.НомерПакета = ЗаданияКРасчету.НомерПакета
	|			И &ОтборПоСпискуОС
	|ГДЕ
	|	ДокументАмортизация.Организация В(&СписокОрганизаций)
	|	И (НЕ &ОтборПоСпискуОС ИЛИ ПакетыАмортизацииОС.ОсновноеСредство В(&СписокОС))
	|	И (НЕ &ОтборПоДокументу ИЛИ ДокументАмортизация.Ссылка В(&ДокументРасчетаАмортизации))
	|	И ДокументАмортизация.Проведен
	|	И (ДокументАмортизация.Дата >= &НачалоПериода
	|			ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
	|	И (ДокументАмортизация.Дата <= &ОкончаниеПериода
	|			ИЛИ &ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ЗначенияОтбораДанных.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ЗначенияОтбораДанных.ОкончаниеПериода);
	Запрос.УстановитьПараметр("СписокОС", ЗначенияОтбораДанных.СписокОС);
	Запрос.УстановитьПараметр("ОтборПоСпискуОС", ЗначениеЗаполнено(ЗначенияОтбораДанных.СписокОС));
	Запрос.УстановитьПараметр("ДокументРасчетаАмортизации", ЗначенияОтбораДанных.ДокументРасчетаАмортизации);
	Запрос.УстановитьПараметр("ОтборПоДокументу", ЗначениеЗаполнено(ЗначенияОтбораДанных.ДокументРасчетаАмортизации));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	СписокПроблем.Добавить(НСтр("ru = 'Расчет амортизации не актуален:'"));
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = НСтр("ru = '- для организации ""%1"" необходимо выполнить закрытие месяца'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОрганизацияПредставление);
		СписокПроблем.Добавить(ТекстСообщения); 
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеПараметровРасчетаАмортизации(ЗначенияОтбораДанных, СписокПроблем)

	Если Константы.ПорядокУчетаВНАВУпрУчете.Получить() <> Перечисления.ПорядокУчетаВНАВУпрУчете.ПоСтандартамМУ
		ИЛИ НЕ ЗначенияОтбораДанных.ПоказатьРасчетУУ Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	АмортизацияЗаписи.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.АмортизацияОС КАК АмортизацияЗаписи
	|ГДЕ
	|	АмортизацияЗаписи.Организация В(&СписокОрганизаций)
	|	И (НЕ &ОтборПоДокументу ИЛИ АмортизацияЗаписи.Регистратор В(&ДокументРасчетаАмортизации))
	|	И (НЕ &ОтборПоСпискуОС ИЛИ АмортизацияЗаписи.ОсновноеСредство В(&СписокОС))
	|	И АмортизацияЗаписи.Регистратор ССЫЛКА Документ.АмортизацияОС2_4
	|	И АмортизацияЗаписи.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И (АмортизацияЗаписи.Период >= &НачалоПериода
	|			ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
	|	И (АмортизацияЗаписи.Период <= &ОкончаниеПериода
	|			ИЛИ &ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1))
	|	И АмортизацияЗаписи.РесурсВыработанныйЗаТекущийПериод = 0
	|	И АмортизацияЗаписи.СтоимостьДляВычисленияАмортизации = 0
	|	И АмортизацияЗаписи.Амортизация <> 0";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ЗначенияОтбораДанных.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ЗначенияОтбораДанных.ОкончаниеПериода);
	Запрос.УстановитьПараметр("СписокОС", ЗначенияОтбораДанных.СписокОС);
	Запрос.УстановитьПараметр("ОтборПоСпискуОС", ЗначениеЗаполнено(ЗначенияОтбораДанных.СписокОС));
	Запрос.УстановитьПараметр("ДокументРасчетаАмортизации", ЗначенияОтбораДанных.ДокументРасчетаАмортизации);
	Запрос.УстановитьПараметр("ОтборПоДокументу", ЗначениеЗаполнено(ЗначенияОтбораДанных.ДокументРасчетаАмортизации));
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Параметры расчета амортизации УУ могут быть незаполнены (подробнее см. справку)'");
		СписокПроблем.Добавить(ТекстСообщения); 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли 