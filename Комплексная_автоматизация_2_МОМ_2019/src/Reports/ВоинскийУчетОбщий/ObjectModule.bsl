#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();				   

	ДокументРезультат.Очистить();
	
	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
	Если КлючВарианта = "СписокГражданПодлежащихПостановкеНаВоинскийУчет" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокГражданПодлежащихПостановкеНаВоинскийУчет";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		РезультатКомпоновки = ЗарплатаКадрыОтчеты.РезультатКомпоновкиМакетаПечатнойФормы(ЭтотОбъект, ДанныеРасшифровки, НастройкиОтчета);
		
		ВывестиМакетСписокГражданПодлежащихПостановкеНаВоинскийУчет(ДокументРезультат, РезультатКомпоновки, ДатаОтчета);
		
	ИначеЕсли КлючВарианта = "СписокЮношейДляОВК" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокЮношейДляОВК";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ПараметрДатаРожденияНачало = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРожденияНачало"));	
		
		Если ПараметрДатаРожденияНачало <> Неопределено Тогда
			Если ДатаОтчета < '20170801' Тогда 
				ПараметрДатаРожденияНачало.Значение = КонецДня(ДобавитьМесяц(ДатаОтчета, -17*12));
			Иначе 
				ПараметрДатаРожденияНачало.Значение = Дата(Год(ДатаОтчета) - 17, 9, 1);
			КонецЕсли;
			ПараметрДатаРожденияНачало.Использование = Истина;
		КонецЕсли;
		
		ПараметрДатаРожденияКонец = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРожденияКонец"));	
		
		Если ПараметрДатаРожденияКонец <> Неопределено Тогда
			Если ДатаОтчета < '20170801' Тогда 
				ПараметрДатаРожденияКонец.Значение = КонецДня(ДобавитьМесяц(ДатаОтчета, -15*12));
			Иначе 
				ПараметрДатаРожденияКонец.Значение = Дата(Год(ДатаОтчета) - 15, 9, 1);
			КонецЕсли;
			ПараметрДатаРожденияКонец.Использование = Истина;
		КонецЕсли;
		
		РезультатКомпоновки = ЗарплатаКадрыОтчеты.РезультатКомпоновкиМакетаПечатнойФормы(ЭтотОбъект, ДанныеРасшифровки, НастройкиОтчета);
		
		ВывестиМакетСписокЮношейДляОВК(ДокументРезультат, РезультатКомпоновки, ДатаОтчета);
		
	ИначеЕсли КлючВарианта = "СписокПервоначальнойПостановкиНаВоинскийУчет" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокПервоначальнойПостановкиНаВоинскийУчет";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ГодПостановкиНаУчет = ?(ДатаОтчета < '20170801', Год(ДатаОтчета), Год(ДатаОтчета) + 1);
		
		ПараметрГодПостановкиНаУчет = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГодПостановкиНаУчет"));
		
		Если ПараметрГодПостановкиНаУчет <> Неопределено Тогда
			
			Если ТипЗнч(ПараметрГодПостановкиНаУчет.Значение) = Тип("Неопределено") Или ПараметрГодПостановкиНаУчет.Значение = 0 Тогда
				ПараметрГодПостановкиНаУчет.Значение = ГодПостановкиНаУчет;
			КонецЕсли;
			
			ГодПостановкиНаУчет = ПараметрГодПостановкиНаУчет.Значение;
			
		КонецЕсли;
		
		НачалоОтчетногоГода = Дата(ГодПостановкиНаУчет, 1, 1);
		
		ПараметрДатаРожденияНачало = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРожденияНачало"));	
		
		Если ПараметрДатаРожденияНачало <> Неопределено Тогда
			ПараметрДатаРожденияНачало.Значение = ДобавитьМесяц(НачалоОтчетногоГода, -17*12);
			ПараметрДатаРожденияНачало.Использование = Истина;
		КонецЕсли;
		
		ПараметрДатаРожденияКонец = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРожденияКонец"));	
		
		Если ПараметрДатаРожденияКонец <> Неопределено Тогда
			ПараметрДатаРожденияКонец.Значение = КонецГода(ДобавитьМесяц(НачалоОтчетногоГода, -17*12));
			ПараметрДатаРожденияКонец.Использование = Истина;
		КонецЕсли;
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетСписокПервоначальнойПостановкиНаВоинскийУчет(ДокументРезультат, ДанныеОтчета, ДатаОтчета, НачалоОтчетногоГода);
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ДанныеОтчета.Строки.Количество() = 0);
		
	ИначеЕсли КлючВарианта = "СписокДляСверкиСВоенкоматом" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокДляСверкиСВоенкоматом";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		РезультатКомпоновки = ЗарплатаКадрыОтчеты.РезультатКомпоновкиМакетаПечатнойФормы(ЭтотОбъект, ДанныеРасшифровки, НастройкиОтчета);
		
		ВывестиМакетСписокДляСверкиСВоенкоматом(ДокументРезультат, РезультатКомпоновки, ДатаОтчета);
		
	ИначеЕсли КлючВарианта = "КарточкаОповещения" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КарточкаОповещения";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ДанныеОтчета = Новый ТаблицаЗначений;
		
		МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетКарточкаОповещения(ДокументРезультат, ДанныеОтчета, ДатаОтчета);
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ДанныеОтчета.Количество() = 0);
		
	ИначеЕсли КлючВарианта = "РаспискаПриПриемеДокументов" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РаспискаПриПриемеДокументов";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ДанныеОтчета = Новый ТаблицаЗначений;
		
		МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетРаспискаПриПриемеДокументов(ДокументРезультат, ДанныеОтчета, ДатаОтчета);
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ДанныеОтчета.Количество() = 0);
		
	ИначеЕсли КлючВарианта = "КарточкаУчетаОрганизации" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КарточкаУчетаОрганизации";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетКарточкаУчета(ДокументРезультат, ДанныеОтчета, ДатаОтчета);
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ДанныеОтчета.Строки.Количество() = 0);
		
	ИначеЕсли КлючВарианта = "КарточкаУчетаОрганизации2015" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КарточкаУчетаОрганизации2015";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетКарточкаУчета2015(ДокументРезультат, ДанныеОтчета, ДатаОтчета);
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ДанныеОтчета.Строки.Количество() = 0);
		
	ИначеЕсли КлючВарианта = "ИзвещениеОПриемеУвольнении" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзвещениеОПриемеУвольнении";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьПериодОтчета(НастройкиОтчета, ДатаОтчета);
		
		РезультатКомпоновки = ЗарплатаКадрыОтчеты.РезультатКомпоновкиМакетаПечатнойФормы(ЭтотОбъект, ДанныеРасшифровки, НастройкиОтчета);
		
		ВывестиМакетИзвещениеОПриемеУвольнении(ДокументРезультат, РезультатКомпоновки, ДатаОтчета);
		
	ИначеЕсли КлючВарианта = "ПринятыеУволенныеВоеннообязанные" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятыеУволенныеВоеннообязанные";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьПериодОтчета(НастройкиОтчета, ДатаОтчета);
		
		МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки));
		
	ИначеЕсли КлючВарианта = "ПринятыеУволенныеПризывники" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятыеУволенныеПризывники";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьПериодОтчета(НастройкиОтчета, ДатаОтчета);
		
		МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки));
		
	ИначеЕсли КлючВарианта = "АнализКарточекВоинскогоУчета" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнализКарточекВоинскогоУчета";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ЗарплатаКадрыОтчеты.ИнициализироватьОтчетПечатнойФормы(Контекст, ЭтотОбъект, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету СписокГражданПодлежащихПостановкеНаВоинскийУчет.

Процедура ВывестиМакетСписокГражданПодлежащихПостановкеНаВоинскийУчет(ДокументРезультат, РезультатКомпоновки, ДатаОтчета)
	
	ДанныеОтчета = РезультатКомпоновки.ДанныеОтчета;
	ИдентификаторыМакета = РезультатКомпоновки.ИдентификаторыМакета;
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ?(ДатаОтчета < '20170801',
		УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокГражданПодлежащихПостановкеНаВоинскийУчет"),
		УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокГражданПодлежащихПостановкеНаВоинскийУчет2017"));
	
	Заголовок 	  = Макет.ПолучитьОбласть("Заголовок");
	Шапка 		  = Макет.ПолучитьОбласть("Шапка");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал 		  = Макет.ПолучитьОбласть("Подвал");
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(СтрокаТаблицы);
	ВыводимыеОбласти.Добавить(Подвал);
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация, ДанныеОрганизации.Военкомат);
		ДанныеПользовательскихПолейСсылки = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ДанныеОрганизации);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Заголовок, ПараметрыЗаголовка, ДанныеПользовательскихПолейСсылки);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Подвал, ПараметрыЗаголовка, ДанныеПользовательскихПолейСсылки);
		
		ДокументРезультат.Вывести(Заголовок);
		ДокументРезультат.Вывести(Шапка);
		
		КоличествоСтрок = ДанныеОрганизации.Строки.Количество();
		
		Для Каждого ТекСтрока Из ДанныеОрганизации.Строки Цикл 
			
			Если ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке < КоличествоСтрок 
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаТаблицы) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ИначеЕсли ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке = КоличествоСтрок
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДанныеПользовательскихПолейСсылки = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ТекСтрока);
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(СтрокаТаблицы, ТекСтрока, ДанныеПользовательскихПолейСсылки);
			СтрокаТаблицы.Параметры.ДатаМестоРождения = Формат(ТекСтрока.ДатаРождения, "ДЛФ=Д") + ?(ЗначениеЗаполнено(ТекСтрока.МестоРождения), ", " + ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ТекСтрока.МестоРождения), "");
			
			ДокументРезультат.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету СписокЮношейДляОВК.

Процедура ВывестиМакетСписокЮношейДляОВК(ДокументРезультат, РезультатКомпоновки, ДатаОтчета)
	
	ДанныеОтчета = РезультатКомпоновки.ДанныеОтчета;
	ИдентификаторыМакета = РезультатКомпоновки.ИдентификаторыМакета;
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет = ?(ДатаОтчета < '20170801',
		УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокЮношейДляОВК"),
		УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокЮношейДляОВК2017"));
	
	Заголовок 	  = Макет.ПолучитьОбласть("Заголовок");
	Шапка 		  = Макет.ПолучитьОбласть("Шапка");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал 		  = Макет.ПолучитьОбласть("Подвал");
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(СтрокаТаблицы);
	ВыводимыеОбласти.Добавить(Подвал);
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация, ДанныеОрганизации.Военкомат);
		
		ДанныеПользовательскихПолейСсылки = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ДанныеОрганизации);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Заголовок, ПараметрыЗаголовка, ДанныеПользовательскихПолейСсылки);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Подвал, ПараметрыЗаголовка, ДанныеПользовательскихПолейСсылки);
		
		Если ДатаОтчета >= '20170801' Тогда
			Заголовок.Параметры.ДатаОтчета = Формат(ДатаОтчета, "ДФ=гггг");
		КонецЕсли;
		
		ДокументРезультат.Вывести(Заголовок);
		ДокументРезультат.Вывести(Шапка);
		
		КоличествоСтрок = ДанныеОрганизации.Строки.Количество();
		
		Для Каждого ТекСтрока Из ДанныеОрганизации.Строки Цикл 
			
			Если ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке < КоличествоСтрок 
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаТаблицы) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ИначеЕсли ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке = КоличествоСтрок
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДанныеПользовательскихПолейСсылки = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ТекСтрока);
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(СтрокаТаблицы, ТекСтрока, ДанныеПользовательскихПолейСсылки);
			
			ДокументРезультат.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету СписокПервоначальнойПостановкиНаВоинскийУчет.

Процедура ВывестиМакетСписокПервоначальнойПостановкиНаВоинскийУчет(ДокументРезультат, ДанныеОтчета, ДатаОтчета, НачалоОтчетногоГода)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ?(ДатаОтчета < '20170801',
		УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокПервоначальнойПостановкиНаВоинскийУчет"),
		УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокЮношейДляОВК2017"));
		
	Заголовок 	  = Макет.ПолучитьОбласть("Заголовок");
	Шапка 		  = Макет.ПолучитьОбласть("Шапка");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал 		  = Макет.ПолучитьОбласть("Подвал");
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(СтрокаТаблицы);
	ВыводимыеОбласти.Добавить(Подвал);
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация);
		
		ЗаполнитьЗначенияСвойств(Заголовок.Параметры, ПараметрыЗаголовка);
		ЗаполнитьЗначенияСвойств(Подвал.Параметры, ПараметрыЗаголовка);
		
		Если ДатаОтчета >= '20170801' Тогда
			Заголовок.Параметры.ДатаОтчета = Формат(ДатаОтчета, "ДФ=гггг");
		Иначе
			Заголовок.Параметры.ГодРождения 		= Формат(ДобавитьМесяц(НачалоОтчетногоГода, -17*12), "ДФ=""гггг""");
			Заголовок.Параметры.ГодПостановкиНаУчет = Формат(НачалоОтчетногоГода, "ДФ=""гггг""");
		КонецЕсли;
		
		ДокументРезультат.Вывести(Заголовок);
		ДокументРезультат.Вывести(Шапка);
		
		КоличествоСтрок = ДанныеОрганизации.Строки.Количество();
		
		Для Каждого ТекСтрока Из ДанныеОрганизации.Строки Цикл 
			
			Если ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке < КоличествоСтрок 
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаТаблицы) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ИначеЕсли ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке = КоличествоСтрок
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Параметры, ТекСтрока);
			
			Если ДатаОтчета < '20170801' И ТекСтрока.Старше17 Тогда 
				СтрокаТаблицы.Параметры.ФИОПолные = Строка(СтрокаТаблицы.Параметры.ФИОПолные) + ", " + Формат(ТекСтрока.ДатаРождения, "ДФ=""гггг""") + " " + НСтр("ru = 'г. р.'");
			КонецЕсли;
			
			ДокументРезультат.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету СписокДляСверкиСВоенкоматом.

Процедура ВывестиМакетСписокДляСверкиСВоенкоматом(ДокументРезультат, РезультатКомпоновки, ДатаОтчета)
	
	ДанныеОтчета = РезультатКомпоновки.ДанныеОтчета;
	ИдентификаторыМакета = РезультатКомпоновки.ИдентификаторыМакета;
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ?(ДатаОтчета < '20170801',
		УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокДляСверкиСВоенкоматом"),
		УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокДляСверкиСВоенкоматом2017"));
		
	Военкомат 		= Макет.ПолучитьОбласть("Военкомат");
	ПустаяСтрока  	= Макет.ПолучитьОбласть("ПустаяСтрока");
	АдресВоенкомата = Макет.ПолучитьОбласть("АдресВоенкомата");
	Заголовок 		= Макет.ПолучитьОбласть("Заголовок");
	Шапка 			= Макет.ПолучитьОбласть("Шапка");
	СтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал 			= Макет.ПолучитьОбласть("Подвал");
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(СтрокаТаблицы);
	ВыводимыеОбласти.Добавить(Подвал);
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация, ДанныеОрганизации.Военкомат);
		
		ДанныеПользовательскихПолейСсылки = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ДанныеОрганизации);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Военкомат, ДанныеОрганизации, ДанныеПользовательскихПолейСсылки);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(АдресВоенкомата, ДанныеОрганизации, ДанныеПользовательскихПолейСсылки);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Заголовок, ПараметрыЗаголовка, ДанныеПользовательскихПолейСсылки);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Шапка, ДанныеПользовательскихПолейСсылки);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Подвал, ПараметрыЗаголовка, ДанныеПользовательскихПолейСсылки);
		
		ДокументРезультат.Вывести(Военкомат);
		
		Если ЗначениеЗаполнено(ДанныеОрганизации.ВоенкоматАдрес) Тогда 
			ДокументРезультат.Вывести(АдресВоенкомата);
		Иначе 
			ДокументРезультат.Вывести(ПустаяСтрока);
		КонецЕсли;
		
		ДокументРезультат.Вывести(Заголовок);
		ДокументРезультат.Вывести(Шапка);
		
		КоличествоСтрок = ДанныеОрганизации.Строки.Количество();
		
		Для Каждого ТекСтрока Из ДанныеОрганизации.Строки Цикл 
			
			Если ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке < КоличествоСтрок 
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаТаблицы) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ИначеЕсли ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке = КоличествоСтрок
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДанныеПользовательскихПолейСсылки = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ТекСтрока);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(СтрокаТаблицы, ТекСтрока, ДанныеПользовательскихПолейСсылки);
			СтрокаТаблицы.Параметры.ДатаРождения = Формат(ТекСтрока.ДатаРождения, "ДЛФ=Д");
			Если ДатаОтчета >= '20170801' Тогда
				СтрокаТаблицы.Параметры.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ТекСтрока.МестоРождения);
			КонецЕсли;
			
			ДокументРезультат.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету КарточкаОповещения.

Процедура ВывестиМакетКарточкаОповещения(ДокументРезультат, ДанныеОтчета, ДатаОтчета)
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет 	 = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_КарточкаОповещения");
	Карточка = Макет.ПолучитьОбласть("Карточка");
	
	Для Каждого ТекСтрока Из ДанныеОтчета Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Карточка.Параметры, ТекСтрока);
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Карточка.Параметры.Подразделение) Тогда
			Карточка.Параметры.Подразделение = Карточка.Параметры.Подразделение.ПолноеНаименование();
		КонецЕсли;
		
		ДокументРезультат.Вывести(Карточка);
		
	КонецЦикла;
	
	Если ДанныеОтчета.Количество() = 0 Тогда 
		ДокументРезультат.Вывести(Карточка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету РаспискаПриПриемеДокументов.

Процедура ВывестиМакетРаспискаПриПриемеДокументов(ДокументРезультат, ДанныеОтчета, ДатаОтчета)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет 	 = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_РаспискаПриПриемеДокументов");
	Расписка = Макет.ПолучитьОбласть("Расписка");
	
	Для Каждого ТекСтрока Из ДанныеОтчета Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Расписка.Параметры, ТекСтрока);
		
		ДокументРезультат.Вывести(Расписка);
		
	КонецЦикла;
	
	Если ДанныеОтчета.Количество() = 0 Тогда 
		ДокументРезультат.Вывести(Расписка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету КарточкаУчета.

Процедура ВывестиМакетКарточкаУчета(ДокументРезультат, ДанныеОтчета, ДатаОтчета)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	Макет 			= УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_КарточкаУчета");
	ОбластьКарточка = Макет.ПолучитьОбласть("Лист1Карточки");
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация);
		
		УстановитьПривилегированныйРежим(Истина);
		КодыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОрганизации.Организация,"КодПоОКПО,ИНН,ОГРН,КодОКВЭД,КодОКОПФ,КодОКФС,НаименованиеОКВЭД,НаименованиеОКОПФ,НаименованиеОКФС");
		РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(ДанныеОрганизации.Организация, ДатаОтчета);
		КодыОрганизацииИзРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане,"КодПоОКАТО");
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, ПараметрыЗаголовка);
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, КодыОрганизации);
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, КодыОрганизацииИзРегистрации);
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, ДанныеОрганизации);
		
		ТелефоныПодписантов = ТелефоныПодписантов(ПараметрыЗаголовка);
		
		Если ЗначениеЗаполнено(ПараметрыЗаголовка.Руководитель) Тогда 
			ТелефонРуководителя = ТелефоныПодписантов[ПараметрыЗаголовка.Руководитель];
			Если ЗначениеЗаполнено(ТелефонРуководителя) Тогда 
				Если ЗначениеЗаполнено(ОбластьКарточка.Параметры.ДолжностьРуководителя) Тогда
					ОбластьКарточка.Параметры.ТелефонФакс = ", " + ТелефонРуководителя;
				Иначе
					ОбластьКарточка.Параметры.ТелефонФакс = ТелефонРуководителя;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыЗаголовка.ОтветственныйЗаВУР) Тогда 
			ТелефонОтветственногоЗаВУР = ТелефоныПодписантов[ПараметрыЗаголовка.ОтветственныйЗаВУР];
			Если ЗначениеЗаполнено(ТелефонОтветственногоЗаВУР) Тогда 
				ОбластьКарточка.Параметры.ТелефонОтветственногоЗаВУР = ", " + ТелефонОтветственногоЗаВУР;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьКарточка.Параметры.ЕстьЗабронированные = ЗначениеЗаполнено(ДанныеОрганизации.ВсегоВЗапасеЗабронировано);
		
		ДокументРезультат.Вывести(ОбластьКарточка);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиМакетКарточкаУчета2015(ДокументРезультат, ДанныеОтчета, ДатаОтчета)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Если ДатаОтчета >= '20170101' Тогда 
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_КарточкаУчета2017");
	Иначе 
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_КарточкаУчета2015");
	КонецЕсли;
	
	ОбластьКарточка = Макет.ПолучитьОбласть("Лист1Карточки");
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация);
		
		УстановитьПривилегированныйРежим(Истина);
		КодыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОрганизации.Организация,"КодПоОКПО,ИНН,ОГРН,КодОКВЭД,КодОКВЭД2,КодОКОПФ,КодОКФС,НаименованиеОКВЭД,НаименованиеОКВЭД2,НаименованиеОКОПФ,НаименованиеОКФС");
		РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(ДанныеОрганизации.Организация, ДатаОтчета);
		КодыОрганизацииИзРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане,"КодПоОКАТО");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДатаОтчета >= Дата(2017, 1, 1) Тогда 
			КодыОрганизации.КодОКВЭД = КодыОрганизации.КодОКВЭД2;
			КодыОрганизации.НаименованиеОКВЭД = КодыОрганизации.НаименованиеОКВЭД2;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, ПараметрыЗаголовка);
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, КодыОрганизации);
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, КодыОрганизацииИзРегистрации);
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, ДанныеОрганизации);
		
		ТелефоныПодписантов = ТелефоныПодписантов(ПараметрыЗаголовка);
		
		Если ЗначениеЗаполнено(ПараметрыЗаголовка.Руководитель) Тогда 
			ТелефонРуководителя = ТелефоныПодписантов[ПараметрыЗаголовка.Руководитель];
			Если ЗначениеЗаполнено(ТелефонРуководителя) Тогда 
				Если ЗначениеЗаполнено(ОбластьКарточка.Параметры.ДолжностьРуководителя) Тогда
					ОбластьКарточка.Параметры.ТелефонФакс = ", " + ТелефонРуководителя;
				Иначе
					ОбластьКарточка.Параметры.ТелефонФакс = ТелефонРуководителя;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыЗаголовка.ОтветственныйЗаВУР) Тогда 
			ТелефонОтветственногоЗаВУР = ТелефоныПодписантов[ПараметрыЗаголовка.ОтветственныйЗаВУР];
			Если ЗначениеЗаполнено(ТелефонОтветственногоЗаВУР) Тогда 
				ОбластьКарточка.Параметры.ТелефонОтветственногоЗаВУР = ", " + ТелефонОтветственногоЗаВУР;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьКарточка.Параметры.ЕстьЗабронированные = ЗначениеЗаполнено(ДанныеОрганизации.ВсегоВЗапасеЗабронировано);
		
		ЗаполнитьЧисленностьРаботающихГраждан(ОбластьКарточка, ДатаОтчета, ДанныеОрганизации.Организация);
		
		ДокументРезультат.Вывести(ОбластьКарточка);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЧисленностьРаботающихГраждан(ОбластьКарточка, ДатаОтчета, Организация)
	
	Если ДатаОтчета < '20170101' Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеГраждан") Тогда 
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Отчеты.ВоинскийУчетБронирование.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НастройкиОтчета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	НастройкиОтчета.Структура.Очистить();
	НастройкиОтчета.Выбор.Элементы.Очистить();

	ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ПараметрПериод <> Неопределено Тогда
		ПараметрПериод.Значение = ДатаОтчета;
		ПараметрПериод.Использование = Истина;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из НастройкиОтчета.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			НастройкиОтчета.Отбор.Элементы.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "Организация");
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "КатегорияВоинскогоУчета");
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "ВсегоРаботающих");
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "ВсегоВЗапасе");
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "ОфицеровВЗапасе");
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "ПрапорщиковИСолдатВЗапасе");
	
	ГруппировкаКомпоновкиДанных = НастройкиОтчета.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Использование = Истина;
	ГруппировкаКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Организация;
	ЭлементОтбора.Использование = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СхемаКомпоновкиДанных));
	
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновкиДанных, НастройкиОтчета);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДанныеОтчета = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ДанныеОтчета.Свернуть("КатегорияВоинскогоУчета", "ВсегоРаботающих,ВсегоВЗапасе,ОфицеровВЗапасе,ПрапорщиковИСолдатВЗапасе");
	
	НомераСтрок = Новый Соответствие;
	НомераСтрок.Вставить(Перечисления.КатегорииДолжностейДляВоинскогоУчета.Руководители, 1);
	НомераСтрок.Вставить(Перечисления.КатегорииДолжностейДляВоинскогоУчета.Специалисты, 2);
	НомераСтрок.Вставить(Перечисления.КатегорииДолжностейДляВоинскогоУчета.ДругиеСлужащие, 3);
	НомераСтрок.Вставить(Перечисления.КатегорииДолжностейДляВоинскогоУчета.Рабочие, 4);
	
	ВсегоРаботающих = 0;
	ВсегоВЗапасе = 0;
	ОфицеровВЗапасе = 0;
	ПрапорщиковИСолдатВЗапасе = 0;
	
	Для Каждого ДанныеПоКатегории Из ДанныеОтчета Цикл 
		НомерСтроки = НомераСтрок[ДанныеПоКатегории.КатегорияВоинскогоУчета];
		Если НомерСтроки = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		ОбластьКарточка.Параметры["ВсегоРаботающих" + НомерСтроки] = ДанныеПоКатегории.ВсегоРаботающих;
		ВсегоРаботающих = ВсегоРаботающих + ДанныеПоКатегории.ВсегоРаботающих;
		ОбластьКарточка.Параметры["ВсегоВЗапасе" + НомерСтроки] = ДанныеПоКатегории.ВсегоВЗапасе;
		ВсегоВЗапасе = ВсегоВЗапасе + ДанныеПоКатегории.ВсегоВЗапасе;
		ОбластьКарточка.Параметры["ОфицеровВЗапасе" + НомерСтроки] = ДанныеПоКатегории.ОфицеровВЗапасе;
		ОфицеровВЗапасе = ОфицеровВЗапасе + ДанныеПоКатегории.ОфицеровВЗапасе;
		ОбластьКарточка.Параметры["ПрапорщиковИСолдатВЗапасе" + НомерСтроки] = ДанныеПоКатегории.ПрапорщиковИСолдатВЗапасе;
		ПрапорщиковИСолдатВЗапасе = ПрапорщиковИСолдатВЗапасе + ДанныеПоКатегории.ПрапорщиковИСолдатВЗапасе;
	КонецЦикла;
	
	ОбластьКарточка.Параметры["ВсегоРаботающих5"] = ВсегоРаботающих;
	ОбластьКарточка.Параметры["ВсегоВЗапасе5"] = ВсегоВЗапасе;
	ОбластьКарточка.Параметры["ОфицеровВЗапасе5"] = ОфицеровВЗапасе;
	ОбластьКарточка.Параметры["ПрапорщиковИСолдатВЗапасе5"] = ПрапорщиковИСолдатВЗапасе;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету ИзвещениеОПриемеУвольнении.

Процедура ВывестиМакетИзвещениеОПриемеУвольнении(ДокументРезультат, РезультатКомпоновки, ДатаОтчета)
	
	Если ДатаОтчета >= '20200218' Тогда
		ВывестиМакетИзвещениеОПриемеУвольнении2020(ДокументРезультат, РезультатКомпоновки, ДатаОтчета);
		Возврат;
	КонецЕсли;
	
	ДанныеОтчета = РезультатКомпоновки.ДанныеОтчета;
	ИдентификаторыМакета = РезультатКомпоновки.ИдентификаторыМакета;
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет = ?(ДатаОтчета < '20170801',
		УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_ИзвещениеОПриемеУвольнении"),
		УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_ИзвещениеОПриемеУвольнении2017"));
		
	ВоенкоматПриПриеме 				= Макет.ПолучитьОбласть("ВоенкоматПриПриеме");
	АдресВоенкоматаПриПриеме 		= Макет.ПолучитьОбласть("АдресВоенкоматаПриПриеме");
	Прием 							= Макет.ПолучитьОбласть("Прием");
	ВоенкоматПриУвольнении 			= Макет.ПолучитьОбласть("ВоенкоматПриУвольнении");
	АдресВоенкоматаПриУвольнении 	= Макет.ПолучитьОбласть("АдресВоенкоматаПриУвольнении");
	Увольнение 						= Макет.ПолучитьОбласть("Увольнение");
	ПустаяСтрока 					= Макет.ПолучитьОбласть("ПустаяСтрока");
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	Для Каждого ТекСтрока Из ДанныеОтчета.Строки Цикл 
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ТекСтрока.Организация, ТекСтрока.Военкомат);
	
		Если ТекСтрока.ДатаПриема <= ТекСтрока.ПараметрыДанныхПериод
			И ТекСтрока.ДатаПриема >= ТекСтрока.ПараметрыДанныхНачалоПериода Тогда
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДанныеПользовательскихПолейСсылки = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ТекСтрока);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(ВоенкоматПриПриеме, ТекСтрока, ДанныеПользовательскихПолейСсылки);
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(АдресВоенкоматаПриПриеме, ТекСтрока, ДанныеПользовательскихПолейСсылки);
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Прием, ПараметрыЗаголовка, ТекСтрока, ДанныеПользовательскихПолейСсылки);
			
			Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
				Прием.Параметры.НомерПриказаОПриеме = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ТекСтрока.НомерПриказаОПриеме, Истина, Истина);
			КонецЕсли;
			
			ДокументРезультат.Вывести(ВоенкоматПриПриеме);
			
			Если ЗначениеЗаполнено(ТекСтрока.ВоенкоматПриПриемеАдрес) Тогда 
				ДокументРезультат.Вывести(АдресВоенкоматаПриПриеме);
			Иначе 
				ДокументРезультат.Вывести(ПустаяСтрока);
			КонецЕсли;
			
			ДокументРезультат.Вывести(Прием);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ДатаУвольнения) И ТекСтрока.ДатаУвольнения <= ТекСтрока.ПараметрыДанныхПериод 
			И ТекСтрока.ДатаУвольнения >= ТекСтрока.ПараметрыДанныхНачалоПериода Тогда
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДанныеПользовательскихПолейСсылки = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ТекСтрока);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(ВоенкоматПриУвольнении, ТекСтрока, ДанныеПользовательскихПолейСсылки);
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(АдресВоенкоматаПриУвольнении, ТекСтрока, ДанныеПользовательскихПолейСсылки);
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Увольнение, ПараметрыЗаголовка, ТекСтрока, ДанныеПользовательскихПолейСсылки);
			
			Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
				Увольнение.Параметры.НомерПриказаОбУвольнении = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ТекСтрока.НомерПриказаОбУвольнении, Истина, Истина);
			КонецЕсли;
			
			ДокументРезультат.Вывести(ВоенкоматПриУвольнении);
			
			Если ЗначениеЗаполнено(ТекСтрока.ВоенкоматАдрес) Тогда 
				ДокументРезультат.Вывести(АдресВоенкоматаПриУвольнении);
			Иначе 
				ДокументРезультат.Вывести(ПустаяСтрока);
			КонецЕсли;
			
			ДокументРезультат.Вывести(Увольнение);
			
		КонецЕсли;	
			
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВывестиМакетИзвещениеОПриемеУвольнении2020(ДокументРезультат, РезультатКомпоновки, ДатаОтчета)
	
	ДанныеОтчета = РезультатКомпоновки.ДанныеОтчета;
	ИдентификаторыМакета = РезультатКомпоновки.ИдентификаторыМакета;
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_ИзвещениеОПриемеУвольнении2020");
		
	Извещение = Макет.ПолучитьОбласть("Извещение");
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	Для Каждого ТекСтрока Из ДанныеОтчета.Строки Цикл 
		
		ПараметрыМакета = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ТекСтрока.Организация, ТекСтрока.Военкомат);
		
		ПараметрыМакета.Вставить("ДатаРождения", ТекСтрока.ДатаРождения);
		ПараметрыМакета.Вставить("АдресМестаПроживанияПредставление", ТекСтрока.АдресМестаПроживанияПредставление);
		
	    ПараметрыМакета.Вставить("ВоенкоматНаименование");
	    ПараметрыМакета.Вставить("ФИОПолные");
	    ПараметрыМакета.Вставить("Звание");
	    ПараметрыМакета.Вставить("ВУС");
	    ПараметрыМакета.Вставить("Должность");
	    ПараметрыМакета.Вставить("НомерПриказа");
	    ПараметрыМакета.Вставить("ДатаПриказа");
		
		Если ТекСтрока.ДатаПриема <= ТекСтрока.ПараметрыДанныхПериод
			И ТекСтрока.ДатаПриема >= ТекСтрока.ПараметрыДанныхНачалоПериода Тогда
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПараметрыМакета.ВоенкоматНаименование = ТекСтрока.ВоенкоматПриПриемеНаименование;
			ПараметрыМакета.ФИОПолные = ТекСтрока.ФИОПолныеПриПриеме;
			ПараметрыМакета.Звание = ТекСтрока.ЗваниеПриПриеме;
			ПараметрыМакета.ВУС = ТекСтрока.ВУСПриПриеме;
			ПараметрыМакета.Должность = ТекСтрока.ДолжностьПриПриеме;
			ПараметрыМакета.НомерПриказа = ТекСтрока.НомерПриказаОПриеме;
			ПараметрыМакета.ДатаПриказа = ТекСтрока.ДатаПриказаОПриеме;
			
			Извещение.Области.Принят.Шрифт = Новый Шрифт(Извещение.Области.Принят.Шрифт, , , , , , Ложь);
			Извещение.Области.Уволен.Шрифт = Новый Шрифт(Извещение.Области.Уволен.Шрифт, , , , , , Истина);
			
			ДанныеПользовательскихПолейСсылки = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ТекСтрока);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Извещение, ПараметрыМакета, ДанныеПользовательскихПолейСсылки);			
			
			Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
				Извещение.Параметры.НомерПриказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ТекСтрока.НомерПриказаОПриеме, Истина, Истина);
			КонецЕсли;
			
			ДокументРезультат.Вывести(Извещение);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ДатаУвольнения) И ТекСтрока.ДатаУвольнения <= ТекСтрока.ПараметрыДанныхПериод 
			И ТекСтрока.ДатаУвольнения >= ТекСтрока.ПараметрыДанныхНачалоПериода Тогда
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПараметрыМакета.ВоенкоматНаименование = ТекСтрока.ВоенкоматНаименование;
			ПараметрыМакета.ФИОПолные = ТекСтрока.ФИОПолные;
			ПараметрыМакета.Звание = ТекСтрока.Звание;
			ПараметрыМакета.ВУС = ТекСтрока.ВУС;
			ПараметрыМакета.Должность = ТекСтрока.Должность;
			ПараметрыМакета.НомерПриказа = ТекСтрока.НомерПриказаОбУвольнении;
			ПараметрыМакета.ДатаПриказа = ТекСтрока.ДатаПриказаОбУвольнении;
			
			Извещение.Области.Принят.Шрифт = Новый Шрифт(Извещение.Области.Принят.Шрифт, , , , , , Истина);
			Извещение.Области.Уволен.Шрифт = Новый Шрифт(Извещение.Области.Уволен.Шрифт, , , , , , Ложь);
			
			ДанныеПользовательскихПолейСсылки = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ТекСтрока);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(Извещение, ПараметрыМакета, ДанныеПользовательскихПолейСсылки);
			
			Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
				Извещение.Параметры.НомерПриказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ТекСтрока.НомерПриказаОбУвольнении, Истина, Истина);
			КонецЕсли;
			
			ДокументРезультат.Вывести(Извещение);
			
		КонецЕсли;	
			
	КонецЦикла;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и Функции.

Процедура УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета)
	
	ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметраПериод <> Неопределено Тогда
		
		УстановитьДатуОтчета = Ложь;
		
		Если ТипЗнч(ЗначениеПараметраПериод.Значение) = Тип("Неопределено") Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПараметраПериод.Значение) = Тип("Дата")
			И ЗначениеПараметраПериод.Значение = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если ТипЗнч(ЗначениеПараметраПериод.Значение) = Тип("СтандартнаяДатаНачала")
			И Дата(ЗначениеПараметраПериод.Значение) = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если УстановитьДатуОтчета Тогда
			ЗначениеПараметраПериод.Значение = ТекущаяДатаСеанса();
		КонецЕсли; 
		
		ДатаОтчета = Дата(ЗначениеПараметраПериод.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПериодОтчета(НастройкиОтчета, ДатаОтчета)
	
	ЗначениеПараметраПериодОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	
	Если ЗначениеПараметраПериодОтчета <> Неопределено И ЗначениеПараметраПериодОтчета.Значение <> '00010101' Тогда
		
		НачалоПериода = ЗначениеПараметраПериодОтчета.Значение.ДатаНачала;
		КонецПериода  = ЗначениеПараметраПериодОтчета.Значение.ДатаОкончания;
		
		Если НачалоПериода = '00010101' Тогда
			ЗначениеПараметраПериодОтчета.Значение.ДатаНачала = НачалоМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если КонецПериода = '00010101' Тогда
			ЗначениеПараметраПериодОтчета.Значение.ДатаОкончания  = КонецМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		
		Если ЗначениеПараметраПериод <> Неопределено Тогда
			ЗначениеПараметраПериод.Значение = НачалоДня(ЗначениеПараметраПериодОтчета.Значение.ДатаОкончания);
		КонецЕсли;	
		
		ДатаОтчета = Дата(ЗначениеПараметраПериод.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗаголовкаСтруктура(ДатаОтчета, Организация, Военкомат = Неопределено)
	
	ПараметрыЗаголовка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, НаименованиеПолное");
	
	ПолноеНаименованиеОрганизации = ?(ЗначениеЗаполнено(ПараметрыЗаголовка.НаименованиеПолное), ПараметрыЗаголовка.НаименованиеПолное, ПараметрыЗаголовка.Наименование);
	
	ПараметрыЗаголовка.Вставить("ДатаОтчета", ДатаОтчета);
	ПараметрыЗаголовка.Вставить("Организация", Организация);
	ПараметрыЗаголовка.Вставить("ПолноеНаименованиеОрганизации", ПолноеНаименованиеОрганизации);
	ПараметрыЗаголовка.Вставить("ЮрАдресОрганизации", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ДатаОтчета));
	ПараметрыЗаголовка.Вставить("ФактАдресОрганизации", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ДатаОтчета));
	ПараметрыЗаголовка.Вставить("ПочтовыйАдресОрганизации", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, ДатаОтчета));
	ПараметрыЗаголовка.Вставить("Военкомат", Военкомат);
	
	ЗаполнитьПодписантов(ПараметрыЗаголовка, Организация, ДатаОтчета);
	
	Возврат ПараметрыЗаголовка;
	
КонецФункции

Процедура ЗаполнитьПодписантов(ПараметрыЗаголовка, Организация, ДатаОтчета)
	
	ПараметрыЗаполнения = Новый Структура("Руководитель,РуководительРасшифровкаПодписи,ДолжностьРуководителя,ОтветственныйЗаВУР,ФИОРуководителя,"
		+ "ОтветственныйЗаВУРРасшифровкаПодписи,ДолжностьОтветственногоЗаВУР,ФИООтветственногоЗаВУР");
	КлючиОтветственныхЛиц = "";
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрРуководитель = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Руководитель"));	
	Если ПараметрРуководитель <> Неопределено И ПараметрРуководитель.Использование Тогда
		Если ЗначениеЗаполнено(ПараметрРуководитель.Значение) Тогда
			ПараметрыЗаполнения.Руководитель = ПараметрРуководитель.Значение;
		КонецЕсли; 
	Иначе
		КлючиОтветственныхЛиц = "Руководитель";
	КонецЕсли;
	
	ПараметрДолжностьРуководителя = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьРуководителя"));	
	Если ПараметрДолжностьРуководителя <> Неопределено И ПараметрДолжностьРуководителя.Использование Тогда
		ПараметрыЗаполнения.ДолжностьРуководителя = ПараметрДолжностьРуководителя.Значение;
	Иначе
		КлючиОтветственныхЛиц = ?(ПустаяСтрока(КлючиОтветственныхЛиц), "", КлючиОтветственныхЛиц + ",") + "ДолжностьРуководителя,ДолжностьРуководителяСтрокой";
	КонецЕсли;
	
	ПараметрОтветственныйЗаВУР = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОтветственныйЗаВУР"));	
	Если ПараметрОтветственныйЗаВУР <> Неопределено И ПараметрОтветственныйЗаВУР.Использование Тогда
		Если ЗначениеЗаполнено(ПараметрОтветственныйЗаВУР.Значение) Тогда
			ПараметрыЗаполнения.ОтветственныйЗаВУР = ПараметрОтветственныйЗаВУР.Значение;
		КонецЕсли; 
	Иначе
		КлючиОтветственныхЛиц = ?(ПустаяСтрока(КлючиОтветственныхЛиц), "", КлючиОтветственныхЛиц + ",") + "ОтветственныйЗаВУР";
	КонецЕсли;
	
	ПараметрДолжностьОтветственногоЗаВУР = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьОтветственногоЗаВУР"));	
	Если ПараметрДолжностьОтветственногоЗаВУР <> Неопределено И ПараметрДолжностьОтветственногоЗаВУР.Использование Тогда
		ПараметрыЗаполнения.ДолжностьОтветственногоЗаВУР = ПараметрДолжностьОтветственногоЗаВУР.Значение;
	Иначе
		КлючиОтветственныхЛиц = ?(ПустаяСтрока(КлючиОтветственныхЛиц), "", КлючиОтветственныхЛиц + ",") + "ДолжностьОтветственногоЗаВУР,ДолжностьОтветственногоЗаВУРСтрокой";
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючиОтветственныхЛиц) Тогда
		
		ОтветственныеЛица = Новый Структура("Организация," + КлючиОтветственныхЛиц, Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ОтветственныеЛица, ДатаОтчета);
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ОтветственныеЛица);
		
		Если ОтветственныеЛица.Свойство("ДолжностьРуководителя") И ЗначениеЗаполнено(ОтветственныеЛица.ДолжностьРуководителя) Тогда
			ПараметрыЗаполнения.ДолжностьРуководителя = Строка(ОтветственныеЛица.ДолжностьРуководителя);
		КонецЕсли;
		Если ОтветственныеЛица.Свойство("ДолжностьОтветственногоЗаВУР") И ЗначениеЗаполнено(ОтветственныеЛица.ДолжностьОтветственногоЗаВУР) Тогда
			ПараметрыЗаполнения.ДолжностьОтветственногоЗаВУР = Строка(ОтветственныеЛица.ДолжностьОтветственногоЗаВУР);
		КонецЕсли;
		Если ОтветственныеЛица.Свойство("ДолжностьРуководителяСтрокой") И ЗначениеЗаполнено(ОтветственныеЛица.ДолжностьРуководителяСтрокой) Тогда
			ПараметрыЗаполнения.ДолжностьРуководителя = ОтветственныеЛица.ДолжностьРуководителяСтрокой;
		КонецЕсли;
		Если ОтветственныеЛица.Свойство("ДолжностьОтветственногоЗаВУРСтрокой") И ЗначениеЗаполнено(ОтветственныеЛица.ДолжностьОтветственногоЗаВУРСтрокой) Тогда
			ПараметрыЗаполнения.ДолжностьОтветственногоЗаВУР = ОтветственныеЛица.ДолжностьОтветственногоЗаВУРСтрокой;
		КонецЕсли; 
		
	КонецЕсли; 
	
	МассивФизЛиц = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Руководитель) Тогда
		МассивФизЛиц.Добавить(ПараметрыЗаполнения.Руководитель);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ОтветственныйЗаВУР) Тогда
		МассивФизЛиц.Добавить(ПараметрыЗаполнения.ОтветственныйЗаВУР);
	КонецЕсли; 
	
	Если МассивФизЛиц.Количество() > 0 Тогда
		
		ФИОФизЛиц = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(ДатаОтчета, МассивФизЛиц);
		
		ФИОРуководителя = ФИОФизЛиц[ПараметрыЗаполнения.Руководитель];
		Если ЗначениеЗаполнено(ФИОРуководителя) Тогда
			ПараметрыЗаполнения.РуководительРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИОРуководителя);
			ПараметрыЗаполнения.ФИОРуководителя = ФИОРуководителя.Фамилия + " " + ФИОРуководителя.Имя + " " + ФИОРуководителя.Отчество;
		КонецЕсли; 

		ФИООтветственногоЗаВУР = ФИОФизЛиц[ПараметрыЗаполнения.ОтветственныйЗаВУР];
		Если ЗначениеЗаполнено(ФИООтветственногоЗаВУР) Тогда
			ПараметрыЗаполнения.ОтветственныйЗаВУРРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИООтветственногоЗаВУР);
			ПараметрыЗаполнения.ФИООтветственногоЗаВУР = ФИООтветственногоЗаВУР.Фамилия + " " + ФИООтветственногоЗаВУР.Имя + " " + ФИООтветственногоЗаВУР.Отчество;
		КонецЕсли; 

	КонецЕсли; 
	
	Для каждого КлючИЗначение Из ПараметрыЗаполнения Цикл
		ПараметрыЗаголовка.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ТелефоныПодписантов(ПараметрыЗаголовка)
	
	МассивФизическихЛиц = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыЗаголовка.Руководитель) Тогда 
		МассивФизическихЛиц.Добавить(ПараметрыЗаголовка.Руководитель);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗаголовка.ОтветственныйЗаВУР) Тогда 
		МассивФизическихЛиц.Добавить(ПараметрыЗаголовка.ОтветственныйЗаВУР);
	КонецЕсли;
	
	ТелефоныПодписантов = Новый Соответствие;
	Если МассивФизическихЛиц.Количество() = 0 Тогда 
		Возврат ТелефоныПодписантов;
	КонецЕсли;
	
	РабочиеТелефоныПодписантов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивФизическихЛиц,	
		Перечисления.ТипыКонтактнойИнформации.Телефон, 
		Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		
	Для Каждого ДанныеПодписанта Из РабочиеТелефоныПодписантов Цикл 
		ТелефоныПодписантов.Вставить(ДанныеПодписанта.Объект, НСтр("ru='тел'") + ". " + ДанныеПодписанта.Представление);
	КонецЦикла;
	
	Возврат ТелефоныПодписантов;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли