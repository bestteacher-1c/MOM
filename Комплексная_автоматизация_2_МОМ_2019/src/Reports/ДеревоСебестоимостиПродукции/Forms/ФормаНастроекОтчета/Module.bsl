
#Область ОписаниеПеременных

&НаКлиенте
Перем ЭлементСпискаДоНачалаИзмененияНаКлиенте;
&НаКлиенте
Перем ПараметрыЗаполненияНаКлиенте;
&НаКлиенте
Перем ИсточникПеретаскиванияНаКлиенте;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//
	//УстановитьУсловноеОформление();
	//
	//Если Параметры.Свойство("АвтоТест") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ФормаПараметры = Новый Структура(
	//	"КлючНазначенияИспользования, КлючПользовательскихНастроек,
	//	|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
	//	|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	//ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	//ФормаПараметры.Вставить("Отбор", Новый Структура);
	//Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
	//	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
	//	Параметры.Отбор.Очистить();
	//КонецЕсли;
	//
	//Если Не Параметры.Свойство("НастройкиОтчета", НастройкиОтчета) Тогда
	//	ВызватьИсключение НСтр("ru = 'Не передан служебный параметр ""НастройкиОтчета"".'");
	//КонецЕсли;
	//Если Не Параметры.Свойство("ВариантНаименование", ВариантНаименование) Тогда
	//	ВызватьИсключение НСтр("ru = 'Не передан служебный параметр ""ВариантНаименование"".'");
	//КонецЕсли;
	//КлючСохраненияПоложенияОкна = НастройкиОтчета.ПолноеИмя;
	//Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
	//	КлючСохраненияПоложенияОкна = КлючСохраненияПоложенияОкна + "." + КлючТекущегоВарианта;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(ВариантНаименование) Тогда
	//	ВариантНаименование = НастройкиОтчета.Наименование;
	//КонецЕсли;
	//Заголовок = НСтр("ru = 'Настройки отчета'") + " """ + ВариантНаименование + """";
	//	
	//Если НастройкиОтчета.СхемаМодифицирована Тогда
	//	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(НастройкиОтчета.АдресСхемы));
	//КонецЕсли;
	//
	//ЦветНеактивныхЗначенийТаблицы = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	//
	//// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	//НаборРеквизитов = ПолучитьРеквизиты();
	//Для Каждого Реквизит Из НаборРеквизитов Цикл
	//	ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита(Реквизит));
	//КонецЦикла;
	//Для Каждого Команда Из Команды Цикл
	//	ПостоянныеКоманды.Добавить(Команда.Имя);
	//КонецЦикла;
	//
	//НеобходимоОбновитьНастройки = Истина;
	//
	//Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	ФормаПараметры.Вставить("Отбор", Новый Структура);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
	
	Если Не Параметры.Свойство("НастройкиОтчета", НастройкиОтчета) Тогда
		ВызватьИсключение НСтр("ru = 'Не передан служебный параметр ""НастройкиОтчета"".'");
	КонецЕсли;
	Если Не Параметры.Свойство("ВариантНаименование", ВариантНаименование) Тогда
		ВызватьИсключение НСтр("ru = 'Не передан служебный параметр ""ВариантНаименование"".'");
	КонецЕсли;
	
	КлючСохраненияПоложенияОкна = НастройкиОтчета.ПолноеИмя;
	Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
		КлючСохраненияПоложенияОкна = КлючСохраненияПоложенияОкна + "." + КлючТекущегоВарианта;
	КонецЕсли;
	
	НастройкиКД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Вариант");
	Если НастройкиКД = Неопределено Тогда
		НастройкиКД = Отчет.КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Параметры.Свойство("ИдентификаторЭлементаСтруктурыНастроек", ИдентификаторЭлементаСтруктурыНастроек);
	Если ТипЗнч(ИдентификаторЭлементаСтруктурыНастроек) = Тип("ИдентификаторКомпоновкиДанных") Тогда
		РежимИзмененияЭлементаСтруктурыНастроек = Истина;
		Высота = 0;
		КлючСохраненияПоложенияОкна = КлючСохраненияПоложенияОкна + ".Узел";
		
		Если Не Параметры.Свойство("Заголовок", Заголовок) Тогда
			ВызватьИсключение НСтр("ru = 'Не передан служебный параметр ""Заголовок"".'");
		КонецЕсли;
		
		Если Не Параметры.Свойство("ТипЭлементаСтруктурыНастроек", ТипЭлементаСтруктурыНастроек) Тогда
			ВызватьИсключение НСтр("ru = 'Не передан служебный параметр ""ТипЭлементаСтруктурыНастроек"".'");
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ВариантНаименование) Тогда
			ВариантНаименование = НастройкиОтчета.Наименование;
		КонецЕсли;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки отчета ""%1""'"), ВариантНаименование);
	КонецЕсли;	
	
	Если НастройкиОтчета.СхемаМодифицирована Тогда
		Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(НастройкиОтчета.АдресСхемы));
	КонецЕсли;
	
	ЦветНеактивныхЗначенийТаблицы = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита(Реквизит));
	КонецЦикла;
	
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	НеобходимоОбновитьНастройки = Истина;

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, НовыеНастройкиКД, НастройкиОтчета);
	КонецЕсли;
	
	НеобходимоОбновитьНастройки = Истина;
	
	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеНастройкиКД);
		Исключение
			НовыеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеНастройкиXML", НовыеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоОбновитьНастройки = Истина;
	
	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеПользовательскиеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеПользовательскиеНастройкиКД);
		Исключение
			НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеПользовательскиеНастройкиXML", НовыеПользовательскиеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ВариантМодифицирован = Ложь;
	
	Если НеобходимоОбновитьНастройки Тогда
		НеобходимоОбновитьНастройки = Ложь;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ИмяСобытия", "ПриСозданииНаСервере");
		ПараметрыЗаполнения.Вставить("ОбновитьНастройкиВарианта", Не РежимИзмененияЭлементаСтруктурыНастроек И Истина);
		
		ОбновитьФорму(ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ВариантМодифицирован = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбораСформирован Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, РезультатВыбора(Ложь));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Подключаемые

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Период_ПриИзменении(Элемент)
	ОтчетыКлиент.УстановитьПериод(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементНастройки_ПриИзменении(Элемент)
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	Индекс = ПутьКДаннымЭлементов.ПоИмени[Элемент.Имя];
	Если Индекс = Неопределено Тогда 
		Индекс = ОтчетыКлиентСервер.ИндексЭлементаНастройкиПоПути(Элемент.Имя);
	КонецЕсли;
	
	ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[Индекс];
	
	ЭтоФлажок = СтрНачинаетсяС(Элемент.Имя, "Флажок") Или СтрЗаканчиваетсяНа(Элемент.Имя, "Флажок");
	Если ЭтоФлажок Тогда 
		ЭлементНастройки.Значение = ЭтотОбъект[Элемент.Имя];
	КонецЕсли;
	
	Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
		И НастройкиОтчета.ЗагрузитьНастройкиПриИзмененииПараметров.Найти(ЭлементНастройки.Параметр) <> Неопределено Тогда 
		
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("КомпоновщикНастроекКД", КомпоновщикНастроек);
		
		ОбновитьФорму(ПараметрыОбновления);
	Иначе
		ОформитьСписок(Элемент, ЭлементНастройки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементСписка_ПриИзменении(Элемент)
	ПутьКСписку = СтрЗаменить(Элемент.Имя, "Значение", "");
	
	Строка = Элементы[ПутьКСписку].ТекущиеДанные;
	
	ЭлементСписка = ЭтотОбъект[ПутьКСписку].НайтиПоЗначению(Строка.Значение);
	ЭлементСписка.Пометка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Список_ПриИзменении(Элемент)
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	Индекс = ПутьКДаннымЭлементов.ПоИмени[Элемент.Имя];
	ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[Индекс];
	
	Список = ЭтотОбъект[Элемент.Имя];
	ВыбранныеЗначения = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Список Цикл 
		Если ЭлементСписка.Пометка Тогда 
			ЗаполнитьЗначенияСвойств(ВыбранныеЗначения.Добавить(), ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
		ЭлементНастройки.Значение = ВыбранныеЗначения;
	ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
		ЭлементНастройки.ПравоеЗначение = ВыбранныеЗначения;
	КонецЕсли;
	ЭлементНастройки.Использование = Истина;
	
	ОформитьСписок(Элемент, ЭлементНастройки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементСписка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПутьКСписку = СтрЗаменить(Элемент.Имя, "Значение", "");
	
	ПараметрыЗаполнения = ПараметрыЗаполненияСписка(Истина, Ложь, Ложь);
	ПараметрыЗаполнения.ПутьКСписку = ПутьКСписку;
	ПараметрыЗаполнения.Индекс = ПутьКДаннымЭлементов.ПоИмени[ПутьКСписку];
	ПараметрыЗаполнения.Владелец = Элемент;
	
	НачатьЗаполнениеСписка(Элемент, ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Список_ОбработкаВыбора(Элемент, РезультатВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Список = ЭтотОбъект[Элемент.Имя];
	
	Выбранные = ОтчетыКлиентСервер.ЗначенияСписком(РезультатВыбора);
	Выбранные.ЗаполнитьПометки(Истина);
	
	Дополнение = ОтчетыКлиентСервер.ДополнитьСписок(Список, Выбранные, Ложь, Истина);
	
	Индекс = ПутьКДаннымЭлементов.ПоИмени[Элемент.Имя];
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[Индекс];
	
	Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ЭлементНастройки.Значение = Список;
	Иначе
		ЭлементНастройки.ПравоеЗначение = Список;
	КонецЕсли;
	ЭлементНастройки.Использование = Истина;
	
	ОформитьСписок(Элемент, ЭлементНастройки);
	
	Если Дополнение.Всего > 0 Тогда
		Если Дополнение.Всего = 1 Тогда
			ЗаголовокОповещения = НСтр("ru = 'Элемент добавлен в список'");
		Иначе
			ЗаголовокОповещения = НСтр("ru = 'Элементы добавлены в список'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			ЗаголовокОповещения,,
			Строка(Выбранные),
			БиблиотекаКартинок.ВыполнитьЗадачу);
	КонецЕсли;
	
	УстановитьМодифицированность();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборы

&НаКлиенте
Процедура Отборы_Сгруппировать(Команда)
	ПараметрыГруппировки = ПараметрыГруппировкиОтборов();
	Если ПараметрыГруппировки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	
	// Обработка элементов настроек.
	ЭлементНастройкиИсточник = СвойствоЭлементаСтруктуры;
	Если ТипЗнч(ПараметрыГруппировки.Родитель.Идентификатор) = Тип("ИдентификаторКомпоновкиДанных") Тогда 
		ЭлементНастройкиИсточник = СвойствоЭлементаСтруктуры.ПолучитьОбъектПоИдентификатору(ПараметрыГруппировки.Родитель.Идентификатор);
	КонецЕсли;
	
	ЭлементНастройкиПриемник = ЭлементНастройкиИсточник.Элементы.Вставить(ПараметрыГруппировки.Индекс, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЭлементНастройкиПриемник.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	ЭлементНастройкиПриемник.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	НаследникиЭлементовНастроек = Новый Соответствие;
	НаследникиЭлементовНастроек.Вставить(ЭлементНастройкиИсточник, ЭлементНастройкиПриемник);
	
	// Обработка строк.
	СтрокаИсточник = ПараметрыГруппировки.Родитель;
	СтрокаПриемник = СтрокаИсточник.ПолучитьЭлементы().Вставить(ПараметрыГруппировки.Индекс);
	УстановитьДанныеСтрокиОтборов(СтрокаПриемник, СвойствоЭлементаСтруктуры, ЭлементНастройкиПриемник);
	СтрокаПриемник.Идентификатор = СвойствоЭлементаСтруктуры.ПолучитьИдентификаторПоОбъекту(ЭлементНастройкиПриемник);
	
	НаследникиСтрок = Новый Соответствие;
	НаследникиСтрок.Вставить(СтрокаИсточник, СтрокаПриемник);
	
	ИзменитьГруппировкуОтборов(СвойствоЭлементаСтруктуры, ПараметрыГруппировки.Строки, НаследникиЭлементовНастроек, НаследникиСтрок);
	УдалитьБазовыеЭлементыГруппировкиОтборов(СвойствоЭлементаСтруктуры, ПараметрыГруппировки);
	
	Раздел = КорневаяСтрокаПоУмолчанию("Отборы");
	Элементы.Отборы.Развернуть(Раздел.ПолучитьИдентификатор(), Истина);
	Элементы.Отборы.ТекущаяСтрока = СтрокаПриемник.ПолучитьИдентификатор();
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура Отборы_Разгруппировать(Команда)
	ИдентификаторыСтрок = Элементы.Отборы.ВыделенныеСтроки;
	Если ИдентификаторыСтрок.Количество() <> 1 Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите одну группу.'"));
		Возврат;
	КонецЕсли;
	
	РодительСтрокиИсточника = Отборы.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
	Если ТипЗнч(РодительСтрокиИсточника.Идентификатор) <> Тип("ИдентификаторКомпоновкиДанных") Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите группу.'"));
		Возврат;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	
	РодительЭлементаНастройкиИсточника = СвойствоЭлементаСтруктуры.ПолучитьОбъектПоИдентификатору(РодительСтрокиИсточника.Идентификатор);
	Если ТипЗнч(РодительЭлементаНастройкиИсточника) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите группу.'"));
		Возврат;
	КонецЕсли;
	
	РодительЭлементаНастройкиПриемника = РодительЭлементаНастройкиИсточника.Родитель;
	Если РодительЭлементаНастройкиИсточника.Родитель = Неопределено Тогда 
		РодительЭлементаНастройкиПриемника = СвойствоЭлементаСтруктуры;
	КонецЕсли;
	
	НаследникиЭлементовНастроек = Новый Соответствие;
	НаследникиЭлементовНастроек.Вставить(РодительЭлементаНастройкиИсточника, РодительЭлементаНастройкиПриемника);
	
	РодительСтрокиПриемника = РодительСтрокиИсточника.ПолучитьРодителя();
	НаследникиСтрок = Новый Соответствие;
	НаследникиСтрок.Вставить(РодительСтрокиИсточника, РодительСтрокиПриемника);
	
	ИзменитьГруппировкуОтборов(СвойствоЭлементаСтруктуры, РодительСтрокиИсточника.ПолучитьЭлементы(), НаследникиЭлементовНастроек, НаследникиСтрок);
	
	// Удаление базовых элементов группировки.
	РодительСтрокиПриемника.ПолучитьЭлементы().Удалить(РодительСтрокиИсточника);
	РодительЭлементаНастройкиПриемника.Элементы.Удалить(РодительЭлементаНастройкиИсточника);
	
	Раздел = КорневаяСтрокаПоУмолчанию("Отборы");
	Элементы.Отборы.Развернуть(Раздел.ПолучитьИдентификатор(), Истина);
	Элементы.Отборы.ТекущаяСтрока = РодительСтрокиПриемника.ПолучитьИдентификатор();
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура Отборы_ПереместитьВверх(Команда)
	СдвинутьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура Отборы_ПереместитьВниз(Команда)
	СдвинутьОтборы(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Отборы_УстановитьФлажки(Команда)
	ИзменитьИспользование("Параметры");
	ИзменитьИспользование("Отборы");
КонецПроцедуры

&НаКлиенте
Процедура Отборы_СнятьФлажки(Команда)
	ИзменитьИспользование("Параметры", Ложь);
	ИзменитьИспользование("Отборы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Отборы_ПоказыватьВШапкеОтчета(Команда)
	ОтборыУстановитьРежимОтображения("ПоказыватьВШапкеОтчета");
КонецПроцедуры

&НаКлиенте
Процедура Отборы_ПоказыватьВНастройкахОтчета(Команда)
	ОтборыУстановитьРежимОтображения("ПоказыватьВНастройкахОтчета");
КонецПроцедуры

&НаКлиенте
Процедура Отборы_ПоказыватьТолькоФлажокВШапкеОтчета(Команда)
	ОтборыУстановитьРежимОтображения("ПоказыватьТолькоФлажокВШапкеОтчета");
КонецПроцедуры

&НаКлиенте
Процедура Отборы_ПоказыватьТолькоФлажокВНастройкахОтчета(Команда)
	ОтборыУстановитьРежимОтображения("ПоказыватьТолькоФлажокВНастройкахОтчета");
КонецПроцедуры

&НаКлиенте
Процедура Отборы_НеПоказывать(Команда)
	ОтборыУстановитьРежимОтображения("НеПоказывать");
КонецПроцедуры

&НаКлиенте
Процедура ОтборыВыбор(Элемент, ИдентификаторСтроки, Поле, СтандартнаяОбработка)
	Строка = Элементы.Отборы.ТекущиеДанные;
	Если Строка = Неопределено Или Строка.ЭтоРаздел Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Поля = СтрРазделить("ОтборыПараметр, ОтборыТипГруппы, ОтборыЛевоеЗначение", ", ", Ложь);
	Если Поля.Найти(Поле.Имя) <> Неопределено Тогда 
		Если Строка.ЭтоПараметр Тогда 
			Возврат;
		КонецЕсли;
		
		Если Строка.ЭтоГруппа Тогда 
			ОтборыВыбратьГруппу(ИдентификаторСтроки);
		Иначе
			ОтборыВыбратьПоле(ИдентификаторСтроки, Строка);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ОтборыКартинкаРежимаОтображения Тогда // Изменение быстрого доступа к отбору.
		Если Строка.ЭтоПараметр Тогда 
			СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(Отчет.КомпоновщикНастроек, "ПараметрыДанных");
		Иначе
			СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
		КонецЕсли;
		ВыбратьРежимОтображения(СвойствоЭлементаСтруктуры, "Отборы", ИдентификаторСтроки, Истина, Не Строка.ЭтоПараметр);
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОтборыПриИзмененииТекущейСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриАктивизацииЯчейки(Элемент)
	Строка = Элемент.ТекущиеДанные;
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтоПолеСписка = Строка.ДоступенСписокЗначений Или ОтчетыКлиентСервер.ЭтоВидСравненияСписка(Строка.ВидСравнения);
	
	ПолеЗначения = ?(Строка.ЭтоПараметр, Элементы.ОтборыЗначение, Элементы.ОтборыПравоеЗначение);
	ПолеЗначения.ОграничениеТипа = ?(ЭтоПолеСписка, Новый ОписаниеТипов("СписокЗначений"), Строка.ТипЗначения);
	ПолеЗначения.РежимВыбораИзСписка = Не ЭтоПолеСписка И (Строка.ДоступныеЗначения <> Неопределено);
	
	ПривестиЗначениеКВидуСравнения(Строка);
	УстановитьПредставлениеЗначения(Строка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	Если Не РежимИзмененияЭлементаСтруктурыНастроек Тогда
		Строка = Элементы.Отборы.ТекущиеДанные;
		Если (Строка = Неопределено)
			Или (Строка.ЭтоПараметр)
			Или (Строка.ЭтоРаздел И Строка.Идентификатор = "ПараметрыДанных") Тогда
			Строка = Отборы.ПолучитьЭлементы()[1];
			Элементы.Отборы.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ВыбратьПоле("Отборы", Новый ОписаниеОповещения("ОтборыПослеВыбораПоля", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередУдалением(Элемент, Отказ)
	УдалитьСтроки(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыИспользованиеПриИзменении(Элемент)
	ИзменитьИспользованиеЭлементаНастройки("Отборы");
КонецПроцедуры

&НаКлиенте
Процедура ОтборыВидСравненияПриИзменении(Элемент)
	Строка = Элементы.Отборы.ТекущиеДанные;
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КлючСвойства = КлючСвойстваЭлементаСтруктурыНастроек("Отборы", Строка);
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, КлючСвойства, ИдентификаторЭлементаСтруктурыНастроек, Истина);
	
	ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
	ЭлементНастройки.ВидСравнения = Строка.ВидСравнения;
	
	Если Строка.ЭтоПараметр Тогда 
		Условие = ВидСравненияКомпоновкиДанных.Равно;
		Если Строка.ДоступенСписокЗначений Тогда 
			Условие = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
	Иначе
		Условие = Строка.ВидСравнения;
	КонецЕсли;
	
	ПолеЗначения = ?(Строка.ЭтоПараметр, Элементы.ОтборыЗначение, Элементы.ОтборыПравоеЗначение);
	ПолеЗначения.ВыборГруппИЭлементов = ОтчетыКлиентСервер.ЗначениеТипаГруппыИЭлементы(Строка.ВыборГруппИЭлементов, Условие);
	
	ПривестиЗначениеКВидуСравнения(Строка, ЭлементНастройки);
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗначениеПриИзменении(Элемент)
	Строка = Элементы.Отборы.ТекущиеДанные;
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(Отчет.КомпоновщикНастроек, "ПараметрыДанных");
	ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
	ЭлементНастройки.Значение = Строка.Значение;
	
	УстановитьМодифицированность();
	УстановитьПредставлениеЗначения(Строка);
	
	Если НастройкиОтчета.ЗагрузитьНастройкиПриИзмененииПараметров.Найти(ЭлементНастройки.Параметр) <> Неопределено Тогда 
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
		
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("КомпоновщикНастроекКД", Отчет.КомпоновщикНастроек);
		ПараметрыОбновления.Вставить("ВариантМодифицирован", ВариантМодифицирован);
		ПараметрыОбновления.Вставить("ПользовательскиеНастройкиМодифицированы", ПользовательскиеНастройкиМодифицированы);
		ПараметрыОбновления.Вставить("СброситьПользовательскиеНастройки", Истина);
		
		ОбновитьФорму(ПараметрыОбновления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Строка = Элементы.Отборы.ТекущиеДанные;
	
	Если Строка.ДоступенСписокЗначений Тогда 
		ПоказатьСписокВыбора(Строка, СтандартнаяОбработка);
	Иначе
		УстановитьПараметрыРедактирования(Строка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеПриИзменении(Элемент)
	Строка = Элементы.Отборы.ТекущиеДанные;
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Строка.Использование = Истина;
	
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	
	ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
	ЗаполнитьЗначенияСвойств(ЭлементНастройки, Строка, "Использование, ПравоеЗначение");
	
	УстановитьМодифицированность();
	УстановитьПредставлениеЗначения(Строка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Строка = Элементы.Отборы.ТекущиеДанные;
	
	Если ОтчетыКлиентСервер.ЭтоВидСравненияСписка(Строка.ВидСравнения) Тогда 
		ПоказатьСписокВыбора(Строка, СтандартнаяОбработка);
	Иначе
		УстановитьПараметрыРедактирования(Строка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПредставлениеПользовательскойНастройкиПриИзменении(Элемент)
	Строка = Элементы.Отборы.ТекущиеДанные;
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Строка.ПредставлениеПользовательскойНастройки) Тогда
		Строка.ПредставлениеПользовательскойНастройки = Строка.Заголовок;
	КонецЕсли;
	Строка.ЭтоПредопределенныйЗаголовок = (Строка.Заголовок = Строка.ПредставлениеПользовательскойНастройки);
	
	Если Строка.ЭтоПараметр Тогда 
		СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(Отчет.КомпоновщикНастроек, "ПараметрыДанных");
	Иначе
		СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
			Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	КонецЕсли;
	
	ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
	Если Строка.ЭтоПредопределенныйЗаголовок Тогда
		ЭлементНастройки.ПредставлениеПользовательскойНастройки = "";
	Иначе
		ЭлементНастройки.ПредставлениеПользовательскойНастройки = Строка.ПредставлениеПользовательскойНастройки;
	КонецЕсли;
	
	Если Не Строка.ЭтоПараметр Тогда
		Если Строка.КартинкаРежимаОтображения = 1 Или Строка.КартинкаРежимаОтображения = 3 Тогда
			// Когда ПредставлениеПользовательскойНастройки заполнено,
			// то Представление работает как переключатель,
			// но также может использоваться для вывода в табличный документ.
			ЭлементНастройки.Представление = Строка.ПредставлениеПользовательскойНастройки;
		Иначе
			ЭлементНастройки.Представление = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьМодифицированность();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьИСформировать(Команда)
	ЗаписатьИЗакрыть(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезФормирования(Команда)
	ЗаписатьИЗакрыть(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройкиОтНесуществующихПолей(Команда)
	УдалитьПомеченныеНаУдалениеПоля();
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("КомпоновщикНастроекКД", Отчет.КомпоновщикНастроек);
	
	ОбновитьФорму(ПараметрыОбновления);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещений

&НаКлиенте
Функция ПараметрыЗаполненияСписка(ЗакрыватьПриВыборе = Ложь, МножественныйВыбор = Истина, ДобавлятьСтроку = Истина)
	ПараметрыЗаполнения = Новый Структура("ПутьКСписку, Индекс, Владелец, ВыбранныйТип, ВыборГруппИЭлементов");
	ПараметрыЗаполнения.Вставить("ДобавлятьСтроку", ДобавлятьСтроку);
	// Стандартные параметры формы.
	ПараметрыЗаполнения.Вставить("ЗакрыватьПриВыборе", ЗакрыватьПриВыборе);
	ПараметрыЗаполнения.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыЗаполнения.Вставить("Отбор", Новый Структура);
	// Стандартные параметры формы выбора (см. Расширение управляемой формы для динамического списка).
	ПараметрыЗаполнения.Вставить("МножественныйВыбор", МножественныйВыбор);
	ПараметрыЗаполнения.Вставить("РежимВыбора", Истина);
	// Предполагаемые реквизиты.
	ПараметрыЗаполнения.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыЗаполнения.Вставить("РазрешитьНачалоПеретаскивания", Ложь);
	
	Возврат ПараметрыЗаполнения;
КонецФункции

&НаКлиенте
Процедура НачатьЗаполнениеСписка(Элемент, ПараметрыЗаполнения)
	Список = ЭтотОбъект[ПараметрыЗаполнения.ПутьКСписку];
	ПолеСписка = Элементы[ПараметрыЗаполнения.ПутьКСписку];
	ПолеЗначения = Элементы[ПараметрыЗаполнения.ПутьКСписку + "Значение"];
	
	Сведения = ОтчетыКлиент.СведенияОЭлементеНастройки(Отчет.КомпоновщикНастроек, ПараметрыЗаполнения.Индекс);
	
	Условие = ОтчетыКлиентСервер.УсловиеЭлементаНастройки(Сведения.ЭлементПользовательскойНастройки, Сведения.Описание);
	ПолеЗначения.ВыборГруппИЭлементов = ОтчетыКлиентСервер.ЗначениеТипаГруппыИЭлементы(
		Сведения.Описание.ВыборГруппИЭлементов, Условие);
	ПараметрыЗаполнения.ВыборГруппИЭлементов = ОтчетыКлиент.ЗначениеТипаИспользованиеГруппИЭлементов(
		Сведения.Описание.ВыборГруппИЭлементов, Условие);
	
	РасширенноеОписаниеТипов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства, "РасширенноеОписаниеТипов", Новый Соответствие);
	
	РасширенноеОписаниеТипа = РасширенноеОписаниеТипов[ПараметрыЗаполнения.Индекс];
	Если РасширенноеОписаниеТипа <> Неопределено Тогда 
		Список.ТипЗначения = РасширенноеОписаниеТипа.ОписаниеТиповДляФормы;
	КонецЕсли;
	Список.ТипЗначения = ОписаниеТиповБезПримитивных(Список.ТипЗначения);
	
	ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	ПараметрыВыбора = ОтчетыКлиентСервер.ПараметрыВыбора(Сведения.Настройки, ПользовательскиеНастройки, Сведения.Элемент);
	ПараметрыЗаполнения.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	
	Список.ТипЗначения = ОтчетыКлиент.ТипЗначенияОграниченныйСвязьюПоТипу(
		Сведения.Настройки, ПользовательскиеНастройки, Сведения.Элемент, Сведения.Описание, Список.ТипЗначения);
	
	Типы = Список.ТипЗначения.Типы();
	Если Типы.Количество() = 0 Тогда
		Если ПараметрыЗаполнения.ДобавлятьСтроку Тогда 
			ПолеСписка.ДобавитьСтроку();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Типы.Количество() = 1 Тогда
		ПараметрыЗаполнения.ВыбранныйТип = Типы[0];
		ЗавершитьЗаполнениеСписка(-1, ПараметрыЗаполнения);
		Возврат;
	КонецЕсли;
	
	ДоступныеТипы = Новый СписокЗначений;
	ДоступныеТипы.ЗагрузитьЗначения(Типы);
	
	Обработчик = Новый ОписаниеОповещения("ЗавершитьЗаполнениеСписка", ЭтотОбъект, ПараметрыЗаполнения);
	ПоказатьВыборИзМеню(Обработчик, ДоступныеТипы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаполнениеСписка(ВыбранныйЭлемент, ПараметрыЗаполнения) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент <> -1 Тогда
		ПараметрыЗаполнения.ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ПараметрыПодбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства, "ПараметрыПодбора", Новый Соответствие);
	
	ПутьКФорме = ПараметрыПодбора[ПараметрыЗаполнения.Индекс];
	Если Не ЗначениеЗаполнено(ПутьКФорме) Тогда 
		ПутьКФорме = ПараметрыПодбора[ПараметрыЗаполнения.ВыбранныйТип];
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыЗаполнения.ПараметрыВыбора Цикл 
		Если Не ЗначениеЗаполнено(Параметр.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ВРег(Параметр.Имя), "ОТБОР.") Тогда 
			ПараметрыЗаполнения.Отбор.Вставить(Сред(Параметр.Имя, 7), Параметр.Значение);
		Иначе
			ПараметрыЗаполнения.Вставить(Параметр.Имя, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Владелец = ПараметрыЗаполнения.Владелец;
	ПараметрыЗаполнения.Удалить("Владелец");
	
	ОткрытьФорму(ПутьКФорме, ПараметрыЗаполнения, Владелец);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзБуфераЗавершение(НайденныеОбъекты, ПутьКСписку) Экспорт
	Если НайденныеОбъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Список = ЭтотОбъект[ПутьКСписку];
	
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	Индекс = ПутьКДаннымЭлементов.ПоИмени[ПутьКСписку];
	ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[Индекс];
	
	Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Если ЭлементНастройки.ПравоеЗначение = Неопределено Тогда
			ЭлементНастройки.ПравоеЗначение = Новый СписокЗначений;
		КонецЕсли;
		Отмеченные = ЭлементНастройки.ПравоеЗначение;
	Иначе
		Отмеченные = ЭлементНастройки.Значение;
	КонецЕсли;
	
	Для Каждого Значение Из НайденныеОбъекты Цикл
		ОтчетыКлиентСервер.ДобавитьУникальноеЗначениеВСписок(Список, Значение, Неопределено, Истина);
		ОтчетыКлиентСервер.ДобавитьУникальноеЗначениеВСписок(Отмеченные, Значение, Неопределено, Истина);
	КонецЦикла;
	
	ЭлементНастройки.Использование = Истина;
	
	ОформитьСписок(Элементы[ПутьКСписку], ЭлементНастройки);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	 
	#Область УсловноеОформлениеТаблицыФормыОтборы
	
	// ЭтоРаздел = Истина.
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПараметр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыВидСравнения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыКартинкаРежимаОтображения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПредставлениеПользовательскойНастройки.Имя);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТипГруппы.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЛевоеЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПравоеЗначение.Имя);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыИспользование.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТипГруппы.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЛевоеЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыВидСравнения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыКартинкаРежимаОтображения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПредставлениеПользовательскойНастройки.Имя);
	
	// ЭтоПараметр = Истина.
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоПараметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПараметр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыВидСравнения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыКартинкаРежимаОтображения.Имя);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоПараметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТипГруппы.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЛевоеЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПравоеЗначение.Имя);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоПараметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТипГруппы.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыВидСравнения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЛевоеЗначение.Имя);
	
	// ЭтоПериод = Истина.
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоПериод");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыВидСравнения.Имя);
	
	// ОтображатьИспользование = Ложь.
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ОтображатьИспользование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыИспользование.Имя);
	
	// ЭтоРаздел = Ложь; ЭтоПараметр = Ложь; ЭтоГруппа = Ложь - это элемент отбора.
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоПараметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЛевоеЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыКартинкаРежимаОтображения.Имя);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоПараметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПараметр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТипГруппы.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЗначение.Имя);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоПараметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПараметр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТипГруппы.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЗначение.Имя);
	
	// ЭтоГруппа = Истина.
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТипГруппы.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыКартинкаРежимаОтображения.Имя);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПараметр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЛевоеЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЗначение.Имя);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПараметр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЛевоеЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыВидСравнения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПравоеЗначение.Имя);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.Заголовок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Отборы.ТипГруппы"));
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПредставлениеПользовательскойНастройки.Имя);
	
	// ЭтоУникальныйИдентификатор = Истина.
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоУникальныйИдентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПравоеЗначение.Имя);
	
	// Заголовок - Заполнено.
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.Заголовок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Отборы.Заголовок"));
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПараметр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТипГруппы.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЛевоеЗначение.Имя);
	
	// ПредставлениеЗначения - Заполнено.
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ПредставлениеЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Отборы.ПредставлениеЗначения"));
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПравоеЗначение.Имя);
	
	// ЭтоПредопределенныйЗаголовок = Истина.
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отборы.ЭтоПредопределенныйЗаголовок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыПредставлениеПользовательскойНастройки.Имя);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиВКомпоновщик(ПараметрыЗагрузки)
	
	ПроверитьПараметрыЗагрузки(ПараметрыЗагрузки);
	
	ДоступныеНастройки = ОтчетыСервер.ДоступныеНастройки(ПараметрыЗагрузки, НастройкиОтчета);
	
	ОбновитьНастройкиВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "ОбновитьНастройкиВарианта", Ложь);
	Если ОбновитьНастройкиВарианта Тогда
		ДоступныеНастройки.Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Новый НастройкиКомпоновкиДанных);
		ДоступныеНастройки.ФиксированныеНастройки = Отчет.КомпоновщикНастроек.ФиксированныеНастройки;
	КонецЕсли;
	
	СброситьПользовательскиеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "СброситьПользовательскиеНастройки", Ложь);
	Если СброситьПользовательскиеНастройки Тогда
		ДоступныеНастройки.ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	КонецЕсли;
	
	ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗагрузки.ОтчетОбъектИлиПолноеИмя);
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(
			ЭтотОбъект,
			НастройкиОтчета.КлючСхемы,
			КлючТекущегоВарианта,
			ДоступныеНастройки.Настройки,
			ДоступныеНастройки.ПользовательскиеНастройки);
	КонецЕсли;
	
	НастройкиЗагружены = ОтчетыКлиентСервер.ЗагрузитьНастройки(
		Отчет.КомпоновщикНастроек,
		ДоступныеНастройки.Настройки,
		ДоступныеНастройки.ПользовательскиеНастройки,
		ДоступныеНастройки.ФиксированныеНастройки);
	
	// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
	// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которые не переопределялись.
	Если НастройкиЗагружены И ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, ДоступныеНастройки.Настройки, НастройкиОтчета);
	КонецЕсли;
	
	Если ФормаПараметры.Свойство("ФиксированныеНастройки") Тогда 
		ФормаПараметры.ФиксированныеНастройки = Отчет.КомпоновщикНастроек.ФиксированныеНастройки;
	КонецЕсли;
	
	ОтчетыСервер.УстановитьДоступныеЗначения(ОтчетОбъект, ЭтотОбъект);
	ОтчетыСервер.ИнициализироватьПредопределенныеПараметрыВывода(НастройкиОтчета, ДоступныеНастройки.Настройки);
	
	УсловияОтборов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "УсловияОтборов");
	Если УсловияОтборов <> Неопределено Тогда
		ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		Для Каждого Условие Из УсловияОтборов Цикл
			ЭлементПользовательскойНастройки = ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(Условие.Ключ);
			Если ЭлементПользовательскойНастройки <> Неопределено Тогда 
				ЭлементПользовательскойНастройки.ВидСравнения = Условие.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	Если ПараметрыЗагрузки.ВариантМодифицирован Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьПараметрыЗагрузки(ПараметрыЗагрузки)
	Если ПараметрыЗагрузки = Неопределено Тогда 
		ПараметрыЗагрузки = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыЗагрузки.Свойство("ИмяСобытия") Тогда
		ПараметрыЗагрузки.Вставить("ИмяСобытия", "");
	КонецЕсли;
	
	Если Не ПараметрыЗагрузки.Свойство("ВариантМодифицирован") Тогда
		ПараметрыЗагрузки.Вставить("ВариантМодифицирован", ВариантМодифицирован);
	КонецЕсли;
	
	Если Не ПараметрыЗагрузки.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		ПараметрыЗагрузки.Вставить("ПользовательскиеНастройкиМодифицированы", ПользовательскиеНастройкиМодифицированы);
	КонецЕсли;
	
	Если Не ПараметрыЗагрузки.Свойство("Результат") Тогда
		ПараметрыЗагрузки.Вставить("Результат", Новый Структура);
	КонецЕсли;
	
	Если Не ПараметрыЗагрузки.Свойство("Результат") Тогда
		ПараметрыЗагрузки.Вставить("Результат", Новый Структура);
		ПараметрыЗагрузки.Результат.Вставить("РазвернутьУзлыДеревьев", Новый Массив);
	КонецЕсли;
	
	ПараметрыЗагрузки.Вставить("Прервать", Ложь);
	ПараметрыЗагрузки.Вставить("ОтчетОбъектИлиПолноеИмя", НастройкиОтчета.ПолноеИмя);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойствоЭлементаСтруктурыНастроек(КомпоновщикНастроек, Ключ, ИдентификаторЭлемента = Неопределено, Режим = Неопределено)
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если Ключ = "Структура" Тогда 
		Возврат Настройки;
	КонецЕсли;
	
	ЭлементСтруктуры = ЭлементСтруктурыНастроек(Настройки, ИдентификаторЭлемента);
	
	ТипЭлементаСтруктуры = ТипЗнч(ЭлементСтруктуры);
	Если ЭлементСтруктуры = Неопределено
		Или (ТипЭлементаСтруктуры = Тип("ТаблицаКомпоновкиДанных") И Ключ <> "Выбор" И Ключ <> "УсловноеОформление")
		Или (ТипЭлементаСтруктуры = Тип("ДиаграммаКомпоновкиДанных") И Ключ <> "Выбор" И Ключ <> "УсловноеОформление")
		Или (ТипЭлементаСтруктуры = Тип("НастройкиКомпоновкиДанных") И Ключ = "ПоляГруппировки")
		Или (ТипЭлементаСтруктуры = Тип("ГруппировкаКомпоновкиДанных") И Ключ = "ПараметрыДанных")
		Или (ТипЭлементаСтруктуры = Тип("ГруппировкаТаблицыКомпоновкиДанных") И Ключ = "ПараметрыДанных")
		Или (ТипЭлементаСтруктуры = Тип("ГруппировкаДиаграммыКомпоновкиДанных") И Ключ = "ПараметрыДанных") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = ЭлементСтруктуры[Ключ];
	
	Если Режим = 0
		И (ТипЗнч(СвойствоЭлементаСтруктуры) = Тип("ВыбранныеПоляКомпоновкиДанных")
			Или ТипЗнч(СвойствоЭлементаСтруктуры) = Тип("ПорядокКомпоновкиДанных"))
		И ЗначениеЗаполнено(СвойствоЭлементаСтруктуры.ИдентификаторПользовательскойНастройки) Тогда 
		
		СвойствоЭлементаСтруктуры = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			СвойствоЭлементаСтруктуры.ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
	Возврат СвойствоЭлементаСтруктуры;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементСтруктурыНастроек(Настройки, ИдентификаторЭлемента)
	Если ТипЗнч(ИдентификаторЭлемента) = Тип("ИдентификаторКомпоновкиДанных") Тогда 
		ЭлементСтруктуры = Настройки.ПолучитьОбъектПоИдентификатору(ИдентификаторЭлемента);
	Иначе
		ЭлементСтруктуры = Настройки;
	КонецЕсли;
	
	Возврат ЭлементСтруктуры;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючСвойстваЭлементаСтруктурыНастроек(ИмяКоллекции, Строка)
	Ключ = Неопределено;
	
	Если ИмяКоллекции = "СоставГруппировки" Тогда 
		Ключ = "ПоляГруппировки";
	ИначеЕсли ИмяКоллекции = "Параметры" Или ИмяКоллекции = "Отборы" Тогда 
		Если Строка.Свойство("ЭтоПараметр") И Строка.ЭтоПараметр Тогда 
			Ключ = "ПараметрыДанных";
		Иначе
			Ключ = "Отбор";
		КонецЕсли;
	ИначеЕсли ИмяКоллекции = "ВыбранныеПоля" Тогда 
		Ключ = "Выбор";
	ИначеЕсли ИмяКоллекции = "Сортировка" Тогда 
		Ключ = "Порядок";
	ИначеЕсли ИмяКоллекции = "Оформление" Тогда 
		Если Строка.Свойство("ЭтоПараметрВывода") И Строка.ЭтоПараметрВывода Тогда 
			Ключ = "ПараметрыВывода";
		Иначе
			Ключ = "УсловноеОформление";
		КонецЕсли;
	ИначеЕсли ИмяКоллекции = "СтруктураВарианта" Тогда 
		Ключ = "Структура";
	КонецЕсли;
	
	Возврат Ключ;
КонецФункции

&НаКлиенте
Процедура УдалитьСтроки(Элемент, Отказ)
	Отказ = Истина;
	
	ИдентификаторыСтрок = Элемент.ВыделенныеСтроки;
	
	Индекс = ИдентификаторыСтрок.ВГраница();
	Пока Индекс >= 0 Цикл 
		Строка = ЭтотОбъект[Элемент.Имя].НайтиПоИдентификатору(ИдентификаторыСтрок[Индекс]);
		Индекс = Индекс - 1;
		
		Если ТипЗнч(Строка.Идентификатор) <> Тип("ИдентификаторКомпоновкиДанных")
			Или (Строка.Свойство("ЭтоРаздел") И Строка.ЭтоРаздел)
			Или (Строка.Свойство("ЭтоПараметр") И Строка.ЭтоПараметр)
			Или (Строка.Свойство("ЭтоПараметрВывода") И Строка.ЭтоПараметрВывода) Тогда 
			Продолжить;
		КонецЕсли;
		
		Строки = ПолучитьРодителя(Элемент.Имя, Строка).ПолучитьЭлементы();
		Если Строки.Индекс(Строка) < 0 Тогда 
			Продолжить;
		КонецЕсли;
			
		КлючСвойства = КлючСвойстваЭлементаСтруктурыНастроек(Элемент.Имя, Строка);
		СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
			Отчет.КомпоновщикНастроек, КлючСвойства, ИдентификаторЭлементаСтруктурыНастроек, Истина);
		
		ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
		Если ТипЗнч(ЭлементНастройки) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			Или ТипЗнч(ЭлементНастройки) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		РодительЭлементаНастройки = ПолучитьРодителяЭлементаНастройки(СвойствоЭлементаСтруктуры, ЭлементНастройки);
		ИмяКоллекции = ИмяКоллекцииНастроекПоИдентификатору(Строка.Идентификатор);
		ЭлементыНастроек = ЭлементыНастроек(СвойствоЭлементаСтруктуры, РодительЭлементаНастройки, ИмяКоллекции);
		
		ЭлементыНастроек.Удалить(ЭлементНастройки);
		Строки.Удалить(Строка);
	КонецЦикла;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИспользование(ИмяКоллекции, Использование = Истина, Строки = Неопределено)
	Если Строки = Неопределено Тогда 
		КорневаяСтрока = КорневаяСтрокаПоУмолчанию(ИмяКоллекции);
		Если КорневаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Строки = КорневаяСтрока.ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого Строка Из Строки Цикл 
		Строка.Использование = Использование;
		
		КлючСвойства = КлючСвойстваЭлементаСтруктурыНастроек(ИмяКоллекции, Строка);
		СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
			Отчет.КомпоновщикНастроек, КлючСвойства, ИдентификаторЭлементаСтруктурыНастроек, Истина);
		
		ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
		Если Тип(ЭлементНастройки) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			И Тип(ЭлементНастройки) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда 
			ЭлементНастройки.Использование = Использование;
		КонецЕсли;
		
		ИзменитьИспользование(ИмяКоллекции, Использование, Строка.ПолучитьЭлементы());
	КонецЦикла;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИспользованиеЭлементаНастройки(ИмяКоллекции)
	Строка = Элементы[ИмяКоллекции].ТекущиеДанные;
	
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	КлючСвойства = КлючСвойстваЭлементаСтруктурыНастроек(ИмяКоллекции, Строка);
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		КомпоновщикНастроек, КлючСвойства, ИдентификаторЭлементаСтруктурыНастроек, Истина);
	
	ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
	ЭлементНастройки.Использование = Строка.Использование;
	
	Если Строка.Свойство("ЭтоПараметрВывода")
		И Строка.ЭтоПараметрВывода
		И Строка(Строка.Идентификатор) = "DATAPARAMETERSOUTPUT" Тогда 
		
		ЭлементНастройки.Использование = Истина;
		ЭлементНастройки.Значение = ?(Строка.Использование,
			ТипВыводаТекстаКомпоновкиДанных.Авто, ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;
	
	ИзменитьИспользованиеСвязанныхЭлементовНастроек(ИмяКоллекции, Строка, ЭлементНастройки);
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИспользованиеСвязанныхЭлементовНастроек(ИмяКоллекции, Строка, ЭлементНастройки)
	Если ИмяКоллекции = "СоставГруппировки" Тогда
		СвязаннаяКоллекция = "ВыбранныеПоля";
	ИначеЕсли ИмяКоллекции = "ВыбранныеПоля" Тогда
		СвязаннаяКоллекция = "СоставГруппировки";
	Иначе
		СвязаннаяКоллекция = Неопределено;
	КонецЕсли;
	
	Если СвязаннаяКоллекция <> Неопределено И ЗначениеЗаполнено(Строка.Поле) Тогда
		Условие = Новый Структура("Поле", Строка.Поле);
		ИзменитьИспользованиеПоУсловию(СвязаннаяКоллекция, Условие, Строка.Использование);
	ИначеЕсли Строка.Свойство("ЭтоПараметрВывода") И Строка.ЭтоПараметрВывода Тогда 
		СинхронизироватьПредопределенныеПараметрыВывода(Строка.Использование, ЭлементНастройки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИспользованиеПоУсловию(ИмяКоллекции, Условие, Использование)
	Коллекция = ЭтотОбъект[ИмяКоллекции];
	Найденные = ОтчетыКлиентСервер.НайтиСтрокиТаблицы(Коллекция, Условие);
	
	СвойствоЭлементаСтруктуры = Неопределено;
	Для Каждого Строка Из Найденные Цикл
		Если Строка.Использование = Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если СвойствоЭлементаСтруктуры = Неопределено Тогда
			КлючСвойства = КлючСвойстваЭлементаСтруктурыНастроек(ИмяКоллекции, Строка);
			СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
				Отчет.КомпоновщикНастроек, КлючСвойства, ИдентификаторЭлементаСтруктурыНастроек, Истина);
		КонецЕсли;
		
		ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
		Если ЭлементНастройки <> Неопределено Тогда
			Строка.Использование = Использование;
			ЭлементНастройки.Использование = Использование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУдаления(ИмяКоллекции, Строка)
	Строка.ПометкаУдаления = Истина;
	
	Если ИмяКоллекции = "Оформление" Тогда 
		Строка.Картинка = ОтчетыКлиентСервер.ИндексКартинки("Ошибка");
	Иначе
		Строка.Картинка = ОтчетыКлиентСервер.ИндексКартинки("Элемент", "ПометкаУдаления");
	КонецЕсли;
КонецПроцедуры

#Область ПараметрыИОтборы

// Чтение настроек.

&НаСервере
Процедура ОбновитьПараметрыДанных()
	Если РежимИзмененияЭлементаСтруктурыНастроек Тогда 
		Возврат;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, "ПараметрыДанных", ИдентификаторЭлементаСтруктурыНастроек);
	
	Раздел = Отборы.ПолучитьЭлементы().Добавить();
	Раздел.ЭтоРаздел = Истина;
	Раздел.Заголовок = НСтр("ru = 'Параметры'");
	Раздел.Картинка = ОтчетыКлиентСервер.ИндексКартинки("ПараметрыДанных");
	Раздел.Идентификатор = "ПараметрыДанных";
	ЭлементыРаздела = Раздел.ПолучитьЭлементы();
	
	Если СвойствоЭлементаСтруктуры = Неопределено
		Или СвойствоЭлементаСтруктуры.Элементы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	
	Для Каждого ЭлементНастройки Из СвойствоЭлементаСтруктуры.Элементы Цикл 
		НайденныйПараметр = Схема.Параметры.Найти(ЭлементНастройки.Параметр);
		Если НайденныйПараметр <> Неопределено И НайденныйПараметр.ОграничениеИспользования Тогда 
			Продолжить;
		КонецЕсли;
		
		Строка = ЭлементыРаздела.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ЭлементНастройки);
		Строка.Идентификатор = СвойствоЭлементаСтруктуры.ПолучитьИдентификаторПоОбъекту(ЭлементНастройки);
		Строка.КартинкаРежимаОтображения = КартинкаРежимаОтображенияЭлементаНастройки(ЭлементНастройки);
		Строка.Картинка = -1;
		Строка.ЭтоПараметр = Истина;
		Строка.ЭтоПериод = (ТипЗнч(Строка.Значение) = Тип("СтандартныйПериод"));
		
		ОписаниеНастройки = СвойствоЭлементаСтруктуры.ДоступныеПараметры.НайтиПараметр(ЭлементНастройки.Параметр);
		Если ОписаниеНастройки <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(Строка, ОписаниеНастройки,, "Использование");
			Строка.ОтображатьИспользование = (ОписаниеНастройки.Использование <> ИспользованиеПараметраКомпоновкиДанных.Всегда);
			
			Если ОписаниеНастройки.ДоступныеЗначения <> Неопределено Тогда 
				ЭлементСписка = ОписаниеНастройки.ДоступныеЗначения.НайтиПоЗначению(ЭлементНастройки.Значение);
				Если ЭлементСписка <> Неопределено Тогда 
					Строка.ПредставлениеЗначения = ЭлементСписка.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ПредставлениеПользовательскойНастройки) Тогда 
			Строка.ПредставлениеПользовательскойНастройки = Строка.Заголовок;
		КонецЕсли;
		Строка.ЭтоПредопределенныйЗаголовок = (Строка.Заголовок = Строка.ПредставлениеПользовательскойНастройки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборы(Строки = Неопределено, ЭлементыНастроек = Неопределено)
	
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	
	Если СвойствоЭлементаСтруктуры = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Строки = Неопределено Тогда 
		Раздел = Отборы.ПолучитьЭлементы().Добавить();
		Раздел.ЭтоРаздел = Истина;
		Раздел.Заголовок = НСтр("ru = 'Отборы'");
		Раздел.Картинка = ОтчетыКлиентСервер.ИндексКартинки("Отборы");
		Раздел.Идентификатор = "Отборы";
		Строки = Раздел.ПолучитьЭлементы();
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	
	Если ЭлементыНастроек = Неопределено Тогда 
		ЭлементыНастроек = СвойствоЭлементаСтруктуры.Элементы;
	КонецЕсли;
	
	Для Каждого ЭлементНастройки Из ЭлементыНастроек Цикл 
		Строка = Строки.Добавить();
		
		Если Не УстановитьДанныеСтрокиОтборов(Строка, СвойствоЭлементаСтруктуры, ЭлементНастройки) Тогда 
			УстановитьПометкуУдаления("Отборы", Строка);
		КонецЕсли;
		
		Если ТипЗнч(ЭлементНастройки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
			ОбновитьОтборы(Строка.ПолучитьЭлементы(), ЭлементНастройки.Элементы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьДанныеСтрокиОтборов(Строка, СвойствоЭлементаСтруктуры, ЭлементНастройки, ОписаниеНастройки = Неопределено)
	УстановленыУспешно = Истина;
	
	ЭтоГруппа = (ТипЗнч(ЭлементНастройки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	Если ОписаниеНастройки = Неопределено Тогда 
		Если Не ЭтоГруппа Тогда 
			ОписаниеНастройки = СвойствоЭлементаСтруктуры.ДоступныеПоляОтбора.НайтиПоле(ЭлементНастройки.ЛевоеЗначение);
			УстановленыУспешно = (ОписаниеНастройки <> Неопределено);
		КонецЕсли;
		
		Если ОписаниеНастройки = Неопределено Тогда 
			ОписаниеНастройки = Новый Структура("ДоступныеЗначения, ДоступныеВидыСравнения");
			ОписаниеНастройки.Вставить("ТипЗначения", Новый ОписаниеТипов("Неопределено"));
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьДоступныеВидыСравнения(Строка, ЭлементНастройки, ОписаниеНастройки);
	
	ЗаполнитьЗначенияСвойств(Строка, ОписаниеНастройки,, "ДоступныеВидыСравнения");
	ЗаполнитьЗначенияСвойств(Строка, ЭлементНастройки);
	
	Строка.Идентификатор = СвойствоЭлементаСтруктуры.ПолучитьИдентификаторПоОбъекту(ЭлементНастройки);
	Строка.ОтображатьИспользование = Истина;
	Строка.ЭтоПериод = (ТипЗнч(Строка.ПравоеЗначение) = Тип("СтандартныйПериод"));
	Строка.ЭтоУникальныйИдентификатор = (ТипЗнч(Строка.ПравоеЗначение) = Тип("УникальныйИдентификатор"));
	
	Строка.ЭтоГруппа = ЭтоГруппа;
	Строка.КартинкаРежимаОтображения = КартинкаРежимаОтображенияЭлементаНастройки(ЭлементНастройки);
	Строка.Картинка = -1;
	
	Если ЭтоГруппа Тогда 
		Строка.Заголовок = Строка.ТипГруппы;
	Иначе
		ОтчетыКлиентСервер.ПривестиЗначениеКТипу(ЭлементНастройки.ПравоеЗначение, ОписаниеНастройки.ТипЗначения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка.ПредставлениеПользовательскойНастройки) Тогда 
		Если ЗначениеЗаполнено(ЭлементНастройки.Представление) Тогда 
			Строка.ПредставлениеПользовательскойНастройки = ЭлементНастройки.Представление;
		Иначе
			Строка.ПредставлениеПользовательскойНастройки = Строка.Заголовок;
		КонецЕсли;
	КонецЕсли;
	Строка.ЭтоПредопределенныйЗаголовок = (Строка.Заголовок = Строка.ПредставлениеПользовательскойНастройки);
	
	ПривестиЗначениеКВидуСравнения(Строка, ЭлементНастройки);
	УстановитьПредставлениеЗначения(Строка);
	
	Возврат УстановленыУспешно;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьДоступныеВидыСравнения(Строка, ЭлементНастройки, ОписаниеНастройки)
	ДоступныеВидыСравнения = ОписаниеНастройки.ДоступныеВидыСравнения;
	Если ДоступныеВидыСравнения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТипЗначения = ОписаниеНастройки.ТипЗначения;
	
	Если ТипЗначения.Типы().Количество() > 1
		И ТипЗначения.СодержитТип(Тип("Строка"))
		И (ДоступныеВидыСравнения.НайтиПоЗначению(ВидСравненияКомпоновкиДанных.Содержит) = Неопределено
		Или ДоступныеВидыСравнения.НайтиПоЗначению(ВидСравненияКомпоновкиДанных.Равно) = Неопределено) Тогда 
		
		ДоступныеВидыСравнения.Очистить();
		Для Каждого Вид Из ВидСравненияКомпоновкиДанных Цикл 
			ДоступныеВидыСравнения.Добавить(Вид);
		КонецЦикла;
		
	ИначеЕсли ДоступныеВидыСравнения.Количество() > 0
		И ДоступныеВидыСравнения.НайтиПоЗначению(ЭлементНастройки.ВидСравнения) = Неопределено Тогда 
		
		ЭлементНастройки.ВидСравнения = ДоступныеВидыСравнения[0].Значение;
	КонецЕсли;
	
	Строка.ДоступныеВидыСравнения = ДоступныеВидыСравнения;
КонецПроцедуры

// Добавление, изменение элементов.

&НаКлиенте
Процедура ОтборыВыбратьГруппу(ИдентификаторСтроки)
	Обработчик = Новый ОписаниеОповещения("ОтборыПослеВыбораГруппы", ЭтотОбъект, ИдентификаторСтроки);
	
	Список = Новый СписокЗначений;
	Список.Добавить(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	Список.Добавить(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	Список.Добавить(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);
	
	ПоказатьВыборИзМеню(Обработчик, Список);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПослеВыбораГруппы(ТипГруппы, ИдентификаторСтроки) Экспорт
	Если ТипГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Отборы.НайтиПоИдентификатору(ИдентификаторСтроки);
	Строка.ТипГруппы = ТипГруппы.Значение;
	Строка.Заголовок = Строка.ТипГруппы;
	Строка.ПредставлениеПользовательскойНастройки = Строка.ТипГруппы;
	
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	
	ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
	ЭлементНастройки.ТипГруппы = ТипГруппы.Значение;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ОтборыВыбратьПоле(ИдентификаторСтроки, Строка)
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	
	ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
	
	Обработчик = Новый ОписаниеОповещения("ОтборыПослеВыбораПоля", ЭтотОбъект, ИдентификаторСтроки);
	ВыбратьПоле("Отборы", Обработчик, ЭлементНастройки.ЛевоеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПослеВыбораПоля(ОписаниеНастройки, ИдентификаторСтроки) Экспорт
	Если ОписаниеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	
	Если ИдентификаторСтроки = Неопределено Тогда 
		Родитель = Элементы.Отборы.ТекущиеДанные;
		Если Не Родитель.ЭтоРаздел И Не Родитель.ЭтоГруппа Тогда 
			Родитель = Родитель.ПолучитьРодителя();
		КонецЕсли;
		Строка = Родитель.ПолучитьЭлементы().Добавить();
		
		РодительЭлементаНастройки = СвойствоЭлементаСтруктуры;
		Если ТипЗнч(Родитель.Идентификатор) = Тип("ИдентификаторКомпоновкиДанных") Тогда 
			РодительЭлементаНастройки = СвойствоЭлементаСтруктуры.ПолучитьОбъектПоИдентификатору(Родитель.Идентификатор);
		КонецЕсли;
		ЭлементНастройки = РодительЭлементаНастройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе
		Строка = Отборы.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
	КонецЕсли;
	
	ЭлементНастройки.Использование = Истина;
	ЭлементНастройки.ЛевоеЗначение = ОписаниеНастройки.Поле;
	ЭлементНастройки.ПравоеЗначение = ОписаниеНастройки.Тип.ПривестиЗначение();
	ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	ЭлементНастройки.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	ЭлементНастройки.ПредставлениеПользовательскойНастройки = "";
	
	ДоступныеВидыСравнения = ОписаниеНастройки.ДоступныеВидыСравнения;
	Если ДоступныеВидыСравнения <> Неопределено
		И ДоступныеВидыСравнения.Количество() > 0
		И ДоступныеВидыСравнения.НайтиПоЗначению(ЭлементНастройки.ВидСравнения) = Неопределено Тогда 
		ЭлементНастройки.ВидСравнения = ДоступныеВидыСравнения[0].Значение;
	КонецЕсли;
	
	УстановитьДанныеСтрокиОтборов(Строка, СвойствоЭлементаСтруктуры, ЭлементНастройки, ОписаниеНастройки);
	
	Раздел = КорневаяСтрокаПоУмолчанию("Отборы");
	Элементы.Отборы.Развернуть(Раздел.ПолучитьИдентификатор(), Истина);
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриИзмененииТекущейСтроки()
	Строка = Элементы.Отборы.ТекущиеДанные;
	Если Строка = Неопределено Тогда
		ОтборыПриИзмененииТекущейСтрокиНаСервере();
		Возврат;
	КонецЕсли;
	
	ОтборыПриИзмененииТекущейСтрокиНаСервере(Не Строка.ЭтоПараметр И Не Строка.ЭтоРаздел, Строка.ЭтоРаздел);
	
	Если Строка.ЭтоРаздел Или Строка.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОтборыВидСравнения.РежимВыбораИзСписка = (Строка.ДоступныеВидыСравнения <> Неопределено);
	Если Строка.ДоступныеВидыСравнения <> Неопределено Тогда 
		Список = Элементы.ОтборыВидСравнения.СписокВыбора;
		Список.Очистить();
		
		Для Каждого ВидыСравнения Из Строка.ДоступныеВидыСравнения Цикл 
			ЗаполнитьЗначенияСвойств(Список.Добавить(), ВидыСравнения);
		КонецЦикла;
	КонецЕсли;
	
	Если Строка.ЭтоПараметр Тогда 
		Условие = ВидСравненияКомпоновкиДанных.Равно;
		Если Строка.ДоступенСписокЗначений Тогда 
			Условие = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
	Иначе
		Условие = Строка.ВидСравнения;
	КонецЕсли;
	
	ПолеЗначения = ?(Строка.ЭтоПараметр, Элементы.ОтборыЗначение, Элементы.ОтборыПравоеЗначение);
	ПолеЗначения.ДоступныеТипы = Строка.ТипЗначения;
	ПолеЗначения.ВыборГруппИЭлементов = ОтчетыКлиентСервер.ЗначениеТипаГруппыИЭлементы(Строка.ВыборГруппИЭлементов, Условие);
	
	Список = ПолеЗначения.СписокВыбора;
	Список.Очистить();
	Если Строка.ДоступныеЗначения <> Неопределено Тогда 
		Для Каждого ДоступноеЗначение Из Строка.ДоступныеЗначения Цикл 
			ЗаполнитьЗначенияСвойств(Список.Добавить(), ДоступноеЗначение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтборыПриИзмененииТекущейСтрокиНаСервере(ЭтоОтбор = Ложь, ЭтоРаздел = Ложь)
	Элементы.Отборы_Удалить.Доступность = ЭтоОтбор;
	Элементы.Отборы_Удалить1.Доступность = ЭтоОтбор;
	Элементы.Отборы_Сгруппировать.Доступность = ЭтоОтбор;
	Элементы.Отборы_Сгруппировать1.Доступность = ЭтоОтбор;
	Элементы.Отборы_Разгруппировать.Доступность = ЭтоОтбор;
	Элементы.Отборы_Разгруппировать1.Доступность = ЭтоОтбор;
	Элементы.Отборы_ПереместитьВверх.Доступность = ЭтоОтбор;
	Элементы.Отборы_ПереместитьВверх1.Доступность = ЭтоОтбор;
	Элементы.Отборы_ПереместитьВниз.Доступность = ЭтоОтбор;
	Элементы.Отборы_ПереместитьВниз1.Доступность = ЭтоОтбор;
	
	Элементы.КомандыОтборов_Показывать.Доступность = Не ЭтоРаздел;
	Элементы.КомандыОтборов_Показывать1.Доступность = Не ЭтоРаздел;
	Элементы.Отборы_ПоказыватьТолькоФлажокВШапкеОтчета.Доступность = ЭтоОтбор;
	Элементы.Отборы_ПоказыватьТолькоФлажокВШапкеОтчета1.Доступность = ЭтоОтбор;
	Элементы.Отборы_ПоказыватьТолькоФлажокВНастройкахОтчета.Доступность = ЭтоОтбор;
	Элементы.Отборы_ПоказыватьТолькоФлажокВНастройкахОтчета1.Доступность = ЭтоОтбор;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыУстановитьРежимОтображения(РежимОтображения)
	Строка = Элементы.Отборы.ТекущиеДанные;
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.ЭтоПараметр Тогда 
		СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(Отчет.КомпоновщикНастроек, "ПараметрыДанных");
	Иначе
		СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
			Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	КонецЕсли;
	
	ВыбратьРежимОтображения(СвойствоЭлементаСтруктуры, "Отборы", Строка.ПолучитьИдентификатор(), Истина, Строка.ЭтоПараметр, РежимОтображения);
КонецПроцедуры

// Изменение группировки элементов.

&НаКлиенте
Функция ПараметрыГруппировкиОтборов()
	Строки = Новый Массив;
	Родители = Новый Массив;
	
	ИдентификаторыСтрок = Элементы.Отборы.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл 
		Строка = Отборы.НайтиПоИдентификатору(ИдентификаторСтроки);
		Родитель = Строка.ПолучитьРодителя();
		
		Если Родитель.ПолучитьЭлементы().Индекс(Строка) < 0
			Или ТипЗнч(Строка.Идентификатор) <> Тип("ИдентификаторКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		Строки.Добавить(Строка);
		Родители.Добавить(Родитель);
	КонецЦикла;
	
	Если Строки.Количество() = 0 Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите элементы.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Родители = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Родители);
	Если Родители.Количество() > 1 Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранные элементы не могут быть сгруппированы, поскольку они принадлежат разным родителям.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Строки = МассивСортировать(Строки);
	Родитель = Родители[0];
	Индекс = Родитель.ПолучитьЭлементы().Индекс(Строки[0]);
	
	Возврат Новый Структура("Строки, Родитель, Индекс", Строки, Родитель, Индекс);
КонецФункции

&НаКлиенте
Процедура ИзменитьГруппировкуОтборов(ОтборыУзлаНастроек, Строки, НаследникиЭлементовНастроек, НаследникиСтрок)
	Для Каждого СтрокаИсточник Из Строки Цикл 
		ЭлементНастройкиИсточник = ОтборыУзлаНастроек.ПолучитьОбъектПоИдентификатору(СтрокаИсточник.Идентификатор);
		
		Если ЭлементНастройкиИсточник.Родитель = Неопределено Тогда 
			РодительЭлементаНастройкиИсточника = ОтборыУзлаНастроек;
		Иначе
			РодительЭлементаНастройкиИсточника = ЭлементНастройкиИсточник.Родитель;
		КонецЕсли;
		РодительЭлементаНастройкиПриемника = НаследникиЭлементовНастроек.Получить(РодительЭлементаНастройкиИсточника);
		
		РодительСтрокиИсточника = СтрокаИсточник.ПолучитьРодителя();
		РодительСтрокиПриемника = НаследникиСтрок.Получить(РодительСтрокиИсточника);
		
		Индекс = РодительЭлементаНастройкиПриемника.Элементы.Индекс(РодительЭлементаНастройкиИсточника);
		Если Индекс < 0 Тогда 
			ЭлементНастройкиПриемник = РодительЭлементаНастройкиПриемника.Элементы.Добавить(ТипЗнч(ЭлементНастройкиИсточник));
			СтрокаПриемник = РодительСтрокиПриемника.ПолучитьЭлементы().Добавить();
		Иначе // Это удаление группировки.
			ЭлементНастройкиПриемник = РодительЭлементаНастройкиПриемника.Элементы.Вставить(Индекс, ТипЗнч(ЭлементНастройкиИсточник));
			СтрокаПриемник = РодительСтрокиПриемника.ПолучитьЭлементы().Вставить(Индекс);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементНастройкиПриемник, ЭлементНастройкиИсточник);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
		СтрокаПриемник.Идентификатор = ОтборыУзлаНастроек.ПолучитьИдентификаторПоОбъекту(ЭлементНастройкиПриемник);
		
		НаследникиЭлементовНастроек.Вставить(ЭлементНастройкиИсточник, ЭлементНастройкиПриемник);
		НаследникиСтрок.Вставить(СтрокаИсточник, СтрокаПриемник);
		
		ИзменитьГруппировкуОтборов(ОтборыУзлаНастроек, СтрокаИсточник.ПолучитьЭлементы(), НаследникиЭлементовНастроек, НаследникиСтрок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБазовыеЭлементыГруппировкиОтборов(ОтборыУзлаНастроек, ПараметрыГруппировки)
	Строки = ПараметрыГруппировки.Родитель.ПолучитьЭлементы();
	
	ЭлементыНастроек = ОтборыУзлаНастроек.Элементы;
	Если ТипЗнч(ПараметрыГруппировки.Родитель.Идентификатор) = Тип("ИдентификаторКомпоновкиДанных") Тогда 
		ЭлементыНастроек = ОтборыУзлаНастроек.ПолучитьОбъектПоИдентификатору(ПараметрыГруппировки.Родитель.Идентификатор).Элементы;
	КонецЕсли;
	
	Индекс = ПараметрыГруппировки.Строки.ВГраница();
	Пока Индекс >= 0 Цикл 
		Строка = ПараметрыГруппировки.Строки[Индекс];
		ЭлементНастройки = ОтборыУзлаНастроек.ПолучитьОбъектПоИдентификатору(Строка.Идентификатор);
		
		Строки.Удалить(Строка);
		ЭлементыНастроек.Удалить(ЭлементНастройки);
		
		Индекс = Индекс - 1;
	КонецЦикла;
КонецПроцедуры

// Сдвиг элементов.

&НаКлиенте
Процедура СдвинутьОтборы(ВНачало = Истина)
	ПараметрыСдвига = ПараметрыСдвигаОтборов();
	Если ПараметрыСдвига = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
		Отчет.КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	
	Для Каждого Строка Из ПараметрыСдвига.Строки Цикл 
		ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
		
		ЭлементыНастроек = СвойствоЭлементаСтруктуры.Элементы;
		Если ЭлементНастройки.Родитель <> Неопределено Тогда 
			ЭлементыНастроек = ЭлементНастройки.Родитель.Элементы;
		КонецЕсли;
		Строки = ПараметрыСдвига.Родитель.ПолучитьЭлементы();
		
		Индекс = ЭлементыНастроек.Индекс(ЭлементНастройки);
		Граница = ЭлементыНастроек.Количество() - 1;
		
		Если ВНачало Тогда // Сдвиг в начало коллекции.
			Если Индекс = 0 Тогда 
				ЭлементыНастроек.Сдвинуть(ЭлементНастройки, Граница);
				Строки.Сдвинуть(Индекс, Граница);
			Иначе
				ЭлементыНастроек.Сдвинуть(ЭлементНастройки, -1);
				Строки.Сдвинуть(Индекс, -1);
			КонецЕсли;
		Иначе // Сдвиг в конец коллекции.
			Если Индекс = Граница Тогда 
				ЭлементыНастроек.Сдвинуть(ЭлементНастройки, -Граница);
				Строки.Сдвинуть(Индекс, -Граница);
			Иначе
				ЭлементыНастроек.Сдвинуть(ЭлементНастройки, 1);
				Строки.Сдвинуть(Индекс, 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Функция ПараметрыСдвигаОтборов()
	Строки = Новый Массив;
	Родители = Новый Массив;
	
	ИдентификаторыСтрок = Элементы.Отборы.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл 
		Строка = Отборы.НайтиПоИдентификатору(ИдентификаторСтроки);
		Родитель = Строка.ПолучитьРодителя();
		
		Если Родитель.ПолучитьЭлементы().Индекс(Строка) < 0
			Или ТипЗнч(Строка.Идентификатор) <> Тип("ИдентификаторКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		Строки.Добавить(Строка);
		Родители.Добавить(Родитель);
	КонецЦикла;
	
	Если Строки.Количество() = 0 Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите элементы.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Родители = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Родители);
	Если Родители.Количество() > 1 Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранные элементы не могут быть перемещены, поскольку они принадлежат разным родителям.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Строки, Родитель", МассивСортировать(Строки), Родители[0]);
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Клиент - Таблицы полей (универсальные точки входа).

&НаКлиенте
Процедура ВыбратьРежимОтображения(ОтборыУзлаНастроек, ИмяКоллекции, ИдентификаторСтроки, ПоказыватьРежимыВвода, ПоказыватьРежимыФлажков, ТекущийРежимОтображения = Неопределено)
	Контекст = Новый Структура("ОтборыУзлаНастроек, ИмяКоллекции, ИдентификаторСтроки", ОтборыУзлаНастроек, ИмяКоллекции, ИдентификаторСтроки);
	Обработчик = Новый ОписаниеОповещения("РежимОтображенияПослеВыбора", ЭтотОбъект, Контекст);
	
	Список = Новый СписокЗначений;
	Если ПоказыватьРежимыВвода Тогда
		Список.Добавить("ПоказыватьВШапкеОтчета", НСтр("ru = 'В шапке отчета'"), , БиблиотекаКартинок.БыстрыйДоступ);
	КонецЕсли;
	Если ПоказыватьРежимыФлажков Тогда
		Список.Добавить("ПоказыватьТолькоФлажокВШапкеОтчета", НСтр("ru = 'Только флажок в шапке отчета'"), , БиблиотекаКартинок.БыстрыйДоступСФлажком);
	КонецЕсли;
	Если ПоказыватьРежимыВвода Тогда
		Список.Добавить("ПоказыватьВНастройкахОтчета", НСтр("ru = 'В настройках отчета'"), , БиблиотекаКартинок.Реквизит);
	КонецЕсли;
	Если ПоказыватьРежимыФлажков Тогда
		Список.Добавить("ПоказыватьТолькоФлажокВНастройкахОтчета", НСтр("ru = 'Только флажок в настройках отчета'"), , БиблиотекаКартинок.ОбычныйДоступСФлажком);
	КонецЕсли;
	Список.Добавить("НеПоказывать", НСтр("ru = 'Не показывать'"), , БиблиотекаКартинок.СкрытаяНастройкаОтчета);
	
	Если ТекущийРежимОтображения = Неопределено Тогда
		ПоказатьВыборИзМеню(Обработчик, Список);
	Иначе
		РежимОтображения = Список.НайтиПоЗначению(ТекущийРежимОтображения);
		ВыполнитьОбработкуОповещения(Обработчик, РежимОтображения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияПослеВыбора(РежимОтображения, Контекст) Экспорт
	Если РежимОтображения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимОтображения.Значение = "ПоказыватьВШапкеОтчета" Тогда
		КартинкаРежимаОтображения = 2;
	ИначеЕсли РежимОтображения.Значение = "ПоказыватьТолькоФлажокВШапкеОтчета" Тогда
		КартинкаРежимаОтображения = 1;
	ИначеЕсли РежимОтображения.Значение = "ПоказыватьВНастройкахОтчета" Тогда
		КартинкаРежимаОтображения = 4;
	ИначеЕсли РежимОтображения.Значение = "ПоказыватьТолькоФлажокВНастройкахОтчета" Тогда
		КартинкаРежимаОтображения = 3;
	Иначе
		КартинкаРежимаОтображения = 5;
	КонецЕсли;
	
	Строка = ЭтотОбъект[Контекст.ИмяКоллекции].НайтиПоИдентификатору(Контекст.ИдентификаторСтроки);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементНастройки = Контекст.ОтборыУзлаНастроек.ПолучитьОбъектПоИдентификатору(Строка.Идентификатор);
	Если ЭлементНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьРежимОтображения(Контекст.ИмяКоллекции, Строка, ЭлементНастройки, КартинкаРежимаОтображения);
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимОтображения(ИмяКоллекции, Строка, ЭлементНастройки, КартинкаРежимаОтображения = Неопределено)
	Если КартинкаРежимаОтображения = Неопределено Тогда
		КартинкаРежимаОтображения = Строка.КартинкаРежимаОтображения;
	Иначе
		Строка.КартинкаРежимаОтображения = КартинкаРежимаОтображения;
	КонецЕсли;
	
	Если КартинкаРежимаОтображения = 1 Или КартинкаРежимаОтображения = 2 Тогда
		ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ИначеЕсли КартинкаРежимаОтображения = 3 Или КартинкаРежимаОтображения = 4 Тогда
		ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	Иначе
		ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если ИмяКоллекции = "Отборы" И Не Строка.ЭтоПараметр Тогда
		Если КартинкаРежимаОтображения = 1 Или КартинкаРежимаОтображения = 3 Тогда
			// Когда ПредставлениеПользовательскойНастройки заполнено,
			// то Представление работает как переключатель,
			// но также может использоваться для вывода в табличный документ.
			ЭлементНастройки.Представление = Строка.Заголовок;
		Иначе
			ЭлементНастройки.Представление = "";
		КонецЕсли;
		
		Если Не Строка.ЭтоПредопределенныйЗаголовок Тогда
			ЭлементНастройки.ПредставлениеПользовательскойНастройки = Строка.Заголовок;
		КонецЕсли;
	ИначеЕсли ИмяКоллекции = "Оформление" Тогда
		// Особенность УО - ПредставлениеПользовательскойНастройки может очищаться после ПолучитьНастройки().
		Если Строка.ЭтоПредопределенныйЗаголовок Тогда
			Если КартинкаРежимаОтображения = 1 Или КартинкаРежимаОтображения = 3 Тогда
				// Когда ПредставлениеПользовательскойНастройки заполнено,
				// то Представление работает как переключатель,
				// но также может использоваться для вывода в табличный документ.
				ЭлементНастройки.Представление = Строка.Заголовок;
			Иначе
				ЭлементНастройки.Представление = "";
			КонецЕсли;
		Иначе
			// Когда ПредставлениеПользовательскойНастройки заполнено,
			// то Представление работает как переключатель,
			// но также может использоваться для вывода в табличный документ.
			ЭлементНастройки.Представление = Строка.Заголовок;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ЭлементНастройки.ИдентификаторПользовательскойНастройки = "";
	ИначеЕсли Не ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
		ЭлементНастройки.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КартинкаРежимаОтображенияЭлементаНастройки(ЭлементНастройки)
	КартинкаРежимаОтображения = 5;
	
	Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
		Если ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				Или ТипЗнч(ЭлементНастройки) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда 
				КартинкаРежимаОтображения = 2;
			Иначе
				КартинкаРежимаОтображения = ?(ЗначениеЗаполнено(ЭлементНастройки.Представление), 1, 2);
			КонецЕсли;
		ИначеЕсли ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный Тогда
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				Или ТипЗнч(ЭлементНастройки) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда 
				КартинкаРежимаОтображения = 4;
			Иначе
				КартинкаРежимаОтображения = ?(ЗначениеЗаполнено(ЭлементНастройки.Представление), 3, 4);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КартинкаРежимаОтображения;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент - Таблицы полей (функциональная часть).

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементНастройки(Знач УзелНастроек, Знач Строка)
	ЭлементНастройки = Неопределено;
	
	Если Строка <> Неопределено
		И ТипЗнч(Строка.Идентификатор) = Тип("ИдентификаторКомпоновкиДанных") Тогда
		
		ЭлементНастройки = УзелНастроек.ПолучитьОбъектПоИдентификатору(Строка.Идентификатор);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементНастройки) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЭлементНастройки = ЭлементНастройки.Настройки;
	КонецЕсли;
	
	Возврат ЭлементНастройки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементыНастроек(Знач СвойствоЭлементаСтруктуры, Знач ЭлементНастройки = Неопределено, ИмяКоллекции = Неопределено)
	Если ЭлементНастройки = Неопределено Тогда
		ЭлементНастройки = СвойствоЭлементаСтруктуры;
	КонецЕсли;
	
	Если ИмяКоллекции <> Неопределено
		И СтрРазделить("Строки, Колонки, Серии, Точки", ", ", Ложь).Найти(ИмяКоллекции) <> Неопределено Тогда 
		Возврат ЭлементНастройки[ИмяКоллекции];
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(ЭлементНастройки);
	Если ТипОбъекта = Тип("НастройкиКомпоновкиДанных")
		Или ТипОбъекта = Тип("ГруппировкаКомпоновкиДанных")
		Или ТипОбъекта = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		Или ТипОбъекта = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Возврат ЭлементНастройки.Структура;
	ИначеЕсли ТипОбъекта = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных")
		Или ТипОбъекта = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		Или ТипОбъекта = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		
		Возврат ЭлементНастройки;
	ИначеЕсли ТипОбъекта = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда 
		
		Возврат ЭлементНастройки.Настройки.Структура;
	КонецЕсли;
	
	Возврат ЭлементНастройки.Элементы;
КонецФункции

&НаКлиенте
Функция ИмяКоллекцииНастроекПоИдентификатору(Идентификатор)
	ИмяКоллекции = Неопределено;
	
	Путь = ВРег(Идентификатор);
	Если СтрНайти(Путь, "SERIES") > 0 Тогда 
		ИмяКоллекции = "Серии";
	ИначеЕсли СтрНайти(Путь, "POINT") > 0 Тогда 
		ИмяКоллекции = "Точки";
	ИначеЕсли СтрНайти(Путь, "ROW") > 0 Тогда 
		ИмяКоллекции = "Строки";
	ИначеЕсли СтрНайти(Путь, "COLUMN") > 0 Тогда 
		ИмяКоллекции = "Колонки";
	КонецЕсли;
	
	Возврат ИмяКоллекции;
КонецФункции

&НаКлиенте
Функция ПолучитьРодителяЭлементаНастройки(Знач СвойствоЭлементаСтруктуры, Знач ЭлементНастройки)
	Родитель = Неопределено;
	
	ТипЭлемента = ТипЗнч(ЭлементНастройки);
	Если ЭлементНастройки <> Неопределено
		И ТипЭлемента <> Тип("ПолеГруппировкиКомпоновкиДанных")
		И ТипЭлемента <> Тип("АвтоЭлементПорядкаКомпоновкиДанных")
		И ТипЭлемента <> Тип("ЭлементПорядкаКомпоновкиДанных")
		И ТипЭлемента <> Тип("ЭлементУсловногоОформленияКомпоновкиДанных")
		И ТипЭлемента <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда 
		Родитель = ЭлементНастройки.Родитель;
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда 
		Родитель = СвойствоЭлементаСтруктуры;
	КонецЕсли;
	
	Возврат Родитель;
КонецФункции

&НаКлиенте
Функция ПолучитьРодителя(Знач ИмяКоллекции, Знач Строка = Неопределено)
	Родитель = Неопределено;
	
	Если Строка <> Неопределено Тогда
		Родитель = Строка.ПолучитьРодителя();
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда
		Родитель = КорневаяСтрокаПоУмолчанию(ИмяКоллекции);
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда
		Родитель = ЭтотОбъект[ИмяКоллекции];
	КонецЕсли;
	
	Возврат Родитель;
КонецФункции

&НаКлиенте
Функция КорневаяСтрокаПоУмолчанию(Знач ИмяКоллекции)
	КорневаяСтрока = Неопределено;
	
	Если ИмяКоллекции = "Отборы" Тогда
		Если РежимИзмененияЭлементаСтруктурыНастроек Тогда
			КорневаяСтрока = Отборы.ПолучитьЭлементы()[0];
		Иначе
			КорневаяСтрока = Отборы.ПолучитьЭлементы()[1];
		КонецЕсли;
	КонецЕсли;
	
	Возврат КорневаяСтрока;
КонецФункции

&НаКлиенте
Процедура ВыбратьПоле(ИмяКоллекции, Обработчик, Поле = Неопределено, ИдентификаторУзлаНастроек = Неопределено)
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыВыбора.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	ПараметрыВыбора.Вставить("Режим", ИмяКоллекции);
	ПараметрыВыбора.Вставить("ПолеКД", Поле);
	ПараметрыВыбора.Вставить("ИдентификаторЭлементаСтруктурыНастроек", 
		?(ИдентификаторУзлаНастроек = Неопределено, ИдентификаторЭлементаСтруктурыНастроек, ИдентификаторУзлаНастроек));
	
	ОткрытьФорму(
		"ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ВыборПоляОтчета",
		ПараметрыВыбора, ЭтотОбъект, УникальныйИдентификатор,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера
&НаСервере
Процедура ОбновитьФорму(ПараметрыОбновления = Неопределено)
	СодержитВложенныеОтчеты = Ложь;
	СодержитВложенныеОтборы = Ложь;
	СодержитВложенныеПоляИлиСортировки = Ложь;
	СодержитВложенноеУсловноеОформление = Ложь;
	СодержитПользовательскиеЭлементыСтруктуры = Ложь;
	
	ЗагрузитьНастройкиВКомпоновщик(ПараметрыОбновления);
	
	ОбновитьКоллекцииФормыНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоллекцииФормыНастроек()
	// Очистка настроек.
	Отборы.ПолучитьЭлементы().Очистить();
	
	// Обновление настроек.
	ОбновитьПараметрыДанных();
	ОбновитьОтборы();
	
	// Поиск помеченных на удаление.
	ПомеченныеНаУдаление.Очистить();
	НайтиПомеченныеНаУдалениеПоля();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТиповБезПримитивных(ИсходноеОписаниеТипов)
	ВычитаемыеТипы = Новый Массив;
	Если ИсходноеОписаниеТипов.СодержитТип(Тип("Строка")) Тогда
		ВычитаемыеТипы.Добавить(Тип("Строка"));
	КонецЕсли;
	Если ИсходноеОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
		ВычитаемыеТипы.Добавить(Тип("Дата"));
	КонецЕсли;
	Если ИсходноеОписаниеТипов.СодержитТип(Тип("Число")) Тогда
		ВычитаемыеТипы.Добавить(Тип("Число"));
	КонецЕсли;
	Если ВычитаемыеТипы.Количество() = 0 Тогда
		Возврат ИсходноеОписаниеТипов;
	КонецЕсли;
	Возврат Новый ОписаниеТипов(ИсходноеОписаниеТипов, , ВычитаемыеТипы);
КонецФункции

&НаСервере
Функция ПолноеИмяРеквизита(Реквизит)
	Возврат ?(ПустаяСтрока(Реквизит.Путь), "", Реквизит.Путь + ".") + Реквизит.Имя;
КонецФункции

&НаКлиенте
Процедура ОформитьСписок(Элемент, ЭлементНастройки)
	Значение = Неопределено;
	Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
		Значение = ЭлементНастройки.Значение;
	ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
		Значение = ЭлементНастройки.ПравоеЗначение;
	КонецЕсли;

	Если ТипЗнч(Значение) <> Тип("СписокЗначений") Тогда 
		Возврат;
	КонецЕсли;
	
	Индекс = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Индекс(ЭлементНастройки);
	ПутьКСписку = ПутьКДаннымЭлементов.ПоИндексу[Индекс];
	
	Список = Элементы.Найти(ПутьКСписку);
	Список.ЦветТекста = ?(ЭлементНастройки.Использование, Новый Цвет, ЦветНеактивныхЗначенийТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьПредопределенныеПараметрыВывода(Использование, ЭлементНастройки)
	ПараметрыВывода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы;
	
	Значение = ?(Использование, ТипВыводаТекстаКомпоновкиДанных.Авто, ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	Если ЭлементНастройки.Параметр = Новый ПараметрКомпоновкиДанных("Заголовок") Тогда 
		СвязанныйЭлементНастройки = ПараметрыВывода.Найти("TITLEOUTPUT");
		СвязанныйЭлементНастройки.Использование = Истина;
		СвязанныйЭлементНастройки.Значение = Значение;
	ИначеЕсли ЭлементНастройки.Параметр = Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных") Тогда 
		СвязанныйЭлементНастройки = ПараметрыВывода.Найти("FILTEROUTPUT");
		ЗаполнитьЗначенияСвойств(СвязанныйЭлементНастройки, ЭлементНастройки, "Использование, Значение");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыРедактирования(Строка)
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	Если Строка.ЭтоПараметр Тогда 
		ПолеЗначения = Элементы.ОтборыЗначение;
		СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(КомпоновщикНастроек, "ПараметрыДанных");
	Иначе
		ПолеЗначения = Элементы.ОтборыПравоеЗначение;
		СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
			КомпоновщикНастроек, "Отбор", ИдентификаторЭлементаСтруктурыНастроек);
	КонецЕсли;
	
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	ТекущиеНастройки = ЭлементСтруктурыНастроек(КомпоновщикНастроек.Настройки, ИдентификаторЭлементаСтруктурыНастроек);
	ЭлементНастройки = ЭлементНастройки(СвойствоЭлементаСтруктуры, Строка);
	ОписаниеЭлементаНастройки = ОтчетыКлиентСервер.НайтиДоступнуюНастройку(ТекущиеНастройки, ЭлементНастройки);
	
	ПолеЗначения.ПараметрыВыбора = ОтчетыКлиентСервер.ПараметрыВыбора(ТекущиеНастройки, ПользовательскиеНастройки, ЭлементНастройки, Истина);
	
	Строка.ТипЗначения = ОтчетыКлиент.ТипЗначенияОграниченныйСвязьюПоТипу(
		ТекущиеНастройки, ПользовательскиеНастройки, ЭлементНастройки, ОписаниеЭлементаНастройки);
	
	ПолеЗначения.ДоступныеТипы = Строка.ТипЗначения;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокВыбора(Строка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	УстановитьПараметрыРедактирования(Строка);
	
	Если Строка.ЭтоПараметр Тогда 
		ПолеЗначения = Элементы.ОтборыЗначение;
		ТекущееЗначение = Строка.Значение;
	Иначе
		ПолеЗначения = Элементы.ОтборыПравоеЗначение;
		ТекущееЗначение = Строка.ПравоеЗначение;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отмеченные", ОтчетыКлиентСервер.ЗначенияСписком(ТекущееЗначение, Истина));
	ПараметрыОткрытия.Вставить("ОписаниеТипов", Строка.ТипЗначения);
	ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", Строка.ДоступныеЗначения);
	ПараметрыОткрытия.Вставить("ЗначенияДляВыбораЗаполнены", Строка.ДоступныеЗначения <> Неопределено);
	ПараметрыОткрытия.Вставить("ОграничиватьВыборУказаннымиЗначениями", ПараметрыОткрытия.ЗначенияДляВыбораЗаполнены);
	ПараметрыОткрытия.Вставить("Представление", Строка.ПредставлениеПользовательскойНастройки);
	ПараметрыОткрытия.Вставить("ПараметрыВыбора", Новый Массив(ПолеЗначения.ПараметрыВыбора));
	ПараметрыОткрытия.Вставить("ВыборГруппИЭлементов", ПолеЗначения.ВыборГруппИЭлементов);
	
	Обработчик = Новый ОписаниеОповещения("ЗавершитьВыборИзСписка", ЭтотОбъект, Строка.ПолучитьИдентификатор());
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыОткрытия, ЭтотОбъект,,,, Обработчик, Режим);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПривестиЗначениеКВидуСравнения(Строка, ЭлементНастройки = Неопределено)
	ИмяПоляЗначения = ?(Строка.ЭтоПараметр, "Значение", "ПравоеЗначение");
	ТекущееЗначение = Строка[ИмяПоляЗначения];
	
	Если Строка.ДоступенСписокЗначений
		Или ОтчетыКлиентСервер.ЭтоВидСравненияСписка(Строка.ВидСравнения) Тогда 
		
		Значение = ОтчетыКлиентСервер.ЗначенияСписком(ТекущееЗначение);
		Значение.ЗаполнитьПометки(Истина);
		
		Если Строка.ДоступныеЗначения <> Неопределено Тогда 
			Для Каждого ЭлементСписка Из Значение Цикл 
				НайденныйЭлемент = Строка.ДоступныеЗначения.НайтиПоЗначению(ЭлементСписка.Значение);
				Если НайденныйЭлемент <> Неопределено Тогда 
					ЗаполнитьЗначенияСвойств(ЭлементСписка, НайденныйЭлемент,, "Пометка");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Значение = Неопределено;
		Если ТипЗнч(ТекущееЗначение) <> Тип("СписокЗначений") Тогда 
			Значение = ТекущееЗначение;
		ИначеЕсли ТекущееЗначение.Количество() > 0 Тогда 
			Значение = ТекущееЗначение[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Строка[ИмяПоляЗначения] = Значение;
	
	Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
		Или ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
		ЭлементНастройки[ИмяПоляЗначения] = Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеЗначения(Строка)
	Строка.ПредставлениеЗначения = "";
	
	ДоступныеЗначения = Строка.ДоступныеЗначения;
	Если ДоступныеЗначения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Значение = ?(Строка.ЭтоПараметр, Строка.Значение, Строка.ПравоеЗначение);
	НайденныйЭлемент = ДоступныеЗначения.НайтиПоЗначению(Значение);
	Если НайденныйЭлемент <> Неопределено Тогда 
		Строка.ПредставлениеЗначения = НайденныйЭлемент.Представление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированность()
	ПользовательскиеНастройкиМодифицированы = Истина;
	ВариантИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Переформировать)
	ОповеститьОВыборе(РезультатВыбора(Переформировать));
КонецПроцедуры

&НаКлиенте
Функция РезультатВыбора(Переформировать)
	РезультатВыбораСформирован = Истина;
	
	Если РежимИзмененияУзлаВарианта И Не Переформировать Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("ИмяСобытия", "ФормаНастроек");
	РезультатВыбора.Вставить("Переформировать", Переформировать);
	РезультатВыбора.Вставить("ВариантМодифицирован", ВариантИзменен);
	РезультатВыбора.Вставить("ПользовательскиеНастройкиМодифицированы", ВариантИзменен ИЛИ ПользовательскиеНастройкиМодифицированы);
	
	Если ВариантИзменен Тогда
		РезультатВыбора.Вставить("НастройкиКД", Отчет.КомпоновщикНастроек.Настройки);
		РезультатВыбора.Вставить("СброситьПользовательскиеНастройки", Истина);
	КонецЕсли;
	
	Если ПользовательскиеНастройкиМодифицированы Тогда
		РезультатВыбора.Вставить("ПользовательскиеНастройкиКД", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	КонецЕсли;
	
	Возврат РезультатВыбора;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивСортировать(ИсходныйМассив, НаправлениеСортировки = Неопределено)
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(ИсходныйМассив);
	Список.СортироватьПоЗначению(НаправлениеСортировки);
	Возврат Список.ВыгрузитьЗначения();
КонецФункции

#Область ОбработкаПомеченныхНаУдалениеПолей

// Поиск полей, помеченных на удаление.

&НаСервере
Процедура НайтиПомеченныеНаУдалениеПоля(Знач ЭлементыСтруктуры = Неопределено)
	Если РежимИзмененияЭлементаСтруктурыНастроек Тогда 
		Возврат;
	КонецЕсли;
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	
	Если ЭлементыСтруктуры = Неопределено Тогда 
		ЭлементыСтруктуры = Настройки.Структура;
		
		НайтиПомеченныеНаУдалениеВыбранныеПоля(Настройки);
		НайтиПомеченныеНаУдалениеПоляОтбора(Настройки);
		НайтиПомеченныеНаУдалениеПоляПорядка(Настройки);
		НайтиПомеченныеНаУдалениеЭлементыУсловногоОформления(Настройки);
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ЭлементыСтруктуры Цикл 
		ТипЭлемента = ТипЗнч(ЭлементСтруктуры);
		Если ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных")
			Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			Или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда 
			
			НайтиПомеченныеНаУдалениеВыбранныеПоля(Настройки, ЭлементСтруктуры);
			НайтиПомеченныеНаУдалениеПоляОтбора(Настройки, ЭлементСтруктуры);
			НайтиПомеченныеНаУдалениеПоляПорядка(Настройки, ЭлементСтруктуры);
			НайтиПомеченныеНаУдалениеЭлементыУсловногоОформления(Настройки, ЭлементСтруктуры);
			НайтиПомеченныеНаУдалениеПоляГруппировки(Настройки, ЭлементСтруктуры);
		КонецЕсли;
		
		ИменаКоллекций = ИменаКоллекцийЭлементаСтруктуры(ЭлементСтруктуры);
		Для Каждого ИмяКоллекции Из ИменаКоллекций Цикл 
			КоллекцияЭлементаСтруктуры = ЭлементыНастроек(ЭлементСтруктуры,, ИмяКоллекции);
			НайтиПомеченныеНаУдалениеПоля(КоллекцияЭлементаСтруктуры);
		КонецЦикла;
	КонецЦикла;
	
	Обработанные = ПомеченныеНаУдаление.Выгрузить();
	Обработанные.Свернуть("ИдентификаторЭлементаСтруктуры, ИдентификаторЭлемента, КлючСвойстваЭлементаСтруктуры");
	Обработанные.Сортировать("ИдентификаторЭлементаСтруктуры Убыв, КлючСвойстваЭлементаСтруктуры, ИдентификаторЭлемента");
	
	ПомеченныеНаУдаление.Загрузить(Обработанные);
КонецПроцедуры

&НаСервере
Процедура НайтиПомеченныеНаУдалениеВыбранныеПоля(Настройки, Знач ЭлементСтруктуры = Неопределено, Группа = Неопределено)
	Если ЭлементСтруктуры = Неопределено Тогда 
		ЭлементСтруктуры = Настройки;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = ЭлементСтруктуры.Выбор;
	ДоступныеПоля = СвойствоЭлементаСтруктуры.ДоступныеПоляВыбора;
	ТипАвтоПоля = Тип("АвтоВыбранноеПолеКомпоновкиДанных");
	ТипГруппы = Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
	
	ЭлементыНастроек = ?(Группа = Неопределено, СвойствоЭлементаСтруктуры.Элементы, Группа.Элементы);
	Для Каждого ЭлементНастройки Из ЭлементыНастроек Цикл 
		Если ТипЗнч(ЭлементНастройки) = ТипГруппы Тогда 
			НайтиПомеченныеНаУдалениеВыбранныеПоля(Настройки,  ЭлементСтруктуры, ЭлементНастройки);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементНастройки) = ТипАвтоПоля
			Или ДоступныеПоля.НайтиПоле(ЭлементНастройки.Поле) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Запись = ПомеченныеНаУдаление.Добавить();
		Запись.ИдентификаторЭлементаСтруктуры = Настройки.ПолучитьИдентификаторПоОбъекту(ЭлементСтруктуры);
		Запись.ИдентификаторЭлемента = СвойствоЭлементаСтруктуры.ПолучитьИдентификаторПоОбъекту(ЭлементНастройки);
		Запись.КлючСвойстваЭлементаСтруктуры = "Выбор";
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НайтиПомеченныеНаУдалениеПоляОтбора(Настройки, Знач ЭлементСтруктуры = Неопределено, Группа = Неопределено)
	Если ЭлементСтруктуры = Неопределено Тогда 
		ЭлементСтруктуры = Настройки;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = ЭлементСтруктуры.Отбор;
	ДоступныеПоля = СвойствоЭлементаСтруктуры.ДоступныеПоляОтбора;
	ТипГруппы = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	ЭлементыНастроек = ?(Группа = Неопределено, СвойствоЭлементаСтруктуры.Элементы, Группа.Элементы);
	Для Каждого ЭлементНастройки Из ЭлементыНастроек Цикл 
		Если ТипЗнч(ЭлементНастройки) = ТипГруппы Тогда 
			НайтиПомеченныеНаУдалениеПоляОтбора(Настройки,  ЭлементСтруктуры, ЭлементНастройки);
			Продолжить;
		КонецЕсли;
		
		Если ДоступныеПоля.НайтиПоле(ЭлементНастройки.ЛевоеЗначение) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Запись = ПомеченныеНаУдаление.Добавить();
		Запись.ИдентификаторЭлементаСтруктуры = Настройки.ПолучитьИдентификаторПоОбъекту(ЭлементСтруктуры);
		Запись.ИдентификаторЭлемента = СвойствоЭлементаСтруктуры.ПолучитьИдентификаторПоОбъекту(ЭлементНастройки);
		Запись.КлючСвойстваЭлементаСтруктуры = "Отбор";
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НайтиПомеченныеНаУдалениеПоляПорядка(Настройки, Знач ЭлементСтруктуры = Неопределено)
	Если ЭлементСтруктуры = Неопределено Тогда 
		ЭлементСтруктуры = Настройки;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = ЭлементСтруктуры.Порядок;
	ДоступныеПоля = СвойствоЭлементаСтруктуры.ДоступныеПоляПорядка;
	ТипАвтоПоля = Тип("АвтоЭлементПорядкаКомпоновкиДанных");
	
	Для Каждого ЭлементНастройки Из СвойствоЭлементаСтруктуры.Элементы Цикл 
		Если ТипЗнч(ЭлементНастройки) = ТипАвтоПоля
			Или ДоступныеПоля.НайтиПоле(ЭлементНастройки.Поле) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Запись = ПомеченныеНаУдаление.Добавить();
		Запись.ИдентификаторЭлементаСтруктуры = Настройки.ПолучитьИдентификаторПоОбъекту(ЭлементСтруктуры);
		Запись.ИдентификаторЭлемента = СвойствоЭлементаСтруктуры.ПолучитьИдентификаторПоОбъекту(ЭлементНастройки);
		Запись.КлючСвойстваЭлементаСтруктуры = "Порядок";
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НайтиПомеченныеНаУдалениеЭлементыУсловногоОформления(Настройки, Знач ЭлементСтруктуры = Неопределено)
	Если ЭлементСтруктуры = Неопределено Тогда 
		ЭлементСтруктуры = Настройки;
	КонецЕсли;
	
	СвойствоЭлементаСтруктуры = ЭлементСтруктуры.УсловноеОформление;
	
	Для Каждого ЭлементНастройки Из СвойствоЭлементаСтруктуры.Элементы Цикл 
		ДоступныеПоля = ЭлементНастройки.Поля.ДоступныеПоляОформляемыхПолей;
		Для Каждого Элемент Из ЭлементНастройки.Поля.Элементы Цикл 
			Если ДоступныеПоля.НайтиПоле(Элемент.Поле) <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Запись = ПомеченныеНаУдаление.Добавить();
			Запись.ИдентификаторЭлементаСтруктуры = Настройки.ПолучитьИдентификаторПоОбъекту(ЭлементСтруктуры);
			Запись.ИдентификаторЭлемента = СвойствоЭлементаСтруктуры.ПолучитьИдентификаторПоОбъекту(ЭлементНастройки);
			Запись.КлючСвойстваЭлементаСтруктуры = "УсловноеОформление";
		КонецЦикла;
		
		НайтиПомеченныеНаУдалениеЭлементыОтбораУсловногоОформления(Настройки, ЭлементСтруктуры, ЭлементНастройки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НайтиПомеченныеНаУдалениеЭлементыОтбораУсловногоОформления(Настройки, ЭлементСтруктуры, ЭлементОформления, Группа = Неопределено)
	СвойствоЭлементаСтруктуры = ЭлементСтруктуры.УсловноеОформление;
	
	ДоступныеПоля = ЭлементОформления.Отбор.ДоступныеПоляОтбора;
	ТипГруппы = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	ЭлементыНастроек = ?(Группа = Неопределено, ЭлементОформления.Отбор.Элементы, Группа.Элементы);
	Для Каждого ЭлементНастройки Из ЭлементыНастроек Цикл 
		Если ТипЗнч(ЭлементНастройки) = ТипГруппы Тогда 
			НайтиПомеченныеНаУдалениеЭлементыОтбораУсловногоОформления(
				Настройки,  ЭлементСтруктуры, ЭлементОформления, ЭлементНастройки);
			Продолжить;
		КонецЕсли;
		
		Если ДоступныеПоля.НайтиПоле(ЭлементНастройки.ЛевоеЗначение) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Запись = ПомеченныеНаУдаление.Добавить();
		Запись.ИдентификаторЭлементаСтруктуры = Настройки.ПолучитьИдентификаторПоОбъекту(ЭлементСтруктуры);
		Запись.ИдентификаторЭлемента = СвойствоЭлементаСтруктуры.ПолучитьИдентификаторПоОбъекту(ЭлементОформления);
		Запись.КлючСвойстваЭлементаСтруктуры = "УсловноеОформление";
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НайтиПомеченныеНаУдалениеПоляГруппировки(Настройки, ЭлементСтруктуры)
	СвойствоЭлементаСтруктуры = ЭлементСтруктуры.ПоляГруппировки;
	ДоступныеПоля = СвойствоЭлементаСтруктуры.ДоступныеПоляПолейГруппировок;
	ТипАвтоПоля = Тип("АвтоПолеГруппировкиКомпоновкиДанных");
	
	Для Каждого ЭлементНастройки Из СвойствоЭлементаСтруктуры.Элементы Цикл 
		Если ТипЗнч(ЭлементНастройки) = ТипАвтоПоля
			Или ДоступныеПоля.НайтиПоле(ЭлементНастройки.Поле) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Запись = ПомеченныеНаУдаление.Добавить();
		Запись.ИдентификаторЭлементаСтруктуры = Настройки.ПолучитьИдентификаторПоОбъекту(ЭлементСтруктуры);
		Запись.ИдентификаторЭлемента = СвойствоЭлементаСтруктуры.ПолучитьИдентификаторПоОбъекту(ЭлементНастройки);
		Запись.КлючСвойстваЭлементаСтруктуры = "ПоляГруппировки";
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ИменаКоллекцийЭлементаСтруктуры(Элемент)
	ИменаКоллекций = "";
	
	ТипЭлемента = ТипЗнч(Элемент);
	Если ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных")
		Или ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда 
		
		ИменаКоллекций = "Структура";
	ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда 
		ИменаКоллекций = "Строки, Колонки";
	ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда 
		ИменаКоллекций = "Точки, Серии";
	КонецЕсли;
	
	Возврат СтрРазделить(ИменаКоллекций, ", ", Ложь);
КонецФункции

// Удаление полей, помеченных на удаление.

&НаКлиенте
Процедура УдалитьПомеченныеНаУдалениеПоля()
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	Для Каждого Запись Из ПомеченныеНаУдаление Цикл 
		СвойствоЭлементаСтруктуры = СвойствоЭлементаСтруктурыНастроек(
			КомпоновщикНастроек, Запись.КлючСвойстваЭлементаСтруктуры, Запись.ИдентификаторЭлементаСтруктуры, Истина);
		
		ЭлементНастройки = СвойствоЭлементаСтруктуры.ПолучитьОбъектПоИдентификатору(Запись.ИдентификаторЭлемента);
		Если ЭлементНастройки = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		РодительЭлементаНастройки = ПолучитьРодителяЭлементаНастройки(СвойствоЭлементаСтруктуры, ЭлементНастройки);
		ЭлементыНастроек = ЭлементыНастроек(СвойствоЭлементаСтруктуры, РодительЭлементаНастройки);
		ЭлементыНастроек.Удалить(ЭлементНастройки);
		
		Если ЭлементыНастроек.Количество() = 0
			И ТипЗнч(РодительЭлементаНастройки) = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда 
			
			ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Запись.ИдентификаторЭлементаСтруктуры);
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда 
				ЭлементыСтруктуры = ЭлементСтруктуры.Структура;
				Если ЭлементыСтруктуры.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				Индекс = ЭлементыСтруктуры.Количество() - 1;
				Пока Индекс >= 0 Цикл 
					ЭлементыСтруктуры.Удалить(ЭлементыСтруктуры[Индекс]);
					Индекс = Индекс - 1;
				КонецЦикла;
			Иначе // ГруппировкаТаблицыКомпоновкиДанных или ГруппировкаДиаграммыКомпоновкиДанных.
				РодительЭлементаСтруктуры = ПолучитьРодителяЭлементаНастройки(СвойствоЭлементаСтруктуры, ЭлементСтруктуры);
				ИмяКоллекции = ИмяКоллекцииНастроекПоИдентификатору(Запись.ИдентификаторЭлементаСтруктуры);
				ЭлементыСтруктуры = ЭлементыНастроек(СвойствоЭлементаСтруктуры, РодительЭлементаСтруктуры, ИмяКоллекции);
				ЭлементыСтруктуры.Удалить(ЭлементСтруктуры);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьМодифицированность();
КонецПроцедуры

#КонецОбласти

#КонецОбласти