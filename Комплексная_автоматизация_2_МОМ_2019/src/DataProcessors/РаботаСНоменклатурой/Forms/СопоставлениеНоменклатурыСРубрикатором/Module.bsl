
#Область ОбработчикиСобытийФормы

&НаСервере
// Описание параметров формы см. в 
//  РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыФормыСопоставленияНоменклатурыСРубрикатором
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	ПараметрыФормы = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыФормыСопоставленияНоменклатурыСРубрикатором();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Параметры);
	
	РежимСопоставления = ПараметрыФормы.РежимСопоставления;
	Если Не ЗначениеЗаполнено(РежимСопоставления) Тогда
		РежимСопоставления = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РаботаСНоменклатурой",
			"СопоставлениеНоменклатуры\РежимСопоставления");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РежимСопоставления) Тогда
		РежимСопоставления = "ПоНоменклатуре";
	КонецЕсли;
	
	НастройкиОтбора       = ПараметрыФормы.НастройкиОтбора;
	СценарийИспользования = ПараметрыФормы.СценарийИспользования;
	Заголовок             = ПараметрыФормы.Заголовок;
	ЗаголовокКатегории    = ПараметрыФормы.ЗаголовокКатегории;
	
	Элементы.Категория.Заголовок                                = ЗаголовокКатегории;
	Элементы.СписокПоИерархииКатегория.Заголовок                = ЗаголовокКатегории;
	Элементы.СписокПоНоменклатуреКатегория.Заголовок            = ЗаголовокКатегории;
	Элементы.РеквизитыПредставлениеРеквизитаКатегории.Заголовок = ПараметрыФормы.ЗаголовокРеквизита;
	Элементы.РеквизитыТипРеквизитаРубрикатора.Заголовок         = ПараметрыФормы.ЗаголовокТипа;
	Элементы.ИнформацияСписок.Заголовок                         = ПараметрыФормы.ИнформацияСписок;
	Элементы.ИнформацияРеквизиты.Заголовок                      = ПараметрыФормы.ИнформацияРеквизиты;
	
	ТекстСообщенияОшибкаИнициализации       = НСтр("ru = 'Ошибка при инициализации формы'");
	ПодсистемаТорговыеПредложенияСуществует = ОбщегоНазначения.ПодсистемаСуществует(
												"ЭлектронноеВзаимодействие.ТорговыеПредложения");
	
	МодульТорговыеПредложенияПереопределяемый = Неопределено;
	
	РаботаСНоменклатуройВстроена = Истина;
	РаботаСНоменклатуройПереопределяемый.ИнициализацияСпискаСопоставленияПоНоменклатуре(Элементы.СписокПоНоменклатуре);
	Если СписокПоНоменклатуре.ОсновнаяТаблица = "Справочник.ГруппыДоступа" Тогда
		РаботаСНоменклатуройВстроена = Ложь;
		Если ПодсистемаТорговыеПредложенияСуществует Тогда
			МодульТорговыеПредложенияПереопределяемый = МодульТорговыеПредложенияПереопределяемый(МодульТорговыеПредложенияПереопределяемый);
			МодульТорговыеПредложенияПереопределяемый.ИнициализацияСпискаСопоставленияПоНоменклатуре(Элементы.СписокПоНоменклатуре);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОшибкаИнициализации,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьИерархию = Ложь;
	ОписаниеМетаданных = Новый Структура("Иерархический", ИспользоватьИерархию);
	Для Каждого ТипыДанныхНоменклатуры Из Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип.Типы() Цикл
		ЗаполнитьЗначенияСвойств(ОписаниеМетаданных, Метаданные.НайтиПоТипу(ТипыДанныхНоменклатуры));
		Если ОписаниеМетаданных.Иерархический = Истина Тогда
			ИспользоватьИерархию = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьИерархию Тогда
		РаботаСНоменклатуройПереопределяемый.ИнициализацияСпискаСопоставленияПоИерархии(Элементы.СписокПоИерархии);
		Если СписокПоИерархии.ОсновнаяТаблица = "Справочник.ГруппыДоступа" Тогда
			Если ПодсистемаТорговыеПредложенияСуществует Тогда
				МодульТорговыеПредложенияПереопределяемый = МодульТорговыеПредложенияПереопределяемый(МодульТорговыеПредложенияПереопределяемый);
				МодульТорговыеПредложенияПереопределяемый.ИнициализацияСпискаСопоставленияПоИерархии(Элементы.СписокПоИерархии);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОшибкаИнициализации,,,, Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
			"ЭтоГруппа", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	Иначе
		Элементы.ГруппаРежимПоИерархии.Видимость = Ложь;
		Если РежимСопоставления = "ПоИерархии" Тогда
			РежимСопоставления = "";
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьВидыНоменклатуры = Ложь;
	Если СценарийИспользования = "ПубликацияТорговыхПредложенийБезКонтекста" 
		И ПодсистемаТорговыеПредложенияСуществует = Истина Тогда
		МодульТорговыеПредложенияПереопределяемый = МодульТорговыеПредложенияПереопределяемый(МодульТорговыеПредложенияПереопределяемый);
		МодульТорговыеПредложенияПереопределяемый.ФункциональнаяОпцияИспользуется(ИмяФормы, ИспользоватьВидыНоменклатуры);
	Иначе
		ИспользоватьВидыНоменклатуры = РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры();
	КонецЕсли;
	Если Не ИспользоватьВидыНоменклатуры Тогда
		Элементы.ГруппаРежимПоВидам.Видимость = Ложь;
		Если РежимСопоставления = "ПоВидам" Тогда
			РежимСопоставления = "";
		КонецЕсли;
	Иначе
		РаботаСНоменклатуройПереопределяемый.ИнициализацияСпискаСопоставленияНоменклатуры(Элементы.СписокПоВидам);
		Если СписокПоВидам.ОсновнаяТаблица = "Справочник.ГруппыДоступа" Тогда
			Если ПодсистемаТорговыеПредложенияСуществует Тогда
				МодульТорговыеПредложенияПереопределяемый = МодульТорговыеПредложенияПереопределяемый(МодульТорговыеПредложенияПереопределяемый);
				МодульТорговыеПредложенияПереопределяемый.ИнициализацияСпискаСопоставленияНоменклатуры(Элементы.СписокПоВидам);
			Иначе 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОшибкаИнициализации,,,, Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		Параметры.Свойство("Организация", Организация);
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Элементы.Организация.Видимость = Истина;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	СостоянияВыгрузкиНоменклатуры.Организация КАК Организация
			|ИЗ
			|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
			|ГДЕ
			|	СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.СодержитПроблемы)";
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда 
				Организация = Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
		ПодготовитьФормуКРаботеВРежимеВыгрузкиНоменклатуры(ИспользоватьИерархию, ИспользоватьВидыНоменклатуры, Отказ);
	ИначеЕсли СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда 
		ПодготовитьФормуКРаботеВРежимеУстранениеПроблемЗаполнения(ИспользоватьИерархию, ИспользоватьВидыНоменклатуры, Отказ, Параметры.КлючЗаписиРегистра);
	КонецЕсли;
	
	ЭтоВыгрузкаВНациональныйКаталог = (ТипЗнч(НастройкаВыгрузки) = Тип("Структура")
		И НастройкаВыгрузки.Свойство("ВыгружатьВНациональныйКаталог")
		И НастройкаВыгрузки.ВыгружатьВНациональныйКаталог = Истина);
	
	УстановитьРежимСопоставления();
	УстановитьУсловноеОформление();
	
	ТипыЗначенийСвойств = Новый СписокЗначений;
	РаботаСНоменклатуройПереопределяемый.ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления(ТипыЗначенийСвойств);
	Если НЕ ТипыЗначенийСвойств.Количество() Тогда
		Если ПодсистемаТорговыеПредложенияСуществует Тогда
			МодульТорговыеПредложенияПереопределяемый = МодульТорговыеПредложенияПереопределяемый(МодульТорговыеПредложенияПереопределяемый);
			МодульТорговыеПредложенияПереопределяемый.ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления(ТипыЗначенийСвойств);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОшибкаИнициализации,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПустаяСсылкаРеквизитаОбъекта = Неопределено;
	РаботаСНоменклатуройПереопределяемый.ПустаяСсылкаРеквизитаОбъектаДляСопоставления(ПустаяСсылкаРеквизитаОбъекта);
	Если ПустаяСсылкаРеквизитаОбъекта = Неопределено Тогда
		Если ПодсистемаТорговыеПредложенияСуществует Тогда
			МодульТорговыеПредложенияПереопределяемый = МодульТорговыеПредложенияПереопределяемый(МодульТорговыеПредложенияПереопределяемый);
			МодульТорговыеПредложенияПереопределяемый.ПустаяСсылкаРеквизитаОбъектаДляСопоставления(ПустаяСсылкаРеквизитаОбъекта);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОшибкаИнициализации,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОтбора <> Неопределено Тогда
		Если НастройкиОтбора.Отбор.Элементы.Количество() > 0 И (ИспользоватьИерархию ИЛИ ИспользоватьВидыНоменклатуры) Тогда
			
			ВидыНоменклатурыИРодители = Обработки.РаботаСНоменклатурой.РодителиИВидыНоменклатурыПоОтбору(НастройкиОтбора,
			ИспользоватьИерархию, ИспользоватьВидыНоменклатуры);
			
			Если ИспользоватьИерархию Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоИерархии, "Ссылка", ВидыНоменклатурыИРодители.Родители,
				ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
				Элементы.СписокПоИерархии.Отображение = ОтображениеТаблицы.Список;
			КонецЕсли;
			
			Если ИспользоватьВидыНоменклатуры Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоВидам, "Ссылка", ВидыНоменклатурыИРодители.ВидыНоменклатуры,
				ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
			КонецЕсли;
			
			Если РаботаСНоменклатуройВстроена <> Истина Тогда
				Для каждого ЭлементОтбора Из НастройкиОтбора.Отбор.Элементы Цикл
					Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура") Тогда
						ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СписокПоНоменклатуре.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоВыгрузкаВНациональныйКаталог Тогда
		ОбязательныеРеквизитыДлительнаяОперация = ДлительнаяОперацияОбязательныеРеквизиты(УникальныйИдентификатор);
		ТипБулево            = Новый ОписаниеТипов("Булево");
		ТипРеквизит          = Новый ОписаниеТипов("ПеречислениеСсылка.РеквизитыНоменклатурыДляВыгрузки");
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОбязательныйРеквизит", ТипБулево, "Реквизиты"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ФормализованныйРеквизит", ТипРеквизит, "Реквизиты"));
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ТекстИнформацияРеквизиты = Новый Массив;
		ТекстИнформацияРеквизиты.Добавить(Элементы.ИнформацияРеквизиты.Заголовок);
		ТекстИнформацияРеквизиты.Добавить(НСтр("ru=' Обязательные для заполнения реквизиты выделены '"));
		ТекстИнформацияРеквизиты.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='красным'"),, ЦветаСтиля.ПоясняющийОшибкуТекст));

		Элементы.ИнформацияРеквизиты.Заголовок = Новый ФорматированнаяСтрока(ТекстИнформацияРеквизиты);
	Иначе 
		Элементы.ГруппаПояснениеКФорме.Видимость = (ТипЗнч(НастройкаВыгрузки) = Тип("Структура"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		ПроверитьСтатусОперацииПроблемыЗаполнения();
		ОбновитьСтраницуПоВидам(Ложь);
	КонецЕсли;
	
	Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		ОбновитьКатегориюСервиса();
		ОбработатьОбновлениеРасшифровки();
	КонецЕсли;
	
	Если ЭтоВыгрузкаВНациональныйКаталог Тогда
		ПроверитьПолучениеОбязательныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура РежимСопоставленияНажатие(Элемент)
	
	Если Элемент.Имя = "РежимПоВидам" Тогда
		РежимСопоставления = "ПоВидам";
	ИначеЕсли Элемент.Имя = "РежимПоИерархии" Тогда
		РежимСопоставления = "ПоИерархии";
	Иначе
		РежимСопоставления = "ПоНоменклатуре";
	КонецЕсли;
	
	УстановитьРежимСопоставления(Истина);
	ОбновитьРеквизитыСервиса();
	
	ОбновитьСтраницуПоВидам(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроблемыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Расшифровка   = ЗначениеИзСтрокиJSON(ТекущиеДанные.РасшифровкаПроблемы);
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ОчиститьСообщения();
		
		Если Расшифровка.Проблемы.Количество() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыНоменклатуры", ЭтотОбъект, ВыбраннаяСтрока);
			РаботаСНоменклатуройКлиентПереопределяемый.ПоказатьНезаполненныеДанныеНоменклатуры(ВыбраннаяСтрока, Расшифровка.Проблемы, ЭтотОбъект, ОписаниеОповещения);
		ИначеЕсли Расшифровка.Категории <> Истина Тогда
			Элементы.СтраницыПодготовкаКВыгрузке.ТекущаяСтраница = Элементы.СопоставлениеСРубрикатором;
			РежимСопоставленияНажатие(Элементы.РежимПоНоменклатуре);
			Элементы.СписокПоНоменклатуре.ТекущаяСтрока = ТекущиеДанные.Номенклатура;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоказатьНезаполненныеНажатие(Элемент)
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат
	КонецЕсли;
	
	Если Расшифровка.Проблемы.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыНоменклатуры", ЭтотОбъект, КатегорииНоменклатуры.Ссылка);
		РаботаСНоменклатуройКлиентПереопределяемый.ПоказатьНезаполненныеДанныеНоменклатуры(КатегорииНоменклатуры.Ссылка, Расшифровка.Проблемы, ЭтотОбъект, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияСервисаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторКатегорииСервиса = КатегорииНоменклатуры["ИдентификаторКатегории" + РежимСопоставления];
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборКатегорииСервиса", ЭтотОбъект, РежимСопоставления);
	ВыбратьКатегориюСервиса(ИдентификаторКатегорииСервиса, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьРеквизитыСервиса", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущийСписок = Элементы["Список" + РежимСопоставления];
	
	Если Найти(Поле.Имя, "Категория")
		И Не (РежимСопоставления = "ПоВидам" И ТекущийСписок.ТекущиеДанные.ЭтоГруппа) Тогда
		
		// Если сопоставление подчиненное переход к списку родителя.
		Если РежимСопоставления = "ПоНоменклатуре" И Не ЗначениеЗаполнено(ТекущийСписок.ТекущиеДанные.КатегорияПоНоменклатуре) Тогда
			
			Если ЗначениеЗаполнено(ТекущийСписок.ТекущиеДанные.КатегорияПоВидам)
				И ЗначениеЗаполнено(ТекущийСписок.ТекущиеДанные.ВидНоменклатуры) Тогда
				
				СтандартнаяОбработка = Ложь;
				РежимСопоставления = "ПоВидам";
				УстановитьРежимСопоставления(Истина, ТекущийСписок.ТекущиеДанные.ВидНоменклатуры);
				
			ИначеЕсли ЗначениеЗаполнено(ТекущийСписок.ТекущиеДанные.КатегорияПоИерархии) 
				И ЗначениеЗаполнено(ТекущийСписок.ТекущиеДанные.Родитель) Тогда
				
				СтандартнаяОбработка = Ложь;
				РежимСопоставления = "ПоИерархии";
				УстановитьРежимСопоставления(Истина, ТекущийСписок.ТекущиеДанные.Родитель);
			Иначе
				
				СтандартнаяОбработка = Ложь;
				ВыбратьКатегориюСервиса(Элемент.ТекущиеДанные.ИдентификаторКатегории);
				
			КонецЕсли;
			
		Иначе
			
			СтандартнаяОбработка = Ложь;
			ВыбратьКатегориюСервиса(Элемент.ТекущиеДанные.ИдентификаторКатегории);
			
		КонецЕсли;
		
	ИначеЕсли Найти(Поле.Имя, "Ссылка") И Не Элемент.Имя = "СписокПоНоменклатуре" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
			"ВидНоменклатуры", Неопределено, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
			"Родитель", Неопределено, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
		Элементы.ГруппаОтбор.Видимость = Ложь;
		
		Если РежимСопоставления = "ПоВидам" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
				"ВидНоменклатуры", Элемент.ТекущиеДанные.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, Истина);
			Элементы.ДекорацияИмяПоляОтбора.Заголовок = НСтр("ru = 'Вид номенклатуры'") + ":";
			Элементы.ДекорацияЗначениеОтбора.Заголовок = Элемент.ТекущиеДанные.Ссылка;
			Элементы.ГруппаОтбор.Видимость = Истина;
			
		ИначеЕсли РежимСопоставления = "ПоИерархии" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
				"Родитель", Элемент.ТекущиеДанные.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, Истина);
			Элементы.ДекорацияИмяПоляОтбора.Заголовок = НСтр("ru = 'Группа номенклатуры'") + ":";
			Элементы.ДекорацияЗначениеОтбора.Заголовок = Элемент.ТекущиеДанные.Ссылка;
			Элементы.ГруппаОтбор.Видимость = Истина;
		КонецЕсли;
		
		РежимСопоставления = "ПоНоменклатуре";
		УстановитьРежимСопоставления(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизиты

&НаКлиенте
Процедура РеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущийСписок = Элементы["Список" + РежимСопоставления];
	
	СтрокаРеквизита = Элементы.Реквизиты.ТекущиеДанные;
	СтрокаСопоставления = ТекущийСписок.ТекущиеДанные;
	Если Поле.Имя = "РеквизитыСоответствие" Тогда
		СтандартнаяОбработка = Ложь;
		Если СтрокаРеквизита.ВозможноСопоставление Тогда
			ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбновитьСоответствие", ЭтотОбъект, СтрокаСопоставления.Ссылка);
			ОбъектСопоставления = СтрокаСопоставления.Ссылка;
			Если РежимСопоставления <> "ПоВидам" И ЗначениеЗаполнено(СтрокаСопоставления.ИдентификаторКатегорииПоВидам) Тогда
				ОбъектСопоставления = СтрокаСопоставления.ВидНоменклатуры;
			КонецЕсли;
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("РеквизитОбъекта",                 СтрокаРеквизита.РеквизитОбъекта);
			ПараметрыОткрытия.Вставить("ОбъектСопоставления",             ОбъектСопоставления);
			ПараметрыОткрытия.Вставить("ТипЗначения",                     СтрокаРеквизита.ТипЗначения);
			ПараметрыОткрытия.Вставить("ИдентификаторКатегории",          СтрокаСопоставления.ИдентификаторКатегории);
			ПараметрыОткрытия.Вставить("ИдентификаторРеквизитаКатегории", СтрокаРеквизита.ИдентификаторРеквизитаКатегории);
			ПараметрыОткрытия.Вставить("ТолькоПросмотр",                  ЗапретРедактированиеРеквизитов);
			ПараметрыОткрытия.Вставить("ТолькоПросмотр",                  ЗапретРедактированиеРеквизитов);
			ПараметрыОткрытия.Вставить("СценарийИспользования",           СценарийИспользования);
			ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.СопоставлениеЗначенийСРубрикатором", ПараметрыОткрытия,,,,, ОбработчикЗакрытия);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "РеквизитыТипРеквизитаРубрикатора" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИдентификаторКатегории",          СтрокаСопоставления.ИдентификаторКатегории);
		ПараметрыОткрытия.Вставить("ИдентификаторРеквизитаКатегории", СтрокаРеквизита.ИдентификаторРеквизитаКатегории);
		ПараметрыОткрытия.Вставить("Категория",                       СтрокаСопоставления.Категория);
		ПараметрыОткрытия.Вставить("ТипРеквизитаРубрикатора",         СтрокаРеквизита.ТипРеквизитаРубрикатора);
		ПараметрыОткрытия.Вставить("ПредставлениеРеквизитаКатегории", СтрокаРеквизита.ПредставлениеРеквизитаКатегории);
		ПараметрыОткрытия.Вставить("СценарийИспользования",           СценарийИспользования);
		ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ПросмотрЗначений", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыРеквизитОбъектаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииРеквизитаОбъекта(ТекущиеДанные);
	
КонецПроцедуры

// Определяет, что тип значения содержит тип дополнительных значений свойств.
//
// Параметры:
//  ТипЗначения	 - ОписаниеТипов - передаваемые типы.
// 
// Возвращаемое значение:
//  Булево - результат проверки.
//
&НаКлиенте
Функция ТипЗначенияСодержитЗначенияСвойств(ТипЗначения)
	
	Результат = Ложь;
	
	Для Каждого ДоступныйТип Из ТипыЗначенийСвойств Цикл
		Если ТипЗначения.СодержитТип(ДоступныйТип.Значение) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РеквизитыПриАктивизацииСтроки(Элемент)
	
	ДанныеВыбора = Новый СписокЗначений;
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение списка выбора.
	Элементы.РеквизитыРеквизитОбъекта.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из СписокВыбораРеквизитов Цикл
		Если Реквизиты.НайтиСтроки(Новый Структура("РеквизитОбъекта", ЭлементСписка.Значение)).Количество()
			И ТекущиеДанные.РеквизитОбъекта <> ЭлементСписка.Значение Тогда
			Продолжить;
		КонецЕсли;
		Элементы.РеквизитыРеквизитОбъекта.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыРеквизитОбъектаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.Реквизиты.ТекущиеДанные.РеквизитОбъекта = Неопределено
		ИЛИ Не ЗначениеЗаполнено(Элементы.Реквизиты.ТекущиеДанные.РеквизитОбъекта) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьКатегорию(Команда)
	
	ТекущиеДанные = Элементы["Список" + РежимСопоставления].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли (РежимСопоставления = "ПоВидам" И ТекущиеДанные.ЭтоГруппа)  Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сопоставление категорий с группами недоступно'"));
		Возврат;
	КонецЕсли;
	
	ВыбратьКатегориюСервиса(ТекущиеДанные.ИдентификаторКатегории);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКатегорию(Команда)
	
	Если ЭтотОбъект.ТекущийЭлемент.ВыделенныеСтроки.Количество() <> 0 Тогда
		РежимУдаления = Истина;
		Отказ = Ложь;
		РаботаСНоменклатуройСлужебныйВызовСервера.ОчиститьСопоставлениеКатегорий(ЭтотОбъект.ТекущийЭлемент.ВыделенныеСтроки, Отказ);
		
		Если Не Отказ Тогда
			ЭтотОбъект.ТекущийЭлемент.Обновить();
			КатегорияРеквизитов = "";
			ОбновитьРеквизитыСервиса();
			Оповестить("ТорговыеПредложение_СопоставлениеНоменклатуры");
		КонецЕсли;
		
		Если ЭтоВыгрузкаВНациональныйКаталог
			И ЗначениеЗаполнено(Организация) Тогда
			ЗапуститьОбновлениеПроблемЗаполнения(ЭтотОбъект.ТекущийЭлемент.ВыделенныеСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизит(Команда)
	
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.РеквизитОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.РеквизитОбъекта = Неопределено;
	ПриИзмененииРеквизитаОбъекта(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСопоставленияНоменклатура(Команда)
	Элементы.ГруппаОбъектыСопоставления.Заголовок = Элементы[Команда.Имя].Заголовок;
	РежимСопоставления = "ПоНоменклатуре";
	ОбновитьКатегориюСервиса();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСопоставленияВидНоменклатуры(Команда)
	Элементы.ГруппаОбъектыСопоставления.Заголовок = Элементы[Команда.Имя].Заголовок;
	РежимСопоставления = "ПоВидам";
	КатегорииНоменклатуры.Свойство("КатегорияПоВидам", КатегорияСервиса);
	Элементы.КатегорияСервиса.Шрифт = Новый Шрифт;
	Элементы.КатегорияСервиса.ЦветТекста = Новый Цвет;
	ОбновитьРеквизитыСервиса();
	ТекущийЭлемент = Элементы.ГруппаОбъектыСопоставления;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСопоставленияРодитель(Команда)
	Элементы.ГруппаОбъектыСопоставления.Заголовок = Элементы[Команда.Имя].Заголовок;
	РежимСопоставления = "ПоИерархии";
	КатегорииНоменклатуры.Свойство("КатегорияПоИерархии", КатегорияСервиса);
	Элементы.КатегорияСервиса.Шрифт = Новый Шрифт;
	Элементы.КатегорияСервиса.ЦветТекста = Новый Цвет;
	ОбновитьРеквизитыСервиса();
	ТекущийЭлемент = Элементы.ГруппаОбъектыСопоставления;
КонецПроцедуры

&НаКлиенте
Процедура УбратьИзВыгрузки(Команда)
	
	ВыделенныеСтроки = Элементы.Проблемы.ВыделенныеСтроки;
	ВыбраноСтрок     = ВыделенныеСтроки.Количество();
	
	Если ВыбраноСтрок = 0 Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана номенклатура'"));
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = УдалитьЗаписиРегистра(УникальныйИдентификатор, Организация, ВыделенныеСтроки);
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ПослеУдаленияЗаписейРегистра(ДлительнаяОперация, ВыбраноСтрок);
		Возврат
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеУдаленияЗаписейРегистра", ЭтотОбъект, ВыбраноСтрок);
	ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьРеквизитыСервиса()
	
	ТекстЗаголовка = НСтр("ru = 'Сопоставление реквизитов номенклатуры'");
	ТребуетсяОбновлениеРеквизитов = Ложь;
	
	Если ПустаяСтрока(РежимСопоставления) Тогда
		КатегорияРеквизитов = "";
		Возврат;
	КонецЕсли;
	
	Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		ТекущиеДанные = КатегорииНоменклатуры;
	Иначе
		ТекущиеДанные = Элементы["Список" + РежимСопоставления].ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			КатегорияРеквизитов = "";
			Реквизиты.Очистить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ЗапретРедактированиеРеквизитов = Ложь;
	
	Если РежимСопоставления = "ПоНоменклатуре" Тогда
		
		// Для сопоставления по номенклатуре возможно заполнение данных по родителям (виду, группе).
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторКатегорииПоНоменклатуре) Тогда
			ПараметрыПроцедуры.Вставить("Ссылка", ТекущиеДанные.Ссылка);
			ПараметрыПроцедуры.Вставить("ИдентификаторКатегории", ТекущиеДанные.ИдентификаторКатегорииПоНоменклатуре);
			НоваяКатегорияРеквизитов = ТекущиеДанные.ИдентификаторКатегорииПоНоменклатуре;
			ТекстЗаголовка = НСтр("ru = 'Сопоставление реквизитов номенклатуры'");
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторКатегорииПоВидам) Тогда
			ПараметрыПроцедуры.Вставить("Ссылка", ТекущиеДанные.ВидНоменклатуры);
			ПараметрыПроцедуры.Вставить("ИдентификаторКатегории", ТекущиеДанные.ИдентификаторКатегорииПоВидам);
			НоваяКатегорияРеквизитов = ТекущиеДанные.ИдентификаторКатегорииПоВидам;
			ЗапретРедактированиеРеквизитов = Истина;
			ТекстЗаголовка = НСтр("ru = 'Сопоставленные реквизиты по виду номенклатуры'");
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторКатегорииПоИерархии) Тогда
			ПараметрыПроцедуры.Вставить("Ссылка", ТекущиеДанные.Родитель);
			ПараметрыПроцедуры.Вставить("ИдентификаторКатегории", ТекущиеДанные.ИдентификаторКатегорииПоИерархии);
			НоваяКатегорияРеквизитов = ТекущиеДанные.ИдентификаторКатегорииПоИерархии;
			ЗапретРедактированиеРеквизитов = Истина;
			ТекстЗаголовка = НСтр("ru = 'Сопоставленные реквизиты по группе номенклатуры'");
		Иначе
			НоваяКатегорияРеквизитов = "";
		КонецЕсли;
		
		Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
			ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1 (не обязательно)'"), ТекстЗаголовка);
		КонецЕсли;
		
	Иначе
		
		Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
			Если РежимСопоставления = "ПоВидам" Тогда
				ПараметрыПроцедуры.Вставить("Ссылка", ТекущиеДанные.ВидНоменклатуры);
				ПараметрыПроцедуры.Вставить("ИдентификаторКатегории", ТекущиеДанные.ИдентификаторКатегорииПоВидам);
				НоваяКатегорияРеквизитов = ТекущиеДанные.ИдентификаторКатегорииПоВидам;
				ТекстЗаголовка = НСтр("ru = 'Сопоставленные реквизиты по виду номенклатуры (не обязательно)'");
				ЗапретРедактированиеРеквизитов = Ложь;
			ИначеЕсли РежимСопоставления = "ПоИерархии" Тогда
				ПараметрыПроцедуры.Вставить("Ссылка", ТекущиеДанные.Родитель);
				ПараметрыПроцедуры.Вставить("ИдентификаторКатегории", ТекущиеДанные.ИдентификаторКатегорииПоИерархии);
				НоваяКатегорияРеквизитов = ТекущиеДанные.ИдентификаторКатегорииПоИерархии;
				ТекстЗаголовка = НСтр("ru = 'Сопоставленные реквизиты по группе номенклатуры (не обязательно)'");
				ЗапретРедактированиеРеквизитов = Ложь;
			КонецЕсли;
		Иначе 
			ПараметрыПроцедуры.Вставить("Ссылка", ТекущиеДанные.Ссылка);
			ПараметрыПроцедуры.Вставить("ИдентификаторКатегории", ТекущиеДанные.ИдентификаторКатегории);
			НоваяКатегорияРеквизитов = ТекущиеДанные.ИдентификаторКатегории;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КатегорияРеквизитов <> НоваяКатегорияРеквизитов Тогда
		КатегорияРеквизитов = НоваяКатегорияРеквизитов;
		ТребуетсяОбновлениеРеквизитов = Истина;
	КонецЕсли;
	
	Если Элементы.ГруппаРеквизитов.Заголовок <> ТекстЗаголовка Тогда 
		ТребуетсяОбновлениеРеквизитов = Истина;
		Элементы.Реквизиты.ТолькоПросмотр = ЗапретРедактированиеРеквизитов;
		Элементы.ГруппаРеквизитов.Заголовок = ТекстЗаголовка;
		Элементы.РеквизитыРеквизитОбъекта.КартинкаШапки =
			?(ЗапретРедактированиеРеквизитов, Новый Картинка, БиблиотекаКартинок.Изменить);
		Элементы.РеквизитыСоответствие.КартинкаШапки =
			?(ЗапретРедактированиеРеквизитов, Новый Картинка, БиблиотекаКартинок.Изменить);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КатегорияРеквизитов) Тогда
		Реквизиты.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Не ТребуетсяОбновлениеРеквизитов Тогда
		Возврат
	КонецЕсли;
	
	Если ИдентификаторЗаданияОбновленияРеквизитов <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗаданияОбновленияРеквизитов);
	КонецЕсли;
	
	Элементы.ГруппаСтраницРеквизитовСервиса.ТекущаяСтраница = Элементы.СтраницаДлительногоОжидания;
	
	ПараметрыПроцедуры.Вставить("ПолучитьСопоставленныеФормализованныеРеквизиты", ЭтоВыгрузкаВНациональныйКаталог);
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование       = НСтр("ru = '1С:Номенклатура. Получение реквизитов рубрикатора'");
	Задание.ИмяПроцедуры       = "РаботаСНоменклатурой.ПолучитьРеквизитыРубрикатора";
	Задание.ПараметрыПроцедуры = ПараметрыПроцедуры;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = Задание.Наименование;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперация = ВыполнитьЗаданиеВФоне(Задание, УникальныйИдентификатор);
	
	Если СписокВыбораРеквизитов.Количество() Тогда
		СписокВыбораРеквизитов.Очистить();
	КонецЕсли;
	
	ИдентификаторЗаданияОбновленияРеквизитов = ДлительнаяОперация.ИдентификаторЗадания;
	
	ПараметрыПроцедуры.Вставить("ИдентификаторЗадания", ИдентификаторЗаданияОбновленияРеквизитов);
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"ОбновитьРеквизитыСервисаЗавершение", ЭтотОбъект, ПараметрыПроцедуры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизитаОбъекта(ТекущиеДанные)
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.РеквизитОбъекта) Тогда
		ТекущиеДанные.РеквизитОбъекта = ПустаяСсылкаРеквизитаОбъекта;
	КонецЕсли;
	
	Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		
		Если РежимСопоставления = "ПоНоменклатуре" Тогда
			Ссылка = КатегорииНоменклатуры["Ссылка"];
		ИначеЕсли РежимСопоставления = "ПоВидам" Тогда
			Ссылка = КатегорииНоменклатуры["ВидНоменклатуры"];
		ИначеЕсли РежимСопоставления = "ПоИерархии" Тогда
			Ссылка = КатегорииНоменклатуры["Родитель"];
		КонецЕсли;
		
		ИдентификаторКатегории = КатегорииНоменклатуры["ИдентификаторКатегории" + РежимСопоставления];
		
		Отказ = Ложь;
		СохранитьСопоставлениеРеквизитов(Ссылка, ТекущиеДанные.РеквизитОбъекта,
		ТекущиеДанные.ИдентификаторРеквизитаКатегории, ТекущиеДанные.ПредставлениеРеквизитаКатегории,
		ИдентификаторКатегории, ТекущиеДанные.ТипЗначения, ТекущиеДанные.ФормализованныйРеквизит, Отказ);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.РеквизитОбъекта) Тогда
			ТекущиеДанные.Сопоставлено = Неопределено;
		КонецЕсли;
		
		ВозможноСопоставление = Ложь;
		ЗначениеСопоставления = "";
		Если ТипЗначенияСодержитЗначенияСвойств(Элементы.Реквизиты.ТекущиеДанные.ТипЗначения)
			И Элементы.Реквизиты.ТекущиеДанные.ТипРеквизитаРубрикатора = "Список" Тогда
			ВозможноСопоставление = Истина;
			ЗначениеСопоставления = СоответствиеЗначенийВСтроке(Ссылка, ТекущиеДанные.РеквизитОбъекта);
		КонецЕсли;
	Иначе
		ТекущийСписок = Элементы["Список" + РежимСопоставления];
		
		Если ЭтоВыгрузкаВНациональныйКаталог Тогда
			ФормализованныйРеквизит = ТекущиеДанные.ФормализованныйРеквизит;
		Иначе 
			ФормализованныйРеквизит = Неопределено;
		КонецЕсли;
		
		Отказ = Ложь;
		СохранитьСопоставлениеРеквизитов(ТекущийСписок.ТекущиеДанные.Ссылка, ТекущиеДанные.РеквизитОбъекта,
		ТекущиеДанные.ИдентификаторРеквизитаКатегории, ТекущиеДанные.ПредставлениеРеквизитаКатегории,
		ТекущийСписок.ТекущиеДанные.ИдентификаторКатегории, ТекущиеДанные.ТипЗначения, ФормализованныйРеквизит, Отказ);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.РеквизитОбъекта) Тогда
			ТекущиеДанные.Сопоставлено = Неопределено;
		КонецЕсли;
		
		ВозможноСопоставление = Ложь;
		ЗначениеСопоставления = "";
		Если ТипЗначенияСодержитЗначенияСвойств(Элементы.Реквизиты.ТекущиеДанные.ТипЗначения)
			И Элементы.Реквизиты.ТекущиеДанные.ТипРеквизитаРубрикатора = "Список" Тогда
			ВозможноСопоставление = Истина;
			ЗначениеСопоставления = СоответствиеЗначенийВСтроке(ТекущийСписок.ТекущаяСтрока, ТекущиеДанные.РеквизитОбъекта);
		КонецЕсли;
	КонецЕсли;

	Элементы.Реквизиты.ТекущиеДанные.ВозможноСопоставление = ВозможноСопоставление;
	Элементы.Реквизиты.ТекущиеДанные.Сопоставлено          = ЗначениеСопоставления;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	Элементы.ГруппаСтраницРеквизитовСервиса.ТекущаяСтраница = Элементы.СтраницаРеквизитов;
	
	Если Результат = Неопределено Тогда // отменено пользователем.
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		// Обновление реквизитов.
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)
			И КатегорияРеквизитов = ДополнительныеПараметры.ИдентификаторКатегории
			И ИдентификаторЗаданияОбновленияРеквизитов = ДополнительныеПараметры.ИдентификаторЗадания Тогда
			
			ЗаполнитьСопоставлениеРеквизитов(Результат.АдресРезультата);
		КонецЕсли;
		ИдентификаторЗаданияОбновленияРеквизитов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСопоставлениеРеквизитов(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Результат = Неопределено Тогда
		СписокВыбораРеквизитов.Очистить();
		Реквизиты.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Результат.СопоставленныеРеквизиты.Количество() Тогда
		СписокВыбораРеквизитов.Очистить();
		Элементы.РеквизитыРеквизитОбъекта.СписокВыбора.Очистить();
		Для Каждого СтрокаРеквизита Из Результат.СопоставленныеРеквизиты Цикл
			Если СписокВыбораРеквизитов.НайтиПоЗначению(СтрокаРеквизита.РеквизитОбъекта) = Неопределено Тогда
				СписокВыбораРеквизитов.Добавить(СтрокаРеквизита.РеквизитОбъекта, СтрокаРеквизита.Представление);
			КонецЕсли;
			СписокВыбораРеквизитов.СортироватьПоПредставлению();
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ОбязательныеРеквизиты) = Тип("Структура") Тогда
		РеквизитыРубрикатора = Результат.РеквизитыРубрикатора;
		Если ТипЗнч(РеквизитыРубрикатора) <> Тип("ТаблицаЗначений") Тогда
			Возврат;
		КонецЕсли;
		РеквизитыРубрикатора.Колонки.Добавить("ОбязательныйРеквизит", Новый ОписаниеТипов("Булево"));
		КатегорияКлюч = СтрШаблон("Категория%1", КатегорияРеквизитов);
		Если ОбязательныеРеквизиты.Свойство(КатегорияКлюч) Тогда
			Атрибуты = ОбязательныеРеквизиты[КатегорияКлюч];
		Иначе 
			Атрибуты = Неопределено;
		КонецЕсли;
		Если ТипЗнч(Атрибуты) = Тип("Массив") Тогда
			Для каждого Атрибут Из Атрибуты Цикл
				Если ТипЗнч(Атрибут) <> Тип("Структура") 
					ИЛИ НЕ Атрибут.Свойство("ИдентификаторРеквизитаКатегории") 
					ИЛИ НЕ Атрибут.Свойство("ФормализованныйРеквизит")Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(Атрибут.ИдентификаторРеквизитаКатегории) Тогда
					КлючПоиска         = Новый Структура("ИдентификаторРеквизитаКатегории", Атрибут.ИдентификаторРеквизитаКатегории);
					НайденныеРеквизиты = РеквизитыРубрикатора.НайтиСтроки(КлючПоиска);
				ИначеЕсли ЗначениеЗаполнено(Атрибут.ФормализованныйРеквизит) Тогда
					КлючПоиска         = Новый Структура("ФормализованныйРеквизит", Атрибут.ФормализованныйРеквизит);
					НайденныеРеквизиты = РеквизитыРубрикатора.НайтиСтроки(КлючПоиска);
				Иначе
					НайденныеРеквизиты = Новый Массив;
				КонецЕсли;
				Если НайденныеРеквизиты.Количество() > 0 Тогда
					Для каждого ОписаниеРеквизита Из НайденныеРеквизиты Цикл
						ОписаниеРеквизита.ОбязательныйРеквизит = Истина;
						РеквизитыРубрикатора.Сдвинуть(ОписаниеРеквизита, - РеквизитыРубрикатора.Индекс(ОписаниеРеквизита));
						Если НЕ ЗначениеЗаполнено(ОписаниеРеквизита.ТипРеквизитаРубрикатора) 
							И Атрибут.Свойство("ТипРеквизитаРубрикатора") Тогда
							ОписаниеРеквизита.ТипРеквизитаРубрикатора = Атрибут.ТипРеквизитаРубрикатора;
						КонецЕсли;
						Если ЗначениеЗаполнено(Атрибут.ФормализованныйРеквизит) 
							И ЗначениеЗаполнено(Атрибут.ПредставлениеРеквизитаКатегории) Тогда
							ОписаниеРеквизита.ПредставлениеРеквизитаКатегории = Атрибут.ПредставлениеРеквизитаКатегории;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЗначениеЗаполнено(Атрибут.ФормализованныйРеквизит) Тогда
					ОписаниеРеквизита = РеквизитыРубрикатора.Вставить(0);
					ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, Атрибут);
					ОписаниеРеквизита.ОбязательныйРеквизит = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// найти и удалить необязательные для заполнения формализованные реквизиты
		НеОбязательныеРеквизиты = РеквизитыРубрикатора.НайтиСтроки(Новый Структура("ОбязательныйРеквизит", Ложь));
		Для каждого НеОбязательныйРеквизит Из НеОбязательныеРеквизиты Цикл
			Если ЗначениеЗаполнено(НеОбязательныйРеквизит.ФормализованныйРеквизит) Тогда
				РеквизитыРубрикатора.Удалить(НеОбязательныйРеквизит);
			КонецЕсли;
		КонецЦикла;
		Реквизиты.Загрузить(РеквизитыРубрикатора);
	Иначе 
		Реквизиты.Загрузить(Результат.РеквизитыРубрикатора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьЗаданиеВФоне(Знач Задание, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры, Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегориюСервиса(ИдентификаторКатегории, Оповещение = Неопределено)
	
	ОчиститьСообщения();
	
	Если Оповещение = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВыбратьКатегориюСервисаПродолжение", ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыФормыВыбора = РаботаСНоменклатуройКлиент.ПараметрыФормыЗагрузкиКатегорий();
	ПараметрыФормыВыбора.СкрыватьОписаниеКатегорий = Истина;
	ПараметрыФормыВыбора.ОдиночныйРежимВыбора      = Истина;
	ПараметрыФормыВыбора.РежимВыбораКатегорий      = Истина;
	Если СценарийИспользования = "ПубликацияТорговыхПредложенийБезКонтекста" Тогда
		ПараметрыФормыВыбора.ЗаголовокФормы = НСтр("ru = 'Выбор категории товаров 1С:Бизнес-сеть'");
	ИначеЕсли СценарийИспользования = "ПубликацияТорговыхПредложений" Тогда
		ПараметрыФормыВыбора.ЗаголовокФормы = НСтр("ru = 'Выбор категории товаров 1С:Бизнес-сеть'");
	ИначеЕсли СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		ПараметрыФормыВыбора.ЗаголовокФормы = НСтр("ru = 'Выбор категории рубрикатора 1С:Номенклатура'");
	ИначеЕсли СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		ПараметрыФормыВыбора.ЗаголовокФормы = НСтр("ru = 'Выбор категории рубрикатора 1С:Номенклатура'");
	Иначе
		ПараметрыФормыВыбора.ЗаголовокФормы = "";
	КонецЕсли;
	Если Не ПустаяСтрока(ИдентификаторКатегории) Тогда
		ПараметрыФормыВыбора.ИдентификаторыВыбранныхКатегорий.Добавить(ИдентификаторКатегории);
	КонецЕсли;
	
	Если ЭтоВыгрузкаВНациональныйКаталог И ТипЗнч(ОбязательныеРеквизиты) = Тип("Структура") И ОбязательныеРеквизиты.Количество() > 0 Тогда
		Для каждого Категория Из ОбязательныеРеквизиты Цикл
			ПараметрыФормыВыбора.ИдентификаторыВыбранныхКатегорий.Вставить(0, СтрЗаменить(Категория.Ключ, "Категория", ""));
		КонецЦикла;
		ПараметрыФормыВыбора.ЭтоВыгрузкаВНациональныйКаталог = Истина;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаКатегорий", ПараметрыФормыВыбора,,,,, Оповещение,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегориюСервисаПродолжение(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписок = ЭтотОбъект.ТекущийЭлемент;
	
	Если ЭлементСписок.ВыделенныеСтроки.Количество() <> 0 И Результат.ВыбранныеОбъекты.Количество() > 0 Тогда
		
		Отказ = Ложь;
		РаботаСНоменклатуройСлужебныйВызовСервера.ЗаписатьЗначениеСопоставления(ЭлементСписок.ВыделенныеСтроки, Результат.ВыбранныеОбъекты[0], Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ЭлементСписок.Обновить();
		КатегорияРеквизитов = "";
		ОбновитьРеквизитыСервиса();
		
	КонецЕсли;
	
	Оповестить("ТорговыеПредложение_СопоставлениеНоменклатуры");
	
	Если ЭтоВыгрузкаВНациональныйКаталог И ЗначениеЗаполнено(Организация) Тогда
		ЗапуститьОбновлениеПроблемЗаполнения(ЭлементСписок.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоответствие(Результат, ПараметрыОбработчика) Экспорт
	
	// Обновление данных по строке.
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	ТекущийСписок = Элементы["Список" + РежимСопоставления];
	ТекущиеДанныеСписка = ТекущийСписок.ТекущиеДанные;
	
	ОбъектСопоставления = ТекущийСписок.ТекущаяСтрока;
	Если РежимСопоставления <> "ПоВидам" И ЗначениеЗаполнено(ТекущиеДанныеСписка.ИдентификаторКатегорииПоВидам) Тогда
		ОбъектСопоставления = ТекущиеДанныеСписка.ВидНоменклатуры;
	КонецЕсли;
	
	ТекущиеДанные.Сопоставлено = СоответствиеЗначенийВСтроке(ОбъектСопоставления, ТекущиеДанные.РеквизитОбъекта);
	
КонецПроцедуры

&НаСервере
Функция СоответствиеЗначенийВСтроке(ОбъектСопоставления, РеквизитОбъекта)
	
	// Заполнение списка набора реквизитов.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектСопоставления", ОбъектСопоставления);
	Запрос.УстановитьПараметр("РеквизитОбъекта", РеквизитОбъекта);
	
	РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры(Запрос);
	Если ПустаяСтрока(Запрос.Текст)
		И ПодсистемаТорговыеПредложенияСуществует Тогда
		МодульТорговыеПредложенияПереопределяемый = МодульТорговыеПредложенияПереопределяемый();
		МодульТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры(Запрос);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = РаботаСНоменклатуройСлужебный.ТекстКоличествоСопоставленныхЗначений(
		Выборка.КоличествоСопоставленныхРеквизитов, Выборка.КоличествоЗначенийРеквизита);

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипЗначенияРеквизита(Знач РеквизитОбъекта)
	
	// Обновление типа для текущей строки.
	СписокРеквизитов = Новый Соответствие;
	РаботаСНоменклатуройПереопределяемый.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(СписокРеквизитов);
	
	Если НЕ СписокРеквизитов.Количество()
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		МодульТорговыеПредложенияПереопределяемый = МодульТорговыеПредложенияПереопределяемый();
		МодульТорговыеПредложенияПереопределяемый.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(СписокРеквизитов);
	КонецЕсли;
	
	СвойстваРеквизита = СписокРеквизитов.Получить(РеквизитОбъекта);
	Если СвойстваРеквизита <> Неопределено Тогда
		ТипЗначения = СвойстваРеквизита.ТипЗначения;
	Иначе
		ТипЗначения = РеквизитОбъекта.ТипЗначения;
	КонецЕсли;
	
	Возврат ТипЗначения
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьСопоставлениеРеквизитов(Знач ВидНоменклатуры, Знач РеквизитОбъекта, Знач ИдентификаторРеквизитаКатегории,
	Знач ПредставлениеРеквизитаКатегории, Знач ИдентификаторКатегории, ТипЗначения, Знач ФормализованныйРеквизит = Неопределено, Отказ)
	
	Если ЗначениеЗаполнено(ФормализованныйРеквизит) Тогда
		Попытка
			СоответствиеРеквизитов  = РегистрыСведений.СоответствиеРеквизитовБизнесСеть.СоздатьНаборЗаписей();
			СоответствиеРеквизитов.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
			Если ЗначениеЗаполнено(РеквизитОбъекта) Тогда
				СоответствиеРеквизитов.Отбор.РеквизитОбъекта.Установить(РеквизитОбъекта);
				ЗаписьРегистра = СоответствиеРеквизитов.Добавить();
				ЗаписьРегистра.ОбъектСопоставления             = ВидНоменклатуры;
				ЗаписьРегистра.РеквизитОбъекта                 = РеквизитОбъекта;
				ЗаписьРегистра.ФормализованныйРеквизит         = ФормализованныйРеквизит;
				ЗаписьРегистра.ПредставлениеРеквизитаКатегории = ПредставлениеРеквизитаКатегории;
				ТипЗначения = ТипЗначенияРеквизита(РеквизитОбъекта);
			Иначе 
				СоответствиеРеквизитов.Отбор.ФормализованныйРеквизит.Установить(ФормализованныйРеквизит);
			КонецЕсли;
			СоответствиеРеквизитов.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка записи сопоставления:'") + " " + ИнформацияОбОшибке().Описание;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитОбъекта) Тогда
		
		НачатьТранзакцию();
		Попытка
			
			БлокировкаРеквизитов = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаРеквизитов.Добавить("РегистрСведений.СоответствиеРеквизитовБизнесСеть");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("ОбъектСопоставления", ВидНоменклатуры);
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторРеквизитаКатегории", ИдентификаторРеквизитаКатегории);
			БлокировкаРеквизитов.Заблокировать();
			
			// Удаление всех старых записей для идентификатора реквизита категории.
			Если ЗначениеЗаполнено(ИдентификаторРеквизитаКатегории) Тогда
				НаборЗаписей = РегистрыСведений.СоответствиеРеквизитовБизнесСеть.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
				НаборЗаписей.Отбор.ИдентификаторРеквизитаКатегории.Установить(ИдентификаторРеквизитаКатегории);
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.СоответствиеРеквизитовБизнесСеть.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ОбъектСопоставления = ВидНоменклатуры;
			МенеджерЗаписи.РеквизитОбъекта = РеквизитОбъекта;
			МенеджерЗаписи.ИдентификаторРеквизитаКатегории = ИдентификаторРеквизитаКатегории;
			МенеджерЗаписи.ПредставлениеРеквизитаКатегории = ПредставлениеРеквизитаКатегории;
			МенеджерЗаписи.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Ошибка записи сопоставления:'") + " " + ИнформацияОбОшибке().Описание;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
			Возврат;
			
		КонецПопытки;
		
		// Обновление типа для текущей строки.
		ТипЗначения = ТипЗначенияРеквизита(РеквизитОбъекта);
		
	Иначе
		
		ТипЗначения = Неопределено;
		
		НачатьТранзакцию();
		Попытка
			
			БлокировкаРеквизитов = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаРеквизитов.Добавить("РегистрСведений.СоответствиеРеквизитовБизнесСеть");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("ОбъектСопоставления",             ВидНоменклатуры);
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторРеквизитаКатегории", ИдентификаторРеквизитаКатегории);
			БлокировкаРеквизитов.Заблокировать();
			
			БлокировкаЗначений = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаЗначений.Добавить("РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("ОбъектСопоставления", ВидНоменклатуры);
			ЭлементБлокировки.УстановитьЗначение("РеквизитОбъекта",     РеквизитОбъекта);
			БлокировкаЗначений.Заблокировать();
			
			// Очистка сопоставления реквизитов.
			НаборЗаписей = РегистрыСведений.СоответствиеРеквизитовБизнесСеть.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
			НаборЗаписей.Отбор.ИдентификаторРеквизитаКатегории.Установить(ИдентификаторРеквизитаКатегории);
			НаборЗаписей.Записать(Истина);
						
			// Очистка сопоставления значений реквизитов.
			Для Каждого ЗаписьРеквизита Из НаборЗаписей Цикл
				НаборЗаписейЗначений = РегистрыСведений.СоответствиеЗначенийРеквизитовБизнесСеть.СоздатьНаборЗаписей();
				НаборЗаписейЗначений.Отбор.ОбъектСопоставления.Значение = ВидНоменклатуры;
				НаборЗаписейЗначений.Отбор.ОбъектСопоставления.Использование = Истина;
				НаборЗаписейЗначений.Отбор.РеквизитОбъекта.Значение = ЗаписьРеквизита.РеквизитОбъекта;
				НаборЗаписейЗначений.Отбор.РеквизитОбъекта.Использование = Истина;
				НаборЗаписейЗначений.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Ошибка очистки сопоставления:'") + " " + ИнформацияОбОшибке().Описание;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Надпись <Укажите реквизит>.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыРеквизитОбъекта.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.РеквизитОбъекта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретРедактированиеРеквизитов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Укажите реквизит>'"));
	
	// Надпись <Автоматически>.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыСоответствие.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.РеквизитОбъекта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.ВозможноСопоставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Автоматически>'"));
	
	// Подчиненные по группам и видам номенклатуры (выделение серым).
	ЭлементУсловногоОформления = СписокПоНоменклатуре.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Категория");
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КатегорияПоНоменклатуре");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,, Истина));
	
	// Переопределение значений выводе реквизитов сопоставления.
	СписокРеквизитов = Новый Соответствие;
	РаботаСНоменклатуройПереопределяемый.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(СписокРеквизитов);
	Если НЕ СписокРеквизитов.Количество() 
		И ПодсистемаТорговыеПредложенияСуществует Тогда
		МодульТорговыеПредложенияПереопределяемый = МодульТорговыеПредложенияПереопределяемый();
		МодульТорговыеПредложенияПереопределяемый.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(СписокРеквизитов);
	КонецЕсли;
	
	Для Каждого ДоступныйРеквизит Из СписокРеквизитов Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыРеквизитОбъекта.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.РеквизитОбъекта");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ДоступныйРеквизит.Значение.ПутьКДанным;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ДоступныйРеквизит.Значение.Представление);
	КонецЦикла;
	
	Если СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроблемыОписаниеГиперссылка.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проблемы.ЭтоОшибка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроблемыОписаниеГиперссылка.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проблемы.ЭтоОшибка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроблемыОписаниеБезГиперссылки.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проблемы.ЭтоОшибка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроблемыОписаниеБезГиперссылки.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проблемы.ЭтоОшибка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	КонецЕсли;
	
	Если ЭтоВыгрузкаВНациональныйКаталог Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Реквизиты.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.ОбязательныйРеквизит");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.РеквизитОбъекта");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыРеквизитОбъекта.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.ОбязательныйРеквизит");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.РеквизитОбъекта");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимСопоставления(Интерактивно = Ложь, ТекущаяСтрока = Неопределено)
	
	Элементы.ГруппаРежимПоВидам.ЦветФона        = ?(РежимСопоставления = "ПоВидам", ЦветаСтиля.ЦветФонаШапкиТаблицы, ЦветаСтиля.ЦветФонаФормы);
	Элементы.ГруппаРежимПоИерархии.ЦветФона     = ?(РежимСопоставления = "ПоИерархии", ЦветаСтиля.ЦветФонаШапкиТаблицы, ЦветаСтиля.ЦветФонаФормы);
	Элементы.ГруппаРежимПоНоменклатуре.ЦветФона = ?(РежимСопоставления = "ПоНоменклатуре", ЦветаСтиля.ЦветФонаШапкиТаблицы, ЦветаСтиля.ЦветФонаФормы);
	
	Элементы.РежимПоВидам.Гиперссылка        = ?(РежимСопоставления <> "ПоВидам", Истина, Ложь);
	Элементы.РежимПоИерархии.Гиперссылка     = ?(РежимСопоставления <> "ПоИерархии", Истина, Ложь);
	Элементы.РежимПоНоменклатуре.Гиперссылка = ?(РежимСопоставления <> "ПоНоменклатуре", Истина, Ложь);
	
	Если РежимСопоставления = "ПоВидам" Тогда
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоВидам;
	ИначеЕсли РежимСопоставления = "ПоИерархии" Тогда
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоИерархии;
	ИначеЕсли РежимСопоставления = "ПоНоменклатуре" Тогда
		
		Если Не Интерактивно Тогда
			// Очистка отбора.
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
				"ВидНоменклатуры", Неопределено, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
				"Родитель", Неопределено, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
			Элементы.ГруппаОтбор.Видимость = Ложь;
		КонецЕсли;
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоНоменклатуре;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		Элементы["Список" + РежимСопоставления].ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Если Интерактивно Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РаботаСНоменклатурой",
			"СопоставлениеНоменклатуры\РежимСопоставления", РежимСопоставления);
	КонецЕсли;
	
	Если РежимСопоставления = "ПоВидам" И Элементы.ДлительнаяОперацияПоВидам.Видимость = Истина Тогда
		ДлительнаяОперацияВидыНоменклатуры = ПолучениеСпискаВидовНоменклатуры(УникальныйИдентификатор, Организация, Интерактивно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтменитьОтборНажатие(Элемент)
	
	РежимСопоставления = "ПоНоменклатуре";
	УстановитьРежимСопоставления(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНоменклатуры(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		ЗапуститьПроверкуГотовностиНоменклатурнойПозиции(ДополнительныеПараметры);
	ИначеЕсли СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры);
		ЗапуститьОбновлениеПроблемЗаполнения(МассивСсылок, "ПоНоменклатуре");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуКРаботеВРежимеВыгрузкиНоменклатуры(ИспользоватьИерархию, ИспользоватьВидыНоменклатуры, Отказ)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Настройка для выгрузки не определена. Форма не может быть открыта.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат
	КонецЕсли;
	
	ТаблицаНоменклатура = РаботаСНоменклатурой.ИмяТаблицыПоТипу(Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип);
	СвойстваСписка      = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СписокСостояний     = РаботаСНоменклатуройСлужебный.СостоянияВыгружаемаяНоменклатура();
	ЛимитЗаписей        = РаботаСНоменклатуройСлужебныйКлиентСервер.РазмерПорции();
	НастройкаВыгрузки   = РаботаСНоменклатуройСлужебный.НастройкаВыгрузкиНоменклатуры(Организация);
	НастройкаВыгрузки.Вставить("ЛимитЗаписей", ЛимитЗаписей);
	
	Если ТаблицаНоменклатура = "" Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'Не удалось определить имя таблицы определяемого типа ""Номенклатура"". Форма не может быть открыта.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперацияПроблемыЗаполнения = ОбновлениеПроблемЗаполнения(УникальныйИдентификатор, НастройкаВыгрузки);
	
	СвойстваСписка.ТекстЗапроса = ДобавитьВЗапросУсловиеНоменклатураВыгружается(СписокПоНоменклатуре.ТекстЗапроса);
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокПоНоменклатуре, СвойстваСписка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоНоменклатуре, "Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоНоменклатуре, "СписокСостояний", СписокСостояний);
	
	Если ИспользоватьИерархию = Истина Тогда
		СвойстваСписка.ТекстЗапроса = ДобавитьВЗапросУсловиеНоменклатураВыгружается(СписокПоИерархии.ТекстЗапроса, Истина);
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокПоИерархии, СвойстваСписка);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоИерархии, "Организация", Организация);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоИерархии, "СписокСостояний", СписокСостояний);
	КонецЕсли;
	
	Если ИспользоватьВидыНоменклатуры Тогда
		ВидыНоменклатуры = Обработки.РаботаСНоменклатурой.ВидыНоменклатурыКВыгрузке(Организация, СписокСостояний);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоВидам, "Ссылка", ВидыНоменклатуры,
					ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СостоянияВыгрузкиНоменклатуры.ОписаниеОшибки КАК Описание,
	|	СостоянияВыгрузкиНоменклатуры.РасшифровкаПроблемы КАК РасшифровкаПроблемы,
	|	ИСТИНА КАК ЭтоОшибка
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = СостоянияВыгрузкиНоменклатуры.Номенклатура
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.СодержитПроблемы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка,
	|	&Исправлено,
	|	"""",
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = СостоянияВыгрузкиНоменклатуры.Номенклатура
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.ОжидаетВыгрузки)
	|	И СостоянияВыгрузкиНоменклатуры.ДатаСостояния > &ДатаОткрытияФормы";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Номенклатура", ТаблицаНоменклатура);
	
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапроса;
	СвойстваСписка.ОсновнаяТаблица              = ТаблицаНоменклатура;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Проблемы, СвойстваСписка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Проблемы, "Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Проблемы, "ДатаОткрытияФормы", ТекущаяДата());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Проблемы, "Исправлено", НСтр("ru = 'Исправлено'"));
	
	ПояснениеКФорме = Новый Массив;
	ПояснениеКФорме.Добавить(НСтр("ru = 'Выгрузка номенклатуры в электронные каталоги '"));
	ПояснениеКФорме.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '1С:Номенклатура'"),,,, РаботаСНоменклатурой.ГиперссылкаНаПромоСайтНоменклатура()));
	ПояснениеКФорме.Добавить(НСтр("ru = ' и '"));
	ПояснениеКФорме.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Национальный каталог'"),,,, РаботаСНоменклатурой.ГиперссылкаНаСайтНациональногоКаталога()));
	ПояснениеКФорме.Добавить(НСтр("ru = ' возможна только при условии заполнения обязательных сведений о товаре – это наименование, '"));
	ПояснениеКФорме.Добавить(НСтр("ru = 'единица измерения, ставка НДС, артикул либо штрихкод(ы), а для выгрузки в Национальный '"));
	ПояснениеКФорме.Добавить(НСтр("ru = 'каталог так же необходимо сопоставить номенклатуру с рубрикатором 1С:Номенклатура.'"));
	ПояснениеКФорме.Добавить(Символы.ПС);
	ПояснениеКФорме.Добавить(НСтр("ru = 'Заполните недостающую информацию и номенклатура станет доступной для выгрузки.'"));
	
	Элементы.ПояснениеКФорме.Заголовок = Новый ФорматированнаяСтрока(ПояснениеКФорме);
	Элементы.Закрыть.Видимость = Истина;
	Элементы.ГруппаШапка.Видимость = Истина;
	Элементы.СтраницыПодготовкаКВыгрузке.Видимость = Истина;
	
	Элементы.Переместить(Элементы.ГруппаРазметки, Элементы.СопоставлениеСРубрикатором);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВЗапросУсловиеНоменклатураВыгружается(ТекстЗапроса, ПоРодителю = Ложь)

	СхемаЗапроса        = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ОсновнойЗапрос      = СхемаЗапроса.ПакетЗапросов[0];
	КолонкаНоменклатура = ОсновнойЗапрос.Колонки.Найти("Ссылка");
	ПолеНоменклатура    = Строка(ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаНоменклатура)]);
	ИмяОсновнойТаблицы  = СтрЗаменить(ПолеНоменклатура, ".Ссылка", "");
	ОсновнаяТаблица     = ОсновнойЗапрос.Операторы[0].Источники.НайтиПоПсевдониму(ИмяОсновнойТаблицы);
	ОсновнаяТаблица.Источник.Псевдоним = "СправочникНоменклатура";
	ПолеНоменклатура    = "СправочникНоменклатура.Ссылка";
	УсловиеВыгружаемая  = "
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|			ГДЕ
	|				СостоянияВыгрузкиНоменклатуры.Номенклатура%1 = %2
	|				И СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|				И СостоянияВыгрузкиНоменклатуры.Состояние В (&СписокСостояний))";
	ПолеСоединения      = ?(ПоРодителю = Истина, ".Родитель", "");
	УсловиеВыгружаемая  = СтрШаблон(УсловиеВыгружаемая, ПолеСоединения, ПолеНоменклатура);
	ОсновнойЗапрос.Операторы[0].Отбор.Добавить(УсловиеВыгружаемая);
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();

КонецФункции

&НаСервереБезКонтекста
Функция ОбновлениеПроблемЗаполнения(Знач УникальныйИдентификатор, Знач НастройкаВыгрузки)
	
	НаименованиеЗадания = НСтр("ru = 'Работа с номенклатурой. Проверка готовности номенклатуры к выгрузке'");
	ИмяМетода           = "РаботаСНоменклатуройСлужебный.ПроверитьГотовностьНоменклатурыКВыгрузке";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0.4;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, НастройкаВыгрузки);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбновлениеПроблемЗаполнения(МассивСсылок, ПараметрРежим = "")
	
	Если ПараметрРежим = "" Тогда
		ПараметрРежим = РежимСопоставления;
	КонецЕсли;
	
	НастройкаВыгрузки.Вставить("МассивСсылок", МассивСсылок);
	НастройкаВыгрузки.Вставить("РежимСопоставления", ПараметрРежим);
	ДлительнаяОперацияПроблемыЗаполнения = ОбновлениеПроблемЗаполнения(УникальныйИдентификатор, НастройкаВыгрузки);
	ПроверитьСтатусОперацииПроблемыЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусОперацииПроблемыЗаполнения()
	Если ТипЗнч(ДлительнаяОперацияПроблемыЗаполнения) = Тип("Структура") Тогда
		Если ДлительнаяОперацияПроблемыЗаполнения.Статус = "Выполнено" Тогда
			ПослеОбновленияПроблемЗаполнения(ДлительнаяОперацияПроблемыЗаполнения, Неопределено);
		Иначе
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеОбновленияПроблемЗаполнения", ЭтотОбъект);
			ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
			ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОЗавершении;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияПроблемыЗаполнения, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияПроблемЗаполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СценарийИспользования <> "ВыгрузкаНоменклатуры" Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполняется" И Результат.Прогресс <> Неопределено Тогда
		ЗаголовокПрогресс = НСтр("ru = 'Выполняется проверка заполнения данных'") + Символы.ПС 
			+ СтрШаблон(НСтр("ru = 'Проверено %1'"), Результат.Прогресс.Процент);
		Элементы.НадписьПроблемыРасчет.Заголовок = ЗаголовокПрогресс;
		Возврат
	ИначеЕсли НЕ (Результат.Статус = "Выполнено" 
		И Результат.Свойство("АдресРезультата")
		И ТипЗнч(Результат.АдресРезультата) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)) Тогда 
		Возврат
	КонецЕсли;
	
	ОбновитьЗакладкуЗаполнениеДанных(ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	
	ДлительнаяОперацияПроблемыЗаполнения = Неопределено;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеИзСтрокиJSON(Значение)
	
	#Если ВебКлиент Тогда
		Возврат ПрочитатьJSONНаСервере(Значение);
	#Иначе
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Значение);
			Результат = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			Возврат Результат;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	#КонецЕсли
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьJSONНаСервере(Знач Значение)
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Возврат Результат;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаСервере
Процедура ПодготовитьФормуКРаботеВРежимеУстранениеПроблемЗаполнения(ИспользоватьИерархию, ИспользоватьВидыНоменклатуры, Отказ, КлючЗаписи)
	
	Организация    = КлючЗаписи.Организация;
	СхемаЗапроса   = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(СписокПоНоменклатуре.ТекстЗапроса);
	ОсновнойЗапрос = СхемаЗапроса.ПакетЗапросов[0];
	ВсегоКолонок   = ОсновнойЗапрос.Колонки.Количество();
	Для Сч = 1 По ВсегоКолонок Цикл
		Псевдоним = ОсновнойЗапрос.Колонки[Сч-1].Псевдоним;
		Если Псевдоним = "Ссылка"
			ИЛИ Псевдоним = "Родитель"
			ИЛИ Псевдоним = "ВидНоменклатуры" Тогда
			Поле = Строка(ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля[Сч-1]);
			Если Псевдоним = "Ссылка" Тогда
				ОсновнойЗапрос.Операторы[0].Отбор.Добавить(СтрШаблон("%1 = &Номенклатура", Поле));
			КонецЕсли;
			ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля.Добавить(СтрШаблон("ПРЕДСТАВЛЕНИЕ(%1)", Поле));
			ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = СтрШаблон("%1Представление", Псевдоним);
		КонецЕсли;
	КонецЦикла;
	
	ОсновнойЗапрос.Операторы[0].ВыраженияОтбораКомпоновкиДанных.Очистить();
	ОсновнойЗапрос.Характеристики.Очистить();
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "ВЫБРАТЬ
	|	СостоянияВыгрузкиНоменклатуры.РасшифровкаПроблемы КАК РасшифровкаПроблемы
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Номенклатура = &Номенклатура
	|	И СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	
	Запрос    = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Номенклатура", КлючЗаписи.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", КлючЗаписи.ХарактеристикаНоменклатуры);
	Результат = Запрос.ВыполнитьПакет();
	Выборка   = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		КатегорииНоменклатуры = Новый Структура;
		Для каждого КолонкаРезультата Из Результат[0].Колонки Цикл
			КатегорииНоменклатуры.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
		КонецЦикла;
		Элементы.ОбъектСопоставленияНоменклатура.Заголовок = СтрШаблон(НСтр("ru = 'Номенклатура: %1'"), Выборка.СсылкаПредставление);
		Элементы.ОбъектСопоставленияРодитель.Заголовок = СтрШаблон(НСтр("ru = 'Иерархия: %1'"), Выборка.РодительПредставление);
		Элементы.ОбъектСопоставленияВидНоменклатуры.Заголовок = СтрШаблон(НСтр("ru = 'Вид номенклатуры: %1'"), Выборка.ВидНоменклатурыПредставление);
		
		Элементы.ОбъектСопоставленияРодитель.Видимость = ЗначениеЗаполнено(Выборка.Родитель) И ИспользоватьИерархию;
		Элементы.ОбъектСопоставленияВидНоменклатуры.Видимость = ЗначениеЗаполнено(Выборка.ВидНоменклатуры) И ИспользоватьВидыНоменклатуры;
		
		Элементы.ГруппаОбъектыСопоставления.Заголовок = Элементы.ОбъектСопоставленияНоменклатура.Заголовок;
	Иначе 
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	Выборка = Результат[1].Выбрать();
	Если Выборка.Следующий() Тогда
		РасшифровкаПроблемы = Выборка.РасшифровкаПроблемы;
	Иначе 
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	Расшифровка = ЗначениеИзСтрокиJSON(РасшифровкаПроблемы);
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	НастройкаВыгрузки  = РаботаСНоменклатуройСлужебный.НастройкаВыгрузкиНоменклатуры(Организация);
	КатегорияСервиса   = КатегорииНоменклатуры.КатегорияПоНоменклатуре;
	РежимСопоставления = "ПоНоменклатуре";
	ПояснениеКФорме    = Новый Массив;
	
	ПояснениеКФорме.Добавить(НСтр("ru = 'Заполните недостающую информацию по номенклатуре '"));
	ПояснениеКФорме.Добавить(Новый ФорматированнаяСтрока(КатегорииНоменклатуры.СсылкаПредставление, Новый Шрифт(,, Истина, Истина)));
	ПояснениеКФорме.Добавить(НСтр("ru = ' для выгрузки в электронные каталоги '"));
	ПояснениеКФорме.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '1С:Номенклатура'"),,,, РаботаСНоменклатурой.ГиперссылкаНаПромоСайтНоменклатура()));
	ПояснениеКФорме.Добавить(НСтр("ru = ' и '"));
	ПояснениеКФорме.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Национальный каталог'"),,,, РаботаСНоменклатурой.ГиперссылкаНаСайтНациональногоКаталога()));
	
	Элементы.Переместить(Элементы.ГруппаРеквизитов, Элементы.ГруппаСопоставлениеРеквизитов);
	
	Элементы.ПояснениеКФорме.Заголовок = Новый ФорматированнаяСтрока(ПояснениеКФорме);
	Элементы.Закрыть.Видимость = Истина;
	Элементы.ГруппаШапка.Видимость = Истина;
	Элементы.ГруппаРазметки.Видимость = Ложь;
	Элементы.ГруппаРеквизитов.Заголовок = НСтр("ru = 'Сопоставление реквизитов номенклатуры (не обязательно)'");
	Элементы.ГруппаРеквизитов.ЦветТекстаЗаголовка = ЦветаСтиля.ПоясняющийТекст;
	Элементы.ГруппаУстранениеПроблемПоНоменклатуре.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКатегорииСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыСопоставления = Новый Массив;
	Если ДополнительныеПараметры = "ПоНоменклатуре" Тогда
		ОбъектыСопоставления.Добавить(КатегорииНоменклатуры["Ссылка"]);
	ИначеЕсли ДополнительныеПараметры = "ПоВидам" Тогда
		ОбъектыСопоставления.Добавить(КатегорииНоменклатуры["ВидНоменклатуры"]);
	ИначеЕсли ДополнительныеПараметры = "ПоИерархии" Тогда
		ОбъектыСопоставления.Добавить(КатегорииНоменклатуры["Родитель"]);
	Иначе 
		Возврат;
	КонецЕсли;
	
	ВыбраннаяКатегория = Результат.ВыбранныеОбъекты[0];
	
	Отказ = Ложь;
	РаботаСНоменклатуройСлужебныйВызовСервера.ЗаписатьЗначениеСопоставления(ОбъектыСопоставления, ВыбраннаяКатегория, Отказ);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияСервиса = ВыбраннаяКатегория.Наименование;
	КатегорииНоменклатуры["Категория" + ДополнительныеПараметры] = КатегорияСервиса;
	КатегорииНоменклатуры["ИдентификаторКатегории" + ДополнительныеПараметры] = ВыбраннаяКатегория.Идентификатор;
	ОбновитьРеквизитыСервиса();
	
	Элементы.КатегорияСервиса.Шрифт = Новый Шрифт;
	Элементы.КатегорияСервиса.ЦветТекста = Новый Цвет;
	
	//ЗапуститьПроверкуГотовностиНоменклатурнойПозиции(КатегорииНоменклатуры.Ссылка);
	ЗапуститьОбновлениеПроблемЗаполнения(ОбъектыСопоставления, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуГотовностиНоменклатурнойПозиции(Номенклатура)
	
	ДлительнаяОперацияПроблемыЗаполнения = РаботаСНоменклатуройСлужебныйВызовСервера.ПроверитьГотовностьНоменклатурнойПозиции(УникальныйИдентификатор,
		Организация, Номенклатура);
	Если ДлительнаяОперацияПроблемыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ДлительнаяОперацияПроблемыЗаполнения.Статус = "Выполнено" Тогда
		ЗавершитьПроверкуГотовностиНоменклатурнойПозиции(ДлительнаяОперацияПроблемыЗаполнения, Неопределено);
		Возврат
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьПроверкуГотовностиНоменклатурнойПозиции", ЭтотОбъект);
	ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияПроблемыЗаполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверкуГотовностиНоменклатурнойПозиции(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ (Результат.Статус = "Выполнено" 
		И Результат.Свойство("АдресРезультата")
		И ТипЗнч(Результат.АдресРезультата) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)) 
		ИЛИ СценарийИспользования <> "УстранениеПроблемЗаполнения" Тогда 
		Возврат
	КонецЕсли;
	
	Расшифровка = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ОбработатьОбновлениеРасшифровки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбновлениеРасшифровки()
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат
	КонецЕсли;
	
	ВсегоПроблем = Расшифровка.Проблемы.Количество();
	Если ВсегоПроблем = 0 Тогда
		Элементы.НадписьЗаполнитеДанные.Шрифт = Новый Шрифт();
		Элементы.НадписьЗаполнитеДанные.Заголовок = НСтр("ru = 'Проблем с заполнением не выявлено'");
		
		Элементы.ГруппаЗаполнениеДанных.Доступность = Ложь;
		
		Элементы.НадписьПоказатьНезаполненные.Видимость = Ложь;
		
		Элементы.ГруппаСопоставлениеНоменклатуры.Доступность = Истина;
		
		Элементы.ГруппаСопоставлениеСРубрикатором.ШрифтЗаголовка = Новый Шрифт(,, Истина);
	Иначе 
		Элементы.НадписьЗаполнитеДанные.Шрифт = Новый Шрифт(,, Истина);
		
		Элементы.ГруппаЗаполнениеДанных.Доступность = Истина;
		
		Элементы.НадписьЗаполнитеДанные.Заголовок = НСтр("ru = 'Заполните данные номенклатуры'");
		
		Элементы.НадписьПоказатьНезаполненные.Видимость = Истина;
		Элементы.НадписьПоказатьНезаполненные.Заголовок = СтрШаблон(НСтр("ru = 'Показать незаполненные реквизиты (%1)'"), ВсегоПроблем);
		
		Элементы.ГруппаСопоставлениеНоменклатуры.Доступность = Ложь;
		
		Элементы.ГруппаСопоставлениеСРубрикатором.ШрифтЗаголовка = Новый Шрифт();
	КонецЕсли;
	
	Элементы.ГруппаСопоставлениеНоменклатуры.Видимость = Элементы.ГруппаСопоставлениеНоменклатуры.Видимость ИЛИ НЕ (Расшифровка.Категории = Истина);
	Элементы.ГруппаСопоставлениеРеквизитов.Видимость = Элементы.ГруппаСопоставлениеРеквизитов.Видимость ИЛИ НЕ (Расшифровка.Категории = Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияСервисаОчистка(Элемент, СтандартнаяОбработка)
	
	Если ПустаяСтрока(КатегорииНоменклатуры["ИдентификаторКатегории" + РежимСопоставления]) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыСопоставления = Новый Массив;
	Если РежимСопоставления = "ПоНоменклатуре" Тогда
		ОбъектыСопоставления.Добавить(КатегорииНоменклатуры["Ссылка"]);
	ИначеЕсли РежимСопоставления = "ПоВидам" Тогда
		ОбъектыСопоставления.Добавить(КатегорииНоменклатуры["ВидНоменклатуры"]);
	ИначеЕсли РежимСопоставления = "ПоИерархии" Тогда
		ОбъектыСопоставления.Добавить(КатегорииНоменклатуры["Родитель"]);
	Иначе 
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	РаботаСНоменклатуройСлужебныйВызовСервера.ОчиститьСопоставлениеКатегорий(ОбъектыСопоставления, Отказ);
	
	Если Не Отказ Тогда
		КатегорияРеквизитов = "";
		КатегорииНоменклатуры["ИдентификаторКатегории" + РежимСопоставления] = "";
		ОбновитьРеквизитыСервиса();
	КонецЕсли;
	
	ЗапуститьОбновлениеПроблемЗаполнения(ОбъектыСопоставления);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Проблемы, "Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоНоменклатуре, "Организация", Организация);
	
	Если Элементы.ГруппаРежимПоИерархии.Видимость = Истина Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоИерархии, "Организация", Организация);
	КонецЕсли;
	
	Если Элементы.ГруппаРежимПоВидам.Видимость = Истина Тогда
		СписокСостояний  = РаботаСНоменклатуройСлужебный.СостоянияВыгружаемаяНоменклатура();
		ВидыНоменклатуры = Обработки.РаботаСНоменклатурой.ВидыНоменклатурыКВыгрузке(Организация, СписокСостояний);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоВидам, "Ссылка", ВидыНоменклатуры,
			ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МодульТорговыеПредложенияПереопределяемый(Модуль = Неопределено)
	Если Модуль = Неопределено Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияПереопределяемый");
	КонецЕсли;
	Возврат Модуль
КонецФункции

&НаСервереБезКонтекста
Функция ПолучениеСпискаВидовНоменклатуры(Знач УникальныйИдентификатор, Знач Организация, Знач Интерактивно = Ложь)
	
	НаименованиеЗадания = НСтр("ru = 'Работа с номенклатурой. Получение списка видов номенклатуры к выгрузке'");
	ИмяМетода          = "Обработки.РаботаСНоменклатурой.ВидыНоменклатурыКВыгрузке";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	Если Интерактивно = Ложь Тогда
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, Организация);
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоВидамНоменклатуры(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ (Результат.Статус = "Выполнено" 
		И Результат.Свойство("АдресРезультата")
		И ТипЗнч(Результат.АдресРезультата) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)) Тогда 
		Возврат
	КонецЕсли;
	
	ВидыНоменклатуры = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоВидам, "Ссылка", ВидыНоменклатуры,
				ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
				
	Элементы.СписокПоВидам.Видимость = Истина;
	Элементы.ДлительнаяОперацияПоВидам.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницуПоВидам(Интерактивно = Ложь)
	
	Если НЕ (РежимСопоставления = "ПоВидам" И Элементы.ДлительнаяОперацияПоВидам.Видимость = Истина) Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ДлительнаяОперацияВидыНоменклатуры) <> Тип("Структура") Тогда
		ДлительнаяОперацияВидыНоменклатуры = ПолучениеСпискаВидовНоменклатуры(УникальныйИдентификатор, Организация, Интерактивно);
	КонецЕсли;
	Если ДлительнаяОперацияВидыНоменклатуры.Статус = "Выполнено" Тогда
		УстановитьОтборПоВидамНоменклатуры(ДлительнаяОперацияВидыНоменклатуры, Неопределено);
	Иначе 
		ОповещениеОЗавершении = Новый ОписаниеОповещения("УстановитьОтборПоВидамНоменклатуры", ЭтотОбъект);
		ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияВидыНоменклатуры, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКатегориюСервиса()
	КатегорииНоменклатуры.Свойство("КатегорияПоНоменклатуре", КатегорияСервиса);
	Если ЗначениеЗаполнено(КатегорияСервиса) Тогда
		Элементы.КатегорияСервиса.Шрифт = Новый Шрифт;
		Элементы.КатегорияСервиса.ЦветТекста = Новый Цвет;
	Иначе 
		КатегорииНоменклатуры.Свойство("КатегорияПоВидам", КатегорияСервиса);
		Если НЕ ЗначениеЗаполнено(КатегорияСервиса) Тогда
			КатегорииНоменклатуры.Свойство("КатегорияПоИерархии", КатегорияСервиса);
		КонецЕсли;
		Если ЗначениеЗаполнено(КатегорияСервиса) Тогда
			Элементы.КатегорияСервиса.Шрифт = Новый Шрифт(,,, Истина);
			Элементы.КатегорияСервиса.ЦветТекста = Элементы.НедоступныеДанныеЭДЦвет.ЦветТекста;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьРеквизитыСервиса();
	ТекущийЭлемент = Элементы.ГруппаОбъектыСопоставления;
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьЗаписиРегистра(Знач УникальныйИдентификатор, Знач Организация, Знач МассивДанных)
	
	НаименованиеЗадания = НСтр("ru = 'Работа с номенклатурой. Удаление записей из регистра ""Состояния выгрузки"".'");
	ИмяМетода           = "РаботаСНоменклатуройСлужебный.УдалитьПроблемы";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, Организация, МассивДанных);
	
КонецФункции

&НаКлиенте
Процедура ПослеУдаленияЗаписейРегистра(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Результат.Свойство("Статус") И Результат.Статус = "Выполнено") Тогда 
		Возврат
	КонецЕсли;
	
	ОбновитьЗакладкуЗаполнениеДанных(ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗакладкуЗаполнениеДанных(НайденоПроблем)
	Элементы.ЗаполнениеДанныхСтраницы.ТекущаяСтраница = Элементы.ПроблемыЗаполнения;
	Если НайденоПроблем = 0 Тогда
		ОписаниеПроблем = НСтр("ru = 'проблем не найдено'");
		Элементы.ЗаполнениеДанныхСтраницы.ТекущаяСтраница = Элементы.ПроблемНет;
	ИначеЕсли НайденоПроблем >= ЛимитЗаписей Тогда
		ОписаниеПроблем = СтрШаблон(НСтр("ru = 'более %1 проблем'"), Формат(ЛимитЗаписей, "ЧГ="));
	Иначе 
		ОписаниеПроблем = СтрШаблон(НСтр("ru = '%1 проблем'"), Формат(НайденоПроблем, "ЧГ="));
	КонецЕсли;
	Элементы.ЗаполнениеДанных.Заголовок = СтрШаблон(НСтр("ru = 'Заполнение данных (%1)'"), ОписаниеПроблем);
	Элементы.Проблемы.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДлительнаяОперацияОбязательныеРеквизиты(Знач УникальныйИдентификатор) Экспорт
	
	ИмяМетода           = "РаботаСНоменклатуройСлужебный.ОбязательныеРеквизитыНациональногоКаталога";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Работа с номенклатурой. Получение обязательных реквизитов Национального каталога.'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПолучениеОбязательныхРеквизитов()
	
	Если НЕ ЭтоВыгрузкаВНациональныйКаталог Тогда
		Возврат
	КонецЕсли;
	
	Если ОбязательныеРеквизитыДлительнаяОперация.Статус = "Выполнено" Тогда
		ПолучитьОбязательныеРеквизиты(ОбязательныеРеквизитыДлительнаяОперация, Неопределено);
	Иначе 
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьОбязательныеРеквизиты", ЭтотОбъект);
		ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ОбязательныеРеквизитыДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОбязательныеРеквизиты(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат.Статус = "Выполнено" 
		И Результат.Свойство("АдресРезультата")
		И ТипЗнч(Результат.АдресРезультата) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)) Тогда 
		Возврат
	КонецЕсли;
	
	ОбязательныеРеквизиты = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
КонецПроцедуры

#КонецОбласти