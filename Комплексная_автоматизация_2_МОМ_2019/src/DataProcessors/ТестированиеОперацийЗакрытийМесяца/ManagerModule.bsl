#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Выполняет тестирование операций закрытия месяца.
// 
// Параметры:
// 	ВходныеПараметры - Структура - 
// Возвращаемое значение:
// 	Структура - Описание:
// * Отказ - Булево - успех/не успех тестирования
// * ОписаниеОшибки - Строка - подробное представление ошибки
// * ИмяЭтапаТестирования - Соответствие - данные тестирования этапа
Функция Тестирование(ВходныеПараметры) Экспорт
	
	Если ВходныеПараметры.Свойство("ПараметрыЗапуска") Тогда // программный запуск, есть параметры запуска
		ПараметрыТестирования = ПараметрыЗапускаТестирования(ВходныеПараметры.ПараметрыЗапуска);
	Иначе
		ПараметрыТестирования = ВходныеПараметры;
	КонецЕсли;
	
	Попытка
		РезультатТестирования = ТестироватьЗаПериод(ПараметрыТестирования);
	Исключение
		РезультатТестирования = Новый Структура;
		РезультатТестирования.Вставить("Отказ", Истина);
		СообщитьОбОшибке();
		РезультатТестирования.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатТестирования;
	
КонецФункции

// Запускает тестирование регламентных заданий по закрытию месяца в фоновом задании.
//
// Параметры:
//	ПараметрыТестирования - Структура - Параметры закрытия месяца: период, организация к закрытию.
//
// ВозвращаемоеЗначение:
//  УникальныйИдентификатор - идентификатор запущенного задания
//	Строка - описание причины, по которой задание не может быть запущено.
//
Функция ЗапуститьТестированиеВФоне(ПараметрыТестирования) Экспорт
	
	// Проверим возможность запуска расчета.
	ИдентификаторРасчета = Новый УникальныйИдентификатор; // пишется в ключ фонового задания
	
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ПроверитьНаличиеАктивныхРасчетов();
	
	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
		Возврат АктивныеРасчеты.ТекстОшибки;
	КонецЕсли;
	
	// Запустим расчет.
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыТестирования);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("Обработки.ТестированиеОперацийЗакрытийМесяца.Тестирование");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = ФоновыеЗадания.Выполнить(
		"ОбщегоНазначения.ВыполнитьМетодКонфигурации",
		ПараметрыЗадания,
		ЗакрытиеМесяцаСервер.ИмяФоновогоЗадания(ИдентификаторРасчета),
		НСтр("ru = 'Тестирование операций закрытие месяца'"));
	
	Возврат Задание.УникальныйИдентификатор;
	
КонецФункции

Функция ПараметрыЗапускаТестирования(ВходныеПараметры = Неопределено)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СписокОрганизаций", Новый СписокЗначений);
	ПараметрыЗадания.Вставить("НачалоРасчета", СебестоимостьМинПериод());
	ПараметрыЗадания.Вставить("КонецРасчета", ТекущаяДатаСеанса());
	ПараметрыЗадания.Вставить("ПериодРегистрации", ТекущаяДатаСеанса());
	ПараметрыЗадания.Вставить("Период", ТекущаяДатаСеанса());
	ПараметрыЗадания.Вставить("КонтрольныеРегистры");
	ПараметрыЗадания.Вставить("АдресХранилища", Неопределено);
	ПараметрыЗадания.Вставить("ЭтапыТестирования", ЭтапыТестирования());
	ПараметрыЗадания.Вставить("Разделы", РазделыТестирования().ВыгрузитьЗначения());
	ПараметрыЗадания.Вставить("ДействиеПриРасхождении", "Остановить");
	ПараметрыЗадания.Вставить("ЛимитРасхождений", 5000);
	ПараметрыЗадания.Вставить("ДопустимоеОтклонение", "0.02");
	ПараметрыЗадания.Вставить("АвтоматическоеТестирование", Ложь);
	
	Если ЗначениеЗаполнено(ВходныеПараметры) Тогда
		
		ЗначениеПараметра = Неопределено;
		СтруктураПараметров = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ВходныеПараметры);
		
		Если СтруктураПараметров.Свойство("НачалоРасчета", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.НачалоРасчета = Дата(СтрЗаменить(ЗначениеПараметра, """", ""));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КонецРасчета", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.КонецРасчета = Дата(СтрЗаменить(ЗначениеПараметра, """", ""));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Разделы", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.Разделы = СтрРазделить(ЗначениеПараметра, ",");
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЭтапыТестирования", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ЭтапыТестирования = СтрРазделить(ЗначениеПараметра, ",");
			Для каждого ЭтапТестирования Из ПараметрыЗадания.ЭтапыТестирования Цикл
				ЭтапТестирования.Пометка = ЭтапыТестирования.Найти(ЭтапТестирования.Значение) <> Неопределено;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ДействиеПриРасхождении", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.ДействиеПриРасхождении = ЗначениеПараметра;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЛимитРасхождений", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.ЛимитРасхождений = Число(СтрЗаменить(ЗначениеПараметра, """", ""));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ДопустимоеОтклонение", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.ДопустимоеОтклонение = ЗначениеПараметра;
		КонецЕсли;
		
		ПараметрыЗадания.АвтоматическоеТестирование = Истина;
	
	КонецЕсли;
	
	ПараметрыЗадания.КонтрольныеРегистры = КонтрольныеРегистры(ПараметрыЗадания.Разделы);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

#Область НастройкиТестирования

// Список этапов тестирования, которые могут использоваться при тестировании.
// Для них будут скинуты границы перед началом обработки тестирования и выполнены соответствующие задания из закрытия
// месяца в процессе обработки.
//
// Возвращаемое значение:
// СписокЗначений - список этапов, для которых может проводиться тестирование.
//
// Список разделов тестирования, которые могут использоваться при тестировании.
// Для них будут скинуты границы перед началом обработки тестирования и выполнены соответствующие задания из закрытия
// месяца в процессе обработки.
//
// Возвращаемое значение:
// СписокЗначений - список этапов, для которых может проводиться тестирование.
//
Функция РазделыТестирования() Экспорт
	
	РазделыТестирования = Новый СписокЗначений;
	РазделыТестирования.Добавить("ВзаиморасчетыСПартнерами", " " + НСтр("ru = 'Взаиморасчеты с партнерами'"), Истина);
	РазделыТестирования.Добавить("Себестоимость", " " + НСтр("ru = 'Себестоимость'"), Истина);
	//++ Локализация
	РазделыТестирования.Добавить("НДС", " " + НСтр("ru = 'Распределение НДС'"), Истина);
	//++ НЕ УТ
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		РазделыТестирования.Добавить("ВНА", " " + НСтр("ru = 'Формирование движений по ВНА'"), Истина);
	КонецЕсли;
	РазделыТестирования.Добавить("УСН", " " + НСтр("ru = 'Отражение доходов и расходов при УСН'"), Истина);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		РазделыТестирования.Добавить("РеглУчет", " " + НСтр("ru = 'Отражение в регл. учете'"), Истина);
	КонецЕсли;
	//-- НЕ УТ
	//-- Локализация
	
	
	Возврат РазделыТестирования;
	
КонецФункции

Функция ЭтапыТестирования(ТестироватьНовыеМеханизмы = Ложь) Экспорт
	
	ЭтапыТестирования = Новый СписокЗначений;
	// По умолчанию всегда закрываем месяц:
	ЭтапыТестирования.Добавить("ПерезакрытьМесяц", " " + НСтр("ru = 'Перезакрытие месяца'"), Истина);
	Если ТестироватьНовыеМеханизмы Тогда
		//++ Локализация
		// Если отключена опция новых взаиморасчетов, по умолчанию будет еще сравнивать данные контрольных регистров и после включения опции новых взаиморасчетов:
		ЭтапыТестирования.Добавить("ПереходНаНовыеВзаиморасчеты",
			" " + НСтр("ru = 'Переход на новые взаиморасчеты и перезакрытие месяца'"),
			Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
		// Если включена опция новых взаиморасчетов, по умолчанию будет еще сравнивать данные контрольных регистров после перезаполнения новых взаиморасчетов:
		ЭтапыТестирования.Добавить("ПерезаполнитьНовыеВзаиморасчеты",
			" " + НСтр("ru = 'Перезаполнение новых взаиморасчетов и перезакрытие месяца'"),
			ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
		//-- Локализация
	КонецЕсли;
		
	Возврат ЭтапыТестирования;
	
КонецФункции

// Список регистров, по которым контролируется движения до выполнения закрытия месяца и после.
// В случае обнаружения различий, они фиксируются и выводятся в отчет "Результаты тестирования".
//
// ВозвращаемоеЗначение:
//	Массив - массив имен метаданных.
Функция КонтрольныеРегистры(ВыбранныеРазделы = Неопределено) Экспорт
	
	Если ВыбранныеРазделы = Неопределено Тогда
		ВыбранныеРазделы = РазделыТестирования().ВыгрузитьЗначения();
	КонецЕсли;
	
	РегистрыКонтроля = Новый Массив;
	
	Если ВыбранныеРазделы.Найти("ВзаиморасчетыСПартнерами") <> Неопределено Тогда // Взаиморасчеты
		Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
		Иначе
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
		КонецЕсли;
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя());
	КонецЕсли;
	
	Если ВыбранныеРазделы.Найти("Себестоимость") <> Неопределено Тогда // Себестоимость
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.Закупки.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ФинансовыеРезультаты.ПолноеИмя());
		
		// ПартионныйУчет
		//++ Локализация
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.ПолноеИмя());
		//-- Локализация
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ПолноеИмя());
		//++ НЕ УТ
		//++ Локализация
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства.ПолноеИмя());
		//-- Локализация
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыСведений.ДолиСписанияКосвенныхРасходов.ПолноеИмя());
		//-- НЕ УТ
	КонецЕсли;
	
	//++ Локализация
	//++ НЕ УТ
	Если ВыбранныеРазделы.Найти("УСН") <> Неопределено Тогда //УСН
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСН.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНМатериалы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНТовары.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНОСиНМА.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходовРаздел2.ПолноеИмя());
	КонецЕсли;
	
	Если ВыбранныеРазделы.Найти("ВНА") <> Неопределено Тогда //ВНА
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.СтоимостьОС.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.СтоимостьНМА.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.АмортизацияНМА.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.АмортизацияОС.ПолноеИмя());
	КонецЕсли;
	//-- НЕ УТ
	
	Если ВыбранныеРазделы.Найти("НДС") <> Неопределено Тогда //НДС
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленный.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииНДСКРаспределению.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыСведений.ЖурналУчетаСчетовФактур.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыСведений.ДанныеОснованийСчетовФактур.ПолноеИмя());
	КонецЕсли;
	
	//++ НЕ УТ
	Если ВыбранныеРазделы.Найти("РеглУчет") <> Неопределено Тогда //Регл. учет
		РегистрыКонтроля.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	КонецЕсли;
	//-- НЕ УТ
	//-- Локализация
	
	
	Возврат РегистрыКонтроля;
	
КонецФункции

Функция СоответствиеРегистровРазделам()
	
	СоответствиеРазделовРегистрам = Новый Соответствие;
	Для каждого Раздел Из РазделыТестирования().ВыгрузитьЗначения() Цикл
		РегистрыРаздела = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Раздел));
		Для Каждого Регистр Из РегистрыРаздела Цикл
			СоответствиеРазделовРегистрам.Вставить(Регистр, Раздел);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СоответствиеРазделовРегистрам;
	
КонецФункции

Функция ДействияПриРасхождениях() Экспорт
	
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.Добавить("Продолжить", НСтр("ru = 'Продолжить тестирование'"));
	СписокВозврата.Добавить("Остановить", НСтр("ru = 'Остановить тестирование'"));
	СписокВозврата.Добавить("ОстановитьУсловие", НСтр("ru = 'Остановить тестирование при достижении лимита расхождений'"));
	СписокВозврата.Добавить("РазбитьФайл", НСтр("ru = 'При достижении лимита расхождений разбивать файл расхождений'"));
	
	Возврат СписокВозврата;
	
КонецФункции

// Возвращает период самого первого движения по регистру "Себестоимость товаров".
// 
// ВозвращаемоеЗначение:
//	Период - Дата.
Функция СебестоимостьМинПериод() Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МИНИМУМ(ДД.Период) КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК ДД
	|ИМЕЮЩИЕ
	|	НЕ (МИНИМУМ(ДД.Период) ЕСТЬ NULL)
	|");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Период = НачалоМесяца(ТекущаяДатаСеанса());
	Иначе
		Период = НачалоМесяца(Результат.Выгрузить()[0].Период);
	КонецЕсли;
	
	Возврат Период;
КонецФункции

#КонецОбласти // НастройкиТестирования

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ТестироватьЗаПериод(ПараметрыОбработки)
	
	РезультатТестирования = Новый Структура("Отказ", Ложь);
	
	ПериодДвиженийСебестоимости = ПартионныйУчетСервер.ПериодПервыхДвиженийРегистраСебестоимость();
	Если ЗначениеЗаполнено(ПериодДвиженийСебестоимости) 
	 И ПараметрыОбработки.НачалоРасчета < ПериодДвиженийСебестоимости Тогда
		ПараметрыОбработки.НачалоРасчета = ПериодДвиженийСебестоимости;
	КонецЕсли;
	 
	ПериодПоследнихДвижений = ПериодПоследнихДвиженийРегистраСебестоимость();
	Если ЗначениеЗаполнено(ПериодПоследнихДвижений) 
	 И ПараметрыОбработки.КонецРасчета > ПериодПоследнихДвижений Тогда
		ПараметрыОбработки.КонецРасчета = ПериодПоследнихДвижений;
	КонецЕсли;
	
	Для каждого ЭтапТестирования Из ПараметрыОбработки.ЭтапыТестирования Цикл
		
		Если Не ЭтапТестирования.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСравненияДанных = Тестирование.ПараметрыЗапроса(ПараметрыОбработки.НачалоРасчета);
		ПараметрыСравненияДанных.КонецПериода = ПараметрыОбработки.КонецРасчета;
		Если ПараметрыОбработки.Свойство("ДопустимоеОтклонение") Тогда
			ПараметрыСравненияДанных.Вставить("ДопустимоеОтклонение", ПараметрыОбработки.ДопустимоеОтклонение);
			ПараметрыСравненияДанных.Вставить("ОпределятьОбщееРасхождение", Истина);
		КонецЕсли;
		
		ВременныеТаблицыЭталонныхДанных = Тестирование.СохранитьЭталонныеДанные(ПараметрыОбработки.КонтрольныеРегистры, ПараметрыСравненияДанных);
		
		//++ Локализация
		Если ЭтапТестирования.Значение = "ПереходНаНовыеВзаиморасчеты" Тогда
			
			ПараметрыЗадания = Новый Структура("Дата", ПараметрыОбработки.НачалоРасчета);
			ОперативныеВзаиморасчетыСервер.ЗаполнитьРегистрыПриВключенииНовойАрхитектуры(ПараметрыЗадания, Неопределено);
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки);
			
		КонецЕсли;
		
		Если ЭтапТестирования.Значение = "ПерезаполнитьНовыеВзаиморасчеты" Тогда
			
			ОперативныеВзаиморасчетыСервер.ЗаполнитьПоВсемРасчетам();
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки);
			
		КонецЕсли;
		//-- Локализация
		
		Если ЭтапТестирования.Значение = "ПерезакрытьМесяц" Тогда
			
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки);
			
		КонецЕсли;
		
		Расхождения = Тестирование.СравнитьСЭталоннымиДанными(ВременныеТаблицыЭталонныхДанных, ПараметрыОбработки.КонтрольныеРегистры, ПараметрыСравненияДанных);
		
		ДанныеРасхожденийПоРазделам = ДанныеРасхожденийПоРазделам(ЭтапТестирования.Значение, Расхождения);
		
		КлючЭтапа = "ДанныеРасхождений";
		Если Не ЭтапТестирования.Значение = "ПерезакрытьМесяц" Тогда
			КлючЭтапа = КлючЭтапа + "_" + ЭтапТестирования.Значение;
		КонецЕсли;
		РезультатТестирования.Вставить(КлючЭтапа, ДанныеРасхожденийПоРазделам);
		
		Если Расхождения.Получить("КоличествоРасхождений") > 0 И ПараметрыОбработки.ДействиеПриРасхождении = "Остановить" Тогда
			Прервать;
		КонецЕсли;
		
		Если Расхождения.Получить("КоличествоРасхождений") > ПараметрыОбработки.ЛимитРасхождений И ПараметрыОбработки.ДействиеПриРасхождении = "ОстановитьУсловие" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоРасхождений = 0;
	//++ Локализация
	Если РезультатТестирования.Свойство("ДанныеРасхождений_ПереходНаНовыеВзаиморасчеты", КоличествоРасхождений) И КоличествоРасхождений = 0
		И (Не РезультатТестирования.Свойство("ДанныеРасхождений_ПерезаполнитьНовыеВзаиморасчеты", КоличествоРасхождений) Или КоличествоРасхождений = 0) Тогда
		Константы.НоваяАрхитектураВзаиморасчетов.Установить(Ложь);
	КонецЕсли;
	//-- Локализация
	
	Возврат РезультатТестирования;
	
КонецФункции

Функция ПериодПоследнихДвиженийРегистраСебестоимость()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = НачалоМесяца(Выборка.Период);
	Иначе
		Результат = Дата(1,1,1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СообщитьОбОшибке()
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование.Ошибка тестирования'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
КонецПроцедуры

Функция ДанныеРасхожденийПоРазделам(ЭтапТестирования, Расхождения)
	
	ДанныеРасхождений = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Расхождения) И Расхождения.Получить("КоличествоРасхождений") <> 0 Тогда
		
		СоответствиеРегистровРазделам = СоответствиеРегистровРазделам();
		
		ДанныеРасхожденийРазделов = Новый Соответствие;
		ВсеДокументыРасхождений = Новый Массив;
		// собираем документы с расхождениями по разделам и отдельно общий массив
		Для Каждого Строка Из Расхождения Цикл
			РазделТекущегоРасхождения = СоответствиеРегистровРазделам[Строка.Ключ];
			Если РазделТекущегоРасхождения <> Неопределено Тогда
				Если ДанныеРасхожденийРазделов.Получить(РазделТекущегоРасхождения) = Неопределено Тогда
					ДанныеРасхожденийРазделов.Вставить(РазделТекущегоРасхождения, Новый Массив);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеРасхожденийРазделов[РазделТекущегоРасхождения], Строка.Значение.Документы, Истина);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеДокументыРасхождений, Строка.Значение.Документы, Истина);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого РасхожденияРаздела Из ДанныеРасхожденийРазделов Цикл
			Раздел = РасхожденияРаздела.Ключ;
			ДанныеРасхожденийДокументов = Новый Соответствие;
			Для Каждого ДокументРасхождений Из РасхожденияРаздела.Значение Цикл
				СтруктураРасхождений = СтруктураРасхожденийРаздела(Раздел);
				ДанныеРасхожденийДокументов.Вставить(ДокументРасхождений, СтруктураРасхождений);
				Для Каждого Строка Из Расхождения Цикл
					Если СоответствиеРегистровРазделам[Строка.Ключ] = Раздел Тогда
						
						ТаблицаРасхождений = Строка.Значение.Таблица;
						СтрокиПоДокументу = ТаблицаРасхождений.НайтиСтроки(Новый Структура("Регистратор", ДокументРасхождений));
						ТаблицаРасхожденийДокумента = ТаблицаРасхождений.Скопировать(СтрокиПоДокументу);
						
						СтруктураРасхождений.Файл.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
						СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Строка.Ключ); // имя регистра
						СтруктураРасхождений.Файл.ЗаписатьТекст(СтрокаXML);
						
						СтруктураРасхождений.Файл.ЗаписатьНачалоЭлемента("Записи");
						СтруктураРасхождений.Файл.ЗаписатьТекст(ОбщегоНазначения.ЗначениеВСтрокуXML(ТаблицаРасхожденийДокумента));
						СтруктураРасхождений.Файл.ЗаписатьКонецЭлемента(); // записи
						
						СтруктураРасхождений.Файл.ЗаписатьКонецЭлемента(); // имя регистра
						
						СтруктураРасхождений.Количество = Строка.Значение.Количество; // максимум по регистру
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			СтруктураРасхождений = СтруктураРасхожденийРаздела(Раздел);
			ДанныеРасхожденийДокументов.Вставить("ОбщиеРасхожденияПоРазделу", СтруктураРасхождений);
			
			Для Каждого Строка Из Расхождения Цикл
				Если СоответствиеРегистровРазделам[Строка.Ключ] = Раздел Тогда
					
					ТаблицаРасхождений = Строка.Значение.Таблица;
					СтрокиПоДокументам = Новый Массив;
					Для Каждого ДокументРасхождений Из ВсеДокументыРасхождений Цикл
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
							СтрокиПоДокументам,
							ТаблицаРасхождений.НайтиСтроки(Новый Структура("Регистратор", ДокументРасхождений)));
					КонецЦикла;
					
					СтруктураРасхождений.Файл.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
					СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Строка.Ключ); // имя регистра
					СтруктураРасхождений.Файл.ЗаписатьТекст(СтрокаXML);
					
					СтруктураРасхождений.Файл.ЗаписатьНачалоЭлемента("Записи");
					СтруктураРасхождений.Файл.ЗаписатьТекст(ОбщегоНазначения.ЗначениеВСтрокуXML(ТаблицаРасхождений.Скопировать(СтрокиПоДокументам)));
					СтруктураРасхождений.Файл.ЗаписатьКонецЭлемента(); // записи
					
					СтруктураРасхождений.Файл.ЗаписатьКонецЭлемента(); // имя регистра
					
					СтруктураРасхождений.Количество = Строка.Значение.Количество; // максимум по регистру
					
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ДанныеРасхожденийДокумента Из ДанныеРасхожденийДокументов Цикл
				
				ЗаписатьФайлОтчета(ДанныеРасхожденийДокумента.Значение.Файл);
				ДанныеТестирования = Новый ДвоичныеДанные(ДанныеРасхожденийДокумента.Значение.ПутьКФайлу);
				АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
				ДанныеРасхожденийДокумента.Значение.Вставить("АдресХранилища", АдресХранилища);
				УдалитьФайлы(ДанныеРасхожденийДокумента.Значение.ПутьКФайлу);
				ДанныеРасхожденийДокумента.Значение.Удалить("Файл");
				
			КонецЦикла;
			
			ДанныеРасхождений.Вставить(Раздел, ДанныеРасхожденийДокументов);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеРасхождений;
	
КонецФункции

Функция СтруктураРасхожденийРаздела(РазделТекущегоРасхождения)
	
	СтруктураВозврата = Новый Структура;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	ФайлОтчета = СоздатьФайлОтчета(ПутьКФайлу);
	СтруктураВозврата.Вставить("Количество", 0);
	СтруктураВозврата.Вставить("Файл", ФайлОтчета);
	СтруктураВозврата.Вставить("ОбъектМетаданных", МетаданныеРасхожденияПоРазделу(РазделТекущегоРасхождения));
	СтруктураВозврата.Вставить("ПутьКФайлу", ПутьКФайлу);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МетаданныеРасхожденияПоРазделу(Раздел)
	
	СоответствиеМетаданныхИРазделов = Новый Соответствие;
	СоответствиеМетаданныхИРазделов.Вставить("Себестоимость", "РегистрыНакопления.СебестоимостьТоваров");
	СоответствиеМетаданныхИРазделов.Вставить("ВзаиморасчетыСПартнерами", "РегистрыНакопления.РасчетыСПоставщиками");
	//++ Локализация
	СоответствиеМетаданныхИРазделов.Вставить("НДС", "РегистрыНакопления.НДСПредъявленный");
	//++ НЕ УТ
	СоответствиеМетаданныхИРазделов.Вставить("ВНА", "РегистрыНакопления.АмортизацияОС");
	СоответствиеМетаданныхИРазделов.Вставить("УСН", "РегистрыНакопления.РасходыПриУСН");
	СоответствиеМетаданныхИРазделов.Вставить("РеглУчет", "РегистрыБухгалтерии.Хозрасчетный");
	//-- НЕ УТ
	//-- Локализация
	
	Возврат СоответствиеМетаданныхИРазделов.Получить(Раздел);
	
КонецФункции

#Область ЗакрытиеМесяца

Процедура ЗакрытиеМесяцаСДаты(Параметры)
	
	УстановитьЗаданияКРасчетуНаДату(Параметры.НачалоРасчета, Параметры.Разделы);
	ТестируемыйМесяц = Параметры.НачалоРасчета;
	
	Пока ТестируемыйМесяц <= Параметры.КонецРасчета Цикл
		
		ЗакрытиеМесяцаСервер.ТестированиеЗакрытияМесяца(ТестируемыйМесяц);
		
		ТестируемыйМесяц = КонецМесяца(ТестируемыйМесяц) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗаданияКРасчетуНаДату(Период, ВыбранныеРазделы = Неопределено)
	
	Если ВыбранныеРазделы = Неопределено Тогда
		ВыбранныеРазделы = РазделыТестирования().ВыгрузитьЗначения();
	КонецЕсли;
	
	Для Каждого РазделРасчета Из ВыбранныеРазделы Цикл
		
		Если РазделРасчета = "Себестоимость" Тогда
			РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(Период); // по всем организациям
		КонецЕсли;
		
		Если РазделРасчета = "ВзаиморасчетыСПартнерами" Тогда
			Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
				РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(Период,,, Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
			Иначе
				РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.СоздатьЗаписьРегистра(Период); // по всем организациям
				РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьЗаписьРегистра(Период); // по всем организациям
			КонецЕсли;
		КонецЕсли;
			
		//++ Локализация
		Если РазделРасчета = "НДС" Тогда
			
			// Задания к распределению НДС
			ВыборкаДокументовРаспределенияНДС = ДокументыРаспределенияНДС(Период).Выбрать();
			Пока ВыборкаДокументовРаспределенияНДС.Следующий() Цикл
				РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(Период,, ВыборкаДокументовРаспределенияНДС.Организация, Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
			КонецЦикла;
			
			// Задания по формированию НДСПредъявленный, КнигиПокупок, КнигиПродаж
			ВыборкаЗаданийКФормированиюНДС = ЗаданияКФормированиюНДС(Период).Выбрать();
			РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(ВыборкаЗаданийКФормированиюНДС);
			
		КонецЕсли;
		
		//++ НЕ УТ
		Если РазделРасчета = "ВНА" Тогда
			
			ВыборкаЗаданийАмортизацияОС = ЗаданияАмортизацииОС(Период).Выбрать();
			РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.СоздатьЗаписиРегистраПоДаннымВыборки(ВыборкаЗаданийАмортизацияОС);
			ВыборкаЗаданийАмортизацияНМА = ЗаданияАмортизацииНМА(Период).Выбрать();
			РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.СоздатьЗаписиРегистраПоДаннымВыборки(ВыборкаЗаданийАмортизацияНМА);
			
		КонецЕсли;
		
		Если РазделРасчета = "УСН" Тогда
			
			ОперацииУСН = Новый Массив;
			ОперацииУСН.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН);
			ОперацииУСН.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаУСН);
			ОперацииУСН.Добавить(Перечисления.ОперацииЗакрытияМесяца.СторноДоходовКУДиР);
			
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(Период,,, ОперацииУСН);
			
		КонецЕсли;
		
		Если РазделРасчета = "РеглУчет" Тогда
			ОтражаемыеТипы = Метаданные.РегистрыСведений.ОтражениеДокументовВРеглУчете.СтандартныеРеквизиты.Регистратор.Тип.Типы();
			ТипыДокументовКПоследовательномуОтражению = РеглУчетВыборкиСерверПовтИсп.ТипыДокументовКПоследовательномуОтражению();
			ИсключаемыеТипы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ТипыДокументовКПоследовательномуОтражению);
			ИсключаемыеТипы.Удалить(ИсключаемыеТипы.Количество() - 1);
			ИсключаемыеТипы.Удалить(ИсключаемыеТипы.Количество() - 1);
			ИсключаемыеТипы.Удалить(ИсключаемыеТипы.Количество() - 1);
			ТипыДляСнятияОтражения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОтражаемыеТипы, ИсключаемыеТипы);	
			РегистрыСведений.ОтражениеДокументовВРеглУчете.ЗарегистрироватьДокументыКОтражению(НачалоМесяца(Период), КонецМесяца(Период), , ТипыДляСнятияОтражения);
		КонецЕсли;
		//-- НЕ УТ
		//-- Локализация
		
			
		
	КонецЦикла;
	
КонецПроцедуры

//++ Локализация
Функция ЗаданияКФормированиюНДС(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСПредъявленный.Организация,
	|	НДСПредъявленный.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСПредъявленный.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.Регистратор,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Регистратор,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация";
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция ДокументыРаспределенияНДС(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеНДС.Ссылка,
	|	РаспределениеНДС.Организация
	|ИЗ
	|	Документ.РаспределениеНДС КАК РаспределениеНДС
	|ГДЕ
	|	РаспределениеНДС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РаспределениеНДС.Проведен
	|	И РаспределениеНДС.ВыручкаНДС + РаспределениеНДС.ВыручкаНеНДС + РаспределениеНДС.ВыручкаЕНВД + РаспределениеНДС.ВыручкаНДС0 + РаспределениеНДС.ВыручкаНДС0СырьевыеТоварыУслуги + РаспределениеНДС.ВыручкаНДС0НесырьевыеТовары <> 0";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

//++ НЕ УТ
Функция ЗаданияАмортизацииОС(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АмортизацияОС.Организация,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	РегистрНакопления.АмортизацияОС КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьОСОстатки.Организация,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.СтоимостьОС.Остатки(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ),) КАК СтоимостьОСОстатки";
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция ЗаданияАмортизацииНМА(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АмортизацияНМА.Организация,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	РегистрНакопления.АмортизацияНМА КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьНМАОстатки.Организация,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА.Остатки(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ),) КАК СтоимостьНМАОстатки";
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции
//-- НЕ УТ
//-- Локализация


#КонецОбласти

#Область РаботаСФайлами

Функция СоздатьФайлОтчета(ПутьКФайлу) Экспорт
	ФайлОтчета = Новый ЗаписьXML;
	ФайлОтчета.ОткрытьФайл(ПутьКФайлу);
	
	ФайлОтчета.ЗаписатьОбъявлениеXML();
	
	ФайлОтчета.ЗаписатьНачалоЭлемента("Корневой");
	Возврат ФайлОтчета;
КонецФункции

Процедура ЗаписатьФайлОтчета(ФайлОтчета)
	Если ФайлОтчета <> Неопределено Тогда
		ФайлОтчета.ЗаписатьКонецЭлемента(); // Корневой
		ФайлОтчета.Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
