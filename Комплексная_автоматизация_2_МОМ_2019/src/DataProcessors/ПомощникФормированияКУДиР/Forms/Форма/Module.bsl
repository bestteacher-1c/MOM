#Область ОписаниеПеременных

#Область ОбъявлениеПеременныхФормы
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем РезультатФоновогоЗадания;
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("Организация", Объект.Организация);
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	Если Параметры.Свойство("Период") Тогда
		Объект.НачалоПериода = НачалоМесяца(Параметры.Период);
		Объект.КонецПериода = НачалоМесяца(Параметры.Период);
	КонецЕсли;
	
	Объект.НачалоПериода = ?(ЗначениеЗаполнено(Объект.НачалоПериода), Объект.НачалоПериода, НачалоКвартала(ТекущаяДатаСеанса()));
	Объект.КонецПериода = ?(ЗначениеЗаполнено(Объект.КонецПериода), Объект.КонецПериода, КонецКвартала(ТекущаяДатаСеанса()));
	
	ПоказатьПоясненияКЭтапам = Истина;
	
	ПредставлениеНачалаПериода = Формат(Объект.НачалоПериода, "ДФ='MMMM yyyy'");
	ПредставлениеКонцаПериода = Формат(Объект.КонецПериода, "ДФ='MMMM yyyy'");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСтраницыВыполненияЗаданий();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("Период") И ЗначениеЗаполнено(Параметры.Период) Тогда
		Объект.НачалоПериода = НачалоМесяца(Параметры.Период);
		Объект.КонецПериода = НачалоМесяца(Параметры.Период);
	КонецЕсли;	
	
	ПредставлениеНачалаПериода = Формат(Объект.НачалоПериода, "ДФ='MMMM yyyy'");
	ПредставлениеКонцаПериода = Формат(Объект.КонецПериода, "ДФ='MMMM yyyy'");
	
	УправлениеФормой();
	УстановитьЗаголовокКомандыИВидимостьПояснений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийПараметров

&НаКлиенте
Процедура КонецПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПомощникФормированияКУДиР.Форма.ВыборПериода", ПараметрыВыбора, Элемент, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, Объект.КонецПериода, ПредставлениеКонцаПериода);
	УстановитьНачалоПериодаНаОснованииКонцаПериода();
	ЗаполнитьСведенияОНалоговомПериоде();
	Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = ОтчетЗаРасширенныйНалоговыйПериод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой();
	ОбновитьСтраницыВыполненияЗаданий();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПодготовкиДанных

&НаКлиенте
Процедура ДекорацияНастройкаПризнанияСтатейРасходовНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФО = Новый Структура("Период, Организация", Объект.НачалоПериода, Объект.Организация);
	ПараметрыФормы.Вставить("ПараметрыФункциональныхОпций", ПараметрыФО);
	ОткрытьФорму("ПланВидовХарактеристик.СтатьиРасходов.ФормаСписка", ПараметрыФормы, ЭтотОбъект, "НастройкаПризнанияСтатейРасходов_"+ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаГруппНоменклатурыНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ДатаОкончанияПериода", Новый СтандартнаяДатаНачала(Объект.КонецПериода));
	ПараметрыФормы.Вставить("МассивВидовСчетовРеглУчета", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.ВидыСчетовРеглУчета.НаСкладе")));
	МассивСкрываемыхЭлементов = Новый Массив;
	МассивСкрываемыхЭлементов.Добавить("СчетаУчетаНоменклатурыСтатьяДоходовОСНО");
	МассивСкрываемыхЭлементов.Добавить("ОбщиеСчетаУчетаНоменклатурыСтатьяДоходовОСНО");
	МассивСкрываемыхЭлементов.Добавить("СчетаУчетаНоменклатурыСтатьяДоходовЕНВД");
	МассивСкрываемыхЭлементов.Добавить("ОбщиеСчетаУчетаНоменклатурыСтатьяДоходовЕНВД");
	ПараметрыФормы.Вставить("МассивСкрываемыхЭлементов", МассивСкрываемыхЭлементов);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаНастройки", ПараметрыФормы, ЭтотОбъект, "НастройкаГруппНоменклатуры_"+ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПризнаниеРасходовНажатие(Элемент)
	
	СтруктураПериод = Новый Структура("ДатаНачала, ДатаОкончания",
		НачалоМесяца(Объект.НачалоПериода), КонецМесяца(Объект.КонецПериода));
	ПараметрыФормы = Новый Структура("Период, ДатаОкончанияПериода",
		СтруктураПериод, КонецМесяца(Объект.КонецПериода));
	ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН");
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация, ТипОперации", Объект.Организация, ТипОперации));
	ОткрытьФорму("Документ.РегламентнаяОперация.Форма.ФормаСписка", ПараметрыФормы, Элемент, "ПросмотрРеглОперацийПризнанияРасходовУСН_"+ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПризнаниеРасходовОтменитьНажатие(Элемент)
	ОтменитьЗадание(РезультатФоновогоЗадания.ИдентификаторЗадания);
	ОтключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания");
	СтатусАвтоматическогоПризнанияРасходов = 0;
	ОбновитьСтраницыВыполненияЗаданий();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПризнаниеРасходовНажатие(Элемент)
	ЗапуститьВыполнениеФоновогоЗадания("ПризнаниеРасходов", СтатусАвтоматическогоПризнанияРасходов);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетНалогаНажатие(Элемент)
	ЗапуститьВыполнениеФоновогоЗадания("РасчетНалога", СтатусРасчетаНалога);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасчетНалогаНажатие(Элемент)
	
	СтруктураПериод = Новый Структура("ДатаНачала, ДатаОкончания",
		НачалоМесяца(Объект.НачалоПериода), КонецМесяца(Объект.КонецПериода));
	ПараметрыФормы = Новый Структура("Период, ДатаОкончанияПериода",
		СтруктураПериод, КонецМесяца(Объект.КонецПериода));
	ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетНалогаУСН");
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация, ТипОперации", Объект.Организация, ТипОперации));
	ОткрытьФорму("Документ.РегламентнаяОперация.Форма.ФормаСписка", ПараметрыФормы, Элемент, "ПросмотрРеглОперацийРасчетНалогаУСН_"+ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетНалогаОтменитьНажатие(Элемент)
	ОтменитьЗадание(РезультатФоновогоЗадания.ИдентификаторЗадания);
	ОтключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания");
	СтатусРасчетаНалога = 0;
	ОбновитьСтраницыВыполненияЗаданий();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСторноДоходовОтменитьНажатие(Элемент)
	ОтменитьЗадание(РезультатФоновогоЗадания.ИдентификаторЗадания);
	ОтключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания");
	СтатусСторноДоходов = 0;
	ОбновитьСтраницыВыполненияЗаданий();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСторноДоходовНажатие(Элемент)
	ЗапуститьВыполнениеФоновогоЗадания("СторноДоходов", СтатусСторноДоходов);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаКорректировкиОтраженияНажатие(Элемент)
	Период = Новый СтандартныйПериод(Объект.НачалоПериода, КонецМесяца(Объект.КонецПериода));
	ПараметрыФормы = Новый Структура("Организация, Период", Объект.Организация, Период);
	ОткрытьФорму("Обработка.ПомощникФормированияКУДиР.Форма.ФормаНастройкиПризнанияОпераций", ПараметрыФормы, ЭтотОбъект, "НастройкаКорректировкиОтражения_"+ЭтотОбъект.УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПроверкиИАнализаДанных

&НаКлиенте
Процедура ДекорацияОткрытьРасходыНажатие(Элемент)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПериодОтчета", Новый СтандартныйПериод(Объект.НачалоПериода, КонецМесяца(Объект.КонецПериода)));
	ПараметрыОтчета.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	КлючУникальностиОтчета = СтрШаблон("%1:%2", "ПрочиеРасходы", Объект.Организация.УникальныйИдентификатор());

	ОткрытьФорму("Отчет.АнализРасходовПриУСН.Форма", ПараметрыФормыАнализаРасходов("ПрочиеРасходы", ПараметрыОтчета), ЭтотОбъект, КлючУникальностиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьРасходыПоСебестоимостиНажатие(Элемент)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПериодОтчета", Новый СтандартныйПериод(Объект.НачалоПериода, КонецМесяца(Объект.КонецПериода)));
	ПараметрыОтчета.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	КлючУникальностиОтчета = СтрШаблон("%1:%2", "РасходыПоСебестоимости", Объект.Организация.УникальныйИдентификатор());

	ОткрытьФорму("Отчет.АнализРасходовПриУСН.Форма", ПараметрыФормыАнализаРасходов("РасходыПоСебестоимости", ПараметрыОтчета), ЭтотОбъект, КлючУникальностиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьРасходыПоАмортизацииНажатие(Элемент)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПериодОтчета", Новый СтандартныйПериод(Объект.НачалоПериода, КонецМесяца(Объект.КонецПериода)));
	ПараметрыОтчета.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	КлючУникальностиОтчета = СтрШаблон("%1:%2", "РасходыПоАмортизации", Объект.Организация.УникальныйИдентификатор());

	ОткрытьФорму("Отчет.АнализРасходовПриУСН.Форма", ПараметрыФормыАнализаРасходов("РасходыПоАмортизации", ПараметрыОтчета), ЭтотОбъект, КлючУникальностиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьСписокЗаписейКУДиРНажатие(Элемент)
	ОтборСпискаДокументов = Новый Структура("Организация, Дата", Объект.Организация, Объект.НачалоПериода);
	ПараметрыСпискаДокументов = Новый Структура("Отбор, РежимОтбораПоДате", ОтборСпискаДокументов, "СДаты");
	ОткрытьФорму("Документ.ЗаписьКУДиР.ФормаСписка", ПараметрыСпискаДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьРасходыПоМатериаламНажатие(Элемент)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПериодОтчета", Новый СтандартныйПериод(Объект.НачалоПериода, КонецМесяца(Объект.КонецПериода)));
	ПараметрыОтчета.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	КлючУникальностиОтчета = СтрШаблон("%1:%2", "РасходыПоМатериалам", Объект.Организация.УникальныйИдентификатор());

	ОткрытьФорму("Отчет.АнализРасходовПриУСН.Форма", ПараметрыФормыАнализаРасходов("РасходыПоМатериалам", ПараметрыОтчета), ЭтотОбъект, КлючУникальностиОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОтчетности

&НаКлиенте
Процедура ДекорацияОткрытьОтчетКнигаУчетаДоходовИРасходовНажатие(Элемент)
	ПараметрыОтчета = Новый Структура("Организация, НачалоПериода, КонецПериода");
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, Объект);
	ОткрытьФорму("Отчет.КнигаУчетаДоходовИРасходов.Форма.ФормаОтчета", ПараметрыОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьОтчетДекларацияПоУСННажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Объект.НачалоПериода);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецМесяца(Объект.КонецПериода));
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          "ФормаОтчета2014Кв1");
	ПараметрыФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417",
		РегламентированнаяОтчетностьКлиент.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());
	
	ОткрытьФорму("Отчет.РегламентированныйОтчетУСН.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьОтчетСправкаРасчетНалогаУСННажатие(Элемент)
	
	ПараметрыОтчета = Новый Структура("Организация, НачалоПериода, КонецПериода");
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, Объект);
	ОткрытьФорму("Отчет.СправкаРасчетНалогаУСН.ФормаОбъекта", ПараметрыОтчета);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоясненияКЭтапам(Команда)
	
	ПоказатьПоясненияКЭтапам = Не ПоказатьПоясненияКЭтапам;
	
	УстановитьЗаголовокКомандыИВидимостьПояснений();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	УправлениеФормой();
	ОбновитьСтраницыВыполненияЗаданий();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормой

&НаСервере
Процедура УправлениеФормой()
	
	УстановитьСписокОрганизацийНаУСНЗаПериод(Объект.НачалоПериода, КонецМесяца(Объект.КонецПериода), Элементы.Организация.СписокВыбора, Объект.Организация);
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Объект.Организация, Объект.НачалоПериода);
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.КонецПериода);
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.КонецПериода);
	
	Если ЗначениеЗаполнено(Объект.Организация) И ПрименяетсяУСН Тогда
		ПредставлениеОбъектаНалогообложения = НСтр("ru = 'Используется объект налогообложения ""Доходы%1"".'");
		ПредставлениеОбъектаНалогообложения = СтрШаблон(ПредставлениеОбъектаНалогообложения,
			?(ПрименяетсяУСНДоходыМинусРасходы, НСтр("ru = ', уменьшенные на величину расходов'"), ""));
	Иначе
		ПредставлениеОбъектаНалогообложения = ?(ПрименяетсяУСН, НСтр("ru = 'Не выбрана организация.'"),
			НСтр("ru = 'Нет организаций, использующих УСН.'"));	
	КонецЕсли;
	
	Элементы.ГруппаОсновная.Видимость = ПрименяетсяУСН;
	Элементы.ГруппаПодготовкаСтатьиРасходов.Видимость = ПрименяетсяУСНДоходыМинусРасходы;
	Элементы.ГруппаПодготовкаПорядкаУчетаНоменклатуры.Видимость = ПрименяетсяУСНДоходыМинусРасходы;
	Элементы.ГруппаПроверкаРасходы.Видимость = ПрименяетсяУСНДоходыМинусРасходы;
	Элементы.ГруппаПодготовкаАвтоматическоеПризнаниеРасходов.Видимость = ПрименяетсяУСНДоходыМинусРасходы;
	Элементы.ГруппаПодготовкаДанныхСторноДоходов.Видимость = ПрименяетсяУСН;
	Элементы.ДекорацияОткрытьОтчетКнигаУчетаДоходовИРасходов.Видимость = ПравоДоступа("Просмотр", Метаданные.Отчеты.КнигаУчетаДоходовИРасходов);
	Элементы.ДекорацияОткрытьОтчетСправкаРасчетНалогаУСН.Видимость = ПравоДоступа("Просмотр", Метаданные.Отчеты.СправкаРасчетНалогаУСН);
	Элементы.ДекорацияОткрытьОтчетДекларацияПоУСН.Видимость = ПравоДоступа("Просмотр", Метаданные.Отчеты.РегламентированныйОтчетУСН)
		И ПравоДоступа("Чтение", Метаданные.Справочники.РегламентированныеОтчеты);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачалоРасчетаОперацийПоУСН = УчетУСНСервер.НачалоРасчетаОперацийПоУСН(Объект.КонецПериода, Объект.Организация);
	СтатусАвтоматическогоПризнанияРасходов = ?(НачалоРасчетаОперацийПоУСН.НачалоРасчетаПризнаниеРасходовПриУСН > КонецМесяца(Объект.КонецПериода), 2, 0);
	СтатусСторноДоходов = ?(НачалоРасчетаОперацийПоУСН.НачалоРасчетаСторноДоходовКУДиР > КонецМесяца(Объект.КонецПериода), 2, 0);
	
	Если НачалоРасчетаОперацийПоУСН.НачалоРасчетаПризнаниеРасходовПриУСН < Объект.НачалоПериода Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выполнено признание расходов начиная с периода: %1 г. Признание расходов в текущем периоде невозможно.'");
		МесяцНачалаРасчета = Формат(НачалоРасчетаОперацийПоУСН.НачалоРасчетаПризнаниеРасходовПриУСН, "ДФ='ММММ гггг'");
		ПредупреждениеБолееРаннегоПризнания = СтрШаблон(ТекстПредупреждения, МесяцНачалаРасчета);
		СтатусАвтоматическогоПризнанияРасходов = 3;
	Иначе
		ПредупреждениеБолееРаннегоПризнания = "";
	КонецЕсли;
	
	Если НачалоРасчетаОперацийПоУСН.НачалоРасчетаСторноДоходовКУДиР < Объект.НачалоПериода Тогда
		ТекстПредупреждения = НСтр("ru = 'Изменены взаиморасчеты с клиентами начиная с периода: %1 г. Доходы в Книге учета доходов и расходов могут быть не актуальными.'");
		МесяцНачалаРасчета = Формат(НачалоРасчетаОперацийПоУСН.НачалоРасчетаСторноДоходовКУДиР, "ДФ='ММММ гггг'");
		ПредупреждениеБолееРаннегоСторно = СтрШаблон(ТекстПредупреждения, МесяцНачалаРасчета);
	Иначе
		ПредупреждениеБолееРаннегоСторно = "";
	КонецЕсли;
	
	Элементы.ГруппаПредупреждениеОНеобходимостиБолееРаннегоПризнания.Видимость = ЗначениеЗаполнено(ПредупреждениеБолееРаннегоПризнания);
	Элементы.ГруппаПредупреждениеОНеобходимостиБолееРаннегоСторно.Видимость = ЗначениеЗаполнено(ПредупреждениеБолееРаннегоСторно);
	
	НеобходимРасчетНалогаПриУСН = КонецМесяца(Объект.КонецПериода) = КонецКвартала(Объект.КонецПериода)
		И НачалоРасчетаОперацийПоУСН.НачалоРасчетаНалогаУСН <= КонецМесяца(Объект.КонецПериода);
	СтатусРасчетаНалога = ?(НеобходимРасчетНалогаПриУСН, 0, 2);
	
	ЗаполнитьСведенияОНалоговомПериоде();
	Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = ОтчетЗаРасширенныйНалоговыйПериод(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКомандыИВидимостьПояснений()
	
	Если ПоказатьПоясненияКЭтапам Тогда
		Элементы.ФормаПоясненияКЭтапам.Заголовок = НСтр("ru = 'Скрыть пояснения к этапам'");
	Иначе
		Элементы.ФормаПоясненияКЭтапам.Заголовок = НСтр("ru = 'Показать пояснения к этапам'");
	КонецЕсли;
	
	Для каждого ЭлементФормы Из Элементы Цикл
		Если Тип(ЭлементФормы) = Тип("ГруппаФормы") И СтрНачинаетсяС(ЭлементФормы.Имя, "ГруппаПояснение") Тогда
			ЭлементФормы.Видимость = ПоказатьПоясненияКЭтапам;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСписокОрганизацийНаУСНЗаПериод(НачалоПериода, КонецПериода, СписокОрганизаций, ТекущаяОрганизация)
	
	Обработки.ПомощникФормированияКУДиР.УстановитьСписокОрганизацийНаУСНЗаПериод(СписокОрганизаций, НачалоПериода, КонецПериода, ТекущаяОрганизация);		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницыВыполненияЗаданий()
	
	#Область ПризнаниеРасходов
	Если СтатусАвтоматическогоПризнанияРасходов = 0 Тогда // Не выполнено
		
		Элементы.КартинкиПризнаниеРасходов.ТекущаяСтраница = Элементы.ПризнаниеРасходовНеВыполнено;
		Элементы.ДействияПризнаниеРасходов.ТекущаяСтраница = Элементы.ДействиеПризнаниеРасходовВыполнить;
		
	ИначеЕсли СтатусАвтоматическогоПризнанияРасходов = 1 Тогда // Выполняется
		
		Элементы.КартинкиПризнаниеРасходов.ТекущаяСтраница = Элементы.ПризнаниеРасходовВыполняется;
		Элементы.ДействияПризнаниеРасходов.ТекущаяСтраница = Элементы.ДействиеПризнаниеРасходовВыполняется;
		
	ИначеЕсли СтатусАвтоматическогоПризнанияРасходов = 2 Тогда // Выполнено
		
		Элементы.КартинкиПризнаниеРасходов.ТекущаяСтраница = Элементы.ПризнаниеРасходовВыполненоУспешно;
		Элементы.ДействияПризнаниеРасходов.ТекущаяСтраница = Элементы.ДействиеПризнаниеРасходовВыполнить;
		
	ИначеЕсли СтатусАвтоматическогоПризнанияРасходов = 3 Тогда // Ожидает выполнения признания расходов предыдущих кварталов
		
		Элементы.КартинкиПризнаниеРасходов.ТекущаяСтраница = Элементы.ПризнаниеРасходовОжидается;
		Элементы.ДействияПризнаниеРасходов.ТекущаяСтраница = Элементы.ДействиеПризнаниеРасходовОжидается;
		
	КонецЕсли;	
	#КонецОбласти
	
	#Область СторноДоходов
	Если СтатусСторноДоходов = 0 Тогда // Не выполнено
		
		Элементы.КартинкиСторноДоходов.ТекущаяСтраница = Элементы.СторноДоходовНеВыполнено;
		Элементы.ДействияСторноДоходов.ТекущаяСтраница = Элементы.ДействиеСторноДоходовВыполнить;
		
	ИначеЕсли СтатусСторноДоходов = 1 Тогда // Выполняется
		
		Элементы.КартинкиСторноДоходов.ТекущаяСтраница = Элементы.СторноДоходовВыполняется;
		Элементы.ДействияСторноДоходов.ТекущаяСтраница = Элементы.ДействиеСторноДоходовВыполняется;
		
	ИначеЕсли СтатусСторноДоходов = 2 Тогда // Выполнено
		
		Элементы.КартинкиСторноДоходов.ТекущаяСтраница = Элементы.СторноДоходовВыполненоУспешно;
		Элементы.ДействияСторноДоходов.ТекущаяСтраница = Элементы.ДействиеСторноДоходовВыполнить;
		
	ИначеЕсли СтатусСторноДоходов = 3 Тогда // Ожидает выполнения сторно доходов предыдущих кварталов
		
		Элементы.КартинкиСторноДоходов.ТекущаяСтраница = Элементы.СторноДоходовОжидается;
		Элементы.ДействияСторноДоходов.ТекущаяСтраница = Элементы.ДействиеСторноДоходовОжидается;
		
	КонецЕсли;	
	#КонецОбласти
	
	#Область НачислениеНалога
	
	ПояснениеРасчетНалога = ПояснениеРасчетаНалога(Объект.КонецПериода, СтатусАвтоматическогоПризнанияРасходов, СтатусСторноДоходов);
		
	Если Не КонецМесяца(Объект.КонецПериода) = КонецКвартала(Объект.КонецПериода) Тогда // не требуется если конец периода не является концом квартала
		
		Элементы.КартинкиРасчетНалога.ТекущаяСтраница = Элементы.РасчетНалогаНеТребуется;
		Элементы.ДействияРасчетНалога.ТекущаяСтраница = Элементы.ДействиеРасчетНалогаНеТребуется;
		
	ИначеЕсли Не СтатусАвтоматическогоПризнанияРасходов = 2 И Элементы.ГруппаПодготовкаАвтоматическоеПризнаниеРасходов.Видимость
		ИЛИ Не СтатусСторноДоходов = 2 И Элементы.ГруппаПодготовкаДанныхСторноДоходов.Видимость Тогда // Ожидает выполнения признания расходов или сторно доходов
		
		Элементы.КартинкиРасчетНалога.ТекущаяСтраница = Элементы.РасчетНалогаОжидается;
		Элементы.ДействияРасчетНалога.ТекущаяСтраница = Элементы.ДействиеРасчетНалогаОжидается;
		
	ИначеЕсли СтатусРасчетаНалога = 0 Тогда // Не выполнено
		
		Элементы.КартинкиРасчетНалога.ТекущаяСтраница = Элементы.РасчетНалогаНеВыполнен;
		Элементы.ДействияРасчетНалога.ТекущаяСтраница = Элементы.ДействиеРасчетНалогаВыполнить;
		
	ИначеЕсли СтатусРасчетаНалога = 1 Тогда // Выполняется
		
		Элементы.КартинкиРасчетНалога.ТекущаяСтраница = Элементы.РасчетНалогаВыполняется;
		Элементы.ДействияРасчетНалога.ТекущаяСтраница = Элементы.ДействиеРасчетНалогаВыполняется;
		
	ИначеЕсли СтатусРасчетаНалога = 2 Тогда // Выполнено
		
		Элементы.КартинкиРасчетНалога.ТекущаяСтраница = Элементы.РасчетНалогаВыполненУспешно;
		Элементы.ДействияРасчетНалога.ТекущаяСтраница = Элементы.ДействиеРасчетНалогаВыполнить;
		
	КонецЕсли;
	
	#КонецОбласти
			
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеФоновогоЗадания

&НаКлиенте
Процедура ЗапуститьВыполнениеФоновогоЗадания(ИмяЗадания, СтатусВыполнения)
	
	ПараметрыФоновогоЗадания = Новый Структура("НачДата, КонДата, Организация", Объект.НачалоПериода, КонецМесяца(Объект.КонецПериода), Объект.Организация);
	
	Попытка
		
		Если ИмяЗадания = "РасчетНалога" Тогда
			РезультатФоновогоЗадания = ВыполнитьРасчетНалогаНаСервере(УникальныйИдентификатор, ПараметрыФоновогоЗадания);
		Иначе
			Если ИмяЗадания = "ПризнаниеРасходов" Тогда
				Метод = "УчетУСНСервер.ПризнатьИОтразитьРасходыКУДиР";
				НаименованиеЗадания = НСтр("ru = 'Выполняется признание расходов по УСН'");
			Иначе
				Метод = "УчетУСНСервер.СторноДоходовКУДиР";
				НаименованиеЗадания = НСтр("ru = 'Выполняется сторно доходов в КУДиР по деятельности ЕНВД'");
			КонецЕсли;
			РезультатФоновогоЗадания = ВыполнитьРегламентныеОперацииНаСервере(УникальныйИдентификатор, ПараметрыФоновогоЗадания, Метод, НаименованиеЗадания);
		КонецЕсли;
		
		ОжидатьВыполнения = Не РезультатФоновогоЗадания.ЗаданиеВыполнено;
		СтатусВыполнения = ?(РезультатФоновогоЗадания.ЗаданиеВыполнено, 2, 1);

	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОжидатьВыполнения = Ложь;
		СтатусВыполнения = 0;
		
	КонецПопытки;
	
	Если ИмяЗадания = "ПризнаниеРасходов" Тогда
		СтатусАвтоматическогоПризнанияРасходов = СтатусВыполнения;
		// После признания расходов расчет налога всегда не выполнен, в виду того что регламентная операция признания расходов
		// в начале очищает свои движения (то есть записывает пустой регистр) и лишь затем заполняет его.
		СтатусРасчетаНалога = 0;
		ОбновитьСтраницыВыполненияЗаданий();
	ИначеЕсли ИмяЗадания = "СторноДоходов" Тогда
		СтатусСторноДоходов = СтатусВыполнения;
		// После сторно доходов расчет налога всегда не выполнен, в виду того что регламентная операция сторно доходов
		// в начале очищает свои движения (то есть записывает пустой регистр) и лишь затем заполняет его.
		СтатусРасчетаНалога = 0;
		ОбновитьСтраницыВыполненияЗаданий();
	Иначе
		СтатусРасчетаНалога = СтатусВыполнения;
		ОбновитьСтраницыВыполненияЗаданий();
	КонецЕсли;
	
	Если ОжидатьВыполнения Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);

КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьЗадание(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеФоновогоЗадания()

	Попытка
		ЗаданиеЗавершено = ЗаданиеВыполнено(РезультатФоновогоЗадания.ИдентификаторЗадания);
		СтатусВыполнения = ?(ЗаданиеЗавершено, 2, 1);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		СтатусВыполнения = 0;
		ЗаданиеЗавершено = Истина;
	КонецПопытки;
	
	Если ЗаданиеЗавершено Тогда
			
		ОтключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания");
		ПараметрыОбработчикаОжидания = Неопределено;
		РезультатФоновогоЗадания = Неопределено;
		
		Если СтатусАвтоматическогоПризнанияРасходов = 1 Тогда
			СтатусАвтоматическогоПризнанияРасходов = СтатусВыполнения;
			// После признания расходов расчет налога всегда не выполнен, в виду того что регламентная операция признания расходов
			// в начале очищает свои движения (то есть записывает пустой регистр) и лишь затем заполняет его.
			СтатусРасчетаНалога = 0;
			ОбновитьСтраницыВыполненияЗаданий();
		ИначеЕсли СтатусСторноДоходов = 1 Тогда
			СтатусСторноДоходов = СтатусВыполнения;
			// После сторно доходов расчет налога всегда не выполнен, в виду того что регламентная операция сторно доходов
			// в начале очищает свои движения (то есть записывает пустой регистр) и лишь затем заполняет его.
			СтатусРасчетаНалога = 0;
			ОбновитьСтраницыВыполненияЗаданий();
		ИначеЕсли СтатусРасчетаНалога = 1 Тогда
			СтатусРасчетаНалога = СтатусВыполнения;
			ОбновитьСтраницыВыполненияЗаданий();
		КонецЕсли;
			
	Иначе
		
		ОтключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания");
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическоеПризнаниеРасходов

&НаСервереБезКонтекста
Функция ВыполнитьРегламентныеОперацииНаСервере(УникальныйИдентификатор, ПараметрыЭкспортнойПроцедуры, Метод, ИмяЗадания)
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, Метод, ПараметрыЭкспортнойПроцедуры, ИмяЗадания);
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

#КонецОбласти

#Область РасчетНалога

&НаСервереБезКонтекста
Функция ВыполнитьРасчетНалогаНаСервере(УникальныйИдентификатор, ПараметрыЭкспортнойПроцедуры, ПредставлениеРасчетаНалога = Неопределено)
	
	Если ПредставлениеРасчетаНалога = Неопределено Тогда
		ПредставлениеРасчетаНалога = НСтр("ru = 'расчет налога при УСН'");
	КонецЕсли;
	
	НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Выполняется %1'"), ПредставлениеРасчетаНалога);
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, 
		"УчетУСНСервер.НачислитьНалогУСН", ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания);
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Функция ПояснениеРасчетаНалога(КонецПериода, СтатусПризнания, СтатусСторно)
	
	Если Не КонецМесяца(КонецПериода) = КонецКвартала(КонецПериода) Тогда
		
		Результат = НСтр("ru = 'Расчет начисления налога при УСН возможен только в конце квартала'");
		
	ИначеЕсли Не СтатусСторно = 2 Тогда
		
		Результат = НСтр("ru = 'Расчет начисления налога при УСН требует выполнения операции сторно доходов'");
		
	ИначеЕсли Не СтатусПризнания = 2 Тогда
		
		Результат = НСтр("ru = 'Расчет начисления налога при УСН требует выполнения операции признания расходов'");

	ИначеЕсли КонецКвартала(КонецПериода) = КонецГода(КонецПериода) Тогда
		
		Результат = НСтр("ru = 'Расчет начисления налога при УСН за %1 год'");
		
		Результат = СтрШаблон(Результат, Формат(КонецПериода, "ДФ=гггг"));
		
	ИначеЕсли КонецМесяца(КонецПериода) = КонецКвартала(КонецПериода) Тогда
		
		Результат = НСтр("ru = 'Расчет авансового платежа при УСН за %1'");
		
		Результат = СтрШаблон(Результат, ПредставлениеПериода(НачалоГода(КонецПериода), КонецКвартала(КонецПериода), "ФП = Истина"));
		
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Результат, 2);
		Результат = Результат + НСтр("ru = 'года'");
		
	Иначе
		
		Результат = "";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.КонецПериода = НачалоМесяца(РезультатВыбора.КонецПериода);
	УстановитьНачалоПериодаНаОснованииКонцаПериода();
	ПредставлениеКонцаПериода = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.КонецПериода);
	ЗаполнитьСведенияОНалоговомПериоде();
	Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = ОтчетЗаРасширенныйНалоговыйПериод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНачалоПериодаНаОснованииКонцаПериода()
	
	НовоеНачалоПериода = НачалоКвартала(Объект.КонецПериода);
	Если Не НовоеНачалоПериода = Объект.НачалоПериода ИЛИ Объект.НачалоПериода > Объект.КонецПериода Тогда
		Объект.НачалоПериода = НовоеНачалоПериода;
		ПредставлениеНачалаПериода = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.НачалоПериода);
	КонецЕсли;
	УправлениеФормой();
	ОбновитьСтраницыВыполненияЗаданий();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыФормыАнализаРасходов(КлючВарианта, Параметры)
	
	НастройкаРасшифровкиАнализаРасхода = Отчеты.АнализРасходовПриУСН.ПолучитьНастройкиОтчетаПоОтбору(Параметры, КлючВарианта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", КлючВарианта);
	ПараметрыФормы.Вставить("КлючПользовательскихНастроек", КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", НастройкаРасшифровкиАнализаРасхода.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкаРасшифровкиАнализаРасхода.ФиксированныеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтчетЗаРасширенныйНалоговыйПериод(Форма)
	
	Возврат Форма.НалоговыйПериодПропущен
		ИЛИ (Форма.НалоговыйПериодРасширен И Форма.Объект.НачалоПериода = НачалоГода(Форма.Объект.НачалоПериода));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОНалоговомПериоде()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ДатаНачалаДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ДатаРегистрации");
	Иначе
		ДатаНачалаДеятельности = '0001-01-01';
	КонецЕсли;
	
	НалоговыйПериодРасширен = УчетУСНСервер.НалоговыйПериодРасширен(Объект.Организация,
		Объект.КонецПериода, ДатаНачалаДеятельности);
	НалоговыйПериодПропущен = УчетУСНСервер.НалоговыйПериодПропущен(Объект.Организация,
		Объект.КонецПериода, ДатаНачалаДеятельности);
	
	НачалоНалоговогоПериода = ?(НалоговыйПериодРасширен, НачалоДня(ДатаНачалаДеятельности), НачалоГода(Объект.КонецПериода));
	
	Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ПояснениеПереносНалоговогоПериода();
	
КонецПроцедуры

&НаСервере
Функция ПояснениеПереносНалоговогоПериода()
	
	ФорматнаяСтрокаПериода = "ДЛФ=D";
	
	Если НалоговыйПериодПропущен Тогда
		
		ГодОтчета = Год(Объект.КонецПериода);
		
		ШаблонПодсказки = НСтр("ru = 'Сформированные данные с даты регистрации %2 по %3 включатся в отчет за %4 год. Так как книгу доходов и расходов за %1 год формировать не нужно.'");
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказки,
			Формат(ГодОтчета, "ЧГ=0"),
			Формат(НачалоНалоговогоПериода, ФорматнаяСтрокаПериода),
			Формат(КонецГода(НачалоНалоговогоПериода), ФорматнаяСтрокаПериода),
			Формат(ГодОтчета + 1, "ЧГ=0"));
		
	ИначеЕсли НалоговыйПериодРасширен Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В книгу учета доходов и расходов с %1 включатся также данные и с даты регистрации %2 организации %3.'"),
				Формат(Объект.НачалоПериода, ФорматнаяСтрокаПериода),
				Формат(НачалоНалоговогоПериода, ФорматнаяСтрокаПериода),
				Объект.Организация);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти