
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ОтображатьНастройкиСчетовУчета = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	//++ НЕ УТ
	ОтображатьНастройкиСчетовУчета = ОтображатьНастройкиСчетовУчета И ПравоДоступа("Просмотр",  Метаданные.ПланыСчетов.Хозрасчетный);
	//-- НЕ УТ
	Элементы.ГруппаОтражениеВРеглУчете.Видимость = ОтображатьНастройкиСчетовУчета;
	//++ НЕ УТ
	ДоступныеСчетаУчетаРасчетов();
	//-- НЕ УТ
	
	Элементы.ГруппаОтражениеВМеждународномУчете.Видимость = Ложь;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Возврат; // в УТ11 обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	//++ НЕ УТ
	ПолучитьСостояниеНастройкиСчетовРеглУчетаПоОрганизациям();
	//-- НЕ УТ
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСчетаРеглУчетаПоОрганизациям(Команда)
	
	//++ НЕ УТ
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросЗаписиОбъекта", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать объект. Записать?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		Возврат;
	КонецЕсли;
	ОткрытьФормуНастройкиСчетовРеглУчетаПоОрганизациям();
	//-- НЕ УТ
	
	Возврат; // Чтобы в УТ был не пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	МассивПрименимость = Новый Массив;
	
	ИспользоватьКомиссиюПриЗакупках               = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках");
	ИспользоватьКомиссиюПриПродажах               = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах");
	ИспользоватьПередачиТоваровМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями");
	ИспользоватьДоговорыКредитовИДепозитов        = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов");
	ИспользоватьДоговорыЛизинга                   = Ложь;
	//++ НЕ УТ
	ИспользоватьДоговорыЛизинга                   = ПолучитьФункциональнуюОпцию("ИспользоватьЛизинг");
	//-- НЕ УТ
	
	СписокВыбора = Элементы.Применимость.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(1, НСтр("ru = 'клиентами'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'поставщиками'"));
	Если ИспользоватьКомиссиюПриПродажах 
		 ИЛИ ИспользоватьПередачиТоваровМеждуОрганизациями
		 ИЛИ Объект.РасчетыСКомиссионерами Тогда
		СписокВыбора.Добавить(3, НСтр("ru = 'комиссионерами / агентами'"));
	КонецЕсли;
	Если ИспользоватьКомиссиюПриЗакупках 
		ИЛИ ИспользоватьПередачиТоваровМеждуОрганизациями
		ИЛИ Объект.РасчетыСКомитентами Тогда
		СписокВыбора.Добавить(4, НСтр("ru = 'комитентами / принципалами'"));
	КонецЕсли;
	Если ИспользоватьДоговорыКредитовИДепозитов
		ИЛИ Объект.РасчетыСДебиторами Тогда
		СписокВыбора.Добавить(6, НСтр("ru = 'дебиторами по депозитам, займам'"));
	КонецЕсли;
	Если ИспользоватьДоговорыКредитовИДепозитов 
		ИЛИ Объект.РасчетыСКредиторами Тогда
		СписокВыбора.Добавить(5, НСтр("ru = 'кредиторами по кредитам, займам'"));
	КонецЕсли;
	Если ИспользоватьДоговорыЛизинга 
		ИЛИ Объект.РасчетыСЛизингодателями Тогда
		СписокВыбора.Добавить(7, НСтр("ru = 'лизингодателями'"));
	КонецЕсли;
	
	Если Объект.РасчетыСКлиентами Тогда
		МассивПрименимость.Добавить(1);
	КонецЕсли;
	Если Объект.РасчетыСПоставщиками Тогда
		МассивПрименимость.Добавить(2);
	КонецЕсли;
	Если Объект.РасчетыСКомиссионерами Тогда
		МассивПрименимость.Добавить(3);
	КонецЕсли;
	Если Объект.РасчетыСКомитентами Тогда
		МассивПрименимость.Добавить(4);
	КонецЕсли;
	Если Объект.РасчетыСКредиторами Тогда
		МассивПрименимость.Добавить(5);
	КонецЕсли;
	Если Объект.РасчетыСДебиторами Тогда
		МассивПрименимость.Добавить(6);
	КонецЕсли;
	Если Объект.РасчетыСЛизингодателями Тогда
		МассивПрименимость.Добавить(7);
	КонецЕсли;
	
	Если МассивПрименимость.Количество() = 1 Тогда
		Применимость = МассивПрименимость[0];
	Иначе
		Применимость = 0;
		МассивПодстрок = Новый Массив;
		Для каждого Элемент Из МассивПрименимость Цикл
			ЭлементСписка = СписокВыбора.НайтиПоЗначению(Элемент);
			Если ЭлементСписка <> Неопределено Тогда
				МассивПодстрок.Добавить(ЭлементСписка.Представление);
			КонецЕсли;
		КонецЦикла;
		СписокВыбора.Добавить(0, СтрСоединить(МассивПодстрок, ", "));
	КонецЕсли;
	
	//++ НЕ УТ
	НастройкаЭлементовСчетовУчета();
	//-- НЕ УТ
	
КонецПроцедуры

//++ НЕ УТ

&НаКлиенте
Процедура ОбработкаВопросЗаписиОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		ОткрытьФормуНастройкиСчетовРеглУчетаПоОрганизациям();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСчетовРеглУчетаПоОрганизациям()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ГруппаФинансовогоУчета", Объект.Ссылка);
	СтруктураРасчетов = Новый Структура("РасчетыСКлиентами,РасчетыСПоставщиками,РасчетыСКомиссионерами,
	|РасчетыСКомитентами,РасчетыСКредиторами,РасчетыСДебиторами,РасчетыСЛизингодателями");
	ЗаполнитьЗначенияСвойств(СтруктураРасчетов, Объект);
	ПараметрыФормы.Вставить("Расчеты", СтруктураРасчетов);	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеНастройкиСчетовРеглУчетаПоОрганизациям", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ПорядокОтраженияРасчетовСПартнерами.Форма.ФормаНастройки", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНастройкиСчетовРеглУчетаПоОрганизациям(Результат, ДополнительныеПараметры) Экспорт
	
	ПолучитьСостояниеНастройкиСчетовРеглУчетаПоОрганизациям();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеНастройкиСчетовРеглУчетаПоОрганизациям()
	
	ЗаголовокКоманды = НСтр("ru = 'Посмотреть настройки счетов учета по организациям'");
	
	Если ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ПорядокОтраженияРасчетовСПартнерами) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Количество
		|ИЗ
		|	РегистрСведений.ПорядокОтраженияРасчетовСПартнерами КАК ПорядокОтражения
		|ГДЕ
		|	ПорядокОтражения.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета";
		Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ЗаголовокКоманды = НСтр("ru = 'Настроить счета учета по организациям'");
		Иначе
			ЗаголовокКоманды = НСтр("ru = 'Изменить настройки счетов учета по организациям'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.РасчетыСКлиентамиНастроитьСчетаРеглУчетаПоОрганизациям.Заголовок = ЗаголовокКоманды;
	Элементы.РасчетыСПоставщикамиНастроитьСчетаРеглУчетаПоОрганизациям.Заголовок = ЗаголовокКоманды;
	Элементы.РасчетыСКомиссионерамиНастроитьСчетаРеглУчетаПоОрганизациям.Заголовок = ЗаголовокКоманды;
	Элементы.РасчетыСКомитентамиНастроитьСчетаРеглУчетаПоОрганизациям.Заголовок = ЗаголовокКоманды;
	Элементы.РасчетыСКредиторамиНастроитьСчетаРеглУчетаПоОрганизациям.Заголовок = ЗаголовокКоманды;
	Элементы.РасчетыСДебиторамиНастроитьСчетаРеглУчетаПоОрганизациям.Заголовок = ЗаголовокКоманды;
	Элементы.РасчетыСЛизингодателямиНастроитьСчетаРеглУчетаПоОрганизациям.Заголовок = ЗаголовокКоманды;
	
КонецПроцедуры

&НаСервере
Процедура ДоступныеСчетаУчетаРасчетов()
	
	Если Не ПравоДоступа("Просмотр",  Метаданные.ПланыСчетов.Хозрасчетный) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаРасчетов();
	
	// Счета учета расчетов с поставщиками.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСПоставщиками)));
	Элементы.СчетУчетаРасчетовСПоставщиками.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСПоставщикамиДолг.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСПоставщикамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСПоставщикамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКомиссионерамиДолгВознаграждение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКомитентамиДолгТовары.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаНеотфактурованныеПоставки.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСПоставщикамиНеотфактурованныеПоставки.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по авансам выданным.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаВыданным)));
	Элементы.СчетУчетаАвансовВыданных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСПоставщикамиАвансы.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовПоПретензиям.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСПоставщикамиПретензии.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКомиссионерамиАвансыВознаграждение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКомитентамиАвансыТовары.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов с клиентами.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСКлиентами)));
	Элементы.СчетУчетаРасчетовСКлиентами.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСКлиентамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКлиентамиДолг.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКлиентамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКомиссионерамиДолгТовары.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКомитентамиДолгВознаграждение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по авансам полученным.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаПолученным)));
	Элементы.СчетУчетаАвансовПолученных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКлиентамиАвансы.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКомиссионерамиАвансыТовары.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыСКомитентамиАвансыВознаграждение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по основному долгу - кредиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСКредиторамиОсновнойДолг)));
	Элементы.СчетУчетаРасчетовСКредиторамиОсновнойДолг.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСКредиторамиОсновнойДолг1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по процентам - кредиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСКредиторамиПроценты)));
	Элементы.СчетУчетаРасчетовСКредиторамиПроценты.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСКредиторамиПроценты1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по комиссии - кредиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСКредиторамиКомиссия)));
	Элементы.СчетУчетаРасчетовСКредиторамиКомиссия.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСКредиторамиКомиссия1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по основному долгу - дебиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСДебиторамиОсновнойДолг)));
	Элементы.СчетУчетаРасчетовСДебиторамиОсновнойДолг.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСДебиторамиОсновнойДолг1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по процентам - дебиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСДебиторамиПроценты)));
	Элементы.СчетУчетаРасчетовСДебиторамиКомиссия.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСДебиторамиКомиссия1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по комиссии - дебиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСДебиторамиКомиссия)));
	Элементы.СчетУчетаРасчетовСДебиторамиПроценты.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСДебиторамиПроценты1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Лизинг
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСПоставщиками)));
	Элементы.СчетУчетаРасчетовСЛизингодателемВыкупПредметаЛизинга.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСЛизингодателемВыкупПредметаЛизинга1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСЛизингодателемАрендныеОбязательства.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСЛизингодателемАрендныеОбязательства1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСЛизингодателемЛизинговыеУслуги.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСЛизингодателемЛизинговыеУслуги1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаВыданным)));
	Элементы.СчетУчетаРасчетовСЛизингодателемОбеспечительныйПлатеж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСЛизингодателемОбеспечительныйПлатеж1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

//-- НЕ УТ


&НаКлиенте
Процедура ПрименимостьПриИзменении(Элемент)
	
	Объект.РасчетыСКлиентами = Ложь;
	Объект.РасчетыСПоставщиками = Ложь;
	Объект.РасчетыСКомиссионерами = Ложь;
	Объект.РасчетыСКомитентами = Ложь;
	Объект.РасчетыСКредиторами = Ложь;
	Объект.РасчетыСДебиторами = Ложь;
	Объект.РасчетыСЛизингодателями = Ложь;
	
	Если Применимость = 1 Тогда
		Объект.РасчетыСКлиентами = Истина;
	ИначеЕсли Применимость = 2 Тогда
		Объект.РасчетыСПоставщиками = Истина;
	ИначеЕсли Применимость = 3 Тогда
		Объект.РасчетыСКомиссионерами = Истина;
	ИначеЕсли Применимость = 4 Тогда
		Объект.РасчетыСКомитентами = Истина;
	ИначеЕсли Применимость = 5 Тогда
		Объект.РасчетыСКредиторами = Истина;
	ИначеЕсли Применимость = 6 Тогда
		Объект.РасчетыСДебиторами = Истина;
	ИначеЕсли Применимость = 7 Тогда
		Объект.РасчетыСЛизингодателями = Истина;
	КонецЕсли;
	
	НастройкаЭлементовСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура НастройкаЭлементовСчетовУчета()
	
	Если Применимость = 0 Тогда
		Элементы.ГруппаСчетаУчетаСтраницы.ТекущаяСтраница = Элементы.СтраницаУниверсальная;
	ИначеЕсли Объект.РасчетыСКлиентами Тогда
		Элементы.ГруппаСчетаУчетаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчетыСКлиентами;
	ИначеЕсли Объект.РасчетыСПоставщиками Тогда
		Элементы.ГруппаСчетаУчетаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчетыСПоставщиками;
	ИначеЕсли Объект.РасчетыСКомитентами Тогда
		Элементы.ГруппаСчетаУчетаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчетыСКомитентами;
	ИначеЕсли Объект.РасчетыСКомиссионерами Тогда
		Элементы.ГруппаСчетаУчетаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчетыСКомиссионерами;
	ИначеЕсли Объект.РасчетыСКредиторами Тогда
		Элементы.ГруппаСчетаУчетаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчетыСКредиторами;
	ИначеЕсли Объект.РасчетыСДебиторами Тогда
		Элементы.ГруппаСчетаУчетаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчетыСДебиторами;
	ИначеЕсли Объект.РасчетыСЛизингодателями Тогда
		Элементы.ГруппаСчетаУчетаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчетыСЛизингодателями;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
