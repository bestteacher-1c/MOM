
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура устанавливает текст ячейки таблицы настроек
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма, где отображена настройка ячеек.
//  Адрес  - Строка - Адрес структуры настроек.
//
Процедура УстановитьТекстЯчейки(Форма, Адрес) Экспорт
	Перем ДопРежимФормы;
	
	УстановитьВспомогательныйТекст = Ложь;
	Если Форма.Параметры.Свойство("ПроверятьВидТаблицы") Тогда
		ВидТаблицы = Неопределено;
		Форма.Параметры.Свойство("ВидТаблицы", ВидТаблицы);
		Если ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
			ИЛИ ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
			УстановитьВспомогательныйТекст = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьВызовСервера;
	ТекущаяОбласть = Форма.ПредставлениеОтчета.Область(Адрес);
	
	Если Не УстановитьВспомогательныйТекст Тогда
		Расшифровка = ТекущаяОбласть.Расшифровка;
	КонецЕсли;

	Если УстановитьВспомогательныйТекст Тогда
		
		ТекущаяОбласть.Текст = НСтр("ru = '<значение показателя отчета>'");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Расшифровка.ЭлементОтчета)
		И НЕ ЗначениеЗаполнено(Расшифровка.ВидЭлемента) Тогда
		
		ТекущаяОбласть.Текст = НСтр("ru = '<выберите тип ячейки>'");
		
	Иначе
		
		ТекущаяОбласть.Текст = Строка(Расшифровка.ВидЭлемента);
		
		Если Расшифровка.ВидЭлемента = ВидЭлемента("ПоказательБюджетов")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("ВсеПоказателиБюджетов") Тогда
			
			Если Расшифровка.ВидЭлемента <> ВидЭлемента("ВсеПоказателиБюджетов") Тогда
				ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + " """ + 
				ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПоказательБюджетов") +
				"""";
			КонецЕсли;
			
			Показатель = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ВыводимыеПоказатели");
			ТипПоказателя = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ТипЗначенияПоказателя");
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + " (" + Показатель + ", " + ТипПоказателя + ")";
			
			ПериодСмещения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПериодСмещения");
			ЕстьНастройки = ФинансоваяОтчетностьВызовСервера.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "ЕстьНастройки");
			Если ЕстьНастройки = Истина
				ИЛИ ЗначениеЗаполнено(ПериодСмещения) Тогда
				ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + НСтр("ru = '<установлены настройки>'");
			КонецЕсли;
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("СтатьяБюджетов")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("ВсеСтатьиБюджетов") Тогда
			
			Если Расшифровка.ВидЭлемента <> ВидЭлемента("ВсеСтатьиБюджетов") Тогда
				ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + " """ + 
				ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "СтатьяБюджетов") + 
				"""";
			КонецЕсли;
			
			Показатель = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ВыводимыеПоказатели");
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + " (" + Показатель + ")";
			
			Если Форма.ИспользоватьДляВводаПлана Тогда
				ФормулаАвтозаполнения = ФинОтчеты.ЗначениеДополнительногоРеквизита(
																				Расшифровка.ЭлементОтчета, "Формула");
				Если ЗначениеЗаполнено(ФормулаАвтозаполнения) Тогда
					ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + НСтр("ru = '<настроено автозаполнение>'");
				КонецЕсли;
			Иначе
				ПериодСмещения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПериодСмещения");
				ЕстьНастройки = ФинОтчеты.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "ЕстьНастройки");
				Если ЕстьНастройки = Истина
					ИЛИ ЗначениеЗаполнено(ПериодСмещения) Тогда
					ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + НСтр("ru = '<установлены настройки>'");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("НефинансовыйПоказатель") Тогда
			
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + " """ + 
				ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "НефинансовыйПоказатель") + 
				"""";
			
			ПериодСмещения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПериодСмещения");
			ЕстьНастройки = ФинОтчеты.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "ЕстьНастройки");
			Если ЕстьНастройки = Истина
				ИЛИ ЗначениеЗаполнено(ПериодСмещения) Тогда
				ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + НСтр("ru = '<установлены настройки>'");
			КонецЕсли;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе") Тогда
			
			ВидФормулы = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ФормулаПоГруппе");
			ТекущаяОбласть.Текст = НСтр("ru = 'Формула по группе (%1)'");
			ТекущаяОбласть.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекущаяОбласть.Текст, ВидФормулы);
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("Группа")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("Измерение")
			Тогда
			
			ТекущаяОбласть.Текст = "";
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
			
			ТекущаяОбласть.Текст = "Итог";
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("РедактируемоеЗначение") Тогда
			
			ТекущаяОбласть.Текст = ПолучитьИзВременногоХранилища(Расшифровка.ЭлементОтчета).НаименованиеДляПечати;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("МонетарныйПоказатель")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель") Тогда
			
			ТекущаяОбласть.Текст = ФинОтчеты.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "НаименованиеДляПечати");
			
		Иначе
			
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + 
				ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "Формула")
				
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Функция выводит настройку сложной таблицы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма, где располагается настройка ячеек.
//  ДеревоТекущейТаблицы  - ДеревоЗначений - Дерево элементов, отображаемое в таблице настроек.
//
// Возвращаемое значение:
//   Структура   - структура размеров.
//
Функция ВывестиТаблицуНастройкиСложнойТаблицы(Форма, ДеревоТекущейТаблицы) Экспорт
	
	ГлубинаОбъединения = БюджетнаяОтчетностьРасчетКэшаСервер.РассчитатьГлубинуУровней(ДеревоТекущейТаблицы);
	
	Если Форма.ЭтоПростаяТаблица Тогда
		ПерваяСтрока = 2;
	Иначе
		ПерваяСтрока = 4;
	КонецЕсли;
	
	Форма.ПерваяСтрока = ПерваяСтрока;
	Форма.ПредставлениеОтчета.Область(,1,,1).ШиринаКолонки = 3;
	
	ДеревоКолонокТаблицы = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(ДеревоТекущейТаблицы, "ВидЭлемента", ВидЭлемента("Колонки"));
	ВысотаШапки = БюджетнаяОтчетностьВыводСервер.ГлубинаДерева(ДеревоКолонокТаблицы.Строки);
	ШиринаШапки = ВывестиДеревоВПоказатели(Форма, ПерваяСтрока, ДеревоКолонокТаблицы.Строки, 0, ВысотаШапки, 2 + ГлубинаОбъединения);
	
	мШиринаМакета = ШиринаШапки;
	мВысотаШапки = ВысотаШапки;
	
	ОбластьШапка = Форма.ПредставлениеОтчета.Область(ПерваяСтрока, 2, ПерваяСтрока + ВысотаШапки, 2 + ГлубинаОбъединения - 1);
	ОбластьШапка.Объединить();
	ОбластьШапка.ШиринаКолонки = 30;
	ОбластьШапка.Текст = "";
	Оформить(ОбластьШапка, "ЗаголовокТаблицы");
	
	Область = Форма.ПредставлениеОтчета.Область(ПерваяСтрока, 2, ПерваяСтрока + ВысотаШапки, 2 + ГлубинаОбъединения -1 + ШиринаШапки);
	Оформить(Область, "Шапка");
	
	ЭлементыТаблицы = ДанныеФормыВЗначение(Форма.ЭлементыТаблицы, Тип("ТаблицаЗначений"));
	ЭлементыТаблицы.Индексы.Добавить("Строка, Колонка");
	
	ВсегоСтрок = 0;
	ДеревоСтрокТаблицы = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(ДеревоТекущейТаблицы, "ВидЭлемента", ВидЭлемента("Строки"));
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ЭлементыТаблицы",    ЭлементыТаблицы);
	ПараметрыВывода.Вставить("ДеревоКолонок",      ДеревоКолонокТаблицы.Строки);
	ПараметрыВывода.Вставить("ПерваяСтрока",       ПерваяСтрока + ВысотаШапки);
	ПараметрыВывода.Вставить("ГлубинаОбъединения", ГлубинаОбъединения);
	
	ВывестиДеревоВСтроки(Форма,
	                     ДеревоСтрокТаблицы.Строки,
	                     ПараметрыВывода,
	                     ВсегоСтрок);
	
	мВысотаМакета = ВысотаШапки + ВсегоСтрок;
	
	// обведем всю таблицу
	Область = Форма.ПредставлениеОтчета.Область(ПерваяСтрока, 2, 
										ПерваяСтрока + ВысотаШапки + ВсегоСтрок, 2 + ГлубинаОбъединения - 1 + ШиринаШапки);
	Оформить(Область, "Шапка");
	
	Возврат Новый Структура("мШиринаМакета, мВысотаМакета, мВысотаШапки", мШиринаМакета, мВысотаМакета, мВысотаШапки);
	
КонецФункции

// Вызывается из обработчика события создания формы на сервере.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Создаваемая форма.
//
// Возвращаемое значение:
//   Структура   - данные объекта.
//
Функция ФормаПриСозданииНаСервере(Форма) Экспорт
	Перем ДанныеОбъекты;
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда
		Возврат Форма.РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Форма.АдресЭлементаВХранилище = Форма.Параметры.АдресЭлементаВХранилище;
	Записывать = НЕ ЗначениеЗаполнено(Форма.АдресЭлементаВХранилище);
	Форма.Элементы.ФормаЗаписать.Видимость   = Записывать;
	Форма.Элементы.ФормаПеречитать.Видимость = Записывать;
	Если Форма.Элементы.Найти("ФормаСкопировать") <> Неопределено Тогда
		Форма.Элементы.ФормаСкопировать.Видимость               = Записывать;
	КонецЕсли;
	Если Форма.Элементы.Найти("ФормаУстановитьПометкуУдаления") <> Неопределено Тогда
		Форма.Элементы.ФормаУстановитьПометкуУдаления.Видимость = Записывать;
	КонецЕсли;
	
	Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость                = Записывать;
	Форма.Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию        = Записывать;
	Форма.Элементы.ФормаЗавершитьРедактирование.Видимость         = НЕ Записывать;
	Форма.Элементы.ФормаЗавершитьРедактирование.КнопкаПоУмолчанию = НЕ Записывать;
	Форма.Элементы.ФормаЗавершитьРедактирование.Доступность       = НЕ Форма.ТолькоПросмотр;
	Если Не Записывать Тогда
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Заголовок = НСтр("ru = 'Завершить редактирование'");
	КонецЕсли;
	
	Если Не Записывать Тогда
		
		ДанныеОбъекта = ПолучитьИзВременногоХранилища(Форма.АдресЭлементаВХранилище);
		ТаблицыЭлемента = "ОперандыФормулы, РеквизитыВидаЭлемента, ЭлементыТаблицы, ДополнительныеПоля,
		                  |ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО, ИсточникиЗначений";
		ЗаполнитьЗначенияСвойств(Форма.Объект, ДанныеОбъекта,,ТаблицыЭлемента);
		СтруктураТаблиц = Новый Структура(ТаблицыЭлемента);
		
		Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
			
			Если КлючИЗначение.Ключ = "ОформляемыеСтроки"
				ИЛИ КлючИЗначение.Ключ = "ОформляемыеКолонки" Тогда
				Форма.Объект[КлючИЗначение.Ключ].Очистить();
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеОбъекта[КлючИЗначение.Ключ]) = Тип("ТаблицаЗначений") Тогда
				Форма.Объект[КлючИЗначение.Ключ].Загрузить(ДанныеОбъекта[КлючИЗначение.Ключ]);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ДанныеОбъекта = Форма.РеквизитФормыВЗначение("Объект");
		
	КонецЕсли;
	
	РеквизитыВидаЭлемента = Новый Структура; 
	Для Каждого ДополнительныйРеквизит Из Форма.Объект.РеквизитыВидаЭлемента Цикл
		РеквизитыВидаЭлемента.Вставить(ДополнительныйРеквизит.Реквизит.ИмяПредопределенныхДанных, ДополнительныйРеквизит.Значение);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Форма, РеквизитыВидаЭлемента);
	
	Реквизиты = Форма.ПолучитьРеквизиты();
	ЕстьКомпоновщикОтбора = Ложь;
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Имя = "Компоновщик" Тогда
			ЕстьКомпоновщикОтбора = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьКомпоновщикОтбора Тогда
		УстановитьНастройкиОтбора(Форма, Форма.Компоновщик, ДанныеОбъекта.ВидЭлемента, ДанныеОбъекта.ДополнительныйОтбор);
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Вызывается перед записью объекта в форме
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма, в которой происходит запись.
//  Объект  - СправочникОбъект.ЭлементыФинансовыхОтчетов - Записываемый объект.
//  Отказ  - Булево - Признак программной обработки.
//
Процедура ФормаПередЗаписьюНаСервере(Форма, Объект, Отказ, ДополнительныйРежим = Неопределено) Экспорт
	
	ДополнительныеРеквизиты = ФинансоваяОтчетностьВызовСервера.ПараметрыИспользованияФормы(Объект.ВидЭлемента, Объект, ДополнительныйРежим).Реквизиты;
	Объект.РеквизитыВидаЭлемента.Очистить();
	
	Для Каждого Реквизит Из ДополнительныеРеквизиты Цикл
		ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
													Объект, Реквизит.Ключ, Форма[Реквизит.Ключ])
	КонецЦикла;
	
	Объект.ЕстьНастройки = Ложь;
	Форма.Объект.ЕстьНастройки = Ложь;
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя = "Компоновщик" Тогда
			
			Настройки = Форма.Компоновщик.ПолучитьНастройки();
			Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
				Если ЭлементОтбора.Использование Тогда
					Объект.ЕстьНастройки = Истина;
					Форма.Объект.ЕстьНастройки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Объект.ДополнительныйОтбор = Новый ХранилищеЗначения(Настройки);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Форма.АдресЭлементаВХранилище) Тогда
		Отказ = Истина;
		ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(Объект, Форма.АдресЭлементаВХранилище);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает настройки поле отбора в форме
//
// Параметры:
//  Реквизиты - Массив - Массив реквизитов формы.
//  КомпоновщикПриемник - КомпоновщикНастроекКомпоновкиДанных - Поле компоновщика формы в которое устанавливается отбор.
//  ВидЭлемента  - Перечисление.ВидыЭлементовФинансовогоОтчета - Вид элемента финансового отчета.
//  ДополнительныйОтбор  - ХранилищеЗначения - Сохраненные настройки отбора.
//
Процедура УстановитьНастройкиОтбора(Реквизиты, КомпоновщикПриемник = Неопределено, ВидЭлемента, ДополнительныйОтбор) Экспорт
	
	#Область ОпределениеДоступныхПолей
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		ПоляОтбора = Новый Структура();
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			Выборка = ПолучитьВыборкуАналитикЭлемента(Реквизиты.СтатьяБюджетов);
			
		ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			Выборка = ПолучитьВыборкуАналитикЭлемента(Реквизиты.ПоказательБюджетов);
			
		Иначе
			Выборка = ПолучитьВыборкуАналитикЭлемента(Реквизиты.НефинансовыйПоказатель);
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Ключ = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Выборка.Ссылка);
			ПоляОтбора.Вставить(Ключ, Выборка.Ссылка)
		КонецЦикла;
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		ПоляОтбора = Новый Структура();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АналитикиСтатейБюджетов.Ссылка,
		|	АналитикиСтатейБюджетов.ИмяПредопределенныхДанных
		|ИЗ
		|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
		|ГДЕ
		|	НЕ АналитикиСтатейБюджетов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	АналитикиСтатейБюджетов.Наименование";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Ключ = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Выборка.Ссылка);
			ПоляОтбора.Вставить(Ключ, Выборка.Ссылка)
		КонецЦикла;
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
		И Реквизиты.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистраБухгалтерии Тогда
		ПоляОтбора = Новый Структура(Реквизиты.ИмяИзмерения);
		СхемаНастройки = СхемаОтбораПоказателя(ПоляОтбора);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
		И Реквизиты.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Субконто Тогда
		ПоляОтбора = Новый Структура("Субконто1", Реквизиты.ВидСубконто);
		СхемаНастройки = СхемаОтбораПоказателя(ПоляОтбора);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель Тогда
		ПоляОтбора = Новый Структура("Счет", Реквизиты.СчетПланаСчетов);
		СхемаНастройки = СхемаОтбораПоказателя(ПоляОтбора, Реквизиты.ТипИтога);
	Иначе
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ДополнениеОтборов
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		
		Если Реквизиты.ИспользоватьФильтрПоОрганизации Тогда
			ПоляОтбора.Вставить("Организация");
		КонецЕсли;
	
		Если Реквизиты.ИспользоватьФильтрПоПодразделению Тогда
			ПоляОтбора.Вставить("Подразделение");
		КонецЕсли;
		
		Если Реквизиты.ИспользоватьФильтрПоСценарию Тогда
			ПоляОтбора.Вставить("Сценарий");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		РеквизитыНФП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.НефинансовыйПоказатель, "ПоОрганизациям, ПоСценариям, ПоПодразделениям");
		Если Реквизиты.ИспользоватьФильтрПоОрганизации
			И РеквизитыНФП.ПоОрганизациям Тогда
			ПоляОтбора.Вставить("Организация");
		КонецЕсли;
	
		Если Реквизиты.ИспользоватьФильтрПоПодразделению
			И РеквизитыНФП.ПоПодразделениям Тогда
			ПоляОтбора.Вставить("Подразделение");
		КонецЕсли;
		
		Если Реквизиты.ИспользоватьФильтрПоСценарию
			И РеквизитыНФП.ПоСценариям Тогда
			ПоляОтбора.Вставить("Сценарий");
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если СхемаНастройки = Неопределено Тогда
		СхемаНастройки = СхемаОтбораИзмерения(ПоляОтбора);
	КонецЕсли;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаНастройки.Схема, Реквизиты.УникальныйИдентификатор);
	
	ТребуетсяЗагрузкаНастроекВКомпоновщик = Ложь;
	Если КомпоновщикПриемник = Неопределено Тогда
		КомпоновщикПриемник = ФинансоваяОтчетностьСервер.КомпоновщикСхемы(СхемаНастройки.Схема);
		
		ТребуетсяЗагрузкаНастроекВКомпоновщик = Истина;
	КонецЕсли;
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	КомпоновщикПриемник.Инициализировать(ИсточникДоступныхНастроек);
	
	Если ТребуетсяЗагрузкаНастроекВКомпоновщик Тогда
		КомпоновщикПриемник.ЗагрузитьНастройки(СхемаНастройки.Настройки);
	КонецЕсли;
	
	Если ДополнительныйОтбор <> Неопределено Тогда
		Если ТипЗнч(ДополнительныйОтбор) = Тип("ХранилищеЗначения") Тогда
			НастройкиПоказателя = ДополнительныйОтбор.Получить();
		Иначе
			НастройкиПоказателя = ДополнительныйОтбор;
		КонецЕсли;
		Если НастройкиПоказателя <> Неопределено Тогда
			КомпоновщикПриемник.ЗагрузитьНастройки(НастройкиПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	КомпоновщикПриемник.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Измерения = Новый Структура("Сценарий,Организация,Подразделение,НаправлениеДеятельности");
	Для Каждого Поле Из ПоляОтбора Цикл
		Если Измерения.Свойство(Поле.Ключ)
			И ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикПриемник.Настройки.Отбор, Поле.Ключ) = Неопределено Тогда
			Элемент = ФинансоваяОтчетностьСервер.НовыйОтбор(КомпоновщикПриемник.Настройки.Отбор, Поле.Ключ);
			Элемент.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СписокКУдалению = Новый Массив;
	БюджетнаяОтчетностьВыводСервер.ПолучитьНастраиваемыеЭлементыОтбора(КомпоновщикПриемник.Настройки.Отбор, СписокКУдалению, "");
	Для Каждого ЭлементКУдалению Из СписокКУдалению Цикл
		КомпоновщикПриемник.Настройки.Отбор.Элементы.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
	#Область УдалениеНеиспользуемыхЭлементов
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		Если НЕ Реквизиты.ИспользоватьФильтрПоОрганизации Тогда
			Отбор = КомпоновщикПриемник.Настройки.Отбор;
			Элемент = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор, "Организация");
			Если Элемент <> Неопределено Тогда
				Отбор.Элементы.Удалить(Элемент);
			КонецЕсли;
		КонецЕсли;
	
		Если НЕ Реквизиты.ИспользоватьФильтрПоПодразделению Тогда
			Отбор = КомпоновщикПриемник.Настройки.Отбор;
			Элемент = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор, "Подразделение");
			Если Элемент <> Неопределено Тогда
				Отбор.Элементы.Удалить(Элемент);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Реквизиты.ИспользоватьФильтрПоСценарию Тогда
			Отбор = КомпоновщикПриемник.Настройки.Отбор;
			Элемент = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор, "Сценарий");
			Если Элемент <> Неопределено Тогда
				Отбор.Элементы.Удалить(Элемент);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	КомпоновщикПриемник.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

// Процедура сохраняет настроенную структуру вида отчета.
//
// Параметры:
//  ВидОтчета  - СправочникСсылка.ВидыФинансовыхОтчетов, СправочникСсылка.ВидыБюджетов - Ссылка на элемент справочника,
//                                                                                       структуру которого сохраняем.
//  ЭлементыВидаОтчета  - ДеревоЗначений - Дерево элементов вида отчета или вида бюджета.
//  ПометкаУдаления  - Булево - Признак пометки удаления.
//
Процедура ЗаписатьСтруктуруВидаОтчета(ВидОтчета, ЭлементыВидаОтчета, ПометкаУдаления) Экспорт
	
	ИспользуемыеЭлементыВидаОтчета = Новый СписокЗначений;
	ПараметрыЗаписиВСтруктуру = ПолучитьПараметрыЗаписиВСтруктуруОтчета();
	ПараметрыЗаписиВСтруктуру.ВидОтчета       = ВидОтчета;
	ПараметрыЗаписиВСтруктуру.ПометкаУдаления = ПометкаУдаления;
	ЗаполнитьИзмеренияСИзменениямиВИсточникахЗаполнения(ЭлементыВидаОтчета, ПараметрыЗаписиВСтруктуру.ИзмеренияКПерезаписи);
	
	ОбойтиЗаписатьСтруктуруВидаОтчета(ЭлементыВидаОтчета, ПараметрыЗаписиВСтруктуру, ИспользуемыеЭлементыВидаОтчета);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлементыФинансовыхОтчетов.Ссылка КАК Ссылка,
	|	ЭлементыФинансовыхОтчетов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
	|ГДЕ
	|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец
	|	И НЕ ЭлементыФинансовыхОтчетов.Ссылка В (&Ссылка)";

	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("Ссылка", ИспользуемыеЭлементыВидаОтчета);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	УстановитьПривилегированныйРежим(Истина);
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект <> Неопределено Тогда
			Попытка
				Объект.Удалить();
			Исключение
				КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
				Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") Тогда
					ИмяСобытияЖурнала = НСтр("ru = 'Запись вида бюджета'", КодЯзыка);
					ТекстОшибки = НСтр("ru = 'При записи вида бюджета %1 не удалось удалить элемент финансового отчета: %2 по причине: %3'",
						КодЯзыка);
				Иначе
					ИмяСобытияЖурнала = НСтр("ru = 'Запись вида финансового отчета'", КодЯзыка);
					ТекстОшибки = НСтр("ru = 'При записи вида финансового отчета %1 не удалось удалить элемент финансового отчета: %2 по причине: %3'",
						КодЯзыка);
				КонецЕсли;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВидОтчета, Выборка.Наименование,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала,
				                         УровеньЖурналаРегистрации.Ошибка,
				                         Метаданные.Справочники.ЭлементыФинансовыхОтчетов,
				                         Выборка.Ссылка,
				                         ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Перем ДополнительныйРежим;
	
	Если ВидФормы = "ФормаСписка" Или Не Параметры.Свойство("ВидЭлемента") Тогда
		ВызватьИсключение НСтр("ru = 'Содержимое служебного справочника ""Элементы финансовых отчетов"" 
									|редактируется в справочниках-владельцах 
									|""Виды бюджетов"" и ""Виды финансовых отчетов"".'");
		Возврат;
	КонецЕсли;
	
	Если ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ДополнительныйРежимФормы", ДополнительныйРежим);
	Если Параметры.Свойство("ВидЭлемента") Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ФинансоваяОтчетностьВызовСервера.ПараметрыИспользованияФормы(
													Параметры.ВидЭлемента, 
													Параметры.АдресЭлементаВХранилище,
													ДополнительныйРежим).ИмяФормы;
		
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ФинансоваяОтчетностьВызовСервера.ПараметрыИспользованияФормы(
													Параметры.Ключ.ВидЭлемента, 
													Параметры.Ключ,
													ДополнительныйРежим).ИмяФормы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция СхемаОтбораИзмерения(СтруктураИменИзмерений)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаКД = ФинОтчеты.НоваяСхема();
	НаборДанных = ФинОтчеты.НовыйНабор(СхемаКД);
	
	ИмяИзмерения = "";
	СуффиксПодчиненныеПоля = ".*";
	ДобавлятьСуффикс = Ложь;
	Для Каждого КлючИЗначение Из СтруктураИменИзмерений Цикл
		
		ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", ",
			|");
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов") Тогда
			
			ИмяПараметраВидаАналитики = "ВидАналитики" + КлючИЗначение.Ключ;
			
			ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
			ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "СтатьяБюджетов.КоличествоИспользуемыхАналитик";
			ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "СтатьяБюджетов.ВидАналитики";
			ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "Аналитика";
			ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
			
			ВыражениеАналитики = БюджетированиеСервер.ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
			
			ИмяИзмерения = ИмяИзмерения + "(" + ВыражениеАналитики + ")" + ?(ДобавлятьСуффикс, ".*", "") + " КАК " + КлючИЗначение.Ключ;
			
			Параметр = СхемаКД.Параметры.Добавить();
			Параметр.Имя = ИмяПараметраВидаАналитики;
			Параметр.Значение = КлючИЗначение.Значение;
			Параметр.ВключатьВДоступныеПоля = Ложь;
			Параметр.ОграничениеИспользования = Истина;
			
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,КлючИЗначение.Значение.Наименование);
			ПолеНабора.ТипЗначения = КлючИЗначение.Значение.ТипЗначения;
			
		Иначе
			
			Измерение = Метаданные.РегистрыНакопления.ОборотыБюджетов.Измерения.Найти(КлючИЗначение.Ключ);
			Заголовок = КлючИЗначение.Ключ;
			Если Измерение <> Неопределено Тогда
				Заголовок = Измерение.Синоним;
			КонецЕсли;
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,Заголовок);
			ИмяИзмерения = ИмяИзмерения + КлючИЗначение.Ключ + ?(ДобавлятьСуффикс, ".*", "") + " КАК " + КлючИЗначение.Ключ;
			
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.КоличествоОборот,
	|	ОборотыБюджетовОбороты.СуммаУпрОборот,
	|	ОборотыБюджетовОбороты.СуммаРеглОборот
	|ИЗ
	|	РегистрНакопления.ОборотыБюджетов.Обороты(, , , %1) КАК ОборотыБюджетовОбороты";
	
	Если СтруктураИменИзмерений.Количество() Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "{" + ИмяИзмерения + "}");
	Иначе
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "");
	КонецЕсли;
	
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	НаборДанных.Запрос = ТекстЗапроса;
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	СхемаПоказателя = Новый Структура("Схема, Настройки",СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Функция СхемаОтбораПоказателя(СтруктураИменИзмерений, ТипИтога = Неопределено)
	
	Если ТипИтога = Неопределено Тогда
		ТипИтога = ПредопределенноеЗначение("Перечисление.ТипыИтогов.Сальдо");
	КонецЕсли;
	ЭтоОборот = СтрНайти(Строка(ТипИтога), "Сальдо") = 0;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаКД = ФинОтчеты.НоваяСхема();
	НаборДанных = ФинОтчеты.НовыйНабор(СхемаКД);
	
	ИмяИзмерения = "";
	ЭтоХозрасчетный = Ложь;
	Для Каждого КлючИЗначение Из СтруктураИменИзмерений Цикл
		
		ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ПланСчетовСсылка.Хозрасчетный")
			Тогда
			
			СчетПланаСчетов = КлючИЗначение.Значение;
			Если СчетПланаСчетов.Валютный Тогда
				ИмяИзмерения = ИмяИзмерения + "(Валюта).* КАК Валюта";
			КонецЕсли;
			Сч = 1;
			Для Каждого СубконтоСчета Из СчетПланаСчетов.ВидыСубконто Цикл
				ИмяСубконто = "Субконто" + Строка(Сч);
				ЗаголовокСубконто = СубконтоСчета.ВидСубконто.Наименование;
				ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,ИмяСубконто,,ЗаголовокСубконто);
				ПолеНабора.ТипЗначения = СубконтоСчета.ВидСубконто.ТипЗначения;
				ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
				ИмяИзмерения = ИмяИзмерения + "("+ИмяСубконто + ").* КАК " + ИмяСубконто;
				Сч = Сч + 1;
			КонецЦикла;
			
			Если ЭтоОборот Тогда
				ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
				ИмяИзмерения = ИмяИзмерения + "(ВалютаКор).* КАК ВалютаКор";
				ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,"ВалютаКор",,НСтр("ru = 'Кор. валюта'"));
				ОтборПоКорСчету = "{(КорСчет).* КАК КорСчет}";
				ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,"КорСчет",,НСтр("ru = 'Кор. счет'"));
				Для Сч = 1 По 3 Цикл
					ИмяСубконто = "Субконто" + Строка(Сч);
					ИмяКорСубконто = "Кор" + ИмяСубконто;
					ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,ИмяКорСубконто,,"Кор. "+ИмяСубконто);
					ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
					ИмяИзмерения = ИмяИзмерения + "("+ИмяКорСубконто + ").* КАК " + ИмяКорСубконто;
				КонецЦикла;
			КонецЕсли;
			
			Если ТипЗнч(СчетПланаСчетов) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
				ЭтоХозрасчетный = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные")
			Тогда
			
			ОтборПоВидуСубконто = "{(&ВидСубконто)}";
			Параметр = СхемаКД.Параметры.Добавить();
			Параметр.Имя = "ВидСубконто";
			Параметр.Значение = КлючИЗначение.Значение;
			Параметр.ВключатьВДоступныеПоля = Ложь;
			Параметр.ОграничениеИспользования = Истина;
			
			ЗаголовокПоля = КлючИЗначение.Значение.Наименование;
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,ЗаголовокПоля,КлючИЗначение.Значение.ТипЗначения);
			ИмяИзмерения = ИмяИзмерения + "("+КлючИЗначение.Ключ + ").* КАК " + КлючИЗначение.Ключ;
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
				ЭтоХозрасчетный = Истина;
			КонецЕсли;
			
		Иначе
			
			Измерение = Метаданные.РегистрыНакопления.ОборотыБюджетов.Измерения.Найти(КлючИЗначение.Ключ);
			Заголовок = КлючИЗначение.Ключ;
			Если Измерение <> Неопределено Тогда
				Заголовок = Измерение.Синоним;
			КонецЕсли;
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,Заголовок);
			ИмяИзмерения = "("+КлючИЗначение.Ключ + ").* КАК " + КлючИЗначение.Ключ;
			
		КонецЕсли;
	КонецЦикла;
	ИмяИзмерения = ?(ПустаяСтрока(ИмяИзмерения),"","{" + ИмяИзмерения + "}");
	
	Если ЭтоОборот Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеРегистра.Субконто1,
		|	ДанныеРегистра.Субконто2,
		|	ДанныеРегистра.Субконто3,
		|	ДанныеРегистра.КорСчет,
		|	ДанныеРегистра.КорСубконто1,
		|	ДанныеРегистра.КорСубконто2,
		|	ДанныеРегистра.КорСубконто3
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , , , , "+ИмяИзмерения+", "+ОтборПоКорСчету+", ) КАК ДанныеРегистра";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеРегистра.Субконто1,
		|	ДанныеРегистра.Субконто2,
		|	ДанныеРегистра.Субконто3,
		|	ДанныеРегистра.СуммаОстаток КАК Значение
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(,,"+ОтборПоВидуСубконто+", "+ИмяИзмерения+") КАК ДанныеРегистра";
	КонецЕсли;
	
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	НаборДанных.Запрос = ТекстЗапроса;
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	СхемаПоказателя = Новый Структура("Схема, Настройки",СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Функция ПолучитьВыборкуАналитикЭлемента(Ссылка)
	
	ИмяТаблицы = "";
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
		ИмяТаблицы = "СтатьиБюджетов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
		ИмяТаблицы = "ПоказателиБюджетов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
		ИмяТаблицы = "НефинансовыеПоказателиБюджетов";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.ВидАналитики1,
	|	Справочник.ВидАналитики2,
	|	Справочник.ВидАналитики3,
	|	Справочник.ВидАналитики4,
	|	Справочник.ВидАналитики5,
	|	Справочник.ВидАналитики6
	|ПОМЕСТИТЬ ТаблицаВидовАналитик
	|ИЗ
	|	Справочник." + ИмяТаблицы + " КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Ссылка,
	|	АналитикиСтатейБюджетов.ИмяПредопределенныхДанных
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|ГДЕ
	|	АналитикиСтатейБюджетов.Ссылка В
	|			(ВЫБРАТЬ
	|				Справочник.ВидАналитики1
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				Справочник.ВидАналитики2
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				Справочник.ВидАналитики3
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				Справочник.ВидАналитики4
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				Справочник.ВидАналитики5
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				Справочник.ВидАналитики6
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикиСтатейБюджетов.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ЕстьПериодВРодителях(Знач СтрокаДерева, Периодичность)
	
	Пока СтрокаДерева <> Неопределено
		И СтрокаДерева.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.Строки
		И СтрокаДерева.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Цикл
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			
			ТипИзмерения = Неопределено;
			Если ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаДерева.АдресСтруктурыЭлемента, "ТипИзмерения");
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ЭлементОтчета) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаДерева.ЭлементОтчета, "ТипИзмерения");
			Иначе
				Если ТипЗнч(СтрокаДерева.СтатьяПоказательТипИзмерения) = Тип("ПеречислениеСсылка.Периодичность") Тогда
					ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				Если ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаДерева.АдресСтруктурыЭлемента, "Периодичность");
				ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ЭлементОтчета) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаДерева.ЭлементОтчета, "Периодичность");
				Иначе
					Периодичность = СтрокаДерева.СтатьяПоказательТипИзмерения
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДерева = СтрокаДерева.Родитель;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПериодВПодчиненных(Знач СтрокаДерева, Периодичность)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если ПодчиненнаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			
			ТипИзмерения = Неопределено;
			Если ЗначениеЗаполнено(ПодчиненнаяСтрока.АдресСтруктурыЭлемента) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ПодчиненнаяСтрока.АдресСтруктурыЭлемента, "ТипИзмерения");
			ИначеЕсли ЗначениеЗаполнено(ПодчиненнаяСтрока.ЭлементОтчета) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ПодчиненнаяСтрока.ЭлементОтчета, "ТипИзмерения");
			Иначе
				Если ТипЗнч(ПодчиненнаяСтрока.СтатьяПоказательТипИзмерения) = Тип("ПеречислениеСсылка.Периодичность") Тогда
					ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				Если ЗначениеЗаполнено(ПодчиненнаяСтрока.АдресСтруктурыЭлемента) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ПодчиненнаяСтрока.АдресСтруктурыЭлемента, "Периодичность");
				ИначеЕсли ЗначениеЗаполнено(ПодчиненнаяСтрока.ЭлементОтчета) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ПодчиненнаяСтрока.ЭлементОтчета, "Периодичность");
				Иначе
					Периодичность = ПодчиненнаяСтрока.СтатьяПоказательТипИзмерения
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьПериодВПодчиненных(ПодчиненнаяСтрока, Периодичность) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭлементРазвернутПоПериоду(Параметры, ПериодичностьГруппировки = Неопределено) Экспорт
	
	ДеревоЭлементов = ПолучитьИзВременногоХранилища(Параметры.АдресЭлементовОтчета);
	Если ЗначениеЗаполнено(Параметры.АдресТаблицыЭлементов) Тогда
		ТаблицаЭлементов = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыЭлементов)
	Иначе
		ТаблицаЭлементов = Неопределено;
	КонецЕсли;
	
	Колонка = Неопределено; Строка = Неопределено;
	
	Если ТаблицаЭлементов = Неопределено Тогда
		
		СтрокаДерева = ДеревоЭлементов.Строки.Найти(Параметры.АдресРедактируемогоЭлемента, "АдресСтруктурыЭлемента", Истина);
		КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаДерева,
			Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
		ИсточникПодчиненных = Неопределено;
		Если КорневойЭлемент <> Неопределено Тогда
			ИсточникПодчиненных = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(КорневойЭлемент,
				"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
		КонецЕсли;
		КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаДерева,
			Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
		Если КорневойЭлемент <> Неопределено Тогда
			ИсточникПодчиненных = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(КорневойЭлемент,
				"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
		КонецЕсли;
		
		ЕстьПериод = ЕстьПериодВРодителях(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВПодчиненных(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ?(ИсточникПодчиненных = Неопределено, Ложь, ЕстьПериодВПодчиненных(ИсточникПодчиненных, ПериодичностьГруппировки));
		
	Иначе
		
		ЯчейкаМатрицы = ТаблицаЭлементов.Найти(Параметры.АдресРедактируемогоЭлемента, "Элемент");
		
		СтрокаДерева = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Строка, "АдресСтруктурыЭлемента", Истина);
		КолонкаДерева = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Колонка, "АдресСтруктурыЭлемента", Истина);
		
		ЕстьПериод = ЕстьПериодВРодителях(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВПодчиненных(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВРодителях(КолонкаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВПодчиненных(КолонкаДерева, ПериодичностьГруппировки);
		
	КонецЕсли;
	
	Возврат ЕстьПериод;
	
КонецФункции

Функция РазобратьИмяОперандаНаСоставляющие(ИмяОперанда) Экспорт
	
	ПозицияРазделителя = СтрНайти(ИмяОперанда, ";");
	Если ПозицияРазделителя Тогда
		Строка = Лев(ИмяОперанда, ПозицияРазделителя - 1);
		Колонка = Сред(ИмяОперанда, ПозицияРазделителя + 1);
		Строка = СокрЛ(Строка);
		Колонка = СокрЛ(Колонка);
	Иначе
		Строка = СокрЛ(ИмяОперанда);
		Колонка = "";
	КонецЕсли;
	
	СтрокаФиксированная = БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(Строка, "$");
	Если СтрокаФиксированная Тогда
		Строка = Сред(Строка, 2);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Колонка) Тогда
		КолонкаФиксированная = СтрокаФиксированная;
	Иначе
		КолонкаФиксированная = БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(Колонка, "$");
		Если КолонкаФиксированная Тогда
			Колонка = Сред(Колонка, 2);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Строка", Строка);
	Результат.Вставить("Колонка", Колонка);
	Результат.Вставить("СтрокаФиксированная", СтрокаФиксированная);
	Результат.Вставить("КолонкаФиксированная", КолонкаФиксированная);
	
	Возврат Результат;
	
КонецФункции

#Область ВыводДереваНастройкиЯчеек

Функция ВывестиЯчейки(Форма, Группировка, ЭлементыТаблицы,
						ДеревоСтрок, НомерСтроки, НомерПредыдущейКолонки = 3, Знач Глубина = 0)
	Перем ДопРежимФормы;
						
	Элементов = 0; ЭтоВидОтчета = Ложь;
	Если Форма.Параметры.Свойство("ДополнительныйРежимФормы", ДопРежимФормы) Тогда
		ЭтоВидОтчета = ДопРежимФормы = Перечисления.ДополнительныеРежимыЭлементовОтчетов.ВидОтчета;
	КонецЕсли;
	
	Для Каждого СтрокаПоказателя Из ДеревоСтрок Цикл
		
		НомерКолонки = НомерПредыдущейКолонки + Элементов;
		
		ПодчиненныхЭлементов = ВывестиЯчейки(Форма, Группировка, ЭлементыТаблицы,
											СтрокаПоказателя.Строки, НомерСтроки, НомерКолонки, Глубина);
		
		Если ПодчиненныхЭлементов Тогда
			Элементов = Элементов + ПодчиненныхЭлементов;
			Продолжить; // расшифровку установили в рекурсивном вызове
		Иначе
			Элементов = Элементов + 1;
		КонецЕсли;
		
		// установка расшифровки области
		Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		
		СтруктураРасшифровки = Новый Структура("Строка, Колонка, ВидЭлемента, ЭлементОтчета, ЭтоСвязанный");
		СтруктураРасшифровки.ЭтоСвязанный = Ложь;

		СтруктураРасшифровки.Строка  = Новый Структура("Наименование, ЭлементОтчета", 
										Группировка.НаименованиеДляПечати, Группировка.АдресСтруктурыЭлемента);
		СтруктураРасшифровки.Колонка = Новый Структура("Наименование, ЭлементОтчета",
										СтрокаПоказателя.НаименованиеДляПечати, СтрокаПоказателя.АдресСтруктурыЭлемента);
		
		ЭтоПредопределеннаяФормула = Ложь;
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресСтруктурыЭлемента);
		Если ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе")
			ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Группа")
			ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
			ЭлементФормулы = СтрокаПоказателя.АдресСтруктурыЭлемента;
			ЭтоПредопределеннаяФормула = Истина;
		Иначе
			ДанныеЭлемента = ПолучитьИзВременногоХранилища(Группировка.АдресСтруктурыЭлемента);
			Если ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе")
				ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Группа")
				//ИЛИ (ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Измерение") И ЭтоВидОтчета)
				ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
				ЭлементФормулы = Группировка.АдресСтруктурыЭлемента;
				ЭтоПредопределеннаяФормула = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ВыводитьЭлементПоПересечениюСтрокКолонок = Истина;
		ВидТаблицы = Неопределено;
		Если Форма.Параметры.Свойство("ПроверятьВидТаблицы") Тогда
			Форма.Параметры.Свойство("ВидТаблицы", ВидТаблицы);
			Если ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
				ИЛИ ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
				ВыводитьЭлементПоПересечениюСтрокКолонок = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыводитьЭлементПоПересечениюСтрокКолонок Тогда
			
			Если Не ЭтоПредопределеннаяФормула Тогда
				
				СтруктураПоиска = Новый Структура("Строка, Колонка");
				СтруктураПоиска.Строка = Группировка.АдресСтруктурыЭлемента;
				СтруктураПоиска.Колонка = СтрокаПоказателя.АдресСтруктурыЭлемента;
				
				СтрокиЭлемента = ЭлементыТаблицы.НайтиСтроки(СтруктураПоиска);
				Если СтрокиЭлемента.Количество() Тогда
					СтрокаЭлемента = СтрокиЭлемента[0];
					Если ТипЗнч(СтрокаЭлемента.Элемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов")
						И ЗначениеЗаполнено(СтрокаЭлемента.Элемент) Тогда
						СтрокаЭлемента.Элемент = ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(
																						СтрокаЭлемента.Элемент, 
																						Форма.ИдентификаторГлавногоХранилища);
					КонецЕсли;
					ДанныеЭлемента = ПолучитьИзВременногоХранилища(СтрокаЭлемента.Элемент);
					СтруктураРасшифровки.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
					СтруктураРасшифровки.ЭлементОтчета = СтрокаЭлемента.Элемент;
				КонецЕсли;
				
			Иначе
				
				СтруктураРасшифровки.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
				СтруктураРасшифровки.ЭлементОтчета = ЭлементФормулы;
			
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЭтоВидОтчета И ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Измерение") Тогда
			СтруктураРасшифровки.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
			СтруктураРасшифровки.ЭлементОтчета = Неопределено;
		КонецЕсли;
		
		Область.Расшифровка = СтруктураРасшифровки;
		УстановитьТекстЯчейки(Форма, Область.Имя);
		Оформить(Область, "Ячейка");
		
	КонецЦикла;
	
	Возврат Элементов;
	
КонецФункции

Функция ВывестиДеревоВПоказатели(Форма, ПерваяСтрока, Строки, Знач Глубина, ГлубинаВсего, Знач НомерПредыдущейКолонки = 3)
	
	Элементов = 0;
	
	Для Каждого СтрокаПоказателя Из Строки Цикл
		
		НомерКолонки = НомерПредыдущейКолонки + Элементов;
		
		Выводить = Истина;
		Если СтрокаПоказателя.ВидЭлемента = ВидЭлемента("Группа") Тогда
			Выводить = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
												СтрокаПоказателя.АдресСтруктурыЭлемента, "ВыводитьЗаголовокЭлемента") = Истина;
		КонецЕсли;
		
		НоваяГлубина = Глубина;
		Если Выводить Тогда
		
			НомерСтроки = ПерваяСтрока + Глубина;
			Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Область.Текст = СтрокаПоказателя.НаименованиеДляПечати;
			Область.Расшифровка = СтрокаПоказателя.АдресСтруктурыЭлемента;
			Область.ШиринаКолонки = 15;
			
			НоваяГлубина = Глубина + 1;
			
		КонецЕсли;
		
		ПодчиненныхЭлементов = ВывестиДеревоВПоказатели(Форма, ПерваяСтрока,
														СтрокаПоказателя.Строки, 
														НоваяГлубина, ГлубинаВсего, НомерКолонки);
		
		Если ПодчиненныхЭлементов Тогда
			Элементов = Элементов + ПодчиненныхЭлементов;
			Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки + ПодчиненныхЭлементов - 1);
		Иначе
			Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, ПерваяСтрока + ГлубинаВсего);
			Элементов = Элементов + 1;
		КонецЕсли;
		
		Если Выводить Тогда
			
			Область.Объединить();
			Оформить(Область, "ШапкаЯчейки");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Элементов;
	
КонецФункции

Процедура Оформить(Область, Режим)
	
	ЖирнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ТонкаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	Если Режим = "Строка" Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь);
		Область.Обвести(ЖирнаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
	ИначеЕсли Режим = "СтрокаОбъединенная" Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь);
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
	ИначеЕсли Режим = "СтрокаИтог" Тогда
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
		Область.Обвести(ЖирнаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
	ИначеЕсли Режим = "ШапкаЯчейки" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаГруппировкиОтчета1;
	ИначеЕсли Режим = "ЗаголовокТаблицы" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаГруппировкиОтчета1;
	ИначеЕсли Режим = "Шапка" Тогда
		Область.Обвести(ЖирнаяЛиния, ЖирнаяЛиния, ЖирнаяЛиния, ЖирнаяЛиния);
	ИначеЕсли Режим = "Ячейка" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 8);
	ИначеЕсли Режим = "ЯчейкаИтог" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПоследующаяСтрокаОбъединенаСТекущей(СтрокаПоказателя)
	
	Если СтрокаПоказателя.Строки.Количество() = 1 И
		СтрокаПоказателя.Строки[0].ВыводитьВместеСРодительским Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВывестиДеревоВСтроки(Форма, ДеревоСтрок, ПараметрыВывода, ВсегоСтрок,
                               Знач Глубина = 0, Знач НомерКолонки = 0)
	
	ЭлементыТаблицы    = ПараметрыВывода.ЭлементыТаблицы;
	ДеревоКолонок      = ПараметрыВывода.ДеревоКолонок;
	ПерваяСтрока       = ПараметрыВывода.ПерваяСтрока;
	ГлубинаОбъединения = ПараметрыВывода.ГлубинаОбъединения;
	
	Начало = ПерваяСтрока + ВсегоСтрок + 1;
	
	БылиЭлементыДляВывода = Ложь;
	Для Каждого СтрокаПоказателя Из ДеревоСтрок Цикл
		
		Выводить = Истина;
		Если СтрокаПоказателя.ВидЭлемента = ВидЭлемента("Группа") Тогда
			Выводить = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
												СтрокаПоказателя.АдресСтруктурыЭлемента, "ВыводитьЗаголовокЭлемента");
		КонецЕсли;
		
		НоваяГлубина = Глубина;
		Если Выводить Тогда
			БылиЭлементыДляВывода = Истина;
			
			Если СтрокаПоказателя.ВыводитьВместеСРодительским = Истина Тогда
				НомерКолонкиТекущий = НомерКолонки + 1;
				РежимОформления = "СтрокаОбъединенная";
			Иначе
				НомерКолонкиТекущий = 0;
				ВсегоСтрок = ВсегоСтрок + 1;
				РежимОформления = "Строка";
			КонецЕсли;
			НомерСтроки 	= ПерваяСтрока + ВсегоСтрок;
			
			ПоследующаяСтрокаОбъединена = ПоследующаяСтрокаОбъединенаСТекущей(СтрокаПоказателя);
			Если ПоследующаяСтрокаОбъединена Тогда
				КонецКолонки = 2 + НомерКолонкиТекущий;
			Иначе
				КонецКолонки = 2 + ГлубинаОбъединения - 1;
			КонецЕсли;
			
			Область 		= Форма.ПредставлениеОтчета.Область(НомерСтроки, 2 + НомерКолонкиТекущий, НомерСтроки, КонецКолонки);
			Область.Объединить();
			Область.Текст 	= СтрокаПоказателя.НаименованиеДляПечати;
			Область.Расшифровка = СтрокаПоказателя.АдресСтруктурыЭлемента;
			
			Если СтрокаПоказателя.ВыводитьВместеСРодительским = Ложь Тогда
				Область.Отступ 	= Глубина * 2;
			КонецЕсли;
			
			Оформить(Область, РежимОформления);
			
			Если Не ПоследующаяСтрокаОбъединена Тогда
				ВывестиЯчейки(Форма, СтрокаПоказателя, ЭлементыТаблицы, ДеревоКолонок, НомерСтроки, 3 + ГлубинаОбъединения - 1);
			КонецЕсли;
			
			НоваяГлубина = Глубина + 1;
		КонецЕсли;
		
		ВывестиДеревоВСтроки(Форма,
		                     СтрокаПоказателя.Строки,
		                     ПараметрыВывода,
		                     ВсегоСтрок,
		                     НоваяГлубина,
		                     НомерКолонкиТекущий);
		
	КонецЦикла;
	
	Конец = ПерваяСтрока + ВсегоСтрок;
	
	Если Глубина > 0 И Начало <= Конец И БылиЭлементыДляВывода Тогда
	
		Форма.ПредставлениеОтчета.Область(Начало, , Конец).Сгруппировать(Глубина);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ВидЭлемента(ИмяВидаЭлемента)
	
	Возврат Перечисления.ВидыЭлементовФинансовогоОтчета[ИмяВидаЭлемента];
	
КонецФункции

#КонецОбласти

#Область НастройкаДополнительныхПолей

Процедура ЗаполнитьПредставлениеДополнительныхПолей(Объект, НадписьДополнительныхПолей) Экспорт
	
	МассивПолей = Объект.ДополнительныеПоля.Выгрузить(,"Наименование").ВыгрузитьКолонку("Наименование");
	Если МассивПолей.Количество() Тогда
		Представление = СтрСоединить(МассивПолей, ", ");
		ТекстЗаголовка = НСтр("ru = 'Дополнительные поля: %1'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Представление);
		НадписьДополнительныхПолей.Заголовок = ТекстЗаголовка;
	Иначе
		ТекстЗаголовка = НСтр("ru = '<настроить отображение дополнительных полей>'");
		НадписьДополнительныхПолей.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьВидаОтчета

// Рекурсивно записывает структуру вида финансового отчета из переданного дерева в подчиненный справочник ЭлементыФинансовыхОтчетов.
//
// Параметры
//  ЭлементыВидаОтчета	- ДеревоЗначений - структура (состав и порядок) вида отчета
//  ПараметрыЗаписиВСтруктуру - Структура
//  * ВидОтчета 		- СправочникСсылка.ВидыБюджетов, СправочникСсылка.ВидыФинансовыхОтчетов - владелец элементов видов отчетов
//  * ПометкаУдаления	- Булево - Флаг пометки удаления вида отчета
//  * ИзмеренияКПерезаписи - Массив - Массив уже существующих элементов-измерений, которые необходимо обновить для
//                                    актуализации источников заполнения
//  ИспользуемыеЭлементыВидаОтчета - Массив - массив элементов вида отчета
//  Родитель  			- СправочникСсылка.ЭлементыФинансовыхОтчетов - родитель текущего элемента
//  ДопПорядок  		- Число - номер по порядку начиная с самого верхнего элемента дерева в направлении сверху\вниз и слева\направо
//  Кэш					- Неопределено
//  					- ТаблицаЗначений - кэш свойств элементов отчета.
//
Процедура ОбойтиЗаписатьСтруктуруВидаОтчета(ЭлементыВидаОтчета, ПараметрыЗаписиВСтруктуру, ИспользуемыеЭлементыВидаОтчета,
											Родитель = Неопределено, ДопПорядок = 0, Кэш = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		Элементы = ЭлементыВидаОтчета.Строки[0].Строки;
	Иначе
		Элементы = ЭлементыВидаОтчета.Строки;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		
		СсылкаНового = ВнестиИзмененияВОбъект(Элемент, Родитель, ПараметрыЗаписиВСтруктуру, ДопПорядок, ИспользуемыеЭлементыВидаОтчета, Кэш);
		ОбойтиЗаписатьСтруктуруВидаОтчета(Элемент, ПараметрыЗаписиВСтруктуру, ИспользуемыеЭлементыВидаОтчета, СсылкаНового, ДопПорядок, Кэш);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПараметрыЗаписиВСтруктуруОтчета()
	Параметры = Новый Структура;
	Параметры.Вставить("ВидОтчета", Неопределено);
	Параметры.Вставить("ПометкаУдаления", Ложь);
	Параметры.Вставить("ИзмеренияКПерезаписи", Новый Массив);
	
	Возврат Параметры;
КонецФункции

// Заполняет массив ссылками на элементы финансовых отчетов - измерения, для которых были изменены источники заполнения.
// В массиве находятся только не измененные элементы финансовых отчетов (АдресСтруктурыЭлемента = пустая строка).
// 
// Параметры
//  Элемент - ДеревоЗначений = дерево значений элементов отчета
//            СтрокаДереваЗначений - строка дерева значений - элементов отчета
//  ИзмененияИсточников - Массив - заполняемый массив элементов СправочникСсылка.ЭлементыФинансовыхОтчетов
//  Кэш - ТаблицаЗначений - см. описание ОбойтиЗаписатьСтруктуруВидаОтчета.
//
Процедура ЗаполнитьИзмеренияСИзменениямиВИсточникахЗаполнения(Знач Элемент, ИзмененияИсточников, Кэш = Неопределено)
	
	Если ТипЗнч(Элемент) = Тип("ДеревоЗначений") Тогда
		
		Строка = Элемент.Строки[0];
		
	Иначе
		
		Строка = Элемент;
		
		Если Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
		   И ПустаяСтрока(Строка.АдресСтруктурыЭлемента)
		   И ЗначениеЗаполнено(Строка.ЭлементОтчета) Тогда
			
			НужноЗаполнениеИсточников = Ложь;
			ЕстьИзмененныеИсточники = Ложь;
			ЭтоЗаполнение = Ложь;
			ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Строка.ЭлементОтчета, "ТипИзмерения");
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика
				ИЛИ ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				НужноЗаполнениеИсточников = Истина;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				Если ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Строка.ЭлементОтчета, "РазрешитьРедактирование") = Истина Тогда
					НужноЗаполнениеИсточников = Истина;
					ЭтоЗаполнение = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НужноЗаполнениеИсточников Тогда
				СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийЭлемента(Кэш, Строка, ЭтоЗаполнение);
				ЗаписанныеИсточники = Новый Массив;
				Для каждого СтрокаИсточника Из СписокДоступныхЭлементов Цикл
					Если ТипЗнч(СтрокаИсточника.Элемент) = Тип("Строка") Тогда
						ЕстьИзмененныеИсточники = Истина;
						Прервать;
					Иначе
						ЗаписанныеИсточники.Добавить(СтрокаИсточника.Элемент);
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьИзмененныеИсточники Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
						|	Источники.Источник КАК Источник
						|ИЗ
						|	Справочник.ЭлементыФинансовыхОтчетов.ИсточникиЗначений КАК Источники
						|ГДЕ
						|	Источники.Ссылка = &Измерение
						|	И НЕ Источники.Источник В (&ЗаписанныеИсточники)";
					Запрос.УстановитьПараметр("Измерение", Строка.ЭлементОтчета);
					Запрос.УстановитьПараметр("ЗаписанныеИсточники", ЗаписанныеИсточники);
					ЕстьИзмененныеИсточники = НЕ Запрос.Выполнить().Пустой();
					
				КонецЕсли;
			КонецЕсли;
			Если ЕстьИзмененныеИсточники Тогда
				Если ИзмененияИсточников.Найти(Строка.ЭлементОтчета) = Неопределено Тогда
					ИзмененияИсточников.Добавить(Строка.ЭлементОтчета);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиДерева = Строка.Строки;
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		ЗаполнитьИзмеренияСИзменениямиВИсточникахЗаполнения(СтрокаДерева, ИзмененияИсточников, Кэш);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОбъектЭлемента(ОписаниеЭлемента, ДанныеОбъекта)
	
	Если ЗначениеЗаполнено(ОписаниеЭлемента) Тогда
		ОбъектЭлемента = ОписаниеЭлемента.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектЭлемента = Неопределено Тогда
		ОбъектЭлемента = Справочники.ЭлементыФинансовыхОтчетов.СоздатьЭлемент();
		Если ЗначениеЗаполнено(ОписаниеЭлемента) Тогда
			ОбъектЭлемента.УстановитьСсылкуНового(ОписаниеЭлемента);
		ИначеЕсли ЗначениеЗаполнено(ДанныеОбъекта.Ссылка) Тогда
			ОбъектЭлемента.УстановитьСсылкуНового(ДанныеОбъекта.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектЭлемента;
	
КонецФункции

Процедура ЗаполнитьОбъектПоДаннымВременногоХранилища(Объект, ДанныеОбъекта, Код, Владелец, Родитель)
	
	Объект.Код = Код;
	Объект.Владелец = Владелец;
	Объект.Родитель = Родитель;
	
	Если ДанныеОбъекта.Свойство("Родитель") Тогда
		Суффикс = ", Родитель";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта, , 
		"Код, Владелец" + Суффикс + ", РеквизитыВидаЭлемента, ОперандыФормулы, ЭлементыТаблицы,
		|ДополнительныеПоля, ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО, ИсточникиЗначений");
		
	Объект.РеквизитыВидаЭлемента.Загрузить(ДанныеОбъекта.РеквизитыВидаЭлемента);
	Объект.ОперандыФормулы.Загрузить(ДанныеОбъекта.ОперандыФормулы);
	Объект.ЭлементыТаблицы.Загрузить(ДанныеОбъекта.ЭлементыТаблицы);
	Объект.ДополнительныеПоля.Загрузить(ДанныеОбъекта.ДополнительныеПоля);
	Объект.ЭлементыОформления.Загрузить(ДанныеОбъекта.ЭлементыОформления);
	Объект.ОформляемыеСтроки.Загрузить(ДанныеОбъекта.ОформляемыеСтроки);
	Объект.ОформляемыеКолонки.Загрузить(ДанныеОбъекта.ОформляемыеКолонки);
	Объект.РасшифровкаПолейОтбораЭО.Загрузить(ДанныеОбъекта.РасшифровкаПолейОтбораЭО);
	Объект.ИсточникиЗначений.Загрузить(ДанныеОбъекта.ИсточникиЗначений);
	
	Если Объект.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы") Тогда
		
		СсылкаНаЭлемент = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
																		Объект, "СтрокаЯчейки");
		Если ТипЗнч(СсылкаНаЭлемент) = Тип("Строка") Тогда
			СсылкаНаЭлемент = ПолучитьИзВременногоХранилища(СсылкаНаЭлемент);
			Если СсылкаНаЭлемент <> Неопределено Тогда
				СсылкаНаЭлемент = СсылкаНаЭлемент.Ссылка;
			КонецЕсли;
			ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
															Объект,
															"СтрокаЯчейки",
															СсылкаНаЭлемент);
		КонецЕсли;
		
		СсылкаНаЭлемент = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
																		Объект, "КолонкаЯчейки");
		Если ТипЗнч(СсылкаНаЭлемент) = Тип("Строка") Тогда
			СсылкаНаЭлемент = ПолучитьИзВременногоХранилища(СсылкаНаЭлемент);
			Если СсылкаНаЭлемент <> Неопределено Тогда
				СсылкаНаЭлемент = СсылкаНаЭлемент.Ссылка;
			КонецЕсли;
			ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
															Объект,
															"КолонкаЯчейки",
															СсылкаНаЭлемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеПоляЭлементаИзКэша(Элемент, ИмяПоля, Кэш, ВидОтчета = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Если ВидОтчета = Неопределено Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
			|ГДЕ
			|	ЭлементыФинансовыхОтчетов.Владелец В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ЭлементыФинансовыхОтчетов.Владелец
			|			ИЗ
			|				Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
			|			ГДЕ
			|				ЭлементыФинансовыхОтчетов.Ссылка = &Ссылка)";
			Запрос.УстановитьПараметр("Ссылка", Элемент);
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
			|ГДЕ
			|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", ВидОтчета);
		КонецЕсли;
		Кэш = Запрос.Выполнить().Выгрузить();
		Кэш.Индексы.Добавить("Ссылка");
		
	КонецЕсли;
	
	НайденнаяСтрока = Кэш.Найти(Элемент, "Ссылка");
	Если НайденнаяСтрока = Неопределено Тогда
		// вновь записанный элемент
		Кэш = Неопределено;
		Возврат ЗначениеПоляЭлементаИзКэша(Элемент, ИмяПоля, Кэш, ВидОтчета);
	КонецЕсли;
	Возврат НайденнаяСтрока[ИмяПоля];
	
КонецФункции

Процедура ОбновитьЗначениеКэша(СсылкаНаЭлемент, Кэш, СтруктураЭлемента = Неопределено)
	НайденнаяСтрока = Кэш.Найти(СсылкаНаЭлемент, "Ссылка");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = Кэш.Добавить();
		НайденнаяСтрока.Ссылка = СсылкаНаЭлемент;
	КонецЕсли;
	Если СтруктураЭлемента = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
			|	*
			|ИЗ
			|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
			|ГДЕ
			|	ЭлементыФинансовыхОтчетов.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭлемент);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			СтруктураЭлемента = Результат[0];
		КонецЕсли;
	КонецЕсли;
	Если НЕ СтруктураЭлемента = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтруктураЭлемента);
	КонецЕсли;
КонецПроцедуры

Функция ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(СсылкаНаЭлемент, АдресСтруктурыЭлемента, 
															ДопПорядок, ВидОтчета, Родитель,
															ИспользуемыеЭлементыВидаОтчета)
	
	Если Не ПустаяСтрока(АдресСтруктурыЭлемента) Тогда
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента);
		Если СсылкаНаЭлемент = Неопределено Тогда
			Если ЗначениеЗаполнено(ДанныеЭлемента.Ссылка) Тогда
				СсылкаНаЭлемент = ДанныеЭлемента.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(
						ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(СсылкаНаЭлемент));
	КонецЕсли;
	
	// получение объекта для записи и определение ссылки
	ОбъектЭлемента = ПолучитьОбъектЭлемента(СсылкаНаЭлемент, ДанныеЭлемента);
	Если ОбъектЭлемента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбъектЭлемента.ЭтоНовый()
		И (ДанныеЭлемента.ОперандыФормулы.Количество()
			ИЛИ ДанныеЭлемента.ЭлементыТаблицы.Количество()) Тогда
		
		ОбъектЭлемента.Владелец = ВидОтчета;
		ОбъектЭлемента.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
		ОбъектЭлемента.РеквизитыВидаЭлемента.Загрузить(ДанныеЭлемента.РеквизитыВидаЭлемента);
		ОбъектЭлемента.Записать();
		
	КонецЕсли;
	
	// запись данных из табличных частей
	Для Каждого Операнд Из ДанныеЭлемента.ОперандыФормулы Цикл
		Если ЗначениеЗаполнено(Операнд.АдресСтруктурыЭлемента) Тогда
			НовыйОперанд = ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(Операнд.Операнд, Операнд.АдресСтруктурыЭлемента,
														ДопПорядок, ВидОтчета, ОбъектЭлемента.Ссылка, 
														ИспользуемыеЭлементыВидаОтчета);
			Операнд.Операнд = НовыйОперанд;
		КонецЕсли;
		ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы Из ДанныеЭлемента.ЭлементыТаблицы Цикл
		
		СтруктураКолонок = Новый Структура("Строка, Колонка");
		
		Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
			
			Если ТипЗнч(ЭлементТаблицы[КлючИЗначение.Ключ]) = Тип("Строка") Тогда
				
				ДанныеЭлементаТаблицы = ПолучитьИзВременногоХранилища(ЭлементТаблицы[КлючИЗначение.Ключ]);
				Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
					ЭлементТаблицы[КлючИЗначение.Ключ] = Неопределено;
				Иначе
					ЭлементТаблицы[КлючИЗначение.Ключ] = ДанныеЭлементаТаблицы.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЭлементТаблицы.Строка)
			И ЗначениеЗаполнено(ЭлементТаблицы.Колонка) Тогда
			
			Если ТипЗнч(ЭлементТаблицы.Элемент) = Тип("Строка") Тогда
			
				НовыйЭлемент = ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(Неопределено, ЭлементТаблицы.Элемент,
															ДопПорядок, ВидОтчета, ОбъектЭлемента.Ссылка, 
															ИспользуемыеЭлементыВидаОтчета);
				ЭлементТаблицы.Элемент = НовыйЭлемент;
			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы Из ДанныеЭлемента.ОформляемыеСтроки Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("Строка") Тогда
			
			Если ЗначениеЗаполнено(ЭлементТаблицы.ЭлементОтчета) Тогда
				ДанныеЭлементаТаблицы = ПолучитьИзВременногоХранилища(ЭлементТаблицы.ЭлементОтчета);
			Иначе
				ДанныеЭлементаТаблицы = Неопределено;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
				ЭлементТаблицы.ЭлементОтчета = Неопределено;
			Иначе
				ЭлементТаблицы.ЭлементОтчета = ДанныеЭлементаТаблицы.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы Из ДанныеЭлемента.ОформляемыеКолонки Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("Строка") Тогда
			
			Если ЗначениеЗаполнено(ЭлементТаблицы.ЭлементОтчета) Тогда
				ДанныеЭлементаТаблицы = ПолучитьИзВременногоХранилища(ЭлементТаблицы.ЭлементОтчета);
			Иначе
				ДанныеЭлементаТаблицы = Неопределено;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
				ЭлементТаблицы.ЭлементОтчета = Неопределено;
			Иначе
				ЭлементТаблицы.ЭлементОтчета = ДанныеЭлементаТаблицы.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы Из ДанныеЭлемента.РасшифровкаПолейОтбораЭО Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("Строка") Тогда
			
			ДанныеЭлементаТаблицы = ПолучитьИзВременногоХранилища(ЭлементТаблицы.ЭлементОтчета);
			Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
				ЭлементТаблицы.ЭлементОтчета = Неопределено;
			Иначе
				ЭлементТаблицы.ЭлементОтчета = ДанныеЭлементаТаблицы.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоСтрок = ДанныеЭлемента.ЭлементыТаблицы.Количество();
	Для Сч = 1 По ВсегоСтрок Цикл
		
		ЭлементТаблицы = ДанныеЭлемента.ЭлементыТаблицы[ВсегоСтрок - Сч];
		Если Не ЗначениеЗаполнено(ЭлементТаблицы.Строка)
			ИЛИ Не ЗначениеЗаполнено(ЭлементТаблицы.Колонка)
			ИЛИ Не ЗначениеЗаполнено(ЭлементТаблицы.Элемент) Тогда
			
			ДанныеЭлемента.ЭлементыТаблицы.Удалить(ЭлементТаблицы);
			Продолжить;
			
		КонецЕсли;
		
		ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Строка);
		ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Колонка);
		ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Элемент);
		Операнды = ЭлементТаблицы.Элемент.ОперандыФормулы;
		Для Каждого Операнд Из Операнды Цикл
			ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
		КонецЦикла;
		
	КонецЦикла;
	
	// запись данных объекта
	ЗаполнитьОбъектПоДаннымВременногоХранилища(ОбъектЭлемента, ДанныеЭлемента, ДопПорядок, ВидОтчета, Родитель);
	
	ОбъектЭлемента.Записать();
	
	Если ЗначениеЗаполнено(АдресСтруктурыЭлемента) Тогда
		// Поместим элемент в хранилище, для последующего использования по ссылкам на хранилище.
		ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(ОбъектЭлемента, АдресСтруктурыЭлемента);
	КонецЕсли;
	
	Возврат ОбъектЭлемента.Ссылка;
	
КонецФункции

Функция ВнестиИзмененияВОбъект(Элемент, Родитель, ПараметрыЗаписиВСтруктуру, ДопПорядок, ИспользуемыеЭлементыВидаОтчета, Кэш)
	
	ПометкаУдаления      = ПараметрыЗаписиВСтруктуру.ПометкаУдаления;
	ВидОтчета            = ПараметрыЗаписиВСтруктуру.ВидОтчета;
	ИзмеренияКПерезаписи = ПараметрыЗаписиВСтруктуру.ИзмеренияКПерезаписи;
	
	ДопПорядок = ДопПорядок + 1;
	
	Если ПустаяСтрока(Элемент.АдресСтруктурыЭлемента)
		И Не Элемент.ЭлементОтчета.Пустая()
		И ИзмеренияКПерезаписи.Найти(Элемент.ЭлементОтчета) = Неопределено
		И ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "Код", Кэш, ВидОтчета) = ДопПорядок
		И ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "Родитель", Кэш, ВидОтчета) = Родитель 
		И ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "ПометкаУдаления", Кэш, ВидОтчета) = ПометкаУдаления Тогда
		
		// запись данных из табличных частей
		Операнды = ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "ОперандыФормулы", Кэш, ВидОтчета);
		Для Каждого Операнд Из Операнды Цикл
			ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
		КонецЦикла;
		
		ЭлементыТаблицы = ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "ЭлементыТаблицы", Кэш, ВидОтчета);
		Для Каждого ЭлементТаблицы Из ЭлементыТаблицы Цикл
			ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Строка);
			ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Колонка);
			ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Элемент);
			Операнды = ЗначениеПоляЭлементаИзКэша(ЭлементТаблицы.Элемент, "ОперандыФормулы", Кэш, ВидОтчета);
			Для Каждого Операнд Из Операнды Цикл
				ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
			КонецЦикла;
		КонецЦикла;
		
		ИспользуемыеЭлементыВидаОтчета.Добавить(Элемент.ЭлементОтчета);
		
		Возврат Элемент.ЭлементОтчета;
		
	КонецЕсли;
	
	// если новый элемент - сохраним данные строки во временном хранилище
	ДанныеЭлемента = Элемент.АдресСтруктурыЭлемента;
	
	ИспользуетсяХранилищеФормы = Истина;
	УИД = Новый УникальныйИдентификатор;
	Если Не ЗначениеЗаполнено(Элемент.ЭлементОтчета) 
		И Не ЗначениеЗаполнено(ДанныеЭлемента) Тогда
		Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") Тогда
			ДанныеЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(Элемент, УИД);
		КонецЕсли;
		ИспользуетсяХранилищеФормы = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеЭлемента)
	   И Не ИзмеренияКПерезаписи.Найти(Элемент.ЭлементОтчета) = Неопределено Тогда
		ДанныеЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(Элемент, УИД);
		ИспользуетсяХранилищеФормы = Ложь;
	КонецЕсли;
	
	СтруктураЭлемента = Неопределено;
	
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") И ДанныеЭлемента <> "" Тогда
		
		СтруктураЭлемента = ПолучитьИзВременногоХранилища(ДанныеЭлемента);
		Если СтруктураЭлемента.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
			ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
															ДанныеЭлемента,
															"ВыводитьВместеСРодительским",
															Элемент.ВыводитьВместеСРодительским);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") И ДанныеЭлемента <> "" Тогда
		
		НужноЗаполнениеИсточников = Ложь; ЭтоЗаполнение = Ложь;
		Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ДанныеЭлемента, "ТипИзмерения");
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика
				ИЛИ ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				НужноЗаполнениеИсточников = Истина;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				Если ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ДанныеЭлемента, "РазрешитьРедактирование") = Истина Тогда
					НужноЗаполнениеИсточников = Истина;
					ЭтоЗаполнение = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НужноЗаполнениеИсточников Тогда
			
			СтруктураЭлемента = ПолучитьИзВременногоХранилища(ДанныеЭлемента);
			
			Если ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ДанныеЭлемента, "ВыбранныеИсточникиЗначений") = Истина Тогда
				
				// 1. Проверим выбранные источники
				Если СтруктураЭлемента.ИсточникиЗначений.Количество() Тогда
					
					СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийЭлемента(Кэш, Элемент, ЭтоЗаполнение);
					НаУдаление = Новый Массив;
					
					Для Каждого СтрокаИсточника Из СтруктураЭлемента.ИсточникиЗначений Цикл
						Если ТипЗнч(СтрокаИсточника.Источник) = Тип("Строка") Тогда
							// 1.1. Попробуем найти по адресу
							Если СписокДоступныхЭлементов.Найти(СтрокаИсточника.Источник) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
							// 1.2. Если не найдено - то по ссылке из хранилища
							СтруктураИсточника = ПолучитьИзВременногоХранилища(СтрокаИсточника.Источник);
							Если ЗначениеЗаполнено(СтруктураИсточника.Ссылка) Тогда
								Если СписокДоступныхЭлементов.Найти(СтруктураИсточника.Ссылка) <> Неопределено Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если ТипЗнч(СтрокаИсточника.Источник) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
							Если СписокДоступныхЭлементов.Найти(СтрокаИсточника.Источник) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						НаУдаление.Добавить(СтрокаИсточника);
					КонецЦикла;
					
					Для Каждого ЭлементМассива Из НаУдаление Цикл
						СтруктураЭлемента.ИсточникиЗначений.Удалить(ЭлементМассива);
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				// 2. Просто заполним доступные источники
				СтруктураЭлемента.ИсточникиЗначений.Очистить();
				СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийПоУмолчанию(Кэш, Элемент, , ЭтоЗаполнение);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокДоступныхЭлементов, СтруктураЭлемента.ИсточникиЗначений);
				
			КонецЕсли;
			
			// 3. Для расширяемых измерений дополним источники
			Если ЭтоЗаполнение Тогда
				НайденныеСтроки = СтруктураЭлемента.ИсточникиЗначений.НайтиСтроки(Новый Структура("ДобавляемыеЗначенияДокумента", Истина));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					СтруктураЭлемента.ИсточникиЗначений.Удалить(НайденнаяСтрока);
				КонецЦикла;
				СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийПоУмолчанию(Кэш, Элемент); 
				Для Каждого СтрокаДоступныхЭлементов Из СписокДоступныхЭлементов Цикл
					Если СтрокаДоступныхЭлементов.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
						НоваяСтрока = СтруктураЭлемента.ИсточникиЗначений.Добавить();
						НоваяСтрока.Источник = СтрокаДоступныхЭлементов.Источник;
						НоваяСтрока.ДобавляемыеЗначенияДокумента = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// 4. Проверим, если источник еще не записан - преобразуем источник в ссылку
			Для Каждого СтрокаИсточника Из СтруктураЭлемента.ИсточникиЗначений Цикл
				
				Если ТипЗнч(СтрокаИсточника.Источник) = Тип("Строка") Тогда
					СтруктураИсточника = ПолучитьИзВременногоХранилища(СтрокаИсточника.Источник);
					Если Не ЗначениеЗаполнено(СтруктураИсточника.Ссылка) Тогда
						СтруктураИсточника.Ссылка = Справочники.ЭлементыФинансовыхОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор);
					КонецЕсли;
					
					ПоместитьВоВременноеХранилище(СтруктураИсточника, СтрокаИсточника.Источник);
					СтрокаИсточника.Источник = СтруктураИсточника.Ссылка;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СсылкаНаЭлемент = ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(Элемент.ЭлементОтчета,
															ДанныеЭлемента, ДопПорядок, ВидОтчета,
															Родитель, ИспользуемыеЭлементыВидаОтчета);
	
	Если ТипЗнч(Кэш) = Тип("ТаблицаЗначений") Тогда
		ОбновитьЗначениеКэша(СсылкаНаЭлемент, Кэш, СтруктураЭлемента);
	КонецЕсли;
	
	Если СсылкаНаЭлемент = Неопределено Тогда
		Элемент.ЭлементОтчета = СсылкаНаЭлемент;
	ИначеЕсли Не ЗначениеЗаполнено(Элемент.ЭлементОтчета) Тогда
		Элемент.ЭлементОтчета = СсылкаНаЭлемент;
	КонецЕсли;
	Если Не ИспользуетсяХранилищеФормы Тогда
		УдалитьИзВременногоХранилища(ДанныеЭлемента);
	КонецЕсли;
	Элемент.АдресСтруктурыЭлемента = "";
	ИспользуемыеЭлементыВидаОтчета.Добавить(Элемент.ЭлементОтчета);
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#Область Обработчики_2_4_2

#КонецОбласти

#КонецОбласти

#КонецЕсли
