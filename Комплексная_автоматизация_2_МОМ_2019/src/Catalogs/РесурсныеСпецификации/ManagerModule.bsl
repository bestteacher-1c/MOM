#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Проверяет использование объекта
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
	|	И ТаблицаПоиска.ИсточникПолученияПолуфабриката = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
	|ГДЕ
	|	ВыпускПродукцииТовары.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.СписаниеЗатратНаВыпуск КАК СписаниеЗатратНаВыпуск
	|ГДЕ
	|	СписаниеЗатратНаВыпуск.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ПланПроизводства.Продукция КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|";
	
	Запрос.УстановитьПараметр("Объект", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьСсылки = НЕ Результат.Пустой();
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);

КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, Параметры) Экспорт
	
	ВидимостьВФормах = "ФормаЭлемента,ФормаСписка,ФормаВыбора";
	
	
	Команда = БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = ВидимостьВФормах;
	КонецЕсли;
	
КонецПроцедуры

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

// Получает описание партии выпуска по спецификации
//
// Параметры:
//  Спецификация - СправочникОбъект.РесурсныеСпецификации, СправочникСсылка.РесурсныеСпецификации - данные спецификации
// 
// Возвращаемое значение:
//  Структура - описание партии выпуска
//
Функция ОписаниеПартииВыпуска(Спецификация) Экспорт
	
	ОписаниеПартииВыпуска = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураОписаниеПартииВыпуска();
	
	Если ТипЗнч(Спецификация) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
		
		РеквизитыСпецификации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Спецификация, "ТипПроизводственногоПроцесса,ИспользоватьНесколькоВыходныхИзделий");
		
		ДанныеОсновногоИзделия = ДанныеОсновногоИзделияСпецификации(Спецификация);
		ЗаполнитьЗначенияСвойств(ОписаниеПартииВыпуска, ДанныеОсновногоИзделия);
		
	Иначе
		
		РеквизитыСпецификации = Новый Структура("ТипПроизводственногоПроцесса,ИспользоватьНесколькоВыходныхИзделий");
		ЗаполнитьЗначенияСвойств(РеквизитыСпецификации, Спецификация);
		
		ДанныеОсновногоИзделия = УправлениеДаннымиОбИзделияхКлиентСервер.ДанныеОсновногоИзделияСпецификации(Спецификация);
		ЗаполнитьЗначенияСвойств(ОписаниеПартииВыпуска, ДанныеОсновногоИзделия);
		
	КонецЕсли;
	
	Если (РеквизитыСпецификации.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			И РеквизитыСпецификации.ИспользоватьНесколькоВыходныхИзделий
		) Тогда
		ОписаниеПартииВыпуска.МножественныйВыпуск = Истина;
	Иначе
		ОписаниеПартииВыпуска.МножественныйВыпуск = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеПартииВыпуска.Номенклатура) И ОписаниеПартииВыпуска.Упаковка.Пустая() Тогда
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеПартииВыпуска.Номенклатура, "ЕдиницаИзмерения");
	Иначе
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия = ОписаниеПартииВыпуска.Упаковка;
	КонецЕсли;
	
	Если ОписаниеПартииВыпуска.МножественныйВыпуск ИЛИ ОписаниеПартииВыпуска.КоличествоУпаковок <> 1 Тогда // ЕдиницаИзмеренияПартииВыпуска() 
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	Иначе
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска = ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия;
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеПартииВыпуска);
	
КонецФункции

// Получает описание производственного процесса
//
// Параметры:
//  Ссылка - СправочникСсылка.РесурсныеСпецификации - ресурсная спецификация
// 
// Возвращаемое значение:
//  Структура - описание производственного процесса
//
Функция ОписаниеПроизводственногоПроцесса(Ссылка) Экспорт
	
	Результат = Новый Структура("НесколькоПервыхЭтапов,НесколькоПоследнихЭтапов");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА НомерСледующегоЭтапа = 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) > 1 КАК НесколькоПоследнихЭтапов,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА НомерЭтапа = 1
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) > 1 КАК НесколькоПервыхЭтапов
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	Владелец = &Ссылка И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает структуру данных основного изделия по спецификации
//
// Параметры:
//  Спецификация	 - СправочникСсылка.РесурсныеСпецификации	 - спецификация, данные которой требуется получить
//  Номенклатура	 - СправочникСсылка.Номенклатура			 - Номенклатура выходного изделия, если не указано, то основная
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика выходного изделия, если не указано, 
//																	то основная или любая из характеристик номенклатуры
//
// Возвращаемое значение:
//   Структура   - содержит данные изделия
//
Функция ДанныеОсновногоИзделияСпецификации(Спецификация, Номенклатура = Неопределено, Характеристика = Неопределено) Экспорт
	
	ТекстЗапроса = ТекстЗапросаДанныеОсновногоИзделияСпецификации();
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Если Номенклатура = Неопределено Тогда
		Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если Характеристика = Неопределено Тогда
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчитыватьВероятностьБрака", Истина);
	
	ДанныеПоНоменклатуре = СтруктураДанныхОсновногоИзделияСпецификации();
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Выборка);
		
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

#КонецОбласти

#Область ДанныеСпецификаций

// Функция - конструктор структуры для выборки данных ресурсной спецификации.
//
// Параметры:
//  ДопПоля	 - Строка	 - перечень дополнительных полей, возможные значения:
//		Распоряжение, ПодразделениеДиспетчер, ДатаПотребности, Назначение, Этап
// 
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных спецификации.
//
Функция ДанныеПоНоменклатуре() Экспорт
	
	ДанныеПоНоменклатуре = Новый Структура;
	
	ДанныеПоНоменклатуре.Вставить("Номенклатура");
	ДанныеПоНоменклатуре.Вставить("Характеристика");
	
	ДанныеПоНоменклатуре.Вставить("Спецификация");
	ДанныеПоНоменклатуре.Вставить("Количество");
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Функция - конструктор структуры для выборки данных ресурсной спецификации.
//
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных спецификации.
//
Функция ДанныеПоНоменклатуреРасширенный() Экспорт
	
	ДанныеПоНоменклатуре = Новый Структура;
	
	ДанныеПоНоменклатуре.Вставить("Номенклатура");
	ДанныеПоНоменклатуре.Вставить("Характеристика");
	
	ДанныеПоНоменклатуре.Вставить("Спецификация");
	ДанныеПоНоменклатуре.Вставить("Количество");
	
	ДанныеПоНоменклатуре.Вставить("Распоряжение");
	
	ДанныеПоНоменклатуре.Вставить("ПодразделениеДиспетчер");
	
	ДанныеПоНоменклатуре.Вставить("ДатаПотребности");
	ДанныеПоНоменклатуре.Вставить("ДнейОтПотребности");
	
	ДанныеПоНоменклатуре.Вставить("ПоляГруппировки");
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Функция - конструктор структуры для выборки данных ресурсной спецификации.
//
// Параметры:
//  ПереченьДанных			 - Строка,Массив,Неопределено		 - содержит перечень данных спецификации, которые требуется получить.
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - содержит временные таблицы
//  	используемые для получения способа обеспечения:
//  	* ВтСпособыПолученияМатериалов - ВременнаяТаблицаЗапроса - таблица с полями Номенклатура, Характеристика,
//  	Назначение, Распоряжение, Склад, ВариантОбеспечения.
///  ВариантЗаполненияОбеспечения	- Определяет вариант заполнения обеспечения (см. перечисление ВариантыЗаполненияОбеспеченияПроизводства
// 
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных спецификации:
//  	* ПереченьДанных - Массив - Содержит перечень данных спецификации, которые требуется получить.
//  	    Неопределено - если нужно получить весь набор данных.
//  	* МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит временные таблицы используемые для получения
//  	    способа обеспечения
//  	* ВариантЗаполненияОбеспечения - Вариант заполнения обеспечения в производстве
//  	* ПолучитьПредставления - Булево - Истина, если нужно получить представления ссылочных полей.
//  	* ПолучитьСведенияАвтовыбора - Булево - Истина, если нужно получить сведения автовыбора.
//  	* ПереопределениеНастройкиПартииВыпуска - Структура - используется для переопределение настройки партии выпуска.
//		* ГруппироватьДанные - Булево - Истина, если при получении данных по списку номенклатуры требуется группировать
//			данные по заданному набору полей (см. параметр ПоляГруппировки).
//		* ПоляГруппировки - Структура - Ключи определяют имена полей, по которым необходимо группировать данные.
//			Аналогичные поля должны присутствовать в данных по номенклатуре (одноименный параметр).
//			Если поля не заданы, но взведен параметр ГруппироватьДанные, то группировка осуществляется только по спецификации.
//		* ОкруглятьКоличествоШтучныхТоваров - Булево - если Истина, то штучные товары в мерных ед. изм. при отгрузке
//  		с/на склады, не являющиеся цеховыми кладовыми, будут округляться до целого количества штук.
//
Функция ПараметрыВыборкиДанных(ПереченьДанных = Неопределено, МенеджерВременныхТаблиц = Неопределено, ВариантЗаполненияОбеспечения = Неопределено) Экспорт
	
	ПараметрыВыборки = Новый Структура;
	
	Если ТипЗнч(ПереченьДанных) = Тип("Строка") Тогда
		ПараметрыВыборки.Вставить("ПереченьДанных", СтрРазделить(СтрЗаменить(ПереченьДанных, " ", ""), ",", Ложь));
	ИначеЕсли ТипЗнч(ПереченьДанных) = Тип("Массив") Тогда
		ПараметрыВыборки.Вставить("ПереченьДанных", ПереченьДанных);
	Иначе
		ПараметрыВыборки.Вставить("ПереченьДанных", ПереченьДанныхСпецификации());
	КонецЕсли;
	
	ПараметрыВыборки.Вставить("ПолучитьПредставления", Ложь);
	ПараметрыВыборки.Вставить("ПолучитьСведенияАвтовыбора", Истина);
	
	ПараметрыВыборки.Вставить("ОбъединитьМатериалыИВходящиеИзделия", Ложь);
	
	ПараметрыВыборки.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	ПараметрыВыборки.Вставить("ДоступныРаботы", Истина);
	ПараметрыВыборки.Вставить("РассчитыватьДляПлановПроизводства", Ложь);
	
	Если ВариантЗаполненияОбеспечения = Неопределено Тогда
		ПараметрыВыборки.Вставить("ВариантЗаполненияОбеспечения", Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения);
	Иначе
		ПараметрыВыборки.Вставить("ВариантЗаполненияОбеспечения", ВариантЗаполненияОбеспечения);
	КонецЕсли;
	
	ПараметрыВыборки.Вставить("УчитыватьВероятностьБрака", Истина);
	ПараметрыВыборки.Вставить("СпособРасчетаМатериалов", Перечисления.СпособыРасчетаМатериалов.МинимальноеПотребление);
	
	ПараметрыВыборки.Вставить("ПереопределениеНастройкиПартииВыпуска", Новый Структура("Использовать,ВыпускПроизвольнымиПорциями",Ложь,Ложь));
	
	ПараметрыВыборки.Вставить("ГруппироватьДанные", Ложь); // для получения данных по списку номенклатуры
	ПараметрыВыборки.Вставить("ПоляГруппировки", Новый Структура);
	
	// НеПолучать, Подготовить, Распаковать
	ПараметрыВыборки.Вставить("РежимПолученияДанныхНаборов", "Распаковать");
	
	ПараметрыВыборки.Вставить("ОкруглятьКоличествоШтучныхТоваров", Истина);
	
	Возврат ПараметрыВыборки;
	
КонецФункции

// Функция - конструктор структуры параметров расчета количества данных спецификаций.
//
// Параметры:
//  ДанныеПоНоменклатуре - Структура - см. ДанныеПоНоменклатуреРасширенный()
//  СтруктураДанных		 - Структура - данные спецификации (кеш данных спецификации)
//  СписокСвойств		 - Строка	 - список свойств структуры ДанныеСпецификации, которые необходимо рассчитать
//  ИсключаяСвойства	 - Строка	 - список свойств структуры ДанныеСпецификации, которые необходимо исключить из расчета
// 
// Возвращаемое значение:
//  Структура - параметры расчета количества
//
Функция ПараметрыРасчетаКоличества(ДанныеПоНоменклатуре, СтруктураДанных = Неопределено, СписокСвойств = "", ИсключаяСвойства = "") Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеПоНоменклатуре", ДанныеПоНоменклатуре);
	
	Результат.Вставить("СтруктураДанных", СтруктураДанных);
	Результат.Вставить("ПереченьДанных", ПереченьДанныхСпецификации(СписокСвойств, ИсключаяСвойства));
	
	Результат.Вставить("ИспользоватьОдновременноПроизводимоеКоличество", Истина);
	
	Возврат Результат;
	
КонецФункции

// Выполняет разузлование продукции и полуфабрикатов и для каждого элемента в структуре изделий
//  получает заданный набор данных ресурсной спецификации. В процессе обработки так же выполняется
//  укрупнение партий выпуска продукции и полуфабрикатов.
//
// Параметры:
//  ВходящиеПотребности	 - ТаблицаЗначений	 - таблица с продукцией (полуфабрикатами), структуру производства
//  	которых необходимо получить.
//  ПараметрыВыборки	 - Структура		 - см. Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных()
// 
// Возвращаемое значение:
//  Структура - структура с элементами:
//  	* ДанныеСпецификаций - Массив, Неопределено - элементами массива являются структуры, содержащие данные ресурсных спецификаций.
//  	* ЕстьОшибка - Булево - Истина если при разузловании возникла ошибка (ДанныеСпецификаций в этом случае имеют значение Неопределено).
//  	* ОшибкаТекст - Строка - описание возникшей ошибки.
//  	* ОшибкаСсылка - СправочникСсылка, ДокументСсылка - ссылка на объект, с которым связана ошибка.
//
Функция ДанныеСпецификацииПоПотребности(ВходящиеПотребности, ПараметрыВыборки) Экспорт
	
	КэшированныеСпецификации = ИнициализироватьКэшСпецификаций();
	
	ОписаниеОшибки = ИнициализироватьОписаниеОшибки();
	
	Потребности = РазузловатьПотребностиИЗаполнитьСрокиОбеспечения(
		ВходящиеПотребности,
		ПараметрыВыборки,
		КэшированныеСпецификации,
		ОписаниеОшибки);
	
	ДанныеСпецификаций = Неопределено;
	Если НЕ ОписаниеОшибки.ЕстьОшибка Тогда
		
		Выпуски = РассчитатьВыпускПоПотребностям(
			Потребности,
			ПараметрыВыборки,
			КэшированныеСпецификации);
		
		ДанныеСпецификаций = ДанныеСпецификацийПоСгруппированнымПотребностям(
			Выпуски,
			Потребности,
			ПараметрыВыборки,
			КэшированныеСпецификации);
		
	КонецЕсли;
	
	Результат = Новый Структура("ДанныеСпецификаций", ДанныеСпецификаций);
	Для каждого Элемент Из ОписаниеОшибки Цикл
		Результат.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные спецификации с учетом данных о номенклатуре
//
// Параметры:
//  ДанныеПоНоменклатуре	- Структура - содержит данные о номенклатуре.
//  ПараметрыВыборки		- Структура - см. Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных()
//
// Возвращаемое значение:
//   Структура   - содержит данные спецификации
//
Функция ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, ПараметрыВыборки, Отбор = Неопределено) Экспорт
	
	ДанныеСпецификации = ДанныеСпецификации(ДанныеПоНоменклатуре, ПараметрыВыборки);
	
	ПартияВыпуска = РассчитатьПартиюВыпускаПоНоменклатуре(
		ДанныеПоНоменклатуре,
		ДанныеСпецификации);
	
	ПараметрыРасчета = ПараметрыРасчетаКоличества(
		ДанныеПоНоменклатуре, 
		ДанныеСпецификации);
	
	РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, ДанныеСпецификации, ПараметрыРасчета);
	
	РаспаковатьСоставНаборов(ДанныеСпецификации, ПараметрыВыборки);
	
	ПрименитьОтборПоДаннымСпецификации(ДанныеСпецификации, ПараметрыВыборки, Отбор);
	
	Возврат ДанныеСпецификации;
	
КонецФункции

// Возвращает данные спецификации по переданному списку номенклатуры.
//
// Параметры:
//  МассивДанных				- Массив - содержит структуру данных о номенклатуре.
//  ПараметрыВыборки			- Структура - см. Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных()
//	КэшированныеСпецификации	- ТаблицаЗначений - таблица с закэшированными данными ресурсных спецификаций.
//
// Возвращаемое значение:
//   Массив - данные для каждой переданной номенклатуры в виде структуры с ключами:
//		* Этапы              - ТаблицаЗначений
//		* ВыходныеИзделия    - ТаблицаЗначений
//		* ВозвратныеОтходы   - ТаблицаЗначений
//		* МатериалыИУслуги   - ТаблицаЗначений
//		* Трудозатраты       - ТаблицаЗначений
//		* ВходящиеИзделия    - ТаблицаЗначений
//		* ВидыРабочихЦентров - ТаблицаЗначений
//		* АльтернативныеВидыРабочихЦентров - ТаблицаЗначений
//		* Спецификация                 - СправочникСсылка.РесурсныеСпецификации
//		* СпецификацияПредставление    - Строка
//		* СпособРаспределенияЗатратНаВыходныеИзделия - ПеречислениеСсылка.СпособыРаспределенияЗатратНаВыходныеИзделия
//		* ТипПроизводственногоПроцесса               - ПеречислениеСсылка.ТипыПроизводственныхПроцессов
//		* ИспользоватьНесколькоВыходныхИзделий       - Булево
//		* МногоэтапныйПроизводственныйПроцесс        - Булево
//		* ВыпускПроизвольнымиПорциями                - Булево
//		* ОптимальнаяПартияВыпуска                   - Число
//		* МинимальнаяПартияВыпуска                   - Число
//		* ОсновноеИзделие                            - Структура - см СтруктураДанныхОсновногоИзделияСпецификации
//		* ОграниченСрокПролеживания                  - Булево
//		* МаксимальныйСрокПролеживанияВДнях          - Число
//		* ОптимальноеКоличествоПередачиМеждуЭтапами  - Число
//
Функция ДанныеСпецификацииПоСпискуНоменклатуры(МассивДанных, ПараметрыВыборки, КэшированныеСпецификации = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Если КэшированныеСпецификации = Неопределено Тогда
		КэшированныеСпецификации = ИнициализироватьКэшСпецификаций();
	КонецЕсли;
	
	КэшСпискаНоменклатуры = Неопределено;
	Если ПараметрыВыборки.ГруппироватьДанные Тогда
		КэшСпискаНоменклатуры = ИнициализироватьКэшСпискаНоменклатуры(ПараметрыВыборки);
	КонецЕсли;
	
	Для каждого ДанныеПоНоменклатуре Из МассивДанных Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеПоНоменклатуре.Спецификация) Тогда
			Результат.Добавить(Неопределено);
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = НайтиИЗакэшироватьДанныеСпецификации(
			ДанныеПоНоменклатуре, ПараметрыВыборки, КэшированныеСпецификации);
		
		ПартияВыпуска = Неопределено;
		ИндексРезультата = Неопределено;
		
		Если ПараметрыВыборки.ГруппироватьДанные Тогда
			
			СтрокаКэша = ПолучитьДанныеКэшаСпискаНоменклатуры(
				КэшСпискаНоменклатуры, ПараметрыВыборки, ДанныеПоНоменклатуре, СтруктураДанных.Параметрическая);
			
			Если СтрокаКэша <> Неопределено Тогда
				
				ДобавитьДанныеВМассив = Истина;
				Для каждого Элемент Из СтрокаКэша.МассивДанныхПоНоменклатуре Цикл
					Если Элемент.Номенклатура = ДанныеПоНоменклатуре.Номенклатура
						И Элемент.Характеристика = ДанныеПоНоменклатуре.Характеристика Тогда
						Элемент.Количество = Элемент.Количество + ДанныеПоНоменклатуре.Количество;
						ДобавитьДанныеВМассив = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ДобавитьДанныеВМассив Тогда
					СтрокаКэша.МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре);
				КонецЕсли;
				
				ПартияВыпуска = РассчитатьМаксимальнуюПартиюВыпуска(СтрокаКэша.МассивДанныхПоНоменклатуре, ПараметрыВыборки, КэшированныеСпецификации);
				ИндексРезультата = СтрокаКэша.ИндексРезультата;
				
			КонецЕсли;
			Если ДанныеПоНоменклатуре.Свойство("ПоляГруппировки") Тогда
				СтруктураДанных.Вставить("ПоляГруппировки", ДанныеПоНоменклатуре.ПоляГруппировки);
			КонецЕсли;
		КонецЕсли;
		
		Если ПартияВыпуска = Неопределено Тогда
			ПартияВыпуска = РассчитатьПартиюВыпускаПоНоменклатуре(ДанныеПоНоменклатуре, СтруктураДанных);
		КонецЕсли;
		
		ПараметрыРасчета = ПараметрыРасчетаКоличества(
			ДанныеПоНоменклатуре,
			СтруктураДанных);
		ПараметрыРасчета.ИспользоватьОдновременноПроизводимоеКоличество = Ложь;
		
		РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, СтруктураДанных, ПараметрыРасчета);
		
		РаспаковатьСоставНаборов(СтруктураДанных, ПараметрыВыборки);
		
		Если ИндексРезультата = Неопределено Тогда
			
			Результат.Добавить(СтруктураДанных);
			
			Если ПараметрыВыборки.ГруппироватьДанные Тогда
				ДобавитьВКэшСпискаНоменклатуры(КэшСпискаНоменклатуры, ДанныеПоНоменклатуре, Результат.Количество()-1);
			КонецЕсли;
			
		Иначе
			Результат[ИндексРезультата] = СтруктураДанных;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные спецификации с учетом данных о номенклатуре и спецификаций полуфабрикатов, производимых в процессе.
//
// Параметры:
//  ДанныеПоНоменклатуре		- Структура - содержит данные о номенклатуре.
//  ИсключитьПолуфабрикаты		- Булево - Истина, если не требуется добавлять полуфабрикаты в материалы и выходные изделия.
//								- Неопределено - если нужно получить весь набор данных.
//  ПараметрыВыборки			- Структура - см. Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных()
//	КэшированныеСпецификации	- ТаблицаЗначений - таблица с закэшированными данными ресурсных спецификаций.
//
// Возвращаемое значение:
//   Структура   - содержит данные спецификации
//
Функция ДанныеСпецификацииСПолуфабрикатами(ДанныеПоНоменклатуре, ИсключитьПолуфабрикаты, ПараметрыВыборки, КэшированныеСпецификации = Неопределено) Экспорт
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(ДанныеПоНоменклатуре);
	
	// данные конечной спецификации
	ДанныеСпецификаций = ДанныеСпецификацииПоСпискуНоменклатуры(
		МассивДанных,
		ПараметрыВыборки,
		КэшированныеСпецификации);
	
	ДанныеОсновнойСпецификации = ДанныеСпецификаций[0];
	
	Если ДанныеОсновнойСпецификации = Неопределено Тогда
		
		Если ДанныеПоНоменклатуре.Свойство("Спецификация") И ЗначениеЗаполнено(ДанныеПоНоменклатуре.Спецификация) Тогда
			ТекстИсключения = НСтр("ru = 'Ошибка при чтении данных ресурсной спецификации: %Спецификация%.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Спецификация%", ДанныеПоНоменклатуре.Спецификация);
		Иначе
			ТекстИсключения = НСтр("ru = 'Ошибка при чтении данных ресурсной спецификации: не передана спецификация.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	МатериалыПроизводимыеВПроцессе = Новый Массив;
	
	Для Каждого Строка Из ДанныеОсновнойСпецификации.МатериалыИУслуги Цикл
		
		Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации Тогда
			
			ДанныеМатериала = Новый Структура;
			ДанныеМатериала.Вставить("Номенклатура",      Строка.Номенклатура);
			ДанныеМатериала.Вставить("Характеристика",    Строка.Характеристика);
			ДанныеМатериала.Вставить("Подразделение",     Строка.ПодразделениеЭтапа);
			ДанныеМатериала.Вставить("Спецификация",      Строка.ИсточникПолученияПолуфабриката);
			ДанныеМатериала.Вставить("Количество",        Строка.Количество);
			ДанныеМатериала.Вставить("Упаковка",          Строка.Упаковка);
			ДанныеМатериала.Вставить("ДнейОтПотребности", Строка.ДнейОтПотребности);
			
			МатериалыПроизводимыеВПроцессе.Добавить(ДанныеМатериала);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока МатериалыПроизводимыеВПроцессе.Количество() > 0 Цикл
		
		МатериалыПроизводимыеВПроцессе = ДобавитьДанныеПолуфабрикатов(
														ДанныеОсновнойСпецификации, 
														МатериалыПроизводимыеВПроцессе, 
														ПараметрыВыборки, 
														КэшированныеСпецификации);
		
	КонецЦикла;
	
	Если ИсключитьПолуфабрикаты Тогда
		
		СтруктураОтбора = Новый Структура("ПроизводитсяВПроцессе", Истина);
		НайденныеСтроки = ДанныеОсновнойСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если Строка.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе
				И ДанныеОсновнойСпецификации.Свойство("ВозвратныеОтходы") Тогда
				
				СтруктураОтбораОтходов = Новый Структура("Номенклатура, Характеристика, Этап");
				ЗаполнитьЗначенияСвойств(СтруктураОтбораОтходов, Строка);
				СтруктураОтбораОтходов.Этап = Строка.ИсточникПолученияПолуфабриката;
				
				НайденныеСтрокиОтходов = ДанныеОсновнойСпецификации.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбораОтходов);
				
				Для Каждого СтрокаОтхода Из НайденныеСтрокиОтходов Цикл
					ДанныеОсновнойСпецификации.ВозвратныеОтходы.Удалить(СтрокаОтхода);
				КонецЦикла;
				
			КонецЕсли;
			
			ДанныеОсновнойСпецификации.МатериалыИУслуги.Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеОсновнойСпецификации;
	
КонецФункции

#КонецОбласти

#Область Прочее

//Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = Новый Структура;
	
#Область Сборка

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.ВРазработке);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.Вставить("Сборка", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти
	
#Область Ремонт

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.ВРазработке);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.Вставить("Ремонт", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти
	
#Область Разборка

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.ВРазработке);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.Вставить("Разборка", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти

	Возврат ПараметрыВыбораСпецификаций;

КонецФункции

//Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры распределения затрат на выходные изделия.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров распределения затрат.
// 
// Возвращаемое значение:
//  Структура - параметры, уточняющие особенности распределения затрат на выходные изделия.
//
Функция ПараметрыРаспределенияЗатрат(Объект) Экспорт
	
	ПараметрыРаспределенияЗатрат = ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия("ВыходныеИзделия", Объект.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
		ПараметрыРаспределенияЗатрат.АвтоРасчетЛюбойХарактеристики = Истина;
	КонецЕсли;
	
	ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации = Истина;
	
	ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна = Истина;
	
	ПараметрыРаспределенияЗатрат.ПоляСвязи = "Номенклатура,Характеристика,ЭтапРедактирование";
	ПараметрыРаспределенияЗатрат.ТолькоПросмотр = Истина;
	
	Возврат ПараметрыРаспределенияЗатрат;
	
КонецФункции

// Возвращает спецификации, в которые входит полуфабрикат производимый / обрабатываемый по указанной спецификации
//
// Параметры:
//  Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация полуфабриката
// 
// Возвращаемое значение:
//  Массив - зависимые спецификации
//
Функция ЗависимыеСпецификации(Спецификация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	(
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ОбработатьПоСпецификации
	|	И Таблица.Спецификация = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ОбработатьПоСпецификации
	|	И Таблица.Спецификация = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ПроизводитсяВПроцессе
	|	И Таблица.ИсточникПолученияПолуфабриката = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ПроизводитсяВПроцессе
	|	И Таблица.СпецификацияРемонта = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|		ПО ОсновныеСпецификации.Номенклатура = Таблица.Номенклатура
	|			И (ОсновныеСпецификации.Характеристика = Таблица.Характеристика
	|				ИЛИ ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификации.Подразделение = Таблица.Этап.Подразделение
	|				ИЛИ ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|			И (Таблица.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации))
	|			И (Таблица.ИсточникПолученияПолуфабриката = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
	|ГДЕ
	|	ОсновныеСпецификации.Спецификация = &Спецификация
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииОтбор
	|				ГДЕ
	|					ОсновныеСпецификацииОтбор.Номенклатура = Таблица.Номенклатура
	|				
	|					И (
	|						ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|						И ОсновныеСпецификацииОтбор.Характеристика = Таблица.Характеристика
	|						И ОсновныеСпецификацииОтбор.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					
	|						ИЛИ
	|					
	|						ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|						И ОсновныеСпецификацииОтбор.Подразделение = Таблица.Этап.Подразделение
	|						И ОсновныеСпецификацииОтбор.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|						И Таблица.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					
	|					)
	|					
	|					И ОсновныеСпецификацииОтбор.Спецификация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует) 
	|					И ОсновныеСпецификацииОтбор.Спецификация <> &Спецификация)
	|	И Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|
	|) КАК Таблица");
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Возвращает ссылку на этап спецификации у которой производственный процесс одноэтапный
//
// Параметры:
//  Спецификация	- СправочникСсылка.РесурсныеСпецификации - спецификация, этапы которой требуется проверить
//
// Возвращаемое значение:
//   СправочникСсылка.ЭтапыПроизводства - этап одноэтапной спецификации
//
Функция ПолучитьЭтапОдногоЭтапногоПроцесса(Спецификация) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Этапы.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК Этапы
	|ГДЕ
	|	НЕ Этапы.ПометкаУдаления
	|	И Этапы.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа,
	|	Ссылка");
	Запрос.УстановитьПараметр("Владелец", Спецификация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции

// Подставляет в текст запроса соединение, необходимое для получения выходных изделий по ресурсной спецификации
//
// Параметры:
//  ТекстЗапроса	 - Строка - текст запроса, в который нужно подставить соединение
//  ИмяПараметра	 - Строка - имя параметра на место которого будет подставлено соединение
//  ПолеСоединения	 - Строка - поле соединения в формате [ВедущаяТаблица].Спецификация
// 
// Возвращаемое значение:
//  Строка - новый текст запроса
//
Функция ПодставитьСоединениеДляПолученияВыходныхИзделийПоСпецификации(ТекстЗапроса, ИмяПараметра, ПолеСоединения) Экспорт
	
	РезультатПодстановки = ТекстЗапроса;
	Пока Истина Цикл
		
		НачалоПараметра = СтрНайти(РезультатПодстановки, ИмяПараметра, НаправлениеПоиска.СНачала);
		
		Если НачалоПараметра = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПоследнийСимвол = НачалоПараметра + СтрДлина(ИмяПараметра);
		НачалоСинонима = СтрНайти(РезультатПодстановки, "КАК", НаправлениеПоиска.СКонца, НачалоПараметра) + СтрДлина("КАК");
		Синоним = СокрЛП(СтрЗаменить(Сред(РезультатПодстановки, НачалоСинонима, НачалоПараметра - НачалоСинонима - 1), "ПО", ""));
		ПервыйСимвол = СтрНайти(РезультатПодстановки, "СОЕДИНЕНИЕ", НаправлениеПоиска.СКонца, НачалоСинонима) + СтрДлина("СОЕДИНЕНИЕ");
		
		ПодстрокаПоиска = Сред(РезультатПодстановки, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
		ПодстрокаЗамены =
			" Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК %Синоним%
			|		ПО Т.Спецификация = %Синоним%.Ссылка";
			
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Спецификация", ПолеСоединения);
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "%Синоним%", Синоним);
		РезультатПодстановки = СтрЗаменить(РезультатПодстановки, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
	
	Возврат РезультатПодстановки;
	
КонецФункции

// Подставляет в текст запроса выбираемые поля из выходных изделий
//
// Параметры:
//  ТекстЗапроса	 - Строка - текст запроса, в который нужно подставить соединение
//	ИсходныеПоля - Структура - содержит пути к полям в исходном тексте запроса в виде [ВедущаяТаблица].ИмяПоля
//		* Номенклатура - Строка - путь к полю Номенклатура
//		* Характеристика - Строка - путь к полю Характеристика
//		* ДоляСтоимости - Строка - путь к полю ДоляСтоимости
//		* Количество - Строка - путь к полю Количество
// 
// Возвращаемое значение:
//  Строка - новый текст запроса
//
Функция ПодставитьВыбираемыеПоля(ТекстЗапроса, ИсходныеПоля) Экспорт
	
	ПоляВыходныхИзделий = Новый Соответствие;
	ПоляВыходныхИзделий.Вставить("Номенклатура", "Номенклатура");
	ПоляВыходныхИзделий.Вставить("Характеристика", "Характеристика");
	ПоляВыходныхИзделий.Вставить("ДоляСтоимости", "ДоляСтоимости");
	ПоляВыходныхИзделий.Вставить("Количество", "Количество");
	
	Для Каждого КлючИЗначение Из ИсходныеПоля Цикл
		
		ПолеИзделия = ПоляВыходныхИзделий.Получить(КлючИЗначение.Ключ);
		Если ПолеИзделия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВедущаяТаблица = Лев(КлючИЗначение.Значение, СтрНайти(КлючИЗначение.Значение, ".", НаправлениеПоиска.СНачала));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, КлючИЗначение.Значение, ВедущаяТаблица + ПолеИзделия);
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УправлениеДаннымиОбИзделияхВызовСервера.РесурсныеСпецификацииОбработкаПолученияДанныхВыбора(
				ДанныеВыбора,
				Параметры, 
				СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	УправлениеДаннымиОбИзделияхВызовСервера.РесурсныеСпецификацииОбработкаПолученияФормы(
				ВидФормы,
				Параметры,
				ВыбраннаяФорма,
				СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения


#КонецОбласти

#Область ДанныеСпецификаций

#Область Основное

Функция ДанныеСпецификации(ДанныеПоНоменклатуре, ПараметрыВыборки)
	
	ПереченьДанных = Неопределено;
	Если НЕ ПараметрыВыборки.Свойство("ПереченьДанных", ПереченьДанных) ИЛИ НЕ ЗначениеЗаполнено(ПереченьДанных) Тогда
		ПереченьДанных = ПереченьДанныхСпецификации();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Неопределено;
	Если НЕ ПараметрыВыборки.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц)
		ИЛИ МенеджерВременныхТаблиц = Неопределено
		Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	ИндексРезультата = 0;
	ИндексыРезультата = Новый Структура();
	
	ИспользоватьПараметризациюРесурсныхСпецификаций = 
		ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций");
	
	ТекстЗапроса = "";

#Область ВтОсновноеИзделие
	ТекстЗапроса = ТекстЗапроса + "
	|
	|" + СтрЗаменить(ТекстЗапросаДанныеОсновногоИзделияСпецификации(), "//ПОМЕСТИТЬ", "ПОМЕСТИТЬ ВтОсновноеИзделие") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	ИндексРезультата = ИндексРезультата + 1;
#КонецОбласти

	#Область ВтСпособыПолученияМатериалов
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтСпособыПолученияМатериалов") = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + ПроизводствоСервер.ТекстЗапросаВТСпособыПолученияМатериаловПустая();
		ИндексРезультата = ИндексРезультата + 1;
		
	КонецЕсли;
	
	#КонецОбласти

	#Область ВтФорматыСкладов
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтФорматыСкладов") = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + Справочники.ФорматыМагазинов.ТекстЗапросаВтФорматыСкладов(Ложь);
		ИндексРезультата = ИндексРезультата + 1;
		
	КонецЕсли;
	
	#КонецОбласти

	#Область ВтОтборДляЗаполненияПоПлановойСтоимости
	
	Если ПереченьДанных.Найти("ВыходныеИзделия") <> Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
		|	&ИсточникХарактеристика      КАК Характеристика
		|ПОМЕСТИТЬ ВтОтборДляЗаполненияПоПлановойСтоимости
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка = &Спецификация
		|	И ВыходныеИзделия.Ссылка.СпособРаспределенияЗатратНаВыходныеИзделия = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		ТекстПоляВыражениеХарактеристика = ТекстПоляВыражениеХарактеристикаОсновногоИзделия("ВыходныеИзделия", "Номенклатура", "Характеристика");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникХарактеристика", ТекстПоляВыражениеХарактеристика);
		
		ИндексРезультата = ИндексРезультата + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	



#Область РеквизитыСпецификации
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	РесурсныеСпецификации.Ссылка        КАК Спецификация,
	|	РесурсныеСпецификации.Представление КАК СпецификацияПредставление,
	|
	|	РесурсныеСпецификации.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия,
	|
	|	РесурсныеСпецификации.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	РесурсныеСпецификации.ИспользоватьНесколькоВыходныхИзделий КАК ИспользоватьНесколькоВыходныхИзделий,
	|
	|	РесурсныеСпецификации.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА &ВыпускПроизвольнымиПорциями
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &ДоступноОписаниеПартииВыпуска
	|					ТОГДА
	|						РесурсныеСпецификации.ВыпускПроизвольнымиПорциями
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ                                             КАК ВыпускПроизвольнымиПорциями,
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА 0
	|		ИНАЧЕ 
	|			РесурсныеСпецификации.ОптимальнаяПартияВыпуска
	|	КОНЕЦ                                             КАК ОптимальнаяПартияВыпуска,
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА 0
	|		ИНАЧЕ 
	|			РесурсныеСпецификации.ДопустимоеПревышениеОптимальнойПартииВыпуска
	|	КОНЕЦ                                             КАК ДопустимоеПревышениеОптимальнойПартииВыпуска,
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &ДоступноОписаниеПартииВыпуска
	|					ТОГДА
	|						РесурсныеСпецификации.МинимальнаяПартияВыпуска
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ                                             КАК МинимальнаяПартияВыпуска,
	|
	|	РесурсныеСпецификации.ОграниченСрокПролеживанияВыходныхИзделий    КАК ОграниченСрокПролеживания,
	|	РесурсныеСпецификации.МаксимальныйСрокПролеживанияВыходныхИзделий КАК МаксимальныйСрокПролеживанияВДнях,
	|
	|	РесурсныеСпецификации.ОптимальноеКоличествоПередачиМеждуЭтапами КАК ОптимальноеКоличествоПередачиМеждуЭтапами
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОсновноеИзделие КАК ОсновноеВыходноеИзделие
	|		ПО ИСТИНА
	|ГДЕ
	|	РесурсныеСпецификации.Ссылка = &Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	ИндексыРезультата.Вставить("РеквизитыСпецификации", ИндексРезультата);
	ИндексРезультата = ИндексРезультата + 1;
#КонецОбласти

#Область ОсновноеИзделие
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ * ИЗ ВтОсновноеИзделие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	ИндексыРезультата.Вставить("ОсновноеИзделие", ИндексРезультата);
	ИндексРезультата = ИндексРезультата + 1;
#КонецОбласти

#Область Этапы
	Если ПереченьДанных.Найти("Этапы") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	//ЭтапыПроизводства_Представления
		|	ЭтапыПроизводства.Ссылка                                    КАК Этап,
		|	ЭтапыПроизводства.Владелец                                  КАК Спецификация,
		|	ЭтапыПроизводства.Представление                             КАК ЭтапПредставление,
		|	ЭтапыПроизводства.НомерЭтапа                                КАК НомерЭтапа,
		|	ЭтапыПроизводства.НомерСледующегоЭтапа                      КАК НомерСледующегоЭтапа,
		|	ЭтапыПроизводства.Подразделение                             КАК Подразделение,
		|
		|	1                                                           КАК Количество,
		|	1                                                           КАК КоличествоНаЕдиницуПартииВыпуска,
		|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0)             КАК КоличествоИзделие,
		|
		|	ЭтапыПроизводства.ПланироватьРаботуВидовРабочихЦентров      КАК ПланироватьРаботуВидовРабочихЦентров,
		|	ЭтапыПроизводства.Непрерывный                               КАК Непрерывный,
		|	ЭтапыПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий  КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
		|	ЭтапыПроизводства.ДлительностьЭтапа                         КАК ДлительностьЭтапа,
		|	ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа         КАК ЕдиницаИзмеренияДлительностиЭтапа,
		|	ЭтапыПроизводства.ПредварительныйБуфер                      КАК ПредварительныйБуфер,
		|	ЭтапыПроизводства.ЗавершающийБуфер                          КАК ЗавершающийБуфер,
		|	ЭтапыПроизводства.ЕдиницаИзмеренияПредварительногоБуфера    КАК ЕдиницаИзмеренияПредварительногоБуфера,
		|	ЭтапыПроизводства.ЕдиницаИзмеренияЗавершающегоБуфера        КАК ЕдиницаИзмеренияЗавершающегоБуфера,
		|	ЭтапыПроизводства.МаршрутнаяКарта                           КАК МаршрутнаяКарта,
		|	ЭтапыПроизводства.КоэффициентМаршрутнойКарты                КАК КоэффициентМаршрутнойКарты,
		|	ЭтапыПроизводства.Описание                                  КАК Описание,
		|	ЭтапыПроизводства.ПроизводствоНаСтороне                     КАК ПроизводствоНаСтороне,
		|	ЭтапыПроизводства.Партнер                                   КАК Партнер,
		|	ЭтапыПроизводства.ГрафикРаботыПартнера                      КАК ГрафикРаботыПартнера,
		|	ЭтапыПроизводства.УслугаПереработчика                       КАК УслугаПереработчика,
		|	ЭтапыПроизводства.ХарактеристикаУслугиПереработчика         КАК ХарактеристикаУслугиПереработчика,
		|	ЭтапыПроизводства.СтатьяКалькуляции                         КАК СтатьяКалькуляции,
		|	ЭтапыПроизводства.ПорядокРаботыВидовРабочихЦентров          КАК ПорядокРаботыВидовРабочихЦентров,
		|
		|	ВЫБОР РесурсныеСпецификации.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях,0) КАК ДлительностьЭтапаВДнях,
		|
		|	ВЫБОР ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА 3600
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА 86400
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|			ТОГДА 86400
		|		ИНАЧЕ 1
		|	КОНЕЦ * ЭтапыПроизводства.ДлительностьЭтапа 			    КАК ДлительностьЭтапаВСекундах,
		|	0                                                           КАК КлючСвязи,
		|	ДАТАВРЕМЯ(1,1,1)	                                        КАК ЖелаемаяДатаОбеспечения
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|		ПО РесурсныеСпецификации.Ссылка = ЭтапыПроизводства.Владелец
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОсновноеИзделие КАК ОсновноеВыходноеИзделие
		|		ПО ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ЭтапыПроизводства.Ссылка
		|
		|ГДЕ
		|	ЭтапыПроизводства.Владелец = &Спецификация
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЭтапа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		ИндексыРезультата.Вставить("Этапы", ИндексРезультата);
		ИндексРезультата = ИндексРезультата + 1;
	КонецЕсли;
#КонецОбласти

#Область ВыходныеИзделия
	Если ПереченьДанных.Найти("ВыходныеИзделия") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	//ВыходныеИзделия_Представления
		|	ВыходныеИзделия.НомерСтроки                       КАК НомерСтроки,
		|	ВыходныеИзделия.Номенклатура                      КАК Номенклатура,
		|	&ИсточникХарактеристика                           КАК Характеристика,
		|	ВЫБОР 
		|		КОГДА ВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ЛюбаяХарактеристика,
		|	ВыходныеИзделия.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	ВыходныеИзделия.Упаковка                          КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)     КАК КоэффициентУпаковки,
		|
		|	ЕСТЬNULL(&ТекстПоляТипИзмеряемойВеличины_ВыходныеИзделия = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК УпаковкаШтучная,
		|
		|	ВыходныеИзделия.Количество                        КАК Количество,
		|	ВыходныеИзделия.КоличествоУпаковок                КАК КоличествоУпаковок,
		|	ВыходныеИзделия.КоличествоУпаковок                КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0)   КАК КоличествоИзделие,
		|
		|	%ДоляСтоимости%                                   КАК ДоляСтоимости,
		|	%ДоляСтоимостиНаЕдиницу%                          КАК ДоляСтоимостиНаЕдиницу,
		|
		|	ВыходныеИзделия.Этап                              КАК Этап,
		|	ВыходныеИзделия.Этап.Подразделение                КАК ПодразделениеЭтапа,
		|	&ТекстПоляСкладМатериалов_ВыходныеИзделия         КАК СкладМатериалов,
		|	&ТекстПолеПолучатель2_2_ВыходныеИзделия           КАК Получатель2_2,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)         КАК ЭтоЦеховаяКладовая,
		|	ВыходныеИзделия.Номенклатура.ТипНоменклатуры      КАК ТипНоменклатуры,
		|	ВыходныеИзделия.ОбработатьПоСпецификации          КАК ОбработатьПоСпецификации,
		|	ВыходныеИзделия.Спецификация                      КАК Спецификация,
		|	ВЫБОР
		|		КОГДА &УчитыватьВероятностьБрака
		|			ТОГДА 1 - (ВыходныеИзделия.ПроцентБрака / 100)
		|		ИНАЧЕ 1
		|	КОНЕЦ                                             КАК КоэффициентВероятности,
		|
		|	ВЫБОР 
		|		КОГДА (ВыходныеИзделия.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ ВыходныеИзделия.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|				И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ИспользуетсяАвтовыбор,
		|	ВыходныеИзделия.СпособАвтовыбораНоменклатуры      КАК СпособАвтовыбораНоменклатуры,
		|	ВыходныеИзделия.СпособАвтовыбораХарактеристики    КАК СпособАвтовыбораХарактеристики,
		|	ВыходныеИзделия.СвойствоСодержащееНоменклатуру    КАК СвойствоСодержащееНоменклатуру,
		|	ВыходныеИзделия.АлгоритмАвтовыбораХарактеристики  КАК АлгоритмАвтовыбораХарактеристики,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА ВыходныеИзделия.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                             КАК АлгоритмРасчетаКоличества,
		|
		|	// округление:
		|	&ОкруглятьКоличествоШтучныхТоваров
		|		И ВыходныеИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И ВыходныеИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстПоляТипИзмеряемойВеличины_ВыходныеИзделия В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
    	|       		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
    	|               ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
    	|               ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)) КАК Округлить,
    	|
		|	ВЫБОР ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|	ВыходныеИзделия.КлючСвязи                         КАК КлючСвязи
		|
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтОсновноеИзделие КАК ОсновноеВыходноеИзделие
		|	ПО ИСТИНА
		|
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|	ПО НормативнаяДлительностьЭтапов.Этап = ВыходныеИзделия.Этап
		|
		|	%ТекстЗапросаНастройкиПередачиМатериалов_ВыходныеИзделия%
		|
		|	%ТекстСоединенияПолучатель2_2_ВыходныеИзделия%
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|	ПО &ТекстПолеПолучатель2_2_ВыходныеИзделия = СпрСклады.Ссылка
		|
		|	%СоединениеДоляСтоимости%
		|
		|ГДЕ
		|	ВыходныеИзделия.Ссылка = &Спецификация
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВыходныеИзделия.Упаковка",
			"ВыходныеИзделия.Номенклатура"));
		
		ТекстЗапросаДляПолученияСклада = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
			"ОсновноеВыходноеИзделие",
			"Этап.Подразделение",
			Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводство);
		
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"%ТекстЗапросаНастройкиПередачиМатериалов_ВыходныеИзделия%",
							ТекстЗапросаДляПолученияСклада.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПоляСкладМатериалов_ВыходныеИзделия",
							ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
		
		ТекстЗапросаПолучатель = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
			"ВыходныеИзделия",
			"Этап.Подразделение",
			Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"%ТекстСоединенияПолучатель2_2_ВыходныеИзделия%",
							ТекстЗапросаПолучатель.ТекстСоединения);
		
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПолеПолучатель2_2_ВыходныеИзделия",
							ТекстЗапросаПолучатель.ТекстПолеСклад);
		
		ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
							"ТипИзмеряемойВеличины",
							"ВыходныеИзделия.Упаковка",
							"ВыходныеИзделия.Номенклатура");
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПоляТипИзмеряемойВеличины_ВыходныеИзделия",
							ТекстПоляТипИзмеряемойВеличины);
		
		ПараметрыПодстановки = ПроизводствоСервер.ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
			"ВыходныеИзделия",
			"ВыходныеИзделия.Ссылка.СпособРаспределенияЗатратНаВыходныеИзделия",
			"(Номенклатура, Характеристика) В (
			|	Выбрать
			|		Т.Номенклатура,
			|		Т.Характеристика
			|	ИЗ
			|		ВтОтборДляЗаполненияПоПлановойСтоимости КАК Т)");
			ПараметрыПодстановки.ИсточникХарактеристика = "&ИсточникХарактеристика";
		ПроизводствоСервер.ВыполнитьПодстановкуАлгоритмаРасчетаДолейСтоимости(ТекстЗапроса, ПараметрыПодстановки);
		
		ТекстПоляВыражениеХарактеристика = ТекстПоляВыражениеХарактеристикаОсновногоИзделия("ВыходныеИзделия", "Номенклатура", "Характеристика");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникХарактеристика", ТекстПоляВыражениеХарактеристика);
		
		ИндексыРезультата.Вставить("ВыходныеИзделия", ИндексРезультата);
		ИндексРезультата = ИндексРезультата + 1;
		
	КонецЕсли;
#КонецОбласти

#Область ВозвратныеОтходы
	Если ПереченьДанных.Найти("ВозвратныеОтходы") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	//ВозвратныеОтходы_Представления
		|	ВозвратныеОтходы.НомерСтроки                       КАК НомерСтроки,
		|	ВозвратныеОтходы.Номенклатура                      КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ВозвратныеОтходы.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВозвратныеОтходы.Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                              КАК Характеристика,
		|	ВЫБОР 
		|		КОГДА ВозвратныеОтходы.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА ВозвратныеОтходы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ЛюбаяХарактеристика,
		|	ВозвратныеОтходы.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	ВозвратныеОтходы.Упаковка                          КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)      КАК КоэффициентУпаковки,
		|
		|	ВозвратныеОтходы.Количество                        КАК Количество,
		|	ВозвратныеОтходы.КоличествоУпаковок                КАК КоличествоУпаковок,
		|	ВозвратныеОтходы.КоличествоУпаковок                КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0)    КАК КоличествоИзделие,
		|
		|	ВозвратныеОтходы.СтатьяКалькуляции                 КАК СтатьяКалькуляции,
		|
		|	ВЫБОР 
		|		КОГДА (ВозвратныеОтходы.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ ВозвратныеОтходы.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|				И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ИспользуетсяАвтовыбор,
		|	ВозвратныеОтходы.СпособАвтовыбораНоменклатуры      КАК СпособАвтовыбораНоменклатуры,
		|	ВозвратныеОтходы.СпособАвтовыбораХарактеристики    КАК СпособАвтовыбораХарактеристики,
		|	ВозвратныеОтходы.СвойствоСодержащееНоменклатуру    КАК СвойствоСодержащееНоменклатуру,
		|	ВозвратныеОтходы.АлгоритмАвтовыбораХарактеристики  КАК АлгоритмАвтовыбораХарактеристики,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА ВозвратныеОтходы.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                              КАК АлгоритмРасчетаКоличества,
		|
		|	// округление:
		|	&ОкруглятьКоличествоШтучныхТоваров
		|		И ВозвратныеОтходы.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И ВозвратныеОтходы.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстПоляТипИзмеряемойВеличины_ВозвратныеОтходы В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
    	|       		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
    	|               ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
    	|               ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)) КАК Округлить,
    	|
		|	ВозвратныеОтходы.ОписаниеИзделия                   КАК ОписаниеИзделия,
		|	ВозвратныеОтходы.Этап                              КАК Этап,
		|	ВозвратныеОтходы.Этап.Подразделение                КАК ПодразделениеЭтапа,
		|	&ТекстПоляСкладМатериалов_ВозвратныеОтходы         КАК СкладМатериалов,
		|	&ТекстПолеПолучатель2_2_ВозвратныеОтходы           КАК Получатель2_2,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)          КАК ЭтоЦеховаяКладовая,
		|	ВозвратныеОтходы.Номенклатура.ТипНоменклатуры      КАК ТипНоменклатуры,
		|	ВозвратныеОтходы.ОбработатьПоСпецификации          КАК ОбработатьПоСпецификации,
		|	ВозвратныеОтходы.Спецификация                      КАК Спецификация,
		|
		|	ВЫБОР ВозвратныеОтходы.Ссылка.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|	КОНЕЦ                                              КАК ДнейОтПотребности,
		|	ВозвратныеОтходы.КлючСвязи                         КАК КлючСвязи
		|
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ВозвратныеОтходы
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтОсновноеИзделие КАК ОсновноеВыходноеИзделие
		|	ПО ИСТИНА
		|
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|	ПО НормативнаяДлительностьЭтапов.Этап = ВозвратныеОтходы.Этап
		|
		|	// Сюда подставляется запрос для получения склада
		|	%ТекстЗапросаНастройкиПередачиМатериалов_ВозвратныеОтходы%
		|
		|	%ТекстСоединенияПолучатель2_2_ВозвратныеОтходы%
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|	ПО &ТекстПолеПолучатель2_2_ВозвратныеОтходы = СпрСклады.Ссылка
		|
		|ГДЕ
		|	ВозвратныеОтходы.Ссылка = &Спецификация
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВозвратныеОтходы.Упаковка",
			"ВозвратныеОтходы.Номенклатура"));
		
		ТекстЗапросаДляПолученияСклада = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
			"ОсновноеВыходноеИзделие",
			"Этап.Подразделение",
			Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводство);
			
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"%ТекстЗапросаНастройкиПередачиМатериалов_ВозвратныеОтходы%",
							ТекстЗапросаДляПолученияСклада.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПоляСкладМатериалов_ВозвратныеОтходы",
							ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
		
		ТекстЗапросаПолучатель = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
			"ВозвратныеОтходы",
			"Этап.Подразделение",
			Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения);
			
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"%ТекстСоединенияПолучатель2_2_ВозвратныеОтходы%",
							ТекстЗапросаПолучатель.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПолеПолучатель2_2_ВозвратныеОтходы",
							ТекстЗапросаПолучатель.ТекстПолеСклад);
		
		ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
							"ТипИзмеряемойВеличины",
							"ВозвратныеОтходы.Упаковка",
							"ВозвратныеОтходы.Номенклатура");
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПоляТипИзмеряемойВеличины_ВозвратныеОтходы",
							ТекстПоляТипИзмеряемойВеличины);
							
		ИндексыРезультата.Вставить("ВозвратныеОтходы", ИндексРезультата);
		ИндексРезультата = ИндексРезультата + 1;
	КонецЕсли;
#КонецОбласти


#Область МатериалыИУслуги
	Если ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	//МатериалыИУслуги_Представления
		|	МатериалыИУслуги.НомерСтроки                      КАК НомерСтроки,
		|	МатериалыИУслуги.Номенклатура                     КАК Номенклатура,
		|	МатериалыИУслуги.Характеристика                   КАК Характеристика,
		|	МатериалыИУслуги.Номенклатура.ТипНоменклатуры     КАК ТипНоменклатуры,
		|	ВЫБОР 
		|		КОГДА МатериалыИУслуги.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ЛюбаяХарактеристика,
		|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
		|	МатериалыИУслуги.Упаковка                         КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)     КАК КоэффициентУпаковки,
		|
		|	ЕСТЬNULL(&ТекстПоляТипИзмеряемойВеличины_МатериалыИУслуги = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК УпаковкаШтучная,
		|
		|	МатериалыИУслуги.Количество                       КАК Количество,
		|	МатериалыИУслуги.КоличествоУпаковок               КАК КоличествоУпаковок,
		|	МатериалыИУслуги.КоличествоУпаковок               КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0)   КАК КоличествоИзделие,
		|
		|	МатериалыИУслуги.Этап                             КАК Этап,
		|	&ТекстПолеСклад 								  КАК Склад,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)         КАК ЭтоЦеховаяКладовая,
		|	&ТекстПолеВариантОбеспечения 					  КАК ВариантОбеспечения,
		|	&ТекстПолеЗапрещеноИзменятьВариантОбеспечения     КАК ЗапрещеноИзменятьВариантОбеспечения,
		|	ВЫБОР 
		|		КОГДА МатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|																	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|			ТОГДА ЛОЖЬ
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе ТОГДА
		|			ВЫБОР 
		|				КОГДА МатериалыИУслуги.Этап.Подразделение.СпособПолученияПолуфабрикатов = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияПолуфабрикатовПроизводимыхВПроцессе.Напрямую)
		|					ТОГДА ЛОЖЬ
		|				КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение = МатериалыИУслуги.Этап.Подразделение
		|					ТОГДА ЛОЖЬ
		|				КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение <> МатериалыИУслуги.Этап.Подразделение
		|					ТОГДА ИСТИНА
		|				КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
		|						И ПроизводимоеВПроцессеИзделие.Этап.Подразделение <> МатериалыИУслуги.Этап.Подразделение
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		КОГДА &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
		|				ИЛИ МатериалыИУслуги.Этап.ПроизводствоНаСтороне
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ЗаказатьНаСклад,
		|	ВЫБОР 
		|		КОГДА (&ПодразделениеДиспетчер = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) 
		|				ИЛИ ЕСТЬNULL(СпрСпособОбеспечения.ИсточникОбеспеченияПотребностей, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|					В (&ПодразделениеДиспетчер,
		|					   НЕОПРЕДЕЛЕНО,
		|					   ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)))
		|				И ЕСТЬNULL(СпрСпособОбеспечения.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК Запланировать,
		|	МатериалыИУслуги.СтатьяКалькуляции                 КАК СтатьяКалькуляции,
		|	ВЫБОР 
		|		КОГДА (МатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ МатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|				И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ИспользуетсяАвтовыбор,
		|	МатериалыИУслуги.СпособАвтовыбораНоменклатуры      КАК СпособАвтовыбораНоменклатуры,
		|	МатериалыИУслуги.СпособАвтовыбораХарактеристики    КАК СпособАвтовыбораХарактеристики,
		|	МатериалыИУслуги.СвойствоСодержащееНоменклатуру    КАК СвойствоСодержащееНоменклатуру,
		|	МатериалыИУслуги.АлгоритмАвтовыбораХарактеристики  КАК АлгоритмАвтовыбораХарактеристики,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА МатериалыИУслуги.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                                     КАК АлгоритмРасчетаКоличества,
		|
		|	// округление:
		|	&ОкруглятьКоличествоШтучныхТоваров
		|		И МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И МатериалыИУслуги.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстПоляТипИзмеряемойВеличины_МатериалыИУслуги В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
    	|       		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
    	|               ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
    	|               ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)) КАК Округлить,
    	|
		|	МатериалыИУслуги.ПроизводитсяВПроцессе КАК Производится,
		|
		|	МатериалыИУслуги.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
		|	МатериалыИУслуги.СпособПолученияМатериала КАК СпособПолученияМатериала,
		|	МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
		|				И МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации)
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
		|				И МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка)
		|	КОНЕЦ КАК СпособПолученияПолуфабриката,
		|
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.СпецификацияРемонта <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|			ТОГДА МатериалыИУслуги.СпецификацияРемонта
		|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.РесурсныеСпецификации), ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
		|	КОНЕЦ КАК Спецификация,
		|
		|	МатериалыИУслуги.ПланироватьНеРанее КАК ПланироватьНеРанее,
		|	МатериалыИУслуги.СпецификацияРемонта КАК СпецификацияРемонта,
		|
		|	МатериалыИУслуги.Этап.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|
		|	ВЫБОР МатериалыИУслуги.Ссылка.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|
		|	МатериалыИУслуги.Этап.Подразделение  КАК ПодразделениеЭтапа,
		|	МатериалыИУслуги.Этап.Подразделение  КАК Подразделение,
		|	&ДатаПотребности                     КАК ДатаПотребности,
		|
		|	МатериалыИУслуги.ПрименениеМатериала КАК ПрименениеМатериала,
		|	МатериалыИУслуги.Альтернативный      КАК Альтернативный,
		|
		|	МатериалыИУслуги.Вероятность         КАК Вероятность,
		|	ВЫБОР
		|		КОГДА (МатериалыИУслуги.Альтернативный ИЛИ &СпособРасчетаМатериалов = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.ВероятноеПотребление))
		|				И МатериалыИУслуги.Вероятность > 0
		|			ТОГДА МатериалыИУслуги.Вероятность / 100
		|		ИНАЧЕ 1
		|	КОНЕЦ                                КАК КоэффициентВероятности,
		|
		|	ЛОЖЬ                                 КАК ВходящееИзделие,
		|
		|	МатериалыИУслуги.КлючСвязи           КАК КлючСвязи
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОсновноеИзделие КАК ОсновноеВыходноеИзделие
		|		ПО ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ПроизводимоеВПроцессеИзделие
		|		ПО ПроизводимоеВПроцессеИзделие.Ссылка = МатериалыИУслуги.ИсточникПолученияПолуфабриката
		|			И МатериалыИУслуги.ПроизводитсяВПроцессе
		|			И ПроизводимоеВПроцессеИзделие.Номенклатура = МатериалыИУслуги.Номенклатура
		|			И (ПроизводимоеВПроцессеИзделие.Характеристика = МатериалыИУслуги.Характеристика
		|				ИЛИ ПроизводимоеВПроцессеИзделие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = МатериалыИУслуги.Этап
		|
		|		// Сюда подставляется запрос для получения склада, варианта обеспечения
		|		%ТекстЗапросаПараметрыОбеспечения%
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособОбеспечения
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|
		|ГДЕ
		|	МатериалыИУслуги.Ссылка = &Спецификация
		|		И (НЕ МатериалыИУслуги.Альтернативный ИЛИ &СпособРасчетаМатериалов В (
		|													ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.ВероятноеПотребление),
		|													ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.МаксимальноеПотребление)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|";
		
		ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"МатериалыИУслуги.Упаковка",
			"МатериалыИУслуги.Номенклатура");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			ТекстЗапросаКоэффициентУпаковки);
		
		ТекстЗапросаПараметрыОбеспечения = ПроизводствоСервер.ТекстЗапросаПараметрыОбеспечения(
			"МатериалыИУслуги",
			"СпособПолученияМатериала",
			"Этап.Подразделение",
			ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстПолеСклад",
			ТекстЗапросаПараметрыОбеспечения.ТекстПолеСклад);
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстПолеВариантОбеспечения",
			ТекстЗапросаПараметрыОбеспечения.ТекстПолеВариантОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстПолеЗапрещеноИзменятьВариантОбеспечения",
			ТекстЗапросаПараметрыОбеспечения.ТекстПолеЗапрещеноИзменятьВариантОбеспечения);
			
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстПолеОснование",
			ТекстЗапросаПараметрыОбеспечения.ТекстПолеОснование);
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"%ТекстЗапросаПараметрыОбеспечения%",
			ТекстЗапросаПараметрыОбеспечения.ТекстСоединения);
			
		ПоляСоединения = "МатериалыИУслуги.Номенклатура, МатериалыИУслуги.Характеристика, СпрСклады.Ссылка";
		ИмяПараметра   = "ПодстановкаОсновногоСпособаОбеспечения";
		ТекстЗапроса   = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
			ТекстЗапроса,
			ИмяПараметра,
			ПоляСоединения);
		
		ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"МатериалыИУслуги.Упаковка",
			"МатериалыИУслуги.Номенклатура");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстПоляТипИзмеряемойВеличины_МатериалыИУслуги",
			ТекстПоляТипИзмеряемойВеличины);
		
		ИндексыРезультата.Вставить("МатериалыИУслуги", ИндексРезультата);
		ИндексРезультата = ИндексРезультата + 1;
	КонецЕсли;
#КонецОбласти

#Область Трудозатраты
	Если ПереченьДанных.Найти("Трудозатраты") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Трудозатраты.НомерСтроки                        КАК НомерСтроки,
		|	Трудозатраты.ВидРабот                           КАК ВидРабот,
		|	Трудозатраты.ВидРабот.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0) КАК КоличествоИзделие,
		|	Трудозатраты.СтатьяКалькуляции                  КАК СтатьяКалькуляции,
		|	Трудозатраты.НазначениеРабот                    КАК НазначениеРабот,
		|	Трудозатраты.Этап                               КАК Этап,
		|
		|	Трудозатраты.Количество КАК Количество,
		|	Трудозатраты.Количество КАК КоличествоНаЕдиницуПартииВыпуска,
		|
		|	ВЫБОР Трудозатраты.Ссылка.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0) КАК ДлительностьЭтапаВДнях,
		|
		|	Трудозатраты.Этап.ДлительностьЭтапа                          КАК ДлительностьЭтапа,
		|	Трудозатраты.Этап.Подразделение                              КАК ПодразделениеЭтапа,
		|	Трудозатраты.Этап.Подразделение                              КАК Подразделение,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА Трудозатраты.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                                        КАК АлгоритмРасчетаКоличества
		|
		|ИЗ
		|	Справочник.РесурсныеСпецификации.Трудозатраты КАК Трудозатраты
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОсновноеИзделие КАК ОсновноеВыходноеИзделие
		|		ПО ИСТИНА
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = Трудозатраты.Этап
		|
		|ГДЕ
		|	Трудозатраты.Ссылка = &Спецификация
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		ИндексыРезультата.Вставить("Трудозатраты", ИндексРезультата);
		ИндексРезультата = ИндексРезультата + 1;
	КонецЕсли;
#КонецОбласти

	
	Если ПараметрыВыборки.ПолучитьПредставления Тогда
		ДобавитьПредставленияВЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	Если ПараметрыВыборки.СпособРасчетаМатериалов <> Перечисления.СпособыРасчетаМатериалов.МинимальноеПотребление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"НормативнаяДлительностьЭтапов.ДнейОтНачала",
			"НормативнаяДлительностьЭтапов.ДнейОтНачалаМакс");
	    ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"НормативнаяДлительностьЭтапов.ДнейДоОкончания",
			"НормативнаяДлительностьЭтапов.ДнейДоОкончанияМакс");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Номенклатура",     ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",   ДанныеПоНоменклатуре.Характеристика);
	Запрос.УстановитьПараметр("Спецификация",     ДанныеПоНоменклатуре.Спецификация);
	Запрос.УстановитьПараметр("СкладПоУмолчанию", Справочники.Склады.СкладПоУмолчанию());
	Запрос.УстановитьПараметр("ПустойКлючСвязи",  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если ДанныеПоНоменклатуре.Свойство("ПодразделениеДиспетчер") Тогда
		Запрос.УстановитьПараметр("ПодразделениеДиспетчер", ДанныеПоНоменклатуре.ПодразделениеДиспетчер);
	Иначе
		Запрос.УстановитьПараметр("ПодразделениеДиспетчер", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	
	Если ДанныеПоНоменклатуре.Свойство("ДатаПотребности") Тогда
		Запрос.УстановитьПараметр("ДатаПотребности", ДанныеПоНоменклатуре.ДатаПотребности);
	Иначе
		Запрос.УстановитьПараметр("ДатаПотребности", Неопределено);
	КонецЕсли;
	
	Если ДанныеПоНоменклатуре.Свойство("Распоряжение") Тогда
		Запрос.УстановитьПараметр("Распоряжение", ДанныеПоНоменклатуре.Распоряжение);
	Иначе
		Запрос.УстановитьПараметр("Распоряжение", Неопределено);
	КонецЕсли;
	
	Если ДанныеПоНоменклатуре.Свойство("Назначение") Тогда
		Запрос.УстановитьПараметр("Назначение", ДанныеПоНоменклатуре.Назначение);
	Иначе
		Запрос.УстановитьПараметр("Назначение", Неопределено);
	КонецЕсли;
	
	Если ПараметрыВыборки.Свойство("ПереопределениеНастройкиПартииВыпуска")
		И ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.Использовать Тогда
		Запрос.УстановитьПараметр("ПереопределятьНастройкуПартииВыпуска", Истина);
		Запрос.УстановитьПараметр("ВыпускПроизвольнымиПорциями", ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.ВыпускПроизвольнымиПорциями);
	Иначе
		Запрос.УстановитьПараметр("ПереопределятьНастройкуПартииВыпуска", Ложь);
		Запрос.УстановитьПараметр("ВыпускПроизвольнымиПорциями", Ложь);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоступноОписаниеПартииВыпуска", УправлениеДаннымиОбИзделиях.ДоступноОписаниеПартииВыпуска());
	
	Запрос.УстановитьПараметр("ВидЦены", ПроизводствоСерверПовтИсп.ВидЦеныПлановойСтоимости());
	
	Запрос.УстановитьПараметр("УчитыватьВероятностьБрака", ПараметрыВыборки.УчитыватьВероятностьБрака);
	Запрос.УстановитьПараметр("СпособРасчетаМатериалов", ПараметрыВыборки.СпособРасчетаМатериалов);
	Запрос.УстановитьПараметр("ОкруглятьКоличествоШтучныхТоваров", ПараметрыВыборки.ОкруглятьКоличествоШтучныхТоваров);	
	
	Запрос.УстановитьПараметр("ИспользоватьПараметризацию", ИспользоватьПараметризациюРесурсныхСпецификаций);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Уничтожить временные таблицы
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("ВтОсновноеИзделие");
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтОтборДляЗаполненияПоПлановойСтоимости") <> Неопределено Тогда
		СписокТаблиц.Добавить("ВтОтборДляЗаполненияПоПлановойСтоимости");
	КонецЕсли;
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, СтрСоединить(СписокТаблиц, ","));
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Спецификация");
	СтруктураДанных.Вставить("СпецификацияПредставление", "");
	
	СтруктураДанных.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия");
	
	СтруктураДанных.Вставить("ТипПроизводственногоПроцесса");
	СтруктураДанных.Вставить("ИспользоватьНесколькоВыходныхИзделий", Ложь);
	
	СтруктураДанных.Вставить("Параметрическая",                      Ложь);
	СтруктураДанных.Вставить("МногоэтапныйПроизводственныйПроцесс",  Ложь);
	
	СтруктураДанных.Вставить("ВыпускПроизвольнымиПорциями",          Ложь);
	СтруктураДанных.Вставить("ОптимальнаяПартияВыпуска", 0);
	СтруктураДанных.Вставить("ДопустимоеПревышениеОптимальнойПартииВыпуска", 0);
	СтруктураДанных.Вставить("МинимальнаяПартияВыпуска", 0);
	
	СтруктураДанных.Вставить("ОсновноеИзделие", СтруктураДанныхОсновногоИзделияСпецификации());
	
	СтруктураДанных.Вставить("ОграниченСрокПролеживания", Ложь);
	СтруктураДанных.Вставить("МаксимальныйСрокПролеживанияВДнях", 0);
	
	СтруктураДанных.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", 0);
	
	ДанныеШапки = МассивРезультатов[ИндексыРезультата["РеквизитыСпецификации"]].Выбрать();
	Если ДанныеШапки.Количество() > 0 Тогда
		ДанныеШапки.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеШапки);
	КонецЕсли;
	
	ДанныеОсновногоИзделия = МассивРезультатов[ИндексыРезультата["ОсновноеИзделие"]].Выбрать();
	Если ДанныеОсновногоИзделия.Количество() > 0 Тогда
		
		ДанныеОсновногоИзделия.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных.ОсновноеИзделие, ДанныеОсновногоИзделия);
		
		СтруктураДанных.Параметрическая = ДанныеОсновногоИзделия.ХарактеристикиИспользуются
			И ДанныеОсновногоИзделия.ЛюбаяХарактеристика;
		
	КонецЕсли;
	
	Для каждого ИмяНабораДанных Из ПереченьДанных Цикл
		
		ИндексРезультат = ИндексыРезультата[ИмяНабораДанных];
		НаборДанных = МассивРезультатов[ИндексРезультат].Выгрузить();
		
		Если ИмяНабораДанных = "МатериалыИУслуги" Тогда
			ПрименитьОтборПоПараметрамВыбораДанных(
				НаборДанных,
				ПараметрыВыборки);
			ЗаполнитьСпецификациюПолуфабрикатовВПроцессе(
				НаборДанных,
				ДанныеПоНоменклатуре.Спецификация);
			ЗаполнитьИнформациюПоПрименениюМатериала(
				НаборДанных,
				ПараметрыВыборки);
			ВключитьСоставНаборовВДанныеСпецификации(
				НаборДанных,
				ИмяНабораДанных,
				ДанныеПоНоменклатуре,
				ПараметрыВыборки);
		КонецЕсли;
		СтруктураДанных.Вставить(ИмяНабораДанных, НаборДанных);
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти

#Область ПереченьДанных

Процедура ЗаполнитьПереченьДанныхСпецификации(ПереченьДанных)
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("Этапы");
	ПереченьДанных.Добавить("ВыходныеИзделия");
	ПереченьДанных.Добавить("ВозвратныеОтходы");
	ПереченьДанных.Добавить("МатериалыИУслуги");
	ПереченьДанных.Добавить("Трудозатраты");

КонецПроцедуры

Функция ПереченьДанныхСпецификации(СписокСвойств = "", ИсключаяСвойства = "")
	
	ПереченьДанных = Новый Массив;
	ЗаполнитьПереченьДанныхСпецификации(ПереченьДанных);
	
	ЕстьСписокСвойств = НЕ ПустаяСтрока(СписокСвойств);
	Если ЕстьСписокСвойств ИЛИ НЕ ПустаяСтрока(ИсключаяСвойства) Тогда
	
		Для Индекс = -ПереченьДанных.ВГраница() По 0 Цикл
			
			Свойство = ПереченьДанных[-Индекс];
			
			Если ЕстьСписокСвойств И СтрНайти(СписокСвойств, Свойство) = 0
				ИЛИ СтрНайти(ИсключаяСвойства, Свойство) > 0 
				Тогда
				ПереченьДанных.Удалить(-Индекс);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПереченьДанных;
	
КонецФункции

Процедура ДобавитьЭлементВПереченьДанныхСпецификации(ПереченьДанных, Элемент)
	
	Если ПереченьДанных = Неопределено Тогда
		ПереченьДанных = Новый Массив;
	КонецЕсли;
	Если ПереченьДанных.Найти(Элемент) = Неопределено Тогда
		ПереченьДанных.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетКоличества

Функция РассчитатьПартиюВыпускаПоНоменклатуре(ДанныеПоНоменклатуре, ДанныеСпецификации)
	
	Если ДанныеСпецификации.ОсновноеИзделие.ВероятностьБрака <> 0 Тогда
		
		Заказано = Окр(ДанныеПоНоменклатуре.Количество / ДанныеСпецификации.ОсновноеИзделие.ВероятностьБрака,
			?(ДанныеСпецификации.ОсновноеИзделие.ЕдиницаИзмеренияШтучная, 0, 3));
		
	Иначе
		
		Заказано = ДанныеПоНоменклатуре.Количество;
		
	КонецЕсли;
	
	ВыпускПоНормативу = ДанныеСпецификации.ОсновноеИзделие.КоличествоНаЕдиницуПартииВыпуска;
	
	ПартииВыпуска = РазбитьНаОптимальныеПартииВыпуска(Заказано, ВыпускПоНормативу, ДанныеСпецификации);
		
	Результат = ПроизводствоСервер.СуммаДробей(ПартииВыпуска, Истина);
	Результат.Вставить("Расшифровка", ПартииВыпуска);
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьМаксимальнуюПартиюВыпуска(Потребности, ПараметрыВыборки, КэшированныеСпецификации)
	
	Результат = ПроизводствоКлиентСервер.Дробь(0,1);
	
	Для каждого Потребность Из Потребности Цикл
		
		ДанныеПоНоменклатуре = ДанныеПоНоменклатуреРасширенный();
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Потребность);
	
		СтруктураДанных = НайтиИЗакэшироватьДанныеСпецификации(
			ДанныеПоНоменклатуре,
			ПараметрыВыборки,
			КэшированныеСпецификации);
		
		ПартияВыпуска = РассчитатьПартиюВыпускаПоНоменклатуре(
			ДанныеПоНоменклатуре,
			СтруктураДанных);
			
		Результат = ПроизводствоСервер.МаксДробь(Результат, ПартияВыпуска);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазбитьНаОптимальныеПартииВыпуска(Заказано, ВыпускПоНормативу, Потребность)
	
	Если ВыпускПоНормативу = 0 Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПроизводствоКлиентСервер.Дробь(0,1));
	КонецЕсли;
	
	Результат = Новый Массив;
	
	ОптимальныйВыпуск    = Потребность.ОптимальнаяПартияВыпуска * ВыпускПоНормативу;
	МинимальныйВыпуск    = Потребность.МинимальнаяПартияВыпуска * ВыпускПоНормативу;
	Если ОптимальныйВыпуск <> 0 И МинимальныйВыпуск > ОптимальныйВыпуск Тогда
		МинимальныйВыпуск = ОптимальныйВыпуск;
	КонецЕсли;
	ДопустимоеПревышение = Потребность.ДопустимоеПревышениеОптимальнойПартииВыпуска * ВыпускПоНормативу;
	ДельтаМинимумОптимум = ОптимальныйВыпуск - МинимальныйВыпуск;
	
	Коэффициент = Заказано / ВыпускПоНормативу;
	Если НЕ Потребность.ВыпускПроизвольнымиПорциями И Цел(Коэффициент) <> Коэффициент Тогда
		ПартияВыпуска = ВыпускПоНормативу * (Цел(Коэффициент) + 1);
	Иначе
		ПартияВыпуска = Заказано;
	КонецЕсли;
	
	Если ОптимальныйВыпуск > 0 Тогда
		
		Для Х = 0 По Цел(ПартияВыпуска / ОптимальныйВыпуск) - 1 Цикл
			Результат.Добавить(ОптимальныйВыпуск);
		КонецЦикла;
		
		Остаток = ПартияВыпуска % ОптимальныйВыпуск;
		Если Остаток > 0 Тогда
			
			Если Остаток < МинимальныйВыпуск Тогда
				
				// если можем покрыть остаток за счет допустимого превышения
				Если Остаток <= Результат.Количество() * ДопустимоеПревышение Тогда
					
					Если Потребность.ВыпускПроизвольнымиПорциями Тогда
						
						Для Х = -Результат.ВГраница() По 0 Цикл
							Если Остаток <= 0 Тогда
								Прервать;
							КонецЕсли;
							Результат[-Х] = Результат[-Х] + Мин(ДопустимоеПревышение, Остаток);
							Остаток = Остаток - Мин(ДопустимоеПревышение, Остаток);
						КонецЦикла;
						
					Иначе
						
						ОстатокНаПартию = Цел(Остаток / Результат.Количество());
						Если ОстатокНаПартию > 0 Тогда
							Для Х = 0 По Результат.ВГраница() Цикл
								Результат[Х] = Результат[Х] + ОстатокНаПартию;
							КонецЦикла;
						КонецЕсли;
						
						Остаток = Остаток % Результат.Количество();
						
						Для Х = -Результат.ВГраница() По 0 Цикл
							Если Остаток <= 0 Тогда
								Прервать;
							КонецЕсли;
							Результат[-Х] = Результат[-Х] + Мин(1, Остаток);
							Остаток = Остаток - 1;
						КонецЦикла;
						
					КонецЕсли;
					
				// если можем покрыть остаток за счет сокращения оптимальных партий до минимальных
				Иначе
					
					Для Х = -Результат.ВГраница() По 0 Цикл
						Если Остаток >= МинимальныйВыпуск Тогда
							Прервать;
						КонецЕсли;
						Результат[-Х] = Результат[-Х] - Мин(ДельтаМинимумОптимум, МинимальныйВыпуск - Остаток);
						Остаток = Остаток + Мин(ДельтаМинимумОптимум, МинимальныйВыпуск - Остаток);
					КонецЦикла;
					Результат.Добавить(Макс(Остаток, МинимальныйВыпуск));
					
				КонецЕсли;
				
			Иначе
				Результат.Добавить(Остаток);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Результат.Добавить(Макс(ПартияВыпуска, МинимальныйВыпуск));
		
	КонецЕсли;
	
	Для Х = 0 По Результат.ВГраница() Цикл
		Результат[Х] = ПроизводствоКлиентСервер.Дробь(Результат[Х], ВыпускПоНормативу);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, ДанныеСпецификации, ПараметрыРасчета) Экспорт
	
	ПереченьДанных = ПараметрыРасчета.ПереченьДанных;
	
	НаборДанных = Новый Массив;
	ДанныеДляРасчета = Неопределено;
	
	Если ДанныеСпецификации.Свойство("ОсновноеИзделие")
		Тогда
		РассчитатьКоличествоВСтроке(
			ПартияВыпуска,
			ДанныеСпецификации.ОсновноеИзделие,
			Истина,
			Ложь,
			Ложь);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("Этапы")
		И ПереченьДанных.Найти("Этапы") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.Этапы,
			Ложь, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("ВыходныеИзделия")
		И ПереченьДанных.Найти("ВыходныеИзделия") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.ВыходныеИзделия,
			Истина, Истина, Истина, Истина, Истина, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ПараметрыРасчета.ДанныеПоНоменклатуре, ДанныеСпецификации.ВыходныеИзделия);
		ПроизводствоКлиентСервер.РассчитатьДолюСтоимостиВКоллекции(ДанныеСпецификации.ВыходныеИзделия, ДанныеСпецификации.СпособРаспределенияЗатратНаВыходныеИзделия);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("МатериалыИУслуги")
		И ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.МатериалыИУслуги,
			Истина, Истина, Истина, Истина, Ложь, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ПараметрыРасчета.ДанныеПоНоменклатуре, ДанныеСпецификации.МатериалыИУслуги);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("ВозвратныеОтходы")
		И ПереченьДанных.Найти("ВозвратныеОтходы") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.ВозвратныеОтходы,
			Истина, Истина, Ложь, Истина, Истина, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ПараметрыРасчета.ДанныеПоНоменклатуре, ДанныеСпецификации.ВозвратныеОтходы);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("Трудозатраты")
		И ПереченьДанных.Найти("Трудозатраты") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.Трудозатраты,
			Ложь, Истина, Ложь, Ложь, Ложь, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ПараметрыРасчета.ДанныеПоНоменклатуре, ДанныеСпецификации.Трудозатраты);
	КонецЕсли;
	
КонецФункции

Процедура РассчитатьКоличество(ПартияВыпуска, Коллекция, ЕстьУпаковки, ЕстьРасчетПоФормуле, ЕстьВероятность, Округлить, КонтрольОкругленияВверх, ДанныеДляРасчета = Неопределено)
	
	Для каждого Строка Из Коллекция Цикл
		
		РассчитатьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, ЕстьРасчетПоФормуле, ЕстьВероятность, ДанныеДляРасчета);
		
		Если Округлить Тогда
			ОкруглитьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, КонтрольОкругленияВверх);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, ЕстьРасчетПоФормуле, ЕстьВероятность, ДанныеДляРасчета = Неопределено)
	

	Если ЕстьУпаковки Тогда
		ИмяПоляБазаДляРасчета = "КоличествоУпаковокНаЕдиницуПартииВыпуска";
	Иначе
		ИмяПоляБазаДляРасчета = "КоличествоНаЕдиницуПартииВыпуска";
	КонецЕсли;
	
	РезультатРасчета = Строка[ИмяПоляБазаДляРасчета] * ПартияВыпуска.Числитель / ПартияВыпуска.Знаменатель;
	
	Если ЕстьВероятность И Строка.КоэффициентВероятности <> 1 Тогда
		РезультатРасчета = Окр(РезультатРасчета * Строка.КоэффициентВероятности, ?(Строка.УпаковкаШтучная, 0, 3));
	КонецЕсли;
	
	Если ЕстьУпаковки Тогда
		Строка.КоличествоУпаковок = РезультатРасчета;
		Строка.Количество         = Строка.КоличествоУпаковок * Строка.КоэффициентУпаковки;
	Иначе
		Строка.Количество = РезультатРасчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкруглитьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, КонтрольОкругленияВверх)
	
	Если НЕ Строка.Округлить 
		ИЛИ Строка.Количество = Цел(Строка.Количество) Тогда
		Возврат;
	КонецЕсли;
	
	Количество = Окр(Строка.Количество);
	
	ДопустимоеОтклонение = ОбщегоНазначенияУТПовтИсп.ДопустимоеОтклонениеПриОкругленииКоличества();
	
	Отклонение = ?(Количество > Строка.Количество,
		(Количество - Строка.Количество)/Строка.Количество * 100,
		(Строка.Количество - Количество)/Строка.Количество * 100);
			
	Если Строка.ЭтоЦеховаяКладовая Тогда
		
		Если Отклонение <= ДопустимоеОтклонение Тогда
			
			Строка.Количество = Количество;
			
			Если ЕстьУпаковки Тогда
				Если Строка.КоэффициентУпаковки <> 0 Тогда
					Строка.КоличествоУпаковок = Строка.Количество/Строка.КоэффициентУпаковки;
				Иначе
					Строка.Количество         = 0;
					Строка.КоличествоУпаковок = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Отклонение > ДопустимоеОтклонение Тогда
			
			Если КонтрольОкругленияВверх
				И Количество > Строка.Количество Тогда
				
				Количество = Количество - 1;
				
			ИначеЕсли НЕ КонтрольОкругленияВверх
				И Количество < Строка.Количество Тогда
				
				Количество = Количество + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Строка.Количество = Количество;
		
		Если ЕстьУпаковки Тогда
			Если Строка.КоэффициентУпаковки <> 0 Тогда
				Строка.КоличествоУпаковок = Строка.Количество/Строка.КоэффициентУпаковки;
			Иначе
				Строка.Количество         = 0;
				Строка.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ИсходнаяТаблица)

	Если ДанныеПоНоменклатуре <> Неопределено 
		И ДанныеПоНоменклатуре.Свойство("ДнейОтПотребности") Тогда
		
		Если ДанныеПоНоменклатуре.ДнейОтПотребности <> Неопределено Тогда
			Для каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
				СтрокаТаблицы.ДнейОтПотребности = СтрокаТаблицы.ДнейОтПотребности + ДанныеПоНоменклатуре.ДнейОтПотребности;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ПараметрыОбеспечения

Процедура ЗаполнитьНастройкиПолученияМатериалов(СтрокиНабораДанных, ИмяНабораДанных, ДанныеПоНоменклатуре, ПараметрыВыборки)
	
	ТаблицаМатериалов = ОбеспечениеПроизводства.СоздатьИсточникВыбораСпособовПолученияМатериалов();
	
	Для НомерСтроки = 0 По СтрокиНабораДанных.Количество()-1 Цикл
		ДанныеСтроки = СтрокиНабораДанных[НомерСтроки];
		Если ЗначениеЗаполнено(ДанныеСтроки.ПодразделениеЭтапа)
			И ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда 
			НоваяСтрока = ТаблицаМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			НоваяСтрока.НомерСтроки   = НомерСтроки;
			НоваяСтрока.Подразделение = ДанныеСтроки.ПодразделениеЭтапа;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаМатериалов.Количество() > 0 Тогда
		
		ДанныеЗаказа = Новый Структура;
		
		Если ДанныеПоНоменклатуре.Свойство("ПодразделениеДиспетчер") Тогда
			ДанныеЗаказа.Вставить("ПодразделениеДиспетчер", ДанныеПоНоменклатуре.ПодразделениеДиспетчер);
		Иначе
			ДанныеЗаказа.Вставить("ПодразделениеДиспетчер", Справочники.СтруктураПредприятия.ПустаяСсылка());
		КонецЕсли;
		
		Если ДанныеПоНоменклатуре.Свойство("ДатаПотребности") Тогда
			ДанныеЗаказа.Вставить("ДатаПотребности", ДанныеПоНоменклатуре.ДатаПотребности);
		Иначе
			ДанныеЗаказа.Вставить("ДатаПотребности", '00010101');
		КонецЕсли;
		
		Если ДанныеПоНоменклатуре.Свойство("Распоряжение") Тогда
			ДанныеЗаказа.Вставить("Распоряжение", ДанныеПоНоменклатуре.Распоряжение);
		Иначе
			ДанныеЗаказа.Вставить("Распоряжение", Неопределено);
		КонецЕсли;
		
		Если ДанныеПоНоменклатуре.Свойство("Назначение") Тогда
			ДанныеЗаказа.Вставить("Назначение", ДанныеПоНоменклатуре.Назначение);
		Иначе
			ДанныеЗаказа.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
		КонецЕсли;
		
		СпособыПолученияМатериалов = ОбеспечениеПроизводства.СпособыПолученияМатериаловПоУмолчанию(
			ДанныеЗаказа, ТаблицаМатериалов, ПараметрыВыборки.МенеджерВременныхТаблиц, ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
		Для Индекс = 0 По СтрокиНабораДанных.Количество()-1 Цикл
			
			СпособПолученияМатериала = СпособыПолученияМатериалов.Найти(Индекс, "НомерСтроки");
			Если СпособПолученияМатериала <> Неопределено Тогда
				
					Если ИмяНабораДанных = "ВыходныеИзделия" ИЛИ ИмяНабораДанных = "ВозвратныеОтходы" Тогда
						СтрокиНабораДанных[Индекс].Получатель2_2 = СпособПолученияМатериала.Склад;
					Иначе
						ЗаполнитьЗначенияСвойств(
							СтрокиНабораДанных[Индекс],
							СпособПолученияМатериала,
							"Склад,
							|ЗаказатьНаСклад,
							|ВариантОбеспечения,
							|ДатаПотребности,
							|Запланировать");
					КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазузлованиеСпецификаций

Функция РазузловатьПотребностиИЗаполнитьСрокиОбеспечения(ВходящиеПотребности, ПараметрыВыборки, КэшированныеСпецификации, ОписаниеОшибки)
	
	Потребности = ВыгрузитьВходящиеПотребностиДляОбработки(ВходящиеПотребности);
	
	КлючСвязи = 1;
	МаксИндекс = Потребности.Количество()-1;
	Для Индекс = 0 По МаксИндекс Цикл
		РазузловатьПотребностьПоПолуфабрикатамРекурсивно(
			Потребности,
			Потребности[Индекс],
			КлючСвязи,
			ПараметрыВыборки,
			КэшированныеСпецификации);
	КонецЦикла;
	
	Потребности.Индексы.Добавить("КлючСвязи");
	Потребности.Индексы.Добавить("КлючСвязиПотребность");
	Потребности.Индексы.Добавить("КлючСвязиПотребность, ЭтоРазборка");
	Потребности.Индексы.Добавить("КлючСвязиПотребность, ЭтоРазборка, ЭтоРемонт, ПланироватьНеРанее");
	Потребности.Индексы.Добавить("КлючСвязиВыпуск");
	Потребности.Индексы.Добавить("Распоряжение, Спецификация, Группировать");
	
	Спецификации = Потребности.ВыгрузитьКолонку("Спецификация");
	ПроверитьКорректностьСпецификаций(Спецификации, ОписаниеОшибки);
	
	Если ОписаниеОшибки.ЕстьОшибка Тогда
		Потребности = Неопределено;
	КонецЕсли;
	
	Возврат Потребности;
	
КонецФункции

Функция ВыгрузитьВходящиеПотребностиДляОбработки(ВходящиеПотребности)
	
	Потребности = ВходящиеПотребности.Скопировать();
	
	Потребности.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Потребности.Колонки.Добавить("КлючСвязиПотребность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Потребности.Колонки.Добавить("КлючСвязиВыпуск", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Потребности.Колонки.Добавить("ЭтапОтправительИзделия", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	Потребности.Колонки.Добавить("ЭтапПолучательИзделия", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	Потребности.Колонки.Добавить("ПланироватьНеРанее", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	
	Потребности.Колонки.Добавить("ЭтоРазборка", Новый ОписаниеТипов("Булево"));
	
	Потребности.Колонки.Добавить("ЭтоРемонт", Новый ОписаниеТипов("Булево"));
	Потребности.Колонки.Добавить("ЗависимаяПотребность", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	Потребности.Колонки.Добавить("ЭтоЗависимаяПотребность", Новый ОписаниеТипов("Булево"));
	
	Потребности.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Потребности.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	
	Потребности.Колонки.Добавить("ВыпускПроизвольнымиПорциями", Новый ОписаниеТипов("Булево"));
	Потребности.Колонки.Добавить("МинимальнаяПартияВыпуска", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Потребности.Колонки.Добавить("ОптимальнаяПартияВыпуска", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Потребности.Колонки.Добавить("ДопустимоеПревышениеОптимальнойПартииВыпуска", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Потребности.Колонки.Добавить("ОграниченСрокПролеживания", Новый ОписаниеТипов("Булево"));
	Потребности.Колонки.Добавить("МаксимальныйСрокПролеживания", Новый ОписаниеТипов("Число"));
	Потребности.Колонки.Добавить("СрокПролеживания", Новый ОписаниеТипов("Дата"));
	
	Потребности.Колонки.Добавить("Этапы", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Потребности.Колонки.Добавить("НекратныйВыпуск", Новый ОписаниеТипов("Булево"));
	Потребности.Колонки.Добавить("КоличествоНаПартию", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Потребности.Колонки.Добавить("ДнейОтПотребности", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Потребности.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	Потребности.Колонки.Добавить("Группировать", Новый ОписаниеТипов("Булево"));
	
	Потребности.Колонки.Добавить("ВходящаяПотребность", Новый ОписаниеТипов("Булево"));
	
	Потребности.Колонки.Добавить("ЭтоПотребностьВОсновномИзделии", Новый ОписаниеТипов("Булево"));
	
	Если Потребности.Колонки.Найти("ПодразделениеДиспетчер") = Неопределено Тогда
		Потребности.Колонки.Добавить("ПодразделениеДиспетчер",
			Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	Если Потребности.Колонки.Найти("СписатьНаРасходы") = Неопределено Тогда
		
		ТипыСтатей = Новый Массив;
		ТипыСтатей.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
		ТипыСтатей.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
		
		Потребности.Колонки.Добавить("СписатьНаРасходы"         , Новый ОписаниеТипов("Булево"));
		Потребности.Колонки.Добавить("СтатьяРасходов"           , Новый ОписаниеТипов(ТипыСтатей));
		Потребности.Колонки.Добавить("АналитикаРасходов"        , Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
		Потребности.Колонки.Добавить("АналитикаАктивовПассивов" , Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип);
		
	КонецЕсли;
	
	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	Потребности.Колонки.Добавить("ПодразделениеПолучатель", Новый ОписаниеТипов(ТипыПолучатель));
	
	// служебные поля для группировки потребностей
	
	ДобавитьКолонкуОбособленно = Потребности.Колонки.Найти("Обособленно") = Неопределено;
	Если ДобавитьКолонкуОбособленно Тогда
		Потребности.Колонки.Добавить("Обособленно", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ДобавитьКолонкуНазначениеПродукция = Потребности.Колонки.Найти("НазначениеПродукция") = Неопределено;
	Если ДобавитьКолонкуНазначениеПродукция Тогда
		Потребности.Колонки.Добавить("НазначениеПродукция", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	КонецЕсли;
	
	Для каждого Строка Из Потребности Цикл
		
		Если ДобавитьКолонкуНазначениеПродукция И Строка.Обособленно Тогда
			Строка.НазначениеПродукция = Строка.Назначение;
		КонецЕсли;
		
		Строка.ВходящаяПотребность = Истина;
		
	КонецЦикла;
	
	Возврат Потребности;
	
КонецФункции

Процедура РазузловатьПотребностьПоПолуфабрикатамРекурсивно(
															Потребности,
															Потребность,
															КлючСвязи,
															ПараметрыВыборки,
															КэшированныеСпецификации,
															Спецификации = Неопределено)
	
	Потребность.КлючСвязи = КлючСвязи;
	КлючСвязи = КлючСвязи + 1;
	
	Если Спецификации = Неопределено Тогда
		Спецификации = Новый Массив();
	КонецЕсли;
	
	Если ПараметрыВыборки.ПереченьДанных = Неопределено Тогда
		ЗаполнитьПереченьДанныхСпецификации(ПараметрыВыборки.ПереченьДанных);
	Иначе
		ДобавитьЭлементВПереченьДанныхСпецификации(ПараметрыВыборки.ПереченьДанных, "Этапы");
		ДобавитьЭлементВПереченьДанныхСпецификации(ПараметрыВыборки.ПереченьДанных, "МатериалыИУслуги");
		ДобавитьЭлементВПереченьДанныхСпецификации(ПараметрыВыборки.ПереченьДанных, "ВыходныеИзделия");
		ДобавитьЭлементВПереченьДанныхСпецификации(ПараметрыВыборки.ПереченьДанных, "ВозвратныеОтходы");
	КонецЕсли;
	
	ДанныеПоНоменклатуре = ДанныеПоНоменклатуреРасширенный();
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Потребность);
	
	СтруктураДанных = НайтиИЗакэшироватьДанныеСпецификации(
		ДанныеПоНоменклатуре,
		ПараметрыВыборки,
		КэшированныеСпецификации);
	
	ЗаполнитьЗначенияСвойств(
		Потребность, СтруктураДанных,
		"ВыпускПроизвольнымиПорциями,МинимальнаяПартияВыпуска,ОптимальнаяПартияВыпуска,ДопустимоеПревышениеОптимальнойПартииВыпуска,ОграниченСрокПролеживания,Этапы");
	
	Потребность.МаксимальныйСрокПролеживания = СтруктураДанных.МаксимальныйСрокПролеживанияВДнях * 86400;
	Потребность.НекратныйВыпуск = ПотребностНеКратнаВыпускуРазборке(Потребность, СтруктураДанных);
	Потребность.ЭтоРазборка =
		СтруктураДанных.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка;
	Потребность.ЭтоРемонт = 
		СтруктураДанных.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт;
	Потребность.ЭтоПотребностьВОсновномИзделии = СтруктураДанных.ОсновноеИзделие.ЭтоОсновноеИзделие;
	
	Если Потребность.КлючСвязиПотребность <> 0
		И Потребность.ЭтоРемонт Тогда
		
		ДобавитьЗависимуюПотребность(Потребности, Потребность);
		
	КонецЕсли;
	
	ЗаполнитьЭтапОтправительПолучатель(СтруктураДанных, Потребность);
	
	СтрокиДляРазузлования = СтрокиСпецификацииДляРазузлования(СтруктураДанных);
	Если СтрокиДляРазузлования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПартияВыпуска = РассчитатьПартиюВыпускаПоНоменклатуре(ДанныеПоНоменклатуре, СтруктураДанных);
	
	Если ПартияВыпуска.Расшифровка.Количество() > 1 Тогда
		СтруктураДанныхКопия = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДанных);
		
		ПараметрыРасчета = ПараметрыРасчетаКоличества(
			ДанныеПоНоменклатуре,
			СтруктураДанныхКопия,
			"МатериалыИУслуги,ВыходныеИзделия,ВозвратныеОтходы");
		
		Таблицы = СтрРазделить("МатериалыИУслуги,ВыходныеИзделия,ВозвратныеОтходы", ",");
		Для каждого Таблица Из Таблицы Цикл
			СтруктураДанных[Таблица].ЗаполнитьЗначения(0, "Количество,КоличествоУпаковок");
		КонецЦикла;
		
		Для каждого ПартияВыпускаРасшифровка Из ПартияВыпуска.Расшифровка Цикл
			 РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпускаРасшифровка, СтруктураДанныхКопия, ПараметрыРасчета);
			 
			Для каждого Таблица Из Таблицы Цикл
				Для Индекс = 0 По СтруктураДанных[Таблица].Количество()-1 Цикл
					СтруктураДанных[Таблица][Индекс].Количество = СтруктураДанных[Таблица][Индекс].Количество
						+ СтруктураДанныхКопия[Таблица][Индекс].Количество;
					СтруктураДанных[Таблица][Индекс].КоличествоУпаковок = СтруктураДанных[Таблица][Индекс].КоличествоУпаковок
						+ СтруктураДанныхКопия[Таблица][Индекс].КоличествоУпаковок;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ПараметрыРасчета = ПараметрыРасчетаКоличества(
			ДанныеПоНоменклатуре,
			СтруктураДанных,
			"МатериалыИУслуги,ВыходныеИзделия,ВозвратныеОтходы");
		РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, СтруктураДанных, ПараметрыРасчета);
	КонецЕсли;
	
	Для каждого Данные Из СтрокиДляРазузлования Цикл
		
		Строка = Данные.Строка;
		
		Если НЕ Данные.ЭтоРазборка Тогда
			
			ТребуетсяУточнитьМатериал = НЕ ЗначениеЗаполнено(Строка.Номенклатура)
				ИЛИ НЕ ЗначениеЗаполнено(Строка.Характеристика) И Строка.ХарактеристикиИспользуются
				ИЛИ НЕ ЗначениеЗаполнено(Строка.Количество);
				
			Если ТребуетсяУточнитьМатериал Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = Потребности.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Потребность,
			"Распоряжение,
			|ПодразделениеДиспетчер,
			|ДатаЗапуска,
			|ДатаВыпуска,
			|РазмещениеВыпуска,
			|Обособленно,
			|НазначениеПродукция,
			|Назначение");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Данные, "Спецификация, КоличествоНаПартию");
		
		НоваяСтрока.КлючСвязиПотребность = Потребность.КлючСвязи;
		
		Если Данные.ЭтоРазборка Тогда // Заполнение парных свойств см. ЗаполнитьЭтапОтправительПолучатель
			НоваяСтрока.ЭтапОтправительИзделия = Строка.Этап;
		Иначе
			НоваяСтрока.ЭтапПолучательИзделия = Строка.Этап;
			Если Данные.ЭтоРемонт Тогда
				НоваяСтрока.ЭтапОтправительИзделия = Строка.ИсточникПолученияПолуфабриката;
			КонецЕсли;
		КонецЕсли;
		
		Если Спецификации.Найти(НоваяСтрока.Спецификация) = Неопределено Тогда
			
			Спецификации.Вставить(0,НоваяСтрока.Спецификация);
			
			РазузловатьПотребностьПоПолуфабрикатамРекурсивно(
						Потребности,
						НоваяСтрока,
						КлючСвязи,
						ПараметрыВыборки,
						КэшированныеСпецификации,
						Спецификации);
						
			Спецификации.Удалить(0);
			
		Иначе
			
			ТекстШаблон     = НСтр("ru = 'В процессе разузлования изделий обнаружено зацикливание на спецификации ""%1"".'");
			ТекстИсключения = СтрШаблон(ТекстШаблон, Потребность.Спецификация);
			
			ВызватьИсключение ТекстИсключения
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПотребностНеКратнаВыпускуРазборке(Потребность, СтруктураДанных)
	
	Если Потребность.КоличествоНаПартию = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	Если Потребность.ЭтоРазборка Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика",
			Потребность.Номенклатура, Потребность.Характеристика);
		НайденныеСтроки = СтруктураДанных.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			КоличествоПартияВыпуска = ?(НайденныеСтроки[0].Количество <> 0, НайденныеСтроки[0].Количество, 1);
			
			Результат = (Потребность.КоличествоНаПартию % КоличествоПартияВыпуска) > 0;
			
		КонецЕсли;
		
	Иначе
		
		Если СтруктураДанных.ВыходныеИзделия.Количество() > 0 Тогда
			
			КоличествоПартияВыпуска = СтруктураДанных.ВыходныеИзделия[0].КоличествоИзделие;
			КоличествоПартияВыпуска = ?(КоличествоПартияВыпуска <> 0, КоличествоПартияВыпуска, 1);
			
			Результат = (Потребность.КоличествоНаПартию % КоличествоПартияВыпуска) > 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьЗависимуюПотребность(Потребности, Потребность)
	
	ЗависимаяПотребность = Потребности.Добавить();
	
	ЗаполнитьЗначенияСвойств(ЗависимаяПотребность, Потребность);
	
	ЗависимаяПотребность.ЭтоЗависимаяПотребность = Истина;
	ЗависимаяПотребность.ЭтоРазборка = Истина;
	
	Потребность.ЗависимаяПотребность = ЗависимаяПотребность;
	
КонецПроцедуры

Процедура ЗаполнитьЭтапОтправительПолучатель(СтруктураДанных, Потребность)
	
	Если Потребность.ЭтоРемонт Тогда
		
		НайденнаяСтрока = СтруктураДанных.Этапы.Найти(1, "НомерЭтапа");
		Потребность.ЗависимаяПотребность.ЭтапПолучательИзделия = ?(НайденнаяСтрока <> Неопределено,
			НайденнаяСтрока.Этап,
			Неопределено);
			
		НайденнаяСтрока = СтруктураДанных.Этапы.Найти(0, "НомерСледующегоЭтапа");
		Потребность.ЭтапОтправительИзделия = ?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.Этап, Неопределено);
			
	ИначеЕсли Потребность.ЭтоРазборка Тогда
			
		НайденнаяСтрока = СтруктураДанных.Этапы.Найти(1, "НомерЭтапа");
		Потребность.ЭтапПолучательИзделия = ?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.Этап, Неопределено);
			
	Иначе
		
		НайденнаяСтрока = СтруктураДанных.Этапы.Найти(0, "НомерСледующегоЭтапа");
		Потребность.ЭтапОтправительИзделия = ?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.Этап, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокиСпецификацииДляРазузлования(СтруктураДанных)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Строка", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	Результат.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Результат.Колонки.Добавить("ЭтоРазборка", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЭтоРемонт", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("КоличествоНаПартию", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	// Материалы - сборка и ремонт
	Для каждого Строка Из СтруктураДанных.МатериалыИУслуги Цикл
		
		Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации Тогда
			
			Если Строка.Спецификация.Пустая() Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не назначена основная спецификация для материала в строке %1 (спецификация ""%2"")'"),
					Строка.НомерСтроки,
					СтруктураДанных.Спецификация);
			КонецЕсли;
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Строка = Строка;
			НоваяСтрока.Спецификация = Строка.Спецификация;
			НоваяСтрока.КоличествоНаПартию = Строка.Количество;
			
		ИначеЕсли Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе
			И НЕ Строка.СпецификацияРемонта.Пустая() Тогда
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Строка = Строка;
			НоваяСтрока.Спецификация = Строка.СпецификацияРемонта;
			НоваяСтрока.ЭтоРемонт = Истина;
			НоваяСтрока.КоличествоНаПартию = Строка.Количество;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выходные изделия - разборка
	СтруктураПоиска = Новый Структура("ОбработатьПоСпецификации", Истина);
	
	МассивСтрок = СтруктураДанных.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из МассивСтрок Цикл
			
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Строка = Строка;
		НоваяСтрока.Спецификация = Строка.Спецификация;
		НоваяСтрока.ЭтоРазборка = Истина;
		НоваяСтрока.КоличествоНаПартию = Строка.Количество;
			
	КонецЦикла;
	
	// Возвратные отходы - разборка
	МассивСтрок = СтруктураДанных.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из МассивСтрок Цикл
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Строка = Строка;
		НоваяСтрока.Спецификация = Строка.Спецификация;
		НоваяСтрока.ЭтоРазборка = Истина;
		НоваяСтрока.КоличествоНаПартию = Строка.Количество;
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьКэшСпецификаций()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Распоряжение");
	Результат.Колонки.Добавить("Спецификация");
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("ПодразделениеДиспетчер");
	Результат.Колонки.Добавить("СтруктураДанных");
	
	Результат.Индексы.Добавить(РазрезыКэшаСпецификаций());
	
	Возврат Результат;
	
КонецФункции

Функция РазрезыКэшаСпецификаций()
	
	Возврат "Распоряжение, Спецификация, Номенклатура, Характеристика, ПодразделениеДиспетчер";
	
КонецФункции

Функция НайтиИЗакэшироватьДанныеСпецификации(ДанныеПоНоменклатуре, ПараметрыВыборки, КэшированныеСпецификации)
	
	РазрезыКэша = РазрезыКэшаСпецификаций();
	
	СтруктураПоиска = Новый Структура(РазрезыКэша);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПоНоменклатуре);
	
	НайденныеСтроки = КэшированныеСпецификации.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Результат = ДанныеСпецификации(ДанныеПоНоменклатуре, ПараметрыВыборки);
		
		НоваяСтрока = КэшированныеСпецификации.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоНоменклатуре);
		
		НоваяСтрока.СтруктураДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Результат);
		
	Иначе
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НайденныеСтроки[0].СтруктураДанных);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьВыпускПоПотребностям(Потребности, ПараметрыВыборки, КэшированныеСпецификации)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Результат.Колонки.Добавить("ПартияВыпуска", Новый ОписаниеТипов("Структура"));
	
	Если Потребности.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого Потребность Из Потребности Цикл
		Потребность.Группировать = НЕ Потребность.ЭтоЗависимаяПотребность
			И Потребность.ПланироватьНеРанее.Пустая();
		Потребность.Обработана   = Ложь;
	КонецЦикла;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("КлючСвязиВыпуск", 1);
	ПараметрыРасчета.Вставить("КлючСвязиМакс", МаксимальныйКлючСвязи(Потребности) + 1);
	ПараметрыРасчета.Вставить("СпецификацииСНечеткойХарактеристикой",
		СпецификацииСНечеткойХарактеристикойИзделий(Потребности.ВыгрузитьКолонку("Спецификация")));
	
	// Обход потребностей по тянущей схеме
	Потребности.Сортировать("Окончание Убыв, КлючСвязи, Количество");
	РассчитатьВыпускПоСхемеПроцесса(Результат, Потребности, ПараметрыВыборки, ПараметрыРасчета, Ложь, КэшированныеСпецификации);
	
	// Обход потребностей по толкающей схеме
	Потребности.Сортировать("Начало Возр, КлючСвязи, Количество");
	РассчитатьВыпускПоСхемеПроцесса(Результат, Потребности, ПараметрыВыборки, ПараметрыРасчета, Истина, КэшированныеСпецификации);
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьВыпускПоСхемеПроцесса(Выпуски, Потребности, ПараметрыВыборки, ПараметрыРасчета, ТолкающаяСхема, КэшированныеСпецификации)
	
	Индекс = 0;
	Пока Индекс < Потребности.Количество() Цикл
		
		Потребность = Потребности[Индекс];
		Индекс = Индекс + 1;
		
		ПотребностьПоТолкающейСхеме = Потребность.ЭтоРазборка
			ИЛИ (Потребность.ЭтоРемонт И ЭтоРазузлованнаяПотребность(Потребность));
		
		Если Потребность.Обработана
			ИЛИ Потребность.ЭтоЗависимаяПотребность
			ИЛИ ТолкающаяСхема <> ПотребностьПоТолкающейСхеме Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПотребностей = ПодобратьПотребностиДляГруппировки(
			Потребности,
			Потребность,
			ПараметрыРасчета);
		Если МассивПотребностей.Количество() > 1 Тогда
			ПартияВыпуска = 0;
			СгруппироватьПотребности(
				Потребности,
				МассивПотребностей,
				ПараметрыВыборки,
				КэшированныеСпецификации,
				ПараметрыРасчета.КлючСвязиМакс,
				ПартияВыпуска);
		Иначе
			ПартияВыпуска = РассчитатьМаксимальнуюПартиюВыпуска(
				МассивПотребностей,
				ПараметрыВыборки,
				КэшированныеСпецификации);
		КонецЕсли;
		
		ПартииВыпуска = РазбитьНаОптимальныеПартииВыпуска(
			ПартияВыпуска.Числитель,
			ПартияВыпуска.Знаменатель,
			Потребность);
		
		Для Х = 0 По ПартииВыпуска.ВГраница() Цикл
			
			НоваяСтрока = Выпуски.Добавить();
			
			НоваяСтрока.Спецификация = Потребность.Спецификация;
			НоваяСтрока.КлючСвязи    = ПараметрыРасчета.КлючСвязиВыпуск;
			
			НоваяСтрока.ПартияВыпуска = ПартииВыпуска[Х];
			
		КонецЦикла;
		
		Для каждого Строка Из МассивПотребностей Цикл
			
			Строка.Обработана = Истина;
			Строка.КлючСвязиВыпуск = ПараметрыРасчета.КлючСвязиВыпуск;
			
			ЗаполнитьСвойстваЗависимойПотребности(Строка, "Обработана, КлючСвязиВыпуск");
			
		КонецЦикла;
		
		ПараметрыРасчета.КлючСвязиВыпуск = ПараметрыРасчета.КлючСвязиВыпуск + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МаксимальныйКлючСвязи(Потребности)
	
	Если Потребности.Количество() > 0 Тогда
		
		Таблица = Потребности.Скопировать(, "КлючСвязи");
		Таблица.Сортировать("КлючСвязи Убыв");
		
		Результат = Таблица[0].КлючСвязи;
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодобратьПотребностиДляГруппировки(Потребности, Потребность, Параметры)
	
	Результат = Новый Массив;
	Результат.Добавить(Потребность);
	
	Если Потребность.Группировать Тогда
		
		ПараметрыОтбора = Новый Структура("Распоряжение, Спецификация, Группировать",
			Потребность.Распоряжение, Потребность.Спецификация, Истина);
			
		НайденныеСтроки = Потребности.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого СледующаяПотребность Из НайденныеСтроки Цикл
			
			Если Потребности.Индекс(СледующаяПотребность) <= Потребности.Индекс(Потребность) Тогда
				Продолжить;
			КонецЕсли;
			
			// Ограничение по назначению
			Если (Потребность.Обособленно ИЛИ СледующаяПотребность.Обособленно)
				И Потребность.НазначениеПродукция <> СледующаяПотребность.НазначениеПродукция Тогда
				Продолжить;
			КонецЕсли;
			
			// Ограничение по характеристике
			Если ЗначениеЗаполнено(Потребность.Характеристика)
				И Потребность.Характеристика <> СледующаяПотребность.Характеристика
				И Параметры.СпецификацииСНечеткойХарактеристикой.Найти(Потребность.Спецификация) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Ограничение по сроку пролеживания
			Если НЕ ЗначениеЗаполнено(Потребность.СрокПролеживания) Тогда
				
				ВнутриСрокаПролеживания = Ложь;
				
			ИначеЕсли Потребность.ЭтоРазборка Тогда
				
				ВнутриСрокаПролеживания = (СледующаяПотребность.Начало <= Потребность.СрокПролеживания);
				
			ИначеЕсли Потребность.ЭтоРемонт И ЭтоРазузлованнаяПотребность(Потребность) Тогда
				
				ВнутриСрокаПролеживания = СледующаяПотребность.Окончание <= Потребность.СрокПролеживания;
				
			Иначе
				ВнутриСрокаПролеживания = (СледующаяПотребность.Окончание >= Потребность.СрокПролеживания);
			КонецЕсли;
			
			Если НЕ Потребность.ОграниченСрокПролеживания
				ИЛИ ВнутриСрокаПролеживания Тогда
				
				Результат.Добавить(СледующаяПотребность);
				
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СгруппироватьПотребности(
									Потребности,
									МассивПотребностей,
									ПараметрыВыборки,
									КэшированныеСпецификации,
									КлючСвязи,
									ПартияВыпуска)
	
	УдалитьПолуфабрикатыСпискаПотребностей(Потребности, МассивПотребностей);
	
	ВременнаяПотребность = ДобавитьВременнуюПотребностьДляРазузлования(
		Потребности, МассивПотребностей, ПараметрыВыборки, КэшированныеСпецификации, ПартияВыпуска);
	
	РазузловатьПотребностьПоПолуфабрикатамРекурсивно(
		Потребности,
		ВременнаяПотребность,
		КлючСвязи,
		ПараметрыВыборки,
		КэшированныеСпецификации);
	
	Полуфабрикаты = ПолуфабрикатыПотребности(Потребности, ВременнаяПотребность);
	Для каждого Полуфабрикат Из Полуфабрикаты Цикл
		Полуфабрикат.Группировать = Ложь;
	КонецЦикла;
	
	ДнейОтПотребности = ДнейОтПотребностиПоГруппеПотребностей(МассивПотребностей);
	
	Для каждого Потребность Из МассивПотребностей Цикл
		
		Потребность.КлючСвязи = ВременнаяПотребность.КлючСвязи;
		Потребность.ДнейОтПотребности = ДнейОтПотребности;
		
		ЗаполнитьСвойстваЗависимойПотребности(Потребность, "КлючСвязи, ДнейОтПотребности");
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВременнаяПотребность.ЗависимаяПотребность) Тогда
		Потребности.Удалить(ВременнаяПотребность.ЗависимаяПотребность);
	КонецЕсли;
	
	Потребности.Удалить(ВременнаяПотребность);
	
КонецПроцедуры

Процедура УдалитьПолуфабрикатыСпискаПотребностей(Потребности, МассивПотребностей)
	
	Для каждого Потребность Из МассивПотребностей Цикл
		
		Полуфабрикаты = ПолуфабрикатыПотребности(Потребности, Потребность);
		
		Для каждого Полуфабрикат Из Полуфабрикаты Цикл
			
			Потребности.Удалить(Полуфабрикат);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолуфабрикатыПотребности(Потребности, Потребность)
	
	Результат = Новый Массив;
	
	ОчередьОбработки = Новый Массив;
	ОчередьОбработки.Добавить(Потребность);
	
	СтруктураПоиска = Новый Структура("КлючСвязиПотребность");
	
	Пока ОчередьОбработки.Количество() > 0 Цикл
		
		СтруктураПоиска.КлючСвязиПотребность = ОчередьОбработки[0].КлючСвязи;
		НайденныеСтроки = Потребности.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			Результат.Добавить(Строка);
			
			Если НЕ Строка.ЭтоЗависимаяПотребность Тогда
				ОчередьОбработки.Добавить(Строка);
			КонецЕсли;
			
		КонецЦикла;
		
		ОчередьОбработки.Удалить(0);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьВременнуюПотребностьДляРазузлования(
													Потребности,
													МассивПотребностей,
													ПараметрыВыборки,
													КэшированныеСпецификации,
													ПартияВыпуска)
	
	ТекущиеПотребности = СвернутьМассивПотребностей(
		Потребности,
		МассивПотребностей);
	
	ПартияВыпуска = РассчитатьМаксимальнуюПартиюВыпуска(
		ТекущиеПотребности,
		ПараметрыВыборки,
		КэшированныеСпецификации);
	
	ДанныеЗаполнения = МассивПотребностей[0];
	
	Результат = Потребности.Добавить();
	ЗаполнитьЗначенияСвойств(Результат, ДанныеЗаполнения);
	
	// При объединении потребностей разных назначений,
	//  назначение в объединенную потребность не переносится
	Если СодержитПотребностиРазныхНазначений(МассивПотребностей) Тогда
		// соблюдаем типизацию полей, пустые значения устанавливаем вручную
		Результат.Назначение = Справочники.Назначения.ПустаяСсылка();
		Результат.Обособленно = Ложь;
		Результат.НазначениеПродукция = Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеПоНоменклатуре = ДанныеПоНоменклатуреРасширенный();
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеЗаполнения);
	
	СтруктураДанных = НайтиИЗакэшироватьДанныеСпецификации(
		ДанныеПоНоменклатуре,
		ПараметрыВыборки,
		КэшированныеСпецификации);
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика",
		ДанныеЗаполнения.Номенклатура, ДанныеЗаполнения.Характеристика);
	
	ИмяТЧ = ?(ДанныеЗаполнения.ЭтоРазборка, "ВходящиеИзделия", "ВыходныеИзделия");
	НайденныеСтроки = СтруктураДанных[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.ВГраница() <> -1 Тогда
		
		РассчитатьКоличествоВСтроке(
			ПартияВыпуска,
			НайденныеСтроки[0],
			Истина,
			Ложь,
			НЕ ДанныеЗаполнения.ЭтоРазборка);
		
		Результат.Количество = НайденныеСтроки[0].Количество;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СодержитПотребностиРазныхНазначений(МассивПотребностей)
	
	Граница = МассивПотребностей.ВГраница();
	Если Граница > 0 Тогда
		НазначениеПродукция = МассивПотребностей[0].НазначениеПродукция;
		Для Индекс = 1 По Граница Цикл
			Если НазначениеПродукция <> МассивПотребностей[Индекс].НазначениеПродукция Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция СвернутьМассивПотребностей(Потребности, МассивПотребностей)
	
	Результат = Потребности.Скопировать(МассивПотребностей,
		"Распоряжение, Спецификация, Номенклатура, Характеристика, Количество");
	
	Результат.Свернуть("Распоряжение, Спецификация, Номенклатура, Характеристика", "Количество");
	
	Для каждого Строка Из Результат Цикл
		
		Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
			
			СвернутьПотребностиПоХарактеристике(Результат);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СвернутьПотребностиПоХарактеристике(ТекущиеПотребности)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТекущиеПотребности.Распоряжение,
	|	ТекущиеПотребности.Спецификация,
	|	ТекущиеПотребности.Номенклатура,
	|	ТекущиеПотребности.Характеристика,
	|	ТекущиеПотребности.Количество
	|ПОМЕСТИТЬ ВТТекущиеПотребности
	|ИЗ
	|	&ТекущиеПотребности КАК ТекущиеПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТекущиеПотребности.Распоряжение,
	|	ВТТекущиеПотребности.Спецификация,
	|	ВТТекущиеПотребности.Номенклатура,
	|	ВЫБОР
	|		КОГДА РесурсныеСпецификацииВыходныеИзделия.Характеристика ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ВТТекущиеПотребности.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ВТТекущиеПотребности.Количество) КАК Количество
	|ИЗ
	|	ВТТекущиеПотребности КАК ВТТекущиеПотребности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|		ПО ВТТекущиеПотребности.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|			И ВТТекущиеПотребности.Номенклатура = РесурсныеСпецификацииВыходныеИзделия.Номенклатура
	|			И ВТТекущиеПотребности.Характеристика = РесурсныеСпецификацииВыходныеИзделия.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТекущиеПотребности.Распоряжение,
	|	ВТТекущиеПотребности.Спецификация,
	|	ВТТекущиеПотребности.Номенклатура,
	|	ВЫБОР
	|		КОГДА РесурсныеСпецификацииВыходныеИзделия.Характеристика ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ВТТекущиеПотребности.Характеристика
	|	КОНЕЦ");
	
	Запрос.УстановитьПараметр("ТекущиеПотребности", ТекущиеПотребности);
	
	ТекущиеПотребности = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ДанныеСпецификацийПоСгруппированнымПотребностям(Выпуски, Потребности, ПараметрыВыборки, КэшированныеСпецификации)
	
	Результат = Новый Массив;
	
	СтруктураПоиска1 = Новый Структура("КлючСвязиВыпуск");
	СтруктураПоиска2 = Новый Структура("ЭтоРазборка, КлючСвязиПотребность", Истина);
	
	ОбособлениеИзделий = Новый Соответствие;
	Для Индекс = 0 По Потребности.Количество()-1 Цикл
		ОбособлениеИзделий.Вставить(Индекс,
			Новый Структура("Выпуск, Обеспечение",
				Потребности[Индекс].Количество, Потребности[Индекс].Количество));
	КонецЦикла;
	
	Для каждого Выпуск Из Выпуски Цикл
		
		ПотребностиВыпуска = Новый Массив;
		ЗначенияЗаполнения = Неопределено;
		
		СтруктураПоиска1.КлючСвязиВыпуск = Выпуск.КлючСвязи;
		НайденныеСтроки = Потребности.НайтиСтроки(СтруктураПоиска1);
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ПотребностиВыпуска.Добавить(НайденнаяСтрока);
			
			Если ЗначенияЗаполнения = Неопределено
					ИЛИ НайденнаяСтрока.ЭтоПотребностьВОсновномИзделии Тогда
				ЗначенияЗаполнения = НайденнаяСтрока;
			КонецЕсли;
			
			Если НайденнаяСтрока.ЭтоРазборка ИЛИ НайденнаяСтрока.ЭтоРемонт Тогда
				
				СтруктураПоиска2.КлючСвязиПотребность = НайденнаяСтрока.КлючСвязи;
				СтрокиРазборки = Потребности.НайтиСтроки(СтруктураПоиска2);
				
				Для каждого СтрокаРазборка Из СтрокиРазборки Цикл
					Если СтрокаРазборка.Количество > 0 Тогда
						ПотребностиВыпуска.Добавить(СтрокаРазборка);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеПоНоменклатуре = ДанныеПоНоменклатуреРасширенный();
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ЗначенияЗаполнения);
		
		СтруктураДанных = НайтиИЗакэшироватьДанныеСпецификации(
			ДанныеПоНоменклатуре,
			ПараметрыВыборки,
			КэшированныеСпецификации);
		
		ДобавитьПоляВДанныеСпецификацииПоПотребностям(СтруктураДанных, ПараметрыВыборки);
		
		ЗаполнитьЗначенияСвойств(
			СтруктураДанных,
			ЗначенияЗаполнения,
			"КлючСвязи, Распоряжение, ДатаЗапуска, ДатаВыпуска, РазмещениеВыпуска, НекратныйВыпуск, ПланироватьНеРанее");
		
		Если СодержитПотребностиРазныхНазначений(ПотребностиВыпуска) Тогда
			СтруктураДанных.Назначение          = Неопределено;
			СтруктураДанных.НазначениеПродукция = Неопределено;
		Иначе
			СтруктураДанных.Назначение          = ЗначенияЗаполнения.Назначение;
			СтруктураДанных.НазначениеПродукция = ЗначенияЗаполнения.НазначениеПродукция;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияЗаполнения.ПланироватьНеРанее) Тогда
			СтруктураДанных.КлючСвязиПланироватьНеРанее = ЗначенияЗаполнения.КлючСвязиПотребность;
		КонецЕсли;
		
		СтруктураДанных.ЭтапыОбособитьВыпуск = Новый Массив;
		
		СтруктураДанных.ПартияВыпуска = Выпуск.ПартияВыпуска;
		СтруктураДанных.КоличествоПартийВыпуска = Выпуск.ПартияВыпуска.Значение;
		СтруктураДанных.ЕдиницаИзмеренияПартииВыпуска = ЕдиницаИзмеренияПартииВыпуска(СтруктураДанных);
		
		ПараметрыРасчета = ПараметрыРасчетаКоличества(
			ДанныеПоНоменклатуре,
			СтруктураДанных);
		
		РассчитатьКоличествоНаПартиюВыпуска(Выпуск.ПартияВыпуска, СтруктураДанных, ПараметрыРасчета);
		
		РаспаковатьСоставНаборов(СтруктураДанных, ПараметрыВыборки);
		
		Для каждого Потребность Из ПотребностиВыпуска Цикл
			
			КоличествоОбособить = ОбособлениеИзделий[Потребности.Индекс(Потребность)];
			
			ЭтоРазборкаТекущегоВыпуска = Потребность.ЭтоРазборка
				И Потребность.КлючСвязиВыпуск = Выпуск.КлючСвязи;
			
			#Область ОбособлениеВыходныхИзделий
			
			ОбособитьВыходныеИзделия = НЕ ЭтоРазборкаТекущегоВыпуска
				И КоличествоОбособить.Выпуск > 0;
			
			Если ОбособитьВыходныеИзделия Тогда
				
				Для каждого Строка Из СтруктураДанных.ВыходныеИзделия Цикл
					
					Если Строка.Номенклатура <> Потребность.Номенклатура
						ИЛИ Строка.Характеристика <> Потребность.Характеристика
							И ЗначениеЗаполнено(Строка.Характеристика)
							И НЕ Строка.ЛюбаяХарактеристика
						ИЛИ Строка.ОбособленоПодПотребность
						ИЛИ Потребность.ЭтоРазборка
							И НЕ Потребность.ЭтоРемонт
							И НЕ Строка.ОбработатьПоСпецификации Тогда
						Продолжить;
					КонецЕсли;
						
					Если КоличествоОбособить.Выпуск >= Строка.Количество Тогда
						
						КоличествоЗачет = Строка.Количество;
						
						ЗаполнитьЗначенияСвойств(Строка, Потребность,
							"Получатель,
							|Характеристика,
							|" + ?(Потребность.ВходящаяПотребность, "Назначение, СписатьНаРасходы, СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов,", "") + "
							|ЭтапПолучательИзделия
							|");
						Если Потребность.ЭтоРазборка Тогда
							Строка.КлючСвязиПолучатель = Потребность.КлючСвязи;
						Иначе
							Строка.КлючСвязиПолучатель = Потребность.КлючСвязиПотребность;
							Строка.ЭтапПотребитель = Потребность.ЭтапИсточник;
						КонецЕсли;
						Строка.ОбособленоПодПотребность = Истина;
						
					Иначе
						
						КоличествоЗачет = КоличествоОбособить.Выпуск;
						
						НоваяСтрока = СтруктураДанных.ВыходныеИзделия.Добавить();
						
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Потребность,
							"Получатель,
							|Характеристика,
							|" + ?(Потребность.ВходящаяПотребность, "Назначение, СписатьНаРасходы, СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов,", "") + "
							|ЭтапПолучательИзделия
							|");
						Если Потребность.ЭтоРазборка Тогда
							НоваяСтрока.КлючСвязиПолучатель = Потребность.КлючСвязи;
						Иначе
							НоваяСтрока.КлючСвязиПолучатель = Потребность.КлючСвязиПотребность;
							НоваяСтрока.ЭтапПотребитель = Потребность.ЭтапИсточник;
						КонецЕсли;
						НоваяСтрока.ОбособленоПодПотребность = Истина;
						
						НоваяСтрока.Количество = КоличествоЗачет;
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество/НоваяСтрока.КоэффициентУпаковки;
						
						Строка.Количество = Строка.Количество - КоличествоЗачет;
						Строка.КоличествоУпаковок = Строка.Количество/Строка.КоэффициентУпаковки;
						
						Если Строка.Округлить
							И НЕ Строка.ЭтоЦеховаяКладовая
							И Окр(Строка.Количество) <> Строка.Количество Тогда
							Строка.Округлить = Ложь;
							Строка.Получатель = Потребность.Получатель;
						КонецЕсли;
						
						ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, Строка, СтруктураДанных.СпособРаспределенияЗатратНаВыходныеИзделия);
						
					КонецЕсли;
				
					КоличествоОбособить.Выпуск = КоличествоОбособить.Выпуск - КоличествоЗачет;
					Если КоличествоОбособить.Выпуск = 0 Тогда
						Прервать;
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
				
			#Область ОбособлениеВозвратныхОтходов
			
			ОбособитьВозвратныеОтходы = НЕ ЭтоРазборкаТекущегоВыпуска
				И КоличествоОбособить.Выпуск > 0;
			
			Если ОбособитьВозвратныеОтходы Тогда
				
				Для каждого Строка Из СтруктураДанных.ВозвратныеОтходы Цикл
						
					Если Строка.Номенклатура <> Потребность.Номенклатура
						ИЛИ Строка.Характеристика <> Потребность.Характеристика
							И ЗначениеЗаполнено(Строка.Характеристика)
							И НЕ Строка.ЛюбаяХарактеристика
						ИЛИ Строка.ОбособленоПодПотребность
						ИЛИ Потребность.ЭтоРазборка
							И НЕ Потребность.ЭтоРемонт
							И НЕ Строка.ОбработатьПоСпецификации Тогда
						Продолжить;
					КонецЕсли;
					
					Если КоличествоОбособить.Выпуск >= Строка.Количество Тогда
					
						КоличествоЗачет = Строка.Количество;
						
						ЗаполнитьЗначенияСвойств(Строка, Потребность, 
							"Получатель" + ?(Потребность.ВходящаяПотребность,", Назначение, СписатьНаРасходы, СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов",""));
						
						Если Потребность.ЭтоРазборка Тогда
							
							Строка.ЭтапПолучательИзделия = Потребность.ЭтапПолучательИзделия;
							Строка.КлючСвязиПолучатель = Потребность.КлючСвязи;
							
							Если Потребность.ЭтоРемонт Тогда
								Строка.СпецификацияРемонта = Потребность.Спецификация;
							КонецЕсли;
							
						Иначе
							Строка.ЭтапПотребитель = Потребность.ЭтапИсточник;
						КонецЕсли;
						
						Строка.ОбособленоПодПотребность = Истина;
						
					Иначе
						
						КоличествоЗачет = КоличествоОбособить.Выпуск;
						
						НоваяСтрока = СтруктураДанных.ВозвратныеОтходы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Потребность, 
							"Получатель" + ?(Потребность.ВходящаяПотребность,", Назначение, СписатьНаРасходы, СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов",""));
						
						Если Потребность.ЭтоРазборка Тогда
							
							НоваяСтрока.ЭтапПолучательИзделия = Потребность.ЭтапПолучательИзделия;
							НоваяСтрока.КлючСвязиПолучатель = Потребность.КлючСвязи;
							
							Если Потребность.ЭтоРемонт Тогда
								НоваяСтрока.СпецификацияРемонта = Потребность.Спецификация;
							КонецЕсли;
							
						Иначе
							НоваяСтрока.ЭтапПотребитель = Потребность.ЭтапИсточник;
						КонецЕсли;
					
						НоваяСтрока.ОбособленоПодПотребность = Истина;
						
						НоваяСтрока.Количество = КоличествоЗачет;
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество/НоваяСтрока.КоэффициентУпаковки;
						
						Строка.Количество = Строка.Количество - КоличествоЗачет;
						Строка.КоличествоУпаковок = Строка.Количество/Строка.КоэффициентУпаковки;
						
						Если Строка.Округлить
							И НЕ Строка.ЭтоЦеховаяКладовая
							И Окр(Строка.Количество) <> Строка.Количество Тогда
							Строка.Округлить = Ложь;
							Строка.Получатель = Потребность.Получатель;
						КонецЕсли;
								
					КонецЕсли;
						
					КоличествоОбособить.Выпуск = КоличествоОбособить.Выпуск - КоличествоЗачет;
					Если КоличествоОбособить.Выпуск = 0 Тогда
						Прервать;
					КонецЕсли;
			
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ОбособлениеВходящихИзделий
			
			ОбособитьВходящиеИзделия = (ЭтоРазборкаТекущегоВыпуска ИЛИ Потребность.ЭтоРемонт)
				И ПараметрыВыборки.ПереченьДанных.Найти("ВходящиеИзделия") <> Неопределено
				И НЕ ПараметрыВыборки.РассчитыватьДляПлановПроизводства
				И КоличествоОбособить.Обеспечение > 0;
			
			Если ОбособитьВходящиеИзделия Тогда
				
				ЭтоРазборкаПодЭтап = Потребность.ЭтоРазборка И ЗначениеЗаполнено(Потребность.ЭтапИсточник);
				
				Для каждого Строка Из СтруктураДанных.ВходящиеИзделия Цикл
					
					Если Строка.Номенклатура <> Потребность.Номенклатура
						ИЛИ (Строка.Характеристика <> Потребность.Характеристика
							И ЗначениеЗаполнено(Строка.Характеристика)
							И НЕ Строка.ЛюбаяХарактеристика)
						ИЛИ Строка.КоличествоОбособлено = Строка.Количество Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоЗачет = МИН(КоличествоОбособить.Обеспечение, Строка.Количество - Строка.КоличествоОбособлено);
					
					Склад = ?(Потребность.ЭтоРазборка И Потребность.ВходящаяПотребность, Потребность.Отправитель, Строка.Склад);
					ВариантОбеспечения = ?(ЭтоРазборкаПодЭтап ИЛИ Не Потребность.ВходящаяПотребность, Перечисления.ВариантыОбеспечения.Обособленно, Строка.ВариантОбеспечения);
					
					Если (Потребность.ЭтоРазборка ИЛИ Потребность.ЭтоРемонт) И НЕ Потребность.ВходящаяПотребность
							ИЛИ ЭтоРазборкаПодЭтап Тогда
						Производится = Истина;
					Иначе
						Производится = Строка.Производится;
					КонецЕсли;
					
					Если (Строка.Склад = Склад И Строка.ВариантОбеспечения = ВариантОбеспечения И Строка.Производится = Производится)
						ИЛИ (Строка.КоличествоОбособлено = 0 И КоличествоЗачет = Строка.Количество) Тогда
						
						СтрокаЗаполнить = Строка;
						
					Иначе
						
						НоваяСтрока = СтруктураДанных.ВходящиеИзделия.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						
						НоваяСтрока.Количество = КоличествоЗачет;
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество/НоваяСтрока.КоэффициентУпаковки;
						
						СтрокаЗаполнить = НоваяСтрока;
						
						Строка.Количество = Строка.Количество - КоличествоЗачет;
						Строка.КоличествоУпаковок = Строка.Количество/Строка.КоэффициентУпаковки;
						
					КонецЕсли;
					
					СтрокаЗаполнить.Склад = Склад;
					СтрокаЗаполнить.ВариантОбеспечения = ВариантОбеспечения;
					СтрокаЗаполнить.Производится = Производится;
					СтрокаЗаполнить.КоличествоОбособлено = СтрокаЗаполнить.КоличествоОбособлено + КоличествоЗачет;
					
					Если ЭтоРазборкаПодЭтап Тогда
						СтруктураДанных.ЭтапыОбособитьВыпуск.Добавить(Потребность.ЭтапИсточник);
					КонецЕсли;
					
					КоличествоОбособить.Обеспечение = КоличествоОбособить.Обеспечение - КоличествоЗачет;
					Если КоличествоОбособить.Обеспечение = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
			
		КонецЦикла;
			
		Для каждого Строка Из СтруктураДанных.ВыходныеИзделия Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Получатель) Тогда
				Строка.Получатель = Строка.Получатель2_2;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Строка Из СтруктураДанных.ВозвратныеОтходы Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Получатель) Тогда
				Строка.Получатель = Строка.Получатель2_2;
			КонецЕсли;
		КонецЦикла;
		
		Результат.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПоляВДанныеСпецификацииПоПотребностям(СтруктураДанных, ПараметрыВыборки)
	
	СтруктураДанных.Вставить("КлючСвязи");
	СтруктураДанных.Вставить("Распоряжение");
	СтруктураДанных.Вставить("ДатаЗапуска");
	СтруктураДанных.Вставить("ДатаВыпуска");
	СтруктураДанных.Вставить("РазмещениеВыпуска");
	СтруктураДанных.Вставить("НекратныйВыпуск");
	СтруктураДанных.Вставить("Назначение");
	СтруктураДанных.Вставить("НазначениеПродукция");
	СтруктураДанных.Вставить("ПартияВыпуска");
	СтруктураДанных.Вставить("КоличествоПартийВыпуска");
	СтруктураДанных.Вставить("ЕдиницаИзмеренияПартииВыпуска");
	СтруктураДанных.Вставить("ПланироватьНеРанее");
	СтруктураДанных.Вставить("КлючСвязиПланироватьНеРанее");
	СтруктураДанных.Вставить("ЭтапыОбособитьВыпуск");
	
	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	ОТПолучатель = Новый ОписаниеТипов(ТипыПолучатель);
		
	ОТЭтап = Новый ОписаниеТипов("Неопределено");
	
	Для Сч = 1 По 2 Цикл
		
		Если Сч = 1 Тогда
			ИмяТаблицы = "ВыходныеИзделия";
		Иначе
			ИмяТаблицы = "ВозвратныеОтходы";
		КонецЕсли;
		
		Если ПараметрыВыборки.ПереченьДанных.Найти(ИмяТаблицы) <> Неопределено Тогда
		
			СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
				"Назначение",
				Новый ОписаниеТипов("СправочникСсылка.Назначения"));
			
			СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
				"ЭтапПотребитель",
				ОТЭтап);
			
			СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
				"КлючСвязиПолучатель",
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
			
			СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
				"ЭтапПолучательИзделия",
				Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
			
			СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
				"Получатель",
				ОТПолучатель);
			
			СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
				"ОбособленоПодПотребность",
				Новый ОписаниеТипов("Булево"));
				
			СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
				"СписатьНаРасходы",  
				Новый ОписаниеТипов("Булево"));
			
			ТипыСтатей = Новый Массив;
			ТипыСтатей.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
			ТипыСтатей.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
			
			ОТСтатьяРасходов = Новый ОписаниеТипов(ТипыСтатей);
			СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
				"СтатьяРасходов", 
				ОТСтатьяРасходов);
			                                    
			СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
				"АналитикаРасходов", 
				Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
			
			СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
				"АналитикаАктивовПассивов", 
				Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип);
				
			Если ИмяТаблицы = "ВозвратныеОтходы" Тогда
			
				СтруктураДанных[ИмяТаблицы].Колонки.Добавить(
					"СпецификацияРемонта",
					Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыВыборки.ПереченьДанных.Найти("ВходящиеИзделия") <> Неопределено Тогда
		
		СтруктураДанных.ВходящиеИзделия.Колонки.Добавить(
			"КоличествоОбособлено",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьОписаниеОшибки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЕстьОшибка", Ложь);
	Результат.Вставить("ОшибкаТекст", Неопределено);
	Результат.Вставить("ОшибкаСсылка", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьКорректностьСпецификаций(Спецификации, ОписаниеОшибки)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭтапыПроизводства.Владелец КАК Спецификация,
		|	ЭтапыПроизводства.Владелец.Представление КАК СпецификацияПредставление
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В(&Спецификации)
		|	И ЭтапыПроизводства.ПометкаУдаления = ЛОЖЬ
		|	И ЭтапыПроизводства.НомерСледующегоЭтапа = 0
		|	И ЭтапыПроизводства.Владелец.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыПроизводства.Владелец,
		|	ЭтапыПроизводства.Владелец.Представление
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ЭтапыПроизводства.Ссылка) > 1");
	
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОписаниеОшибки.ЕстьОшибка = Истина;
		ОписаниеОшибки.ОшибкаСсылка = Выборка.Спецификация;
		ОписаниеОшибки.ОшибкаТекст = СтрШаблон(
				НСтр("ru = 'Спецификация ""%1"" содержит несколько выпускающих этапов'"),
				Выборка.СпецификацияПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДнейОтПотребностиПоГруппеПотребностей(МассивПотребностей)
	
	Результат = Неопределено;
	
	Для каждого Потребность Из МассивПотребностей Цикл
		
		Если Результат = Неопределено Тогда
			Результат = Потребность.ДнейОтПотребности;
		Иначе
			Если Потребность.ЭтоРазборка
				ИЛИ (Потребность.ЭтоРемонт И ЭтоРазузлованнаяПотребность(Потребность)) Тогда
				
				Результат = Макс(Результат, Потребность.ДнейОтПотребности);
				
			Иначе
				
				Результат = Мин(Результат, Потребность.ДнейОтПотребности);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСвойстваЗависимойПотребности(Потребность, СписокСвойств)
				
	Если Потребность.ЭтоРемонт
		И ЗначениеЗаполнено(Потребность.ЗависимаяПотребность) Тогда
		
		ЗаполнитьЗначенияСвойств(Потребность.ЗависимаяПотребность, Потребность, СписокСвойств);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоРазузлованнаяПотребность(Потребность)
	
	Возврат ЗначениеЗаполнено(Потребность.КлючСвязиПотребность);
	
КонецФункции

Функция ЕдиницаИзмеренияПартииВыпуска(СтруктураДанных)
	
	Если (СтруктураДанных.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			И СтруктураДанных.ИспользоватьНесколькоВыходныхИзделий
		) Тогда
		
		ЕдиницаИзмеренияПартииВыпуска = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
	Иначе
		
		ОсновноеИзделие = СтруктураДанных.ОсновноеИзделие;
		
		Если ОсновноеИзделие.КоличествоУпаковок <> 1 Тогда
			ЕдиницаИзмеренияПартииВыпуска = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		Иначе
			Если ЗначениеЗаполнено(ОсновноеИзделие.Номенклатура) И ОсновноеИзделие.Упаковка.Пустая() Тогда
				ЕдиницаИзмеренияПартииВыпуска = ОсновноеИзделие.ЕдиницаИзмерения;
			Иначе
				ЕдиницаИзмеренияПартииВыпуска = ОсновноеИзделие.Упаковка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕдиницаИзмеренияПартииВыпуска;
	
КонецФункции


#КонецОбласти

#Область ДанныеСпецификацииПоСпискуНоменклатуры

Функция ДобавитьДанныеПолуфабрикатов(СводнаяТаблицаСпецификаций, МассивДанных, ПараметрыВыборки, КэшированныеСпецификации)
	
	МатериалыПроизводимыеВПроцессе = Новый Массив;
	
	ДанныеСпецификаций = ДанныеСпецификацииПоСпискуНоменклатуры(
		МассивДанных,
		ПараметрыВыборки,
		КэшированныеСпецификации);
	
	Для ИндексТекущихДанных = 0 По МассивДанных.ВГраница() Цикл
		
		ТекущиеДанные = ДанныеСпецификаций.Получить(ИндексТекущихДанных);
		Если ТекущиеДанные = Неопределено Тогда
			
			ТекущаяНоменклатура = МассивДанных[ИндексТекущихДанных].Номенклатура;
			
			ТекстСообщения = НСтр("ru = 'Не удалось получить данные спецификации по номенклатуре: %Ссылка%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ТекущаяНоменклатура);
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				ТекущаяНоменклатура.Метаданные(), 
				ТекущаяНоменклатура,
				ТекстСообщения);
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("АльтернативныеВидыРабочихЦентров") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.АльтернативныеВидыРабочихЦентров, СводнаяТаблицаСпецификаций.АльтернативныеВидыРабочихЦентров);
		КонецЕсли;
		Если ТекущиеДанные.Свойство("ВидыРабочихЦентров") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.ВидыРабочихЦентров, СводнаяТаблицаСпецификаций.ВидыРабочихЦентров);
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("ВыходныеИзделия") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.ВыходныеИзделия, СводнаяТаблицаСпецификаций.ВыходныеИзделия);
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("ВозвратныеОтходы") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.ВозвратныеОтходы, СводнаяТаблицаСпецификаций.ВозвратныеОтходы);
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("МатериалыИУслуги") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.МатериалыИУслуги, СводнаяТаблицаСпецификаций.МатериалыИУслуги);
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("Трудозатраты") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.Трудозатраты, СводнаяТаблицаСпецификаций.Трудозатраты);
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("Этапы") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.Этапы, СводнаяТаблицаСпецификаций.Этапы);
		КонецЕсли;
		
		Для Каждого Строка Из ТекущиеДанные.МатериалыИУслуги Цикл
			
			Если Строка.ПроизводитсяВПроцессе Тогда
				
				ДанныеМатериала = Новый Структура;
				ДанныеМатериала.Вставить("Номенклатура",      Строка.Номенклатура);
				ДанныеМатериала.Вставить("Характеристика",    Строка.Характеристика);
				ДанныеМатериала.Вставить("Подразделение",     Строка.ПодразделениеЭтапа);
				ДанныеМатериала.Вставить("Спецификация",      Строка.ИсточникПолученияПолуфабриката);
				ДанныеМатериала.Вставить("Количество",        Строка.Количество);
				ДанныеМатериала.Вставить("Упаковка",          Строка.Упаковка);
				ДанныеМатериала.Вставить("ДнейОтПотребности", Строка.ДнейОтПотребности);
				
				МатериалыПроизводимыеВПроцессе.Добавить(ДанныеМатериала);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат МатериалыПроизводимыеВПроцессе;
	
КонецФункции

Функция ИнициализироватьКэшСпискаНоменклатуры(ПараметрыВыборки)
	
	Результат = Новый ТаблицаЗначений;
	
	РазрезыСтр = РазрезыКэшаСпискаНоменклатуры(ПараметрыВыборки);
	Разрезы = СтрРазделить(РазрезыСтр, ",");
	
	Для каждого Разрез Из Разрезы Цикл
		Результат.Колонки.Добавить(Разрез);
	КонецЦикла;
	
	ИндексПоНоменклатуре = Ложь;
	Если Разрезы.Найти("Номенклатура") = Неопределено Тогда
		Результат.Колонки.Добавить("Номенклатура");
		ИндексПоНоменклатуре = Истина;
	КонецЕсли;
	
	ИндексПоХарактеристике = Ложь;
	Если Разрезы.Найти("Характеристика") = Неопределено Тогда
		Результат.Колонки.Добавить("Характеристика");
		ИндексПоХарактеристике = Истина;
	КонецЕсли;
	
	Результат.Колонки.Добавить("МассивДанныхПоНоменклатуре");
	Результат.Колонки.Добавить("ИндексРезультата");
	
	Результат.Индексы.Добавить(РазрезыСтр);
	
	Если ИндексПоНоменклатуре ИЛИ ИндексПоХарактеристике Тогда
		Результат.Индексы.Добавить(РазрезыСтр
			+ ?(ИндексПоНоменклатуре, ",Номенклатура", "")
			+ ?(ИндексПоХарактеристике, ",Характеристика", ""));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазрезыКэшаСпискаНоменклатуры(ПараметрыВыборки)
	
	Результат = "";
	
	Для каждого КлючИЗначение Из ПараметрыВыборки.ПоляГруппировки Цикл
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ",")  + КлючИЗначение.Ключ;
	КонецЦикла;
	
	Если СтрНайти(Результат, "Спецификация") = 0 Тогда
		Результат = Результат
			+ ?(ПустаяСтрока(Результат), "", ",")
			+ "Спецификация";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеКэшаСпискаНоменклатуры(КэшСпискаНоменклатуры, ПараметрыВыборки, ДанныеПоНоменклатуре, ИскатьПоНоменклатуре)
	
	СтруктураПоиска = Новый Структура(РазрезыКэшаСпискаНоменклатуры(ПараметрыВыборки));
	
	Если ИскатьПоНоменклатуре Тогда
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПоНоменклатуре);
	
	Если ДанныеПоНоменклатуре.Свойство("ПоляГруппировки")
		И ТипЗнч(ДанныеПоНоменклатуре.ПоляГруппировки) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПоНоменклатуре.ПоляГруппировки);
		
	КонецЕсли;
	
	НайденныеСтроки = КэшСпискаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьВКэшСпискаНоменклатуры(КэшСпискаНоменклатуры, ДанныеПоНоменклатуре, ИндексРезультата)
	
	НоваяСтрока = КэшСпискаНоменклатуры.Добавить();
	
	Если ДанныеПоНоменклатуре.Свойство("ПоляГруппировки")
		И ТипЗнч(ДанныеПоНоменклатуре.ПоляГруппировки) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоНоменклатуре.ПоляГруппировки);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоНоменклатуре, "Спецификация, Номенклатура, Характеристика");
	
	НоваяСтрока.МассивДанныхПоНоменклатуре = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПоНоменклатуре);
	НоваяСтрока.ИндексРезультата = ИндексРезультата;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ДобавитьПредставленияВЗапрос(ТекстЗапроса)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЭтапыПроизводства_Представления", 	
									"ЕСТЬNULL(ЭтапыПроизводства.Подразделение.Представление, """") КАК ПодразделениеПредставление,
									|	ЕСТЬNULL(ЭтапыПроизводства.МаршрутнаяКарта.Представление, """") КАК МаршрутнаяКартаПредставление,");
									
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ВидыРабочихЦентров_Представления", 	
									"ЕСТЬNULL(ТабличнаяЧасть.ВидРабочегоЦентра.Представление, """") КАК ВидРабочегоЦентраПредставление,");
									
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ВыходныеИзделия_Представления",
									"ЕСТЬNULL(ВыходныеИзделия.Этап.Представление, """") КАК ЭтапПредставление,
									|	ВЫБОР
									|		КОГДА ВыходныеИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
									|			ТОГДА ЕСТЬNULL(ВыходныеИзделия.Упаковка.Представление, """")
									|		ИНАЧЕ ЕСТЬNULL(ВыходныеИзделия.Номенклатура.ЕдиницаИзмерения.Представление, """")
									|	КОНЕЦ КАК ЕдИзм,
									|	ЕСТЬNULL(ВыходныеИзделия.Номенклатура.Представление, """") КАК НоменклатураПредставление,
									|	ЕСТЬNULL(ВыходныеИзделия.Характеристика.Представление, """") КАК ХарактеристикаПредставление,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ВозвратныеОтходы_Представления",
									"ЕСТЬNULL(ВозвратныеОтходы.Этап.Представление, """") КАК ЭтапПредставление,
									|	ВЫБОР
									|		КОГДА ВозвратныеОтходы.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
									|			ТОГДА ЕСТЬNULL(ВозвратныеОтходы.Упаковка.Представление, """")
									|		ИНАЧЕ ЕСТЬNULL(ВозвратныеОтходы.Номенклатура.ЕдиницаИзмерения.Представление, """")
									|	КОНЕЦ КАК ЕдИзм,
									|	ЕСТЬNULL(ВозвратныеОтходы.Номенклатура.Представление, """") КАК НоменклатураПредставление,
									|	ЕСТЬNULL(ВозвратныеОтходы.Характеристика.Представление, """") КАК ХарактеристикаПредставление,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//МатериалыИУслуги_Представления",
									"ЕСТЬNULL(МатериалыИУслуги.Этап.Представление, """") КАК ЭтапПредставление,
									|	ВЫБОР
									|		КОГДА МатериалыИУслуги.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
									|			ТОГДА ЕСТЬNULL(МатериалыИУслуги.Упаковка.Представление, """")
									|		ИНАЧЕ ЕСТЬNULL(МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.Представление, """")
									|	КОНЕЦ КАК ЕдИзм,
									|	ЕСТЬNULL(МатериалыИУслуги.Номенклатура.Представление, """") КАК НоменклатураПредставление,
									|	ЕСТЬNULL(МатериалыИУслуги.Характеристика.Представление, """") КАК ХарактеристикаПредставление,");

КонецПроцедуры

Процедура ПрименитьОтборПоПараметрамВыбораДанных(МатериалыИУслуги, ПараметрыВыборки)
	
	Если НЕ ПараметрыВыборки.ДоступныРаботы Тогда
		
		Для Х = -МатериалыИУслуги.Количество() + 1 По 0 Цикл
			
			Строка = МатериалыИУслуги[-Х];
			
			Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				ИЛИ Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара
				ИЛИ Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
				ИЛИ Строка.Номенклатура.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			МатериалыИУслуги.Удалить(-Х);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры



Процедура ЗаполнитьСпецификациюПолуфабрикатовВПроцессе(МатериалыИУслуги, Владелец)
	
	Отбор = Новый Структура;
	Отбор.Вставить("СпособПолученияМатериала", Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации);
	Отбор.Вставить("Спецификация",             Справочники.РесурсныеСпецификации.ПустаяСсылка());
	
	НайденныеСтроки = МатериалыИУслуги.НайтиСтроки(Отбор);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		ОсновнаяСпецификация = УправлениеДаннымиОбИзделияхВызовСервера.ПолучитьОсновнуюСпецификацию(
			Строка.Подразделение,
			Строка.Номенклатура,
			Строка.Характеристика,
			ТекущаяДатаСеанса());
		
		Если ЗначениеЗаполнено(ОсновнаяСпецификация) Тогда
			
			Строка.Спецификация                   = ОсновнаяСпецификация;
			Строка.ИсточникПолученияПолуфабриката = ОсновнаяСпецификация;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюПоПрименениюМатериала(МатериалыИУслуги, ПараметрыВыборки)
	
	Если ПараметрыВыборки.ПолучитьПредставления Тогда
		
		МатериалыИУслуги.Колонки.Добавить("ПрименениеМатериалаРедактирование");
		
		Для каждого Строка Из МатериалыИУслуги Цикл
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоПрименениюМатериала(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СписокКолонокСоставаНабора()
	
	Возврат "Номенклатура, Характеристика, Количество, ТипНоменклатуры, ХарактеристикиИспользуются, ПодразделениеЭтапа,
		| ЕдиницаИзмерения, Упаковка, КоличествоУпаковок, КоэффициентУпаковки,
		| Склад, ЗаказатьНаСклад, ВариантОбеспечения, ДатаПотребности, Запланировать";
	
КонецФункции

Процедура ВключитьСоставНаборовВДанныеСпецификации(НаборДанных, ИмяНабораДанных, ДанныеПоНоменклатуре, ПараметрыВыборки)
	
	Если ПараметрыВыборки.РежимПолученияДанныхНаборов <> "Подготовить" 
		И ПараметрыВыборки.РежимПолученияДанныхНаборов <> "Распаковать" Тогда
		Возврат;
	КонецЕсли;

	СтрокиСНаборами = НаборДанных.НайтиСтроки(Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор));
	
	Если НЕ ЗначениеЗаполнено(СтрокиСНаборами) Тогда
		Возврат;
	КонецЕсли;
		
	НаборДанных.Колонки.Добавить("СоставНабора");
	
	СоставНабораКолонки = СписокКолонокСоставаНабора();
	
	СтрокиЗаполнитьПолучениеМатериалов = Новый Массив;
	Для каждого СтрокаНабораДанных Из СтрокиСНаборами Цикл
		
		ПараметрыВариантаКомплектации = НаборыВызовСервера.ПараметрыВариантаКомплектацииНоменклатуры(
			СтрокаНабораДанных.Номенклатура,
			СтрокаНабораДанных.Характеристика);
		
		Если ПараметрыВариантаКомплектации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СоставНабора = НаборДанных.СкопироватьКолонки(СоставНабораКолонки);
		Для каждого СтрокаКомплектующие Из ПараметрыВариантаКомплектации.Комплектующие Цикл
			НоваяСтрока = СоставНабора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКомплектующие);
			НоваяСтрока.ПодразделениеЭтапа = СтрокаНабораДанных.ПодразделениеЭтапа;
			СтрокиЗаполнитьПолучениеМатериалов.Добавить(НоваяСтрока);
		КонецЦикла;
		
		СтрокаНабораДанных.СоставНабора = СоставНабора;
		
	КонецЦикла;
	
	ЗаполнитьНастройкиПолученияМатериалов(
		СтрокиЗаполнитьПолучениеМатериалов,
		ИмяНабораДанных,
		ДанныеПоНоменклатуре,
		ПараметрыВыборки);
	
КонецПроцедуры

Процедура РаспаковатьСоставНаборов(ДанныеСпецификации, ПараметрыВыборки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыВыборки) И ПараметрыВыборки.РежимПолученияДанныхНаборов <> "Распаковать" Тогда
		Возврат;
	КонецЕсли;
	
	НаборДанных = Неопределено;
	Если НЕ ДанныеСпецификации.Свойство("МатериалыИУслуги", НаборДанных)
		ИЛИ ДанныеСпецификации.МатериалыИУслуги.Колонки.Найти("СоставНабора") = Неопределено
	Тогда
		Возврат;
	КонецЕсли;
		
	СоставНабораКолонки = СписокКолонокСоставаНабора();
	
	Для каждого СтрокаНабораДанных Из НаборДанных Цикл
		Если СтрокаНабораДанных.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
			ИндексСтроки = НаборДанных.Индекс(СтрокаНабораДанных);
			Если ЗначениеЗаполнено(СтрокаНабораДанных.СоставНабора) Тогда
				Для каждого СтрокаНабора Из СтрокаНабораДанных.СоставНабора Цикл
					НоваяСтрока = НаборДанных.Вставить(ИндексСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабораДанных, , СоставНабораКолонки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабора, СоставНабораКолонки, "Количество, КоличествоУпаковок");
					НоваяСтрока.Количество          = СтрокаНабора.Количество * СтрокаНабораДанных.Количество;
					НоваяСтрока.КоличествоУпаковок  = СтрокаНабора.КоличествоУпаковок * СтрокаНабораДанных.КоличествоУпаковок;
					НоваяСтрока.КоличествоУпаковокНаЕдиницуПартииВыпуска = СтрокаНабора.КоличествоУпаковок
						* СтрокаНабораДанных.КоличествоУпаковокНаЕдиницуПартииВыпуска;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
			Иначе
				НоваяСтрока = НаборДанных.Вставить(ИндексСтроки);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабораДанных, , "Номенклатура, Характеристика");
				НоваяСтрока.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПрименениеМатериала) Тогда
					НоваяСтрока.ПрименениеМатериала = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
						СтрокаНабораДанных.Номенклатура,
						СтрокаНабораДанных.Характеристика);
				КонецЕсли;
			КонецЕсли;
			НаборДанных.Удалить(СтрокаНабораДанных);
		КонецЕсли;
	КонецЦикла;
	
	НаборДанных.Колонки.Удалить("СоставНабора");
	
КонецПроцедуры

Процедура ПрименитьОтборПоДаннымСпецификации(ДанныеСпецификации, ПараметрыВыборки, Отбор)
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		Для каждого ИмяТаблицы Из ПараметрыВыборки.ПереченьДанных Цикл
			ДанныеСпецификации.Вставить(ИмяТаблицы, ДанныеСпецификации[ИмяТаблицы].Скопировать(Отбор));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьПроизводимыеНаЭтапеПолуфабрикаты(МатериалыИУслуги, ВозвратныеОтходы) Экспорт
	
	Если ВозвратныеОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СпособПолученияПолуфабриката",
		Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе);
	СтруктураПоиска.Вставить("СпецификацияРемонта",
		Справочники.РесурсныеСпецификации.ПустаяСсылка());
	
	СтрокиМатериалы = МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаМатериал Из СтрокиМатериалы Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаМатериал.Характеристика);
		СтруктураПоиска.Вставить("Этап", СтрокаМатериал.ИсточникПолученияПолуфабриката);
		
		СтрокиОтходы = ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
		Остаток = СтрокаМатериал.Количество;
		
		Пока Остаток > 0 И СтрокиОтходы.Количество() > 0 Цикл
			
			Строка = СтрокиОтходы[0];
			Если Остаток >= Строка.Количество Тогда
				Остаток = Остаток - Строка.Количество;
				ВозвратныеОтходы.Удалить(Строка);
			Иначе
				Строка.Количество = Строка.Количество - Остаток;
				Строка.КоличествоУпаковок = Строка.Количество/Строка.КоэффициентУпаковки;
				Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска = Строка.КоличествоУпаковок;
				Остаток = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		МатериалыИУслуги.Удалить(СтрокаМатериал);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СписокРесурсныхСпецификаций

Функция ТекстЗапросаДинамическогоСпискаРесурсныхСпецификаций() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникРесурсныеСпецификации.Ссылка КАК Ссылка,
	|
	|	СправочникРесурсныеСпецификации.Код КАК Код,
	|	СправочникРесурсныеСпецификации.Наименование КАК Наименование,
	|
	|	СправочникРесурсныеСпецификации.Статус КАК Статус,
	|	СправочникРесурсныеСпецификации.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|
	|	СправочникРесурсныеСпецификации.НачалоДействия КАК НачалоДействия,
	|	СправочникРесурсныеСпецификации.КонецДействия КАК КонецДействия,
	|
	|	СправочникРесурсныеСпецификации.Ответственный КАК Ответственный,
	|	СправочникРесурсныеСпецификации.Описание КАК Описание,
	|
	|	ВЫБОР
	|		КОГДА СправочникРесурсныеСпецификации.ТипПроизводственногоПроцесса В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|			ТОГДА ЕСТЬNULL(ОсновныеВыходныеИзделия.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|		КОГДА СправочникРесурсныеСпецификации.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА СправочникРесурсныеСпецификации.НоменклатураВходящегоИзделия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК ОсновноеИзделие,
	|
	|	ЛОЖЬ КАК ОсновнаяСпецификация
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК СправочникРесурсныеСпецификации
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ОсновныеВыходныеИзделия
	|		ПО СправочникРесурсныеСпецификации.ТипПроизводственногоПроцесса В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|			И (ОсновныеВыходныеИзделия.Ссылка = СправочникРесурсныеСпецификации.Ссылка)
	|			И (ОсновныеВыходныеИзделия.НомерСтроки = 1)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьУсловноеОформлениеСпискаРесурсныхСпецификаций(УсловноеОформление, ИмяВладельцаПолейОтбора = "") Экспорт

	ВладелецПолейОтбора = ?(ИмяВладельцаПолейОтбора = "", "", ИмяВладельцаПолейОтбора + ".");
	
	// Оформление спецификации в разработке
	Элемент = УсловноеОформление.Элементы.Добавить();

	Если ИмяВладельцаПолейОтбора <> "" Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВладельцаПолейОтбора);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВладелецПолейОтбора + "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.ВРазработке;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Оформление закрытой спецификации
	Элемент = УсловноеОформление.Элементы.Добавить();

	Если ИмяВладельцаПолейОтбора <> "" Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВладельцаПолейОтбора);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВладелецПолейОтбора + "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.Закрыта;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	// Оформление основной спецификации
	Элемент = УсловноеОформление.Элементы.Добавить();

	Если ИмяВладельцаПолейОтбора <> "" Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВладельцаПолейОтбора);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВладелецПолейОтбора + "ОсновнаяСпецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
КонецПроцедуры

Функция ТекстЗапросаДинамическогоСпискаДоступныхСпецификаций() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.Ссылка КАК Спецификация
	|ПОМЕСТИТЬ СпецификацииПоНоменклатуре
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Номенклатура = &Номенклатура
	|	И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.НоменклатураВходящегоИзделия = &Номенклатура
	|	И ТабличнаяЧасть.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РесурсныеСпецификации.Ссылка КАК Спецификация,
	|
	|	РесурсныеСпецификации.НачалоДействия КАК НачалоДействия,
	|	РесурсныеСпецификации.КонецДействия КАК КонецДействия,
	|
	|	РесурсныеСпецификации.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОсновныеСпецификации.Спецификация, ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОсновнаяСпецификация,
	|
	|	ОсновныеСпецификации.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
	|	 ПО РесурсныеСпецификации.Ссылка = ОсновныеСпецификации.Спецификация
	|		И (ОсновныеСпецификации.Номенклатура   = &Номенклатура)
	|		И (ОсновныеСпецификации.Характеристика = &Характеристика)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииПоНоменклатуре КАК СпецификацииПоНоменклатуре
	|	 ПО РесурсныеСпецификации.Ссылка = СпецификацииПоНоменклатуре.Спецификация
	|	
	|ГДЕ
	|	НЕ СпецификацииПоНоменклатуре.Спецификация ЕСТЬ NULL
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьУсловноеОформлениеСпискаДоступныхСпецификаций(УсловноеОформление) Экспорт

	// Оформление спецификации в разработке
	Элемент = УсловноеОформление.Элементы.Добавить();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.ВРазработке;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Оформление закрытой спецификации
	Элемент = УсловноеОформление.Элементы.Добавить();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.Закрыта;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	// Оформление основной спецификации
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОсновнаяСпецификация");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	// Подразделение спецификаций.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Подразделение");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Подразделение");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<для любого подразделения>'"));
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаДанныеОсновногоИзделияСпецификации()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&Спецификация КАК Спецификация,
	|
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВыходныеИзделия.Характеристика
	|		ИНАЧЕ &Характеристика
	|	КОНЕЦ                        КАК Характеристика,
	|
	|	ВыходныеИзделия.Количество         КАК Количество,
	|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	ВыходныеИзделия.Количество         КАК КоличествоНаЕдиницуПартииВыпуска,
	|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
	|
	|	ВЫБОР
	|		КОГДА &УчитыватьВероятностьБрака И ВыходныеИзделия.ПроцентБрака <> 0
	|			ТОГДА 1 - (ВыходныеИзделия.ПроцентБрака / 100)
	|		ИНАЧЕ 0
	|	КОНЕЦ                              КАК ВероятностьБрака,
	|
	|	ВыходныеИзделия.Упаковка                       КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК КоэффициентУпаковки,
	|
	|	ВыходныеИзделия.Этап КАК Этап,
	|
	|	ВыходныеИзделия.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВыходныеИзделия.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЕСТЬNULL(ВыходныеИзделия.Номенклатура.ГруппаАналитическогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)) КАК ГруппаАналитическогоУчета,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                         КАК ХарактеристикиИспользуются,
	|	ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|
	|	ВыходныеИзделия.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,                                                             
	|	ЕСТЬNULL(ВыходныеИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК ЕдиницаИзмеренияШтучная,
	|
	|	НЕ ОсновноеВыходноеИзделие.Номенклатура ЕСТЬ NULL КАК ЭтоОсновноеИзделие
	|
	|//ПОМЕСТИТЬ
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ОсновноеВыходноеИзделие
	|		ПО ОсновноеВыходноеИзделие.Ссылка = &Спецификация
	|			И ОсновноеВыходноеИзделие.НомерСтроки = 1
	|			И ВыходныеИзделия.Номенклатура = ОсновноеВыходноеИзделие.Номенклатура
	|			И ВыходныеИзделия.Характеристика = ОсновноеВыходноеИзделие.Характеристика
	|ГДЕ
	|	ВыходныеИзделия.Ссылка = &Спецификация
	|	И ВЫБОР
	|			КОГДА &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|						И НЕ ОсновноеВыходноеИзделие.Номенклатура ЕСТЬ NULL 
	|					ИЛИ ВыходныеИзделия.Номенклатура = &Номенклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|						И НЕ ОсновноеВыходноеИзделие.Номенклатура ЕСТЬ NULL 
	|					ИЛИ ВыходныеИзделия.Характеристика = &Характеристика
	|					ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Спецификация КАК Спецификация,
	|
	|	ВходныеИзделия.НоменклатураВходящегоИзделия КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВходныеИзделия.ХарактеристикаВходящегоИзделия
	|		ИНАЧЕ &Характеристика
	|	КОНЕЦ                                        КАК Характеристика,
	|
	|	ВходныеИзделия.КоличествоВходящегоИзделия         КАК Количество,
	|	ВходныеИзделия.КоличествоУпаковокВходящегоИзделия КАК КоличествоУпаковок,
	|
	|	ВходныеИзделия.КоличествоВходящегоИзделия         КАК КоличествоНаЕдиницуПартииВыпуска,
	|	ВходныеИзделия.КоличествоУпаковокВходящегоИзделия КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
	|
	|	0 КАК ВероятностьБрака,
	|
	|	ВходныеИзделия.УпаковкаВходящегоИзделия                         КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)                  КАК КоэффициентУпаковки,
	|
	|	ЕСТЬNULL(СсылкаНаПервыйЭтап.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)) КАК Этап,
	|
	|	ВходныеИзделия.НоменклатураВходящегоИзделия.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВходныеИзделия.НоменклатураВходящегоИзделия.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЕСТЬNULL(ВходныеИзделия.НоменклатураВходящегоИзделия.ГруппаАналитическогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)) КАК ГруппаАналитическогоУчета,
	|	ВЫБОР
	|		КОГДА ВходныеИзделия.НоменклатураВходящегоИзделия.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                        КАК ХарактеристикиИспользуются,
	|	ВходныеИзделия.ХарактеристикаВходящегоИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|                                                                                                                                   
	|	ВходныеИзделия.НоменклатураВходящегоИзделия.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВходныеИзделия.НоменклатураВходящегоИзделия.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК ЕдиницаИзмеренияШтучная,
	|
	|	ИСТИНА КАК ЭтоОсновноеИзделие
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ВходныеИзделия
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Т.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.ЭтапыПроизводства КАК Т
	|		ГДЕ
	|			Т.Владелец = &Спецификация
	|			И НЕ Т.ПометкаУдаления
	|			И Т.НомерЭтапа = 1) КАК СсылкаНаПервыйЭтап
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	ВходныеИзделия.Ссылка = &Спецификация
	|	И ВЫБОР
	|			КОГДА &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ИЛИ ВходныеИзделия.НоменклатураВходящегоИзделия = &Номенклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					ИЛИ ВходныеИзделия.ХарактеристикаВходящегоИзделия = &Характеристика
	|					ИЛИ ВходныеИзделия.ХарактеристикаВходящегоИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВходныеИзделия.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)";
		
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВыходныеИзделия.Упаковка",
		"ВыходныеИзделия.Номенклатура");
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		ТекстЗапросаКоэффициентУпаковки);
		
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВходныеИзделия.УпаковкаВходящегоИзделия",
		"ВходныеИзделия.НоменклатураВходящегоИзделия");
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		ТекстЗапросаКоэффициентУпаковки);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстПоляВыражениеХарактеристикаОсновногоИзделия(ИмяТаблицы = "ТабличнаяЧасть", ИсточникНоменклатура = "Номенклатура", ИсточникХарактеристика = "Характеристика")

	ТекстПоля = "ВЫБОР
	|		КОГДА ТабличнаяЧасть.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Характеристика
	|		КОГДА ТабличнаяЧасть.Номенклатура = &Номенклатура
	|			ТОГДА &Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ";
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Номенклатура", ИмяТаблицы + "." + ИсточникНоменклатура);
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Характеристика", ИмяТаблицы + "." + ИсточникХарактеристика);
	
	Возврат ТекстПоля;
	
КонецФункции

	
Функция ТекстЗапросаМатериалыСпецификацийВключаяСоставНаборов(ИмяТаблицы) Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	РесурсныеСпецификацииМатериалыИУслуги.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ВариантыКомплектацииНоменклатуры.Ссылка) КАК ВариантКомплектацииНоменклатуры
	|ПОМЕСТИТЬ ВТОсновныеКомплектацииНоменклатуры
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаСпецификаций КАК ТаблицаСпецификаций
	|		ПО (ТаблицаСпецификаций.Спецификация = РесурсныеСпецификацииМатериалыИУслуги.Ссылка)
	|			И (РесурсныеСпецификацииМатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО РесурсныеСпецификацииМатериалыИУслуги.Номенклатура = ВариантыКомплектацииНоменклатуры.Владелец
	|			И РесурсныеСпецификацииМатериалыИУслуги.Характеристика = ВариантыКомплектацииНоменклатуры.Характеристика
	|			И (НЕ ВариантыКомплектацииНоменклатуры.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	РесурсныеСпецификацииМатериалыИУслуги.Номенклатура,
	|	РесурсныеСпецификацииМатериалыИУслуги.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновныеКомплектацииНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТОсновныеКомплектацииНоменклатуры.Характеристика КАК Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Комплектующая,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК ХарактеристикаКомплектующей,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка КАК Упаковка,
	|	ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВариантыКомплектацииНоменклатурыТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТСоставНаборов
	|ИЗ
	|	ВТОсновныеКомплектацииНоменклатуры КАК ВТОсновныеКомплектацииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ПО ВТОсновныеКомплектацииНоменклатуры.ВариантКомплектацииНоменклатуры = ВариантыКомплектацииНоменклатурыТовары.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииМатериалыИУслуги.Ссылка КАК Ссылка,
	|	РесурсныеСпецификацииМатериалыИУслуги.Этап КАК Этап,
	|	ЕСТЬNULL(ВТСоставНаборов.Комплектующая, РесурсныеСпецификацииМатериалыИУслуги.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТСоставНаборов.Характеристика, РесурсныеСпецификацииМатериалыИУслуги.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВТСоставНаборов.Упаковка, РесурсныеСпецификацииМатериалыИУслуги.Упаковка) КАК Упаковка,
	|	РесурсныеСпецификацииМатериалыИУслуги.КоличествоУпаковок * ЕСТЬNULL(ВТСоставНаборов.КоличествоУпаковок, 1) КАК КоличествоУпаковок,
	|	РесурсныеСпецификацииМатериалыИУслуги.Количество * ЕСТЬNULL(ВТСоставНаборов.Количество, 1) КАК Количество
	|ПОМЕСТИТЬ МатериалыИУслугиСпецификаций
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаСпецификаций КАК ТаблицаСпецификаций
	|		ПО (ТаблицаСпецификаций.Спецификация = РесурсныеСпецификацииМатериалыИУслуги.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоставНаборов КАК ВТСоставНаборов
	|		ПО РесурсныеСпецификацииМатериалыИУслуги.Номенклатура = ВТСоставНаборов.Номенклатура
	|			И РесурсныеСпецификацииМатериалыИУслуги.Характеристика = ВТСоставНаборов.Характеристика
	|			И (РесурсныеСпецификацииМатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОсновныеКомплектацииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСоставНаборов";
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ТаблицаСпецификаций", ИмяТаблицы);
	
КонецФункции
	
#КонецОбласти

#Область Прочее

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Получение данных спецификации'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СтруктураДанныхОсновногоИзделияСпецификации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Результат.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	Результат.Вставить("Количество", 0);
	Результат.Вставить("КоличествоУпаковок", 0);
	
	Результат.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("КоэффициентУпаковки", 1);
	
	Результат.Вставить("ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("ЕдиницаИзмеренияШтучная", Ложь);
	
	Результат.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	Результат.Вставить("ГруппаАналитическогоУчета", ПредопределенноеЗначение("Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка"));
	
	Результат.Вставить("ХарактеристикиИспользуются", Ложь);
	
	Результат.Вставить("Спецификация", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	
	Результат.Вставить("ВероятностьБрака", 0);
	
	Результат.Вставить("ЭтоОсновноеИзделие", Ложь);
	
	// служебные реквизиты
	Результат.Вставить("КоличествоНаЕдиницуПартииВыпуска", 0);
	Результат.Вставить("КоличествоУпаковокНаЕдиницуПартииВыпуска", 0);
	
	// реквизиты для совместимости
	Результат.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Результат.Вставить("НачалоПроизводства", '00010101');
	Результат.Вставить("ДнейОтПотребности", 0);
	Результат.Вставить("ВидНоменклатуры");
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьНеиспользуемыеДанныеПоТипуПроизводства(Объект) Экспорт
	
	ЭтоСборка   = (Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	ЭтоРемонт   = (Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	ЭтоРазборка = (Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	
	Если Объект.Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
	
		Если ЭтоСборка И НЕ Объект.ИспользоватьНесколькоВыходныхИзделий
			ИЛИ ЭтоРемонт Тогда
			Для Индекс = -Объект.ВыходныеИзделия.Количество() + 1 По -1 Цикл
				Объект.ВыходныеИзделия.Удалить(-Индекс);
			КонецЦикла;
		КонецЕсли;
		
		Если ЭтоСборка Тогда
			Объект.НоменклатураВходящегоИзделия = Неопределено;
			Объект.ХарактеристикаВходящегоИзделия = Неопределено;
			Объект.УпаковкаВходящегоИзделия = Неопределено;
			Объект.КоличествоУпаковокВходящегоИзделия = Неопределено;
			Объект.КоличествоВходящегоИзделия = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоРемонт ИЛИ ЭтоРазборка Тогда
		Объект.ИспользоватьНесколькоВыходныхИзделий = Ложь;
	КонецЕсли;
	
	Если ЭтоРемонт Тогда
		Объект.ОграниченСрокПролеживанияВыходныхИзделий = Ложь;
		Объект.МаксимальныйСрокПролеживанияВыходныхИзделий = 0;
	КонецЕсли;
	
	Если ЭтоСборка И НЕ Объект.ИспользоватьНесколькоВыходныхИзделий
		ИЛИ ЭтоРемонт
		ИЛИ Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости Тогда
		Для каждого Строка Из Объект.ВыходныеИзделия Цикл
			Строка.ДоляСтоимости = 0;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Строка Из Объект.ВыходныеИзделия Цикл
		Если ЭтоСборка ИЛИ ЭтоРемонт Тогда
			Строка.ОбработатьПоСпецификации = Ложь;
			Строка.Спецификация = Неопределено;
		КонецЕсли;
		Если ЭтоРемонт Тогда
			Строка.ПроцентБрака = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Объект.ВозвратныеОтходы Цикл
		Если ЭтоСборка ИЛИ ЭтоРемонт Тогда
			Строка.ОбработатьПоСпецификации = Ложь;
			Строка.Спецификация = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Объект.МатериалыИУслуги Цикл
		Если Строка.СпособПолученияМатериала <> Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации Тогда
			Строка.ПланироватьНеРанее = Неопределено;
		КонецЕсли;
		Если Строка.СпособПолученияМатериала <> Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе
			ИЛИ НЕ ЭтоРемонт Тогда
			Строка.СпецификацияРемонта = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СпецификацииСНечеткойХарактеристикойИзделий(Спецификации) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыходныеИзделия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка В(&Ссылки)
		|	И ВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик В (
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|	И ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходныеИзделия.Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК ВходныеИзделия
		|ГДЕ
		|	ВходныеИзделия.Ссылка В(&Ссылки)
		|	И ВходныеИзделия.НоменклатураВходящегоИзделия.ИспользованиеХарактеристик В (
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|	И ВходныеИзделия.ХарактеристикаВходящегоИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ВходныеИзделия.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)");
	
	Запрос.УстановитьПараметр("Ссылки", Спецификации);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.РесурсныеСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.4.9.48";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("eb4ca6a7-ea7a-4c8e-8081-8987bf798f4a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.РесурсныеСпецификации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'корректировка обеспечения для тары'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьУправлениеПроизводством2_2.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.РесурсныеСпецификации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.РесурсныеСпецификации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.РесурсныеСпецификации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ (
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТабличнаяЧасть
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ИспользоватьУправлениеПроизводством2_2 КАК ИспользоватьУправлениеПроизводством2_2
	|		ПО (ИспользоватьУправлениеПроизводством2_2.Значение = ИСТИНА)
	|ГДЕ
	|	ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И ТабличнаяЧасть.СпособПолученияМатериала <> ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.Трудозатраты КАК Таблица
	|ГДЕ
	|	Таблица.КлючСвязи = &ПустойКлючСвязи
	|
	|) КАК Таблица
	|");
	
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.РесурсныеСпецификации";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТСсылкиДляОбработки";
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ИспользоватьУправлениеПроизводством2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	ПустойУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Запрос = Новый Запрос("
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСсылкиДляОбработки КАК ТаблицаСсылок
	|		ПО ТабличнаяЧасть.Ссылка = ТаблицаСсылок.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ИспользоватьУправлениеПроизводством2_2 КАК ИспользоватьУправлениеПроизводством2_2
	|		ПО (ИспользоватьУправлениеПроизводством2_2.Значение = ИСТИНА) 
	|
	|ГДЕ
	|	ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И ТабличнаяЧасть.СпособПолученияМатериала <> ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать) 
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка              КАК Ссылка,
	|	ТаблицаСсылок.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТСсылкиДляОбработки КАК ТаблицаСсылок");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	МногооборотнаяТара = РезультатыЗапроса[0].Выгрузить();
	МногооборотнаяТара.Индексы.Добавить("Номенклатура");
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить(ПолноеИмяОбъекта).УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если Объект <> Неопределено Тогда
				
				ОбъектИзменен = Ложь;
				
				Если ИспользоватьУправлениеПроизводством2_2 Тогда
					Для каждого Строка Из Объект.МатериалыИУслуги Цикл
						Если МногооборотнаяТара.Найти(Строка.Номенклатура, "Номенклатура") <> Неопределено Тогда
							Строка.СпособПолученияМатериала       = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
							Строка.ИсточникПолученияПолуфабриката = Неопределено;
							ОбъектИзменен = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для каждого Строка Из Объект.Трудозатраты Цикл
					Если Строка.КлючСвязи = ПустойУИД Тогда
						Строка.КлючСвязи = Новый УникальныйИдентификатор;
						ОбъектИзменен    = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
