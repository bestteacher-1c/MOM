

#Область ПрограммныйИнтерфейс

//++НЕ УТ

// Возвращает индекс новой строки с учетом наличия в коллекции элемента отчета "ИтогПоГруппе".
//
//	Параметры:
//		СтрокиДерева - ДанныеФормыКоллекцияЭлементовДерева - коллекция строк в которой необходимо определить индекс вставки новой строки.
//
//	Возвращаемое значение:
//		Число - индекс для вставки новой строки.
//
Функция ИндексНовойСтроки(СтрокиДерева) Экспорт
	
	Индекс = -1;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ВидЭлемента = ВидЭлемента("ИтогПоГруппе")
			И НЕ СтрокаДерева.ЭтоСвязанный Тогда
			Индекс = СтрокиДерева.Индекс(СтрокаДерева);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Индекс = -1 ИЛИ Индекс = 0 И СтрокиДерева.Количество() > 1 Тогда
		Индекс = СтрокиДерева.Количество();
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Процедура заполняет строку списка или дерева элементов отчета
// дополнительными реквизитами.
//
// Параметры:
//  Параметры - структура - поля структуры:
//		Источник - структура - источник заполнения 
//		СтрокаПриемник - ДанныеФормыСтрокаДерева - строка, которую заполняем
//		АдресЭлементаВХранилище - строка - адрес хранилища элемента
//		Поле - ДанныеФормыКоллекция - для поиска строки, если приемник - идентификатор строки.
//
Процедура ЗаполнитьСтрокуДерева(Параметры) Экспорт
	
	Источник = Параметры.Источник;
	СтрокаПриемник = Параметры.СтрокаПриемник;
	АдресЭлементаВХранилище = Параметры.АдресЭлементаВХранилище;
	ДополнительныеРеквизитыСтроки = Параметры.ДополнительныеРеквизитыСтроки;
	Поле = Параметры.Поле;
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Форма возвращает актуальные реквизиты
	Если ТипЗнч(СтрокаПриемник) = Тип("Число") Тогда
		СтрокаПриемник = Поле.НайтиПоИдентификатору(СтрокаПриемник);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, Источник);
	
	Если Не ЗначениеЗаполнено(АдресЭлементаВХранилище) Тогда
		ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
							Источник,
							ДополнительныеРеквизитыСтроки);
	Иначе
		// Но актуальные значения дополнительных реквизитов формируются на сервере
		// в ПередЗаписьюНаСервере, соответственно находятся в хранилище.
		ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
							АдресЭлементаВХранилище,
							ДополнительныеРеквизитыСтроки);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДопРеквизиты);
	Если ЗначениеЗаполнено(Источник.СвязанныйЭлемент) Тогда
		ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
							Источник.СвязанныйЭлемент,
							Параметры.ДополнительныеРеквизитыСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДопРеквизиты,,"КодСтрокиОтчета,Примечание");
		
	ИначеЕсли СтрокаПриемник.ВидЭлемента = ВидЭлемента("МонетарныйПоказатель") Тогда
		СтрокаПриемник.СчетПоказательИзмерение = СтрокаПриемник.СчетПланаСчетов;
		
	ИначеЕсли СтрокаПриемник.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель") Тогда
		СтрокаПриемник.СчетПоказательИзмерение = ДопРеквизиты.НемонетарныйПоказатель;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает структуру реквизитов для помещения во временное хранилище
//
// Возвращаемое значение:
//   Структура   - структура реквизитов.
//
Функция СтруктураЭлементаОтчета() Экспорт
	
	Результат = Новый Структура;
	// Стандартные реквизиты
	Результат.Вставить("Ссылка");
	Результат.Вставить("Владелец");
	Результат.Вставить("Наименование");
	Результат.Вставить("Код");
	
	//Реквизиты
	Результат.Вставить("ВидЭлемента");
	Результат.Вставить("НаименованиеДляПечати");
	Результат.Вставить("ОбратныйЗнак");
	Результат.Вставить("Комментарий");
	Результат.Вставить("ДополнительныйОтбор");
	Результат.Вставить("ЕстьНастройки");
	Результат.Вставить("ЗначениеАналитики");
	Результат.Вставить("СвязанныйЭлемент");
	
	// Табличные части
	Результат.Вставить("РеквизитыВидаЭлемента");
	Результат.Вставить("ОперандыФормулы");
	Результат.Вставить("ЭлементыТаблицы");
	Результат.Вставить("ДополнительныеПоля");
	
	Результат.Вставить("ЭлементыОформления");
	Результат.Вставить("ОформляемыеСтроки");
	Результат.Вставить("ОформляемыеКолонки");
	Результат.Вставить("РасшифровкаПолейОтбораЭО");
	Результат.Вставить("ИсточникиЗначений");
	
	Возврат Результат;
	
КонецФункции

//--НЕ УТ

// Возвращает родителя переданной строки в зависимости от типа.
//
//	Параметры:
//		СтрокаДерева - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - строка дерева элементов отчета.
//
//	Возвращаемое значение:
//		РодительСтроки - ДанныеФормыЭлементДерева, СтрокаДереваЗначений.
//
Функция РодительСтроки(СтрокаДерева) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева")
		ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыДерево") Тогда
		РодительСтроки = СтрокаДерева.ПолучитьРодителя();
	Иначе
		РодительСтроки = СтрокаДерева.Родитель;
	КонецЕсли;
	
	Возврат РодительСтроки;
	
КонецФункции

#КонецОбласти

//++НЕ УТ

#Область СлужебныеПроцедурыИФункции

Функция ВидЭлемента(ИмяВидаЭлемента)
	
	Возврат ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета."+ИмяВидаЭлемента);
	
КонецФункции

#КонецОбласти

//--НЕ УТ