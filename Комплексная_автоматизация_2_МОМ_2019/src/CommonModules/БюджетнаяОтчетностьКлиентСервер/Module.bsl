

#Область ПрограммныйИнтерфейс

// Создает хранилище со стандартной структурой.
// элемента бюджетного отчета на основании ссылки или строки
// вида бюджета.
//
// Параметры:
//  Элемент  - ДанныеФормыСтрокаДерева, СправочникСсылка.ЭлементыФинансовыхОтчетов - помещаемое значение
//  АдресХранилища - УникальныйИдентификатор - УИД формы вида бюджета.
//
// Возвращаемое значение:
//  Строка - Адрес в хранилище
//
Функция ПоместитьЭлементВХранилище(Элемент, АдресХранилища) Экспорт
	
	// Если формируем хранилище на основании строки - 
	// тогда формируем по элементу, если есть, иначе по самой строке.
	Если ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементДерева")
		ИЛИ ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементКоллекции")
		ИЛИ ТипЗнч(Элемент) = Тип("СтрокаДереваЗначений") Тогда
		
		Если ЗначениеЗаполнено(Элемент.ЭлементОтчета) Тогда
			
			Возврат ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(Элемент.ЭлементОтчета, АдресХранилища);
			
		Иначе
			
			СтруктураЭлемента = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
			ЗаполнитьЗначенияСвойств(СтруктураЭлемента, Элемент);
			
			Если СтруктураЭлемента.ВидЭлемента = ВидЭлемента("СтатьяБюджетов")
				ИЛИ СтруктураЭлемента.ВидЭлемента = ВидЭлемента("ВсеСтатьиБюджетов") Тогда
				
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_СтатьяБюджетов", Элемент.СтатьяПоказательТипИзмерения);
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ВыводимыеПоказатели", Элемент.ВыводимыеПоказатели);
				
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ПериодичностьСмещения", ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_НижняяГраницаДанных", "[Начало периода данных]");
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ВерхняяГраницаДанных", "[Конец периода данных]");
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_НачалоПериодаГруппировки", "[Период группировки]");
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_КонецПериодаГруппировки", "[Период группировки]");
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("ПоказательБюджетов")
				ИЛИ СтруктураЭлемента.ВидЭлемента = ВидЭлемента("ВсеПоказателиБюджетов") Тогда
				
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ПоказательБюджетов", Элемент.СтатьяПоказательТипИзмерения);
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ВыводимыеПоказатели", Элемент.ВыводимыеПоказатели);
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ТипЗначенияПоказателя", Элемент.ТипЗначенияПоказателя);
				
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ПериодичностьСмещения", ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_НижняяГраницаДанных", "[Начало периода данных]");
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ВерхняяГраницаДанных", "[Конец периода данных]");
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_НачалоПериодаГруппировки", "[Период группировки]");
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_КонецПериодаГруппировки", "[Период группировки]");
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("НефинансовыйПоказатель") Тогда
				
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_НефинансовыйПоказатель", Элемент.СтатьяПоказательТипИзмерения);
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ПериодичностьСмещения", ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("РедактируемоеЗначение") Тогда
				
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ТипРедактируемогоЗначения", "Число");
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе") Тогда
				
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ФормулаПоГруппе", ПредопределенноеЗначение("Перечисление.ВидыФормулБюджетирования.Сумма"));
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("Группа") Тогда
				
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ВыводитьЗаголовокЭлемента", Истина);
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель") Тогда
				
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_Формула", "");
				
			ИначеЕсли СтруктураЭлемента.ВидЭлемента = ВидЭлемента("Измерение") Тогда
				
				ТипИзмерения = ОпределитьТипИзмеренияПоТипуЗначения(Элемент.СтатьяПоказательТипИзмерения, Элемент);
				СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ТипИзмерения", 	ТипИзмерения);
				Если ТипИзмерения = ТипИзмерения("ИзмерениеРегистра") Тогда
					СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ИмяИзмерения", 	Элемент.СтатьяПоказательТипИзмерения);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Период") Тогда
					СтруктураЭлемента.Вставить("ДополнительныйРеквизит_Периодичность", 	Элемент.СтатьяПоказательТипИзмерения);
					СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ЗначениеПериода", 	Элемент.ЗначениеАналитики);
				ИначеЕсли ТипИзмерения = ТипИзмерения("ФиксированнаяАналитика") Тогда
					СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ВидАналитики", 	Элемент.СтатьяПоказательТипИзмерения);
					СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ЭтоАналитикаПрочее", Элемент.ЭтоАналитикаПрочее);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Аналитика") Тогда
					СтруктураЭлемента.Вставить("ДополнительныйРеквизит_ВидАналитики", 	Элемент.СтатьяПоказательТипИзмерения);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Сценарий") Тогда
					СтруктураЭлемента.Вставить("ДополнительныйРеквизит_Сценарий", 		Элемент.СтатьяПоказательТипИзмерения);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Валюта") Тогда
					СтруктураЭлемента.Вставить("ДополнительныйРеквизит_Валюта", 		Элемент.СтатьяПоказательТипИзмерения);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Организация") Тогда
					СтруктураЭлемента.Вставить("ДополнительныйРеквизит_Организация", 	Элемент.СтатьяПоказательТипИзмерения);
				ИначеЕсли ТипИзмерения = ТипИзмерения("Подразделение") Тогда
					СтруктураЭлемента.Вставить("ДополнительныйРеквизит_Подразделение", 	Элемент.СтатьяПоказательТипИзмерения);
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(СтруктураЭлемента, АдресХранилища);
			
		КонецЕсли;
	Иначе
		Возврат ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(Элемент, АдресХранилища);
	КонецЕсли;
	
КонецФункции

// Возвращает строковое представление пустого измерения (вида аналитики).
//
// Параметры:
//  ИзмерениеВидАналитики - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Вид аналитики.
//                        - Строка                                               - Измерение. Например "Организация" или "Подразделение".
//  ПредставлениеИзмеренияВидаАналитики - Строка - Строковое представление вида аналитики или измерения.
//                                                 Для измерения - представление в локализованном формате.
//                                                 Для вида аналитики - наименование вида аналитики.
//                                      - Неопределено - Значение по умолчанию. Представление определяется обращением к базе данных.
//  КэшПредставлений - Соответствие - Соответствие, где ключ - вид аналитики или строка - имя измерения. Значение - представление пустого значения, например <Прочие организации>.
//                   - Неопределено - Кэш представлений не задан.
//
// Возвращаемое значение:
//  Строка - представление пустого измерения (вида аналитики), например, "<прочие статьи ДДС>".
//
Функция ПредставлениеПрочейАналитикиБюджетирования(ИзмерениеВидАналитики, ПредставлениеИзмеренияВидаАналитики = Неопределено, КэшПредставлений = Неопределено) Экспорт
	ПредставлениеПустогоЗначения = Неопределено;
	
	Если ИзмерениеВидАналитики = Неопределено Тогда
		ПредставлениеПустогоЗначения = "";
		Возврат ПредставлениеПустогоЗначения;
	КонецЕсли;
	Если НЕ КэшПредставлений = Неопределено Тогда
		ПредставлениеПустогоЗначения = КэшПредставлений.Получить(ИзмерениеВидАналитики);
	КонецЕсли;
	
	Если ПредставлениеПустогоЗначения = Неопределено Тогда
		Если ПредставлениеИзмеренияВидаАналитики = Неопределено Тогда
			Если ТипЗнч(ИзмерениеВидАналитики) = Тип("Строка") Тогда
				Если ИзмерениеВидАналитики = "Организация" Тогда
					ПредставлениеИзмеренияВидаАналитики = НСтр("ru = 'Организации'");
				ИначеЕсли ИзмерениеВидАналитики = "Подразделение" Тогда
					ПредставлениеИзмеренияВидаАналитики = НСтр("ru = 'Подразделения'");
				ИначеЕсли ИзмерениеВидАналитики = "Сценарий" Тогда
					ПредставлениеИзмеренияВидаАналитики = НСтр("ru = 'Сценарии'");
				ИначеЕсли ИзмерениеВидАналитики = "Валюта" Тогда
					ПредставлениеИзмеренияВидаАналитики = НСтр("ru = 'Валюты'");
				Иначе
					ПредставлениеИзмеренияВидаАналитики = ИзмерениеВидАналитики;
				КонецЕсли;
			Иначе
				ПредставлениеИзмеренияВидаАналитики = БюджетнаяОтчетностьВызовСервера.ПредставлениеВидаАналитики(ИзмерениеВидАналитики);
			КонецЕсли;
		КонецЕсли;
		ПредставлениеПустогоЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<прочие %1>'"),
			ПредставлениеИзмеренияВидаАналитики);
			
		Если НЕ КэшПредставлений = Неопределено Тогда
			КэшПредставлений.Вставить(ИзмерениеВидАналитики, ПредставлениеПустогоЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеПустогоЗначения;
КонецФункции

// Возвращает строковое представление измерения.
//
// Параметры:
//  ИмяИзмерения - Строка - Предопределенное имя измерения.
//
// Возвращаемое значение:
//  Строка - Строковое представление измерения.
//
Функция ПредставлениеИзмеренияБюджетирования(ИмяИзмерения) Экспорт
	
	Если ИмяИзмерения = "Организация" Тогда
		ПредставлениеИзмерения = НСтр("ru = 'Организация'");
	ИначеЕсли ИмяИзмерения = "Подразделение" Тогда
		ПредставлениеИзмерения = НСтр("ru = 'Подразделение'");
	ИначеЕсли ИмяИзмерения = "Сценарий" Тогда
		ПредставлениеИзмерения = НСтр("ru = 'Сценарий'");
	ИначеЕсли ИмяИзмерения = "Валюта" Тогда
		ПредставлениеИзмерения = НСтр("ru = 'Валюта'");
	ИначеЕсли ИмяИзмерения = "Период" Тогда
		ПредставлениеИзмерения = НСтр("ru = 'Период'");
	ИначеЕсли ИмяИзмерения = "НомерПодПериода" Тогда
		ПредставлениеИзмерения = НСтр("ru = '№ подпериода'");
	Иначе
		ПредставлениеИзмерения = "";
	КонецЕсли;
	
	Возврат ПредставлениеИзмерения;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет тип измерения бюджетного отчета.
//
// Параметры:
//  Значение  - Произвольный - значение измерения бюджетного отчета
//                             на основании которого определяется тип измерения
//  ДополнительныеПараметры  - Структура - дополнительные сведения.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыИзмеренийБюджетныхОтчетов - тип измерения.
//
Функция ОпределитьТипИзмеренияПоТипуЗначения(Значение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.Периодичность") Тогда
		
		Возврат ТипИзмерения("Период");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов") Тогда
		
		Если ДополнительныеПараметры <> Неопределено
			И (ЗначениеЗаполнено(ДополнительныеПараметры.ЗначениеАналитики) 
			ИЛИ ДополнительныеПараметры.ЭтоАналитикаПрочее) Тогда
			Возврат ТипИзмерения("ФиксированнаяАналитика");
		Иначе
			Возврат ТипИзмерения("Аналитика");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Сценарии") Тогда
		
		Возврат ТипИзмерения("Сценарий");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		
		Возврат ТипИзмерения("Организация");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Возврат ТипИзмерения("Подразделение");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Валюты") Тогда
		
		Возврат ТипИзмерения("Валюта");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		
		Возврат ТипИзмерения("ЕдиницаИзмерения");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Возврат ТипИзмерения("ИзмерениеРегистра");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестный тип измерения бюджетного отчета'");
		
	КонецЕсли;
	
КонецФункции

// Процедура заполняет строку списка или дерева элементов отчета
// дополнительными реквизитами.
//
// Параметры:
//  Результат - структура - источник заполнения
//  СтрокаПриемник - ДанныеФормыСтрокаДерева - строка, которую заполняем
//  АдресЭлементаВХранилище - строка - адрес хранилища элемента
//  Поле - ДанныеФормыКоллекция - для поиска строки, если приемник - идентификатор строки.
//
Процедура ЗаполнитьСтрокуСпискаЭлементовОтчета(Знач Результат, Знач СтрокаПриемник, АдресЭлементаВХранилище = Неопределено, Поле = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Форма возвращает актуальные реквизиты
	Если ТипЗнч(СтрокаПриемник) = Тип("Число") Тогда
		СтрокаПриемник = Поле.НайтиПоИдентификатору(СтрокаПриемник);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, Результат);
	ДополнительныеРеквизитыСписка = "ВыводимыеПоказатели, ТипЗначенияПоказателя, ВыводитьЗаголовокЭлемента, ПривилегированныйРежим";
	Если Не ЗначениеЗаполнено(АдресЭлементаВХранилище) Тогда
		ДополнительныеРеквизиты = 
				ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
													Результат,
													ДополнительныеРеквизитыСписка);
	Иначе
		// Но актуальные значения дополнительных реквизитов формируются на сервере
		// в ПередЗаписьюНаСервере, соответственно находятся в хранилище.
		ДополнительныеРеквизиты = 
				ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
													АдресЭлементаВХранилище,
													ДополнительныеРеквизитыСписка);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДополнительныеРеквизиты);
	
КонецПроцедуры

// Функция возвращает представление смещения
//
// Параметры:
//  Период  - Число - количество периодов смещения
//  Периодичность  - ПеречислениеСсылка.Периодичность - периодичность смещения.
//
// Возвращаемое значение:
//   Строка   - представление смещения.
//
Функция ПредставлениеСмещения(Форма, ЗначениеПустое = Ложь) Экспорт
	
	ЗначениеПустое = Ложь;
	
	Периодичность = Форма.ПериодичностьСмещения;
	Период = Форма.ПериодСмещения;
	
	Если Период = 0 Тогда
		ПредставлениеПериод = "";
	Иначе
		Представление = НСтр("ru = 'Данные смещены на %1 назад'");
		ПредставлениеПериод = БюджетированиеКлиентСервер.ПериодЦифрамиПериодичностьПрописью(Период, Периодичность);
		ПредставлениеПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Представление, ПредставлениеПериод);
	КонецЕсли;
	
	ЕстьИзмененияГраниц = Ложь;
	Если Не СтрНайти(Форма.ИмяФормы, "НефинансовыйПоказатель") Тогда
		Если ЗначениеЗаполнено(Форма.НижняяГраницаДанных)
			И Форма.НижняяГраницаДанных <> "[Начало периода данных]" Тогда
			
			ЕстьИзмененияГраниц = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Форма.ВерхняяГраницаДанных)
			И Форма.ВерхняяГраницаДанных <> "[Конец периода данных]" Тогда
			
			ЕстьИзмененияГраниц = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Форма.НачалоПериодаГруппировки)
			И Форма.НачалоПериодаГруппировки <> "[Период группировки]" Тогда
			
			ЕстьИзмененияГраниц = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Форма.КонецПериодаГруппировки)
			И Форма.КонецПериодаГруппировки <> "[Период группировки]" Тогда
			
			ЕстьИзмененияГраниц = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеГраниц = "";
	Если ЕстьИзмененияГраниц Тогда
		ПредставлениеГраниц = НСтр("ru = 'Установлены границы периода'");
	КонецЕсли;
	
	Если ПредставлениеГраниц = ""
		И ПредставлениеПериод = "" Тогда
		
		Результат = НСтр("ru = 'Смещение и границы данных не заданы'");
		ЗначениеПустое = Истина;
		
	ИначеЕсли ПредставлениеПериод <> ""
		И ПредставлениеГраниц <> "" Тогда
		
		Результат = ПредставлениеПериод + ", " + НРег(ПредставлениеГраниц);
		
	ИначеЕсли ПредставлениеПериод <> "" Тогда
		
		Результат = ПредставлениеПериод;
		
	ИначеЕсли ПредставлениеГраниц <> "" Тогда
		
		Результат = ПредставлениеГраниц;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция возвращает цвет стиля
//
// Параметры:
//  ЛокальныйКэш  - Соответствие - локальный кэш для хранения соответствия имен
//                                 и цветов, что бы не обращаться к серверу в случае
//                                 клиентского вызова
//  ИмяЦвета  - Строка - имя цвета.
//
// Возвращаемое значение:
//   Цвет   - Цвет стиля по имени.
//
Функция ПолучитьЦветСтиля(ЛокальныйКэш, ИмяЦвета) Экспорт
	Перем Цвет;
	
	Если ЛокальныйКэш = Неопределено Тогда
		ЛокальныйКэш = Новый Структура;
	КонецЕсли;
	
	Если ЛокальныйКэш.Свойство(ИмяЦвета, Цвет) Тогда
		Возврат Цвет;
	КонецЕсли;
	
	Цвет = БюджетнаяОтчетностьВызовСервера.ПолучитьЦвет(ИмяЦвета);
	ЛокальныйКэш.Вставить(ИмяЦвета, Цвет);
	
	Возврат Цвет;
	
КонецФункции

// Функция добавляет операнды в таблицу операндов
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма конструктора формул
//  НовыеОперанды  - Массив - Строки дерева операндов
//  ТаблицаОперандов - ТаблицаЗначений - Таблица выбранных в формуле операндов
//  Уникальный - Булево - признак уникальности операндов (добавлять операнды если есть).
//
// Возвращаемое значение:
//   Массив   - массив добавленных строк таблицы операндов.
//
Функция ДобавитьОперандыФормулы(Форма, НовыеОперанды, ТаблицаОперандов, Уникальный) Экспорт
	
	МассивДобавленных = Новый Массив;
	Для Каждого Операнд Из НовыеОперанды Цикл
		
		Если Не ЭлементДоступенКакОперанд(Операнд) Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор = ИмяОперанда(Операнд.Наименование, Операнд, ТаблицаОперандов, Уникальный);
		
		НайденныйОперанд = Неопределено;
		Если ЕстьПоказатель(Идентификатор, Операнд, ТаблицаОперандов, НайденныйОперанд) Тогда
			МассивДобавленных.Добавить(НайденныйОперанд);
		Иначе
			НоваяСтрока = ТаблицаОперандов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Операнд);
			НоваяСтрока.Идентификатор = Идентификатор;
			НоваяСтрока.НаименованиеДляПечати = Операнд.Наименование;
			НоваяСтрока.СтатьяПоказательТипИзмерения = Операнд.ЭлементВидаОтчетности;
			НоваяСтрока.ПривилегированныйРежимКартинка = Не Число(НоваяСтрока.ПривилегированныйРежим);
			Если НоваяСтрока.ВидЭлемента <> ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель") Тогда
				НоваяСтрока.ВыводимыеПоказатели = ПредопределенноеЗначение("Перечисление.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма");
				Если НоваяСтрока.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов") Тогда
					НоваяСтрока.ТипЗначенияПоказателя = ПредопределенноеЗначение("Перечисление.ТипыЗначенийПоказателейБюджетногоОтчета.Оборот");
				КонецЕсли;
			КонецЕсли;
			МассивДобавленных.Добавить(НоваяСтрока);
		КонецЕсли;
		
		Если НЕ Форма.Модифицированность Тогда
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДобавленных;
	
КонецФункции

// Определяет возможно ли использования элемента финансового отчета в качестве операнда производного показателя
// Используется при добавлении операндов в производном показателе.
//
// Параметры:
//  ЭлементОтчета - ДанныеФормыЭлементДерева - проверяемый элемент отчета.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭлементДоступенКакОперанд(ЭлементОтчета) Экспорт
	ЭлементНеДоступен = 
			ЭлементОтчета = Неопределено
			Или ЭлементОтчета.ЭтоГруппа
			Или Не ЗначениеЗаполнено(ЭлементОтчета.ВидЭлемента)
			Или ЭлементОтчета.ВидЭлемента.Пустая()
			Или ЭлементОтчета.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов")
			Или ЭлементОтчета.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов");
	
	Возврат Не ЭлементНеДоступен;
КонецФункции
		
Функция ИмяОперанда(Наименование, Операнд, ТаблицаОперандов, Уникальный) Экспорт
	
	РазделительЯчеек = РазделительЯчеекСложнойТаблицы();
	
	ПодготовленноеНаименование = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(":+-*/=@№%()", Наименование, "");
	Массив = СтрРазделить(ПодготовленноеНаименование, " ", Ложь);
	
	Результат = "";
	Для Каждого Элемент Из Массив Цикл
		ЕстьРазделительЯчеек = (Прав(Элемент, 1) = РазделительЯчеек);
		Результат = Результат + ТРег(СокрЛП(Лев(Элемент, 7))) + ?(ЕстьРазделительЯчеек, РазделительЯчеек, "");
	КонецЦикла;
	
	Идентификатор = Результат;
	
	Если Уникальный Тогда
	
		Сч = 0;
		Пока ЕстьПоказатель(Идентификатор, Операнд, ТаблицаОперандов) Цикл
			Сч = Сч + 1;
			Идентификатор = Результат + "_" + Формат(Сч, "ЧГ=");
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(Операнд) = Тип("ДанныеФормыЭлементКоллекции") Тогда // Интерактивное добавление операнда
			ИдентификаторОперанда = Операнд.ПолучитьИдентификатор();
			Если ТаблицаОперандов.НайтиПоИдентификатору(ИдентификаторОперанда) = Неопределено Тогда
				СтруктураСравнения = Новый Структура("ВидЭлемента, ЭлементВидаОтчетности");
				ЗаполнитьЗначенияСвойств(СтруктураСравнения, Операнд);
				Идентификатор = БюджетнаяОтчетностьВызовСервера.УвеличитьНумераторИдентификатора(Идентификатор, СтруктураСравнения, ТаблицаОперандов);
			Иначе
				Идентификатор = БюджетнаяОтчетностьВызовСервера.УвеличитьНумераторИдентификатора(Идентификатор, ИдентификаторОперанда, ТаблицаОперандов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция РазделительЯчеекСложнойТаблицы() Экспорт
	Возврат ";";
КонецФункции

Функция ЕстьПоказатель(Идентификатор, Операнд, ТаблицаОперандов, НайденныйОперанд = Неопределено)
	
	Для Каждого СтрокаОперанда Из ТаблицаОперандов Цикл
		Если СтрокаОперанда.Идентификатор = Идентификатор Тогда
			
			НайденныйОперанд = СтрокаОперанда;
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВидЭлемента(ИмяВидаЭлемента) Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета."+ИмяВидаЭлемента);
	
КонецФункции

Функция ТипИзмерения(ИмяВидаЭлемента)
	
	Возврат ПредопределенноеЗначение("Перечисление.ТипыИзмеренийФинансовогоОтчета."+ИмяВидаЭлемента);
	
КонецФункции

Функция ЛеваяЧастьИмениСовпадает(Имя, ИскомаяСтрока) Экспорт
	
	Возврат Лев(Имя, СтрДлина(ИскомаяСтрока)) = ИскомаяСтрока;
	
КонецФункции

Функция ПараметрыОткрытияФормыНастройкиПериода(Форма, ДополнятьЭлементамиОтчета = Истина) Экспорт
	
	ЗаполняемыеПоля = "ПериодСмещения, ПериодичностьСмещения, НижняяГраницаДанных,
						|ВерхняяГраницаДанных, НачалоПериодаГруппировки, КонецПериодаГруппировки" + 
						?(ДополнятьЭлементамиОтчета, "
						|, АдресТаблицыЭлементов, АдресРедактируемогоЭлемента
						|, АдресЭлементовОтчета, ВариантРасположенияГраницыФактическихДанных", "");
	
	Параметры = Новый Структура(ЗаполняемыеПоля);
	ЗаполнитьЗначенияСвойств(Параметры, Форма);
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыОткрытияФормыНастройкиПериодичностиПланирования(ФормаОбъект) Экспорт
	
	ЗаполняемыеПоля = "Периодичность, СпособПланирования, ВариантРасположенияГраницыФактическихДанных,
						|КоличествоПериодовСкользящегоБюджета, СмещениеГраницыФакта, ПериодичностьГраницыФакта";
	
	Параметры = Новый Структура(ЗаполняемыеПоля);
	ЗаполнитьЗначенияСвойств(Параметры, ФормаОбъект);
	
	Возврат Параметры;
	
КонецФункции

Функция ИмяРедактируемогоЗначенияБюджета(МассивИменРедактируемыхЗначений) Экспорт
	
	ИмяПоУмолчанию = НСтр("ru = 'Редактируемое значение'");
	
	Если МассивИменРедактируемыхЗначений.Количество() Тогда
		
		МассивИзначальныхИмен = Новый Массив;
		Для Каждого ЭлементМассива Из МассивИменРедактируемыхЗначений Цикл
			Если СтрНайти(ЭлементМассива, ИмяПоУмолчанию) > 0 Тогда
				МассивИзначальныхИмен.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
		
		Если Не МассивИзначальныхИмен.Количество() Тогда
			
			Возврат ИмяПоУмолчанию;
			
		КонецЕсли;
		
		МаксимальноеИмя = МассивИзначальныхИмен[МассивИзначальныхИмен.ВГраница()];
		НачалоНомера = СтрНайти(МаксимальноеИмя, "#");
		Если НачалоНомера Тогда
			ИмяБезНомера = СокрЛП(Лев(МаксимальноеИмя, НачалоНомера - 1));
		Иначе
			ИмяБезНомера = СокрЛП(МаксимальноеИмя);
		КонецЕсли;
		
		Сч = 0;
		ИмяСНомером = ИмяБезНомера;
		Пока МассивИзначальныхИмен.Найти(ИмяСНомером) <> Неопределено Цикл
			Сч = Сч + 1;
			ИмяСНомером = ИмяБезНомера + " #" + Сч;
		КонецЦикла;
		
		Возврат ИмяСНомером;
		
	Иначе
		
		Возврат ИмяПоУмолчанию;
		
	КонецЕсли;
	
КонецФункции

Функция УпорядоченныеПериодичности() Экспорт
	
	Периодичности = Новый Массив;
	
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие"));
	Периодичности.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
	
	Возврат Периодичности;
	
КонецФункции

// Возвращает минимальную периодичность из переданных
//
// Параметры:
// 	Периодичности - Массив - Периодичности, из которых надо найти минимальную.
// 
// Возвращаемое значение:
// 	Результат - ПеречислениеСсылка.Периодичность - Найденная минимальная периодичность.
//
Функция МинимальнаяПериодичность(Периодичности) Экспорт
	
	Результат = Неопределено;
	
	УпорядоченныеПериодичности = УпорядоченныеПериодичности();
	Для каждого Периодичность Из УпорядоченныеПериодичности Цикл 
		Если ЗначениеЗаполнено(Периодичность) И Периодичности.Найти(Периодичность) <> Неопределено Тогда
			Результат = Периодичность;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ЭкземплярБюджета

Функция МаксимальныйНомерПоПорядку(Объект) Экспорт
	
	МаксимальныйНомер = 0;
	Для Каждого СтрокаОборотов Из Объект.ОборотыПоСтатьямБюджетов Цикл
		МаксимальныйНомер = Макс(СтрокаОборотов.НомерПоПорядку, МаксимальныйНомер);
	КонецЦикла;
	
	Возврат МаксимальныйНомер;
	
КонецФункции

Функция ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, ДанныеПоиска, Добавлять = Истина) Экспорт
	Перем ИдентификаторСтроки;
	
	Объект = ОбъектИПараметрыРасчета.Объект;
	ВалютаСценария = ОбъектИПараметрыРасчета.ВалютаСценария;
	
	СтруктураПоиска = Новый Структура("Аналитика1, Аналитика2, 
										|Аналитика3, Аналитика4, Аналитика5, Аналитика6");
	
	Если ДанныеПоиска.Свойство("СтатьяБюджетов") Тогда
		СтруктураПоиска.Вставить("СтатьяБюджетов");
		СтруктураПоиска.Вставить("Валюта");
		ИмяТабличнойЧасти = "АналитикаСтатейБюджетов";
	Иначе
		СтруктураПоиска.Вставить("РедактируемоеЗначение");
		Для Сч = 1 По 6 Цикл
			СтруктураПоиска.Вставить("ВидАналитики" + Сч);
		КонецЦикла;
		ИмяТабличнойЧасти = "АналитикаЗначений";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПоиска);
	
	Если ДанныеПоиска.Свойство("СтатьяБюджетов") Тогда
		Если ТипЗнч(ДанныеПоиска) = Тип("Структура") Тогда
			Если ДанныеПоиска.Свойство("Валюта") Тогда
				Если ДанныеПоиска.Валюта = Неопределено Тогда
					СтруктураПоиска.Удалить("Валюта");
				Иначе
					СтруктураПоиска.Валюта = ДанныеПоиска.Валюта;
				КонецЕсли;
			Иначе
				СтруктураПоиска.Валюта = ВалютаСценария;
			КонецЕсли;
		Иначе
			СтруктураПоиска.Валюта = ВалютаСценария;
		КонецЕсли;
	Иначе
		МаксимальныйНомерАналитики = 0;
		Для Сч = 1 По 6 Цикл
			Если ЗначениеЗаполнено(СтруктураПоиска["ВидАналитики" + Сч]) Тогда
				МаксимальныйНомерАналитики = Сч;
			КонецЕсли;
		КонецЦикла;
		СтруктураПоиска.Вставить("КоличествоИспользуемыхАналитик", МаксимальныйНомерАналитики);
	КонецЕсли;
	
	РезультатПоиска = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() = 0 Тогда
		Если Добавлять Тогда
			СтрокаАналитикиСтатейБюджетов = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАналитикиСтатейБюджетов, СтруктураПоиска);
			СтрокаАналитикиСтатейБюджетов.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			ИдентификаторСтроки = СтрокаАналитикиСтатейБюджетов.ИдентификаторСтроки;
		КонецЕсли;
	Иначе
		ИдентификаторСтроки = РезультатПоиска[0].ИдентификаторСтроки;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

Функция ПреобразоватьРасшифровку(ОбъектИПараметрыРасчета, Расшифровка, РежимПоиска = Ложь, ИмяПоказателя = Неопределено) Экспорт
	Перем СтатьяБюджетов, СтруктураРезультат;
	
	КэшПараметровСтатей = ОбъектИПараметрыРасчета.КэшПараметровСтатей;
	Объект = ОбъектИПараметрыРасчета.Объект;
	
	Если Расшифровка.Свойство("СтатьяБюджетов", СтатьяБюджетов)
		И ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		СтруктураРезультат = Новый Структура("СтатьяБюджетов", СтатьяБюджетов);
	ИначеЕсли Расшифровка.Свойство("РедактируемоеЗначение", СтатьяБюджетов)
		И ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		СтруктураРезультат = Новый Структура("РедактируемоеЗначение", СтатьяБюджетов);
	КонецЕсли;
	
	Если СтруктураРезультат = Неопределено Тогда
		Если Не РежимПоиска Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре вида бюджета: не определен тип ячейки значения'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИспользуемыеПериоды = Новый Массив;
	Для Каждого КлючИЗначение Из Расшифровка Цикл
		Если БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(КлючИЗначение.Ключ, "Период") Тогда
			Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность." + СтрЗаменить(КлючИЗначение.Ключ, "Период", ""));
			ИспользуемыеПериоды.Добавить(Периодичность);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуемыеПериоды.Количество() Тогда
		МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(ИспользуемыеПериоды);
		СтруктураРезультат.Вставить("ПериодПланирования", Расшифровка["Период" + МинимальнаяПериодичность]);
	Иначе
		СтруктураРезультат.Вставить("ПериодПланирования", Объект.НачалоПериода);
	КонецЕсли;
	
	ПоказательРасшифровки = Неопределено;
	Если Расшифровка.Свойство("ИмяПоказателя", ПоказательРасшифровки) Тогда
		ИмяПоказателя = ПоказательРасшифровки;
	Иначе
		ИмяПоказателя = "Сумма";
	КонецЕсли;
	
	Валюта = Неопределено;
	Если Расшифровка.Свойство("Валюта", Валюта) Тогда
		СтруктураРезультат.Вставить("Валюта", Валюта);
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ПустоеЗначениеАналитики = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
	Если СтруктураРезультат.Свойство("СтатьяБюджетов") И КэшПараметровСтатей[СтатьяБюджетов] <> Неопределено Тогда
		
		РеквизитыСтатьи = КэшПараметровСтатей[СтатьяБюджетов];
		
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			
			ВидАналитики = РеквизитыСтатьи["ВидАналитики" + Сч];
			ТипВидаАналитики = РеквизитыСтатьи["ВидАналитики" + Сч + "ТипЗначения"];
			ЗначениеАналитики = ПустоеЗначениеАналитики;
			Если ЗначениеЗаполнено(ВидАналитики) Тогда
				ЗначениеАналитики = Расшифровка.ЗначенияАналитик[ВидАналитики];
				Если ТипЗнч(ЗначениеАналитики) = Тип("Строка")
				   И Лев(ЗначениеАналитики, 8) = "<прочие " Тогда
					ЗначениеАналитики = ПустоеЗначениеАналитики;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТипВидаАналитики) Тогда
				ЗначениеАналитики = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(ЗначениеАналитики, ТипВидаАналитики);
			КонецЕсли;
			СтруктураРезультат.Вставить("Аналитика" + Сч, ЗначениеАналитики);
			
		КонецЦикла;
		
	Иначе
		
		СвойстваАналитикОтчета = БюджетнаяОтчетностьВызовСервера.СвойстваАналитикОтчета(ОбъектИПараметрыРасчета.ПараметрыВыводаВидаБюджета);
		ЗначенияТипов          = СвойстваАналитикОтчета.ЗначенияТипов;
		ВидыАналитикОтчета     = СвойстваАналитикОтчета.ВидыАналитикОтчета;
		
		Для СчетчикДополнения = 1 По МаксимальноеКоличествоАналитик Цикл
			ПустаяСсылкаНаАналитику = ПредопределенноеЗначение("ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка");
			СтруктураРезультат.Вставить("ВидАналитики" + СчетчикДополнения, ПустаяСсылкаНаАналитику);
			СтруктураРезультат.Вставить("Аналитика" + СчетчикДополнения, ПустоеЗначениеАналитики);
		КонецЦикла;
		
		
		// Получаем значения видов аналитики из расшифровки, упорядочиваем коллекцию по номеру аналитики в отчете в целом.
		НомераВидовАналитик = Новый СписокЗначений;
		АналитикаРасшифровкиПоНомеруВОтчете = Новый Соответствие;
		Для Каждого КлючИЗначение Из Расшифровка.ЗначенияАналитик Цикл
			ВидАналитики           = КлючИЗначение.Ключ;
			ИндексАналитикиВОтчете = ВидыАналитикОтчета.Найти(ВидАналитики);
			Если ИндексАналитикиВОтчете = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НомерАналитикиВОтчете = ИндексАналитикиВОтчете + 1;
			ЗначениеАналитики     = КлючИЗначение.Значение;
			НомераВидовАналитик.Добавить(НомерАналитикиВОтчете);
			АналитикаРасшифровкиПоНомеруВОтчете.Вставить(НомерАналитикиВОтчете,
				Новый Структура("ВидАналитики, ЗначениеАналитики", ВидАналитики, ЗначениеАналитики));
		КонецЦикла;
		НомераВидовАналитик.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		
		// Номера видов аналитики задаем в с 1 для данной статьи / показателя, но в порядке, соответствующему общему порядку
		// аналитики в отчете.
		Сч = 1;
		Для Каждого ЭлементСписка Из НомераВидовАналитик Цикл
			
			НомерАналитикиВОтчете = ЭлементСписка.Значение;
			ВидАналитики = АналитикаРасшифровкиПоНомеруВОтчете.Получить(НомерАналитикиВОтчете).ВидАналитики;
			ЗначениеАналитики = ПустоеЗначениеАналитики;
			Если ЗначениеЗаполнено(ВидАналитики) Тогда
				ЗначениеАналитики = АналитикаРасшифровкиПоНомеруВОтчете.Получить(НомерАналитикиВОтчете).ЗначениеАналитики;
				Если ТипЗнч(ЗначениеАналитики) = Тип("Строка")
				   И Лев(ЗначениеАналитики, 8) = "<прочие " Тогда
					ЗначениеАналитики = ПустоеЗначениеАналитики;
				КонецЕсли;
			КонецЕсли;
			
			ТипЗначенияАналитики = ЗначенияТипов[ВидАналитики].ТипЗначения;
			ЗначениеАналитики = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(ЗначениеАналитики, ТипЗначенияАналитики);
			СтруктураРезультат.Вставить("Аналитика" + Сч, ЗначениеАналитики);
			СтруктураРезультат.Вставить("ВидАналитики" + Сч, ВидАналитики);
			Сч = Сч + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция НайтиСтрокуОборотаПоРасшифровке(ОбъектИПараметрыРасчета, Расшифровка, ИмяПоказателя = Неопределено, 
											РасшифровкаАналитика = Неопределено, ТолькоНайти = Ложь) Экспорт
	
	Объект = ОбъектИПараметрыРасчета.Объект;
	РасшифровкаАналитика = ПреобразоватьРасшифровку(ОбъектИПараметрыРасчета, Расшифровка, , ИмяПоказателя);
	ПериодПланирования   = РасшифровкаАналитика.ПериодПланирования;
	
	ИдентификаторСтроки  = ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, РасшифровкаАналитика);
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	Отбор.Вставить("ПериодПланирования", ПериодПланирования);
	РезультатПоиска = Объект.ОборотыПоСтатьямБюджетов.НайтиСтроки(Отбор);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		
		Если ТолькоНайти Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтрокаОборот = Объект.ОборотыПоСтатьямБюджетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОборот, Отбор);
		Если ОбъектИПараметрыРасчета.Свойство("МаксимальныйНомерПоПорядку") Тогда
			МаксимальныйНомер = ОбъектИПараметрыРасчета.МаксимальныйНомерПоПорядку;
		Иначе
			МаксимальныйНомер = МаксимальныйНомерПоПорядку(Объект);
		КонецЕсли;
		СтрокаОборот.НомерПоПорядку = МаксимальныйНомер + 1;
		Если ОбъектИПараметрыРасчета.Свойство("МаксимальныйНомерПоПорядку") Тогда
			ОбъектИПараметрыРасчета.МаксимальныйНомерПоПорядку = СтрокаОборот.НомерПоПорядку;
		КонецЕсли;
		
	Иначе
		
		СтрокаОборот = РезультатПоиска[0];
		
	КонецЕсли;
	
	Возврат СтрокаОборот;
	
КонецФункции

Функция ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Расшифровка, ТекстЗначения, Примечание = Неопределено, РежимЗаполнения = Ложь) Экспорт
	Перем ИмяПоказателя, РасшифровкаАналитика;
	
	Объект = ОбъектИПараметрыРасчета.Объект;
	ВалютаСценария = ОбъектИПараметрыРасчета.ВалютаСценария;
	
	СтрокаОборот = НайтиСтрокуОборотаПоРасшифровке(ОбъектИПараметрыРасчета, Расшифровка, ИмяПоказателя, РасшифровкаАналитика);
	Если ТипЗнч(ТекстЗначения) = Тип("Число") Тогда
		Значение = ТекстЗначения;
	ИначеЕсли ИмяПоказателя = "Значение" Тогда
		Значение = ТекстЗначения;
	Иначе
		Попытка
			ЗначениеСтрокой = СтрЗаменить(ТекстЗначения, Символы.НПП, "");
			ЗначениеСтрокой = СтрЗаменить(ТекстЗначения, " ", "");
			Если Лев(ЗначениеСтрокой, 1) = "("
			   И Прав(ЗначениеСтрокой, 1) = ")" Тогда
				ЗначениеСтрокой = Сред(ЗначениеСтрокой, 2, СтрДлина(ЗначениеСтрокой) - 2);
				Значение = -Число(ЗначениеСтрокой);
			Иначе
				Значение = Число(ЗначениеСтрокой);
			КонецЕсли;
		Исключение
			Значение = 0;
		КонецПопытки;
	КонецЕсли;
	
	ПериодПланирования = РасшифровкаАналитика.ПериодПланирования;
	
	Если Примечание <> Неопределено Тогда
		СтрокаОборот.Примечание = Примечание;
	КонецЕсли;
	
	Если ИмяПоказателя = "Сумма" Тогда
		
		Валюта = Неопределено;
		Если РасшифровкаАналитика.Свойство("Валюта", Валюта) И Валюта <> ВалютаСценария Тогда
			
			СтрокаОборот.Сумма = БюджетнаяОтчетностьВызовСервера.ПересчитатьПоТаблицеКурсов(ОбъектИПараметрыРасчета, Значение, 
																						ПериодПланирования, Валюта, ВалютаСценария);
			СтрокаОборот.СуммаВВалюте = Значение;
			
		Иначе
			
			СтрокаОборот.Сумма = Значение;
			СтрокаОборот.СуммаВВалюте = Значение;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаОборот[ИмяПоказателя] = Значение;
		
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Сумма", СтрокаОборот.Сумма);
	Результат.Вставить("СуммаВВалюте", СтрокаОборот.СуммаВВалюте);
	Результат.Вставить("Количество", СтрокаОборот.Количество);
	Результат.Вставить("Значение", СтрокаОборот.Значение);
	Если НЕ Примечание = Неопределено Тогда
		Результат.Вставить("Примечание", Примечание);	
	КонецЕсли;
	
	Если Не РежимЗаполнения Тогда
		Если СтрокаОборот.Сумма = 0 И СтрокаОборот.СуммаВВалюте = 0 И 
			СтрокаОборот.Количество = 0 И Не ЗначениеЗаполнено(СтрокаОборот.Значение) И
			ПустаяСтрока(СтрокаОборот.Примечание) Тогда
			
			Объект.ОборотыПоСтатьямБюджетов.Удалить(СтрокаОборот);
			ИдентификаторСтроки = ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, РасшифровкаАналитика);
			
			Отбор = Новый Структура();
			Отбор.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
			РезультатПоиска = Объект.ОборотыПоСтатьямБюджетов.НайтиСтроки(Отбор);
			Если Не РезультатПоиска.Количество() Тогда
				НайденнаяСтрока = Объект.АналитикаСтатейБюджетов.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
				Если НайденнаяСтрока.Количество() Тогда
					Объект.АналитикаСтатейБюджетов.Удалить(НайденнаяСтрока[0]);
				КонецЕсли;
				НайденнаяСтрока = Объект.АналитикаЗначений.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
				Если НайденнаяСтрока.Количество() Тогда
					Объект.АналитикаЗначений.Удалить(НайденнаяСтрока[0]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураОбъектаДляРасчетаЯчейки() Экспорт
	
	Возврат Новый Структура("Объект, ВалютаСценария, КэшПараметровСтатей, 
							|ТребоватьУказанияКурсовДляКаждогоПериода, 
							|АдресТаблицыКурсов, ПараметрыВыводаВидаБюджета, АдресДанныхРасшифровки");
	
КонецФункции

Функция СтруктураПоОбъектуЭкземпляраБюджета(Форма) Экспорт
	
	ОбъектИПараметрыРасчета = СтруктураОбъектаДляРасчетаЯчейки();
	ОбъектИПараметрыРасчета.Объект 									= Форма.Объект;
	ОбъектИПараметрыРасчета.ВалютаСценария 							= Форма.ВалютаСценария;
	ОбъектИПараметрыРасчета.КэшПараметровСтатей 					= Форма.КэшПараметровСтатей;
	ОбъектИПараметрыРасчета.ТребоватьУказанияКурсовДляКаждогоПериода = Форма.ТребоватьУказанияКурсовДляКаждогоПериода;
	ОбъектИПараметрыРасчета.АдресТаблицыКурсов 						= Форма.АдресТаблицыКурсов;
	ОбъектИПараметрыРасчета.ПараметрыВыводаВидаБюджета				= Форма.ПараметрыВыводаВидаБюджета;
	ОбъектИПараметрыРасчета.АдресДанныхРасшифровки					= Форма.АдресДанныхРасшифровки;
	
	Возврат ОбъектИПараметрыРасчета;
	
КонецФункции

Функция ПараметрыПериода(Объект, ПараметрыДанных = Неопределено) Экспорт
	
	Если ПараметрыДанных = Неопределено Тогда
		ПараметрыДанных = Новый Структура;
	КонецЕсли;
	
	ПараметрыДанных.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыДанных.Вставить("КонецПериода", Объект.ОкончаниеПериода);
	ПараметрыДанных.Вставить("ГраницаФактДанных", Объект.ГраницаФактДанных);
	
	Возврат ПараметрыДанных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

