
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	Движения = Объект.Движения;
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	//++ Локализация
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(Объект, ДополнительныеСвойства, Движения, Отказ);
	//++ НЕ УТ
	СформироватьПроводкиПереходаНаНовыйМеханизмРасчетаРезервов(Объект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТ
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	//++ Локализация
	//++ НЕ УТ
	УдалитьПроводкиПереходаНаНовыйМеханизмРасчетаРезервов(Объект, Отказ);
	//-- НЕ УТ
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект.НачислениеСписаниеРезервовПоСомнительнымДолгам - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт

	//++ Локализация
	//-- Локализация

КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРегУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	//++ Локализация
	
	ТекстыОтражения = Новый Массив;
	
	#Область ТекстНачислениеРезерва
	
	ТекстЗапроса =
	"ВЫБРАТЬ // Начисление резерва (Дт 91.02 :: Кт 63)
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	
	|	РезервыПоСомнительнымДолгам.СуммаРегл КАК Сумма,
	|	РезервыПоСомнительнымДолгам.СуммаУпр КАК СуммаУУ,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам) КАК АналитикаУчетаДт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК МестоУчетаДт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК ПодразделениеДт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам) КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	РезервыПоСомнительнымДолгам.СуммаРегл - РезервыПоСомнительнымДолгам.ПостояннаяРазница - РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаНУДт,
	|	РезервыПоСомнительнымДолгам.ПостояннаяРазница КАК СуммаПРДт,
	|	РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПустаяСсылка) КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	РезервыПоСомнительнымДолгам.Валюта КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК ПодразделениеКт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам) КАК СчетКт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.Контрагент КАК СубконтоКт1,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РезервыПоСомнительнымДолгам.ОбъектРасчетов) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|			ТОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.Договор
	|	КОНЕЦ КАК СубконтоКт2,
	|	РезервыПоСомнительнымДолгам.РасчетныйДокумент КАК СубконтоКт3,
	|	
	|	РезервыПоСомнительнымДолгам.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	РезервыПоСомнительнымДолгам.СуммаРегл - РезервыПоСомнительнымДолгам.ПостояннаяРазница - РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаНУКт,
	|	РезервыПоСомнительнымДолгам.ПостояннаяРазница КАК СуммаПРКт,
	|	РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаВРКт,
	|	
	|	""Начисление резерва по сомнительным долгам"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Операция
	|		ПО ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыПоСомнительнымДолгам КАК РезервыПоСомнительнымДолгам
	|		ПО РезервыПоСомнительнымДолгам.Регистратор = Операция.Ссылка
	|		И РезервыПоСомнительнымДолгам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеРезервовПоСомнительнымДолгам)";
	
	ТекстыОтражения.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ТекстВосстановлениеРезерва
	
	ТекстЗапроса =
	"ВЫБРАТЬ // Восстановление резерва (Дт 63 :: Кт 91.01)
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	
	|	РезервыПоСомнительнымДолгам.СуммаРегл КАК Сумма,
	|	РезервыПоСомнительнымДолгам.СуммаУпр КАК СуммаУУ,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПустаяСсылка) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	
	|	РезервыПоСомнительнымДолгам.Валюта КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК ПодразделениеДт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам) КАК СчетДт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.Контрагент КАК СубконтоДт1,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РезервыПоСомнительнымДолгам.ОбъектРасчетов) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|			ТОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.Договор
	|	КОНЕЦ КАК СубконтоДт2,
	|	РезервыПоСомнительнымДолгам.РасчетныйДокумент КАК СубконтоДт3,
	|	
	|	РезервыПоСомнительнымДолгам.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	РезервыПоСомнительнымДолгам.СуммаРегл - РезервыПоСомнительнымДолгам.ПостояннаяРазница - РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаНУДт,
	|	РезервыПоСомнительнымДолгам.ПостояннаяРазница КАК СуммаПРДт,
	|	РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Доходы) КАК ВидСчетаКт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам) КАК АналитикаУчетаКт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК МестоУчетаКт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК ПодразделениеКт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам) КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	РезервыПоСомнительнымДолгам.СуммаРегл - РезервыПоСомнительнымДолгам.ПостояннаяРазница - РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаНУКт,
	|	РезервыПоСомнительнымДолгам.ПостояннаяРазница КАК СуммаПРКт,
	|	РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаВРКт,
	|	
	|	""Восстановление резерва по сомнительным долгам"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Операция
	|		ПО ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыПоСомнительнымДолгам КАК РезервыПоСомнительнымДолгам
	|		ПО РезервыПоСомнительнымДолгам.Регистратор = Операция.Ссылка
	|		И РезервыПоСомнительнымДолгам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВосстановлениеРезервовПоСомнительнымДолгам)";
	
	ТекстыОтражения.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ПрисоединениеРезерва
	
	ТекстЗапроса =
	"ВЫБРАТЬ // Присоединение резерва к доходам (Дт 63 :: Кт 91.01)
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	
	|	РезервыПоСомнительнымДолгам.СуммаРегл КАК Сумма,
	|	РезервыПоСомнительнымДолгам.СуммаУпр КАК СуммаУУ,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПустаяСсылка) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	
	|	РезервыПоСомнительнымДолгам.Валюта КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК ПодразделениеДт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам) КАК СчетДт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.Контрагент КАК СубконтоДт1,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РезервыПоСомнительнымДолгам.ОбъектРасчетов) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|			ТОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.Договор
	|	КОНЕЦ КАК СубконтоДт2,
	|	РезервыПоСомнительнымДолгам.РасчетныйДокумент КАК СубконтоДт3,
	|	
	|	РезервыПоСомнительнымДолгам.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	РезервыПоСомнительнымДолгам.ПостояннаяРазница КАК СуммаПРДт,
	|	РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Доходы) КАК ВидСчетаКт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам) КАК АналитикаУчетаКт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК МестоУчетаКт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК ПодразделениеКт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам) КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	РезервыПоСомнительнымДолгам.ПостояннаяРазница КАК СуммаПРКт,
	|	РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаВРКт,
	|	
	|	""Присоединение резерва к доходам"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Операция
	|		ПО ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыПоСомнительнымДолгам КАК РезервыПоСомнительнымДолгам
	|		ПО РезервыПоСомнительнымДолгам.Регистратор = Операция.Ссылка
	|		И РезервыПоСомнительнымДолгам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрисоединениеРезервовПоСомнительнымДолгамКДоходам)
	|		И РезервыПоСомнительнымДолгам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
	
	ТекстыОтражения.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ // Присоединение резерва к расходам (Дт 91.02 :: Кт 63)
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	
	|	РезервыПоСомнительнымДолгам.СуммаРегл КАК Сумма,
	|	РезервыПоСомнительнымДолгам.СуммаУпр КАК СуммаУУ,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам) КАК АналитикаУчетаДт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК МестоУчетаДт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК ПодразделениеДт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам) КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	РезервыПоСомнительнымДолгам.ПостояннаяРазница КАК СуммаПРДт,
	|	РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПустаяСсылка) КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	РезервыПоСомнительнымДолгам.Валюта КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.ОбъектРасчетов.Подразделение
	|	КОНЕЦ КАК ПодразделениеКт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам) КАК СчетКт,
	|	РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.Контрагент КАК СубконтоКт1,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РезервыПоСомнительнымДолгам.ОбъектРасчетов) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|			ТОГДА РезервыПоСомнительнымДолгам.ОбъектРасчетов
	|		ИНАЧЕ
	|			РезервыПоСомнительнымДолгам.АналитикаУчетаПоПартнерам.Договор
	|	КОНЕЦ КАК СубконтоКт2,
	|	РезервыПоСомнительнымДолгам.РасчетныйДокумент КАК СубконтоКт3,
	|	
	|	РезервыПоСомнительнымДолгам.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	РезервыПоСомнительнымДолгам.ПостояннаяРазница КАК СуммаПРКт,
	|	РезервыПоСомнительнымДолгам.ВременнаяРазница КАК СуммаВРКт,
	|	
	|	""Присоединение резерва к расходам"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Операция
	|		ПО ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыПоСомнительнымДолгам КАК РезервыПоСомнительнымДолгам
	|		ПО РезервыПоСомнительнымДолгам.Регистратор = Операция.Ссылка
	|		И РезервыПоСомнительнымДолгам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрисоединениеРезервовПоСомнительнымДолгамКРасходам)
	|		И РезервыПоСомнительнымДолгам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
	
	ТекстыОтражения.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
	//-- Локализация
	Возврат "";
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, 
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	//++ Локализация
	//-- Локализация
	Возврат "";
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

//++ НЕ УТ
#Область ЗакрытиеМесяца

// Отменяет проведение документов Регламентная операция с типом "Формирование резервов по сомнительным долгам"
// по переданным организациям за указанный период.
//
// Параметры:
// 	Организации - Массив - массив организаций для формирования документов
// 	Период - Дата - период формирования документов
//
Процедура УдалитьСтарыеРезервыПриЗакрытииМесяца(Организации, Период) Экспорт
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК Т
	|ГДЕ
	|	Т.Проведен
	|	И Т.Организация В (&Организации)
	|	И Т.Дата = &КонецМесяца
	|	И Т.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.ФормированиеРезервовПоСомнительнымДолгам)";
	
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

// Дополняет тексты запроса запросом получения регламентных операций формирования резервов по сомнительным долгам
// (старый подход к формированию резервов).
// 
// Параметры:
// 	ТекстыЗапроса - Массив - тексты запроса, к которым нужно добавить новый запрос
//
Процедура ТекстЗапросаРезервыСтарые(ТекстыЗапроса) Экспорт
	
	//++ Локализация
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Резервы.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК Резервы
	|ГДЕ
	|	Резервы.Проведен
	|	И Резервы.Организация В (&МассивОрганизаций)
	|	И Резервы.Дата = &КонецПериода
	|	И Резервы.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.ФормированиеРезервовПоСомнительнымДолгам)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

#Область ПоддержкаЗаконодательства

// С 01.01.2017 согласно пункту 1 статьи 266 НК РФ (в ред. Федерального закона от 30.11.2016 № 401-ФЗ)
// внесена поправка в определение сомнительных долгов.
// При наличии у налогоплательщика перед контрагентом встречного обязательства (кредиторской задолженности)
// сомнительным долгом признается соответствующая задолженность перед налогоплательщиком в той части,
// которая превышает указанную кредиторскую задолженность налогоплательщика перед этим контрагентом.
//
Функция УчитыватьВстречнуюЗадолженность(Период) Экспорт

	//++ Локализация
	Возврат ?(Период >= '2017-01-01', Истина, Ложь);
	//-- Локализация
	Возврат Ложь;
	
КонецФункции

// П. 70 Положения по ведению бухгалтерского учета (Приказ Минфина РФ от 29.07.1998 N 34н)
// Если до конца отчетного года, следующего за годом создания резерва сомнительных долгов, 
// этот резерв в какой-либо части не будет использован,
// то неизрасходованные суммы присоединяются при составлении бухгалтерского баланса на конец отчетного года к
// финансовым результатам.
//
Функция ПрименятьПункт70Приказа34н(Период, Организация) Экспорт
	
	//++ Локализация
	ОтчетнаяДата = КонецМесяца(Период) + 1;
	НачалоСледующегоОтчетногоПериода = БухгалтерскийУчет.НачалоОтчетногоГода(ОтчетнаяДата, Организация);
	
	Возврат ОтчетнаяДата = НачалоСледующегоОтчетногоПериода;
	//-- Локализация
	Возврат Ложь;
	
КонецФункции

// Определяет долю резервов по сомнительным долгам на основании ограничения в соответствии с п. 4 ст. 266 НК
// Ограничение определяется как "разрешенная" доля суммы резервов, определенной исходя из сумм сомнительной
// задолженности и сроков ее возникновения.
//
Функция ПолучитьДолюРезервовПоСомнительнымДолгамНУ(Период, Организация) Экспорт
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.ДоляРезервовПоСомнительнымДолгамНУ
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Т
	|ГДЕ
	|	Т.Дата = &Период
	|	И Т.Организация = &Организация
	|	И Т.Проведен";
	
	Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.ДоляРезервовПоСомнительнымДолгамНУ, 0);
	//-- Локализация
	Возврат 0;
	
КонецФункции

// п. 4, ст. 266 НК РФ
// С 2017 года при расчете резервов по сомнительным долгам за отчетные периоды ограничение в НУ равно большей из сумм:
// - 10% выручки текущего отчетного периода
// - 10% выручки предыдущего года
// При расчете за год ограничение по-прежнему 10% выручки отчетного года(405-ФЗ от 30.11.16).
//
Функция ПолучитьЛимитРасходовНУ(Период, Организация) Экспорт
	
	//++ Локализация
	База = НалоговыйУчет.ВыручкаОтРеализации(Период, Организация);
	
	Если Период >= '2017-01-01' И КонецМесяца(Период) < КонецГода(Период) Тогда
		НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
		Если Не НачалоНалоговогоПериода = Неопределено Тогда
			БазаПрошлогоГода = НалоговыйУчет.ВыручкаОтРеализации(НачалоНалоговогоПериода - 1, Организация);
			База = Макс(БазаПрошлогоГода, База);
		КонецЕсли;
	КонецЕсли;
	
	Норма = 0.10;
	
	Возврат Макс(0, Окр(База * Норма, 2, 1));
	//-- Локализация
	Возврат 0;
	
КонецФункции

// Определяет применяется ли ПБУ 18/02 и отражаются ли резервы по сомнительным долгам на Постоянных разницах (ПР).
// 
// Параметры:
// 	ПараметрыУчетнойПолитики - (См. Справочник.УчетныеПолитикиОрганизаций)
// 	
// Возвращаемое значение:
// 	Число - 1, если применяется ПБУ 18/02 и резервы отражаются на ПР, иначе 0
//
Функция КоэффициентОтраженияПостояннойРазницы(ПараметрыУчетнойПолитики) Экспорт
	
	//++ Локализация
	Если
		ПараметрыУчетнойПолитики.ВедетсяУчетПостоянныхИВременныхРазниц И
		ПараметрыУчетнойПолитики.ВидРазницПБУ18РезервовПоСомнительнымДолгам = Перечисления.ВидыРазницПБУ18.ПР
	Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	//-- Локализация
	Возврат 0;
	
КонецФункции

// Определяет применяется ли ПБУ 18/02 и отражаются ли резервы по сомнительным долгам на Временных разницах (ВР).
// 
// Параметры:
// 	ПараметрыУчетнойПолитики - (См. Справочник.УчетныеПолитикиОрганизаций)
// 	
// Возвращаемое значение:
// 	Число - 1, если применяется ПБУ 18/02 и резервы отражаются на ВР, иначе 0
//
Функция КоэффициентОтраженияВременнойРазницы(ПараметрыУчетнойПолитики) Экспорт
	
	//++ Локализация
	Если Не ПараметрыУчетнойПолитики.ВедетсяУчетПостоянныхИВременныхРазниц
		Или (ПараметрыУчетнойПолитики.ВедетсяУчетПостоянныхИВременныхРазниц
			И ПараметрыУчетнойПолитики.ВидРазницПБУ18РезервовПоСомнительнымДолгам = Перечисления.ВидыРазницПБУ18.ВР)
	Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	//-- Локализация
	Возврат 0;
	
КонецФункции

#КонецОбласти

#Область СПАРКРиски

// Проверяет разрешено ли использование сервиса СПАРК риски.
// 
// Возвращаемое значение:
// 	Булево - если Истина, то разрешено
// 
Функция СПАРКРискиИспользованиеРазрешено() Экспорт
	
	//++ Локализация
	Возврат СПАРКРиски.ИспользованиеРазрешено();
	//-- Локализация
	Возврат Ложь;
	
КонецФункции

// Получает данные СПАРК индексов по переданным контрагентам.
// 
// Параметры:
// 	МассивКонтрагентов - Массив - контрагенты, по которым необходимо получить СПАРК индексы
// 	ИспользованиеРазрешено - Булево - если Ложь, то возвращается пустая таблица 
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица СПАРК индексов
//  
Функция СПАРКРискиПолучитьДанные(МассивКонтрагентов, ИспользованиеРазрешено) Экспорт
	
	Если Не ИспользованиеРазрешено Тогда
		Возврат СПАРКРискиПустаяТаблица();
	КонецЕсли;
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = СПАРКРискиТекстЗапроса();
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Контрагент");
	
	Возврат Результат;
	//-- Локализация
	Возврат СПАРКРискиПустаяТаблица();
	
КонецФункции

// Устанавливает условное оформление элементам переданной формы
// для документа Начисление и списание резервов по сомнительным долгам.
//
Процедура СПАРКРискиУсловноеОформление(Форма) Экспорт
	
	//++ Локализация
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	#Область ИндексДолжнойОсмотрительности
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(204, 255, 204));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексДолжнойОсмотрительностиГрадация");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ГрадацияИндексовСПАРКРиски.Низкий;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексДолжнойОсмотрительностиЧисло.Имя);
	
	// Следующий элемент.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 245, 170));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, 0));
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексДолжнойОсмотрительностиГрадация");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ГрадацияИндексовСПАРКРиски.Средний;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексДолжнойОсмотрительностиЧисло.Имя);
	
	// Следующий элемент.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 220, 220));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексДолжнойОсмотрительностиГрадация");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ГрадацияИндексовСПАРКРиски.Высокий;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексДолжнойОсмотрительностиЧисло.Имя);
	
	// Следующий элемент.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексДолжнойОсмотрительностиЧисло");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = -1;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексДолжнойОсмотрительностиЧисло.Имя);
	
	#КонецОбласти
	
	#Область ИндексПлатежнойДисциплины
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(204, 255, 204));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексПлатежнойДисциплиныГрадация");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ГрадацияИндексовСПАРКРиски.Низкий;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексПлатежнойДисциплиныЧисло.Имя);
	
	// Следующий элемент.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 245, 170));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, 0));
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексПлатежнойДисциплиныГрадация");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ГрадацияИндексовСПАРКРиски.Средний;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексПлатежнойДисциплиныЧисло.Имя);
	
	// Следующий элемент.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 220, 220));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексПлатежнойДисциплиныГрадация");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ГрадацияИндексовСПАРКРиски.Высокий;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексПлатежнойДисциплиныЧисло.Имя);
	
	// Следующий элемент.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексПлатежнойДисциплиныЧисло");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = -1;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексПлатежнойДисциплиныЧисло.Имя);
	
	#КонецОбласти
	
	#Область ИндексФинансовогоРиска
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(204, 255, 204));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексФинансовогоРискаГрадация");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ГрадацияИндексовСПАРКРиски.Низкий;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексФинансовогоРискаЧисло.Имя);
	
	// Следующий элемент.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 245, 170));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексФинансовогоРискаГрадация");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ГрадацияИндексовСПАРКРиски.Средний;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексФинансовогоРискаЧисло.Имя);
	
	// Следующий элемент.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 220, 220));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексФинансовогоРискаГрадация");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ГрадацияИндексовСПАРКРиски.Высокий;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексФинансовогоРискаЧисло.Имя);
	
	// Следующий элемент.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ИндексФинансовогоРискаЧисло");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = -1;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьИндексФинансовогоРискаЧисло.Имя);
	
	#КонецОбласти
	
	#Область Группа1СПАРК
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СПАРК_ИспользованиеРазрешено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	// Поля.
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьИндексДолжнойОсмотрительностиЧисло.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьИндексПлатежнойДисциплиныЧисло.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьИндексФинансовогоРискаЧисло.Имя);
	
	Для Каждого Поле Из МассивПолей Цикл
		ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
	#КонецОбласти
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаФорм

// Добавляет в список выбора хозяйственной операции значение "Списание дебиторской задолженности за счет резерва".
//
// Параметры:
// 	Элемент - ПолеФормы - поле ввода формы, в котором указывается хозяйственная операция
//
Процедура ДобавитьСписаниеЗаСчетРезерва(Элемент) Экспорт
	
	//++ Локализация
	Если Элемент.СписокВыбора.НайтиПоЗначению(
		Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам) = Неопределено Тогда
		Элемент.СписокВыбора.Добавить(
			Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам,
			НСтр("ru = 'дебиторской задолженности за счет резервов'",ОбщегоНазначения.КодОсновногоЯзыка()));
		Элемент.СписокВыбора.СортироватьПоПредставлению();
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запросов проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
//++ Локализация
//-- Локализация

//++ НЕ УТ
#Область ПроводкиРеглУчета
//++ Локализация

Процедура СформироватьПроводкиПереходаНаНовыйМеханизмРасчетаРезервов(Объект, ДополнительныеСвойства, Движения, Отказ)
	
	// Ищем связанный с данным начислением резерва документ "Операция (регламентированный учет)".
	
	Выборка = ПолучитьВыборкуСвязанногоДокумента(Объект);
	
	Если ЭтоПервоеНачислениеРезерва(Объект) Тогда
		
		// Подготовим проводки для записи в связанном документе.
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Актуальность,
		|	&Период КАК Период,
		|	&Организация КАК Организация,
		|	
		|	-ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
		|	-ХозрасчетныйОстатки.СуммаУУОстаток КАК СуммаУУ,
		|	
		|	ХозрасчетныйОстатки.Подразделение КАК ПодразделениеДт,
		|	ХозрасчетныйОстатки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
		|	
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам) КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидСубконтоДт1,
		|	ХозрасчетныйОстатки.Субконто1 КАК СубконтоДт1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) КАК ВидСубконтоДт2,
		|	ХозрасчетныйОстатки.Субконто2 КАК СубконтоДт2,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами) КАК ВидСубконтоДт3,
		|	ХозрасчетныйОстатки.Субконто3 КАК СубконтоДт3,
		|	
		|	-ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУДт,
		|	-ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПРДт,
		|	-ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВРДт,
		|	
		|	ХозрасчетныйОстатки.Подразделение КАК ПодразделениеКт,
		|	ХозрасчетныйОстатки.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
		|	
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы) КАК СчетКт,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы) КАК ВидСубконтоКт1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам) КАК СубконтоКт1,
		|	
		|	-ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУКт,
		|	-ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПРКт,
		|	-ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВРКт,
		|	
		|	""Восстановление резервов по сомнительным долгам"" КАК Содержание
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),,
		|		Организация = &Организация
		|	) КАК ХозрасчетныйОстатки";
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеЗаполнения = РезультатЗапроса.Выгрузить();
		
		Операция = ?(Выборка.Следующий(), Выборка.Ссылка.ПолучитьОбъект(), Документы.ОперацияБух.СоздатьДокумент());
		Операция.Дата = Объект.Дата;
		Операция.Организация = Объект.Организация;
		Операция.Содержание = НСтр("ru = 'Переход на новый механизм резервов по сомнительным долгам'");
		Операция.Ответственный = Пользователи.ТекущийПользователь();
		Операция.Комментарий = ТегПерехода();
		
		Если Выборка.ПометкаУдаления = Истина Тогда
			Операция.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		Операция.ЗаполнениеДвижений.Очистить();
		НоваяСтрока = Операция.ЗаполнениеДвижений.Добавить();
		НоваяСтрока.Документ = Объект.Ссылка;
		
		Операция.Движения.Хозрасчетный.Загрузить(ДанныеЗаполнения);
		Операция.Движения.Хозрасчетный.Записывать = Истина;
		
		ДанныеЗаполнения.Свернуть(, "Сумма,СуммаУУ");
		Операция.СуммаОперации = ?(ДанныеЗаполнения.Количество() = 0, 0, ДанныеЗаполнения[0].Сумма);
		Операция.СуммаУУ = ?(ДанныеЗаполнения.Количество() = 0, 0, ДанныеЗаполнения[0].СуммаУУ);
		
		// Найдем все прочие связанные документы, у которых нужно отменить проведение.
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОперацияБухЗаполнениеДвижений.Ссылка
		|ИЗ
		|	Документ.ОперацияБух.ЗаполнениеДвижений КАК ОперацияБухЗаполнениеДвижений
		|ГДЕ
		|	ОперацияБухЗаполнениеДвижений.Документ ССЫЛКА Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам
		|	И НЕ ОперацияБухЗаполнениеДвижений.Ссылка = &Ссылка
		|	И ОперацияБухЗаполнениеДвижений.Ссылка.Организация = &Организация
		|	И ВЫРАЗИТЬ(ОперацияБухЗаполнениеДвижений.Ссылка.Комментарий КАК СТРОКА(255)) = &Тег
		|	И ОперацияБухЗаполнениеДвижений.Ссылка.Проведен";
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Ссылка", Операция.Ссылка);
		Запрос.УстановитьПараметр("Тег", ТегПерехода());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		Попытка
			Пока Выборка.Следующий() Цикл
				ОперацияОтменыПроведения = Выборка.Ссылка.ПолучитьОбъект();
				ОперацияОтменыПроведения.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЦикла;
			
			Операция.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = ОписаниеОшибки();
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	Иначе
		Если Выборка.Следующий() И Выборка.Проведен Тогда
			Операция = Выборка.Ссылка.ПолучитьОбъект();
			Операция.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПроводкиПереходаНаНовыйМеханизмРасчетаРезервов(Объект, Отказ)
	
	Выборка = ПолучитьВыборкуСвязанногоДокумента(Объект);
	Если Выборка.Следующий() И Выборка.Проведен Тогда
		Операция = Выборка.Ссылка.ПолучитьОбъект();
		Операция.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли переданный документ первым по новому механизму расчета резервов по данной организации.
//
Функция ЭтоПервоеНачислениеРезерва(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК ДанныеДокумента
	|ГДЕ
	|	НЕ ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Дата <= &Период
	|	И ДанныеДокумента.Проведен
	|	И (ДанныеДокумента.ОтражатьВБухгалтерскомУчете
	|		ИЛИ ДанныеДокумента.ОтражатьВНалоговомУчете)
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает первый связанный документ "Операция (регламентированный учет)",
// связанный с данным документом расчета резервов.
//
Функция ПолучитьВыборкуСвязанногоДокумента(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОперацияБухЗаполнениеДвижений.Ссылка,
	|	ОперацияБухЗаполнениеДвижений.Ссылка.Проведен КАК Проведен,
	|	ОперацияБухЗаполнениеДвижений.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ОперацияБух.ЗаполнениеДвижений КАК ОперацияБухЗаполнениеДвижений
	|ГДЕ
	|	ОперацияБухЗаполнениеДвижений.Документ = &Ссылка
	|	И ВЫРАЗИТЬ(ОперацияБухЗаполнениеДвижений.Ссылка.Комментарий КАК СТРОКА(255)) = &Тег
	|УПОРЯДОЧИТЬ ПО
	|	ОперацияБухЗаполнениеДвижений.Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Тег", ТегПерехода());
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Тег перехода на новый механизм расчета резервов, который сохраняется
// в комментарии документа "Операция (регламентированный учет)".
//
Функция ТегПерехода()
	
	Возврат "#ПереходНаНовыйМеханизмРезервов";
	
КонецФункции

//-- Локализация
#КонецОбласти
//-- НЕ УТ

#КонецОбласти

#Область Прочее
//++ Локализация
Функция СПАРКРискиТекстЗапроса()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_Контрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В (&МассивКонтрагентов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вт_Контрагенты.Ссылка КАК Контрагент,
	|	ЕСТЬNULL(ИндексыСПАРКРиски.ИНН, """") КАК ИННИндексы,
	|	ЕСТЬNULL(ИндексыСПАРКРиски.ДатаОбновления, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбновления,
	|	ВЫБОР
	|		КОГДА ИндексыСПАРКРиски.ИндексДолжнойОсмотрительности ЕСТЬ NULL
	|			ТОГДА -1
	|		ИНАЧЕ ИндексыСПАРКРиски.ИндексДолжнойОсмотрительности
	|	КОНЕЦ КАК ИндексДолжнойОсмотрительностиЧисло,
	|	ВЫБОР
	|		КОГДА ИндексыСПАРКРиски.ИндексПлатежнойДисциплины ЕСТЬ NULL
	|			ТОГДА -1
	|		ИНАЧЕ ИндексыСПАРКРиски.ИндексПлатежнойДисциплины
	|	КОНЕЦ КАК ИндексПлатежнойДисциплиныЧисло,
	|	ВЫБОР
	|		КОГДА ИндексыСПАРКРиски.ИндексФинансовогоРиска ЕСТЬ NULL
	|			ТОГДА -1
	|		ИНАЧЕ ИндексыСПАРКРиски.ИндексФинансовогоРиска
	|	КОНЕЦ КАК ИндексФинансовогоРискаЧисло,
	|	ВЫБОР
	|		КОГДА ИндексыСПАРКРиски.ИндексДолжнойОсмотрительности >= 0
	|		И ИндексыСПАРКРиски.ИндексДолжнойОсмотрительности <= 40
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.Низкий)
	|		КОГДА ИндексыСПАРКРиски.ИндексДолжнойОсмотрительности >= 41
	|		И ИндексыСПАРКРиски.ИндексДолжнойОсмотрительности <= 71
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.Средний)
	|		КОГДА ИндексыСПАРКРиски.ИндексДолжнойОсмотрительности >= 72
	|		И ИндексыСПАРКРиски.ИндексДолжнойОсмотрительности <= 100
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.Высокий)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка)
	|	КОНЕЦ КАК ИндексДолжнойОсмотрительностиГрадация,
	|	ВЫБОР
	|		КОГДА ИндексыСПАРКРиски.ИндексПлатежнойДисциплины >= 0
	|		И ИндексыСПАРКРиски.ИндексПлатежнойДисциплины <= 49
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.Высокий)
	|		КОГДА ИндексыСПАРКРиски.ИндексПлатежнойДисциплины >= 50
	|		И ИндексыСПАРКРиски.ИндексПлатежнойДисциплины <= 79
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.Средний)
	|		КОГДА ИндексыСПАРКРиски.ИндексПлатежнойДисциплины >= 80
	|		И ИндексыСПАРКРиски.ИндексПлатежнойДисциплины <= 100
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.Низкий)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка)
	|	КОНЕЦ КАК ИндексПлатежнойДисциплиныГрадация,
	|	ВЫБОР
	|		КОГДА ИндексыСПАРКРиски.ИндексФинансовогоРиска >= 0
	|		И ИндексыСПАРКРиски.ИндексФинансовогоРиска <= 14
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.Низкий)
	|		КОГДА ИндексыСПАРКРиски.ИндексФинансовогоРиска >= 15
	|		И ИндексыСПАРКРиски.ИндексФинансовогоРиска <= 85
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.Средний)
	|		КОГДА ИндексыСПАРКРиски.ИндексФинансовогоРиска >= 86
	|		И ИндексыСПАРКРиски.ИндексФинансовогоРиска <= 100
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.Высокий)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка)
	|	КОНЕЦ КАК ИндексФинансовогоРискаГрадация
	|ИЗ
	|	вт_Контрагенты КАК вт_Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндексыСПАРКРиски КАК ИндексыСПАРКРиски
	|		ПО вт_Контрагенты.Ссылка = ИндексыСПАРКРиски.Контрагент";
	
КонецФункции
//-- Локализация

Функция СПАРКРискиПустаяТаблица()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
