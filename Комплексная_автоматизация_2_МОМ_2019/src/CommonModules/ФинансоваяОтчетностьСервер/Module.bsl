
#Область ПрограммныйИнтерфейс
//++НЕ УТ

// Функция возвращает таблицу индексов картинок
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица индексов картинок в коллекции по виду бюджета.
//
Функция ТаблицаИндексовКартинок() Экспорт
	
	ТаблицаКартинок = Новый ТаблицаЗначений;
	ТаблицаКартинок.Колонки.Добавить("ВидЭлемента", 
							Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета"));
	ТаблицаКартинок.Колонки.Добавить("ИмяВспомогательногоЭлемента", 
							Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10)));
	ТаблицаКартинок.Колонки.Добавить("ИндексКартинки", 
							Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3, 0)));
							
	// основные элементы
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ЗаголовокОтчета",				"", 		0);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "НередактируемыйТекст",		"", 		3);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "РедактируемыйТекст",			"", 		6);
	// показатели бюджетирование
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "СтатьяБюджетов", 				"", 		9);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "СтатьяБюджетов", 				"Целевой", 	39);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ПоказательБюджетов",			"", 		39);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ВсеСтатьиБюджетов", 			"", 		9);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ВсеПоказателиБюджетов",		"", 		39);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "РедактируемоеЗначение", 		"", 		51);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "НефинансовыйПоказатель", 		"", 		50);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ПроизводныйПоказатель", 		"", 		15);
	// показатели мфу
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "МонетарныйПоказатель",		"", 		9);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "МонетарныйПоказатель", 		"Регл", 	39);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "НемонетарныйПоказатель", 		"", 		12);
	//таблицы
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ТаблицаПоказателиВСтроках", 	"", 		21);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ТаблицаПоказателиВКолонках", 	"", 		21);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ТаблицаСложная", 				"", 		21);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "Колонки", 					"", 		24);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "Строки", 						"", 		27);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "Колонки", 					"Ввод",		46);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "Строки", 						"Ввод", 	47);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "НастройкаЯчеек", 				"", 		48);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ЯчейкаТаблицы", 				"", 		49);
	// прочие элементы
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ФормулаПоГруппе", 			"", 		18);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ИтогПоГруппе", 				"", 		18);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "Измерение", 					"", 		30);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "Группа", 						"", 		36);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "", 							"Группа", 	42);
	ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, "ЭлементТаблицы", 				"", 		45);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаИндексовКартинок.ВидЭлемента,
	|	ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента,
	|	ТаблицаИндексовКартинок.ИндексКартинки
	|ПОМЕСТИТЬ ТаблицаИндексовКартинок
	|ИЗ
	|	&ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаИндексовКартинок", ТаблицаКартинок);
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Функция значение параметра по имени
//
// Возвращаемое значение:
//   Параметры - Структура - структура параметров
//   ИмяПараметра - Строка - ключ в структуре параметров
//   ЗначениеПоУмолчанию - Произвольный - (Необязательный)значение ключа структуры,
//                                        если значение переданного ключа не найдено.
//
// Возвращаемое значение:
//   ЗначениеКлюча - Произвольный.
//
Функция ПолучитьПараметр(Параметры,ИмяПараметра,ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ЗначениеПараметра = ЗначениеПоУмолчанию;
	// если параметра с таким именем не нашлось
	Если НЕ Параметры.Свойство(ИмяПараметра,ЗначениеПараметра) Тогда//вернем значение по умолчанию
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Процедура преобразовывает результат запроса в дерево значений
//
// Параметры:
//  РезультатЗапроса  - РезультатЗапроса - результат запроса, который надо преобразовать
//  Дерево  - ДеревоЗначений - дерево, куда следует загрузить результат запроса.
//
Процедура РезультатЗапросаВДерево(РезультатЗапроса, Дерево) Экспорт
	
	ДеревоЗапроса = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДобавитьСтрокиВДерево(ДеревоЗапроса.Строки, Дерево.Строки);
	
КонецПроцедуры

// Возвращает кэш дополнительных реквизитов
// элементов вида бюджета.
//
// Параметры:
//  ВидОтчета  - СправочникСсылка.ВидыБюджетов - ссылка на вид отчета.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица дополнительных реквизитов и их значений.
//
Функция КэшДополнительныеРеквизиты(ВидОтчета) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СправочникТабличнаяЧасть.Ссылка КАК ЭлементОтчета,
	|	СправочникТабличнаяЧасть.Реквизит,
	|	СправочникТабличнаяЧасть.Значение
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК СправочникТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов КАК Справочник
	|		ПО (Справочник.Ссылка = СправочникТабличнаяЧасть.Ссылка)
	|ГДЕ
	|	Справочник.Владелец = &ВидОтчета";
	
	Если ТипЗнч(ВидОтчета) <> Тип("СправочникСсылка.ВидыБюджетов") Тогда
		ТекстЗапроса = ТекстЗапроса + ДополнитьРеквизитыСвязанныхЭлементов();
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("ЭлементОтчета, Реквизит");
	Возврат Таблица;
	
КонецФункции

// Возвращает кэш дополнительных реквизитов
// элементов вида бюджета.
//
// Параметры:
//  ВидОтчета  - СправочникСсылка.ВидыБюджетов - ссылка на вид отчета.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица дополнительных реквизитов и их значений.
//
Функция КэшДополнительныеПоляЭлементов(ВидОтчета) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭлементыФинансовыхОтчетовДополнительныеПоля.Ссылка КАК ЭлементОтчета,
	|	ЭлементыФинансовыхОтчетовДополнительныеПоля.Наименование
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов.ДополнительныеПоля КАК ЭлементыФинансовыхОтчетовДополнительныеПоля
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов КАК Справочник
	|		ПО (Справочник.Ссылка = ЭлементыФинансовыхОтчетовДополнительныеПоля.Ссылка)
	|ГДЕ
	|	Справочник.Владелец = &ВидОтчета";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("ЭлементОтчета");
	Возврат Таблица;
	
КонецФункции

// Возвращает значение дополнительного реквизита
// элемента отчета (из табличной части "дополнительные реквизиты").
//
// Параметры:
//  СсылкаНаОбъект  - СправочникСсылка.ЭлементыФинансовыхОтчетов - ссылка 
//                    на элемент для которого получаем дополнительный элемент
//  Реквизит  - Строка - Имя реквизита
//            - ПланВидовХарактеристикСсылка.РеквизитыЭлементовФинансовыхОтчетов - ссылка на реквизит.
//
// Возвращаемое значение:
//   Произвольный   - значение реквизита.
//
Функция ЗначениеДополнительногоРеквизита(Знач СсылкаНаОбъект, Знач Реквизит, КэшРеквизитов) Экспорт
	
	Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Реквизит = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов[Реквизит];
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		СтруктураПоиска.Вставить("ЭлементОтчета", СсылкаНаОбъект);
	КонецЕсли;
	СтруктураПоиска.Вставить("Реквизит", Реквизит);
	НайденныеСтроки = КэшРеквизитов.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает представление элемента отчета
//
// Параметры:
//  ВидЭлемента  - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - вид элемента
//  ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов - ссылка на элемент
//  ЗначениеАналитики - Произвольный - дополнительное значение аналитики
//  Наименование - Строка - наименование элемента
//  КэшРеквизитов - ТаблицаЗначений - кэш дополнительных реквизитов вида бюджета.
//
// Возвращаемое значение:
//   Строка   - значение аналитики.
//
Функция ПолучитьПредставлениеЭлемента(ВидЭлемента, ЭлементОтчета, ЗначениеАналитики, Наименование, КэшРеквизитов) Экспорт
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
		ТипИзмерения = ЗначениеДополнительногоРеквизита(ЭлементОтчета,
			ДопРеквизиты.ТипИзмерения,
			КэшРеквизитов);
		
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
			Если ЗначениеЗаполнено(ЗначениеАналитики) Тогда
				Возврат ЗначениеАналитики;
			КонецЕсли;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
			Возврат ЗначениеДополнительногоРеквизита(ЭлементОтчета, ДопРеквизиты.Организация, КэшРеквизитов);
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
			Возврат ЗначениеДополнительногоРеквизита(ЭлементОтчета, ДопРеквизиты.Подразделение, КэшРеквизитов);
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			Возврат ЗначениеДополнительногоРеквизита(ЭлементОтчета, ДопРеквизиты.Сценарий, КэшРеквизитов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Возвращает представление дополнительных полей отчета
//
// Параметры:
//  ВидЭлемента  - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - вид элемента
//  ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов - ссылка на элемент
//  ЗначениеАналитики - Произвольный - дополнительное значение аналитики
//  Наименование - Строка - наименование элемента
//  КэшРеквизитов - ТаблицаЗначений - кэш дополнительных реквизитов вида бюджета.
//
// Возвращаемое значение:
//   Строка   - значение аналитики.
//
Функция ПолучитьПредставлениеДополнительныхПолей(ЭлементОтчета, КэшДополнительныхПолей) Экспорт
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ЭлементОтчета", ЭлементОтчета);
	НайденныеСтроки = КэшДополнительныхПолей.НайтиСтроки(СтруктураПоиска);
	
	Результат = "";
	Для Каждого ДополнительноеПоле Из НайденныеСтроки Цикл
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ") + ДополнительноеПоле.Наименование;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает описание типа по переданному значению
// Параметры:
//  Значение - Ссылочный тип - значение для которого требуется получить описание типа.
//
// Возвращаемое значение:
//   ОписаниеТипов - описание типа переданного значения.
//
Функция ОписаниеТипаПоЗначению(Значение) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(Значение));
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

// Заполняет дерево выбора поля на основании доступных полей схемы компоновки данных
// Вызывается из форм:
// 		- настройки заполнения аналитики бюджетирования
// 		- настройки заполнения субконто международного учета.
// 
// Параметры:
// 	  Форма - ФормаКлиентскогоПриложения - Форма выбора поля заполнения.
//
Процедура ЗаполнитьДоступныеПоляПоСхемеКомпоновкиДанных(Форма) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма.АдресСхемыКомпоновкиДанных));
	
	СтрокиДерева = Форма.ДеревоВыбора.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
	ДоступныеПоляВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы;
	ТекущийУровень = 0;
	ДобавитьДоступныеПоляРекурсивно(СтрокиДерева, ДоступныеПоляВыбора, ТекущийУровень, Форма, "");
	
КонецПроцедуры
//--НЕ УТ

// Для заданной даты формирует строковое представление заданного интервала
//
// Параметры:
//  ДатаПериода  - Дата - дата для которой необходимо сформировать строковое представление интервала
//  Периодичность  - Перечисления.Периодичность, Число - интервал представление которого необходимо сформировать.
//
// Возвращаемое значение:
//  Строка - строковое представление интервала.
//
Функция ПредставлениеИнтервала(ДатаПериода, Знач Периодичность) Экспорт
	
	Если ТипЗнч(ДатаПериода) <> Тип("Дата") Тогда
		Возврат ДатаПериода;
	КонецЕсли;
	
	Если Периодичность = 6 Тогда
		Периодичность = Перечисления.Периодичность.День;
	ИначеЕсли Периодичность = 7 Тогда
		Периодичность = Перечисления.Периодичность.Неделя;
	ИначеЕсли Периодичность = 8 Тогда
		Периодичность = Перечисления.Периодичность.Декада;
	ИначеЕсли Периодичность = 9 Тогда
		Периодичность = Перечисления.Периодичность.Месяц;
	ИначеЕсли Периодичность = 10 Тогда
		Периодичность = Перечисления.Периодичность.Квартал;
	ИначеЕсли Периодичность = 11 Тогда
		Периодичность = Перечисления.Периодичность.Полугодие;
	ИначеЕсли Периодичность = 12 Тогда
		Периодичность = Перечисления.Периодичность.Год;
	КонецЕсли;
	
	ДатаНачала = НачалоПериода(ДатаПериода, Периодичность);
	ДатаОкончания = КонецПериода(ДатаПериода, Периодичность);
	Если Периодичность = Перечисления.Периодичность.Полугодие И Месяц(ДатаНачала) = 7 Тогда
		Возврат "2 " + НСтр("ru = 'полугодие'") + " " + Формат(Год(ДатаНачала), "ЧГ=0") + " г.";
	КонецЕсли;
	
	Возврат ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП=Истина");
	
КонецФункции

// Возвращает начальную дату интервала
//
// Параметры:
//  ДатаПериода  - <Дата> - дата входящая в интервал
//  Периодичность  - <Перечисления.Периодичность> - интервал представление которого необходимо сформировать.
//
// Возвращаемое значение:
//   <Дата> - начальная дата переданного интервала.
//
Функция НачалоПериода(Знач ДатаПериода, Периодичность) Экспорт
	
	НачалоПериода = ДатаПериода;
	Если Периодичность = Перечисления.Периодичность.День Тогда
		НачалоПериода = НачалоДня(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Если День(ДатаПериода) <= 10 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(НачалоПериода) <= 6 Тогда
			НачалоПериода = Дата(Год(ДатаПериода),1,1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода),7,1);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		НачалоПериода = НачалоГода(ДатаПериода);
		
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции // НачалоПериода()

// Возвращает конечную дату интервала
//
// Параметры:
//  ДатаПериода  - <Дата> - дата входящая в интервал
//  Периодичность  - <Перечисления.Периодичность> - интервал представление которого необходимо сформировать.
//
// Возвращаемое значение:
//   <Дата> - конечная дата переданного интервала.
//
Функция КонецПериода(Знач ДатаПериода, Периодичность) Экспорт
	
	КонецПериода = ДатаПериода;
	Если Периодичность = Перечисления.Периодичность.День Тогда
		КонецПериода = КонецДня(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		КонецПериода = КонецНедели(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Если День(ДатаПериода) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		КонецПериода = КонецМесяца(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		КонецПериода = КонецКвартала(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(КонецПериода) <= 6 Тогда
			КонецПериода = Дата(Год(ДатаПериода),6,30,23,59,59);
		Иначе
			КонецПериода = Дата(Год(ДатаПериода),12,31,23,59,59);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		КонецПериода = КонецГода(ДатаПериода);
		
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции // КонецПериода()

#Область ПроцедурыИФункции_РаботыССКД
//++НЕ УТ

// Устарела. Следует использовать новую (см. КомпоновкаДанныхСервер.ПустаяСхема)
// Возвращает новую схему СКД.
//
// Параметры:
//  ИмяИсточника  - Строка - имя источника данных новой схемы компоновки (необязательное по умолчанию "ИсточникДанных1")
//  ТипИсточника  - Строка - тип источника данных новой схему компоновки данных (необязательное по умолчанию "Local").
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - новая схему компоновки данных.
//
Функция НоваяСхема(ИмяИсточника = "ИсточникДанных1", ТипИсточника = "Local") Экспорт
	
	Возврат КомпоновкаДанныхСервер.ПустаяСхема(ИмяИсточника, ТипИсточника);
	
КонецФункции

// Устарела. Следует использовать новую (см. КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных)
// Возвращает ссылку на новый набор данных заданного типа в переданной схеме компоновки данных.
//
// Параметры:
//  СхемаКД   - СхемаКомпоновкиДанных> - схема компоновки данных в которой необходимо создать новый набор
//  ТипНабора - Тип - Тип нового набора (необязательное по умолчанию "НаборДанныхЗапросСхемыКомпоновкиДанных")
//                   - Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
//                   - Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
//  ИмяНабора - Строка - имя нового набора (необязательное по умолчанию "НаборДанных1").
//
// Возвращаемое значение:
// НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъединениеСхемыКомпоновкиДанных,
// НаборДанныхОбъектСхемыКомпоновкиДанных - новый набор данных заданного типа.
//
Функция НовыйНабор(СхемаКД, ТипНабора = Неопределено, ИмяНабора = "НаборДанных1") Экспорт
	
	Если СхемаКД = Неопределено Тогда
		СхемаКД = КомпоновкаДанныхСервер.ПустаяСхема();
	КонецЕсли;
	
	НовыйНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКД, ТипНабора, ИмяНабора);
	
	Возврат НовыйНабор;
	
КонецФункции

// Возвращает новую схему компоновки данных с новым набором данных типа "НаборДанныхОбъектСхемыКомпоновкиДанных".
//
// Параметры:
//  ИмяОбъекта  - Строка - имя нового набора
//  НаборСхемы  - НаборДанныхОбъектСхемыКомпоновкиДанных - переменная в которую будет помещена ссылка на новый набор
//                                                         данных (необязательное).
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - новая схема компоновки данных.
//
Функция НоваяСхемаНаборОбъект(ИмяОбъекта, НаборСхемы = Неопределено) Экспорт
	
	СхемаКД = КомпоновкаДанныхСервер.ПустаяСхема();
	
	НаборСхемы = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), ИмяОбъекта);
	
	НаборСхемы.ИмяОбъекта = ИмяОбъекта;
	
	Возврат СхемаКД;
	
КонецФункции

//--НЕ УТ

// Возвращает ссылку на новое поле в переданном наборе данных
//
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных в
//      котором необходимо создать новое поле
//  Поле         - Строка - имя нового поля схемы компоновки данных
//  ПутьКДанным  - Строка - путь к данным нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  Заголовок    - Строка - заголовок нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  ТипЗначения  - ОписаниеТипов - тип данных нового поля схемы компоновки данных (необязательное по умолчанию Неопределено).
//
// Возвращаемое значение:
//  ПолеНабораДанныхСхемыКомпоновкиДанных - описание возвращаемого значения.
//
Функция НовоеПолеНабора(НаборДанных, Поле, ПутьКДанным = "", Заголовок = "", ТипЗначения = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = Поле;
	КонецЕсли;
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле = Поле;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Заголовок = Заголовок;
	Если ТипЗначения <> Неопределено Тогда
		НовоеПоле.ТипЗначения = ТипЗначения;
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

// Возвращает ссылку на новый ресурс в переданной схеме компоновки данных
//
// Параметры:
//  СхемаКД  - <СхемаКомпоновкиДанных> - схема компоновки данных в которой необходимо создать новый ресурс
//  ПутьКДанным  - <Строка> - путь к данным нового ресурса схемы компоновки данных
//  Агрегат  - <Строка> - агрегатная функция нового ресурса (необязательное по умолчанию "Сумма")
//  ВыражениеРесурса  - <Строка> - выражение вычисления нового ресурса (необязательное).
//
// Возвращаемое значение:
//   <ПолеИтогаСхемыКомпоновкиДанных> - ссылка на новый ресурс схемы компоновки данных.
//
Функция НовыйРесурс(СхемаКД, ПутьКДанным, Агрегат = "Сумма", ВыражениеРесурса = "") Экспорт
	
	НовыйРесурс = СхемаКД.ПоляИтога.Добавить();
	НовыйРесурс.ПутьКДанным = ПутьКДанным;
	НовыйРесурс.Выражение = Агрегат + "("+ НовыйРесурс.ПутьКДанным +")";
	Если НЕ ПустаяСтрока(ВыражениеРесурса) Тогда
		НовыйРесурс.Выражение = ВыражениеРесурса;
	КонецЕсли;
	
	Возврат НовыйРесурс;
	
КонецФункции

// Возвращает ссылку на новое вычисляемое поле в переданной схеме компоновки данных
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема компоновки данных в которой необходимо создать новое
//                                                  вычисляемое поле
//  ПутьКДанным           - Строка - путь к данным вычисляемого поля схемы компоновки данных
//  ВыражениеРесурса      - Строка - выражение вычисления нового вычисляемого поля
//  Заголовок             - Строка - заголовок нового вычисляемого поля (необязательное)
//  ИскатьИПерезаполнять  - Булево - Истина - добавить новое и заполнить или перезаполнить найденное поле, 
//                                   Ложь - добавить новое и заполнить без поиска дублей, 
//                                   Неопределено - добавить новое и заполнить или оставить найденное поле без изменений. 
//                                   Значение по умолчанию - Ложь
//  ТипЗначения           - ОписаниеТипов - Описание типов вычисляемого поля
//                        - Неопределено - Тип значения установлен не будет, по умолчанию Неопределено.
//
// Возвращаемое значение:
//  ВычисляемоеПолеСхемыКомпоновкиДанных - ссылка на новое вычисляемое поле схемы компоновки данных.
//
Функция НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ПутьКДанным, ВыражениеПоля, Заголовок = "", ИскатьИПерезаполнять = Ложь, ТипЗначения = Неопределено) Экспорт
	
	// Поиск или создание
	ПолеДобавлено = Ложь;
	Если ИскатьИПерезаполнять = Ложь Тогда
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		ПолеДобавлено = Истина;
	Иначе
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ПутьКДанным);
		ПолеСуществует = ВычисляемоеПоле <> Неопределено;
		
		Если Не ПолеСуществует Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ПолеДобавлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение
	Если ПолеДобавлено Или Не ИскатьИПерезаполнять = Неопределено Тогда
		ВычисляемоеПоле.ПутьКДанным = ПутьКДанным;
		ВычисляемоеПоле.Выражение = ВыражениеПоля;
		Если НЕ ПустаяСтрока(Заголовок) Тогда
			ВычисляемоеПоле.Заголовок = Заголовок;
		КонецЕсли;
		
		Если НЕ ТипЗначения = Неопределено Тогда
			ВычисляемоеПоле.ТипЗначения = ТипЗначения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВычисляемоеПоле;
	
КонецФункции

// Возвращает ссылку на новый ресурс по новому вычисляемому полю в переданной схеме компоновки данных.
//
// Параметры:
//  СхемаКД  - <СхемаКомпоновкиДанных> - схема компоновки данных в которой необходимо создать новый ресурс
//  ПутьКДанным  - <Строка> - путь к данным нового вычисляемого поля и ресурса схемы компоновки данных
//  ВыражениеПоля  - <Строка> - выражение вычисления нового вычисляемого поля (необязательное по умолчанию "Неопределено")
//  Агрегат  - <Строка> - агрегатная функция нового ресурса (необязательное по умолчанию "Максимум")
//  ВыражениеРесурса  - <Строка> - выражение вычисления нового ресурса (необязательное).
//
// Возвращаемое значение:
//   <ПолеИтогаСхемыКомпоновкиДанных> - ссылка на новый ресурс схемы компоновки данных.
//
Функция НовыйВычисляемыйРесурс(Схема, ПутьКДанным, ВыражениеПоля = "Неопределено", Агрегат = "Максимум", ВыражениеРесурса = "") Экспорт
	
	НовоеВычисляемоеПоле = НовоеВычисляемоеПоле(Схема, ПутьКДанным, ВыражениеПоля);
	Ресурс = НовыйРесурс(Схема, ПутьКДанным, Агрегат, ВыражениеРесурса);
	
	Возврат Ресурс;
	
КонецФункции

// Возвращает ссылку на новое поле выбора в переданной структуре схемы компоновки данных.
//
// Параметры:
//  СтруктураКД  - <ГруппировкаКомпоновкиДанных>,
//                   <ТаблицаКомпоновкиДанных>,
//                   <ГруппировкаТаблицыКомпоновкиДанных> - структура схемы компоновки в которую необходимо добавить
//                                                          новое поле выбора
//  Поле  - <Строка> - путь к данным нового поля выбора
//  Заголовок  - <Строка> - заголовок нового поля выбора (необязательное по умолчанию "Поле").
//
// Возвращаемое значение:
//   <ВыбранноеПолеКомпоновкиДанных> - ссылка на новое поле выбора схемы компоновки данных.
//
Функция НовоеПолеВыбора(СтруктураКД, Поле, Заголовок = "") Экспорт
	
	НовоеПолеВыбора = СтруктураКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Поле);
	НовоеПолеВыбора.Заголовок = ?(ПустаяСтрока(Заголовок),Поле,Заголовок);
	
	Возврат НовоеПолеВыбора;
	
КонецФункции

// Возвращает ссылку на новую группировку в переданной структуре схемы компоновки данных.
//
// Параметры:
//  СтруктураКД  - <ГруппировкаКомпоновкиДанных>,
//                   <ГруппировкаТаблицыКомпоновкиДанных>,
//                   <КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных>,
//                   <КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных> - структура схемы компоновки в которую
//                                                                          необходимо добавить новую группировку
//  ИмяПоляГруппировки  - <Строка> - имя поля группировки
//  ТипГруппировки  - <ТипГруппировкиКомпоновкиДанных> - тип группировки Элементы (БезИерархии), Иерархия, ТолькоИерархия.
//  ДобавлятьОдноименноеПолеГруппировки - Булево - Флаг добавления одноименного вложенного поля группировки. Значение по умолчанию Истина.
//
// Возвращаемое значение:
//   <ГруппировкаКомпоновкиДанных> - ссылка на новую группировку схемы компоновки данных.
//
Функция НоваяГруппировка(СтруктураКД, ИмяПоляГруппировки = "", ТипГруппировки = Неопределено, ДобавлятьОдноименноеПолеГруппировки = Истина) Экспорт
	
	Если ТипЗнч(СтруктураКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ИначеЕсли ТипЗнч(СтруктураКД) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ИначеЕсли ТипЗнч(СтруктураКД) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Добавить();
		
	ИначеЕсли ТипЗнч(СтруктураКД) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Структура.Добавить();
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДобавлятьОдноименноеПолеГруппировки Тогда
		НовоеПолеГруппировки(Группировка, ИмяПоляГруппировки, ТипГруппировки);
	КонецЕсли;
	
	Группировка.Использование = Истина;
	Группировка.Имя = ИмяПоляГруппировки;
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат Группировка;
	
КонецФункции

// Возвращает ссылку на новое поле группировки в переданной группировке схемы компоновки данных.
//
// Параметры:
//  Группировка  - <ГруппировкаКомпоновкиДанных> - структура схемы компоновки в которую необходимо добавить новую группировку
//  ИмяПоляГруппировки  - <Строка> - имя поля группировки
//  ТипГруппировки  - <ТипГруппировкиКомпоновкиДанных> - тип группировки (необязательное по умолчанию Неопределено).
//
// Возвращаемое значение:
//   <ПолеГруппировкиКомпоновкиДанных > - ссылка на новое поле группировки схемы компоновки данных.
//
Функция НовоеПолеГруппировки(Группировка, ИмяПоляГруппировки = "", ТипГруппировки = Неопределено) Экспорт
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	Если НЕ ПустаяСтрока(ИмяПоляГруппировки) Тогда
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляГруппировки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипГруппировки) Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировки;
	КонецЕсли;
	
	Возврат ПолеГруппировки;
	
КонецФункции

// Возвращает ссылку на новый элемент порядка в переданной настройке схемы компоновки данных.
//
// Параметры:
//  НастройкиКомпоновщика - <КомпоновщикНастроекКомпоновкиДанных>,<НастройкиКомпоновкиДанных> - настройки схемы
//      компоновки в которые необходимо добавить новый порядок
//  ИмяПоля - <Строка>, <ПолеКомпоновкиДанных> - поля компоновки по которому необходимо установить сортировку (необязательное)
//  Сортировка  - <Строка> - направление сортировки "ВОЗР", "УБЫВ" (необязательное по умолчанию "ВОЗР").
//
// Возвращаемое значение:
//   <ЭлементПорядкаКомпоновкиДанных> - ссылка на новый элемент порядка настроек схемы компоновки данных.
//
Функция НовыйПорядок(НастройкиКомпоновщика, ИмяПоля = "", Сортировка = "ВОЗР") Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	
	НовыйПорядок = НастройкиКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйПорядок.Использование = Истина;
	Если НЕ ПустаяСтрока(ИмяПоля) Тогда
		НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЕсли;
	НовыйПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных[Сортировка];
	
	Возврат НовыйПорядок;
	
КонецФункции

// Устанавливает параметр вывода в переданных настройках схемы компоновки данных
//
// Параметры:
//  НастройкиКомпоновщика - <КомпоновщикНастроекКомпоновкиДанных>, <НастройкиКомпоновкиДанных> - настройки схемы компоновки
//  ИмяПараметра - <Строка> - имя параметра
//  Значение  - <Произвольный> - значение параметра вывода (необязательное)
//  Использование  - <Булево> - использование параметра вывода (необязательное по умолчанию Истина).
//
Процедура УстановитьПараметрВывода(НастройкиКомпоновщика, ИмяПараметра, Значение = Неопределено, Использование = Истина) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	УстановитьПараметр(НастройкиКД.ПараметрыВывода, ИмяПараметра, Значение, Использование);
	
КонецПроцедуры

// Устанавливает ограничения полей набора данных схемы компоновки данных
//
// Параметры:
//  СхемаКД - <СхемаКомпоновкиДанных> - схема компоновки данных
//  ИменаПолей - <Строка> - имена полей перечисленные через запятую для которых необходимо установить ограничения
//  ОграничениеПоля  - <Строка> - ограничение поля "Группировка", "Поле", "Порядок", "Условие".
//
Процедура УстановитьОграничениеПолей(СхемаКД, ИменаПолей, ОграничениеПоля) Экспорт
	
	ЗначениеОграниченияПоля = Истина;
	ЗначениеОграниченияРеквизита = Неопределено;
	ОграничениеРеквизита = Неопределено;
	Если ОграничениеРеквизита = Неопределено Тогда
		ОграничениеРеквизита = ОграничениеПоля;
	КонецЕсли;
	
	Если ЗначениеОграниченияРеквизита = Неопределено Тогда
		ЗначениеОграниченияРеквизита = ЗначениеОграниченияПоля;
	КонецЕсли;
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолей);
	Для Каждого НаборДанных Из СхемаКД.НаборыДанных Цикл
		Для Каждого ПутьКДанным Из МассивПолей Цикл
			Поле = НаборДанных.Поля.Найти(ПутьКДанным);
			Если Поле <> Неопределено Тогда
				Поле.ОграничениеИспользования[ОграничениеПоля] = ЗначениеОграниченияПоля;
				Поле.ОграничениеИспользованияРеквизитов[ОграничениеРеквизита] = ЗначениеОграниченияРеквизита;
			КонецЕсли;
		КонецЦикла;// по полям набора данных
	КонецЦикла;// по наборам данных СКД
	
КонецПроцедуры

// Устанавливает роль поля набора данных схемы компоновки данных
//
// Параметры:
//  НаборДанных - <НаборДанныхЗапросСхемыКомпоновкиДанных>, <НаборДанныхОбъектСхемыКомпоновкиДанных> - набор данных
//      схемы компоновки данных
//  ПутьКДанным - <Строка> - имя поля для которого необходимо установить роль схемы компоновки
//  РольПоля  - <Структура> - ключи - значение ключа структуры:
//		ВыражениеВидаСчета - ""
//		ГруппаОстатка - ""
//		ИгнорироватьЗначенияNULL - Ложь
//		Измерение - Ложь
//		НомерПериода - 0
//		Обязательное - Ложь
//		Остаток - Ложь
//		ПолеСчета - ""
//		РеквизитИзмерения - Ложь
//		РодительскоеИзмерение - ""
//		Счет - Ложь
//		ТипБухгалтерскогоОстатка - ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет
//		ТипОстатка - ТипОстаткаКомпоновкиДанных.Нет
//		ТипПериода - ТипПериодаКомпоновкиДанных.Основной
//
Процедура УстановитьРольПоляНабора(НаборДанных, ПутьКДанным, РольПоля = Неопределено) Экспорт
	
	Если РольПоля = Неопределено Тогда
		РольПоля = НоваяРольПоляНабораДанных();
	КонецЕсли;
	
	ПолеНабора = НаборДанных.Поля.Найти(ПутьКДанным);
	ЗаполнитьЗначенияСвойств(ПолеНабора.Роль, РольПоля);
	
КонецПроцедуры

// Возвращает структуру роли поля набора данных схемы компоновки данных
// с заполненными пустыми значениями по умолчанию.
//
// Возвращаемое значение: 
//	Структура, ключи - значение ключа структуры:
//		ВыражениеВидаСчета - ""
//		ГруппаОстатка - ""
//		ИгнорироватьЗначенияNULL - Ложь
//		Измерение - Ложь
//		НомерПериода - 0
//		Обязательное - Ложь
//		Остаток - Ложь
//		ПолеСчета - ""
//		РеквизитИзмерения - Ложь
//		РодительскоеИзмерение - ""
//		Счет - Ложь
//		ТипБухгалтерскогоОстатка - ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет
//		ТипОстатка - ТипОстаткаКомпоновкиДанных.Нет
//		ТипПериода - ТипПериодаКомпоновкиДанных.Основной
//
Функция НоваяРольПоляНабораДанных() Экспорт
	
	НоваяРоль = Новый Структура;
	НоваяРоль.Вставить("ВыражениеВидаСчета"      , "");
	НоваяРоль.Вставить("ГруппаОстатка"           , "");
	НоваяРоль.Вставить("ИгнорироватьЗначенияNULL", Ложь);
	НоваяРоль.Вставить("Измерение"               , Ложь);
	НоваяРоль.Вставить("НомерПериода"            , 0);
	НоваяРоль.Вставить("Обязательное"            , Ложь);
	НоваяРоль.Вставить("Остаток"                 , Ложь);
	НоваяРоль.Вставить("ПолеСчета"               , "");
	НоваяРоль.Вставить("РеквизитИзмерения"       , Ложь);
	НоваяРоль.Вставить("РодительскоеИзмерение"   , "");
	НоваяРоль.Вставить("Счет"                    , Ложь);
	НоваяРоль.Вставить("ТипБухгалтерскогоОстатка", ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет);
	НоваяРоль.Вставить("ТипОстатка"              , ТипОстаткаКомпоновкиДанных.Нет);
	НоваяРоль.Вставить("ТипПериода"              , ТипПериодаКомпоновкиДанных.Основной);
	Возврат НоваяРоль;
	
КонецФункции

// Возвращает ссылку на новый макет области
//
// Параметры:
//  СхемаКД - <СхемаКомпоновкиДанных> - схема компоновки данных
//  МакетОбласти  - <ОписанияМакетовСхемыКомпоновкиДанных> - <описание параметра>
//                 <продолжение описания параметра>.
//
// Возвращаемое значение:
//   <ОписаниеМакетаСхемыКомпоновкиДанных> - описание макета схемы компоновки данных.
//
Функция ДобавитьМакетСхемы(Схема, МакетОбласти, ИмяМакета) Экспорт
	
	ОписаниеМакета = Схема.Макеты.Добавить();
	ОписаниеМакета.Макет = МакетОбласти;
	ОписаниеМакета.Имя = ИмяМакета;
	Возврат ОписаниеМакета;
	
КонецФункции

// Возвращает ссылку на новую связь наборов данных схемы компоновки данных
//
// Параметры:
//  СКД  - <СхемаКомпоновкиДанных> - схема компоновки данных в которой необходимо добавить связь наборов
//  НаборДанныхИсточник  - <НаборДанныхЗапросСхемыКомпоновкиДанных>, <НаборДанныхОбъектСхемыКомпоновкиДанных> - набор
//      данных источник связи
//  НаборДанныхПриемник  - <НаборДанныхЗапросСхемыКомпоновкиДанных>, <НаборДанныхОбъектСхемыКомпоновкиДанных> - набор
//      данных приемник связи
//  ВыражениеИсточник  - <Строка> - Выражение, по которому будет определяться значение связи источника
//  ВыражениеПриемник  - <Строка> - Выражение, по которому будет определяться значение связи приемника (необязательное).
//
// Возвращаемое значение:
//   <СвязьНаборовДанныхСхемыКомпоновкиДанных> - ссылка на новую связь наборов данных.
//
Функция НоваяСвязьНаборов(СКД, НаборДанныхИсточник, НаборДанныхПриемник, ВыражениеИсточник, ВыражениеПриемник = "") Экспорт
	
	Связь = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = 	НаборДанныхИсточник;
	Связь.НаборДанныхПриемник = 	НаборДанныхПриемник;
	Связь.ВыражениеИсточник = 		ВыражениеИсточник;
	Если ВыражениеПриемник = "" Тогда
		Связь.ВыражениеПриемник = 		ВыражениеИсточник;
	Иначе
		Связь.ВыражениеПриемник = 		ВыражениеПриемник;
	КонецЕсли;
	
	Возврат Связь;
	
КонецФункции

// Копирует элементы отбора из одной коллекции отбора в другую
//
// Параметры:
//  Источник - ОтборКомпоновкиДанных - откуда копировать
//  Приемник - ОтборКомпоновкиДанных - куда копировать
//  ТолькоИспользуемые - Булево - копировать только используемые
//  ПоляИсключения - Структура - в ключах структуры перечислены поля которые не должны попасть в отбор приемник
//  Постфикс - Строка - произвольная строка которая будет добавлена к имени левого поля.
//  ПроверятьДоступностьПолей - Булево. Проверять доступность полей отбора при копировании. По умолчанию Ложь.
//
Процедура СкопироватьОтбор(ОтборИсточник, ОтборПриемник, ТолькоИспользуемые = Ложь, ПоляИсключения = Неопределено, Постфикс = "", ПроверятьДоступностьПолей = Ложь) Экспорт
	
	ПараметрыПроверкиДоступностиПолей = Новый Структура;
	ПараметрыПроверкиДоступностиПолей.Вставить("ПроверятьДоступностьПолей", ПроверятьДоступностьПолей);
	
	ДоступныеПоляОтбора = Новый ТаблицаЗначений;
	ДоступныеПоляОтбора.Колонки.Добавить("ПолеКомпоновки");
	ДоступныеПоляОтбора.Колонки.Добавить("ИмяПоля");
	Если ПроверятьДоступностьПолей Тогда
		ЗаполнитьДоступныеПоляРекурсивно(ДоступныеПоляОтбора, ОтборПриемник.ДоступныеПоляОтбора.Элементы);
	КонецЕсли;
	ДоступныеПоляОтбора.Индексы.Добавить("ПолеКомпоновки");
	ДоступныеПоляОтбора.Индексы.Добавить("ИмяПоля");
	
	ПараметрыПроверкиДоступностиПолей.Вставить("ДоступныеПоляОтбора", ДоступныеПоляОтбора);
	
	СкопироватьОтборРекурсивно(ОтборИсточник, ОтборПриемник, ТолькоИспользуемые, ПоляИсключения, Постфикс, ПараметрыПроверкиДоступностиПолей);
	
КонецПроцедуры

// Возвращает ссылку на группировку компоновки в переданной структуре схемы компоновки данных.
//
// Параметры:
//  СтруктураКД - <КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных> - отбор схемы компоновки в который необходимо
//                                                                        добавить новый элемент
//  ИмяЭлемента - <Строка> - имя поля компоновки по которому необходимо найти группировка.
//
// Возвращаемое значение:
//   <ГруппировкаКомпоновкиДанных> - ссылка на найденный элемент группировки схемы компоновки данных.
//
Функция НайтиГруппировку(СтруктураКД, ИмяЭлемента) Экспорт
	
	Результат = Неопределено;
	Для Каждого Элемент Из СтруктураКД Цикл
		Если Элемент.Имя = ИмяЭлемента Тогда
			Результат = Элемент;
			Прервать;
		Иначе
			Результат = НайтиГруппировку(Элемент.Структура, ИмяЭлемента);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на элемент отбора в переданном отборе схемы компоновки данных
//
// Параметры:
//  ОтборКД - <ОтборКомпоновкиДанных> - отбор схемы компоновки в который необходимо добавить новый элемент
//  ИмяЭлемента - <Строка> - имя поля компоновки по которому необходимо найти элемент отбора
//  ЗначениеОтбора - <ПроизвольноеЗначение> - установленное значение отбора по которому необходимо найти элемент отбора
//  ВидСравнения - <ВидСравненияКомпоновкиДанных> - установленный вид сравнения по которому необходимо найти элемент отбора.
//
// Возвращаемое значение:
//   <ЭлементОтбораКомпоновкиДанных> - ссылка на найденный элемент отбора схемы компоновки данных.
//
Функция НайтиЭлементОтбора(ОтборКД, ИмяЭлемента, ЗначениеОтбора = "#НеУчитывать#", ВидСравнения = Неопределено) Экспорт
	
	Результат = Неопределено;
	Для Каждого ЭлементОтбора Из ОтборКД.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = НайтиЭлементОтбора(ЭлементОтбора, ИмяЭлемента);
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлемента) Тогда
			Если ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора ИЛИ ЗначениеОтбора = "#НеУчитывать#" Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравнения ИЛИ ВидСравнения = Неопределено Тогда
					Результат = ЭлементОтбора;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Добавляет новый параметр в переданную коллекцию параметров настроек схемы компоновки данных.
//
// Параметры:
//  Параметры - <КомпоновщикНастроекКомпоновкиДанных>, <НастройкиКомпоновкиДанных> - настройки схемы компоновки
//  ИмяПараметра - <ПараметрыДанных>, <ПараметрыВывода> - коллекция параметров компоновки данных
//  Значение  - <Произвольный> - значение параметра компоновки (необязательное)
//  Использование  - <Булево> - использование параметра данных (необязательное по умолчанию Истина).
//
Процедура УстановитьПараметр(Параметры, ИмяПараметра, Значение = Неопределено, Использование = Истина) Экспорт
	
	Параметр = Параметры.Элементы.Найти(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр.Использование = Использование;
	Если Использование Тогда
		Параметр.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет схему компоновки данных и возвращает таблицу результата
//
// Параметры:
//  СхемаКомпоновкиДанных  - <СхемаКомпоновкиДанных> - исполняемая схема компоновки данных
//  НастройкиКомпоновщика  - <КомпоновщикНастроекКомпоновкиДанных> - компоновщик настроек исполняемой схемы компоновки данных
//  ВнешниеНаборыДанных  - <Структура> - внешние наборы компоновки данных - ключ - наименование внешнего набора,
//                                       значение - таблица значений внешнего набора
//  ВыводВДерево - <Булево> - если Истина выводить в дерево значений.
//
// Возвращаемое значение:
//   <ТаблицаЗначений>, <ДеревоЗначений> - результат выполнения схемы компоновки данных.
//
Функция ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика, ВнешниеНаборыДанных = Неопределено, ВыводВДерево = Ложь) Экспорт
	
	МакетКомпоновщика = ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика);
	Возврат ВыгрузитьРезультатСКДПоМакету(МакетКомпоновщика, ВнешниеНаборыДанных, ВыводВДерево);
	
КонецФункции

// Возвращает ссылку на новый элемент отбора в переданном отборе схемы компоновки данных.
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных - отбор схемы компоновки, в который необходимо добавить новый элемент
//  ЛевоеЗначение - Строка, ПолеКомпоновкиДанных - поле компоновки, по которому необходимо установить отбор (необязательное)
//  ПравоеЗначение  - Произвольный, Строка, ПолеКомпоновкиДанных - значение отбора (необязательное) или поле компоновки
//  ТипОтбора  - ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - тип нового элемента отбора (необязательное)
//  ВидСравнения  - ВидСравненияКомпоновкиДанных - вид сравнения левого и правого значения
//  ПравоеЗначениеПоле  - Булево - указывает использовать ли в качестве правого значения поле компоновки данных.
//
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - ссылка на новый элемент отбора схемы компоновки данных.
//
Функция НовыйОтбор(Отбор, ЛевоеЗначение, ПравоеЗначение = Неопределено, ТипОтбора = Неопределено, ВидСравнения = Неопределено, ПравоеЗначениеПоле = Ложь) Экспорт
	
	Если ТипОтбора = Неопределено Тогда
		ТипОтбора = Тип("ЭлементОтбораКомпоновкиДанных");
	КонецЕсли;
	
	НовыйОтбор = Отбор.Элементы.Добавить(ТипОтбора);
	Если ЛевоеЗначение <> Неопределено Тогда
		Если ТипЗнч(ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			НовыйОтбор.ЛевоеЗначение = ЛевоеЗначение;
		Иначе
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Если ПравоеЗначениеПоле Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
				НовыйОтбор.ПравоеЗначение = ПравоеЗначение;
			Иначе
				НовыйОтбор.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПравоеЗначение);
			КонецЕсли;
		Иначе
			НовыйОтбор.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОтбора = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Если ВидСравнения = Неопределено Тогда
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			КонецЕсли;
		Иначе
			НовыйОтбор.ВидСравнения = ВидСравнения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйОтбор;
	
КонецФункции

// Устанавливает новый отбор в переданном отборе схемы компоновки данных
//
// Параметры:
//  ОтборКД - <ОтборКомпоновкиДанных> - отбор схемы компоновки в который необходимо добавить новый элемент
//  ЛевоеЗначение - <Строка>, <ПолеКомпоновкиДанных> - поле компоновки по которому необходимо установить отбор
//  ПравоеЗначение  - <Произвольный> - значение отбора (необязательное)
//  ВидСравнения  - <ВидСравненияКомпоновки> - вид сравнение компоновки данных (необязательное)
//  Использование  - <Булево> - использование нового элемента отбора (необязательное по умолчанию Истина).
//
Процедура УстановитьОтбор(ОтборКД, ЛевоеЗначение, ПравоеЗначение = Неопределено, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	ЭлементОтбора = НайтиЭлементОтбора(ОтборКД, ЛевоеЗначение);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = НовыйОтбор(ОтборКД, ЛевоеЗначение, ПравоеЗначение);
	КонецЕсли;
	ЭлементОтбора.Использование = Использование;
	Если ВидСравнения <> Неопределено Тогда
		ЭлементОтбора.ВидСравнения = ВидСравнения;
	КонецЕсли;
	Если Использование Тогда
		ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметр данных в переданных настройках схемы компоновки данных
//
// Параметры:
//  НастройкиКомпоновщика - <КомпоновщикНастроекКомпоновкиДанных>, <НастройкиКомпоновкиДанных> - настройки схемы компоновки
//  ИмяПараметра - <Строка> - имя параметра компоновки данных
//  Значение  - <Произвольный> - значение параметра компоновки (необязательное)
//  Использование  - <Булево> - использование параметра данных (необязательное по умолчанию Истина).
//
Процедура УстановитьПараметрКомпоновки(НастройкиКомпоновщика, ИмяПараметра, Значение = Неопределено, Использование = Истина) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	УстановитьПараметр(НастройкиКД.ПараметрыДанных, ИмяПараметра, Значение, Использование);
	
КонецПроцедуры

// Возвращает компоновщик настроек для переданной схемы компоновки данных
//
// Параметры:
//  Схема                    - СхемаКомпоновкиДанных - схема компоновки данных для которой необходимо создать
//                                                     компоновщик настроек
//  ВосстанавливатьНастройки - Булево - признак необходимости восстанавливать настройки.
//
// Возвращаемое значение:
//   КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек для варианта по умолчанию.
//
Функция КомпоновщикСхемы(Схема, ВосстанавливатьНастройки = Истина) Экспорт
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(ИсточникДоступныхНастроек);
	Компоновщик.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	Если ВосстанавливатьНастройки Тогда
		Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	КонецЕсли;
	
	Возврат Компоновщик;
	
КонецФункции

// Возвращает макет компоновки данных
//
// Параметры:
//  СхемаКомпоновкиДанных  - <СхемаКомпоновкиДанных> - исполняемая схема компоновки данных
//  НастройкиКомпоновщика  - <КомпоновщикНастроекКомпоновкиДанных>, <НастройкиКомпоновкиДанных> - настройки исполняемой
//      схемы компоновки данных.
//
// Возвращаемое значение:
//   <МакетКомпоновкиДанных> - макет компоновки данных.
//
Функция ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.ПолучитьНастройки();
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Возврат МакетКомпоновки;
	
КонецФункции

// Выполняет схему компоновки данных и возвращает таблицу результата
//
// Параметры:
//  МакетКомпоновки  - <МакетКомпоновкиДанных> - макет компоновки данных
//  ВнешниеНаборыДанных  - <Структура> - внешние наборы компоновки данных - ключ - наименование внешнего набора,
//                                       значение - таблица значений внешнего набора
//  ВыводВДерево - <Булево> - если Истина выводить в дерево значений.
//
// Возвращаемое значение:
//   <ТаблицаЗначений>, <ДеревоЗначений> - результат выполнения схемы компоновки данных.
//
Функция ВыгрузитьРезультатСКДПоМакету(МакетКомпоновки, ВнешниеНаборыДанных = Неопределено, ВыводВДерево = Ложь) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Если ВыводВДерево Тогда
		Результат = Новый ДеревоЗначений;
	КонецЕсли;
	
	// Создаем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных = Неопределено Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
	КонецЕсли;
	
	// Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на новую группу полей в переданном наборе данных
//
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных,НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных в
//      котором необходимо создать новое поле
//  Поле         - Строка - имя нового поля схемы компоновки данных
//  ПутьКДанным  - Строка - путь к данным нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  Заголовок    - Строка - заголовок нового поля схемы компоновки данных (необязательное по умолчанию равно "").
//
// Возвращаемое значение:
//  ПапкаПолейНабораДанныхСхемыКомпоновкиДанных - описание возвращаемого значения.
//
Функция НоваяГруппаНабора(НаборДанных, ПутьКДанным, Заголовок = "") Экспорт
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = ПутьКДанным;
	КонецЕсли;
	
	НоваяГруппа = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
	НоваяГруппа.ПутьКДанным = ПутьКДанным;
	НоваяГруппа.Заголовок = Заголовок;
	
	Возврат НоваяГруппа;
	
КонецФункции

//++НЕ УТ

// Возвращает родительский элемент вида "Таблица", в котором размещены переданные в параметрах элементы.
// 
// Параметры:
//	ЭлементыОтчета - ДеревоЗначений, ДанныеФормыДерево - элементы или элементы, для которых необходимо определить таблицу, в которой они размещены
//	АдресСтруктурыЭлемента (необязательный) - Строка - адрес во временном хранилище.
//
// Возвращаемое значение:
//	ТаблицаЭлемента - ДанныеФормыДерево, ДанныеФормыЭлементДерева - элемент дерева или строка дерева вида "Таблица", в котором находится переданный элемент.
// 
Функция ТаблицаЭлемента(ЭлементыОтчета, АдресСтруктурыЭлемента = Неопределено) Экспорт
	
	Если (ТипЗнч(ЭлементыОтчета) = Тип("ДеревоЗначений")
			ИЛИ ТипЗнч(ЭлементыОтчета) = Тип("ДанныеФормыДерево"))
		И АдресСтруктурыЭлемента = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Неверные параметры функции ""Таблица элемента""'");
	КонецЕсли;
	
	Если ТипЗнч(ЭлементыОтчета) = Тип("ДеревоЗначений")
		ИЛИ ТипЗнч(ЭлементыОтчета) = Тип("ДанныеФормыДерево") Тогда
		СтрокаТекущегоЭлемента = ПодчиненныйЭлемент(ЭлементыОтчета, "АдресСтруктурыЭлемента", АдресСтруктурыЭлемента);
	Иначе
		СтрокаТекущегоЭлемента = ЭлементыОтчета;
	КонецЕсли;
	
	Если СтрокаТекущегоЭлемента.ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВКолонках")
		ИЛИ СтрокаТекущегоЭлемента.ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВСтроках")
		ИЛИ СтрокаТекущегоЭлемента.ВидЭлемента = ВидЭлемента("ТаблицаСложная") Тогда
		
		Возврат СтрокаТекущегоЭлемента;
		
	КонецЕсли;
	
	Таблица = КорневойЭлемент(СтрокаТекущегоЭлемента, ВидЭлемента("ТаблицаПоказателиВКолонках"));
	
	Если Таблица = Неопределено Тогда
		Таблица = КорневойЭлемент(СтрокаТекущегоЭлемента, ВидЭлемента("ТаблицаПоказателиВСтроках"));
		Если Таблица = Неопределено Тогда
			Таблица = КорневойЭлемент(СтрокаТекущегоЭлемента, ВидЭлемента("ТаблицаСложная"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Процедура добавляет строки в дерево
//
// Параметры:
//  СтрокиИсточника  - ДанныеФормыЭлементДерево - строки дерева источника
//  СтрокиПриемника  - ДанныеФормыЭлементДерево - строки дерева приемника.
//
Процедура ДобавитьСтрокиВДерево(СтрокиИсточника, СтрокиПриемника)
	
	ДобавляемыеСтрокиИсточника = ПодчиненныеСтроки(СтрокиИсточника);
	ДополняемыеСтрокиПриемника = ПодчиненныеСтроки(СтрокиПриемника);
	КонтрольПолей = Новый Структура("НестандартнаяКартинка,ЭтоСвязанный");
	Для Каждого СтрокаИсточника Из ДобавляемыеСтрокиИсточника Цикл
		
		НоваяСтрока = ДополняемыеСтрокиПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		ЗаполнитьЗначенияСвойств(КонтрольПолей, НоваяСтрока);
		
		Если КонтрольПолей.НестандартнаяКартинка <> Неопределено
			И КонтрольПолей.ЭтоСвязанный <> Неопределено Тогда
			НоваяСтрока.НестандартнаяКартинка = НоваяСтрока.НестандартнаяКартинка + Число(НоваяСтрока.ЭтоСвязанный);
		КонецЕсли;
		
		ДобавитьСтрокиВДерево(СтрокаИсточника, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров установки нового родителя.
//
// Возвращаемое значение:
// 	Структура - Структура параметров установки нового родителя.
//
Функция ШаблонПараметровУстановкиНовогоРодителя() Экспорт
	
	ШаблонПараметров = Новый Структура;
	ШаблонПараметров.Вставить("ЭтоСохраненные", Ложь);
	ШаблонПараметров.Вставить("КонтрольЗацикливания", Истина);
	ШаблонПараметров.Вставить("ИдентификаторФормы", Неопределено);
	ШаблонПараметров.Вставить("Копирование", Ложь);
	ШаблонПараметров.Вставить("ПараметрыИдентификаторов", Неопределено);
	
	Возврат ШаблонПараметров;
	
КонецФункции

// Переносит строку и все ее подчиненные элементы в новую ветку дерева.
//
//	Параметры:
//		ТекущаяСтрока - ДанныеФормыЭлементДерева, СтрокаДереваЗначений, СтрокаДерева, ДеревоЗначений - строка дерева элементов отчета
//		НовыйРодитель - ДанныеФормыЭлементДерева, СтрокаДереваЗначений, СтрокаДерева, ДеревоЗначений - новая родительская ветка дерева элементов отчета
//		ПараметрыУстановкиРодителя - Структура - Структура параметров со свойствами:
//			*ЭтоСохраненные - Булево - флаг показывающий, что это строки дерева сохраненных элементов
//			*КонтрольЗацикливания - Булево - флаг определяющий выполнение контроля зацикливания строк
//			*ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы во временной хранилище 
//			                                               которой необходимо поместить данные элемента.
//			*Копирование - Булево - Флаг копирования элемента.
//			*ПараметрыИдентификаторов - Структура - Структура, содержащая параметры идентификаторов.
//
Процедура УстановитьНовогоРодителя(ТекущаяСтрока, НовыйРодитель, ПараметрыУстановкиРодителя) Экспорт
	
	ЭтоСохраненные = ПараметрыУстановкиРодителя.ЭтоСохраненные;
	КонтрольЗацикливания = ПараметрыУстановкиРодителя.КонтрольЗацикливания;
	ИдентификаторФормы = ПараметрыУстановкиРодителя.ИдентификаторФормы;
	Копирование = ПараметрыУстановкиРодителя.Копирование;
	ПараметрыИдентификаторов = ПараметрыУстановкиРодителя.ПараметрыИдентификаторов;
	
	Если КонтрольЗацикливания Тогда
		Родитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(НовыйРодитель);
		Пока Родитель <> Неопределено Цикл
			Если ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева") И Родитель.ПолучитьИдентификатор() = ТекущаяСтрока.ПолучитьИдентификатор()
				ИЛИ ЗначениеЗаполнено(Родитель.ЭлементОтчета) И Родитель.ЭлементОтчета = ТекущаяСтрока.ЭлементОтчета
				ИЛИ ЗначениеЗаполнено(Родитель.АдресСтруктурыЭлемента) И Родитель.АдресСтруктурыЭлемента = ТекущаяСтрока.АдресСтруктурыЭлемента Тогда
				Возврат;
			КонецЕсли;
			Родитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(Родитель);
		КонецЦикла;
	КонецЕсли;
	
	СтрокиРодителя = ПодчиненныеСтроки(НовыйРодитель);
	Если ЭтоСохраненные Тогда
		НоваяСтрока = СтрокиРодителя.Добавить();
	Иначе
		Индекс = ФинансоваяОтчетностьКлиентСервер.ИндексНовойСтроки(СтрокиРодителя);//если в конце группы есть итог по группе, то новая строка должна встать перед ним
		НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	Если ПараметрыИдентификаторов <> Неопределено Тогда
		СоответствиеИдентификаторов = ПараметрыИдентификаторов.СоответствиеИдентификаторов;
		Если ПараметрыИдентификаторов.Режим = "Запомнить" Тогда
			СоответствиеИдентификаторов.Вставить(ТекущаяСтрока.ПолучитьИдентификатор(), НоваяСтрока.ПолучитьИдентификатор());
		ИначеЕсли ПараметрыИдентификаторов.Режим = "Восстановить" Тогда
			НоваяСтрока.ИндексСтрокиЭлементовОтчета = СоответствиеИдентификаторов[НоваяСтрока.ИндексСтрокиЭлементовОтчета];
			Для Сч = 2 По ПараметрыИдентификаторов.КоличествоИдентификаторов Цикл
				Если НоваяСтрока["ИндексСтрокиЭлементовОтчета" + Сч] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока["ИндексСтрокиЭлементовОтчета" + Сч] = 
					СоответствиеИдентификаторов[НоваяСтрока["ИндексСтрокиЭлементовОтчета" + Сч]];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторФормы <> Неопределено Тогда
		Если Копирование Тогда
			
			Если ЗначениеЗаполнено(НоваяСтрока.АдресСтруктурыЭлемента) Тогда
				НоваяСтрока.АдресСтруктурыЭлемента = 
					ФинансоваяОтчетностьВызовСервера.СкопироватьЭлементПоАдресу(
						НоваяСтрока.АдресСтруктурыЭлемента, ИдентификаторФормы);
						
			ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.АдресСтруктурыЭлемента)
					И ЗначениеЗаполнено(НоваяСтрока.ЭлементОтчета) Тогда
			
				НоваяСтрока.АдресСтруктурыЭлемента = 
					ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(
						НоваяСтрока.ЭлементОтчета, ИдентификаторФормы, Истина);
			КонецЕсли;
			
			НоваяСтрока.ЭлементОтчета = Неопределено;
		
		ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.АдресСтруктурыЭлемента)
			И ЗначениеЗаполнено(НоваяСтрока.ЭлементОтчета) Тогда
			
			НоваяСтрока.АдресСтруктурыЭлемента = 
				ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(
					НоваяСтрока.ЭлементОтчета, ИдентификаторФормы);
		
		КонецЕсли;
	КонецЕсли;
	
	СтрокиТекущейСтроки = ПодчиненныеСтроки(ТекущаяСтрока);
	Сч = СтрокиТекущейСтроки.Количество();
	
	Пока Сч > 0 Цикл
		
		НомерСтроки = СтрокиТекущейСтроки.Количество() - Сч;
		Подстрока = СтрокиТекущейСтроки[НомерСтроки];
		ПараметрыУстановкиРодителя = ШаблонПараметровУстановкиНовогоРодителя();
		ПараметрыУстановкиРодителя.ЭтоСохраненные = ЭтоСохраненные;
		ПараметрыУстановкиРодителя.КонтрольЗацикливания = Ложь;
		ПараметрыУстановкиРодителя.ИдентификаторФормы = ИдентификаторФормы;
		ПараметрыУстановкиРодителя.Копирование = Копирование;
		ПараметрыУстановкиРодителя.ПараметрыИдентификаторов = ПараметрыИдентификаторов;
		УстановитьНовогоРодителя(Подстрока, НоваяСтрока, ПараметрыУстановкиРодителя);
		Сч = Сч - 1;
		
	КонецЦикла;
	
	Если Не Копирование Тогда
		ТекущийРодитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(ТекущаяСтрока);
		Если ТекущийРодитель <> Неопределено Тогда
			ТекущаяКоллекцияСтрок = ПодчиненныеСтроки(ТекущийРодитель);
			ТекущаяКоллекцияСтрок.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Находит ближайший вверх по иерархии родительский элемент заданного вида.
// Параметры:
//	Дерево - ДанныеФормыДерево, ДанныеФормыЭлементДерева - элемент дерева для которого необходимо определить родительский элемент
//														если заданно дерево то результат будет определяться среди подчиненных строк первого уровня
//	ВидКорневогоЭлемента - Перечисление.ВидыЭлементовФинансовогоОтчета - вид родителя.
//
//	Возвращаемое значение:
//		РодительСтроки - ДанныеФормыЭлементДерева, СтрокаДереваЗначений.
Функция КорневойЭлемент(Дерево, ВидКорневогоЭлемента = Неопределено) Экспорт
	
	Если ВидКорневогоЭлемента = Неопределено Тогда
		ВидКорневогоЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ПустаяСсылка");
	КонецЕсли;
	
	КорневойЭлемент = Неопределено;
	Если ТипЗнч(Дерево) = Тип("ДанныеФормыДерево") Тогда
		ПодчиненныеСтроки = ПодчиненныеСтроки(Дерево);
		Для Каждого СтрокаДерева Из ПодчиненныеСтроки Цикл
			Если СтрокаДерева.ВидЭлемента = ВидКорневогоЭлемента Тогда
				КорневойЭлемент = СтрокаДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(Дерево);
		Пока КорневойЭлемент <> Неопределено Цикл
			Если КорневойЭлемент.ВидЭлемента = ВидКорневогоЭлемента Тогда
				Прервать;
			КонецЕсли;
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(КорневойЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат КорневойЭлемент;
	
КонецФункции

//--НЕ УТ

// Возвращает в зависимости от типа, коллекцию подчиненных элементов первого уровня переданной строки дерева элементов отчета.
//
//	Параметры:
//		СтрокаДерева - ДанныеФормыЭлементДерева, СтрокаДереваЗначений, КоллекцияСтрокДереваЗначений, ДанныеФормыДерево - строка дерева элементов отчета.
//
//	Возвращаемое значение:
//		ПодчиненныеСтроки - ДанныеФормыКоллекцияЭлементовДерева, КоллекцияСтрокДереваЗначений.
//
Функция ПодчиненныеСтроки(СтрокаДерева) Экспорт
	
	ТипСтрокиДерева = ТипЗнч(СтрокаДерева);
	ЭтоКоллекцияСтрок = ТипСтрокиДерева = Тип("ДанныеФормыКоллекцияЭлементовДерева")
	                ИЛИ ТипСтрокиДерева = Тип("КоллекцияСтрокДереваЗначений");
	
	Если ЭтоКоллекцияСтрок Тогда
		ПодчиненныеСтроки = СтрокаДерева;
	Иначе
		Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева")
			ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыДерево") Тогда
			ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Иначе
			ПодчиненныеСтроки = СтрокаДерева.Строки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПодчиненныеСтроки;
	
КонецФункции

// Находит ближайший вниз по иерархии элемент по значению заданного реквизита.
//
// Параметры:
//	Дерево - ДанныеФормыДерево, ДанныеФормыЭлементДерева - элемент дерева или строка дерева в котором необходимо произвести поиск
//	ИмяРеквизита - Строка - имя реквизита дерева значение которого сравнивается с заданным для поиска
//	ЗначениеРеквизита - Произвольный - значение реквизита дерева которое необходимо найти.
//
// Возвращаемое значение:
//	ДанныеФормыЭлементДерева, СтрокаДереваЗначений - подчиненный элемент.
//
Функция ПодчиненныйЭлемент(Дерево, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	Если ТипЗнч(Дерево) = Тип("ДеревоЗначений")
		ИЛИ ТипЗнч(Дерево) = Тип("СтрокаДереваЗначений") Тогда
		
		СтрокиДерева = Дерево.Строки;
		Возврат СтрокиДерева.Найти(ЗначениеРеквизита, ИмяРеквизита, Истина);
		
	КонецЕсли;
	
	ПодчиненныйЭлемент = Неопределено;
	ПодчиненныеСтроки = ПодчиненныеСтроки(Дерево);
	Для Каждого СтрокаДерева Из ПодчиненныеСтроки Цикл
		Если СтрокаДерева[ИмяРеквизита] = ЗначениеРеквизита Тогда
			ПодчиненныйЭлемент = СтрокаДерева;
			Прервать;
		КонецЕсли;
		ПодчиненныйЭлемент = ПодчиненныйЭлемент(СтрокаДерева, ИмяРеквизита, ЗначениеРеквизита);
		Если ПодчиненныйЭлемент <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодчиненныйЭлемент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции



// Копирует элементы отбора из одной коллекции отбора в другую
//
// Параметры:
//  Источник - ОтборКомпоновкиДанных - откуда копировать
//  Приемник - ОтборКомпоновкиДанных - куда копировать
//  ТолькоИспользуемые - Булево - копировать только используемые
//  ПоляИсключения - Структура - в ключах структуры перечислены поля которые не должны попасть в отбор приемник
//  Постфикс - Строка - произвольная строка которая будет добавлена к имени левого поля.
//  ПараметрыПроверкиДоступностиПолей - Структура - Параметры проверки доступности полей. Если необходимо проверять доступность полей
//   *ПроверятьДоступностьПолей - Булево. Проверять доступность полей отбора при копировании. По умолчанию Ложь.
//   *ДоступныеПоляОтбора - ТаблицаЗначений - Кэш доступных полей для проверки при иерархическом копировании отбора.
//     **ПолеКомпоновки - ПолеКомпоновки  - Поле компоновки данных
//     **ИмяПоля        - Строка          - Имя поля для проверок через точку.
//
Процедура СкопироватьОтборРекурсивно(ОтборИсточник, ОтборПриемник, ТолькоИспользуемые = Ложь, ПоляИсключения = Неопределено, Постфикс = "", ПараметрыПроверкиДоступностиПолей = Неопределено)
	
	ПроверятьДоступностьПолей = ПараметрыПроверкиДоступностиПолей.ПроверятьДоступностьПолей;
	ДоступныеПоляОтбора = ПараметрыПроверкиДоступностиПолей.ДоступныеПоляОтбора;
	
	Для Каждого Элемент Из ОтборИсточник.Элементы Цикл
		
		Если НЕ (ТолькоИспользуемые И Элемент.Использование ИЛИ НЕ ТолькоИспользуемые) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлемент = НовыйОтбор(ОтборПриемник,,,Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			СкопироватьОтборРекурсивно(Элемент, НовыйЭлемент, ТолькоИспользуемые, ПоляИсключения, Постфикс, ПараметрыПроверкиДоступностиПолей);
		Иначе
			
			Если Не ЗначениеЗаполнено(Элемент.ЛевоеЗначение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПоляИсключения) Тогда
				Поле = КомпоновкаДанныхКлиентСервер.РазделитьИмяПоляИРеквизита(Строка(Элемент.ЛевоеЗначение));
				Если ПоляИсключения.Свойство(Поле.Имя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьДоступностьПолей Тогда
				ПолеДоступно = Ложь;
				Если НЕ ДоступныеПоляОтбора.Найти(Элемент.ЛевоеЗначение, "ПолеКомпоновки") = Неопределено Тогда
					ПолеДоступно = Истина;
				КонецЕсли;
				Если НЕ ПолеДоступно Тогда
					ИмяПоляИРеквизит = КомпоновкаДанныхКлиентСервер.РазделитьИмяПоляИРеквизита(Строка(Элемент.ЛевоеЗначение));
					Если НЕ ДоступныеПоляОтбора.Найти(ИмяПоляИРеквизит.Имя, "ИмяПоля") = Неопределено Тогда
						ПолеДоступно = Истина;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ПолеДоступно Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлемент = НовыйОтбор(ОтборПриемник,,,Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			
			Если Постфикс <> "" Тогда
				Поле = КомпоновкаДанныхКлиентСервер.РазделитьИмяПоляИРеквизита(Строка(НовыйЭлемент.ЛевоеЗначение));
				НовоеИмяПоля = Поле.Имя + Постфикс + "." + Поле.Реквизит;
				Если СтрНайти(Поле.Имя, "Субконто") И СтрНайти("ДТКТ", ВРег(Постфикс))Тогда
					Номер = Прав(Поле.Имя, 1);
					Если СтрНайти("12345", Номер) Тогда
						Шаблон = СтрЗаменить(Поле.Имя, Номер, "%1");
						НовоеИмяПоля = СтрШаблон(Шаблон, Постфикс + Номер) + "." + Поле.Реквизит;
					КонецЕсли;
				КонецЕсли;
				НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НовоеИмяПоля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДоступныеПоляРекурсивно(ДоступныеПоля, ЭлементыДоступныхПолей)
	Для каждого ЭлементДоступныхПолей Из ЭлементыДоступныхПолей Цикл
		Если ЭлементДоступныхПолей.Папка Тогда
			ЗаполнитьДоступныеПоляРекурсивно(ДоступныеПоля, ЭлементДоступныхПолей.Элементы);
		Иначе
			НоваяСтрока = ДоступныеПоля.Добавить();
			НоваяСтрока.ПолеКомпоновки = ЭлементДоступныхПолей.Поле;
			НоваяСтрока.ИмяПоля = Строка(ЭлементДоступныхПолей.Поле);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


//++НЕ УТ

Функция ВидЭлемента(ИмяВидаЭлемента)
	
	Возврат Перечисления.ВидыЭлементовФинансовогоОтчета[ИмяВидаЭлемента];
	
КонецФункции

Процедура ДобавитьСтрокуСопоставленияКартинки(ТаблицаКартинок, ВидЭлемента, ИмяВспомогательныхДанных, ИндексКартинки)
	
	НоваяСтрока = ТаблицаКартинок.Добавить();
	Если Не ПустаяСтрока(ВидЭлемента) Тогда
		НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета[ВидЭлемента];
	КонецЕсли;
	НоваяСтрока.ИмяВспомогательногоЭлемента = ИмяВспомогательныхДанных;
	НоваяСтрока.ИндексКартинки = ИндексКартинки;
	
КонецПроцедуры

Функция ДополнитьРеквизитыСвязанныхЭлементов()
	
	Возврат 
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|"
	+
	"
	|ВЫБРАТЬ
	|	ДопРеквизиты.Ссылка КАК ЭлементОтчета,
	|	ДопРеквизиты.Реквизит,
	|	ДопРеквизиты.Значение
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ДопРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов КАК Справочник
	|		ПО Справочник.СвязанныйЭлемент = ДопРеквизиты.Ссылка
	|			И Справочник.Владелец = &ВидОтчета
	|			И Справочник.СвязанныйЭлемент <> ЗНАЧЕНИЕ(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка)";
	
КонецФункции

Процедура ДобавитьДоступныеПоляРекурсивно(СтрокиДерева, ДоступныеПоляВыбора, ТекущийУровень, Форма, ЗаголовокВерхнегоУровня)
	
	Если ТекущийУровень = 3 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДоступноеПолеВыбора Из ДоступныеПоляВыбора Цикл
		
		ЭтоСистемнаяПапка = 
			ДоступноеПолеВыбора.Папка 
			И (ДоступноеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля")
				Или ДоступноеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ПараметрыДанных"));
		
		Если ЭтоСистемнаяПапка Тогда
			Продолжить;
		КонецЕсли;
		
		Искомый = ПодходящееПолеВыбора(ДоступноеПолеВыбора, Форма);
		
		Если ТекущийУровень > 1 И Не Искомый Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка(ДоступноеПолеВыбора.Поле), ".");
		Если ЧастиПоля.Найти("Родитель") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДоступноеПолеВыбора.Папка Тогда
			Представление = ДоступноеПолеВыбора.Заголовок;
			ТекущийЗаголовок = ЗаголовокВерхнегоУровня;
		Иначе
			Представление = Сред(ДоступноеПолеВыбора.Заголовок, СтрДлина(ЗаголовокВерхнегоУровня) + 1);
			ТекущийЗаголовок = ЗаголовокВерхнегоУровня + "." + Представление;
		КонецЕсли;
		
		НоваяСтрокаДерева = СтрокиДерева.Добавить();
		НоваяСтрокаДерева.ЭтоГруппа = ДоступноеПолеВыбора.Папка;
		НоваяСтрокаДерева.Представление = Представление;
		НоваяСтрокаДерева.Значение = ДоступноеПолеВыбора.Поле;
		НоваяСтрокаДерева.Искомый = Искомый;
		НоваяСтрокаДерева.Картинка = ?(ДоступноеПолеВыбора.Папка, БиблиотекаКартинок.Папка, БиблиотекаКартинок.Элемент);
		НоваяСтрокаДерева.ТипЗначения = ДоступноеПолеВыбора.ТипЗначения;
		
		Если НоваяСтрокаДерева.Значение = Форма.ТекущееВыражение Тогда
			Форма.Элементы.ДеревоВыбора.ТекущаяСтрока = НоваяСтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;
		
		
		Если ДоступноеПолеВыбора.Папка Тогда
			НовыйУровень = ТекущийУровень;
		Иначе
			НовыйУровень = ТекущийУровень + 1;
		КонецЕсли;
		
		ДобавитьДоступныеПоляРекурсивно(НоваяСтрокаДерева.ПолучитьЭлементы(), 
						ДоступноеПолеВыбора.Элементы, НовыйУровень, Форма, ТекущийЗаголовок);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодходящееПолеВыбора(ДоступноеПолеВыбора, Форма)
	
	Результат = Ложь;
	
	Если ДоступноеПолеВыбора.Папка Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ДополнительноеСвойство) Тогда
		Результат = (Найти(Строка(ДоступноеПолеВыбора.Поле), Строка(Форма.ДополнительноеСвойство)) > 0);
	Иначе
		Для каждого Тип Из ДоступноеПолеВыбора.ТипЗначения.Типы() Цикл
			Если Форма.ТипЗначения.СодержитТип(Тип) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на новое поле выбора в переданной структуре схемы компоновки данных.
//
// Параметры:
//  НастройкиКомпоновщика - КомпоновщикНастроекКомпоновкиДанных,НастройкиКомпоновкиДанных - настройки схемы компоновки в
//      которые необходимо добавить новый параметр
//  ИмяПараметра - Строка - имя нового параметра
//  Значение  - Произвольный - значение нового параметра.
//
// Возвращаемое значение:
//   ЗначениеПараметраКомпоновкиДанных - ссылка на новый параметр настроек компоновки данных.
//
Функция НовыйПараметр(НастройкиКомпоновщика, ИмяПараметра, Значение = Неопределено) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	
	НовыйПараметр = НастройкиКД.ПараметрыДанных.Элементы.Добавить();
	НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	НовыйПараметр.Использование = Истина;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		НовыйПараметр.Значение = Значение;
	КонецЕсли;
	
	Возврат НовыйПараметр;
	
КонецФункции

//--НЕ УТ

#КонецОбласти
