
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	Если Параметры.Отказ 
		ИЛИ НЕ КаталогРасширенийВызовСервера.ЭтоРазделенныйСеанс() 
		ИЛИ НЕ КаталогРасширенийВызовСервера.КаталогРасширенийИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КаталогРасширений.Форма.ФормаУстановленныеРасширения",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	ИмяПараметраПриложения = ИмяПараметраПриложенияДляОбменаДанными();
	АдресОбменаДанными = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПараметрыПриложения[ИмяПараметраПриложения] = АдресОбменаДанными;
	КаталогРасширенийВызовСервера.ЗапуститьПолучениеПраваАдминистрирования(АдресОбменаДанными);
	
	ПодключитьОбработчикОжидания("ПолучитьПравоАдминистрированияВМоделиСервиса", 5);
	ПодключитьОбработчикОжидания("ЗапуститьПроверкуНовыхОповещений", 30);
	
КонецПроцедуры

Процедура ОткрытьФормуВерсииРасширения(Знач ИдентификаторВерсии, Знач Наименование, Знач ВладелецФормы = Неопределено) Экспорт 
	
	ПараметрыНовойФормы = Новый Структура;
	ПараметрыНовойФормы.Вставить("ИдентификаторВерсии", ИдентификаторВерсии);
	ПараметрыНовойФормы.Вставить("НаименованиеРасширения", Наименование);
	
	ОткрытьФорму("Обработка.КаталогРасширений.Форма.ФормаОбъектаРасширение", 
		ПараметрыНовойФормы, 
		ВладелецФормы,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПроверитьНаличиеНовыхОповещений(ЕстьПравоАдминистрирования = Ложь) Экспорт 
	
	Если НЕ КаталогРасширенийВызовСервера.ЭтоРазделенныйСеанс() Тогда
		Возврат;
	КонецЕсли;
	
	ВсеУведомления = КаталогРасширенийВызовСервера.ПолучитьНовыеУведомления(ЕстьПравоАдминистрирования); 

	Для Каждого ДанныеУведомления Из ВсеУведомления Цикл
		
		Если ДанныеУведомления.ТипУведомления = ПредопределенноеЗначение("Перечисление.ТипыУведомленийРасширений.ИзменениеСостояния") Тогда
			ОбработатьУведомлениеИзмененияСостояния(ДанныеУведомления);
		ИначеЕсли ДанныеУведомления.ТипУведомления = ПредопределенноеЗначение("Перечисление.ТипыУведомленийРасширений.ОтключениеРасширения") Тогда
			ОбработатьУведомлениеОтключенияРасширения(ДанныеУведомления);
		ИначеЕсли ДанныеУведомления.ТипУведомления = ПредопределенноеЗначение("Перечисление.ТипыУведомленийРасширений.ОбновлениеРасширения") Тогда
			ОбработатьУведомлениеОбновлениеРасширения(ДанныеУведомления);
		КонецЕсли;
		 		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает уведомление об изменении из таблицы см. КаталогРасширенийВызовСервера.ПолучитьНовыеУведомления
// 
// Параметры:
// 	ДанныеУведомления - Структура - Описание:
// 	 * ТипУведомления - ПеречислениеСсылка.ТипыУведомленийРасширений - тип уведомления.
// 	 * Расширение - СправочникСсылка.ПоставляемыеРасширения - расширение.
// 	 * ИдентификаторРасширения - УникальныйИдентификатор - идентификатор расширения.
// 	 * Состояние - ПеречислениеСсылка.СостоянияРасширений - новое состояние.
Процедура ОбработатьУведомлениеИзмененияСостояния(Знач ДанныеУведомления) Экспорт
	
	Если ДанныеУведомления.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияРасширений.Установлено") Тогда
		Текст = НСтр("ru = 'Установка расширения завершена'");
		СостояниеДоп = НСтр("ru = 'установлено'");
	Иначе 
		Текст = НСтр("ru = 'Удаление расширения завершено'");	
		СостояниеДоп = НСтр("ru = 'удалено'");
	КонецЕсли;
	
	Пояснение = СтрШаблон(НСтр("ru = 'Расширение ""%1"" %2, необходимо перезапустить приложение'"), ДанныеУведомления.Расширение, СостояниеДоп);
	Описание = Новый ОписаниеОповещения("ОбработатьПерезапуск", ЭтотОбъект, ДанныеУведомления);
	
	ПоказатьОповещениеПользователя(Текст, Описание, Пояснение, БиблиотекаКартинок.Успешно32,
		СтатусОповещенияПользователя.Важное, ДанныеУведомления.ИдентификаторРасширения);
	
КонецПроцедуры

// Обрабатывает уведомление об отключении из таблицы см. КаталогРасширенийВызовСервера.ПолучитьНовыеУведомления
// 
// Параметры:
// 	ДанныеУведомления - Структура - Описание:
// 	 * ТипУведомления - ПеречислениеСсылка.ТипыУведомленийРасширений - тип уведомления.
// 	 * Расширение - СправочникСсылка.ПоставляемыеРасширения - расширение.
// 	 * ИдентификаторРасширения - УникальныйИдентификатор - идентификатор расширения.
// 	 * Наименование - Строка - наименование расширения.
// 	 * Причина - Строка - причина отключения.
// 	 * ИдентификаторВерсии - УникальныйИдентификатор - идентификатор версии.
Процедура ОбработатьУведомлениеОтключенияРасширения(Знач ДанныеУведомления) Экспорт
	
	Текст = НСтр("ru = 'Расширение отключено'");
	Пояснение = СтрШаблон(НСтр("ru = 'Расширение: %1 отключено по причине: %2'"), ДанныеУведомления.Наименование, ДанныеУведомления.Причина);
	Описание = Новый ОписаниеОповещения("ОбработатьОткрытиеРасширения", ЭтотОбъект, ДанныеУведомления);
	
	ПоказатьОповещениеПользователя(Текст, Описание, Пояснение, БиблиотекаКартинок.Предупреждение32, 
		СтатусОповещенияПользователя.Важное, ДанныеУведомления.ИдентификаторРасширения);
	
КонецПроцедуры
	
// Обрабатывает уведомление об обновлении из таблицы см. КаталогРасширенийВызовСервера.ПолучитьНовыеУведомления
// 
// Параметры:
// 	ДанныеУведомления - Структура - Описание:
// 	 * ТипУведомления - ПеречислениеСсылка.ТипыУведомленийРасширений - тип уведомления.
// 	 * Расширение - СправочникСсылка.ПоставляемыеРасширения - расширение.
// 	 * ИдентификаторРасширения - УникальныйИдентификатор - идентификатор расширения.
// 	 * Наименование - Строка - наименование расширения.
// 	 * ИдентификаторВерсии - УникальныйИдентификатор - идентификатор версии.
Процедура ОбработатьУведомлениеОбновлениеРасширения(Знач ДанныеУведомления) Экспорт
	
	Текст = НСтр("ru = 'Обновление расширения'");	
	Пояснение = СтрШаблон(НСтр("ru = 'Требуется выполнить ручное обновление расширения: %1'"), ДанныеУведомления.Наименование);
	Описание = Новый ОписаниеОповещения("ОбработатьОбновлениеРасширения", ЭтотОбъект, ДанныеУведомления);
	
	ПоказатьОповещениеПользователя(Текст, Описание, Пояснение, БиблиотекаКартинок.Информация32, 
		СтатусОповещенияПользователя.Важное, ДанныеУведомления.ИдентификаторРасширения);
	
КонецПроцедуры

Функция АдресОбменаДанными() Экспорт 
	
	Возврат ПараметрыПриложения[ИмяПараметраПриложенияДляОбменаДанными()];
	
КонецФункции

#КонецОбласти

#Область СлужебныйПроцедурыИФункции

Функция ИмяПараметраПриложенияДляОбменаДанными()
	
	Возврат "ТехнологияСервиса.РасширенияВМоделиСервиса.АдресПолучениеПраваАдминистрирования";
	
КонецФункции

// Параметры:
// 	ДанныеУведомления - см. ОбработатьУведомлениеИзмененияСостояния.ДанныеУведомления
Процедура ОбработатьПерезапуск(Знач ДанныеУведомления) Экспорт 
	
	Если ДанныеУведомления.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияРасширений.Установлено") Тогда
		СостояниеДоп = НСтр("ru = 'установлено'");
	Иначе 
		СостояниеДоп = НСтр("ru = 'удалено'");
	КонецЕсли;
	
	Вопрос = СтрШаблон(НСтр("ru = 'Расширение ""%1"" %2, перезапустить приложение?'"), ДанныеУведомления.Расширение, СостояниеДоп);
	Описание = Новый ОписаниеОповещения("ОбработатьПерезапускОтвет", ЭтотОбъект);
	
	ПоказатьВопрос(Описание, Вопрос, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Перезапуск приложения'"));
	
КонецПроцедуры

Процедура ОбработатьПерезапускОтвет(Ответ, ДопПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьРаботуСистемы(Ложь, Истина);
	
КонецПроцедуры

// Параметры:
// 	ДанныеУведомления - см. ОбработатьУведомлениеОтключенияРасширения.ДанныеУведомления
Процедура ОбработатьОткрытиеРасширения(Знач ДанныеУведомления) Экспорт 
	
	ОткрытьФормуВерсииРасширения(ДанныеУведомления.ИдентификаторВерсии, ДанныеУведомления.Наименование);
	
КонецПроцедуры

Процедура ОбработатьОбновлениеРасширения(Знач ДанныеОповещения) Экспорт 
	
	ОткрытьФорму("Обработка.КаталогРасширений.Форма.ФормаОбновляемыеРасширения");
	
КонецПроцедуры

#КонецОбласти
