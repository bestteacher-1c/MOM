#Область ПрограммныйИнтерфейс

Процедура ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используются) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Используются = ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям");
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Используются = ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьСкладДокументаОснования(Склад, ДокументОснование) Экспорт
	
	СкладОснования      = Справочники.Склады.ПустаяСсылка();
	МетаданныеОснования = ДокументОснование.Метаданные();
	
	Если МетаданныеОснования.Реквизиты.Найти("Склад") <> Неопределено Тогда
		СкладОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Склад");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СкладОснования)
		Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОснования, "ЭтоГруппа") Тогда
		
		ИменаТабличныхЧастей = Новый Массив();
		ИменаТабличныхЧастей.Добавить("Товары");
		ИменаТабличныхЧастей.Добавить("Продукция");
		
		Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
			МетаданныеТабличнойЧасти = МетаданныеОснования.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
			Если МетаданныеТабличнойЧасти <> Неопределено Тогда
				Если МетаданныеТабличнойЧасти.Реквизиты.Найти("Склад") <> Неопределено Тогда
					ТекстЗапроса =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Склад
					|ИЗ
					|	Документ." + МетаданныеОснования.Имя + "." + ИмяТабличнойЧасти + "
					|ГДЕ
					|	Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
					|	И НЕ Склад.ЭтоГруппа";
					Запрос = Новый Запрос(ТекстЗапроса);
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						СкладОснования = Выборка.Склад;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладОснования) Тогда
		Склад = СкладОснования;
	КонецЕсли;
	
КонецПроцедуры

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
// 
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыСканированияВДокументе(ПараметрыОкончанияПроверки) Экспорт
	
	ТипПроверяемогоДокумента = ТипЗнч(ПараметрыОкончанияПроверки.ПроверяемыйДокумент);
	
	Если ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипПроверяемогоДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")  Тогда
		
		ОтразитьРезультатыПроверкиИПодбораВДокументеПоступления(ПараметрыОкончанияПроверки);
		
	ИначеЕсли ТипПроверяемогоДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
		ОтразитьРезультатыПроверкиИПодбораВИсходящемДокументе(ПараметрыОкончанияПроверки, ТипПроверяемогоДокумента);
		
	КонецЕсли; 
	
КонецПроцедуры

//Возвращает сформированный ранее Акт о расхождениях для переданного документа.
//
//Параметры:
//   ДокументОснование - ДокументСсылка - ссылка на документ, для которого необходимо получить Акт о расхождениях.
//
//Возвращаемое значение:
//   ДокументСсылка.АктОРасхожденияхПослеПриемки, Неопределено - Акт о расхождениях (если он есть).
//
Функция СформированныйАктОРасхождениях(ДокументОснование) Экспорт
	
	АктОРасхождениях      = Неопределено;
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Если ТипДокументаОснования <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		И ТипДокументаОснования <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Возврат АктОРасхождениях;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АктОРасхождениях.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки КАК АктОРасхождениях
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхТовары
	|	ПО АктОРасхождениях.Ссылка = АктОРасхожденияхТовары.Ссылка
	|ГДЕ
	|	НЕ АктОРасхождениях.ПометкаУдаления
	|	И АктОРасхожденияхТовары.ДокументОснование = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхождениях.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	АктОРасхождениях.Дата УБЫВ
	|";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		АктОРасхождениях = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат АктОРасхождениях;
	
КонецФункции

// Заполняет таблицу маркированный товаров по выбранным документам. Требуется обеспечить формирование временной таблицы
//   "МаркированныеТоварыОснований" с колонками по порядку:
//   ДокументОснование,Номенклатура,Характеристика,Шаблон,СпособВводаВОборот,Количество.
// Текст запроса уже содержит выбираемые данные во временную таблицу "ТоварыПредварительно",
// поэтому должен начинаться с конструкции: ОБЪЕДИНИТЬ ВСЕ и для присоединения к существующему тексту запроса.
// Параметры:
//  Запрос - Запрос - запрос, в котором требуется сформировать временную таблицу.
//  ИсточникОснований - Строка - Имя временной таблицы с колонкой "ДокументОснование".
Процедура СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИсточникОснований) Экспорт
	
	ТекстЗапроса = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	&ОпределениеВидаПродукции,
	|	&ОпределениеШаблонаКодаМаркировкиСУЗ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	НЕ Товары.Отменено
	|
//++ НЕ УТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	&ОпределениеВидаПродукции,
	|	&ОпределениеШаблонаКодаМаркировкиСУЗ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство),
	|	Товары.Количество
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
//-- НЕ УТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПредварительно.Ссылка             КАК ДокументОснование,
	|	ТоварыПредварительно.Организация        КАК Организация,
	|	ТоварыПредварительно.Номенклатура       КАК Номенклатура,
	|	ТоварыПредварительно.Характеристика     КАК Характеристика,
	|	ТоварыПредварительно.ВидПродукции       КАК ВидПродукции,
	|	ТоварыПредварительно.Шаблон             КАК Шаблон,
	|	ТоварыПредварительно.СпособВводаВОборот КАК СпособВводаВОборот,
	|	СУММА(ТоварыПредварительно.Количество)  КАК Количество
	|ПОМЕСТИТЬ МаркированныеТоварыОснований
	|ИЗ
	|	ТоварыПредварительно КАК ТоварыПредварительно
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПредварительно.Ссылка,
	|	ТоварыПредварительно.Организация,
	|	ТоварыПредварительно.Номенклатура,
	|	ТоварыПредварительно.Характеристика,
	|	ТоварыПредварительно.ВидПродукции,
	|	ТоварыПредварительно.Шаблон,
	|	ТоварыПредварительно.СпособВводаВОборот
	|";

	ИнтеграцияИСУТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	ИнтеграцияИСУТ.ОпределитьШаблоныКодовМаркировкиСУЗТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	
	Запрос.Текст = Запрос.Текст + СтрШаблон(ТекстЗапроса, ИсточникОснований);
	
КонецПроцедуры

// Зполняет переданную таблицу данные из ТЧ документа.
// 
// Параметры:
//   Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
//   ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//   ВидыМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив - вид(ы) маркируемой продукции, которым(и) необходимо заполнить таблицу.
//
Процедура СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидыМаркируемойПродукции) Экспорт
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации")
		Или ТипДокумента = Тип("ДокументСсылка.СборкаТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.СписаниеНедостачТоваров")
//++ НЕ УТ
		Или ТипДокумента = Тип("ДокументСсылка.ПоступлениеОтПереработчика")
//-- НЕ УТ
		Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ);
		
//++ НЕ УТ
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПроизводствоБезЗаказа")
	Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ, "ВыходныеИзделия", "ВыходныеИзделияСерии", "Получатель");
		ТекстЗапроса = ТекстЗапроса +"
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|";
		ТекстЗапроса =ТекстЗапроса + ТекстЗапросаМаркируемойПродукции(Документ, "ПобочныеИзделия", "ПобочныеИзделияСерии", "Получатель");
		
//-- НЕ УТ
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЧекККМ")
		Или ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ,,,"Помещение");
	
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ,,, "Склад", "КоличествоФакт");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Формирование таблицы маркируемой продукции указанного документа не определено'");
		
	КонецЕсли;
	
	УстановитьУсловиеПоВидуМаркируемойПродукции(ТекстЗапроса, ВидыМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает в тексте запроса условие отбора по маркируемой продукции требуемого вида.
// Текст запроса должен содержать строку вида "&УсловиеМаркируемаяПродукция" в условии соединения или условии отбора
// и таблицу с синонимом "СправочникНоменклатура", которой как правило является таблица справочника "Номенклатура".
// Параметры:
//   ТекстЗапроса - Строка - строка с текстом запроса, удовлетворяющая приведенным выше условиям.
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид или виды маркируемой продукции, условие отбора по которым необходимо установить.
//   ПутьКПолюНоменклатура - Строка - имя таблицы или поля запроса, содержащее номенклатуру
//   ЗаменяемыйПараметр - Строка - имя параметра со знаком "&" в тексте запроса, который будет заменен сформированным условием
//
Процедура УстановитьУсловиеПоВидуМаркируемойПродукции(ТекстЗапроса,
	ВидМаркируемойПродукции,
	ПутьКПолюНоменклатура = "СправочникНоменклатура",
	ЗаменяемыйПараметр = "&УсловиеМаркируемаяПродукция") Экспорт
	
	Если ТипЗнч(ВидМаркируемойПродукции) = Тип("Массив") Тогда
		ВидыМаркируемойПродукции = ВидМаркируемойПродукции;
	Иначе
		ВидыМаркируемойПродукции = Новый Массив();
		Если ЗначениеЗаполнено(ВидМаркируемойПродукции) Тогда
			ВидыМаркируемойПродукции.Добавить(ВидМаркируемойПродукции);
		КонецЕсли;
	КонецЕсли;

	ЗначенияОсобенностейУчета = Новый Массив();
	
	Для Каждого ВидПродукции Из ВидыМаркируемойПродукции Цикл
		ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции);
		Если ОсобенностьУчета <> Неопределено Тогда
			ЗначенияОсобенностейУчета.Добавить(СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияОсобенностейУчета.Количество() > 0 Тогда
		УсловиеМаркируемаяПродукция = СтрШаблон("%1.ОсобенностьУчета В (%2)", ПутьКПолюНоменклатура, СтрСоединить(ЗначенияОсобенностейУчета, ","));
	Иначе
		УсловиеМаркируемаяПродукция = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, УсловиеМаркируемаяПродукция);
	
КонецПроцедуры

// Дополняет текст запроса для выбора связанных оснований
// Использутеся для определения связанных документов оснований, например:
// 	Формируем заказ поставщику, на основании Заказа на эмиссию, заказываем коды.
// 	На основании заказа поставщику вводим документ Приобритение товара.
// 	На основании Приобритения товара вводим документ Маркировка товаров и печатем новый код маркировки.
// 	Так как основания у документов Заказ на эмиссию и Маркировка товаров разные, - то определение связи между документами
// 	Заказ поставщику и Приобритение.
//
// 	Запрос содержит:
// - Установленный параметр Документ - исходныйй документ
// - Временную таблицу ДокументыОснования - исходный документ основания
// - Временную таблицу ОснованияДляПоискаСвязи - Выбранные документы оснований из исходного документа.
// 	Результат должен содержать одно поле создаваемой временной таблицы СвязанныеОснования,
//	значение которого присутсвует в определяемом типе ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП
//
// Параметры:
// 	ТекстЗапроса - Строка - Текст запроса.
// 	СтандартнаяОбработка - Булево - Призна включения переопределения.
Процедура ДополнитьТекстЗапросаСвязанныхДокументовОснований(ТекстЗапроса, СтандартнаяОбработка) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.ЗаказПоставщику КАК ДокументОснование
	|ПОМЕСТИТЬ СвязанныеОснования
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияДляПоискаСвязи КАК ДокументыОснования
	|		ПО ПриобретениеТоваровУслуг.Ссылка = ДокументыОснования.Ссылка
	|ГДЕ
	|	ПриобретениеТоваровУслуг.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслугТовары.ЗаказПоставщику
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияДляПоискаСвязи КАК ДокументыОснования
	|		ПО ПриобретениеТоваровУслугТовары.Ссылка = ДокументыОснования.Ссылка
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|";
	
КонецПроцедуры

#Область Серии

Функция ПараметрыУказанияСерийОтгрузкаТоваровИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.ОтгрузкаТоваровИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийПриемкаТоваровИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.ПриемкаТоваровИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийВыводИзОборотаИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.ВыводИзОборотаИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийВозвратВОборотИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.ВозвратВОборотИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийСписаниеКодовМаркировки(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.СписаниеКодовМаркировкиИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = Ложь;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Процедура СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции) Экспорт

	ТаблицаДанныхДляГенерацииСерий = ТаблицаДанныхДляГенерацииСерий(ВидМаркируемойПродукции);
	
	Для Каждого ЭлементМассива Из ДанныеДляГенерации Цикл
		НоваяСтрока = ТаблицаДанныхДляГенерацииСерий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрока.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"); 
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ";
	
	Для Каждого Колонка Из ТаблицаДанныхДляГенерацииСерий.Колонки Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|Таблица." + Колонка.Имя + " КАК " + Колонка.Имя + ",";
	КонецЦикла;
	
	ТекстЗапроса = Сред(ТекстЗапроса, 1, СтрДлина(ТекстЗапроса) - 1);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ
	|	ВтТовары
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтТовары.Номенклатура                                    КАК Номенклатура,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)       КАК ИспользоватьСерии,
	|	ЕСТЬNULL(ВладельцыСерии.Ссылка, ВидыНоменклатуры.Ссылка) КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ВладельцыСерии.АвтоматическиГенерироватьСерии,
	|		ВидыНоменклатуры.АвтоматическиГенерироватьСерии)      КАК АвтоматическиГенерироватьСерии
	|	//ДополнительныеПоляВидаНоменклатуры
	|ПОМЕСТИТЬ
	|	ВтВидыНоменклатуры
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВтТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВладельцыСерии
	|		ПО СправочникНоменклатура.ВладелецСерий = ВладельцыСерии.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ВтТовары.Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТовары.Номенклатура                             КАК Номенклатура,
	|	ВтВидыНоменклатуры.ВидНоменклатуры                КАК ВидНоменклатуры,
	|	ВтВидыНоменклатуры.ИспользоватьСерии              КАК ИспользоватьСерии,
	|	ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии КАК АвтоматическиГенерироватьСерии,
	|	СправочникНоменклатура.Наименование               КАК НоменклатураНаименование,
	|	//ДополнительныеПоляВыборки
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии
	|			ТОГДА ЕСТЬNULL(СерииНоменклатуры.Ссылка,
	|				ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|		ИНАЧЕ ВтТовары.Серия
	|	КОНЕЦ)                                            КАК Серия
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыНоменклатуры
	|		ПО ВтТовары.Номенклатура = ВтВидыНоменклатуры.Номенклатура
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВтТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО СерииНоменклатуры.ВидНоменклатуры = ВтВидыНоменклатуры.ВидНоменклатуры
	|		И ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии
	|		//ДополнительныеПоляСвязи
	|СГРУППИРОВАТЬ ПО
	|	ВтТовары.Номенклатура,
	|	ВтВидыНоменклатуры.ВидНоменклатуры,
	|	ВтВидыНоменклатуры.ИспользоватьСерии,
	|	ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии,
	|	СправочникНоменклатура.Наименование
	|	//ДополнительныеПоляГруппировки
	|";
	
	ДополнитьТекстЗапросаГенерацииСерийПоВидуПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", ТаблицаДанныхДляГенерацииСерий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеДляГенерации = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		ДанныеСерии = ИнтеграцияИСМПУТКлиентСервер.СтруктураДанныхДляГенерацииСерии(ВидМаркируемойПродукции); 
		ЗаполнитьЗначенияСвойств(ДанныеСерии, Выборка);
		
		Если Не Выборка.ИспользоватьСерии Тогда
			
			ДанныеСерии.ЕстьОшибка = Истина;
			ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 серии не используются.'"), Выборка.НоменклатураНаименование);
			
		ИначеЕсли НЕ Выборка.АвтоматическиГенерироватьСерии И Не ЗначениеЗаполнено(Выборка.Серия) Тогда
			
			ДанныеСерии.ЕстьОшибка = Истина;
			ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не предусмотрена автоматическая генерация серий.'"), Выборка.НоменклатураНаименование);
			
		ИначеЕсли Выборка.АвтоматическиГенерироватьСерии И Не ЗначениеЗаполнено(Выборка.Серия) Тогда
				
			Попытка
				
				НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НоваяСерия.Заполнить(Выборка);
				НоваяСерия.Записать();
				
				ДанныеСерии.Серия = НоваяСерия.Ссылка;
				
			Исключение
				
				ДанныеСерии.ЕстьОшибка = Истина;
				ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось сгенерировать серию для номенклатуры %1 по причине: %2'"),
					Выборка.НоменклатураНаименование,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

			КонецПопытки;
		 
		КонецЕсли;
		
		ДанныеДляГенерации.Добавить(ДанныеСерии); 
	КонецЦикла;

КонецПроцедуры

Функция ПараметрыУказанияСерийВиртуальнаяАгрегацияУпаковокИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта                  = Объект.ИмяФормы;
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтотОбъект";
	
	ПараметрыУказанияСерий.ИмяТЧТовары       = "СоставУпаковки";
	ПараметрыУказанияСерий.ИмяТЧСерии        = "СоставУпаковки";
	ПараметрыУказанияСерий.ИмяПоляСклад      = "Склад";
	ПараметрыУказанияСерий.ИмяПоляКоличество = "Количество";

	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика);
	//++ НЕ УТ
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства);
	//-- НЕ УТ
	
	Если ЗначениеЗаполнено(Объект[ПараметрыУказанияСерий.ИмяПоляСклад]) Тогда
		ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект[ПараметрыУказанияСерий.ИмяПоляСклад], Ложь);
	
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры
																		Или ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	Иначе
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = Объект.ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = Объект.ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	КонецЕсли;
	
	ПараметрыУказанияСерий.Дата = ТекущаяДатаСеанса();
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта                  = Объект.ИмяФормы;
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтотОбъект";
	
	ПараметрыУказанияСерий.ИмяТЧТовары       = "ПодобраннаяМаркируемаяПродукция";
	ПараметрыУказанияСерий.ИмяТЧСерии        = "ПодобраннаяМаркируемаяПродукция";
	ПараметрыУказанияСерий.ИмяПоляСклад      = "Склад";
	ПараметрыУказанияСерий.ИмяПоляКоличество = "Количество";
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("КоличествоПодобрано");
	
	Если ЗначениеЗаполнено(Объект[ПараметрыУказанияСерий.ИмяПоляСклад]) Тогда
		ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект[ПараметрыУказанияСерий.ИмяПоляСклад], Ложь);
	
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры
																		Или ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	Иначе
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = Объект.ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = Объект.ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	КонецЕсли;
		
	ПараметрыУказанияСерий.Дата = ТекущаяДатаСеанса();
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийМаркировкаТоваровИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.МаркировкаТоваровИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Формирует текст запроса для расчета статусов указания серий в обработках проверки и подбора товаров
//
//Параметры:
//   ПараметрыУказанияСерий - Структура - (См. НоменклатураКлиентСервер.ПараметрыУказанияСерий).
//
//Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийПроверкаИПодборПродукцииИСМП(ПараметрыУказанияСерий) Экспорт
	
	Проверяемыйдокумент = Неопределено;
	ПараметрыУказанияСерий.Свойство("ПроверяемыйДокумент", Проверяемыйдокумент);

	ДопУсловиеКоличество = "";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары." + ПараметрыУказанияСерий.ИмяПоляКоличество + " КАК Количество,";
	
	Для Каждого ИмяПоля Из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	Товары." + ИмяПоля + " КАК " + ИмяПоля + ",";
		ДопУсловиеКоличество = ДопУсловиеКоличество + ?(ПустаяСтрока(ДопУсловиеКоличество), "", " ИЛИ ") + "Товары." + ИмяПоля + " <> 0";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) ИЛИ &Склад = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|				КОГДА ВидыНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка)
	|					ИЛИ ВидыНоменклатуры.НастройкаИспользованияСерий ЕСТЬ NULL
	|					ТОГДА 0
	|				КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА 2
	|				ИНАЧЕ 21
	|			КОНЕЦ";
	
	Если ПроверяемыйДокумент = "ЧекККМ" Или ПроверяемыйДокумент = "ЧекККМВозврат" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
		|			ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)
		|			ТОГДА 0
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|			ТОГДА ВЫБОР
		|				КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|					И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					ТОГДА 14
		|				ИНАЧЕ 13
		|			КОНЕЦ
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
		|			ТОГДА ВЫБОР
		|				КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|					И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					ТОГДА 10
		|				ИНАЧЕ 9
		|			КОНЕЦ
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
		|			ТОГДА ВЫБОР
		|				КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
		|					ТОГДА ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 6
		|						ИНАЧЕ 5
		|					КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|					КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|						И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА 8
		|					ИНАЧЕ 7
		|				КОНЕЦ
		|			КОНЕЦ
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
		|			И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу
		|			ТОГДА ВЫБОР
		|				КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|					ТОГДА ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 4
		|						ИНАЧЕ 3
		|					КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|					КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|						И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА 2
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтатусУказанияСерий";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
		|			ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
		|				ТОГДА ВЫБОР
		|					КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|						И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА ВЫБОР
		|							КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|								ТОГДА 14
		|							ИНАЧЕ 10
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|							ТОГДА 13
		|						ИНАЧЕ 9
		|					КОНЕЦ
		|				КОНЕЦ
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
		|				ТОГДА ВЫБОР
		|					КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
		|						ТОГДА ВЫБОР
		|							КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|								И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|								ТОГДА 6
		|							ИНАЧЕ 5
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 8
		|						ИНАЧЕ 7
		|					КОНЕЦ
		|				КОНЕЦ
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
		|				И (ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеОтПоставщика
		|					И &ПриемкаОтПоставщика
		//++ НЕ УТ
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПродукцииИзПроизводства
		|					И &ПриемкаПродукцииИзПроизводства
		//-- НЕ УТ
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоВозвратуОтКлиента
		|					И &ПриемкаПоВозвратуОтКлиента
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПеремещению
		|					И &ПриемкаПоПеремещению
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПрочемуОприходованию
		|					И &ПриемкаПоПрочемуОприходованию
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеКомплектующихПослеРазборки
		|					И &ПриемкаКомплектующихПослеРазборки
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеСобранныхКомплектов
		|					И &ПриемкаСобранныхКомплектов)
		|				ТОГДА ВЫБОР
		|					КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|						ТОГДА ВЫБОР
		|							КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|								И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|								ТОГДА 4
		|							ИНАЧЕ 3
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 2
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|				КОНЕЦ
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
		|				И (ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКлиенту
		|					И &ОтгрузкаКлиенту
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеНаВнутренниеНужды
		|					И &ОтгрузкаНаВнутренниеНужды
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоВозвратуПоставщику
		|					И &ОтгрузкаПоВозвратуПоставщику
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоПеремещению
		|					И &ОтгрузкаПоПеремещению
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектующихДляСборки
		|					И &ОтгрузкаКомплектующихДляСборки
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектовДляРазборки
		|					И &ОтгрузкаКомплектовДляРазборки)
		|				ТОГДА ВЫБОР
		|					КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|						ТОГДА ВЫБОР
		|							КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|								И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|								ТОГДА 4
		|							ИНАЧЕ 3
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 2
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|				КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатусУказанияСерий";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|		 И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Если ПустаяСтрока(ДопУсловиеКоличество) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловиеКоличество", "ЛОЖЬ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловиеКоличество", ДопУсловиеКоличество);
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА
	|			ВидыНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка)
	|		ИЛИ ВидыНоменклатуры.НастройкаИспользованияСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗаполнения

#Область ПрикладныеДокументы

#Область МаркировкаТоваровИСМП

//++ НЕ УТ
Процедура ЗаполнитьПроизводствоБезЗаказаНаОснованииМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзМаркировкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ГруппировкаЗатрат", Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу);
		ДанныеЗаполнения.Вставить("Организация",       Реквизиты.Организация);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения);
	
	КонецЕсли;
	
	ДокументОбъект.ВыходныеИзделия.Очистить();
	ДокументОбъект.ВыходныеИзделияСерии.Очистить();
	
	ДокументОбъект.ПобочныеИзделия.Очистить();
	ДокументОбъект.ПобочныеИзделияСерии.Очистить();
	
	ДокументОбъект.МатериалыИРаботы.Очистить();
	ДокументОбъект.Трудозатраты.Очистить();
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	// ВыходныеИзделия
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
		
		Если ИспользоватьСерииНоменклатуры И ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрокаСерии = ДокументОбъект.ВыходныеИзделияСерии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьСерииНоменклатуры Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ПроизводствоБезЗаказа);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
		НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ДокументОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

Процедура ЗаполнитьПрочееОприходованиеТоваровНаОснованииМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзМаркировкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары");
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеИзПроизводства;
		ДокументОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Серии.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОприходованиеИзлишковТоваровНаОснованииМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзМаркировкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары");
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСборкуТоваровНаОснованииМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзМаркировкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары");
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
		ДокументОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Серии.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
	
КонецПроцедуры

#КонецОбласти

#Область ВыводИзОборотаИСМП

Процедура ЗаполнитьСборкуТоваровНаОснованииВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзВыводаИзОборотаИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары");
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров;
		ДокументОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Серии.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
	
КонецПроцедуры

Процедура ЗаполнитьСписаниеНедостачТоваровНаОснованииВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзВыводаИзОборотаИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары");
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
	
КонецПроцедуры

Процедура ЗаполнитьВнутреннееПотреблениеТоваровНаОснованииВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзВыводаИзОборотаИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары");
		ДокументОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Серии.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваровИСМП

Процедура ЗаполнитьПриобретениеТоваровУслугНаОснованииПриемкиТовароИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары");
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВозвратТоваровОтКлиентаНаОснованииПриемкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары");
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ОбработкаЗаполненияДокументаВыводИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииЧекаККМ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииРеализацииТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииВнутреннегоПотребленияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииСписанияНедостачТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СборкаТоваров") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииСборкиТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику")Тогда
		ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
//++ НЕ УТ
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПереработчику")Тогда
		ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПереработчику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
//-- НЕ УТ
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаМаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.СборкаТоваров") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииСборкиТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПриобретенияТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПрочегоОприходованияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПересчетаТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииОприходованияИзлишковТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
//++ НЕ УТ
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПроизводстваБезЗаказа(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеОтПереработчика") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПоступленияОтПереработчика(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
//-- НЕ УТ
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПроизводственнойОперацииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииВходящейТранспортнойОперацииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаВозвратВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаПеремаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ЗаполнитьСписаниеКодовМаркировкиИСМПНаОснованииВозвратаТоваровОтКлиента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииРеализацииТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииКорректировкиРеализации(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииПередачиТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииВозвратаТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииПеремещенияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаСписаниеКодовМаркировкиИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


#Область Серии

Функция ТаблицаДанныхДляГенерацииСерий(ВидМаркируемойПродукции)
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанных.Колонки.Добавить("Серия",        Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДанных.Колонки.Добавить("ЕстьОшибка",   Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ТекстОшибки",  ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	ДополнитьТаблицуДляГенерацииСерийПоВидуПродукции(ТаблицаДанных, ВидМаркируемойПродукции);
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ДополнитьТаблицуДляГенерацииСерийПоВидуПродукции(ТаблицаДанных, ВидМаркируемойПродукции)
	
	Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ОписаниеТипаМРЦ = РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля();
		ТаблицаДанных.Колонки.Добавить("МРЦ", ОписаниеТипаМРЦ);
	ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция Тогда
		ТаблицаДанных.Колонки.Добавить("ГоденДо", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаГенерацииСерийПоВидуПродукции(ТекстЗапроса, ВидМаркируемойПродукции)
	
	ДополнительныеПоляВидаНоменклатуры = "";
	ДополнительныеПоляВыборки          = "";
	ДополнительныеПоляСвязи            = "";
	ДополнительныеПоляГруппировки      = "";
	
	Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		ДополнительныеПоляВидаНоменклатуры = ",
		|	ЕСТЬNULL(ВладельцыСерии.ИспользоватьМРЦМОТПСерии,
		|		ВидыНоменклатуры.ИспользоватьМРЦМОТПСерии) КАК ИспользоватьМРЦМОТПСерии";
		
		ДополнительныеПоляВыборки = "
		|	ВтТовары.МРЦ КАК МаксимальнаяРозничнаяЦенаМОТП,";
		
		ДополнительныеПоляСвязи = "
		|		И (ВЫБОР
		|			КОГДА ВтВидыНоменклатуры.ИспользоватьМРЦМОТПСерии = ИСТИНА
		|				ТОГДА СерииНоменклатуры.МаксимальнаяРозничнаяЦенаМОТП = ВтТовары.МРЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)";
		
		ДополнительныеПоляГруппировки = ",
		|	ВтТовары.МРЦ";
	
	ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция Тогда
	
		ДополнительныеПоляВидаНоменклатуры = ",
		|	ЕСТЬNULL(ВладельцыСерии.ИспользоватьСрокГодностиСерии,
		|		ВидыНоменклатуры.ИспользоватьСрокГодностиСерии) КАК ИспользоватьСрокГодностиСерии";
		
		ДополнительныеПоляВыборки = "
		|	ВтТовары.ГоденДо КАК ГоденДо,";
		
		ДополнительныеПоляСвязи = "
		|		И (ВЫБОР
		|			КОГДА ВтВидыНоменклатуры.ИспользоватьСрокГодностиСерии = ИСТИНА
		|				ТОГДА СерииНоменклатуры.ГоденДо = ВтТовары.ГоденДо
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)";
		
		ДополнительныеПоляГруппировки = ",
		|	ВтТовары.ГоденДо";
	
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляВидаНоменклатуры", ДополнительныеПоляВидаНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляВыборки",          ДополнительныеПоляВыборки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляСвязи",            ДополнительныеПоляСвязи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляГруппировки",      ДополнительныеПоляГруппировки);
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеРезультатаПроверкиИПодбораВДокументе

#Область ВходящиеДокументы

// Переносит результат проверки и подбора маркируемой продукции во входящий документ.
//   Общая схема:
//    * Заполняет серии номенклатуры в документе, при необходимости создавая их,
//    * При использовании актов расхождений - создает акт, иначе
//    * Обновляет табличные части "Товары" и "Штрихкоды упаковок" актуальной маркируемой продукцией,
//    * Перезаписывает документ.
//
// Параметры:
//   ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора)
//
Процедура ОтразитьРезультатыПроверкиИПодбораВДокументеПоступления(ПараметрыОкончанияПроверки)
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	Если ИспользоватьСерииНоменклатуры Тогда 
		ЗаполнитьСерииВДокументе(ПараметрыОкончанияПроверки, ДокументОбъект);
	КонецЕсли;
	
	Если Не ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях Тогда
		
		ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(
			ДокументОбъект,
			ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня,
			ПараметрыОкончанияПроверки.ВидПродукцииИС);
		
		ИзменитьДокументПоступленияПоРезультатамПроверкиИПодбораИСМП(ДокументОбъект, ПараметрыОкончанияПроверки);
		
	КонецЕсли;
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
	Если ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях Тогда
		
		Документы.АктОРасхожденияхПослеПриемки.СоздатьПоРезультатамПроверкиИПодбораИСМП(
			ПараметрыОкончанияПроверки, ДокументОбъект.Проведен);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСерииВДокументе(ПараметрыОкончанияСканирования, ДокументОбъект)
	
	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	МенеджерДокумента   = Документы[ИмяДокумента];
	ОсобенностьУчета    = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияСканирования.ВидПродукцииИС);
	
	ЕстьСклад = ДокументОбъект.Ссылка.Метаданные().ТабличныеЧасти.Серии.Реквизиты.Найти("Склад") <> Неопределено;
	
	ИмяТабличнойЧасти = СтрШаблон("Документ.%1.Серии", ИмяДокумента);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПодобраннойПродукции.Номенклатура,
	|	ТаблицаПодобраннойПродукции.Характеристика,
	|	ТаблицаПодобраннойПродукции.Серия,
	|	ТаблицаПодобраннойПродукции.Количество,
	|	ТаблицаПодобраннойПродукции.КоличествоПодобрано
	|ПОМЕСТИТЬ ТаблицаПодобраннойПродукции
	|ИЗ
	|	&ТаблицаПодобраннойПродукции КАК ТаблицаПодобраннойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодобраннойПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаПодобраннойПродукции.Характеристика КАК Характеристика,
	|	ТаблицаПодобраннойПродукции.Количество КАК Количество,
	|	ТаблицаПодобраннойПродукции.Серия КАК Серия
	|ИЗ
	|	ТаблицаПодобраннойПродукции КАК ТаблицаПодобраннойПродукции
	|ИТОГИ
	|ПО
	|	Номенклатура,
	|	Характеристика,
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьСерии.Серия            КАК Серия,
	|	ТабличнаяЧастьСерии.Количество       КАК Количество,
	|	ТабличнаяЧастьСерии.Номенклатура     КАК Номенклатура,
	|	ТабличнаяЧастьСерии.Характеристика   КАК Характеристика,
	|	&Склад                               КАК Склад,
	|	ТабличнаяЧастьСерии.Назначение       КАК Назначение
	|ИЗ
	|	&ТабличнаяЧастьСерии  КАК ТабличнаяЧастьСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧастьСерии.Номенклатура = СправочникНоменклатура.Ссылка
	|			И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|ГДЕ
	|	ТабличнаяЧастьСерии.Ссылка = &ПроверяемыйДокумент";
	
	Если ЕстьСклад Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Склад", "ТабличнаяЧастьСерии.Склад");
	Иначе
		Запрос.УстановитьПараметр("Склад", "");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТабличнаяЧастьСерии", ИмяТабличнойЧасти);
	
	Запрос.УстановитьПараметр("ТаблицаПодобраннойПродукции", ПараметрыОкончанияСканирования.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ПроверяемыйДокумент", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДокументОбъект.Серии.Загрузить(РезультатЗапроса[2].Выгрузить());
	
	ВыборкаНоменклатура = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			ВыборкаКоличество = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКоличество.Следующий() Цикл
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("Номенклатура",   ВыборкаКоличество.Номенклатура);
				ПараметрыПоиска.Вставить("Характеристика", ВыборкаКоличество.Характеристика);
				ПараметрыПоиска.Вставить("Количество",     ВыборкаКоличество.Количество);
				
				НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
				
				ВыборкаДетали = ВыборкаКоличество.Выбрать();
				
				Если ВыборкаДетали.Количество() > 1 Тогда
					
					ТекущаяНайденнаяСтрока = 0;
					
					Пока ВыборкаДетали.Следующий() Цикл
						
						Склад      = Справочники.Склады.ПустаяСсылка();
						Назначение = Справочники.Назначения.ПустаяСсылка();
						
						Если НайденныеСтроки.Количество() > ТекущаяНайденнаяСтрока Тогда
							
							НайденныеСтроки[ТекущаяНайденнаяСтрока].Серия = ВыборкаДетали.Серия;
							Назначение = НайденныеСтроки[ТекущаяНайденнаяСтрока].Назначение;
							Если ЕстьСклад Тогда 
								Склад = НайденныеСтроки[ТекущаяНайденнаяСтрока].Склад;
							КонецЕсли;
							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Склад)
							Или Не ЕстьСклад Тогда
							
							НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
							НоваяСтрокаСерии.Номенклатура   = ВыборкаДетали.Номенклатура;
							НоваяСтрокаСерии.Характеристика = ВыборкаДетали.Характеристика;
							НоваяСтрокаСерии.Количество     = ВыборкаДетали.Количество;
							НоваяСтрокаСерии.Серия          = ВыборкаДетали.Серия;
							НоваяСтрокаСерии.Назначение     = Назначение;
							Если ЕстьСклад Тогда
								НоваяСтрокаСерии.Склад          = Склад;
							КонецЕсли;
							
						КонецЕсли;
						
						ТекущаяНайденнаяСтрока = ТекущаяНайденнаяСтрока + 1;
						
					КонецЦикла;
					
				Иначе
					
					ВыборкаДетали.Следующий();
					
					Склад      = Справочники.Склады.ПустаяСсылка();
					Назначение = Справочники.Назначения.ПустаяСсылка();
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						
						НайденнаяСтрока.Серия = ВыборкаДетали.Серия;
						Назначение = НайденнаяСтрока.Назначение;
						Если ЕстьСклад Тогда 
							Склад = НайденнаяСтрока.Склад;
						КонецЕсли;
						
					КонецЦикла;
					
					Если ЗначениеЗаполнено(Склад) 
						Или Не ЕстьСклад Тогда
						
						НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
						НоваяСтрокаСерии.Номенклатура   = ВыборкаДетали.Номенклатура;
						НоваяСтрокаСерии.Характеристика = ВыборкаДетали.Характеристика;
						НоваяСтрокаСерии.Количество     = ВыборкаДетали.Количество;
						НоваяСтрокаСерии.Серия          = ВыборкаДетали.Серия;
						НоваяСтрокаСерии.Назначение     = Назначение;
						Если ЕстьСклад Тогда
							НоваяСтрокаСерии.Склад          = Склад;
						КонецЕсли;
						
					КонецЕсли;
					 
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, МенеджерДокумента);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ДокументОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ИзменитьДокументПоступленияПоРезультатамПроверкиИПодбораИСМП(ДокументОбъект, ПараметрыОкончанияСканирования) Экспорт
	
	ПровереннаяИПодобраннаяПродукция = ПараметрыОкончанияСканирования.ТаблицаПодобраннойПровереннойПродукции;
	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	МенеджерДокумента = Документы[МетаданныеДокумента.Имя];
	ЕстьСкладВТЧ = МетаданныеДокумента.ТабличныеЧасти.Товары.Реквизиты.Найти("Склад") <> Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодобраннаяПродукция.Номенклатура        КАК Номенклатура,
	|	ПодобраннаяПродукция.Характеристика      КАК Характеристика,
	|	ПодобраннаяПродукция.Серия               КАК Серия, 
	|	ПодобраннаяПродукция.Количество          КАК Количество,
	|	ПодобраннаяПродукция.КоличествоПодобрано КАК КоличествоПодобрано
	|ПОМЕСТИТЬ ПодобраннаяПродукция
	|ИЗ
	|	&ПодобраннаяПродукция КАК ПодобраннаяПродукция
	|;
	|///////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодобраннаяПродукция.Номенклатура               КАК Номенклатура,
	|	ПодобраннаяПродукция.Характеристика             КАК Характеристика,
	|	ПодобраннаяПродукция.Количество                 КАК Количество,
	|	СУММА(ПодобраннаяПродукция.КоличествоПодобрано) КАК КоличествоПодобрано
	|ИЗ
	|	ПодобраннаяПродукция КАК ПодобраннаяПродукция
	|СГРУППИРОВАТЬ ПО
	|	ПодобраннаяПродукция.Номенклатура,
	|	ПодобраннаяПродукция.Характеристика,
	|	ПодобраннаяПродукция.Количество
	|;
	|///////////////////////////////////////////////////////////////////////////2
	|";
	
	ТекстЗапросаОпределениеСклада = ТекстЗапросаОпределениеСклада(ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаОпределениеСклада;
	
	Запрос.УстановитьПараметр("ПроверяемыйДокумент",  ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
	Запрос.УстановитьПараметр("ПодобраннаяПродукция", ПровереннаяИПодобраннаяПродукция);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПровереннаяПродукцияГруппированная = Результат[1].Выгрузить();
	СкладыДокумента                    = Результат[2].Выгрузить().ВыгрузитьКолонку("Склад");
	Склад                              = СкладыДокумента[0];
	
	СтруктураДействийОпределениеФактическогоКоличества = РасхожденияСервер.СтруктураДействийПоТЧОснованияАкта(ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
	СтруктураДействийНоваяСтрока                       =  СтруктураДействийПриДобавленииНовойСтроки(ДокументОбъект);
	
	Для Каждого СтрокаПодобраннойПродукцииГруппированная Из ПровереннаяПродукцияГруппированная Цикл
		
		ПараметрыПоискаПоДокументу = Новый Структура;
		ПараметрыПоискаПоДокументу.Вставить("Номенклатура",       СтрокаПодобраннойПродукцииГруппированная.Номенклатура);
		ПараметрыПоискаПоДокументу.Вставить("Характеристика",     СтрокаПодобраннойПродукцииГруппированная.Характеристика);
		ПараметрыПоискаПоДокументу.Вставить("КоличествоУпаковок", СтрокаПодобраннойПродукцииГруппированная.Количество);
		
		ПараметрыПоискаПродукция = Новый Структура;
		ПараметрыПоискаПродукция.Вставить("Номенклатура",   СтрокаПодобраннойПродукцииГруппированная.Номенклатура);
		ПараметрыПоискаПродукция.Вставить("Характеристика", СтрокаПодобраннойПродукцииГруппированная.Характеристика);
		ПараметрыПоискаПродукция.Вставить("Количество",     СтрокаПодобраннойПродукцииГруппированная.Количество);
		
		НайденныеСтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоискаПоДокументу);
		НайденныеСтрокиПродукция = ПровереннаяИПодобраннаяПродукция.НайтиСтроки(ПараметрыПоискаПродукция);
		
		Если НайденныеСтрокиДокумента.Количество() > 0 Тогда
			
			РаспределитьПодобранноеНаСуществующиеСтроки(ДокументОбъект,
			                                            НайденныеСтрокиДокумента,
			                                            НайденныеСтрокиПродукция, 
			                                            СтруктураДействийОпределениеФактическогоКоличества);
			
		ИначеЕсли СтрокаПодобраннойПродукцииГруппированная.КоличествоПодобрано > 0 Тогда
			
			Для Каждого НайденнаяСтрокаПродукции Из НайденныеСтрокиПродукция Цикл
				ПараметрыПоискаПоДокументу = Новый Структура;
				ПараметрыПоискаПоДокументу.Вставить("Номенклатура",       НайденнаяСтрокаПродукции.Номенклатура);
				ПараметрыПоискаПоДокументу.Вставить("Характеристика",     НайденнаяСтрокаПродукции.Характеристика);
				ПараметрыПоискаПоДокументу.Вставить("КоличествоУпаковок", НайденнаяСтрокаПродукции.КоличествоПодобрано);
				
				СтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоискаПоДокументу);
				
				Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
					НайденныеСтрокиДокумента.Добавить(СтрокаДокумента);
				КонецЦикла;
			КонецЦикла;
			
			Если НайденныеСтрокиДокумента.Количество() > 0 Тогда
				РаспределитьПодобранноеНаСуществующиеСтроки(ДокументОбъект,
				                                            НайденныеСтрокиДокумента,
				                                            НайденныеСтрокиПродукция, 
				                                            СтруктураДействийОпределениеФактическогоКоличества);
			Иначе
				ДобавитьНовуюСтрокуМаркированнойПродукции(ДокументОбъект, 
				                                          НайденныеСтрокиПродукция, 
				                                          ПараметрыОкончанияСканирования.ПроверяемыйДокумент, 
				                                          СтруктураДействийНоваяСтрока,
				                                          Склад,
				                                          ЕстьСкладВТЧ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, МенеджерДокумента);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ДокументОбъект, ПараметрыУказанияСерий);
	
	ОчиститьСтрокиСНулевымКоличеством(ДокументОбъект);
	
КонецПроцедуры

Функция ТекстЗапросаОпределениеСклада(ПроверяемыйДокумент) Экспорт
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриобретениеТоваровУслугТовары.Склад КАК Склад
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|ГДЕ ПриобретениеТоваровУслугТовары.Ссылка = &ПроверяемыйДокумент";
		
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		Возврат "ВЫБРАТЬ
		|	ВозвратТоваровОтКлиента.Склад КАК Склад
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ГДЕ
		|	ВозвратТоваровОтКлиента.Ссылка = &ПроверяемыйДокумент";
		
	КонецЕсли;
	
КонецФункции

Процедура РаспределитьПодобранноеНаСуществующиеСтроки(ДокументОбъект, НайденныеСтрокиДокумента, 
                                                      НайденныеСтрокиПродукция, СтруктураДействийОпределениеФактическогоКоличества)
	
	ТребуетсяРаспределениеПоСериям = Ложь;
	СерииВОтдельнойТабличнойЧасти  = Ложь;
	КоличествоКРаспределению = 0;
	
	СерииАкта      = Новый Массив;
	СерииПродукции = Новый Массив;
	
	Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
		КоличествоКРаспределению = КоличествоКРаспределению + НайденнаяСтрокаПродукция.КоличествоПодобрано;
		Если ЗначениеЗаполнено(НайденнаяСтрокаПродукция.Серия)
			И СерииПродукции.Найти(НайденнаяСтрокаПродукция.Серия) = Неопределено Тогда
			СерииПродукции.Добавить(НайденнаяСтрокаПродукция.Серия);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НайденнаяСтрокаДокумент Из НайденныеСтрокиДокумента Цикл
		Если ЗначениеЗаполнено(НайденнаяСтрокаДокумент.Серия)
			И СерииАкта.Найти(НайденнаяСтрокаДокумент.Серия) = Неопределено Тогда
			СерииАкта.Добавить(НайденнаяСтрокаДокумент.Серия);
		КонецЕсли;
	КонецЦикла;
	
	Если СерииПродукции.Количество() > 1 Тогда
		ТребуетсяРаспределениеПоСериям = Истина;
	КонецЕсли;
	
	Если СерииПродукции.Количество() > 0 
		И СерииАкта.Количество() = 0 Тогда
		СерииВОтдельнойТабличнойЧасти = Истина;			
	КонецЕсли;
		
	Если Не ТребуетсяРаспределениеПоСериям Тогда
		
		РаспределитьПодобранноеОднаСерия(ДокументОбъект, НайденныеСтрокиДокумента, НайденныеСтрокиПродукция, 
		                                 СерииПродукции, КоличествоКРаспределению, СтруктураДействийОпределениеФактическогоКоличества, 
		                                 СерииВОтдельнойТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

Процедура РаспределитьПодобранноеОднаСерия(ДокументОбъект, НайденныеСтрокиДокумента, НайденныеСтрокиПродукция, 
                                           СерииПродукции, КоличествоКРаспределению, СтруктураДействий, СерииВОтдельнойТабличнойЧасти)
	
	НомерСтроки = 1;
	КоличествоСтрок = НайденныеСтрокиДокумента.Количество();
	
	Для Каждого НайденнаяСтрокаДокумента Из НайденныеСтрокиДокумента Цикл
		
		Если НайденнаяСтрокаДокумента.КоличествоУпаковок < КоличествоКРаспределению Тогда
			
			Если КоличествоСтрок <> НомерСтроки Тогда
				КоличествоКРаспределению = КоличествоКРаспределению - НайденнаяСтрокаДокумента.КоличествоУпаковок;
			Иначе
				НайденнаяСтрокаДокумента.КоличествоУпаковок = КоличествоКРаспределению;
				КоличествоКРаспределению = 0;
			
				ОбработатьСтрокуТабличнойЧасти(НайденнаяСтрокаДокумента, СтруктураДействий);
			КонецЕсли;
			
		Иначе
			
			НайденнаяСтрокаДокумента.КоличествоУпаковок = КоличествоКРаспределению;
			КоличествоКРаспределению = 0;
			
			ОбработатьСтрокуТабличнойЧасти(НайденнаяСтрокаДокумента, СтруктураДействий);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;	
			
	КонецЦикла;
	
	Если СерииВОтдельнойТабличнойЧасти Тогда
		
		КоличествоКРаспределению = 0;
		Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
			КоличествоКРаспределению = КоличествоКРаспределению + НайденнаяСтрокаПродукция.КоличествоПодобрано;
		КонецЦикла;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура",   НайденныеСтрокиПродукция[0].Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", НайденныеСтрокиПродукция[0].Характеристика);
		ПараметрыПоиска.Вставить("Количество",     НайденныеСтрокиПродукция[0].Количество);
		ПараметрыПоиска.Вставить("Серия",          СерииПродукции[0]);
		
		НайденныеСтрокиСерии = ДокументОбъект.Серии.НайтиСтроки(ПараметрыПоиска);
		
		НомерСтроки = 1;
		
		Для Каждого НайденнаяСтрокаСерия Из НайденныеСтрокиСерии Цикл
		
			Если НайденнаяСтрокаСерия.Количество < КоличествоКРаспределению Тогда
				
				Если КоличествоСтрок <> НомерСтроки Тогда
					
					КоличествоКРаспределению = КоличествоКРаспределению - НайденнаяСтрокаСерия.Количество;
					
				Иначе
					
					НайденнаяСтрокаСерия.Количество = КоличествоКРаспределению;
					КоличествоКРаспределению = 0;

				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрокаСерия.Количество = КоличествоКРаспределению;
				КоличествоКРаспределению = 0;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтрокиСНулевымКоличеством(ДокументОбъект)
	
	ПараметрыПоиска  = Новый Структура;
	МетаданныеТовары = ДокументОбъект.Метаданные().ТабличныеЧасти["Товары"];
	
	Если МетаданныеТовары.Реквизиты.Найти("Количество") <> Неопределено Тогда
		ПараметрыПоиска.Вставить("Количество", 0);
	КонецЕсли;
	
	Если МетаданныеТовары.Реквизиты.Найти("КоличествоУпаковок") <> Неопределено Тогда
		ПараметрыПоиска.Вставить("КоличествоУпаковок", 0);
	КонецЕсли;
	
	НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДокументОбъект.Товары.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовуюСтрокуМаркированнойПродукции(ДокументОбъект, НайденныеСтрокиПродукция,
                                                    ПроверяемыйДокумент, СтруктураДействий, Склад, ЕстьСкладВТЧ)
	
	Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
	
		НоваяСтрока.Номенклатура        = НайденнаяСтрокаПродукция.Номенклатура;
		НоваяСтрока.Характеристика      = НайденнаяСтрокаПродукция.Характеристика;
		НоваяСтрока.Серия               = НайденнаяСтрокаПродукция.Серия;
		НоваяСтрока.КоличествоУпаковок  = НайденнаяСтрокаПродукция.КоличествоПодобрано;
		
		ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий);
		
		НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
		НоваяСтрокаСерии.Номенклатура   = НайденнаяСтрокаПродукция.Номенклатура;
		НоваяСтрокаСерии.Характеристика = НайденнаяСтрокаПродукция.Характеристика;
		НоваяСтрокаСерии.Серия          = НайденнаяСтрокаПродукция.Серия;
		НоваяСтрокаСерии.Количество     = НайденнаяСтрокаПродукция.КоличествоПодобрано;
		
		Если ЕстьСкладВТЧ Тогда
			НоваяСтрока.Склад      = Склад;
			НоваяСтрокаСерии.Склад = Склад;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИсходящиеДокументы

// Переносит результат проверки и подбора маркируемой продукции в исходящий документ.
//   Общая схема:
//    * Обновляет табличную часть "Штрихкоды упаковок" актуальными штрихкодами упаковок маркируемой продукции,
//    * Обновляет табличную часть "Товары" (при наличии - также "Серии") актуальной маркируемой продукцией,
//    * Перезаписывает документ.
//   Недостача маркируемой продукции списывается с первых найденных товарных строк с тем же ключом
//     (номенклатура / характеристика / серия).
//   Излишки прибавляются к первой найденной строке с тем же ключом, а если ее нет в документе - строка добавляется
//     с параметрами заполнения по умолчанию для документа.
//
// Параметры:
//   ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора)
//   ТипОбъекта                     - Тип       - Тип проверяемого документа
//
Процедура ОтразитьРезультатыПроверкиИПодбораВИсходящемДокументе(ПараметрыОкончанияПроверки, ТипОбъекта)
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(
		ДокументОбъект,
		ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня,
		ПараметрыОкончанияПроверки.ВидПродукцииИС);
	
	Если ТипОбъекта = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииРеализацииТоваровУслуг(ДокументОбъект, ПараметрыОкончанияПроверки);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииВозвратаТоваровПоставщику(ДокументОбъект, ПараметрыОкончанияПроверки);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ОтразитьИзменениеКоличестваВТабличнойЧастиТоварыКорректировкиРеализации(ДокументОбъект, ПараметрыОкончанияПроверки);
	КонецЕсли;
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

// Переносит маркируемую продукцию из формы проверки и подбора в документ Реализация товаров услуг
//   * Удаляет из табличных частей Товары, Серии отсутствующую в данных проверки маркируемую продукцию.
//   * Не меняет прочие товарные строки.
// 
// Параметры:
//  ДокументОбъект           - ДокументОбъект.РеализацияТоваровУслуг - документ к изменению
//  ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора).
//
Процедура ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииРеализацииТоваровУслуг(ДокументОбъект, ПараметрыОкончанияПроверки)
	
	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	ТаблицаСерии  = ДокументОбъект.Серии.Выгрузить();
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Серии", ТаблицаСерии);
	
	Запрос.УстановитьПараметр("Подобрано", ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияПроверки.ВидПродукцииИС));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Склад,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Назначение,
	|	Серии.Склад,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия) КАК Серия,
	|	ЕСТЬNULL(Серии.Количество, Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Склад = Серии.Склад
	|		И Товары.Назначение = Серии.Назначение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подобрано.Номенклатура,
	|	Подобрано.Характеристика,
	|	Подобрано.Серия,
	|	Подобрано.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Подобрано
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ МаркируемыеТовары
	|ИЗ
	|	ТоварыСерии КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Товары.Номенклатура
	|		И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	МаркируемыеТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Недостача Убыв";
	
	ВыборкаРасхождения = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоиска      = "Номенклатура, Характеристика, Серия";
	ДополнениеСерий = "Склад, Назначение";
	КлючСтрокиСерий = СтрШаблон("%1, %2", КлючПоиска, ДополнениеСерий);

	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	ТаблицаСерии.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаСерии.Индексы.Добавить(КлючПоиска);
	ТаблицаСерии.Индексы.Добавить(КлючСтрокиСерий);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	СтруктураПоискаСерий = Новый Структура(КлючСтрокиСерий);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииНовойСтрокиРеализацияТоваровУслуг(ДокументОбъект),
		СтруктураДействийПриИзмененииСтрокиРеализацияТоваровУслуг(ДокументОбъект));
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РеализацияТоваровУслуг);
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтруктураПоиска);
		ЕстьСтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоиска).Количество()>0;
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если Недостача>0 И СтрокиТовары.Количество() = 0 Тогда
			СтруктураПоиска.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
				СтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоискаСерий);
				
				Списать = 0;
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						Списать = Списать + СтрокаСерии.Количество;
					КонецЦикла;
				Иначе
					Списать = СтрокаТаблицыТовары.Количество;
				КонецЕсли;
				Списать = Мин(Списать, Недостача);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						СписатьПоСтрокеСерии = Мин(Списать,СтрокаСерии.Количество);
						СтрокаСерии.Количество = СтрокаСерии.Количество - СписатьПоСтрокеСерии;
						СтрокаСерии.Удалить = СтрокаСерии.Количество = 0;
						Списать = Списать - СписатьПоСтрокеСерии;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				
				Если ЗначениеЗаполнено(СтрокаТаблицыТовары.Серия) Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
					СтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоискаСерий);
					Если СтрокиСерий.Количество() > 0 Тогда
						СтрокаСерии = СтрокиСерий[0];
					Иначе
						СтрокаСерии = ТаблицаСерии.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСерии, СтрокаТаблицыТовары,,"Количество");
					КонецЕсли;
					СтрокаСерии.Количество = СтрокаСерии.Количество - Недостача;
				КонецЕсли;
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
				
				Если НЕ СтруктураЗаполнения.Добавление.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", НоваяСтрокаТовары.Склад, ПараметрыУказанияСерий));
					ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураДействий);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрокаТовары.Серия) Тогда
					НоваяСтрокаСерии = ТаблицаСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрокаТовары);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	ТаблицаСерии = ТаблицаСерии.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	ДокументОбъект.Серии.Загрузить(ТаблицаСерии);
	
КонецПроцедуры

// Переносит маркируемую продукцию из формы проверки и подбора в документ Возврат товаров поставщику.
// Удаляет из табличных частей Товары, Серии отсутствующую в данных проверки маркируемую продукцию.
// Не меняет прочие товарные строки.
//
// Параметры:
//  ДокументОбъект           - ДокументОбъект.ВозвратТоваровПоставщику - документ к изменению
//  ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора).
//
Процедура ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииВозвратаТоваровПоставщику(ДокументОбъект, ПараметрыОкончанияПроверки)
	
	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	ТаблицаСерии  = ДокументОбъект.Серии.Выгрузить();
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Серии", ТаблицаСерии);
	
	Запрос.УстановитьПараметр("Подобрано", ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияПроверки.ВидПродукцииИС));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия) КАК Серия,
	|	ЕСТЬNULL(Серии.Количество, Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Назначение = Серии.Назначение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ МаркируемыеТовары
	|ИЗ
	|	ТоварыСерии КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Товары.Номенклатура
	|		И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	МаркируемыеТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Недостача Убыв";
	
	ВыборкаРасхождения = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоиска      = "Номенклатура, Характеристика, Серия";
	ДополнениеСерий = "Назначение";
	КлючСтрокиСерий = СтрШаблон("%1, %2", КлючПоиска, ДополнениеСерий);

	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	ТаблицаСерии.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаСерии.Индексы.Добавить(КлючПоиска);
	ТаблицаСерии.Индексы.Добавить(КлючСтрокиСерий);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	СтруктураПоискаСерий = Новый Структура(КлючСтрокиСерий);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииНовойСтрокиВозвратТоваровПоставщику(ДокументОбъект),
		СтруктураДействийПриИзмененииСтрокиВозвратТоваровПоставщику(ДокументОбъект));
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтруктураПоиска);
		ЕстьСтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоиска).Количество()>0;
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если Недостача>0 И СтрокиТовары.Количество() = 0 Тогда
			СтруктураПоиска.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
				СтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоискаСерий);
				
				Списать = 0;
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						Списать = Списать + СтрокаСерии.Количество;
					КонецЦикла;
				Иначе
					Списать = СтрокаТаблицыТовары.Количество;
				КонецЕсли;
				Списать = Мин(Списать, Недостача);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						СписатьПоСтрокеСерии = Мин(Списать,СтрокаСерии.Количество);
						СтрокаСерии.Количество = СтрокаСерии.Количество - СписатьПоСтрокеСерии;
						СтрокаСерии.Удалить = СтрокаСерии.Количество = 0;
						Списать = Списать - СписатьПоСтрокеСерии;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				
				Если ЗначениеЗаполнено(СтрокаТаблицыТовары.Серия) Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
					СтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоискаСерий);
					Если СтрокиСерий.Количество() > 0 Тогда
						СтрокаСерии = СтрокиСерий[0];
					Иначе
						СтрокаСерии = ТаблицаСерии.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСерии, СтрокаТаблицыТовары,,"Количество");
					КонецЕсли;
					СтрокаСерии.Количество = СтрокаСерии.Количество - Недостача;
				КонецЕсли;
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
				
				Если ЗначениеЗаполнено(НоваяСтрокаТовары.Серия) Тогда
					НоваяСтрокаСерии = ТаблицаСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрокаТовары);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	ТаблицаСерии = ТаблицаСерии.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	ДокументОбъект.Серии.Загрузить(ТаблицаСерии);
	
КонецПроцедуры

// Переносит маркируемую продукцию из формы проверки и подбора в документ Корректировка реализации
//   * Удаляет из табличной части Товары отсутствующую в данных проверки маркируемую продукцию.
//   * Не меняет прочие товарные строки.
//
// Параметры:
//  ДокументОбъект             - ДокументОбъект.КорректировкаРеализации - документ к изменению
//  ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора).
//
Процедура ОтразитьИзменениеКоличестваВТабличнойЧастиТоварыКорректировкиРеализации(ДокументОбъект, ПараметрыОкончанияПроверки)
	
	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	
	Запрос.УстановитьПараметр("Подобрано", ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияПроверки.ВидПродукцииИС));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ МаркируемыеТовары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Товары.Номенклатура
	|		И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	МаркируемыеТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Недостача Убыв";
	
	ВыборкаРасхождения = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоиска      = "Номенклатура, Характеристика, Серия";
	СтруктураПоиска = Новый Структура(КлючПоиска);
	
	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииНовойСтрокиКорректировкаРеализации(ДокументОбъект),
		СтруктураДействийПриИзмененииСтрокиКорректировкаРеализации(ДокументОбъект));
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.КорректировкаРеализации);
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				
				Списать = Мин(СтрокаТаблицыТовары.Количество, Недостача);
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
			Иначе
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
				
				Если НЕ СтруктураЗаполнения.Добавление.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", НоваяСтрокаТовары.Склад, ПараметрыУказанияСерий));
					ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураДействий);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	
КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧастьШтрихкодыУпаковок

// Переносит таблицу штрихкодов верхнего уровня в документ
//   * Удаляет из табличной части "ШтрихкодыУпаковок" документа отсутствующие (содержащие внутри хотя бы 1 шт 
//   маркируемой продукции) штрихкоды верхнего уровня.
//   * Добавляет в табличную часть "ШтрихкодыУпаковок" документа отсутствующие там фактические штрихкоды.
//   * Не меняет прочие штрихкоды.
// 
// Параметры:
//   ДокументОбъект                  - ДокументОбъект  - документ для изменения
//   ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - таблица с колонкой "ШтрихкодУпаковки" (фактические)
//   ВидПродукцииИС                  - ПеречислениеСсылка.ВидыПродукцииИС - обрабатываемый вид продукции
//
Процедура ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(ДокументОбъект, ТаблицаШтрихкодовВерхнегоУровня, ВидПродукцииИС)
	
	ШтрихкодыДляПроверки = ДокументОбъект.ШтрихкодыУпаковок.Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	Для Каждого ЭлементВНаличии Из ТаблицаШтрихкодовВерхнегоУровня Цикл
		ЭлементМассива = ШтрихкодыДляПроверки.Найти(ЭлементВНаличии.ШтрихкодУпаковки);
		Если ЭлементМассива<>Неопределено Тогда
			ШтрихкодыДляПроверки.Удалить(ЭлементМассива);
		Иначе
			ЗаполнитьЗначенияСвойств(ДокументОбъект.ШтрихкодыУпаковок.Добавить(), ЭлементВНаличии);
		КонецЕсли;
	КонецЦикла;
	
	ШтрихкодыСодержащиеМаркируемуюПродукцию = ИнтеграцияИСУТ.ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыДляПроверки, ВидПродукцииИС);
	
	Для Каждого ЭлементОтсутствует Из ШтрихкодыСодержащиеМаркируемуюПродукцию Цикл
		ДокументОбъект.ШтрихкодыУпаковок.Удалить(ДокументОбъект.ШтрихкодыУпаковок.Найти(ЭлементОтсутствует, "ШтрихкодУпаковки"));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаМаркируемойПродукции(ДокументСсылка, ИмяТабЧастиТовары = Неопределено,
	ИмяТабЧастиСерии = Неопределено, ИмяПоляСклад = Неопределено, ИмяПоляКоличество = Неопределено)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если ИмяТабЧастиТовары = Неопределено Тогда
		ИмяТабЧастиТовары = "Товары";
	КонецЕсли;
	
	Если ИмяТабЧастиСерии = Неопределено Тогда
		ИмяТабЧастиСерии = "Серии";
	КонецЕсли;
	
	Если ИмяПоляСклад = Неопределено Тогда
		ИмяПоляСклад = "Склад";
	КонецЕсли;
	
	Если ИмяПоляКоличество = Неопределено Тогда
		ИмяПоляКоличество = "Количество";
	КонецЕсли;
	
	Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиТовары].Реквизиты.Найти(ИмяПоляСклад) = Неопределено Тогда
		СкладВТабличнойЧастиТовары = Ложь;
	Иначе
		СкладВТабличнойЧастиТовары = Истина;
	КонецЕсли;
	
	Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиТовары].Реквизиты.Найти("Назначение") = Неопределено Тогда
		НазначениеВТабличнойЧастиТовары = Ложь;
	Иначе
		НазначениеВТабличнойЧастиТовары = Истина;
	КонецЕсли;
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧастиСерии) = Неопределено Тогда
		ЕстьТабличнаяЧастьСерии        = Ложь;
		СкладВТабличнойЧастиСерии      = Ложь;
		НазначениеВТабличнойЧастиСерии = Ложь;
	Иначе
		ЕстьТабличнаяЧастьСерии = Истина;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиСерии].Реквизиты.Найти(ИмяПоляСклад) = Неопределено Тогда
			СкладВТабличнойЧастиСерии = Ложь;
		Иначе
			СкладВТабличнойЧастиСерии = Истина;
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиСерии].Реквизиты.Найти("Назначение") = Неопределено Тогда
			НазначениеВТабличнойЧастиСерии = Ложь;
		Иначе
			НазначениеВТабличнойЧастиСерии = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьСвязьПоСкладуТабличнойЧасти = СкладВТабличнойЧастиТовары И СкладВТабличнойЧастиСерии;
	ДобавитьСвязьПоНазначению           = НазначениеВТабличнойЧастиТовары И НазначениеВТабличнойЧастиСерии;
	
	Если ЕстьТабличнаяЧастьСерии Тогда
		
		ТекстЗапросаШаблон = "ВЫБРАТЬ
		|	Товары.Номенклатура                                 КАК Номенклатура,
		|	Товары.Характеристика                               КАК Характеристика,
		|	ЕСТЬNULL(Серии.Серия, Товары.Серия)                 КАК Серия,
		|	СУММА(ЕСТЬNULL(Серии.Количество,Товары.Количество)) КАК Количество
		|ИЗ
		|	Документ.%1.%2 КАК Товары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.%1.%3 КАК Серии
		|		ПО Товары.Номенклатура = Серии.Номенклатура
		|		И Товары.Характеристика = Серии.Характеристика
		|		И Серии.Ссылка = &Документ
		|		%4
		|		%5
		|ГДЕ
		|	Товары.Ссылка = &Документ
		|	И &УсловиеМаркируемаяПродукция
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	ЕСТЬNULL(Серии.Серия, Товары.Серия)";
		
		СвязьПоСкладу = "";
		Если ДобавитьСвязьПоСкладуТабличнойЧасти Тогда
			ШаблонСвязьПоСкладу = "И Товары.%1 = Серии.%1";
			СвязьПоСкладу = СтрШаблон(ШаблонСвязьПоСкладу, ИмяПоляСклад);
		КонецЕсли;
		
		СвязьПоНазначению = "";
		Если ДобавитьСвязьПоНазначению Тогда
			СвязьПоНазначению = "И Товары.Назначение = Серии.Назначение";
		КонецЕсли;
		
		ТекстЗапроса = СтрШаблон(ТекстЗапросаШаблон, МетаданныеДокумента.Имя, ИмяТабЧастиТовары, ИмяТабЧастиСерии, СвязьПоСкладу, СвязьПоНазначению);
		
	Иначе
		
		ТекстЗапросаШаблон = "ВЫБРАТЬ
		|	Товары.Номенклатура      КАК Номенклатура,
		|	Товары.Характеристика    КАК Характеристика,
		|	Товары.Серия             КАК Серия,
		|	СУММА(Товары.%3)         КАК Количество
		|ИЗ
		|	Документ.%1.%2 КАК Товары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Документ
		|	И &УсловиеМаркируемаяПродукция
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Серия";
		
		ТекстЗапроса = СтрШаблон(ТекстЗапросаШаблон, МетаданныеДокумента.Имя, ИмяТабЧастиТовары, ИмяПоляКоличество);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ОбработкаЗаполнения

#Область ОбщиеПроцедуры

Функция ОпределитьТипОснования(Знач ДанныеЗаполнения)
	
	ОснованиеЗаполнения = ДанныеЗаполнения;
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("Структура") И ОснованиеЗаполнения.Свойство("Основание") Тогда
		ОснованиеЗаполнения = ОснованиеЗаполнения.Основание;
	КонецЕсли;
	Возврат ТипЗнч(ОснованиеЗаполнения);
	
КонецФункции

Функция ДополнитьУсловиеТабличнойЧасти(ИмяДокумента, ИмяТабличнойЧасти)
	
	МассивУсловийИ = Новый Массив;
	
	Если ИмяДокумента = "ЗаказПоставщику" Тогда
		МассивУсловийИ.Добавить("И НЕ Товары.Отменено");
	КонецЕсли;
	
	Возврат СтрСоединить(МассивУсловийИ);
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТабличнаяЧасть, РезультатЗапроса, ДанныеЗаполнения, ДополнительныеПараметры = Неопределено)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаполнениеНеобязательно = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ВозможноПустая");
	
	Если Выборка.Количество() = 0 И Не ЗаполнениеНеобязательно Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Основание = ДанныеЗаполнения.Основание;
		Иначе
			Основание = ДанныеЗаполнения;
		КонецЕсли;
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'В %1 отсутствует продукция для заполнения.'"),
			Основание);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьШапку") Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыДокумента.ДокументОснование,
			,
			РеквизитыДокумента.ЕстьОшибкиПроведен,,);
			
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента)
	
	Возврат СтрШаблон(
	"ВЫБРАТЬ
	|	Таблица.ШтрихкодУпаковки,
	|	Таблица.ЗначениеШтрихкода
	|ИЗ
	|	Документ.%1.ШтрихкодыУпаковок КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка",
	ИмяДокумента);
	
КонецФункции

// Функция возвращает шаблон запроса оформленных документов
//
Функция ШаблонОформленныеДокументы()
	
	Шаблон =
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы%1
	|ИЗ
	|	Документ.%1 КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И СтатусыДокументовИСМП.Статус НЕ В(&КонечныеСтатусы)
	|;
	|";
	
	Возврат Шаблон;
	
КонецФункции

#КонецОбласти

#Область ЗаказНаЭмиссиюКодовМаркировкиСУЗ

Процедура ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ИмяТабличнойЧасти = "Товары")
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание          = ДанныеЗаполнения;
		ФильтрВидПродукции = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
		ОсобенностьУчета   = Новый Массив;
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ИмяТабличнойЧасти);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), Основание);
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ИмяТабличнойЧасти)
	
	УсловиеОтбораТабличнойЧасти = ДополнитьУсловиеТабличнойЧасти(ИмяДокумента, ИмяТабличнойЧасти);
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Товары.Номенклатура      КАК Номенклатура,
		|	Товары.Характеристика    КАК Характеристика,
		|	СУММА(Товары.Количество) КАК Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.%1.%2 КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	 %3
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика",
			ИмяДокумента,
			ИмяТабличнойЧасти,
			УсловиеОтбораТабличнойЧасти)
	+"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	-1
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТ
Процедура ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПереработчику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                        КАК ДокументОснование,
	|	ДокументСсылка.Организация                                   КАК Организация,
	|	ДокументСсылка.Подразделение                                 КАК ПроизводственныйОбъект,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство) КАК СпособВводаВОборот,
	|	НЕ ДокументСсылка.Проведен   КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, "ЗаказПереработчику", "Продукция");
	
КонецПроцедуры
//-- НЕ УТ


Процедура ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                КАК ДокументОснование,
	|	ДокументСсылка.Организация                           КАК Организация,
	|	ДокументСсылка.Подразделение                         КАК ПроизводственныйОбъект,
	|	ДокументСсылка.Контрагент                            КАК Контрагент,
	|	ВЫБОР 
	|		КОГДА ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт)
	|	КОНЕЦ КАК СпособВводаВОборот,
	|	НЕ ДокументСсылка.Проведен   КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, "ЗаказПоставщику");
	
КонецПроцедуры

#КонецОбласти

#Область МаркировкаТоваровИСМП

Функция ДанныеПрикладныхДокументовИзМаркировкиТоваровИСМП(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркировкаТоваровИСМП.Организация КАК Организация,
	|	МаркировкаТоваровИСМП.Комментарий КАК Комментарий,
	|	МаркировкаТоваровИСМП.Дата        КАК Дата,
	|	Не МаркировкаТоваровИСМП.Проведен КАК ЕстьОшибкиПроведен,
	|	МаркировкаТоваровИСМП.Товары.(
	|		Номенклатура           КАК Номенклатура,
	|		Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|		Характеристика         КАК Характеристика,
	|		Серия                  КАК Серия,
	|		Упаковка               КАК Упаковка,
	|		Количество             КАК Количество,
	|		КоличествоУпаковок     КАК КоличествоУпаковок,
	|		СтатусУказанияСерий    КАК СтатусУказанияСерий
	|	) КАК Товары
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК МаркировкаТоваровИСМП
	|ГДЕ
	|	МаркировкаТоваровИСМП.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	Если ДокументОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, ЕстьШтрихкодыУпаковок = Ложь)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыСерии = Неопределено Тогда
		ТоварыСерии = Новый Массив;
		ТоварыСерии.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
		Основание          = ДанныеЗаполнения.Основание;
		ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
		ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
	Иначе
		Основание          = ДанныеЗаполнения;
		ОсобенностьУчета   = Новый Массив;
		ФильтрВидПродукции = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяДокумента = "ПересчетТоваров" Тогда
		ВыражениеКоличество = "ТаблицаТовары.КоличествоФакт";
	Иначе
		ВыражениеКоличество = "ТаблицаТовары.Количество";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ИмяДокумента = "ПроизводственнаяОперацияВЕТИС" Тогда
		Запрос.Текст = ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзОперацииВЕТИС(ИмяДокумента,
			"ВетеринарноСопроводительныйДокумент", "ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)");
	ИначеЕсли ИмяДокумента = "ВходящаяТранспортнаяОперацияВЕТИС" Тогда
		Запрос.Текст = ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзОперацииВЕТИС(ИмяДокумента,
			"ЗаписьСкладскогоЖурнала", "ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)");
	Иначе
		Запрос.Текст = ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(
			ИмяДокумента, ТоварыСерии, ВыражениеКоличество);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.МаркировкаТоваровИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), Основание);
	
	Если ЕстьШтрихкодыУпаковок Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента);
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		ДокументОбъект.ШтрихкодыУпаковок.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(
	ИмяДокумента, ТабличныеЧастиТоварыСерии, ВыражениеКоличество="ТаблицаТовары.Количество")
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ТаблицаТовары.Характеристика       КАК Характеристика,
		|	ТаблицаТовары.Серия                КАК Серия,
		|	СУММА(" + ВыражениеКоличество + ") КАК Количество
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|ИМЕЮЩИЕ
		|	СУММА(" + ВыражениеКоличество + ") > 0
		|";
		Если ТоварыСерии.Серии <> "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ТаблицаТовары.Серия          КАК Серия,
			|	" + ВыражениеКоличество + "  КАК Количество
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		И ТаблицаСерии.Ссылка = &ДокументОснование
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ТаблицаСерии.Количество
			|ИЗ
			|	&ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаСерии.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|";
		КонецЕсли;
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзОперацииВЕТИС(ИмяДокумента, ИмяПоляИдентификатор, ПустоеЗначениеИдентификатор)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Характеристика       КАК Характеристика,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.%2 КАК ИдентификаторПроисхожденияВЕТИС,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.%1.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И ТаблицаТовары.%2 <> %3
	|	И СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.%2
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТовары.Количество) > 0
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.ИдентификаторПроисхожденияВЕТИС,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	ТоварыКОформлению.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.ИдентификаторПроисхожденияВЕТИС
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	Возврат СтрШаблон(ТекстЗапроса, ИмяДокумента, ИмяПоляИдентификатор, ПустоеЗначениеИдентификатор);
	
КонецФункции

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПрочегоОприходованияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.Склад            КАК Склад,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Товары", "Серии"));
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПрочееОприходованиеТоваров", ТабличныеЧасти);
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПересчетаТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка      КАК ДокументОснование,
	|	НЕОПРЕДЕЛЕНО               КАК Организация,
	|	ДокументСсылка.Склад       КАК Склад,
	|	&Операция                  КАК Операция,
	|	&ВидПродукции              КАК ВидПродукции,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПересчетТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	Запрос.УстановитьПараметр("Операция",     Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
	Запрос.УстановитьПараметр("ВидПродукции", ДокументОбъект.ВидПродукции);
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект,
		Новый Структура(
			"Основание,ИмяФильтра,ЗначениеФильтра",
			ДанныеЗаполнения,
			"ЗаполнениеСВидомПродукции",
			ДокументОбъект.ВидПродукции),
		"ПересчетТоваров",
		ТабличныеЧасти);
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииОприходованияИзлишковТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.Склад            КАК Склад,
	|	&Операция                       КАК Операция,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("Операция", ДокументОбъект.Операция);
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ОприходованиеИзлишковТоваров");
	
КонецПроцедуры


Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПроизводственнойОперацииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                          КАК ДокументОснование,
	|	ДокументСсылка.ХозяйствующийСубъект.Контрагент КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию) КАК ОперацияНанесения,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ) КАК Операция,
	|	НЕ ДокументСсылка.Проведен                     КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПроизводственнаяОперацияВЕТИС");
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииВходящейТранспортнойОперацииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                          КАК ДокументОснование,
	|	ДокументСсылка.ГрузополучательХозяйствующийСубъект.Контрагент КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию) КАК ОперацияНанесения,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС) КАК Операция,
	|	НЕ ДокументСсылка.Проведен                     КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВходящаяТранспортнаяОперацияВЕТИС");
	
КонецПроцедуры

//++ НЕ УТ
Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПроизводстваБезЗаказа(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "ВыходныеИзделия", "ВыходныеИзделияСерии"));
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "ПобочныеИзделия", "ПобочныеИзделияСерии"));
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПроизводствоБезЗаказа", ТабличныеЧасти);
	
	Если ДокументОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПоступленияОтпереработчика(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПоступлениеОтПереработчика КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Товары", "ТоварыСерии"));
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПоступлениеОтПереработчика", ТабличныеЧасти);
	
	Если ДокументОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПриобретенияТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка      КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц)
	|		КОГДА ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС)
	|	КОНЕЦ                      КАК Операция
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Товары", "Серии"));
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПриобретениеТоваровУслуг", ТабличныеЧасти, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииСборкиТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                                      КАК ДокументОснование,
	|	ДокументСсылка.Организация                                                 КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ) КАК Операция,
	|	НЕ ДокументСсылка.Проведен                                                 КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.СборкаТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "", ""));
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "СборкаТоваров", ТабличныеЧасти);
	
КонецПроцедуры

#КонецОбласти

#Область ВыводИзОборотаИСМП

Функция ДанныеПрикладныхДокументовИзВыводаИзОборотаИСМП(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыводИзОборотаИСМП.Организация КАК Организация,
	|	ВыводИзОборотаИСМП.Комментарий КАК Комментарий,
	|	ВыводИзОборотаИСМП.Дата        КАК Дата,
	|	Не ВыводИзОборотаИСМП.Проведен КАК ЕстьОшибкиПроведен,
	|	ВыводИзОборотаИСМП.Товары.(
	|		Номенклатура           КАК Номенклатура,
	|		Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|		Характеристика         КАК Характеристика,
	|		Серия                  КАК Серия,
	|		Упаковка               КАК Упаковка,
	|		Количество             КАК Количество,
	|		КоличествоУпаковок     КАК КоличествоУпаковок,
	|		СтатусУказанияСерий    КАК СтатусУказанияСерий
	|	) КАК Товары
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП КАК ВыводИзОборотаИСМП
	|ГДЕ
	|	ВыводИзОборотаИСМП.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыСерии = Неопределено Тогда
		ТоварыСерии = Новый Массив;
		ТоварыСерии.Добавить(Новый Структура("Товары, Серии, ПолеСумма", "Товары", "", ""));
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание          = ДанныеЗаполнения;
		ФильтрВидПродукции = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП();
		ОсобенностьУчета   = Новый Массив;
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ТоварыСерии, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ВыводИзОборотаИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	Пакет = Запрос.ВыполнитьПакет();
	ИндексТовары    = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], Основание);
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если Штрихкоды <> Неопределено Тогда
		ИндексШтрихкоды = Пакет.Количество() - 1;
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.ШтрихкодыУпаковок, Пакет[ИндексШтрихкоды], ДанныеЗаполнения, Новый Структура("ВозможноПустая"));
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличныеЧастиТоварыСерии, ТабличнаяЧастьШтрихкоды)
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(&ПолеСумма)               КАК Сумма
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|;";
		Если ТоварыСерии.Серии <> "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ТаблицаТовары.Серия          КАК Серия,
			|	ТаблицаТовары.Количество     КАК Количество,
			|	&ПолеСумма                   КАК Сумма
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		И ТаблицаСерии.Ссылка = &ДокументОснование
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ТаблицаСерии.Количество,
			|	ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0 ИНАЧЕ &ПолеСумма * ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ
			|ИЗ
			|	&ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		(ВЫБРАТЬ
			|			ТаблицаТовары.Номенклатура      КАК Номенклатура,
			|			ТаблицаТовары.Характеристика    КАК Характеристика,
			|			СУММА(ТаблицаТовары.Количество) КАК Количество,
			|			СУММА(&ПолеСумма)               КАК Сумма
			|		ИЗ
			|			&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ГДЕ
			|			ТаблицаТовары.Ссылка = &ДокументОснование
			|		СГРУППИРОВАТЬ ПО
			|			ТаблицаТовары.Номенклатура,
			|			ТаблицаТовары.Характеристика) КАК ТаблицаТовары
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаСерии.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|;";
		КонецЕсли;
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
		
		Если ЗначениеЗаполнено(ТоварыСерии.ПолеСумма) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма", СтрШаблон("ТаблицаТовары.%1",ТоварыСерии.ПолеСумма));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма", "0");
		КонецЕсли;
		
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество,
	|	Товары.Сумма          КАК Сумма
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	ВЫБОР КОГДА СУММА(ТоварыКОформлению.Количество) > 0 И СУММА(ТоварыКОформлению.Сумма) > 0
	|		ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|	ИНАЧЕ 0 КОНЕЦ                       КАК Цена
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|";
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Штрихкоды.%3.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
		|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|		И ОформленныеШтрихкоды.Ссылка.Проведен
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииЧекаККМ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ФискальныеОперации.НомерЧекаККМ КАК НомерПервчиногоДокумента,
	|	ФискальныеОперации.Дата         КАК ДатаПервчиногоДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа)        КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек) КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументСсылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО ФискальныеОперации.ДокументОснование = &ДокументОснование
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии, ПолеСумма", "Товары", "Серии", "Сумма"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ЧекККМ", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииРеализацииТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ФискальныеОперации.НомерЧекаККМ КАК НомерПервчиногоДокумента,
	|	ФискальныеОперации.Дата         КАК ДатаПервчиногоДокумента,
	|	ВЫБОР
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа)
	|		КОГДА ЕСТЬNULL(Контрагенты.СтранаРегистрации.УчастникЕАЭС, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС) 
	|	КОНЕЦ                           КАК Операция,
	|	ВЫБОР
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.УПД)
	|	КОНЕЦ КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументСсылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО ФискальныеОперации.ДокументОснование = &ДокументОснование
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.Ссылка = ДокументСсылка.Контрагент
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии, ПолеСумма", "Товары", "Серии", "Сумма"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "РеализацияТоваровУслуг", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа)        КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек) КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии, ПолеСумма", "Товары", "Серии", "Сумма"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ОтчетОРозничныхПродажах", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииВнутреннегоПотребленияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)                         КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии, ПолеСумма", "Товары", "Серии", ""));
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ВнутреннееПотреблениеТоваров", ТабличныеЧасти);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииСписанияНедостачТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)      КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "СписаниеНедостачТоваров");
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу)  КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.УПД) КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии, ПолеСумма", "Товары", "Серии", "Сумма"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровПоставщику", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииСборкиТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)      КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.СборкаТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии, ПолеСумма", "", "", "0"));
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "СборкаТоваров", ТабличныеЧасти);
	
КонецПроцедуры

#КонецОбласти

#Область ПеремаркировкаТоваровИСМП

Процедура ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если Штрихкоды = Неопределено Тогда
		Штрихкоды = Новый Структура;
		Штрихкоды.Вставить("ИмяТаблицыШтрихкодыУпаковок", "ШтрихкодыУпаковок");
		Штрихкоды.Вставить("ИмяКолонкиШтрихкодУпаковки",  "ШтрихкодУпаковки");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
		Основание          = ДанныеЗаполнения.Основание;
		ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
		ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
	Иначе
		Основание          = ДанныеЗаполнения;
		ФильтрВидПродукции = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
		ОсобенностьУчета   = Новый Массив;
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияПеремаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ПеремаркировкаТоваровИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	Выборка = Запрос.Выполнить();
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Выборка, Основание);
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияПеремаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличнаяЧастьШтрихкоды)
	
	ТекстЗапроса = СтрШаблон(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка         КАК КодМаркировки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура   КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Номенклатура   КАК НоваяНоменклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК НоваяХарактеристика
	|ИЗ
	|	Документ.%1.%2 КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО Штрихкоды.%3 = ШтрихкодыУпаковокТоваров.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремаркировкаТоваровИСМП.Товары КАК ОформленныеШтрихкоды
	|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
	|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
	|		И ОформленныеШтрихкоды.КодМаркировки = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	Штрихкоды.Ссылка = &ДокументОснование
	|	И ОформленныеШтрихкоды.КодМаркировки ЕСТЬ NULL
	|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|",
	ИмяДокумента,
	ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
	ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьСписаниеКодовМаркировкиИСМПНаОснованииВозвратаТоваровОтКлиента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровОтКлиента");
	
КонецПроцедуры

#КонецОбласти

#Область ОтгрузкаТоваровИСМП

Процедура ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеИСМП.ДокументСвязанСЭлектронным(Основание, Истина) Тогда
		ВызватьИсключение НСтр("ru = 'По текущему документу уже оформлен электронный документ с информацией о маркируемых товарах'");
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание          = ДанныеЗаполнения;
		ФильтрВидПродукции = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП();
		ОсобенностьУчета   = Новый Массив;
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияОтгрузкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ТоварыСерии, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ОтгрузкаТоваровИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	Пакет = Запрос.ВыполнитьПакет();
	ИндексТовары    = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], Основание);
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если Штрихкоды <> Неопределено Тогда
		
		ШтрихкодыОснования = Пакет[ИндексТовары+1].Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
		ШтрихкодыПоВидуПродукции = ИнтеграцияИСУТ.ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыОснования, ФильтрВидПродукции);
		Для Каждого ЭлементМассива Из ШтрихкодыПоВидуПродукции Цикл
			ДокументОбъект.ШтрихкодыУпаковок.Добавить().ШтрихкодУпаковки = ЭлементМассива;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеТабличнойЧастиДляФормированияОтгрузкиТоваровИСМП(ИмяТабличнойЧастиСерии = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Товары",         "Товары");
	Результат.Вставить("Серии",          ИмяТабличнойЧастиСерии);
	Результат.Вставить("ПолеСтавкаНДС",  "ТаблицаТовары.СтавкаНДС");
	Результат.Вставить("ПолеКоличество", "ТаблицаТовары.Количество");
	Результат.Вставить("ПолеСумма",      "ТаблицаТовары.Сумма");
	Результат.Вставить("ПолеСуммаСНДС",  "ТаблицаТовары.СуммаСНДС");
	Результат.Вставить("ПолеСуммаНДС",   "ТаблицаТовары.СуммаНДС");
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаЗаполненияОтгрузкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличныеЧастиТоварыСерии, ТабличнаяЧастьШтрихкоды)
	
	Если ТабличныеЧастиТоварыСерии = Неопределено Тогда
		ТабличныеЧастиТоварыСерии = Новый Массив;
		ТабличныеЧастиТоварыСерии.Добавить(ОписаниеТабличнойЧастиДляФормированияОтгрузкиТоваровИСМП());
	КонецЕсли;
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура        КАК Номенклатура,
		|	ТаблицаТовары.Характеристика      КАК Характеристика,
		|	ТаблицаТовары.Серия               КАК Серия,
		|	&ПолеСтавкаНДС                    КАК СтавкаНДС,
		|	СУММА(&ПолеКоличество)            КАК Количество,
		|	СУММА(&ПолеСумма)                 КАК Сумма,
		|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
		|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	&ПолеСтавкаНДС
		|;";
		Если ТоварыСерии.Серии <> "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура        КАК Номенклатура,
			|	ТаблицаТовары.Характеристика      КАК Характеристика,
			|	ТаблицаТовары.Серия               КАК Серия,
			|	&ПолеСтавкаНДС                    КАК СтавкаНДС,
			|	СУММА(&ПолеКоличество)            КАК Количество,
			|	СУММА(&ПолеСумма)                 КАК Сумма,
			|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
			|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		И ТаблицаСерии.Ссылка = &ДокументОснование
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТовары.Номенклатура,
			|	ТаблицаТовары.Характеристика,
			|	ТаблицаТовары.Серия,
			|	&ПолеСтавкаНДС
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ТаблицаТовары.СтавкаНДС,
			|	СУММА(ТаблицаСерии.Количество),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.Сумма),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаНДС),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаСНДС)
			|ИЗ
			|	&ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		(ВЫБРАТЬ
			|			ТаблицаТовары.Номенклатура    КАК Номенклатура,
			|			ТаблицаТовары.Характеристика  КАК Характеристика,
			|			МАКСИМУМ(&ПолеСтавкаНДС)      КАК СтавкаНДС,
			|			СУММА(&ПолеКоличество)        КАК Количество,
			|			СУММА(&ПолеСумма)             КАК Сумма,
			|			СУММА(&ПолеСуммаНДС)          КАК СуммаНДС,
			|			СУММА(&ПолеСуммаСНДС)         КАК СуммаСНДС
			|		ИЗ
			|			&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ГДЕ
			|			ТаблицаТовары.Ссылка = &ДокументОснование
			|		СГРУППИРОВАТЬ ПО
			|			ТаблицаТовары.Номенклатура,
			|			ТаблицаТовары.Характеристика) КАК ТаблицаТовары
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаСерии.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ТаблицаТовары.СтавкаНДС
			|;";
		КонецЕсли;
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСтавкаНДС",          ТоварыСерии.ПолеСтавкаНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеКоличество",         ТоварыСерии.ПолеКоличество);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма",              ТоварыСерии.ПолеСумма);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаНДС",           ТоварыСерии.ПолеСуммаНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаСНДС",          ТоварыСерии.ПолеСуммаСНДС);
		
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	
	ТекстЗапроса = ТекстЗапроса + СтрШаблон(ШаблонОформленныеДокументы(),"ОтгрузкаТоваровИСМП");
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Серия               КАК Серия,
	|	Товары.СтавкаНДС           КАК СтавкаНДС,
	|	Товары.Количество          КАК Количество,
	|	Товары.Сумма               КАК Сумма,
	|	Товары.СуммаНДС            КАК СуммаНДС,
	|	Товары.СуммаСНДС           КАК СуммаСНДС
	|	
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.СтавкаНДС,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма,
	|	-ОформленныеТовары.СуммаНДС,
	|	-ОформленныеТовары.СуммаСНДС
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументыОтгрузкаТоваровИСМП КАК Т)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	ТоварыКОформлению.СтавкаНДС         КАК СтавкаНДС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС)   КАК СуммаНДС,
	|	СУММА(ТоварыКОформлению.СуммаСНДС)  КАК СуммаСНДС,
	|	ВЫБОР КОГДА СУММА(ТоварыКОформлению.Количество) > 0 И СУММА(ТоварыКОформлению.Сумма) > 0
	|		ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|	ИНАЧЕ 0 КОНЕЦ                       КАК Цена
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|";
	
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументыОтгрузкаТоваровИСМП КАК Т)
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииРеализацииТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.Контрагент       КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий      КАК Комментарий,
	|	ДокументСсылка.Дата             КАК ДатаОтгрузки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧастиДляФормированияОтгрузкиТоваровИСМП("Серии"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "РеализацияТоваровУслуг", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.Контрагент       КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий      КАК Комментарий,
	|	ДокументСсылка.Дата             КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧастиДляФормированияОтгрузкиТоваровИСМП("Серии"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровПоставщику", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииКорректировкиРеализации(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.Контрагент       КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий      КАК Комментарий,
	|	ДокументСсылка.Дата             КАК ДатаОтгрузки
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "КорректировкаРеализации",, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииПередачиТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                КАК ДокументОснование,
	|	ДокументСсылка.Организация           КАК Организация,
	|	ДокументСсылка.Контрагент            КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен           КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
	|	ДокументСсылка.Номер                 КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата                  КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий           КАК Комментарий,
	|	ДокументСсылка.Дата                  КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПередачаТоваровМеждуОрганизациями");
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииВозвратаТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                КАК ДокументОснование,
	|	ДокументСсылка.Организация           КАК Организация,
	|	ДокументСсылка.Контрагент            КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен           КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
	|	ДокументСсылка.Номер                 КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата                  КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий           КАК Комментарий,
	|	ДокументСсылка.Дата                  КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровМеждуОрганизациями");
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииПеремещенияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                КАК ДокументОснование,
	|	ДокументСсылка.Организация           КАК Организация,
	|	ДокументСсылка.ОрганизацияПолучатель КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен
	|		Или ДокументСсылка.ОрганизацияПолучатель = ЗНАЧЕНИЕ(Справочник.Организации.Пустаяссылка)
	|		Или ДокументСсылка.Организация = ДокументСсылка.ОрганизацияПолучатель           КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
	|	ДокументСсылка.Номер                 КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата                  КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий           КАК Комментарий,
	|	ДокументСсылка.Дата                  КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиДляФормированияОтгрузкиТоваровИСМП("Серии");
	ОписаниеТабличнойЧасти.ПолеСтавкаНДС = "ТаблицаТовары.Номенклатура.СтавкаНДС";
	ОписаниеТабличнойЧасти.ПолеЦена = "0";
	ОписаниеТабличнойЧасти.ПолеСумма = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
	
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПеремещениеТоваров");
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваровИСМП

Функция ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемкаТоваровИСМП.Организация КАК Организация,
	|	ПриемкаТоваровИСМП.Контрагент  КАК Контрагент,
	|	ПриемкаТоваровИСМП.Комментарий КАК Комментарий,
	|	ПриемкаТоваровИСМП.Дата        КАК Дата,
	|	Не ПриемкаТоваровИСМП.Проведен КАК ЕстьОшибкиПроведен,
	|	ПриемкаТоваровИСМП.Товары.(
	|		Номенклатура           КАК Номенклатура,
	|		Характеристика         КАК Характеристика,
	|		Серия                  КАК Серия,
	|		Упаковка               КАК Упаковка,
	|		Количество             КАК Количество,
	|		КоличествоУпаковок     КАК КоличествоУпаковок,
	|		СтатусУказанияСерий    КАК СтатусУказанияСерий
	|	) КАК Товары
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП
	|ГДЕ
	|	ПриемкаТоваровИСМП.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеДобавленныхИзмененныхСтрок

Функция СтруктураДействийПриДобавленииНовойСтрокиРеализацияТоваровУслуг(Объект)
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", 
		Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару", Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
		Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиВозвратТоваровПоставщику(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПараметрыУказанияСерий  = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ВозвратТоваровПоставщику);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПринятойМногооборотнойТары);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиКорректировкаРеализации(Объект)
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	ДатаОснования = Объект.Дата;
	ИспользуетсяКоличествоУпаковок = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДатаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Дата");
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ИспользуетсяКоличествоУпаковок = Истина;
		КонецЕсли;
	КонецЕсли;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
	СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, ДатаОснования));
	СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ЗаполнитьВариантОтраженияКорректировкиРеализации", Объект.ВидКорректировки);
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиПриобретениеТоваровУслуг(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиВозвратТоваровОтКлиента(Объект)

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Возврат СтруктураДействий;
	
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтроки(ДокументОбъект)

	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		
		СтруктураДействий = СтруктураДействийПриДобавленииНовойСтрокиПриобретениеТоваровУслуг(ДокументОбъект);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		
		СтруктураДействий = СтруктураДействийПриДобавленииНовойСтрокиВозвратТоваровОтКлиента(ДокументОбъект);
		
	Иначе
		
		СтруктураДействий = Новый Структура;
		
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции


Функция СтруктураДействийПриИзмененииСтрокиРеализацияТоваровУслуг(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриИзмененииСтрокиВозвратТоваровПоставщику(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриИзмененииСтрокиКорректировкаРеализации(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Возврат СтруктураДействий;
	
КонецФункции


Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий)

	ТипСтрокиТабличнойЧасти = ТипЗнч(СтрокаТабличнойЧасти);
	
	Если ТипСтрокиТабличнойЧасти = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	ИначеЕсли Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти) <> Неопределено Тогда
		СтрокаТабличнойЧастиСтруктурой = Новый Структура();
		ПодстрокиИмени = СтрРазделить(Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти).ПолноеИмя(), ".");
		
		Если ПодстрокиИмени.Количество() = 4 Тогда
			РеквизитыСтроки = Метаданные.Документы[ПодстрокиИмени[1]].ТабличныеЧасти[ПодстрокиИмени[3]].Реквизиты;
			Для Каждого РеквизитСтроки Из РеквизитыСтроки Цикл
				СтрокаТабличнойЧастиСтруктурой.Вставить(РеквизитСтроки.Имя, СтрокаТабличнойЧасти[РеквизитСтроки.Имя]);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧастиСтруктурой, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
