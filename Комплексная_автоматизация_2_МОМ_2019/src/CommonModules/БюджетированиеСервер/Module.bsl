
#Область ПрограммныйИнтерфейс

#Область ПреобразованиеТиповАналитики

// Возвращает признак, что измерение считается аналитикой по типу измерения
//
// Параметры:
// 	ТипЗначенияИзмерения - ОписаниеТипов - Описание типов аналитики
// 	ВидАналитики         - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Ссылка на ПВХ АналитикиСтатейБюджетов.
//
// Возвращаемое значение:
// 	Булево - Истина, если измерение является аналитикой.
//
Функция ЭтоИзмерениеАналитики(ТипЗначенияИзмерения, ВидАналитики = Неопределено) Экспорт
	
	ЭтоИзмерениеАналитики = Истина;
	
	Если ТипЗнч(ВидАналитики) = Тип("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов") Тогда
		ЭтоИзмерениеАналитики = Истина;
	ИначеЕсли ТипЗначенияИзмерения = ВсеТипыАналитик() Тогда
		ЭтоИзмерениеАналитики = Истина;
	Иначе
		ВсеТипыАналитик = ВсеТипыАналитик();
		Типы = ТипЗначенияИзмерения.Типы();
		Для каждого ТипАналитики Из Типы Цикл
			Если ТипАналитики = Тип("СправочникСсылка.Организации") Тогда
				ЭтоИзмерениеАналитики = Ложь;
				Прервать;
			ИначеЕсли ТипАналитики = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				ЭтоИзмерениеАналитики = Ложь;
				Прервать;
			ИначеЕсли ТипАналитики = Тип("СправочникСсылка.Сценарии") Тогда
				ЭтоИзмерениеАналитики = Ложь;
				Прервать;
			ИначеЕсли ТипАналитики = Тип("СправочникСсылка.Валюты") Тогда
				ЭтоИзмерениеАналитики = Ложь;
				Прервать;
			ИначеЕсли НЕ ВсеТипыАналитик.СодержитТип(ТипАналитики) Тогда
				ЭтоИзмерениеАналитики = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЭтоИзмерениеАналитики;
	
КонецФункции

// Возвращает выражение пустого значения аналитики
//
// Возвращаемое значение:
// 	Строка - Выражение значения аналитики для запроса.
//
Функция ВыражениеПустогоЗначенияАналитики() Экспорт
	Возврат "Неопределено";
КонецФункции

// Возвращает описание типов всех типов аналитик бюджетирования
//
// Возвращаемое значение:
// 	ОписаниеТипов - описание типов всех типов значений аналитик бюджетирования.
//
Функция ВсеТипыАналитик() Экспорт
	Возврат Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип;
КонецФункции

// Возвращает выражение значения аналитики с проверкой типа значения
//
// Параметры:
// 	ВыражениеИсточник - Строка         - Выражение источника значения аналитики. Например, поле запроса / таблицы, из которого берется значение аналитики.
// 	                                     Если выражение источника не заполнен, выражение аналитики вернет выражение пустой аналитики. По умолчанию не заполнено.
// 	ВидАналитики      - ВидАналитики   - для генерации выражения для СКД требуется вид аналитики.
//
// Возвращаемое значение:
// 	Строка - Выражение значения аналитики для запроса, с проверкой типа значения.
//
Функция ВыражениеЗначенияАналитикиПоИсточникуИТипу(ВыражениеИсточник = "", ВидАналитики = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыражениеИсточник)
	 ИЛИ НЕ ЗначениеЗаполнено(ВидАналитики) Тогда
		ИтоговоеВыражение = ВыражениеПустогоЗначенияАналитики();
	Иначе
		ИтоговоеВыражение = "
			|Выбор 
			// Приведение пустых к значению Неопределено - Null, Неопределено, ПустаяСсылка
			|	Когда НЕ ЗначениеЗаполнено(%1) Тогда %3
			// Проверка на соответствие значения ожидаемому типу
			|	Когда НЕ ТипЗначения(%1) В (БюджетированиеПовтИсп.ТипыВидаАналитики(%2)) Тогда %3
			// После всех проверок можно использовать значение поля
			|	Иначе %1
			|Конец";
		ИтоговоеВыражение = СтрШаблон(ИтоговоеВыражение, 
			ВыражениеИсточник, 
			"""" + МониторингЦелевыхПоказателей.УникальныйИдентификаторВСтроку(ВидАналитики.УникальныйИдентификатор()) + """",
			ВыражениеПустогоЗначенияАналитики());
	КонецЕсли;
	
	Возврат ИтоговоеВыражение;
КонецФункции

// Возвращает выражение значения аналитики с проверкой типа значения
//
// Параметры:
// 	ВыражениеИсточник              - Строка         - Выражение источника значения аналитики. Например, поле запроса / таблицы, из которого берется значение аналитики.
// 	                                                  Если выражение источника не заполнен, выражение аналитики вернет выражение пустой аналитики. По умолчанию не заполнено.
// 	ВыражениеИсточникВидаАналитики - Строка         - Выражение источника вида аналитики.
// 	                                                  Если выражение источника не заполнено, выражение аналитики вернет выражение пустой аналитики. По умолчанию не заполнено.
//
// Возвращаемое значение:
// 	Строка - Выражение значения аналитики для СКД, с проверкой типа значения.
//
Функция ВыражениеЗначенияАналитикиПоИсточникуИВидуАналитики(ВыражениеИсточник = "", ВыражениеИсточникВидаАналитики = "") Экспорт
	
	ТребуетсяКонтрольТипа = ЗначениеЗаполнено(ВыражениеИсточникВидаАналитики) 
		И ЗначениеЗаполнено(ВыражениеИсточник) 
		И НЕ ВРег(ВыражениеИсточник) = "НЕОПРЕДЕЛЕНО";
	
	Если ТребуетсяКонтрольТипа Тогда
		ВыражениеСКонтролемТипа = "
			|Выбор 
			// Приведение пустых к значению Неопределено - Null, Неопределено, ПустаяСсылка
			|	Когда НЕ ЗначениеЗаполнено(%1) Тогда %3
			// Проверка на соответствие значения ожидаемому типу
			|	Когда НЕ ТипЗначения(%1) В (БюджетированиеПовтИсп.ТипыВидаАналитики(ЕСТЬNULL(%2, НЕОПРЕДЕЛЕНО))) Тогда %3
			// После всех проверок можно использовать значение поля
			|	Иначе %1
			|Конец";
		ВыражениеСКонтролемТипа = СтрШаблон(ВыражениеСКонтролемТипа, 
			ВыражениеИсточник, 
			ВыражениеИсточникВидаАналитики, 
			ВыражениеПустогоЗначенияАналитики());
	Иначе
		ВыражениеСКонтролемТипа = ВыражениеИсточник;
	КонецЕсли;
	
	Возврат ВыражениеСКонтролемТипа;
КонецФункции

// Возвращает шаблон параметров для функции ТекстПоляАналитикиСУсловиемПоКоличествуВидовАналитики.
//
// Возвращаемое значение:
// 	Структура - структура параметров. Описание структуры см. ТекстПоляАналитикиСУсловиемПоКоличествуВидовАналитики.
//
Функция ШаблонПараметровПоляАналитикиСУсловиемПоКоличествуВидовАналитики() Экспорт
	
	Параметры = Новый Структура;
	
	// Для следующих выражений индекс аналитики не указывается!
	Параметры.Вставить("ВыражениеКоличествоИспользуемыхАналитик", ""); // выражение типа ИмяТаблицы.СтатьяПоказательНФПИмяТаблицы.КоличествоИспользуемыхАналитик
	Параметры.Вставить("ВыражениеЗначенияАналитикиБезИндекса",    ""); // выражение - путь к полю, хранящему значение аналитики
	
	Параметры.Вставить("ПараметрыТрансляцииАналитики",            Новый Структура);
	Параметры.ПараметрыТрансляцииАналитики.Вставить("ВозможнаТрансляцияАналитики",       Ложь);
	
	// Для следующих выражений индекс аналитики не указывается!
	Параметры.ПараметрыТрансляцииАналитики.Вставить("ВыражениеТранслироватьАналитикуБезИндекса",   ""); // выражение типа СвязиПоказателей.ТранслироватьАналитику
	Параметры.ПараметрыТрансляцииАналитики.Вставить("ВыражениеАдресТрансляцииАналитикиБезИндекса", ""); // выражение типа СвязиПоказателей.АдресТрансляцииАналитики
	Параметры.ПараметрыТрансляцииАналитики.Вставить("ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса", "");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает выражение для поля аналитики с условием по общему количеству используемых видов аналитики
// и другими условиями, задаваемыми опционально параметрами. В общем случае выражение выглядит следующим образом:
//          ВЫБОР
//                КОГДА ВыражениеКоличествоИспользуемыхАналитик >= [НомерТекущейАналитики]
//                   <И НЕ ВыражениеТранслироватьАналитикуБезИндекса[НомерТекущейАналитики]>
//                         ТОГДА ВыражениеЗначенияАналитикиБезИндекса[НомерТекущейАналитики]
//                КОГДА ВыражениеКоличествоИспользуемыхАналитик >= [НомерТекущейАналитики]
//                   <И ВыражениеТранслироватьАналитикуБезИндекса[НомерТекущейАналитики]
//                    И ВыражениеАдресТрансляцииАналитикиБезИндекса[НомерТекущейАналитики] = [АдресТрансляцииАналитики =
//                    1] ТОГДА ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса[АдресТрансляцииАналитики = 1]>
//                ...
//                ...
//                КОГДА ВыражениеКоличествоИспользуемыхАналитик >= [ТекущийНомерАналитики]
//                   <И ВыражениеТранслироватьАналитикуБезИндекса[НомерТекущейАналитики]
//                    И ВыражениеАдресТрансляцииАналитикиБезИндекса[НомерТекущейАналитики] = [АдресТрансляцииАналитики =
//                    6] ТОГДА ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса[АдресТрансляцииАналитики = 6]>
//                ИНАЧЕ НЕОПРЕДЕЛЕНО
//          КОНЕЦ
//
// Параметры:
// 	Параметры - Структура - Структура параметров
// 	 * ВыражениеКоличествоИспользуемыхАналитик    - Строка - Выражение типа ИмяТаблицы.СтатьяПоказательНФПИмяТаблицы.КоличествоИспользуемыхАналитик.
// 	                                                         Например, "Данные.СтатьяБюджетов.КоличествоИспользуемыхАналитик" или "СвязиПоказателей.КоличествоИспользуемыхАналитик".
// 	 * ВыражениеЗначенияАналитикиБезИндекса       - Строка - Выражение значения аналитики. Например, СвязиПоказателей.Аналитика%НомерТекущейАналитики%.
// 	 * ПараметрыТрансляцииАналитики                        - Структура - Структура параметров трансляции аналитики.
// 	 ** ВозможнаТрансляцияАналитики                        - Булево    - Если Истина, то возможна трансляция аналитики, тогда требуется заполнение параметров.
// 	                                                                     ВыражениеТранслироватьАналитикуБезИндекса и ВыражениеАдресТрансляцииАналитикиБезИндекса.
// 	 ** ВыражениеТранслироватьАналитикуБезИндекса          - Строка    - Выражение пути к полю, описывающему необходимость трансляции. Например, "СвязиПоказателей.ТранслироватьАналитику%НомерТекущейАналитики%".
// 	 ** ВыражениеАдресТрансляцииАналитикиБезИндекса          Строка    - Выражение пути к полу, описывающему из какого поля транслировать аналитику. Например, "АдресТрансляцииАналитики%НомерТекущейАналитики%".
// 	 ** ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса  - Строка    - Выражение пути к полю, хранящему значение аналитики при трансляции. Таких полей значений аналитики может быть 6,
// 	                                                                     в зависимости от адреса трансляции берется нужное поле. Например, "ОборотыБюджетов.Аналитика%АдресТрансляцииАналитики%"
// 	НомерТекущейАналитики  - Число - Номер аналитики, для которой создается выражение.
//
// Возвращаемое значение:
// 	Строка - Выражение для поля запроса / СКД.
//
Функция ТекстПоляАналитикиСУсловиемПоКоличествуВидовАналитики(Параметры, НомерТекущейАналитики) Экспорт
	
	ВыражениеКоличествоИспользуемыхАналитик   = Параметры.ВыражениеКоличествоИспользуемыхАналитик;
	ВыражениеЗначенияАналитикиБезИндекса      = Параметры.ВыражениеЗначенияАналитикиБезИндекса;
	ВозможнаТрансляцияАналитики               = Параметры.ПараметрыТрансляцииАналитики.ВозможнаТрансляцияАналитики;
	ВыражениеТранслироватьАналитикуБезИндекса = Параметры.ПараметрыТрансляцииАналитики.ВыражениеТранслироватьАналитикуБезИндекса;
	ВыражениеАдресТрансляцииАналитикиБезИндекса       = Параметры.ПараметрыТрансляцииАналитики.ВыражениеАдресТрансляцииАналитикиБезИндекса;
	ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса = Параметры.ПараметрыТрансляцииАналитики.ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса;
	
	ЕстьОшибкиВПараметрах = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ВыражениеКоличествоИспользуемыхАналитик) Тогда
		ЕстьОшибкиВПараметрах = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыражениеЗначенияАналитикиБезИндекса) Тогда
		ЕстьОшибкиВПараметрах = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НомерТекущейАналитики) Тогда
		ЕстьОшибкиВПараметрах = Истина;
	КонецЕсли;
	Если ВозможнаТрансляцияАналитики Тогда
		Если НЕ ЗначениеЗаполнено(ВыражениеТранслироватьАналитикуБезИндекса) Тогда
			ЕстьОшибкиВПараметрах = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыражениеАдресТрансляцииАналитикиБезИндекса) Тогда
			ЕстьОшибкиВПараметрах = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса) Тогда
			ЕстьОшибкиВПараметрах = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибкиВПараметрах Тогда
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ТекстОшибки = НСтр("ru = 'Есть ошибки в переданных параметрах'", КодЯзыка);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение выражения значения аналитики бюджетирования'", КодЯзыка),
		                         УровеньЖурналаРегистрации.Ошибка,,,
		                         ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Выражение = "ВЫБОР";
	
	Если НЕ ВозможнаТрансляцияАналитики Тогда
		
		ЧастьВыражения =
		"  КОГДА %ВыражениеКоличествоИспользуемыхАналитик% >= %НомерТекущейАналитики%
		|        ТОГДА %ВыражениеЗначенияАналитикиБезИндекса%%НомерТекущейАналитики%";
		
		Выражение = Выражение + Символы.ПС + ЧастьВыражения;
		
	Иначе
		
		ЧастьВыражения =
		"  КОГДА %ВыражениеКоличествоИспользуемыхАналитик% >= %НомерТекущейАналитики%
		|      И НЕ %ВыражениеТранслироватьАналитикуБезИндекса%%НомерТекущейАналитики%
		|        ТОГДА %ВыражениеЗначенияАналитикиБезИндекса%%НомерТекущейАналитики%";
		
		Выражение = Выражение + Символы.ПС + ЧастьВыражения;
		
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			
			ЧастьВыражения =
			"  КОГДА %ВыражениеКоличествоИспользуемыхАналитик% >= %НомерТекущейАналитики%
			|      И %ВыражениеТранслироватьАналитикуБезИндекса%%НомерТекущейАналитики%
			|      И %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = %АдресТрансляцииАналитики%
			|        ТОГДА %ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса%%АдресТрансляцииАналитики%";
			
			ЧастьВыражения = СтрЗаменить(ЧастьВыражения, "%АдресТрансляцииАналитики%", НомерАналитики);
			
			Выражение = Выражение + Символы.ПС + ЧастьВыражения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЧастьВыражения = 
	"  ИНАЧЕ %ВыражениеПустогоЗначенияАналитики% 
	| КОНЕЦ";
	
	Выражение = Выражение + Символы.ПС + ЧастьВыражения;
	
	Выражение = СтрЗаменить(Выражение, "%ВыражениеКоличествоИспользуемыхАналитик%", ВыражениеКоличествоИспользуемыхАналитик);
	Выражение = СтрЗаменить(Выражение, "%НомерТекущейАналитики%",                   НомерТекущейАналитики);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеЗначенияАналитикиБезИндекса%",    ВыражениеЗначенияАналитикиБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеТранслироватьАналитикуБезИндекса%",   ВыражениеТранслироватьАналитикуБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеАдресТрансляцииАналитикиБезИндекса%", ВыражениеАдресТрансляцииАналитикиБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса%", ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеПустогоЗначенияАналитики%",                 ВыражениеПустогоЗначенияАналитики());
	
	Возврат Выражение;
	
КонецФункции

// Возвращает шаблон параметров для функции ТекстПоляСУсловиемПоВидуАналитики
//
// Возвращаемое значение:
// 	Структура - структура параметров. Описание структуры см. ТекстПоляСУсловиемПоВидуАналитики.
//
Функция ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ВыражениеКоличествоИспользуемыхАналитик", "");
	Параметры.Вставить("ВыражениеВидАналитикиБезИндекса",         "");
	Параметры.Вставить("ВыражениеЗначенияАналитикиБезИндекса",    "");
	Параметры.Вставить("ИмяПараметраВидАналитики",                "");
	
	Параметры.Вставить("ВыражениеПустогоЗначенияАналитики",       ""); // Только для вспомогательных выражений отбора по аналитике.
	
	Возврат Параметры;
КонецФункции

// Возвращает текст поля для определения аналитики по виду
//
// Параметры:
// 	Параметры  - Структура - Структура параметров
// 	 * ВыражениеКоличествоИспользуемыхАналитик    - Строка - Выражение типа ИмяТаблицы.СтатьяПоказательНФПИмяТаблицы.КоличествоИспользуемыхАналитик.
// 	                                                         Например, "Данные.СтатьяБюджетов.КоличествоИспользуемыхАналитик".
// 	 * ВыражениеВидАналитикиБезИндекса            - Строка - Выражение путь к виду аналитики, задаваемый без индекса. Типа "Данные.СтатьяБюджетов.ВидАналитики".
// 	 * ВыражениеЗначенияАналитикиБезИндекса       - Строка - Выражение значения аналитики. Например, СвязиПоказателей.Аналитика%НомерТекущейАналитики%.
// 	 * ИмяПараметраВидАналитики                   - Строка - Имя параметра, передаваемого в запрос или СКД, ссылка на ПВХ.АналитикиСтатейБюджетов.
//
// Возвращаемое значение:
// 	Строка   - конструкция "ВЫБОР" для подстановки в СКД или запрос для поля вида аналитики.
//
Функция ТекстПоляСУсловиемПоВидуАналитики(Параметры) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Выражение =
	"ВЫБОР";
	
	Для НомерТекущейАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		
		ЧастьВыражения =
		"  КОГДА %ВыражениеКоличествоИспользуемыхАналитик% >= %НомерТекущейАналитики%
		|      И %ВыражениеВидАналитикиБезИндекса%%НомерТекущейАналитики% = %ПараметрВидАналитики%
		|        ТОГДА %ВыражениеЗначенияАналитикиБезИндекса%%НомерТекущейАналитики%";
		
		ЧастьВыражения = СтрЗаменить(ЧастьВыражения, "%НомерТекущейАналитики%", НомерТекущейАналитики);
		Выражение = Выражение + Символы.ПС + ЧастьВыражения;
	
	КонецЦикла;
	
	ЧастьВыражения =
	"  ИНАЧЕ %ВыражениеПустогоЗначенияАналитики% 
	| КОНЕЦ";
	
	ВыражениеПустогоЗначенияАналитики = Параметры.ВыражениеПустогоЗначенияАналитики;
	Если НЕ ЗначениеЗаполнено(ВыражениеПустогоЗначенияАналитики) Тогда
		ЧастьВыражения = СтрЗаменить(ЧастьВыражения, "%ВыражениеПустогоЗначенияАналитики%", ВыражениеПустогоЗначенияАналитики());
	Иначе
		// Только для вспомогательных выражений отбора по аналитике.
		ЧастьВыражения = СтрЗаменить(ЧастьВыражения, "%ВыражениеПустогоЗначенияАналитики%", ВыражениеПустогоЗначенияАналитики);
	КонецЕсли;
	
	Выражение = Выражение + Символы.ПС + ЧастьВыражения;
	
	ПараметрВидАналитики = "&" + Параметры.ИмяПараметраВидАналитики;
	
	Выражение = СтрЗаменить(Выражение, "%ВыражениеКоличествоИспользуемыхАналитик%", Параметры.ВыражениеКоличествоИспользуемыхАналитик);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеВидАналитикиБезИндекса%",         Параметры.ВыражениеВидАналитикиБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеЗначенияАналитикиБезИндекса%",    Параметры.ВыражениеЗначенияАналитикиБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ПараметрВидАналитики%", ПараметрВидАналитики);
	
	Возврат Выражение;
	
КонецФункции

// Возвращает шаблон параметров для функции ТекстПоляАналитикиПоАдресамТрансляции
//
// Возвращаемое значение:
// 	Структура - структура параметров. Описание структуры см. ТекстПоляАналитикиПоАдресамТрансляции.
//
Функция ШаблонПараметровДляПолученияТекстаПоляАналитикиПоАдресамТрансляции() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ВыражениеТранслироватьАналитикуБезИндекса",         "");
	Параметры.Вставить("ВыражениеАдресТрансляцииАналитикиБезИндекса",       "");
	Параметры.Вставить("ВыражениеЗначениеАналитикиБезИндексаПриТрансляции", "");
	Параметры.Вставить("ВыражениеЗначениеАналитикиБезИндексаБезТрансляции", "");
	
	Возврат Параметры;
КонецФункции

// Возвращает текст поля для определения аналитики по адресам трансляции.
// В общем случае возвращаемое выражение выглядит следующим образом:
//          ВЫБОР
//             КОГДА %ВыражениеТранслироватьАналитикуБезИндекса%%НомерТекущейАналитики%
//                 ТОГДА ВЫБОР 
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 1
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%1
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 2
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%2
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 3
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%3
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 4
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%4
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 5
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%5
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 6
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%6
//                     КОНЕЦ
//             ИНАЧЕ %ВыражениеЗначениеАналитикиБезИндексаБезТрансляции%%НомерТекущейАналитики%
//          КОНЕЦ
//
// Параметры:
// 	Параметры             - Структура - Структура параметров
// 	 * ВыражениеТранслироватьАналитикуБезИндекса         - Строка - Выражение-путь к полю Булево, признаку необходимости транслировать аналитику. Без индекса.
// 	 * ВыражениеАдресТрансляцииАналитикиБезИндекса       - Строка - Выражение-путь к полю Число адресу трансляции аналитики. Без индекса.
// 	 * ВыражениеЗначениеАналитикиБезИндексаПриТрансляции - Строка - Выражение значения аналитики при трансляции (ТранслироватьАналитику = истина). Без индекса.
// 	 * ВыражениеЗначениеАналитикиБезИндексаБезТрансляции - Строка - Выражение значения аналитики без трансляции (ТранслироватьАналитику = ложь). Без индекса.
// 	НомерТекущейАналитики - Число     - Номер аналитики.
//
// Возвращаемое значение:
// 	Строка   - конструкция "ВЫБОР" для подстановки в СКД или запрос для поля вида аналитики.
//
Функция ТекстПоляАналитикиПоАдресамТрансляции(Параметры, НомерТекущейАналитики) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	ВыражениеТранслироватьАналитикуБезИндекса         = Параметры.ВыражениеТранслироватьАналитикуБезИндекса;
	ВыражениеАдресТрансляцииАналитикиБезИндекса       = Параметры.ВыражениеАдресТрансляцииАналитикиБезИндекса;
	ВыражениеЗначениеАналитикиБезИндексаПриТрансляции = Параметры.ВыражениеЗначениеАналитикиБезИндексаПриТрансляции;
	ВыражениеЗначениеАналитикиБезИндексаБезТрансляции = Параметры.ВыражениеЗначениеАналитикиБезИндексаБезТрансляции;
	
	Выражение =
	"ВЫБОР
	|    КОГДА %ВыражениеТранслироватьАналитикуБезИндекса%%НомерТекущейАналитики%
	|        ТОГДА %ВыражениеТрансляции%
	|    ИНАЧЕ %ВыражениеЗначениеАналитикиБезИндексаБезТрансляции%%НомерТекущейАналитики%
	| КОНЕЦ";
	
	ВыражениеТрансляции = "ВЫБОР";
	
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		
		ЧастьВыражения = " 
		|            КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = %СчетчикАналитик%
		|                ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%%СчетчикАналитик%";
		
		ЧастьВыражения = СтрЗаменить(ЧастьВыражения, "%СчетчикАналитик%", Сч);
		
		ВыражениеТрансляции = ВыражениеТрансляции + ЧастьВыражения;
		
	КонецЦикла;
	
	ВыражениеТрансляции = ВыражениеТрансляции + "
	|         КОНЕЦ";
	
	Выражение = СтрЗаменить(Выражение, "%ВыражениеТрансляции%", ВыражениеТрансляции);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеТранслироватьАналитикуБезИндекса%", ВыражениеТранслироватьАналитикуБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеАдресТрансляцииАналитикиБезИндекса%", ВыражениеАдресТрансляцииАналитикиБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%", ВыражениеЗначениеАналитикиБезИндексаПриТрансляции);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеЗначениеАналитикиБезИндексаБезТрансляции%", ВыражениеЗначениеАналитикиБезИндексаБезТрансляции);
	Выражение = СтрЗаменить(Выражение, "%НомерТекущейАналитики%", НомерТекущейАналитики);
	
	Возврат Выражение;
	
КонецФункции

#КонецОбласти

// Возвращает параметры получения факта по умолчанию
//
// Возвращаемое значение:
//	Параметры - Структура - Параметры получения факта по статьям и показателя бюджетов
//		* ВалютаОтчета                     - СправочникСсылка.Валюты - Валюта данных
//		* ВалютаУпр                        - СправочникСсылка.Валюты - Закешированное значение валюты упр. учета. См. Константы.ВалютаУправленческогоУчета
//		* ВалютаРегл                       - СправочникСсылка.Валюты - Закешированное значение валюты регл. учета. См. Константы.ВалютаРегламентированногоУчета
//		* ВалютаМеждународ                 - СправочникСсылка.Валюты - Закешированное значение функц. валюты МФУ. См. Константы.ВалютаФункциональная
//		* Период                           - СтандартныйПериод - Период выборки
//		* Периодичность                    - ПеречислениеСсылка.Периодичность, Неопределено - Периодичность детализации данных за период. Неопределено - без детализации.
//		* ОстаткиТолькоНаНачалоПериода     - Булево - Получать факт только на начало периода (для остатков),
//			в противном случае данные получаются на конец каждого из подпериодов.
//			Значение по умолчанию - Ложь.
//		* ВозвращатьСуммуВВалюте           - Булево - Вернуть сумму в валюте в соответствии с настройками статьи / показателя.
//			Значение по умолчанию - Истина.
//		* ВозвращатьУпрИРеглСуммы          - Булево - Вернуть суммы из регистров упр. и регл.
//			Значение по умолчанию - Ложь.
//		* ПоПравиламПолученияДанных        - Булево - добавлять в таблицу данных колонку с примененным правилом
//			Значение по умолчанию - Ложь.
//		* Показатели                       - показатели, которые автоматически подбираются в выборку с учетом настроек набора данных источника
//			** Количество - Произвольный - присутствие свойства в структуре означает, что в выборку следует добавить получение количества
//			** Сумма      - Произвольный - присутствие свойства в структуре означает, что в выборку следует добавить получение суммы
//		* ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом - Булево - дополнять факт по статьям, влияющим на показатели хранимым фактом.
//		                                                                              По умолчанию Истина. Ложь - если весь хранимый факт получается отдельно (с помощью кэшируемых скд).
//		                                                                              Дополнение хранимым фактом непосредственно осуществляется в стандартных отчетах бюджетирования.
//		* ВидыАналитик                     - Массив - Аналитика (Номенклатура, Контрагенты...), в разрезе которой необходимо получить факт.
//			** ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - значения массива
//		* ПоОрганизациям                   - Булево - Развернуть по организациям.
//			Значение по умолчанию - Ложь.
//		* ПоПодразделениям                 - Булево - Развернуть по подразделениям.
//			Значение по умолчанию - Ложь.
//		* ПоРегистратору                   - Булево - Развернуть факт по регистратору (для оборотов).
//			Значение по умолчанию - Ложь.
//		* ДополнительныйОтбор              - Структура - Дополнительный (к основному отбору правила) отбор, который накладывается на данные источника.
//			** Ключ     - Произвольный - имя поля, по которому требуется применить доп. отбор
//			** Значение - Произвольный - значение доп. отбора.
//
Функция ШаблонПараметровПолученияФакта() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("Период");
	Параметры.Вставить("Периодичность");
	Параметры.Вставить("ОстаткиТолькоНаНачалоПериода", Ложь);
	Параметры.Вставить("ВозвращатьСуммуВВалюте", Истина);
	Параметры.Вставить("ВозвращатьУпрИРеглСуммы", Ложь);
	Параметры.Вставить("ПоПравиламПолученияДанных", Ложь);
	Параметры.Вставить("ВозвращатьСтатьюПоказательБюджета", Ложь);
	
	// Показатели данных
	Параметры.Вставить("Показатели", Новый Структура("Количество, Сумма"));
	Параметры.Вставить("ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом", Истина);
	
	// Разрезы данных
	Параметры.Вставить("ВидыАналитик", Новый Массив);
	Параметры.Вставить("ПоОрганизациям", Ложь);
	Параметры.Вставить("ПоПодразделениям", Ложь);
	Параметры.Вставить("ПоРегистратору", Ложь);
	
	Параметры.Вставить("ДополнительныйОтбор");
	
	// Валюты
	Параметры.Вставить("ВалютаОтчета");
	Параметры.Вставить("ВалютаУпр",        Константы.ВалютаУправленческогоУчета.Получить());
	Параметры.Вставить("ВалютаРегл",       Константы.ВалютаРегламентированногоУчета.Получить());
	
	Параметры.Вставить("РежимПолученияДанных");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает пустую таблицу с типизированными колонками, в соответствии с заданными параметрами для статей.
//
// Параметры:
// 	Параметры - Структура - см. ШаблонПараметровПолученияФакта().
//
// Возвращаемое значение:
// 	ТаблицаЗначений - пустая таблица с типизированными колонками
// 		* СтатьяБюджетов                              - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов
// 		* Сценарий                                    - СправочникСсылка.Сценарии - сценарий фактических данных. Предопределенные элементы "ИсполнениеБюджета" или "ФактическиеДанные"
// 		* РазделИсточникаДанных                       - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - оперативные, регламентированный, международный учет или произвольные данные
// 		* ИсточникДанных                              - СправочникСсылка.НастройкиХозяйственныхОпераций - источник оперативных данных
//						                              - ПланСчетовСсылка.Хозрасчетный - источник данных регламентированного учета
//						                              - Строка - источник произвольных данных
// 		* КорСчет                                     - ПланСчетовСсылка.Хозрасчетный - кор. источник данных регламентированного учета
// 		* ИсточникСуммыОперации                       - ПеречислениеСсылка.ПоказателиАналитическихРегистров - указатель на имя определенного ресурса регистра источника данных
// 		* ТипИтога                                    - ПеречислениеСсылка.ТипыИтогов - итог в виде сальдо или оборота (свернутого и развернутого по Дт и Кт)
// 		* Отбор                                       - Строка - Описание
// 		* Правило                                     - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - правило, согласно которому извлекается факт
// 		* Период                                      - Дата - дата факта, приведенная к началу стандартного периода. См. ПеречислениеСсылка.Периодичность
// 		* Регистратор                                 - ДокументСсылка - документ, движение которого в указанной строке. Только для оборотов. 
//														При условии, что включена детализация по регистратору. 
//														См. ШаблонПараметровПолученияФакта() свойство ПоРегистратору
// 		* Организация                                 - СправочникСсылка.Организации - Организация, к которой относится факт
//														При условии, что включена детализация по организациям. 
//														См. ШаблонПараметровПолученияФакта() свойство ПоОрганизациям
// 		* Подразделение                               - СправочникСсылка.СтруктураПредприятия - Подразделение, к которому относится факт
//														При условии, что включена детализация по подразделениям. 
//														См. ШаблонПараметровПолученияФакта() свойство ПоПодразделениям
// 		* Аналитика<1..6>                             - Тип из плана видов характеристик "АналитикаСтатейБюджетов" - значение аналитики
// 		* Ключ_<УникальныйИдентификаторВидаАналитики> - ОписаниеТипов - тип аналитики
// 		* ЕдиницаИзмерения                            - СправочникСсылка.УпаковкиЕдиницыИзмерения - ед. измерения количественного показателя "Количество"
// 		* Количество                                  - Число - значение количественного показателя
// 		* ВалютаХранения                              - СправочникСсылка.Валюты - валюта суммового показателя "Сумма" (валюта факта)
// 		* ПериодКурса                                 - Дата - ближайшая дата примененного для конвертации курса валют
// 		* Сумма                                       - Число - значение суммового показателя в валюте факта
// 		* Валюта                                      - СправочникСсылка.Валюты - валюта суммового показателя "СуммаВВалюте"
// 		* СуммаВВалюте                                - Число - суммовой показатель "Сумма", приведенный к заданной валюте
// 		* СуммаУпр                                    - Число - суммовой показатель в валюте управленческого учета
// 		* СуммаРегл                                   - Число - суммовой показатель в валюте регламентированного учета.
//
Функция ШаблонТаблицыФактаПоСтатьямБюджетов(Параметры) Экспорт
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов(МассивТипов));
	ТаблицаФакта.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	Если Параметры.ПоПравиламПолученияДанных Тогда
		
		ТаблицаФакта.Колонки.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования"));
		
		ОписаниеТиповИсточникДанных = Новый ОписаниеТипов(
				"СправочникСсылка.НастройкиХозяйственныхОпераций,
				|ПланСчетовСсылка.Хозрасчетный,
				|Строка");
		ТаблицаФакта.Колонки.Добавить("ИсточникДанных", ОписаниеТиповИсточникДанных);
		
		ТипыКорСчетов = "ПланСчетовСсылка.Хозрасчетный";
		
		ОписаниеТиповКорСчет = Новый ОписаниеТипов(ТипыКорСчетов);
		
		ТаблицаФакта.Колонки.Добавить("КорСчет", ОписаниеТиповКорСчет);
		
		ТаблицаФакта.Колонки.Добавить("ИсточникСуммыОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ПоказателиАналитическихРегистров"));
		ТаблицаФакта.Колонки.Добавить("ТипИтога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИтогов"));
		ТаблицаФакта.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Строка"));
		
		ТаблицаФакта.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"));
		
	КонецЕсли;
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Если Параметры.Периодичность <> Неопределено Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПериодичностьСекунда")
	   И Параметры.ЕстьПериодичностьСекунда Тогда
		ТаблицаФакта.Колонки.Добавить("ПериодСекунда",
			Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КонецЕсли;
	
	Если Параметры.ПоРегистратору Тогда
		ТаблицаФакта.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	КонецЕсли;
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ОписаниеТиповАналитики = ВсеТипыАналитик();
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаФакта.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ТипЧисло = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
		ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
		ТаблицаФакта.Колонки.Добавить("Сумма", ТипЧисло);
		Если Параметры.ВозвращатьСуммуВВалюте Тогда
			ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			ТаблицаФакта.Колонки.Добавить("СуммаВВалюте", ТипЧисло);
		КонецЕсли;
		Если Параметры.ВозвращатьУпрИРеглСуммы Тогда
			ТаблицаФакта.Колонки.Добавить("СуммаУпр", ТипЧисло);
			ТаблицаФакта.Колонки.Добавить("СуммаРегл", ТипЧисло);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаФакта;
	
КонецФункции

// Возвращает параметры по умолчанию для пересчета валют
// 
// Возвращаемое значение:
//	ПараметрыПересчета             - Структура - параметры, определяющие способ пересчета из одной в валюты в другую
//	* ИмяНабораДанныхИсточника     - Строка - имя набора данных, который будет пересчитываться и содержит поля сумм
//	* ИсточникКурсовВалют          - Строка - имя регистра сведений с курсами валют. Может принимать одно из двух значений КурсыВалют или ПрогнозныеКурсыСценариев.
//	                                 КурсыВалют (по умолчанию) - фактические курсы валют
//	                                 ПрогнозныеКурсыСценариев - прогнозные курсы валют бюджетирования. В этом случае требуется указать по какому сценарию выбирать курсы.
//	* ИсходнаяВалюта               - СправочникСсылка.Валюты - валюта, из которой требуется пересчитать суммы в таблице.
//	                               - Строка - имя колонки с типом СправочникСсылка.Валюты, в которой содержатся значения исходной валюты для каждой строки.
//	                               - Неопределено (по умолчанию) - будет осуществлен поиск колонки с именем "ИсходнаяВалюта". Если колонка отсутствует, пересчет не будет производится.
//	* КолонкиПересчета             - Массив - Массив имен колонок, содержащих исходные суммы.
//	                               - Строка - имя колонки для пересчета
//	                               - Неопределено (по умолчанию) - будет осуществлен поиск колонок с именами "Сумма", "СуммаПриход", "СуммаРасход", "СуммаВВалюте", "СуммаВалПриход", "СуммаВалРасход", "ЗначениеПоказателя"
//	* НомерНабораДанныхКонвертации - Число - номер набора данных конвертации предназначен для многократной конвертации в одной схеме. По умолчанию - 1.
//	* ПериодКурса                  - Дата - дата, на которую требуется произвести пересчет.
//	                               - Строка - имя колонки с типом Дата, в которой содержатся значения дат курсов для каждой строки.
//	                               - Неопределено (по умолчанию) -  будет осуществлен поиск колонки с именем "ПериодКурса". Если колонка отсутствует, то дата курса будет приравнена к сегодняшнему дню.
//	* СценарийПрогнозногоКурса     - СправочникСсылка.Сценарии - сценарий, для которого заданные прогнозные курсы
//	                               - Строка - имя поля с типом СправочникСсылка.Сценарии, в котором содержатся значения сценария курсов для каждой строки.
//	                               - Неопределено (по умолчанию) - будет осуществлен поиск колонки с именем "Сценарий". Если колонка отсутствует, пересчет не будет производится.
//	* ЦелеваяВалюта                - СправочникСсылка.Валюты - валюта, в которую требуется пересчитать суммы в таблице.
//	                               - Строка - имя поля с типом СправочникСсылка.Валюты, в котором содержатся значения целевой валюты для каждой строки.
//	                               - Неопределено (по умолчанию) - будет осуществлен поиск колонки с именем "ЦелеваяВалюта". Если колонка отсутствует, пересчет не будет производится.
//
Функция ШаблонПараметровПересчетаВВалюту() Экспорт
	
	ШаблонПараметровПересчетаВВалюту = Новый Структура;
	
	ШаблонПараметровПересчетаВВалюту.Вставить("ИмяНабораДанныхИсточника", "");
	ШаблонПараметровПересчетаВВалюту.Вставить("ИсточникКурсовВалют", "КурсыВалют");
	ШаблонПараметровПересчетаВВалюту.Вставить("ИсходнаяВалюта", Неопределено);
	ШаблонПараметровПересчетаВВалюту.Вставить("КолонкиПересчета", Неопределено);
	ШаблонПараметровПересчетаВВалюту.Вставить("НомерНабораДанныхКонвертации", 1);
	ШаблонПараметровПересчетаВВалюту.Вставить("ПериодКурса", Неопределено);
	ШаблонПараметровПересчетаВВалюту.Вставить("СценарийПрогнозногоКурса", Неопределено);
	ШаблонПараметровПересчетаВВалюту.Вставить("ЦелеваяВалюта", Неопределено);
	
	Возврат ШаблонПараметровПересчетаВВалюту;
	
КонецФункции

// Возвращает пустую типизированную структуру настроек для последующего заполнения
// Используется для интерактивного и неинтерактивного заполнения полей-источников из схемы-источника 
// для каждого вида аналитики правила получения фактических данных.
//
// Возвращаемое значение:
//	Структура - параметры заполнения аналитик
//		* АдресСхемыКомпоновкиДанных   - Строка - адрес схемы-источника данных во временном хранилище
//		* КомпоновщикНастроек          - КомпоновщикНастроекКомпоновкиДанных - настройки на основе схемы-источника данных
//		* УникальныйИдентификатор      - УникальныйИдентификатор - идентификатор формы или элемента справочника, для которого формируются настройки
//		* НастройкиЗаполненияАналитики - ТаблицаЗначений - настройки каждой из 6 аналитик
//			** ВидАналитики                              - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов
//			** НомерАналитики                            - Число
//			** ВыражениеЗаполненияАналитики              - Строка
//			** ЗаполнятьУказаннымЗначением               - Булево
//			** ЗначениеАналитики                         - Произвольный
//			** ПредставлениеВыраженияЗаполненияАналитики - Строка
//			** НетВДоступныхПолях                        - Булево
//			** ДополнительноеСвойство                    - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
//
Функция ШаблонПараметровЗаполненияАналитик() Экспорт
	ПараметрыЗаполненияАналитик = Новый Структура; 
	
	НастройкиЗаполненияАналитики = Новый ТаблицаЗначений;
	НастройкиЗаполненияАналитики.Колонки.Добавить("ВидАналитики",                              Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	НастройкиЗаполненияАналитики.Колонки.Добавить("НомерАналитики",                            ОбщегоНазначения.ОписаниеТипаЧисло(1));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ВыражениеЗаполненияАналитики",              ОбщегоНазначения.ОписаниеТипаСтрока(0));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ЗаполнятьУказаннымЗначением",               ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("Булево")));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ЗначениеАналитики",                         ВсеТипыАналитик());
	НастройкиЗаполненияАналитики.Колонки.Добавить("ПредставлениеВыраженияЗаполненияАналитики", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	НастройкиЗаполненияАналитики.Колонки.Добавить("НетВДоступныхПолях",                        ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("Булево")));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ДополнительноеСвойство",                    Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
	ПараметрыЗаполненияАналитик.Вставить("НастройкиЗаполненияАналитики", НастройкиЗаполненияАналитики);
	ПараметрыЗаполненияАналитик.Вставить("АдресСхемыКомпоновкиДанных", "");
	ПараметрыЗаполненияАналитик.Вставить("КомпоновщикНастроек", Новый КомпоновщикНастроекКомпоновкиДанных);
	ПараметрыЗаполненияАналитик.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Возврат ПараметрыЗаполненияАналитик;
КонецФункции

// Возвращает параметры получения значений нефинансовых показателей по умолчанию
//
// Возвращаемое значение:
// 	 Параметры - Структура - Параметры получения значений нефинансовых показателей.
//
Функция ШаблонПараметровПолученияЗначенийНефинансовыхПоказателей() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Период");
	Параметры.Вставить("Периодичность");
	
	Параметры.Вставить("ВидыАналитик", Новый Массив);
	Параметры.Вставить("ПоОрганизациям", Ложь);
	Параметры.Вставить("ПоПодразделениям", Ложь);
	
	Параметры.Вставить("ДополнительныйОтбор");
	
	Параметры.Вставить("ВозвращатьСуммуВВалюте", Истина);
	
	// Валюты
	Параметры.Вставить("ВалютаУпр",        Константы.ВалютаУправленческогоУчета.Получить());
	Параметры.Вставить("ВалютаРегл",       Константы.ВалютаРегламентированногоУчета.Получить());
	
	Параметры.Вставить("РежимПолученияДанных", Перечисления.РежимПолученияДанныхБюджетирования.Разрешенные);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает настройки, созданные по переданной схеме
//
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема, настройки по которой требуется инициализировать.
//
// Возвращаемое значение:
// НастройкиКомпоновкиДанных - настройки по умолчанию.
//
Функция ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных) Экспорт
	
	КомпоновщикНастроек = ИнициализированныйКомпоновщикПоУмолчанию(СхемаКомпоновкиДанных);
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

// Возвращает компоновщик настроек, созданный по переданной схеме
//
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема, настройки по которой требуется инициализировать.
//
// Возвращаемое значение:
// КомпоновщикНастроекКомпоновкиДанных - настройки по умолчанию.
//
Функция ИнициализированныйКомпоновщикПоУмолчанию(СхемаКомпоновкиДанных) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

// Возвращает пустое значение соответствующего измерению типа 
// 
// Параметры:
//	ИмяИзмерения - Строка - название измерения регистра РегистрНакопления.ОборотыБюджетов.
//
// Возвращаемое значение:
//	Произвольный - пустое значение соответствующего типа.
// 
Функция ЗначениеПоУмолчаниюДляИзмерения(ИмяИзмерения) Экспорт
	ЗначениеПоУмолчанию = Неопределено;
	
	Если ИмяИзмерения = "Организация" Тогда
		ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ИмяИзмерения = "Подразделение" Тогда
		ЗначениеПоУмолчанию = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
КонецФункции

// Возвращает таблицу с фактическими данными
// Состав колонок определяется параметрами получения факта.
//
// Параметры:
//	ПараметрыПолученияФакта - Структура - параметры получения факта по статьям и показателя бюджетов. См. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта().
//
// Возвращаемое значение:
//	ТаблицаЗначений - фактические данные.
//
Функция ФактСтатейПоПравилам(ПараметрыПолученияФакта) Экспорт
	
	#Область ИнициализацияПеременных
	
	// Параметры получения фактических данных
	ПоПравиламПолученияДанных         = ПараметрыПолученияФакта.ПоПравиламПолученияДанных;
	ПоОрганизациям                    = ПараметрыПолученияФакта.ПоОрганизациям;
	ПоПодразделениям                  = ПараметрыПолученияФакта.ПоПодразделениям;
	ПоРегистратору                    = ПараметрыПолученияФакта.ПоРегистратору;
	ПоПериодам                        = ПараметрыПолученияФакта.Периодичность <> Неопределено;
	Периодичность                     = ПараметрыПолученияФакта.Периодичность;
	ВозвращатьСуммуВВалюте            = ПараметрыПолученияФакта.ВозвращатьСуммуВВалюте;
	ВидыАналитик                      = ПараметрыПолученияФакта.ВидыАналитик;
	МаксимальныйНомерАналитики        = ПараметрыПолученияФакта.МаксимальныйНомерАналитики;
	ИспользуемыеНумерованныеАналитики = ПараметрыПолученияФакта.ИспользуемыеНумерованныеАналитики;
	
	ТаблицаПравилСтатей  = ПараметрыПолученияФакта.ТаблицаПравилСтатей;
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей);
	
	// Дополнительные данные
	ДополнительныеДанные     = ПараметрыПолученияФакта.ДополнительныеДанные;
	ВидДопДанных             = ДополнительныеДанные.Вид;
	ТаблицаДопДанных         = ДополнительныеДанные.ТаблицаДанных;
	ИмяПоляИдентификатора    = ДополнительныеДанные.ИмяПоляИдентификатора;
	
	ДопДанныеВычисляемыеПоля = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.ВычисляемыеПоля;
	ДопДанныеДопНабор        = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
	
	ИспользуемыеКолонкиДопДанных = Новый Массив;
		
	// Таблица периодов
	ТаблицаПериодов        = ПараметрыПолученияФакта.ТаблицаПериодов;
	КолонкиТаблицыПериодов = ТаблицаПериодов.Колонки;
	
	// Идентификация источников данных
	ПолученныеМакеты = Новый Соответствие;
	НаборыДанныхДляИдентификации = Новый Соответствие;
	
	ИмяПоляИдентификатора = "ИдентификаторИсточникаДанных";
	
	// Свертка данных
	КолонкиИдентификаторы = Новый Массив;
	КолонкиАгрегаты = Новый Массив;
	
	#КонецОбласти 
	
	#Область НастройкаНаборовДанных
	
	// Создать пустую схему
	СКДПолученияФакта = КомпоновкаДанныхСервер.ПустаяСхема();
	
	// Добавить НД таблицы периодов
	НДТаблицаПериодов = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДПолученияФакта, 
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаПериодов");
		
	Для Каждого Колонка Из ТаблицаПериодов.Колонки Цикл
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДТаблицаПериодов, Колонка.Имя, Колонка.Имя, , Колонка.ТипЗначения);
	КонецЦикла;
	
	// Добавить НД объединения
	НДОбъединенныйФакт = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДПолученияФакта, 
		Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"), "ОбъединенныйФакт");
	
	// Для каждого уникального макета схемы добавить НД регистра и перенести настройки типов.
	Для Каждого ПрименяемоеПравилоФакта Из ТаблицаПравилСтатей Цикл
		ИмяМакета = ПрименяемоеПравилоФакта.ИмяМакетаИсточникаДанных;
		
		Если ПолученныеМакеты.Получить(ИмяМакета) = Неопределено Тогда
			Макет = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ПрименяемоеПравилоФакта.Правило,,, Истина);
			
			ПолученныеМакеты.Вставить(ИмяМакета, Макет);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПолученныйМакет Из ПолученныеМакеты Цикл 
		ИмяНабораДанных = ПолученныйМакет.Ключ;
		ИсходныйМакет = ПолученныйМакет.Значение;
		
		// Перенесем все наборы данных источников в объединенный набор
		СкопированныеНаборыДанных = КомпоновкаДанныхСервер.СкопироватьНаборыДанных(НДОбъединенныйФакт, ИсходныйМакет, ИмяНабораДанных);
		
		ИскомаяКоллекцияНаборов = НаборыДанныхДляИдентификации[ИмяНабораДанных];
		Если ИскомаяКоллекцияНаборов = Неопределено Тогда
			
			НаборыДанныхДляИдентификации.Вставить(ИмяНабораДанных, СкопированныеНаборыДанных);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИскомаяКоллекцияНаборов, СкопированныеНаборыДанных);
			
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим макеты ДО переноса - добавим в них поле "ИдентификаторИсточника"
	// Добавим в каждый набор поле "ИдентификаторНабора"
	// Для поставляемых схем - это имя макета и источник данных настройки хозяйственной операции
	// Для произвольных данных - это строка вида "Ключ_ХешСхемы". 
	// Хеш используется для минимизации количества произвольных наборов данных. 
	// Если СКД в разных правилах идентичны, тогда в исполняемой схеме будет всего один набор данных.
	Для Каждого НаборДанныхДляИдентификации Из НаборыДанныхДляИдентификации Цикл 
		ИдентификаторНабора    = НаборДанныхДляИдентификации.Ключ;
		НаборыПоИдентификатору = НаборДанныхДляИдентификации.Значение;
		
		Для Каждого НаборПоИдентификатору Из НаборыПоИдентификатору Цикл 
			ЗапросНабора = НаборПоИдентификатору.Запрос;
				
			Если ТипЗнч(НаборПоИдентификатору) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				// Добавим поле в расширенные поля запроса компоновки и поля выборки запроса
				ЗапросНабора = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(ЗапросНабора, """" + ИдентификаторНабора + """", ИмяПоляИдентификатора, , Истина, Истина);
				
				ЗапросНабора = СтрЗаменить(ЗапросНабора, """ИдентификаторИсточникаДанных""", """" + ИдентификаторНабора + """");
				
				НаборПоИдентификатору.Запрос = ЗапросНабора;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
	#КонецОбласти 
	
	#Область НастройкаОсновныхПолейНаборовДанных
	
	// В текст запроса добавить поля-параметры для соединения с таблицей периодов
	НаборыФакта = НДОбъединенныйФакт.Элементы;
	
	Для Каждого КолонкаТаблицыПериодов Из КолонкиТаблицыПериодов Цикл 
		ИмяКолонки = КолонкаТаблицыПериодов.Имя;
		ТипКолонки = КолонкаТаблицыПериодов.ТипЗначения;
		
		Для Каждого НаборФакта Из НаборыФакта Цикл 
			Если ТипЗнч(НаборФакта) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				ВыражениеПоляВыборки = "&" + ИмяКолонки;
				
				НаборФакта.Запрос = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(НаборФакта.Запрос, ВыражениеПоляВыборки, ИмяКолонки, , Истина, Истина);
			КонецЕсли;
			
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборФакта, ИмяКолонки, ИмяКолонки, , ТипКолонки);
		КонецЦикла;
		
		// Добавим поля дочерних наборов в корневой, объединяющий факт
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДОбъединенныйФакт, ИмяКолонки, ИмяКолонки, , ТипКолонки);
		
		// Добавим связь НД периодов и НД объединения по параметрам периода
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СКДПолученияФакта,
			НДТаблицаПериодов,
			НДОбъединенныйФакт,
			ИмяКолонки,
			ИмяКолонки,
			ИмяКолонки);
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ПодключениеИсточникаДополнительныхДанных
	
	// Добавим дополнительные данные в расчетные поля
	КолонкиДопДанных = ТаблицаДопДанных.Колонки;
	Если ДопДанныеВычисляемыеПоля Тогда
		
		// Соберем коллекцию вычисляемых колонок
		Для Каждого КолонкаДопДанных Из КолонкиДопДанных Цикл
			ИмяПоля = КолонкаДопДанных.Имя;
			Если ИмяПоля = "УникальныйИдентификатор"
				Или ПоПравиламПолученияДанных 
					И (ИмяПоля = "ПравилоФакта" Или ИмяПоля = "НачалоПериода" Или ИмяПоля = "КонецПериода") Тогда
				
				Продолжить;
			КонецЕсли;
			ИспользуемыеКолонкиДопДанных.Добавить(КолонкаДопДанных);
		КонецЦикла;
		
		Для Каждого СтрокаДопДанных Из ТаблицаДопДанных Цикл
			УникальныйИдентификатор = СтрокаДопДанных.УникальныйИдентификатор;
			
			Для Каждого КолонкаДопДанных Из ИспользуемыеКолонкиДопДанных Цикл
				ИмяПоля = КолонкаДопДанных.Имя;
				ТипПоля = КолонкаДопДанных.ТипЗначения;
				ЗначениеПоля = СтрокаДопДанных[ИмяПоля];
				
				ИмяПоляВСхеме = ИмяПоля + "_" + УникальныйИдентификатор;
				
				// Добавим параметр со значением
				КомпоновкаДанныхСервер.ДобавитьПараметр(СКДПолученияФакта, ИмяПоляВСхеме, ТипПоля, ЗначениеПоля);
			
				// Рассчитаем значение правила для группировок
				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта, ИмяПоляВСхеме, "&" + ИмяПоляВСхеме);
				
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ДопДанныеДопНабор Тогда 
		НДДопДанныеДопНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДПолученияФакта, 
			Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДопДанных");
			
		Для Каждого КолонкаДопДанных Из КолонкиДопДанных Цикл
			ИмяПоля = КолонкаДопДанных.Имя;
			ТипПоля = КолонкаДопДанных.ТипЗначения;
			
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДДопДанныеДопНабор, ИмяПоля, ИмяПоля, , ТипПоля);
			
			// Основной режим присоединения слева доп. данных - по всем доступным колонкам
			Если НДОбъединенныйФакт.Поля.Найти(ИмяПоля) = Неопределено Тогда
				// "Истинные" колонки доп. данных. Те по которым возможно соединение, уже есть в наборах данных.
				ИспользуемыеКолонкиДопДанных.Добавить(КолонкаДопДанных);
				
				Продолжить;
			КонецЕсли;
			
			// Добавим связь НД периодов и НД объединения по параметрам периода
			КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СКДПолученияФакта, 
				НДОбъединенныйФакт, 
				НДДопДанныеДопНабор,
				ИмяПоля, 
				ИмяПоля);
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область НастройкаГруппировокИОтборов
	
	// Создадим и инициализируем компоновщик
	Настройки = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДПолученияФакта);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	
	// Добавим общие для всех группировок поля в корень структуры
	КорневойЭлементСтруктуры = Настройки.Структура;
	
	// Установим общие параметры
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ПривилегированныйРежим", Ложь);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ПривилегированныйРежимИсточника", Ложь);
	
	// Добавим общие отборы
	Если ПараметрыПолученияФакта.ДополнительныйОтбор <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ПараметрыПолученияФакта.ДополнительныйОтбор.Отбор, Настройки.Отбор, Истина);
	КонецЕсли;
	
	// Добавим отборы предварительной фильтрации данных для каждого правила
	ГруппаДопОтборовВсехПравил = ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаДопОтборовВсехПравил.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаДопОтборовВсехПравил.Использование = Истина;
	ГруппаДопОтборовВсехПравил.Представление = "ДопОтборВсехПравил";
	
	ПоляИтога = СКДПолученияФакта.ПоляИтога;
		
	Для Каждого ПериодИПравило Из ТаблицаПериодов Цикл 
		ПоискПравила = Новый Структура("Правило", ПериодИПравило.ПравилоФакта); 
		НайденныеСтроки = ТаблицаПравилСтатей.НайтиСтроки(ПоискПравила);
		ПрименяемоеПравило = НайденныеСтроки[0];
		
		Если ПоПравиламПолученияДанных Тогда
			ПоискПравилаИПериода = Новый Структура("ПравилоФакта, НачалоПериода, КонецПериода");
			ЗаполнитьЗначенияСвойств(ПоискПравилаИПериода, ПериодИПравило);

			НайденныеСтроки = ТаблицаДопДанных.НайтиСтроки(ПоискПравилаИПериода);
			ДопДанныеПравила = НайденныеСтроки[0];
		КонецЕсли;
		
		УникальныйИдентификатор = ПрименяемоеПравило.УникальныйИдентификатор;
		ИдентификаторМакета     = ПрименяемоеПравило.ИмяМакетаИсточникаДанных;
		НастройкиПравила        = ПрименяемоеПравило.КомпоновщикНастроек.Получить();
		ИмяРесурса              = ПрименяемоеПравило.ИсточникСуммыОперации;
		Коэффициент             = ПрименяемоеПравило.Коэффициент;
		
		РазделИсточникаДанных   = ПрименяемоеПравило.РазделИсточникаДанных;
		ИсточникДанных          = ПрименяемоеПравило.ИсточникДанных;
		ХозяйственнаяОперация   = ПрименяемоеПравило.ХозяйственнаяОперация;
		
		ГруппаДопОтбораПравила = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаДопОтборовВсехПравил,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаДопОтбораПравила.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаДопОтбораПравила.Использование = Истина;
		ГруппаДопОтбораПравила.Представление = "ДопОтборПравила_" + УникальныйИдентификатор;
		
		НовыйОтбор = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаДопОтбораПравила, "ИдентификаторИсточникаДанных", ИдентификаторМакета, , ВидСравненияКомпоновкиДанных.Равно);
		
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиПравила.Отбор, ГруппаДопОтбораПравила, Истина);
		
		// Для каждого правила (если требуется) добавить группировку, для формирования части таблицы факта
		// В группировке добавить отборы, нужные для получения порции данных правила
		// Добавить дополнительные отборы.
		ГруппировкаПравила = ФинансоваяОтчетностьСервер.НоваяГруппировка(КорневойЭлементСтруктуры);
		
		Если ПоПравиламПолученияДанных Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "НачалоПериода");
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "КонецПериода");
		КонецЕсли;
		
		Если ДопДанныеВычисляемыеПоля Тогда
			Для Каждого КолонкаДопДанных Из КолонкиДопДанных Цикл 
				ИмяКолонки = КолонкаДопДанных.Имя;
				
				Если ИмяКолонки = "УникальныйИдентификатор"
					Или ПоПравиламПолученияДанных 
						И (ИмяКолонки = "ПравилоФакта" Или ИмяКолонки = "НачалоПериода" Или ИмяКолонки = "КонецПериода") Тогда
					Продолжить;
				КонецЕсли;
				
				КолонкиИдентификаторы.Добавить(ИмяКолонки);
		
				Если ПоПравиламПолученияДанных Тогда
					ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяКолонки + "_" + ДопДанныеПравила.УникальныйИдентификатор);
				Иначе
					ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяКолонки + "_" + УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДопДанныеДопНабор Тогда
			Для Каждого КолонкаДопДанных Из ИспользуемыеКолонкиДопДанных Цикл 
				ИмяКолонки = КолонкаДопДанных.Имя;
				
				Если ИмяКолонки = "УникальныйИдентификатор" Тогда
					Продолжить;
				КонецЕсли;
				
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяКолонки);
			КонецЦикла;
		КонецЕсли;
		
		Если ПоОрганизациям Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Организация");
		КонецЕсли;
		
		Если ПоПодразделениям Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Подразделение");
		КонецЕсли;
		
		Если ПоРегистратору Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Регистратор");
		КонецЕсли;
		
		Если ПоПериодам Тогда
			ИмяПериода = ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
			
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Период" + ИмяПериода);
		КонецЕсли;
		
		Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
			Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидАналитики = ПрименяемоеПравило["ВидАналитики" + НомерАналитики];
			
			Если ЗначениеЗаполнено(ВидАналитики) 
				И Не ПараметрыПолученияФакта.ВидыАналитик.Найти(ВидАналитики) = Неопределено Тогда
				ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				
				Если ПоПравиламПолученияДанных Тогда
					СуффиксПолей = ДопДанныеПравила.УникальныйИдентификатор;
				Иначе
					СуффиксПолей = УникальныйИдентификатор;
				КонецЕсли;
				
				ИмяПоляНумерованнойАналитики = "Аналитика" + НомерАналитики + "_" + СуффиксПолей;
				
				// Ожидается, что правила получения факта все выражения заполнены
				// Но бывают ситуации, когда аналитика используется, но выражение не заполнено. 
				// Например, после программного создания правил.
				ВыражениеЗаполненияАналитики = ПрименяемоеПравило["ВыражениеЗаполненияАналитики" + НомерАналитики];
				Если Не ЗначениеЗаполнено(ВыражениеЗаполненияАналитики) Тогда
					ВыражениеЗаполненияАналитики = "НЕОПРЕДЕЛЕНО";
				КонецЕсли;
				
				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта, ИмяПоляАналитики, ВыражениеЗаполненияАналитики, , Истина);
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяПоляАналитики);
				
				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта, ИмяПоляНумерованнойАналитики, ВыражениеЗаполненияАналитики, , Истина);
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяПоляНумерованнойАналитики);
			КонецЕсли;
		КонецЦикла;
		
		ИсточникиСуммыПравила = ИсточникиДанныхСервер.ИсточникиСуммыПравила(СКДПолученияФакта, ПрименяемоеПравило);
		
		// Сумма в валюте операции
		ИмяПоляВВалютеОперации = "";
		Если ВозвращатьСуммуВВалюте И ИсточникиСуммыПравила.Свойство("Валюта", ИмяПоляВВалютеОперации) Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Валюта");
			
			Если ПоляИтога.Найти(ИмяПоляВВалютеОперации) = Неопределено Тогда
				ПрефиксКоэффициента = ?(Коэффициент = 1, "", "(" + Формат(Коэффициент, "ЧРД=.; ЧН=0; ЧГ=0") + ") * ");
				
				ФинансоваяОтчетностьСервер.НовыйРесурс(СКДПолученияФакта, ИмяПоляВВалютеОперации, ПрефиксКоэффициента + "Сумма");
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(ГруппировкаПравила, ИмяПоляВВалютеОперации);
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, ИмяПоляВВалютеОперации, , , ВидСравненияКомпоновкиДанных.Заполнено);
			
			КолонкиАгрегаты.Добавить(ИмяПоляВВалютеОперации);
		КонецЕсли;
		
		// Отборы отдельного правила на уровне группировки, включающей его
		// По сути - это дополнительная фильтрация данных, которые относятся к отдельному правилу.
		ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "ИдентификаторИсточникаДанных", ИдентификаторМакета, , ВидСравненияКомпоновкиДанных.Равно);
		
		Если РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
			НовыйОтбор = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "ХозяйственнаяОперация", ХозяйственнаяОперация, , ВидСравненияКомпоновкиДанных.Равно);
		ИначеЕсли РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
			Или РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
			
			НовыйОтбор = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "Счет", ИсточникДанных, , ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		Если ПоПравиламПолученияДанных Тогда
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "НачалоПериода", ПериодИПравило.НачалоПериода, , ВидСравненияКомпоновкиДанных.Равно);
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "КонецПериода", ПериодИПравило.КонецПериода, , ВидСравненияКомпоновкиДанных.Равно);
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "ПравилоФакта", ПериодИПравило.ПравилоФакта, , ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиПравила.Отбор, ГруппировкаПравила.Отбор, Истина);
	
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ПолучениеДанных
	
	// Инициализировать макет компоновки, который будет сохраняться в кэш и выполняться
	МакетПолученияДанных = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДПолученияФакта, Настройки);
	
	// Выполнить процессор вывода в коллекцию значений
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	Если ДопДанныеДопНабор Тогда
		ВнешниеНаборыДанных.Вставить("ТаблицаДопДанных", ТаблицаДопДанных);
	КонецЕсли;
	ДанныеИсточниковПоПравилам = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетПолученияДанных, ВнешниеНаборыДанных);
	
	#КонецОбласти 
	
	#Область ПостобработкаДанных_СверткаПравилИСумм
	
	// "Свернуть" колонки-идентификаторы правила, в одну
	Если ПоПравиламПолученияДанных Тогда
		
		Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
			Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
				Продолжить;
			КонецЕсли;
			
			КолонкиИдентификаторы.Добавить("Аналитика" + НомерАналитики);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(КолонкиИдентификаторы);
		
		СтрокаКолонкиИдентификаторы = СтрСоединить(КолонкиИдентификаторы, ", ");
		
		Идентификаторы = ТаблицаДопДанных.ВыгрузитьКолонку("УникальныйИдентификатор");
		КолонкиАгрегаты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КолонкиАгрегаты);
		ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(
			ДанныеИсточниковПоПравилам,
			СтрокаКолонкиИдентификаторы,
			Идентификаторы, "_",
			КолонкиАгрегаты,
			Истина);
		
		Идентификаторы.Очистить();
		
		Если ПараметрыПолученияФакта.Показатели.Свойство("Сумма") Тогда
			КолонкиИдентификаторыСуммы = "Сумма";
			
			Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
				Идентификаторы.Добавить(СтрЗаменить(КолонкаАгрегат, "Сумма", ""));
			КонецЦикла;
			
			ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(ДанныеИсточниковПоПравилам, КолонкиИдентификаторыСуммы, Идентификаторы);
		КонецЕсли;
		
		Если ПараметрыПолученияФакта.Показатели.Свойство("Количество") И Ложь Тогда
			КолонкиИдентификаторыКоличества = "Количество";
			
			Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
				Идентификаторы.Добавить(СтрЗаменить(КолонкаАгрегат, "Количество", ""));
			КонецЦикла;
			
			ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(ДанныеИсточниковПоПравилам, КолонкиИдентификаторыКоличества, Идентификаторы);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти 
	
	// Вернуть таблицу факта
	ИндексыТаблицы = ПараметрыПолученияФакта.ИндексыТаблиц.Получить("ТаблицаПравилСтатей");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей, ИндексыТаблицы);
	
	Возврат ДанныеИсточниковПоПравилам;
	
КонецФункции

// Возвращает факт по статьям бюджетов в соответствии с настроенными правилами
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - Настройки отбора статей бюджетов
// 	Параметры - Структура - Параметры получения фактических данных
// 	ПересчитыватьВВалюту - Булево - Признак необходимости пересчета из валюты хранения в валюту статьи
// 	ДополнятьХранимымФактом - Булево - Признак необходимости дополнения фактических данных хранимыми данными.
//
// Возвращаемое значение:
// ТаблицаЗначения - Фактические данные по статьям бюджетов.
//
Функция ФактПоСтатьямБюджетов(НастройкиОтбора, Знач Параметры, ПересчитыватьВВалюту = Истина, ДополнятьХранимымФактом = Истина) Экспорт
	
	// Подготовим таблицу факта
	ФактПоСтатьямБюджетов = ШаблонТаблицыФактаПоСтатьямБюджетов(Параметры);
	
	// Подготовим таблицу правил, по которым планируется получить данные
	УстановитьПривилегированныйРежим(Истина);

	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки,
	                                           "ПромежуточноеКэшированиеРезультатовРаботыПравил",
	                                           Ложь,
	                                           ВидСравненияКомпоновкиДанных.Равно);
	
	// Дополним отбором, обеспечивающим выбор только статей для получения оборотов
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки,
		"ПоказательБюджетов",,
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ТаблицаПравилСтатей = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	ТаблицаПравилСтатей.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ТаблицаПравилСтатей.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"), "ТипОбъектаИсточникаДанных");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Получим факт в соответствии с правилами
	Для Каждого Правило Из ТаблицаПравилСтатей Цикл
		ФактСтатьиБюджетовПоПравилу(Правило, Параметры, ФактПоСтатьямБюджетов);
	КонецЦикла;
	
	// Пересчитаем факт в валюту статьи
	Если ПересчитыватьВВалюту И Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ФактПоСтатьямБюджетов, Параметры, Истина);
	КонецЕсли;
	
		
	Возврат ФактПоСтатьямБюджетов;
	
КонецФункции

// Возвращает факт по показателям бюджетов в соответствии с настроенными правилами
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - Настройки отбора правил
// 	Параметры - Структура - Параметры получения фактических данных
// 	ПересчитыватьВВалюту - Булево - Признак необходимости пересчета факта в валюту отчета.
//
// Возвращаемое значение:
// 	ФактПоПоказателямБюджетов - ТаблицаЗначения - Фактические данные по показателям бюджетов.
//
Функция ФактПоПоказателямБюджетов(НастройкиОтбора, Знач Параметры, ПересчитыватьВВалюту = Истина) Экспорт
	
	ТаблицаПериодов = Планирование.ШаблонТаблицыПериодов();
	
	Если Параметры.ОстаткиТолькоНаНачалоПериода Или Не ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		Период = ТаблицаПериодов.Добавить();
		Период.ДатаНачала = Параметры.Период.ДатаНачала;
		Период.ДатаОкончания = Параметры.Период.ДатаОкончания;
	Иначе
		Планирование.ЗаполнитьТаблицуПериодов(
			ТаблицаПериодов, Параметры.Периодичность, Параметры.Период.ДатаНачала, Параметры.Период.ДатаОкончания);
	КонецЕсли;
	Параметры.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	// Подготовим таблицу факта
	ФактПоПоказателямБюджетов = ШаблонТаблицыФактаПоПоказателямБюджетов(Параметры);
	
	// Подготовим таблицу правил
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	МакетКомпоновкиДанных = КомпоновкаДанныхСервер.ПолучитьМакетКомпоновки(СхемаКомпоновкиДанных, Настройки);
	ТаблицаПравил = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	ТаблицаПравил.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ТаблицаПравил.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов"), "ТипОбъектаИсточникаДанных");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Получим факт в соответствии с правилами
	Для каждого Правило Из ТаблицаПравил Цикл
		ФактПоказателяБюджетовПоПравилу(Правило, Параметры, ФактПоПоказателямБюджетов);
	КонецЦикла;
	
	// Пересчитаем факт в валюту показателей бюджетов
	Если ПересчитыватьВВалюту И Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ФактПоПоказателямБюджетов, Параметры, Истина);
	КонецЕсли;
		
	Возврат ФактПоПоказателямБюджетов;
	
КонецФункции

// Возвращает факт по статьям и показателям бюджетов, а также значения нефинансовых показателей, входящих в структуру
// вида бюджета.
//
// Параметры:
// 	ПараметрыДанных - Структура - Отборы, определенные на уровне бюджетного отчета
// 	ИсточникиДанных -  Массив - Источников данных вида бюджета
// 	ВалютаОтчета    - СправочникСсылка.Валюты - Валюта, в которой необходимо вернуть факт.
//
// Возвращаемое значение:
// 	ФактПоВидуБюджета - ТаблицаЗначений.
//
Функция ФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных) Экспорт
	
	Если ИспользоватьАльтернативныйАлгоритм() Тогда
		ТаблицаДанныхПоВидуБюджета = РассчитатьФактПоВидуБюджетаАльтернативный(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных);
	Иначе
		ТаблицаДанныхПоВидуБюджета = РассчитатьФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных);
	КонецЕсли;
	
	Возврат ТаблицаДанныхПоВидуБюджета;
	
КонецФункции

// Возвращает таблицу с фактическими данными
// Состав колонок определяется параметрами получения факта.
//
// Параметры:
//	ИмяСправочникаИсточника      - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов". См. подробнее ИсточникиДанныхПовтИсп.ПоддерживаемыеСправочникиИсточникиДанных()
//	ПараметрыПолученияФакта - Структура - параметры получения факта по статьям и показателя бюджетов. См. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта().
//
// Возвращаемое значение:
//	ТаблицаЗначений - фактические данные.
//
Функция ФактическиеДанныеИзИсточников(ИмяСправочникаИсточника, ПараметрыПолученияФакта)
	
	#Область ИнициализацияПеременных
	ЭтоОбороты = (ИмяСправочникаИсточника = "ПравилаПолученияФактаПоСтатьямБюджетов");
	ЭтоОстатки = (ИмяСправочникаИсточника = "ПравилаПолученияФактаПоПоказателямБюджетов");
	
	РегламентированныйУчет = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет;
	МеждународныйУчет = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет;
	
	// Параметры получения фактических данных
	ПоПравиламПолученияДанных = ПараметрыПолученияФакта.ПоПравиламПолученияДанных;
	ПоОрганизациям            = ПараметрыПолученияФакта.ПоОрганизациям;
	ПоПодразделениям          = ПараметрыПолученияФакта.ПоПодразделениям;
	ПоРегистратору            = ПараметрыПолученияФакта.ПоРегистратору;
	ПоЕдиницамИзмерения       = ПараметрыПолученияФакта.ПоЕдиницамИзмерения;
	ПоВалютам                 = ПараметрыПолученияФакта.ПоВалютам;
	РежимПолученияДанных      = ПараметрыПолученияФакта.ОграниченияДоступа.РежимПолученияДанных;
	
	Если ЭтоОбороты Тогда
		ПоПериодам                        = ПараметрыПолученияФакта.Периодичность <> Неопределено;
		Периодичность                     = ПараметрыПолученияФакта.Периодичность;
		Если ПоПериодам Тогда
			ВыражениеПериодаПланирования = "Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
		Иначе
			ВыражениеПериодаПланирования = "ПериодДень";
		КонецЕсли;
	ИначеЕсли ЭтоОстатки Тогда
		ПоПериодам = Ложь;
		ВыражениеПериодаПланирования = "Период";
	КонецЕсли;
	
	ЗапрошенныеВидыАналитик           = ПараметрыПолученияФакта.ВидыАналитик;
	МаксимальныйНомерАналитики        = ПараметрыПолученияФакта.МаксимальныйНомерАналитики;
	ИспользуемыеНумерованныеАналитики = ПараметрыПолученияФакта.ИспользуемыеНумерованныеАналитики;
	
	ТаблицаПравилСтатей  = ПараметрыПолученияФакта.ТаблицаПравилСтатей;
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей);
	
	// Дополнительные данные
	ДополнительныеДанные     = ПараметрыПолученияФакта.ДополнительныеДанные;
	ВидДопДанных             = ДополнительныеДанные.Вид;
	ТаблицаДопДанных         = ДополнительныеДанные.ТаблицаДанных;
	
	ДопДанныеВычисляемыеПоля = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.ВычисляемыеПоля;
	ДопДанныеДопНабор        = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
	
	ИспользуемыеКолонкиДопДанных = Новый Массив;
		
	// Таблица периодов
	ТаблицаОбластейДанных  = ПараметрыПолученияФакта.ОбластиДанных.ТаблицаДанных;
	КолонкиОбластейДанных  = ТаблицаОбластейДанных.Колонки;
	
	// Идентификация источников данных
	ПолученныеМакеты = Новый Соответствие;
	НаборыДанныхДляИдентификации = Новый Соответствие;
	
	ИмяПоляИдентификатора = "ИдентификаторИсточникаДанных";
	ВыражениеПараметраИдентификатора = """" + ИмяПоляИдентификатора + """ = &" + ИмяПоляИдентификатора;
	ПрефиксИДВыражения = "ИдентификаторВыражения";
	ПрефиксУсловияВыражения = "УсловиеВыражения";
	
	УсловияВыражений = ПараметрыПолученияФакта.УсловияВыражений;
	
	// Свертка данных
	КолонкиИдентификаторы = Новый Массив;
	КолонкиАгрегаты = Новый Массив;
	
	ШаблонПолученияФакта = ИсточникиДанныхПовтИсп.ПолучитьМакетСправочника(ИмяСправочникаИсточника, "ШаблонПолученияФакта");
	СКДПолученияФакта = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(ШаблонПолученияФакта);
	
	#КонецОбласти 
	
	#Область НаборыДанных
	
	#Область ОбъединенныйФакт
	
	НДОбъединенныйФакт = СКДПолученияФакта.НаборыДанных.ОбъединенныйФакт;
	НДТОД              = СКДПолученияФакта.НаборыДанных.ТаблицаОбластейДанных;
	
	// Проверим есть ли источники регламентированного или международного учета
	Если ЭтоОбороты Тогда
		ОтборПоРазделуУчета = Новый Структура("РазделИсточникаДанных", РегламентированныйУчет);
		ЕстьИсточникСГруппойКорСчет = ТаблицаПравилСтатей.НайтиСтроки(ОтборПоРазделуУчета).Количество() > 0;
		ОтборПоРазделуУчета = Новый Структура("РазделИсточникаДанных", МеждународныйУчет);
		ЕстьИсточникСГруппойКорСчет = ЕстьИсточникСГруппойКорСчет Или ТаблицаПравилСтатей.НайтиСтроки(ОтборПоРазделуУчета).Количество() > 0;
	КонецЕсли;
	
	// Для каждого уникального макета схемы добавить НД регистра и перенести настройки типов.
	Для Каждого ПрименяемоеПравилоФакта Из ТаблицаПравилСтатей Цикл
		ИдентификаторИсточникаДанных = ПрименяемоеПравилоФакта.ИдентификаторИсточникаДанных;
		
		Если ПолученныеМакеты.Получить(ИдентификаторИсточникаДанных) = Неопределено Тогда
			Макет = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ПрименяемоеПравилоФакта.ПравилоФакта,, РежимПолученияДанных, Истина);
			
			ПолученныеМакеты.Вставить(ИдентификаторИсточникаДанных, Макет);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПолученныйМакет Из ПолученныеМакеты Цикл 
		ИдентификаторИсточникаДанных = ПолученныйМакет.Ключ;
		ИсходныйМакет                = ПолученныйМакет.Значение;
		
		// Перенесем все наборы данных источников в объединенный набор
		СкопированныеНаборыДанных = КомпоновкаДанныхСервер.СкопироватьНаборыДанных(НДОбъединенныйФакт, ИсходныйМакет, ИдентификаторИсточникаДанных);
		
		ПроизвольныйНабор = Ложь;
		ПравилаМакета = ТаблицаПравилСтатей.НайтиСтроки(Новый Структура("ИдентификаторИсточникаДанных", ИдентификаторИсточникаДанных));
		Если ПравилаМакета.Количество() > 0 Тогда
			ПроизвольныйНабор = ПравилаМакета[0].РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные;
		КонецЕсли;
		
		НеКопируемыеПараметры = ИменаОбщихПараметровПравилПолученияФакта();
		
		// Т.к. в разных схемах параметры могут называться одинаково, но иметь разное значение,
		// то необходимо переименовать их, а также заменить их имена в тексте запроса.
		// Также необходимо учесть, что может быть параметр, имя которого частично повторяет имя другого
		// параметра. В этом случае, замену нужно производить начиная с самого длинного по названию параметра.
		ИменаПараметров = Новый ТаблицаЗначений;
		ИменаПараметров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
		ИменаПараметров.Колонки.Добавить("НовоеИмя", Новый ОписаниеТипов("Строка"));
		ИменаПараметров.Колонки.Добавить("Заменять", Новый ОписаниеТипов("Булево"));
		ИменаПараметров.Колонки.Добавить("ДлинаИмени", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
		Для каждого ПараметрСхемы Из ИсходныйМакет.Параметры Цикл
			СтрокаИмениПараметра = ИменаПараметров.Добавить();
			СтрокаИмениПараметра.Имя        = ПараметрСхемы.Имя;
			СтрокаИмениПараметра.ДлинаИмени = СтрДлина(ПараметрСхемы.Имя);
			СтрокаИмениПараметра.Заменять   = ПроизвольныйНабор И НеКопируемыеПараметры.Найти(ПараметрСхемы.Имя) = Неопределено;
			Если СтрокаИмениПараметра.Заменять Тогда
				СтрокаИмениПараметра.НовоеИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"П%1_%2",
					ИдентификаторИсточникаДанных,
					ПараметрСхемы.Имя);
			Иначе
				СтрокаИмениПараметра.НовоеИмя = СтрокаИмениПараметра.Имя;
			КонецЕсли;
		КонецЦикла;
		ИменаПараметров.Сортировать("ДлинаИмени УБЫВ");
		
		Для каждого СкопированныйНаборДанных Из СкопированныеНаборыДанных Цикл
			Если ТипЗнч(СкопированныйНаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				Для каждого СтрокаИмениПараметра Из ИменаПараметров Цикл
					Если СтрокаИмениПараметра.Заменять Тогда
						СкопированныйНаборДанных.Запрос = СтрЗаменить(СкопированныйНаборДанных.Запрос,
						                                              "&" + СтрокаИмениПараметра.Имя,
						                                              "&" + СтрокаИмениПараметра.НовоеИмя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ПараметрИсточника Из ИсходныйМакет.Параметры Цикл
			СтрокаИмениПараметра = ИменаПараметров.Найти(ПараметрИсточника.Имя, "Имя");
			ИскомоеИмяПараметра  = СтрокаИмениПараметра.НовоеИмя;
			
			НовыйПараметр = СКДПолученияФакта.Параметры.Найти(ИскомоеИмяПараметра);
			
			Если НовыйПараметр = Неопределено Тогда
				НовыйПараметр = СКДПолученияФакта.Параметры.Добавить();
				НовыйПараметр.Имя = ИскомоеИмяПараметра;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточника,, "Имя");
			Если СтрокаИмениПараметра.Заменять Тогда
				// Пользовательские параметры использовать всегда, даже если в СКД стоит использование Авто.
				НовыйПараметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
		КонецЦикла;
		
		ИскомаяКоллекцияНаборов = НаборыДанныхДляИдентификации[ИдентификаторИсточникаДанных];
		Если ИскомаяКоллекцияНаборов = Неопределено Тогда
			НаборыДанныхДляИдентификации.Вставить(ИдентификаторИсточникаДанных, СкопированныеНаборыДанных);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИскомаяКоллекцияНаборов, СкопированныеНаборыДанных);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим макеты ДО переноса - добавим в них поле "ИдентификаторИсточникаДанных"
	// Для поставляемых схем - это имя макета и источник данных настройки хозяйственной операции
	// Для произвольных данных - это строка хеш-схемы 
	// Хеш используется для минимизации количества произвольных наборов данных. 
	// Если СКД в разных правилах идентичны, тогда в исполняемой схеме будет всего один набор данных.
	Для Каждого НаборДанныхДляИдентификации Из НаборыДанныхДляИдентификации Цикл 
		ИдентификаторНабора    = НаборДанныхДляИдентификации.Ключ;
		НаборыПоИдентификатору = НаборДанныхДляИдентификации.Значение;
		
		Для Каждого НаборПоИдентификатору Из НаборыПоИдентификатору Цикл 
			Если ТипЗнч(НаборПоИдентификатору) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				ЗапросНабора          = НаборПоИдентификатору.Запрос;
				
				// Добавим поле в расширенные поля запроса компоновки и поля выборки запроса
				ЗапросНабора = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(ЗапросНабора, """" + ИдентификаторНабора + """", ИмяПоляИдентификатора, , Истина, Истина);
				
				ЗапросНабора = СхемыЗапросов.ДобавитьУсловиеВЗапрос(ЗапросНабора, ВыражениеПараметраИдентификатора);
				
				ЗапросНабора = СтрЗаменить(ЗапросНабора, """" + ИмяПоляИдентификатора + """", """" + ИдентификаторНабора + """");
				
				НаборПоИдентификатору.Запрос = ЗапросНабора;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// В тексты запросов добавим поля-параметры для соединения с таблицей областей данных.
	ЭлементыОбъединенногоФакта = НДОбъединенныйФакт.Элементы;
	
	ВыражениеИсточник = "";
	Для Каждого КолонкаОбластиДанных Из КолонкиОбластейДанных Цикл 
		ИмяКолонки = КолонкаОбластиДанных.Имя;
		
		Если Не ПараметрыПолученияФакта.Свойство(ПрефиксУсловияВыражения + ИмяКолонки, ВыражениеИсточник) Тогда
			ВыражениеИсточник = ИмяКолонки;
		КонецЕсли;
		
		Если ИмяКолонки = ИмяПоляИдентификатора Тогда
			Продолжить;
		КонецЕсли;
		
		ТипКолонки = КолонкаОбластиДанных.ТипЗначения;
		
		Для Каждого ЭлементОбъединенногоФакта Из ЭлементыОбъединенногоФакта Цикл 
			ДобавитьПолеВыборкиВЗапросРекурсивно(ИмяКолонки, ЭлементОбъединенногоФакта);
			
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(ЭлементОбъединенногоФакта, ИмяКолонки, ИмяКолонки, , ТипКолонки);
		КонецЦикла;
		
		// Добавим поля дочерних наборов в корневой, объединяющий факт
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДОбъединенныйФакт, ИмяКолонки, ИмяКолонки, , ТипКолонки);
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ТаблицаДопДанных
	
	НДТаблицаДопДанных = СКДПолученияФакта.НаборыДанных.ТаблицаДопДанных;
	
	// Добавим поля идентификаторов выражений именованных аналитик
	Для Каждого ВидАналитики Из ЗапрошенныеВидыАналитик Цикл
		ИмяПоляАналитики       = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(
			НДТаблицаДопДанных, 
			"ИД_ВыражениеИменованнойАналитики" + ИмяПоляАналитики, 
			"ИД_ВыражениеИменованнойАналитики" + ИмяПоляАналитики);
	КонецЦикла;
	
	Для каждого ИмяКолонкиИВыражение Из УсловияВыражений Цикл
		ИмяВыражения = ИмяКолонкиИВыражение.Ключ;
		Если СтрНачинаетсяС(ИмяВыражения, "ВыражениеИменованнойАналитики") Тогда
			// Данные поля могут быть использованы в отборе без вывода аналитики
			ИмяПоляНабора = "ИД_" + ИмяВыражения;
			ПолеНабора = НДТаблицаДопДанных.Поля.Найти(ИмяПоляНабора);
			Если ПолеНабора = Неопределено
			   И НЕ ТаблицаДопДанных.Колонки.Найти(ИмяПоляНабора) = Неопределено Тогда
				ФинансоваяОтчетностьСервер.НовоеПолеНабора(
				НДТаблицаДопДанных, 
				ИмяПоляНабора,
				ИмяПоляНабора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	#КонецОбласти 
		
	#КонецОбласти 
	
	#Область СвязиНаборовДанных
	
	// Уточним выражения связей по началу и окончанию периода
	Для Каждого СвязьНаборовДанных Из СКДПолученияФакта.СвязиНаборовДанных Цикл 
		Если СвязьНаборовДанных.НаборДанныхИсточник = "ТаблицаОбластейДанных"
			Или СвязьНаборовДанных.НаборДанныхПриемник = "ТаблицаОбластейДанных" Тогда
			Префикс = "ТОД_";
		ИначеЕсли СвязьНаборовДанных.НаборДанныхИсточник = "ТаблицаДопДанных"
			Или СвязьНаборовДанных.НаборДанныхПриемник = "ТаблицаДопДанных" Тогда
			Префикс = "ТДД_";
		Иначе
			Префикс = "";
		КонецЕсли;
		
		Если НЕ ЭтоОбороты
		   И СвязьНаборовДанных.ВыражениеИсточник = "ВыражениеПериодГраница"
		   И СвязьНаборовДанных.Параметр = "ПериодГраница" Тогда
			// Необходимо преобразовать правую часть выражения.
			// Нельзя создавать поле ПериодГраница с типом граница периода, но в наборе "ОбъединенныйФакт" есть поле "Период".
			// "ПериодГраница" - это "Период", приведенная к границе периода или с прибавлением секунды (до 8.3.14).
			Если ИспользуетсяПриведениеКГраницеПериодаВСвязяхСхемыПолученияФакта() Тогда
				ВыражениеПриемник =
				"ВЫБОР
				|	КОГДА ПолучениеОстатковНаГраницуПериода
				|		ТОГДА КомпоновкаДанныхСервер.ГраницаПериода(Период, ""Включая"")
				|	ИНАЧЕ Период
				|КОНЕЦ";
			Иначе
				ВыражениеПриемник =
				"ВЫБОР
				|	КОГДА ПолучениеОстатковНаГраницуПериода
				|		ТОГДА ДОБАВИТЬКДАТЕ(Период, ""СЕКУНДА"", 1)
				|	ИНАЧЕ Период
				|КОНЕЦ";
			КонецЕсли;
			СвязьНаборовДанных.ВыражениеПриемник = ВыражениеПриемник;
		КонецЕсли;
		
		АдаптироватьВыражениеПоля(СвязьНаборовДанных.ВыражениеИсточник, Префикс, УсловияВыражений);
		АдаптироватьВыражениеПоля(СвязьНаборовДанных.ВыражениеПриемник, Префикс, УсловияВыражений);
		
		АдаптироватьВыражениеПериодаПланирования(СвязьНаборовДанных.ВыражениеИсточник, ВыражениеПериодаПланирования);
		АдаптироватьВыражениеПериодаПланирования(СвязьНаборовДанных.ВыражениеПриемник, ВыражениеПериодаПланирования);
	КонецЦикла;
		
	// Уточним состав связей
	Если ЭтоОбороты И Не ЕстьИсточникСГруппойКорСчет Тогда
		Для Каждого СвязьНаборовДанных Из СКДПолученияФакта.СвязиНаборовДанных Цикл 
			Если СвязьНаборовДанных.УсловиеСвязи = "&ЕстьИсточникСГруппойКорСчет" Тогда
				СКДПолученияФакта.СвязиНаборовДанных.Удалить(СвязьНаборовДанных);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Уточним состав связей
	Если ЭтоОбороты
		И НЕ СКДПолученияФакта.Параметры.Найти("ОборотПоАналитикеРасхода") = Неопределено Тогда
		Связь = СКДПолученияФакта.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ОбъединенныйФакт";
		Связь.ВыражениеИсточник = "ЕСТЬNULL(ОборотПоАналитикеРасхода, ЛОЖЬ)";
		Связь.НаборДанныхПриемник = "ТаблицаДопДанных";
		Связь.ВыражениеПриемник =
		"ВЫБОР КОГДА ТДД_ИдентификаторИсточникаДанных = ""ДвиженияНоменклатураНоменклатура""
		|	ТОГДА ТДД_ОборотПоАналитикеРасхода
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ";
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ВычисляемыеПоля
	
	// Добавим вычисляемые поля именованных аналитик
	ВсеТипыАналитикБюджетирования = ВсеТипыАналитик();
	Для Каждого ВидАналитики Из ЗапрошенныеВидыАналитик Цикл
		ИмяПоляАналитики       = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ВыражениеПоляАналитики = УсловияВыражений["ВыражениеИменованнойАналитики" + ИмяПоляАналитики];
		
		ВычисляемоеПоле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта,
		                                                                  ИмяПоляАналитики,
		                                                                  ВыражениеПоляАналитики,
		                                                                  ,
		                                                                  Истина,
		                                                                  ВсеТипыАналитикБюджетирования);
	КонецЦикла;
	
	Для каждого УсловиеВыражения Из УсловияВыражений Цикл
		Если СтрНачинаетсяС(УсловиеВыражения.Ключ, "ВыражениеИменованнойАналитики") Тогда
			ИмяПоляАналитики = Сред(УсловиеВыражения.Ключ, СтрДлина("ВыражениеИменованнойАналитики") + 1);
			ВыражениеПоляАналитики = УсловиеВыражения.Значение;
			
			ВычисляемоеПоле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта,
			                                                              ИмяПоляАналитики,
			                                                              ВыражениеПоляАналитики,
			                                                              ,
			                                                              Истина,
			                                                              ВсеТипыАналитикБюджетирования);
		КонецЕсли;
	КонецЦикла;
	
	// Уточним выражения вычисляемых полей
	Для Каждого ВычисляемоеПоле Из СКДПолученияФакта.ВычисляемыеПоля Цикл 
		АдаптироватьВыражениеПоля(ВычисляемоеПоле.Выражение, , УсловияВыражений);
		АдаптироватьВыражениеПериодаПланирования(ВычисляемоеПоле.Выражение, ВыражениеПериодаПланирования);
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ПоляИтога
		
	Для Каждого ПолеИтога Из СКДПолученияФакта.ПоляИтога Цикл 
		КолонкиАгрегаты.Добавить(ПолеИтога.ПутьКДанным);
	КонецЦикла;
	
	#КонецОбласти 
	
	Настройки = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДПолученияФакта);
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	
	КорневойЭлементСтруктуры = Настройки.Структура;
	
	#Область Параметры
	
	// Установим общие параметры
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ГраницаФактДанных", ПараметрыПолученияФакта.ГраницаФактДанных);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ВалютаОтчета", ПараметрыПолученияФакта.ВалютаОтчета);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ВалютаРегл", ПараметрыПолученияФакта.ВалютаРегл);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ВалютаУпр", ПараметрыПолученияФакта.ВалютаУпр);
	
	#КонецОбласти 
	
	#Область НастройкиПервичнойВыборкиДанных
	
	// Добавим поля-ресурсы
	Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, КолонкаАгрегат);
	КонецЦикла;
	
	// Добавим отборы предварительной фильтрации данных - уровень правила получения данных.
	ГруппаПредварительныйОтбор = ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаПредварительныйОтбор.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаПредварительныйОтбор.Использование = Истина;
	ГруппаПредварительныйОтбор.Представление = "ПредварительныйОтбор";
	
	ЗадействованныеДопОтборы = Новый Соответствие; // Ключ - название справочника и хеш, Значение - компоновщик с отборами
	ГруппыОтборовИИД = Новый Соответствие; // Ключ - идентификатор источника данных, Значение - ссылка на группу отборов
	ЗадействованныеОтборыИИД = Новый Соответствие;
	КлючДопОтбора = "";
	
	Для Каждого РеквизитыПравила Из ТаблицаПравилСтатей Цикл
		ИдентификаторИсточникаДанных = РеквизитыПравила.ИдентификаторИсточникаДанных;
		
		КлючДопОтбора = ИдентификаторИсточникаДанных + "_" + РеквизитыПравила.ХешНастроек;
		
		Если ГруппыОтборовИИД[ИдентификаторИсточникаДанных] = Неопределено Тогда
			ГруппаИдентификаторИсточникаДанных = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаПредварительныйОтбор,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИдентификаторИсточникаДанных.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			ГруппаИдентификаторИсточникаДанных.Использование = Истина;
			ГруппаИдентификаторИсточникаДанных.Представление = ИдентификаторИсточникаДанных;
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИдентификаторИсточникаДанных, "ИдентификаторИсточникаДанных", ИдентификаторИсточникаДанных);
			
			ГруппаВсеДопОтборыПравил = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИдентификаторИсточникаДанных,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаВсеДопОтборыПравил.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ГруппаВсеДопОтборыПравил.Использование = Истина;
			ГруппаВсеДопОтборыПравил.Представление = "ВсеДопОтборыПравил_" + ИдентификаторИсточникаДанных;
			
			ГруппыОтборовИИД.Вставить(ИдентификаторИсточникаДанных, ГруппаВсеДопОтборыПравил);
		Иначе
			ГруппаВсеДопОтборыПравил = ГруппыОтборовИИД[ИдентификаторИсточникаДанных];
		КонецЕсли;
		
		Если ЗадействованныеДопОтборы[КлючДопОтбора] = Неопределено Тогда
			НастройкиДопОтборовПравила = ИсточникиДанныхПовтИсп.ПолучитьХранимыеНастройкиСправочника(
				РеквизитыПравила.ИмяСправочникаИсточника, 
				РеквизитыПравила.ХешНастроек);
			
			Если НастройкиДопОтборовПравила <> Неопределено Тогда
				ГруппаДопОтбораПравила = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаВсеДопОтборыПравил,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаДопОтбораПравила.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				ГруппаДопОтбораПравила.Использование = Истина;
				ГруппаДопОтбораПравила.Представление = "ДопОтборПравила_" + КлючДопОтбора;
				
				// Базовый отбор уровня правила - хозяйственная операция, счет или произвольное значение (произвольные правила)
				// Применим преобразованные иерархические источники правил
				// Например, счет 08, заданный в ППФД, будет представлен субсчетами в фактических данных.
				ФинансоваяОтчетностьСервер.НовыйОтбор(
					ГруппаДопОтбораПравила, 
					"ИсточникДанных",
					ПараметрыПолученияФакта.ИерархияИсточниковДанных.СопоставлениеДляОтборов[РеквизитыПравила.ИсточникДанных],, 
					ВидСравненияКомпоновкиДанных.ВСписке);
				
				Если ЭтоОбороты
					И(РеквизитыПравила.РазделИсточникаДанных = РегламентированныйУчет 
						Или РеквизитыПравила.РазделИсточникаДанных = МеждународныйУчет)
					И ЗначениеЗаполнено(РеквизитыПравила.КорСчет) Тогда
					ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаДопОтбораПравила, "ГруппаКорСчет.КорСчет", РеквизитыПравила.КорСчет, , ВидСравненияКомпоновкиДанных.ВИерархии);
				КонецЕсли;
	
				// Отборы уровня правила, заданные пользователем
				ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиДопОтборовПравила.Отбор, ГруппаДопОтбораПравила, Истина);
				
				// Отметим, что уже добавляли, чтобы не усложнять работу оптимизатору запроса СКД
				ЗадействованныеДопОтборы.Вставить(КлючДопОтбора, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыПолученияФакта.Свойство("ОтборПоРегистраторуДляВсегоФакта") Тогда
		// Отбор по регистратору для целей оптимизации получения оборотов по статьям, когда
		// известно, что отбор по регистратору должен применяться ко всем статьям всех источников данных.
		// Например, при проверке прохождения документа по лимитам ДС. Результативность зависит от количества правил получения факта.
		ЗначениеОтбора = ПараметрыПолученияФакта.ОтборПоРегистраторуДляВсегоФакта;
		Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ФинансоваяОтчетностьСервер.НовыйОтбор(
			Настройки.Отбор,
			"Регистратор",
			ЗначениеОтбора,,
			ВидСравненияОтбора);
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ГруппировкаИМэппингДанных
	
	ГруппировкаПорцииДанных = ФинансоваяОтчетностьСервер.НоваяГруппировка(КорневойЭлементСтруктуры);
	
	// Добавим базовые поля, определяющие характер выбранных данных
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "СтатьяБюджетов");
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ПоказательБюджетов");
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ИД_Источника");
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Период");
	Если ЭтоОбороты Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "НачалоПериода");
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "КонецПериода");
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Сценарий");
	
	Если ПоПериодам Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, ВыражениеПериодаПланирования);
	КонецЕсли;
	
	Если ПоРегистратору Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Регистратор");
	КонецЕсли;
	
	Если ПоВалютам Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Валюта");
	КонецЕсли;
	
	Если ПараметрыПолученияФакта.ТребуетсяПересчетПоКурсу Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ВалютаХранения");
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ПериодКурса");
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ТребуетсяПересчетПоКурсу");
	КонецЕсли;
	
	Если ПоЕдиницамИзмерения Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ЕдиницаИзмерения");
	КонецЕсли;
	
	Если ПоПравиламПолученияДанных Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ПравилоФакта");
	КонецЕсли;
	
	// Добавим сквозные измерения
	Если ПоОрганизациям Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Организация");
	КонецЕсли;
	
	Если ПоПодразделениям Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Подразделение");
	КонецЕсли;
	
	// Добавим нумерованные аналитики
	Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Аналитика" + НомерАналитики);
	КонецЦикла;
	
	// Добавим именованные аналитики
	Для Каждого ВидАналитики Из ЗапрошенныеВидыАналитик Цикл
		ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, ИмяПоляАналитики);
	КонецЦикла;
	
	// Добавим отборы окончательной фильтрации данных по источникам
	Если ПараметрыПолученияФакта.ДополнительныйОтбор <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ПараметрыПолученияФакта.ДополнительныйОтбор.Отбор, ГруппировкаПорцииДанных.Отбор, Истина);
	КонецЕсли;
	
	// Добавим отборы для точного получения данных в разрезе правил получения данных
	ГруппаМэппингДанныхППФД = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПорцииДанных.Отбор,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаМэппингДанныхППФД.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаМэппингДанныхППФД.Использование = Истина;
	ГруппаМэппингДанныхППФД.Представление = "МэппингДанныхППФД";
	
	ЗадействованныеОтборыГруппировки = Новый Соответствие; // Ключ - ППФД, Значение - ссылка на группу отборов
	КлючДопОтбора = "";
	
	Для Каждого РеквизитыПравила Из ТаблицаПравилСтатей Цикл 
		ПравилоФакта = РеквизитыПравила.ПравилоФакта;
		
		Если ЗадействованныеОтборыГруппировки[ПравилоФакта] = Неопределено Тогда
			ГруппаППФД = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаМэппингДанныхППФД,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаППФД.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			ГруппаППФД.Использование = Истина;
			ГруппаППФД.Представление = "ППФД_" + РеквизитыПравила.УникальныйИдентификатор;
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаППФД, "ПравилоФакта", ПравилоФакта);
			
			ЗадействованныеОтборыГруппировки.Вставить(ПравилоФакта, ГруппаППФД);
			НастройкиДопОтборовПравила = ИсточникиДанныхПовтИсп.ПолучитьХранимыеНастройкиСправочника(
				РеквизитыПравила.ИмяСправочникаИсточника, 
				РеквизитыПравила.ХешНастроек);
			
			Если НастройкиДопОтборовПравила <> Неопределено
				И НастройкиДопОтборовПравила.Отбор.Элементы.Количество() > 0 Тогда
				
				ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиДопОтборовПравила.Отбор, ГруппаППФД, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим отборы по ненулевым полям-ресурсам
	ГруппаОтборНенулевых = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПорцииДанных.Отбор,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборНенулевых.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтборНенулевых.Использование = Истина;
	ГруппаОтборНенулевых.Представление = "ОтборНенулевых";
	
	Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл
		ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаОтборНенулевых, КолонкаАгрегат, 0, , ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ПолучениеДанных
	
	МакетПолученияДанных = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДПолученияФакта, Настройки);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаОбластейДанных", ТаблицаОбластейДанных);
	ВнешниеНаборыДанных.Вставить("ТаблицаДопДанных", ТаблицаДопДанных);
	ВнешниеНаборыДанных.Вставить("ИерархияИсточниковДанных", ПараметрыПолученияФакта.ИерархияИсточниковДанных.ТаблицаСопоставлений);
	Если ЭтоОбороты Тогда
		ВнешниеНаборыДанных.Вставить("СопоставлениеКорСчетов", ПараметрыПолученияФакта.ИерархияИсточниковДанных.ТаблицаСопоставленийКорСчетов);
	КонецЕсли;
	
	ДанныеИсточниковПоПравилам = Неопределено;
	Если ПараметрыПолученияФакта.ОграниченияДоступа.ЕстьПривилегированныйРежим Тогда
		ВыгрузитьРезультатПоМакетуСУчетомОграниченийДоступа(ДанныеИсточниковПоПравилам, МакетПолученияДанных, ВнешниеНаборыДанных, Истина);
	КонецЕсли;
	Если ПараметрыПолученияФакта.ОграниченияДоступа.ЕстьНеПривилегированныйРежим Тогда
		ВыгрузитьРезультатПоМакетуСУчетомОграниченийДоступа(ДанныеИсточниковПоПравилам, МакетПолученияДанных, ВнешниеНаборыДанных, Ложь);
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ПостобработкаДанных
	
	// "Свернуть" колонки-идентификаторы правила, в одну
	Если (ДопДанныеВычисляемыеПоля ИЛИ ДопДанныеДопНабор)
		И ПоПравиламПолученияДанных Тогда
		
		Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
			Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
				Продолжить;
			КонецЕсли;
			
			КолонкиИдентификаторы.Добавить("Аналитика" + НомерАналитики);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(КолонкиИдентификаторы);
		
		СтрокаКолонкиИдентификаторы = СтрСоединить(КолонкиИдентификаторы, ", ");
		
		Идентификаторы = ТаблицаДопДанных.ВыгрузитьКолонку("УникальныйИдентификатор");
		ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(
			ДанныеИсточниковПоПравилам, 
			СтрокаКолонкиИдентификаторы, 
			Идентификаторы, "_", 
			КолонкиАгрегаты,
			Истина);
		
		Идентификаторы.Очистить();
		
		Если ПараметрыПолученияФакта.Показатели.Свойство("Сумма") Тогда
			КолонкиИдентификаторыСуммы = "Сумма";
			
			Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
				Идентификаторы.Добавить(СтрЗаменить(КолонкаАгрегат, "Сумма", ""));
			КонецЦикла;
			
			ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(ДанныеИсточниковПоПравилам, КолонкиИдентификаторыСуммы, Идентификаторы);
		КонецЕсли;
		
		Если ПараметрыПолученияФакта.Показатели.Свойство("Количество") И Ложь Тогда
			КолонкиИдентификаторыКоличества = "Количество";
			
			Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
				Идентификаторы.Добавить(СтрЗаменить(КолонкаАгрегат, "Количество", ""));
			КонецЦикла;
			
			ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(ДанныеИсточниковПоПравилам, КолонкиИдентификаторыКоличества, Идентификаторы);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти 
	
	// Вернуть таблицу факта
	ИндексыТаблицы = ПараметрыПолученияФакта.ИндексыТаблиц.Получить("ТаблицаПравилСтатей");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей, ИндексыТаблицы);
	
	Возврат ДанныеИсточниковПоПравилам;
	
КонецФункции

// Возвращает значения нефинансовых показателей в соответствии с их настройками
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - Настройки отбора правил
// 	Параметры - Структура - Параметры получения фактических данных.
// 
// Возвращаемое значение:
// 	ЗначенияНефинансовыхПоказателей - ТаблицаЗначения - Значения нефинансовых показателей.
//
Функция ЗначенияНефинансовыхПоказателей(НастройкиОтбора, Знач Параметры) Экспорт
	
	ТаблицаПериодов = Планирование.ШаблонТаблицыПериодов();
	
	Если Не ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		Период = ТаблицаПериодов.Добавить();
		Период.ДатаНачала = Параметры.Период.ДатаНачала;
		Период.ДатаОкончания = Параметры.Период.ДатаОкончания;
	Иначе
		Планирование.ЗаполнитьТаблицуПериодов(
			ТаблицаПериодов, 
			Параметры.Периодичность, 
			Параметры.Период.ДатаНачала, 
			Параметры.Период.ДатаОкончания);
	КонецЕсли;
	Параметры.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	ТаблицаЗначений = ШаблонТаблицыЗначенийНефинансовыхПоказателей(Параметры);
	
	НефинансовыеПоказатели = Справочники.НефинансовыеПоказателиБюджетов.НефинансовыеПоказателиСУчетомОтбора(НастройкиОтбора);
	Для каждого СтрокаПоказатель Из НефинансовыеПоказатели Цикл
		Если СтрокаПоказатель.ЗагружатьИзДругихПодсистем Тогда
			Если ЗначениеЗаполнено(СтрокаПоказатель.СхемаКомпоновкиДанных) Тогда
				СхемаПолученияДанных = Справочники.НефинансовыеПоказателиБюджетов.ПредопределеннаяСхемаПолученияДанных(
					СтрокаПоказатель.СхемаКомпоновкиДанных,
					?(Параметры.Свойство("РежимПолученияДанных"), Параметры.РежимПолученияДанных, Неопределено));
			Иначе
				СхемаПолученияДанных = СтрокаПоказатель.ХранилищеСхемыКомпоновкиДанных.Получить();
				Если ТипЗнч(СхемаПолученияДанных) = Тип("ХранилищеЗначения") Тогда
					СхемаПолученияДанных = СхемаПолученияДанных.Получить();
				КонецЕсли;
				Если Параметры.РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
					Для Каждого Набор Из СхемаПолученияДанных.НаборыДанных Цикл
						Если ЗначениеЗаполнено(Набор.Запрос) Тогда 
							Набор.Запрос = СтрЗаменить(Набор.Запрос, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ ");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			НастройкиСхемыПолученияДанных = СтрокаПоказатель.ХранилищеНастроекКомпоновкиДанных.Получить();
			Правило = ПравилоПолученияЗначенийНефинансовогоПоказателя(СтрокаПоказатель, СхемаПолученияДанных, НастройкиСхемыПолученияДанных);
			ЗначенияНефинансовогоПоказателяПоПравилу(Правило, Параметры, ТаблицаЗначений);
		КонецЕсли;
		Если СтрокаПоказатель.ПоСценариям Или Не СтрокаПоказатель.ЗагружатьИзДругихПодсистем Тогда
			СхемаПолученияДанных = РегистрыСведений.ЗначенияНефинансовыхПоказателей.ПолучитьМакет("СхемаКомпоновкиДанных");
			Если Параметры.РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
				Для Каждого Набор Из СхемаПолученияДанных.НаборыДанных Цикл
					Если ЗначениеЗаполнено(Набор.Запрос) Тогда 
						Набор.Запрос = СтрЗаменить(Набор.Запрос, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ ");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НастройкиСхемыПолученияДанных = СхемаПолученияДанных.НастройкиПоУмолчанию;
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
				НастройкиСхемыПолученияДанных, 
				"НефинансовыйПоказатель", 
				СтрокаПоказатель.НефинансовыйПоказатель);
			Правило = ПравилоПолученияЗначенийНефинансовогоПоказателя(СтрокаПоказатель, СхемаПолученияДанных, НастройкиСхемыПолученияДанных);
			Правило.РасширенныйРежимНастройкиЗаполненияАналитики = Ложь;
			ЗначенияНефинансовогоПоказателяПоПравилу(Правило, Параметры, ТаблицаЗначений);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Добавляет алгоритмы конвертации в существующую схему
// 
// Параметры:
//	Схема                     - СхемаКомпоновкиДанных - изменяемая схема, в которой требуется конвертировать суммы.
//	КомпоновщикНастроек       - КомпоновщикНастроекКомпоновкиДанных - изменяемые настройки
//	ПараметрыПересчета        - Структура - параметры, определяющие способ пересчета из одной в валюты в другую. См. БюджетированиеСервер.ШаблонПараметровПересчетаВВалюту().
//
Процедура ДобавитьПересчетДанныхВВалюту(Схема, КомпоновщикНастроек, Знач ПараметрыПересчета) Экспорт
	
	// Инициализация переменных
	ИмяНабораДанныхИсточника     = ПараметрыПересчета.ИмяНабораДанныхИсточника;
	НомерНабораДанныхКонвертации = ПараметрыПересчета.НомерНабораДанныхКонвертации;
	ИсточникКурсовВалют          = ПараметрыПересчета.ИсточникКурсовВалют;
	ИсходнаяВалюта               = ПараметрыПересчета.ИсходнаяВалюта;
	КолонкиПересчета             = ПараметрыПересчета.КолонкиПересчета;
	ПериодКурса                  = ПараметрыПересчета.ПериодКурса;
	СценарийПрогнозногоКурса     = ПараметрыПересчета.СценарийПрогнозногоКурса;
	ЦелеваяВалюта                = ПараметрыПересчета.ЦелеваяВалюта;
	
	ТребуетсяСценарийПрогнозногоКурса = (ИсточникКурсовВалют = "ПрогнозныеКурсыСценариев");
	
	ИмяНабораДанныхКонвертации = "КоэффициентыКурсовВалют" + ИмяНабораДанныхИсточника + НомерНабораДанныхКонвертации;
	НаборДанныхКонвертации     = Схема.НаборыДанных.Найти(ИмяНабораДанныхКонвертации);
	
	НаборДанныхИсточник              = Схема.НаборыДанных[ИмяНабораДанныхИсточника];
	ИмяНабораДанныхИсточникаСНомером = ИмяНабораДанныхИсточника + НомерНабораДанныхКонвертации;
	
	// Модификация схемы и настроек
	Если НаборДанныхКонвертации = Неопределено Тогда
		НаборДанныхКонвертации = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(Схема, , ИмяНабораДанныхКонвертации);
		
		ТекстЗапросаКонвертации = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсВалюты.Валюта КАК ВалютаКурсовВалют" + ИмяНабораДанныхИсточникаСНомером + ",
		|	&ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером + " КАК ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером + ",
		|	&ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером + " КАК ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером + ",
		|	КурсВалюты.Курс * КурсВалютыОтчета.Кратность / (КурсВалюты.Кратность * КурсВалютыОтчета.Курс) КАК КоэффициентПересчета" + ИмяНабораДанныхИсточникаСНомером + "
		|ИЗ
		|	РегистрСведений." + ИсточникКурсовВалют + ".СрезПоследних(
		|			&ПериодКурса" + ИмяНабораДанныхИсточникаСНомером + ",
		|			Валюта = &ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером + "
		|			" + ?(ТребуетсяСценарийПрогнозногоКурса, "И Сценарий = &Сценарий" + ИмяНабораДанныхИсточникаСНомером, "") + "
		|		) КАК КурсВалюты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИсточникКурсовВалют + ".СрезПоследних(
		|			&ПериодКурса" + ИмяНабораДанныхИсточникаСНомером + ", 
		|			Валюта = &ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером + "
		|			" + ?(ТребуетсяСценарийПрогнозногоКурса, "И Сценарий = &Сценарий" + ИмяНабораДанныхИсточникаСНомером, "") + "
		|		) КАК КурсВалютыОтчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	КурсВалюты.Кратность <> 0
		|	И КурсВалютыОтчета.Курс <> 0";
	
		НаборДанныхКонвертации.Запрос = ТекстЗапросаКонвертации;
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации, "ВалютаКурсовВалют" + ИмяНабораДанныхИсточникаСНомером, , , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации, "ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером, , , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации, "ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером, , , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации, "КоэффициентПересчета" + ИмяНабораДанныхИсточникаСНомером); // Не ограничиваем длину коэффициента
		Если ТребуетсяСценарийПрогнозногоКурса Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации, "Сценарий" + ИмяНабораДанныхИсточникаСНомером, , , Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
		КонецЕсли;
		
		КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером, , ИсходнаяВалюта);
		КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером, ,  ЦелеваяВалюта);
		КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "ПериодКурса" + ИмяНабораДанныхИсточникаСНомером, ,    ПериодКурса);
		Если ТребуетсяСценарийПрогнозногоКурса Тогда
			КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "Сценарий" + ИмяНабораДанныхИсточникаСНомером, ,   СценарийПрогнозногоКурса);
		КонецЕсли;
	КонецЕсли;
	
	// Уточним значения параметров данных для пересчета
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером, ИсходнаяВалюта);
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером,  ЦелеваяВалюта);
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "ПериодКурса" + ИмяНабораДанныхИсточникаСНомером,    ПериодКурса);
	Если ТребуетсяСценарийПрогнозногоКурса Тогда
		КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "Сценарий" + ИмяНабораДанныхИсточникаСНомером,   СценарийПрогнозногоКурса);
	КонецЕсли;
		
	ТипПараметраИсходнаяВалюта = ТипЗнч(ИсходнаяВалюта);
	Если ТипПараметраИсходнаяВалюта = Тип("СправочникСсылка.Валюты") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером, ИсходнаяВалюта); 
	ИначеЕсли ТипПараметраИсходнаяВалюта = Тип("Строка") Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			ИсходнаяВалюта, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером);
	ИначеЕсли ТипПараметраИсходнаяВалюта = Неопределено Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером);
	КонецЕсли;
	
	ТипПараметраЦелеваяВалюта = ТипЗнч(ЦелеваяВалюта);
	Если ТипПараметраЦелеваяВалюта = Тип("СправочникСсылка.Валюты") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером, ЦелеваяВалюта); 
	ИначеЕсли ТипПараметраЦелеваяВалюта = Тип("Строка") Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			ЦелеваяВалюта, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером);
	ИначеЕсли ТипПараметраЦелеваяВалюта = Неопределено Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером);
	КонецЕсли;
	
	Если ТребуетсяСценарийПрогнозногоКурса Тогда
		ТипПараметраСценарий = ТипЗнч(СценарийПрогнозногоКурса);
		Если ТипПараметраСценарий = Тип("СправочникСсылка.Сценарии") Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Сценарий" + ИмяНабораДанныхИсточникаСНомером, СценарийПрогнозногоКурса); 
		ИначеЕсли ТипПараметраСценарий = Тип("Строка") Тогда
			КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
				ИмяНабораДанныхИсточника, 
				ИмяНабораДанныхКонвертации, 
				СценарийПрогнозногоКурса, 
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером, 
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером);
		ИначеЕсли ТипПараметраСценарий = Неопределено Тогда
			КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
				ИмяНабораДанныхИсточника, 
				ИмяНабораДанныхКонвертации, 
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером, 
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером, 
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером);
		КонецЕсли;
	КонецЕсли;
	
	ТипПараметраПериодКурса = ТипЗнч(ПериодКурса);
	Если ТипПараметраПериодКурса = Тип("Дата") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодКурса" + ИмяНабораДанныхИсточникаСНомером, ПериодКурса); 
	ИначеЕсли ТипПараметраПериодКурса = Тип("Строка") Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			ПериодКурса, 
			"ПериодКурса" + ИмяНабораДанныхИсточникаСНомером, 
			"ПериодКурса" + ИмяНабораДанныхИсточникаСНомером);
	ИначеЕсли ТипПараметраПериодКурса = Неопределено Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			"ПериодКурса" + ИмяНабораДанныхИсточникаСНомером, 
			"ПериодКурса" + ИмяНабораДанныхИсточникаСНомером, 
			"ПериодКурса" + ИмяНабораДанныхИсточникаСНомером);
	КонецЕсли;
	
	ТипПараметраКолонкиПересчета = ТипЗнч(КолонкиПересчета);
	Если ТипПараметраКолонкиПересчета = Тип("Массив") Тогда
		ПоляСуммыВВалюте = КолонкиПересчета;

	ИначеЕсли ТипПараметраКолонкиПересчета = Тип("Строка") Тогда
		ПоляСуммыВВалюте = Новый Массив;
		ПоляСуммыВВалюте.Добавить(КолонкиПересчета);
		
	ИначеЕсли ТипПараметраКолонкиПересчета = Неопределено Тогда
		ПоляСуммыВВалюте = Новый Массив;
		ПоляСуммыВВалюте.Добавить("Сумма");
		ПоляСуммыВВалюте.Добавить("СуммаПриход");
		ПоляСуммыВВалюте.Добавить("СуммаРасход");
		ПоляСуммыВВалюте.Добавить("СуммаВВалюте");
		ПоляСуммыВВалюте.Добавить("СуммаВалПриход");
		ПоляСуммыВВалюте.Добавить("СуммаВалРасход");
		ПоляСуммыВВалюте.Добавить("ЗначениеПоказателя");
	КонецЕсли;
	
	Для Каждого Поле Из ПоляСуммыВВалюте Цикл
		ИскомоеИсходноеПоле = Схема.ВычисляемыеПоля.Найти(Поле);
		
		Если ИскомоеИсходноеПоле <> Неопределено Тогда
			ИскомоеИсходноеПоле.Выражение = "ОКР(" + ИскомоеИсходноеПоле.Выражение + " * КоэффициентПересчета" + ИмяНабораДанныхИсточникаСНомером + ", 2)";
		Иначе
			ИскомоеИсходноеПоле = НаборДанныхИсточник.Поля.Найти(Поле);
			
			Если ИскомоеИсходноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Выражение = "ОКР(" + Поле + " * КоэффициентПересчета" + ИмяНабораДанныхИсточникаСНомером + ", 2)";
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(Схема, Поле, Выражение, ИскомоеИсходноеПоле.Заголовок, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает в тексте запроса выражения заполнения аналитики в зависимости от доступных типов объекта.
//
// Параметры:
// 	ТекстЗапроса - Строка - Текст запроса для обработки
// 	СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов - Статья бюджетов, определяющая аналитику
// 	МенеджерОбъекта - ДокументМенеджер - Источник заполнения аналитики.
//
Процедура УстановитьВЗапросеВыраженияЗаполненияАналитики(ДокументСсылка, ТекстЗапроса, СтатьяБюджетов, МенеджерОбъекта, ИмяТаблицы = "") Экспорт
	
	Если Не ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		
		МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%Аналитика" + ИмяТаблицы + НомерАналитики, ВыражениеПустогоЗначенияАналитики());
		КонецЦикла; 
		
		Возврат;
		
	КонецЕсли;
	
	ДоступныеТипы = МенеджерОбъекта.ДоступныеТипыАналитикБюджетирования(ДокументСсылка, ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерАналитики,
	|	СтатьиБюджетов.ВидАналитики1 КАК ВидАналитики
	|ПОМЕСТИТЬ ВидыАналитик
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	СтатьиБюджетов.ВидАналитики2
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	СтатьиБюджетов.ВидАналитики3
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	СтатьиБюджетов.ВидАналитики4
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	СтатьиБюджетов.ВидАналитики5
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	СтатьиБюджетов.ВидАналитики6
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|;
	|
	|////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыАналитик.НомерАналитики КАК НомерАналитики,
	|	ВидыАналитик.ВидАналитики КАК ВидАналитики,
	|	АналитикиСтатейБюджетов.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ВидыАналитик КАК ВидыАналитик
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|	ПО
	|		ВидыАналитик.ВидАналитики = АналитикиСтатейБюджетов.Ссылка";
	
	Запрос.УстановитьПараметр("СтатьяБюджетов", СтатьяБюджетов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Выражение = ВыражениеПустогоЗначенияАналитики();
		Если ЗначениеЗаполнено(Выборка.ВидАналитики) Тогда
			Для каждого Тип Из Выборка.ТипЗначения.Типы() Цикл
				Если ДоступныеТипы[Тип] <> Неопределено Тогда
					Выражение = ДоступныеТипы[Тип];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%Аналитика" + ИмяТаблицы + Выборка.НомерАналитики, Выражение);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает в привилегированном режиме значение константы "Адрес публикации информационной базы в локальной сети".
//
// Возвращаемое значение:
//   Строка - значение константы.
//
Функция АдресПубликацииИнформационнойБазыВЛокальнойСети() Экспорт
	
	
	Возврат Неопределено; //Только для использования в УП
	
КонецФункции

// Получает в привилегированном режиме значение константы "Использовать международный финансовый учет".
// Только для ERP.
//
// Возвращаемое значение:
//   Булево - значение константы.
//
Функция ИспользуетсяМеждународныйУчет() Экспорт
	
	
	Возврат Ложь; //Только для использования в УП
	
КонецФункции

// Удаляет макеты бюджетов, сохраненные в присоединенных файлах экземпляра бюджета
// 
// Параметры:
//	Отбор - СправочникСсылка.ВидыБюджетов, ДокументСсылка.ЭкземплярБюджета - отбор, по которому будет определен экземпляр 
//																			бюджета для удаления присоединенных файлов.
//
Процедура УдалитьСохраненныеМакетыБюджетов(Отбор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭкземплярБюджетаПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭкземплярБюджетаПрисоединенныеФайлы КАК ЭкземплярБюджетаПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ПО ЭкземплярБюджетаПрисоединенныеФайлы.ВладелецФайла = ЭкземплярБюджета.Ссылка
	|ГДЕ
	|	ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла <> ЗНАЧЕНИЕ(Перечисление.ТипыСлужебныхФайловЭкземпляраБюджета.ПустаяСсылка)
	|	И &ТекстОтбораЭкземпляраБюджета";
	
	Если ТипЗнч(Отбор) = Тип("СправочникСсылка.ВидыБюджетов")
		И ЗначениеЗаполнено(Отбор) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбораЭкземпляраБюджета", "ЭкземплярБюджета.ВидБюджета = &Отбор");
		
	ИначеЕсли ТипЗнч(Отбор) = Тип("ДокументСсылка.ЭкземплярБюджета")
		И ЗначениеЗаполнено(Отбор) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбораЭкземпляраБюджета", "ЭкземплярБюджета.Ссылка = &Отбор");
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		ВызватьИсключение НСтр("ru = 'УдалитьСохраненныеМакетыБюджетов: Неверные параметры вызова'");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Отбор", Отбор);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает виды аналитик для переданного поддерживаемого справочника-источника данных.
//
// Параметры:
//	ИсточникДанных - СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов, 
//		СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов, СправочникСсылка.НефинансовыеПоказателиБюджетов - поддерживаемый справочник-источник данных.
//
// Возвращаемое значение:
//	Структура - виды аналитик источника данных
//		* ВидАналитики1..6 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов.
//
Функция ВидыАналитик(ИсточникДанных) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ВидАналитики1");
	Реквизиты.Вставить("ВидАналитики2");
	Реквизиты.Вставить("ВидАналитики3");
	Реквизиты.Вставить("ВидАналитики4");
	Реквизиты.Вставить("ВидАналитики5");
	Реквизиты.Вставить("ВидАналитики6");
	
	Если ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов") Тогда
		ВидыАналитик = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных.ПоказательБюджетов, Реквизиты);
		
	ИначеЕсли ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
		ВидыАналитик = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных.СтатьяБюджетов, Реквизиты);
		
	ИначеЕсли ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ИсточникДанных);
		ВидыАналитик = Реквизиты;
	КонецЕсли;
	
	Возврат ВидыАналитик;
	
КонецФункции

// Добавляет для аналитических срезов в схему вычисляемые поля, а в настройки поля группировок.
// 
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - динамически дополняемая схема источника данных
//	Настройки - НастройкиКомпоновкиДанных - динамически дополняемые настройки компоновки данных
//	ИсточникДанных - СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов, 
//		СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов, СправочникСсылка.НефинансовыеПоказателиБюджетов - поддерживаемый справочник-источник данных
//	Параметры - Структура - см. ШаблонПараметровПолученияФакта().
//
Процедура ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, ИсточникДанных, Параметры)
	
	ВидыАналитик = Новый ТаблицаЗначений;
	ВидыАналитик.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВидыАналитик.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		НоваяСтрока = ВидыАналитик.Добавить();
		НоваяСтрока.НомерАналитики = НомерАналитики;
		НоваяСтрока.ВидАналитики = ИсточникДанных["ВидАналитики" + НомерАналитики];
	КонецЦикла;
	
	Если ИсточникДанных.РасширенныйРежимНастройкиЗаполненияАналитики Тогда
		ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоПравилу(ИсточникДанных, ВидыАналитик, СхемаКомпоновкиДанных);
	Иначе
		ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик, Истина);
	КонецЕсли;
	
	ВычисляемыеПоля = СхемаКомпоновкиДанных.ВычисляемыеПоля;
	
	// Добавим аналитику "по номеру"
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		
		ПолеАналитикиПоНомеру = "Аналитика" + НомерАналитики;
		
		РезультатПоиска = ВыраженияЗаполненияАналитики.Найти(НомерАналитики, "НомерАналитики");
		
		ВычисляемоеПоле = ВычисляемыеПоля.Добавить();
		ВычисляемоеПоле.ПутьКДанным = ПолеАналитикиПоНомеру;
		Если ЗначениеЗаполнено(РезультатПоиска.Выражение) Тогда
			ТипЗначения = РезультатПоиска.ТипЗначения;
			Выражение   = РезультатПоиска.Выражение;
		Иначе
			ТипЗначения = ВсеТипыАналитик();
			Выражение   = ВыражениеПустогоЗначенияАналитики();
		КонецЕсли;
		ВычисляемоеПоле.Выражение   = Выражение;
		ВычисляемоеПоле.ТипЗначения = ТипЗначения;
		
		ДобавитьПолеГруппировки(Настройки, ПолеАналитикиПоНомеру);
		
	КонецЦикла;
	
	// Добавим аналитику "по виду"
	ТипыВидовВидыАналитик = БюджетированиеПовтИсп.ТипыВидовВидыАналитик();
	
	Если Параметры.Свойство("Аналитики") Тогда
		Аналитики = Параметры.Аналитики;
	Иначе
		Аналитики = ТипыВидовВидыАналитик.ВыгрузитьКолонку("Ссылка");
		
		Параметры.Вставить("Аналитики", Аналитики);
	КонецЕсли;
	
	Для Каждого СтрокаТипыВидовВидыАналитик Из ТипыВидовВидыАналитик Цикл
		ВидАналитики = СтрокаТипыВидовВидыАналитик.Ссылка;
		
		Если Аналитики.Найти(ВидАналитики) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеАналитикиПоВиду = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		РезультатПоиска = ВыраженияЗаполненияАналитики.Найти(ВидАналитики, "ВидАналитики");
		Выражение = "";
		Если НЕ РезультатПоиска = Неопределено Тогда
			Выражение = ВыражениеЗначенияАналитикиПоИсточникуИТипу(РезультатПоиска.Выражение, ВидАналитики);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выражение) Тогда
			Выражение = ВыражениеПустогоЗначенияАналитики();
		КонецЕсли;
		
		Если ПолеАналитикиПоВиду <> Выражение Тогда
			ВычисляемоеПоле = ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = ПолеАналитикиПоВиду;
			ВычисляемоеПоле.Выражение   = Выражение;
			ВычисляемоеПоле.ТипЗначения = СтрокаТипыВидовВидыАналитик.ТипЗначения;
		КонецЕсли;
		
		Если Параметры.ВидыАналитик.Найти(ВидАналитики) <> Неопределено Тогда
			ДобавитьПолеГруппировки(Настройки, ПолеАналитикиПоВиду);
		КонецЕсли;
		
	КонецЦикла;
	
	// Аналитика Валюта
	Если Параметры.ВозвращатьСуммуВВалюте И ИсточникДанных.ЗаполнениеВалюты <> "НеЗаполнять" Тогда
		
		ВВалютеОтчета = Ложь;
		ВычисляемоеПолеВалюта = ВычисляемыеПоля.Добавить();
		ВычисляемоеПолеВалюта.ПутьКДанным = "Валюта";
		
		Если ИсточникДанных.ЗаполнениеВалюты = "ОпределяетсяПоАналитике" Тогда
			
			ВыражениеАналитики = ВычисляемыеПоля.Найти("Аналитика" + ИсточникДанных.АдресАналитикиВалюта);
			
			ВычисляемоеПолеВалюта.Выражение = 
			"БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
			|	&КэшЗначенийАналитик, 
			|	" + ВыражениеАналитики.Выражение + ", 
			|	""" + ИсточникДанных.ПолеВалютыАналитики + """,
			|	&Валюта)";
			
			ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
			ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
			
		ИначеЕсли ИсточникДанных.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных" Тогда 
			
			ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
			
			ВВалютеИсточника = Истина;
			Если ИсточникДанных.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет 
				И НЕ ИсточникДанных.ИсточникВалютный Тогда
				ВычисляемоеПолеВалюта.Выражение = "&ВалютаРегл";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаРегл", Параметры.ВалютаРегл);
				ВВалютеИсточника = Ложь;
			КонецЕсли;
			
			Если ВВалютеИсточника Тогда
				Если ПоляНабора.Найти("Валюта") <> Неопределено Тогда
					ВычисляемоеПолеВалюта.Выражение = "Валюта";
				Иначе
					ВВалютеОтчета = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИсточникДанных.ЗаполнениеВалюты = "ОпределяетсяВалютойОтчета" Тогда 
			ВВалютеОтчета = Истина;
		КонецЕсли;
		
		Если ВВалютеОтчета Тогда
			ВычисляемоеПолеВалюта.Выражение = "&Валюта";
			ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
		КонецЕсли;
		
		ДобавитьПолеГруппировки(Настройки, "Валюта");
		
	КонецЕсли;
	
	// Аналитика ЕдиницаИзмерения
	Если ИсточникДанных.ЗаполнениеЕдиницыИзмерения <> "НеЗаполнять" Тогда
		
		ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		Если ПоляНабора.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			Выражение = "ЕдиницаИзмерения";
		Иначе
			Если ИсточникДанных.ЗаполнениеЕдиницыИзмерения = "ОпределяетсяПоАналитике" Тогда
				ВыражениеАналитики = ВычисляемыеПоля.Найти("Аналитика" + ИсточникДанных.АдресАналитикиЕдиницаИзмерения);
				Выражение = 
					"БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
					|	&КэшЗначенийАналитик, " + ВыражениеАналитики.Выражение + ", """ + ИсточникДанных.ПолеЕдиницыИзмеренияАналитики + """)";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
			ИначеЕсли ИсточникДанных.ЗаполнениеЕдиницыИзмерения = "ФиксированноеЗначение" Тогда 
				Выражение = "&ЕдиницаИзмерения";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "ЕдиницаИзмерения", ИсточникДанных.ЕдиницаИзмерения);
			КонецЕсли;
		КонецЕсли;
		
		ВычисляемоеПолеЕдИзмерения = ВычисляемыеПоля.Добавить();
		ВычисляемоеПолеЕдИзмерения.ПутьКДанным = "ЕдиницаИзмерения";
		ВычисляемоеПолеЕдИзмерения.Выражение = Выражение;
		ДобавитьПолеГруппировки(Настройки, "ЕдиницаИзмерения");
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет выражения вычисляемых полей для полей, используемых в отборах компоновки.
// 
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - динамически дополняемая схема источника данных
//	Настройки - НастройкиКомпоновкиДанных - динамически дополняемые настройки компоновки данных.
//
Процедура ДобавитьВыраженияПолейОтборов(СхемаКомпоновкиДанных, Настройки) Экспорт
	
	ЭлементыОтборов = КомпоновкаДанныхКлиентСервер.ПолучитьЭлементыОтбора(Настройки.Отбор);
	
	Для Каждого ЭлементОтбора Из ЭлементыОтборов Цикл
		Если ТипЗнч(ЭлементОтбора.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
				СхемаКомпоновкиДанных,
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Строка(ЭлементОтбора.ЛевоеЗначение),,
				Неопределено);
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
				СхемаКомпоновкиДанных, 
				Строка(ЭлементОтбора.ПравоеЗначение),
				Строка(ЭлементОтбора.ПравоеЗначение),,
				Неопределено);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сопоставляет и заполняет имена полей наборов данных и требуемых показателей фактических данных.
// 
// Параметры:
//	ИсточникиСуммы - Структура - сопоставленные показатели факта и поля источника данных
//		* Ключ     - Строка - имя показателя фактических данных
//		* Значение - Строка - имя поля в схеме-источнике данных
//	НаборДанных    - НаборДанныхЗапросСхемыКомпоновкиДанных, 
//		НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъединениеСхемыКомпоновкиДанных - набор данных, поля которого анализируются
//	ВсегдаВалютаВИмениПоказателя - Булево - Истина - во всех именах будет первое слово "Валюта".
//
Процедура ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, НаборДанных, ВсегдаВалютаВИмениПоказателя = Ложь) Экспорт
	
	ПоляНабораСхемы = НаборДанных.Поля;
	
	Префикс = ?(ВсегдаВалютаВИмениПоказателя, "Валюта", "");
	
	Если ПоляНабораСхемы.Найти("СуммаРегл") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить(Префикс + "Регл", "СуммаРегл");
	КонецЕсли;
	Если ПоляНабораСхемы.Найти("СуммаУпр") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить(Префикс + "Упр", "СуммаУпр");
	КонецЕсли;
	Если ПоляНабораСхемы.Найти("СуммаМеждународ") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить(Префикс + "Международ", "СуммаМеждународ");
	КонецЕсли;
	Если ПоляНабораСхемы.Найти("СуммаВВалюте") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить("Валюта", "СуммаВВалюте");
	КонецЕсли;
	
КонецПроцедуры

// Сопоставляет и заполняет имена полей наборов данных и требуемых показателей фактических данных.
// 
// Параметры:
//	ИсточникиКоличества - Структура - сопоставленные показатели факта и поля источника данных
//		* Ключ          - Строка - имя показателя фактических данных
//		* Значение      - Строка - имя поля в схеме-источнике данных
//	НаборДанных         - НаборДанныхЗапросСхемыКомпоновкиДанных, 
//		НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъединениеСхемыКомпоновкиДанных - набор данных, поля которого анализируются.
//
Процедура ЗаполнитьИсточникиКоличестваПоСхеме(ИсточникиКоличества, НаборДанных) Экспорт
	
	ПоляНабораСхемы = НаборДанных.Поля;
	
	Если ПоляНабораСхемы.Найти("Количество") <> Неопределено Тогда 
		ИсточникиКоличества.Вставить("Количество", "Количество");
	Иначе
		ИсточникиКоличества.Вставить("Количество", "0");
	КонецЕсли;
	
КонецПроцедуры


#Область ИнтерактивнаяРаботаСПравиламиПолученияФактическихДанныхИзОбщейФормыУпрощеннаяНастройкаСхемыКомпоновкиДанных

// Помещает измененные значения пользовательских параметров в схему компоновки данных при начале редактирования
// схемы получения фактических данных в общей форме УпрощеннаяНастройкаСхемыКомпоновкиДанных.
//
// Параметры:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема получения фактических данных.
//   КомпоновщикНастроек   - КомпоновщикНастроекСхемыКомпоновкиДанных - Компоновщик с настройками, содержащими отображаемые пользователю параметры.
//
Процедура ПоместитьНастройкиВСхемуПолученияФактическихДанных(СхемаКомпоновкиДанных, КомпоновщикНастроек) Экспорт
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	КомпоновкаДанныхКлиентСервер.ОчиститьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновкаДанныхКлиентСервер.СкопироватьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных.НастройкиПоУмолчанию, КомпоновщикНастроек.Настройки);
	
	ЗарезервированныеИменаПараметров = ИменаОбщихПараметровПравилПолученияФакта();
	Параметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	Для Каждого СтрокаПараметраКомпоновки Из Параметры Цикл
		Если НЕ СтрокаПараметраКомпоновки.Использование Тогда
			Продолжить;
		КонецЕсли;
		ИмяПараметра = Строка(СтрокаПараметраКомпоновки.Параметр);
		Если ЗарезервированныеИменаПараметров.Найти(ИмяПараметра) = Неопределено Тогда
			ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
			Если НЕ ПараметрСхемы = Неопределено Тогда
				ПараметрСхемы.Значение = СтрокаПараметраКомпоновки.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Позволяет проверить корректность схемы получения фактических данных, при необходимости исправить ошибки,
// а также заполнить список критических ошибок, которые необходимо будет исправить пользователю.
//
// Параметры:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема получения фактических данных.
//   СхемаСодержитКритическиеОшибки - Булево - флаг наличия критических ошибок, который необходимо взвести,
//                                             чтобы пользователь не смог применить схему, пока не будут исправлены ошибки.
//   СписокКритическихОшибок - СписокЗначений - Список, содержащий тексты сообщений о критических ошибках.
//   СписокПрочихСообщений   - СписокЗначений - Список, содержащий тексты сообщений о исправленных ошибках и прочие замечания.
//                                              Данный список сообщений выводится пользователю один раз.
//
Процедура ПроверкаКорректностиСхемыПолученияФактическихДанных(СхемаКомпоновкиДанных, СхемаСодержитКритическиеОшибки, СписокКритическихОшибок, СписокПрочихСообщений) Экспорт
	
	ЗарезервированныеИменаПараметров = ИменаОбщихПараметровПравилПолученияФакта();
	Для каждого ЭлементПараметра Из СхемаКомпоновкиДанных.Параметры Цикл
		Если НЕ ЗарезервированныеИменаПараметров.Найти(ЭлементПараметра.Имя) = Неопределено Тогда
			Если ЭлементПараметра.ВключатьВДоступныеПоля
			 ИЛИ НЕ ЭлементПараметра.ОграничениеИспользования Тогда
				ЭлементПараметра.ВключатьВДоступныеПоля = Ложь;
				ЭлементПараметра.ОграничениеИспользования = Истина;
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Параметр ""%1"" является зарезервированным, его редактирование пользователем не допускается. Параметр схемы компоновки будет исправлен.'"),
					ЭлементПараметра.Имя);
				
				СписокПрочихСообщений.Добавить(ТекстОшибки);
			КонецЕсли;
		Иначе
			ЭлементПараметра.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Помещает измененные значения параметров в схеме компоновки в настройки компоновщика настроек.
// Необходимость доопределения поведения вызвана возможностью указания параметра в настройках по умолчанию
// (тогда при стандартной инициализации настроек параметры будут взяты из настроек по умолчанию, а нужно
// чтобы брались из схемы компоновки).
//
// Параметры:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема получения фактических данных.
//   КомпоновщикНастроек   - КомпоновщикНастроекСхемыКомпоновкиДанных - Компоновщик с настройками, содержащими отображаемые пользователю параметры.
//
Процедура ДозаполнениеНастроекПриИзмененииСхемыКомпоновки(СхемаКомпоновкиДанных, КомпоновщикНастроек) Экспорт
	
	// Если заполнены настройки по умолчанию, то значения параметров подставляются из настроек по умолчанию, а не схемы компоновки.
	ЗарезервированныеИменаПараметров = ИменаОбщихПараметровПравилПолученияФакта();
	Параметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	Для Каждого СтрокаПараметраКомпоновки Из Параметры Цикл
		ИмяПараметра = Строка(СтрокаПараметраКомпоновки.Параметр);
		Если ЗарезервированныеИменаПараметров.Найти(ИмяПараметра) = Неопределено Тогда
			ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
			Если НЕ ПараметрСхемы = Неопределено Тогда
				СтрокаПараметраКомпоновки.Значение = ПараметрСхемы.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив имен параметров, значение которых не будет скопировано в общую схему компоновки данных
// из схемы произвольного правила получения фактических данных, т.к. представляют из себя зарезервированные имена параметров.
// Параметры, не вошедшие в список, будут переименованы в формат "П" + Идентификатор произвольного ППФД в общей схеме получения факта + "_" + Имя параметра,
// т.к. в составе одной общей схемы получения факта может быть произвольное количество ППФД с параметрами, имеющими одинаковое имя, но разные значения.
//
// Возвращаемое значение:
// 	Массив - Массив имен параметров данных компоновки.
//
Функция ИменаОбщихПараметровПравилПолученияФакта()
	НеКопируемыеПараметры = Новый Массив;
	НеКопируемыеПараметры.Добавить("НачалоПериода");
	НеКопируемыеПараметры.Добавить("КонецПериода");
	НеКопируемыеПараметры.Добавить("Период");
	НеКопируемыеПараметры.Добавить("ПериодГраница");
	НеКопируемыеПараметры.Добавить("ГраницаФактДанных");
	НеКопируемыеПараметры.Добавить("Периодичность");
	НеКопируемыеПараметры.Добавить("Валюта");
	НеКопируемыеПараметры.Добавить("ВалютаОтчета");
	НеКопируемыеПараметры.Добавить("ВалютаРегл");
	НеКопируемыеПараметры.Добавить("ВалютаУпр");
	НеКопируемыеПараметры.Добавить("ВалютаХранения");
	НеКопируемыеПараметры.Добавить("ИспользуетсяМеждународныйУчет");
	НеКопируемыеПараметры.Добавить("ИмяСправочникаИсточника");
	НеКопируемыеПараметры.Добавить("ПривилегированныйРежим");
	НеКопируемыеПараметры.Добавить("ПривилегированныйРежимИсточника");
	НеКопируемыеПараметры.Добавить("ИдентификаторИсточникаДанных");
	НеКопируемыеПараметры.Добавить("ТипПравилаФактическиеДанные");
	НеКопируемыеПараметры.Добавить("ТипПравилаИсполнениеБюджета");
	НеКопируемыеПараметры.Добавить("ИД_ВыражениеНачалоПериода");
	НеКопируемыеПараметры.Добавить("ИД_ВыражениеКонецПериода");
	НеКопируемыеПараметры.Добавить("ИД_ВыражениеПериод");
	НеКопируемыеПараметры.Добавить("ИсточникДанных");
	НеКопируемыеПараметры.Добавить("ПривилегированныйРежим"); 
	НеКопируемыеПараметры.Добавить("ПривилегированныйРежимИсточника");
	НеКопируемыеПараметры.Добавить("КэшЗначенийАналитик");
	НеКопируемыеПараметры.Добавить("ОборотПоАналитикеРасхода");
	НеКопируемыеПараметры.Добавить("ПолучениеОстатковНаГраницуПериода");
	
	Возврат НеКопируемыеПараметры;
КонецФункции

Процедура ЗаполнитьВспомогательныеРеквизитыПередЗаписью(СтатьяИлиПоказатель) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ВидыАналитик = Новый Структура;
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		ВидыАналитик.Вставить("ВидАналитики" + Сч);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ВидыАналитик, СтатьяИлиПоказатель);
	
	ТаблицаАналитик = Новый ТаблицаЗначений;
	ТаблицаАналитик.Колонки.Добавить("ИмяАналитики");
	ТаблицаАналитик.Колонки.Добавить("ЗначениеАналитики");
	Для Каждого КлючИЗначение Из ВидыАналитик Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если ТаблицаАналитик.Найти(КлючИЗначение.Значение, "ЗначениеАналитики") = Неопределено Тогда
			НоваяСтрока = ТаблицаАналитик.Добавить();
			НоваяСтрока.ИмяАналитики = КлючИЗначение.Ключ;
			НоваяСтрока.ЗначениеАналитики = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	ТаблицаАналитик.Сортировать("ИмяАналитики");
	
	Для Сч = 0 По ТаблицаАналитик.Количество() - 1 Цикл
		СтатьяИлиПоказатель["ВидАналитики" + (Сч + 1)] = ТаблицаАналитик[Сч].ЗначениеАналитики;
	КонецЦикла;
	
	Для ОставшиесяАналитики = ТаблицаАналитик.Количество() + 1 По МаксимальноеКоличествоАналитик Цикл
		СтатьяИлиПоказатель["ВидАналитики" + ОставшиесяАналитики] = Неопределено;
	КонецЦикла;
	
	СтатьяИлиПоказатель.КоличествоИспользуемыхАналитик = ТаблицаАналитик.Количество();
	
	АдресАналитикиВалюта = 0;
	Если СтатьяИлиПоказатель.ВалютаОпределяетсяАналитикой Тогда
		Если СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики1 Тогда
			АдресАналитикиВалюта = 1;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики2 Тогда
			АдресАналитикиВалюта = 2;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики3 Тогда
			АдресАналитикиВалюта = 3;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики4 Тогда
			АдресАналитикиВалюта = 4;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики5 Тогда
			АдресАналитикиВалюта = 5;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики6 Тогда
			АдресАналитикиВалюта = 6;
		КонецЕсли;
	КонецЕсли;
	СтатьяИлиПоказатель.АдресАналитикиВалюта = АдресАналитикиВалюта;
	
	АдресАналитикиКоличество = 0;
	Если СтатьяИлиПоказатель.ЕдиницаИзмеренияОпределяетсяАналитикой Тогда
		Если СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики1 Тогда
			АдресАналитикиКоличество = 1;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики2 Тогда
			АдресАналитикиКоличество = 2;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики3 Тогда
			АдресАналитикиКоличество = 3;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики4 Тогда
			АдресАналитикиКоличество = 4;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики5 Тогда
			АдресАналитикиКоличество = 5;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики6 Тогда
			АдресАналитикиКоличество = 6;
		КонецЕсли;
	КонецЕсли;
	СтатьяИлиПоказатель.АдресАналитикиКоличество = АдресАналитикиКоличество;
	
КонецПроцедуры

#Область АналитическиеОтчеты

Процедура ДополнитьСКДАналитикойПоВиду(СхемаКомпоновкиДанных, ИсточникАналитики) Экспорт
	
	ВидыАналитик = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыАналитики();
	Для каждого ВидАналитики Из ВидыАналитик Цикл
		
		ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики.Ссылка);
		ИмяПараметраВидаАналитики = "ВидАналитики" + ИмяПоляАналитики;
		
		ПараметрыВыражения = ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
		ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = ИсточникАналитики + ".КоличествоИспользуемыхАналитик";
		ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = ИсточникАналитики + ".ВидАналитики";
		ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "Аналитика";
		ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
		
		ВыражениеАналитики = ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
			СхемаКомпоновкиДанных,
			ИмяПоляАналитики,
			ВыражениеАналитики,
			ВидАналитики.Представление,
			Истина,
			БюджетированиеСервер.ВсеТипыАналитик());
		
		ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметраВидаАналитики);
		Если ПараметрСхемы = Неопределено Тогда
			ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
			ПараметрСхемы.Имя = ИмяПараметраВидаАналитики;
		КонецЕсли;
		ПараметрСхемы.Значение = ВидАналитики.Ссылка;
		ПараметрСхемы.ОграничениеИспользования = Истина;
		ПараметрСхемы.ТипЗначения = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов");
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет поля компоновки от "Аналитика1" до "Аналитика6" выражениями получения представления аналитики.
//
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки, в которой необходимо установить выражения получения представления
// 	ПутьКПолямКомпоновки  - Строка - Путь к полям компоновки, например, "НаборыДанных.ЗначенияНефинансовыхПоказателей.Поля"
// 	ИсточникАналитики     - Строка - Имя поля компоновки, содержащее настройки видов аналитики ,т.е. "ВидАналитики1", "ВидАналитики2".
//
Процедура ДополнитьСКДВыражениямиПредставленияАналитики(СхемаКомпоновкиДанных, ПутьКПолямКомпоновки, ИсточникАналитики) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ПоляКомпоновки = СхемаКомпоновкиДанных;
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКПолямКомпоновки, ".");
	Для каждого Реквизит Из Массив Цикл
		ПоляКомпоновки = ПоляКомпоновки[Реквизит];
	КонецЦикла;
	
	ШаблонИмениАналитики = "Аналитика%НомерАналитики%";
	ШаблонВидаАналитики  = "ВидАналитики%НомерАналитики%";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		
		ИмяПоляАналитики = СтрЗаменить(ШаблонИмениАналитики, "%НомерАналитики%", НомерАналитики);
		
		ПолеКомпоновки = ПоляКомпоновки.Найти(ИмяПоляАналитики);
		Если ТипЗнч(ПолеКомпоновки) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных")
		   И СокрЛП(ПолеКомпоновки.ВыражениеПредставления) = "&ТекстПредставленияЗначенияАналитики" Тогда
			
			Выражение = 
			"ВЫБОР
			|	КОГДА Не ЗначениеЗаполнено(%ИмяПоляАналитики%) И ЗначениеЗаполнено(%ПолеВидаАналитики%)
			|		ТОГДА СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			|				НСтр(""ru = '<Прочие %1>'""),
			|				Представление(%ПолеВидаАналитики%))
			|	ИНАЧЕ %ИмяПоляАналитики%
			|КОНЕЦ";
			
			ИмяВидаАналитики  = СтрЗаменить(ШаблонВидаАналитики, "%НомерАналитики%", НомерАналитики);
			ПолеВидаАналитики = ИсточникАналитики + "." + ИмяВидаАналитики;
			
			Выражение = СтрЗаменить(Выражение, "%ИмяПоляАналитики%",  ИмяПоляАналитики);
			Выражение = СтрЗаменить(Выражение, "%ПолеВидаАналитики%", ПолеВидаАналитики);
			
			ПолеКомпоновки.ВыражениеПредставления = Выражение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(ЭтаФорма, ПользовательскиеНастройки) Экспорт
	
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаАктуальностиДанных");
	Если Параметр <> Неопределено Тогда
		ИдентификаторПользовательскойНастройки = Параметр.ИдентификаторПользовательскойНастройки;
		ЭлементПользовательскойНастройки = ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскойНастройки <> Неопределено Тогда
			ЭлементПользовательскойНастройки.Значение = Дата('00010101');
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПравилПолученияДанных

Функция ВыраженияЗаполненияАналитикиПоПравилу(Правило, ВидыАналитик, СхемаКомпоновкиДанных)
	
	ВыраженияЗаполнения = Новый ТаблицаЗначений;
	ВыраженияЗаполнения.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВыраженияЗаполнения.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	ВыраженияЗаполнения.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ВыраженияЗаполнения.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	
	ОписаниеТиповАналитик = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыАналитик.ВыгрузитьКолонку("ВидАналитики"), "ТипЗначения");
	
	Для каждого СтрокаВидАналитики Из ВидыАналитик Цикл
		
		НоваяСтрока = ВыраженияЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВидАналитики);
		НоваяСтрока.ТипЗначения = ОписаниеТиповАналитик[СтрокаВидАналитики.ВидАналитики];
		
		НомерАналитики = СтрокаВидАналитики.НомерАналитики;
		
		Если Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] Тогда
			ИмяПараметра = "ЗначениеАналитики" + НомерАналитики;
			ДобавитьПараметр(СхемаКомпоновкиДанных, ИмяПараметра, Правило[ИмяПараметра]);
			Выражение = "&" + ИмяПараметра;
		Иначе
			Выражение = Правило["ВыражениеЗаполненияАналитики" + НомерАналитики];
			Если ЭтоИзмерениеАналитики(НоваяСтрока.ТипЗначения, СтрокаВидАналитики.ВидАналитики) Тогда
				Выражение = ВыражениеЗначенияАналитикиПоИсточникуИТипу(Выражение, СтрокаВидАналитики.ВидАналитики);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Выражение = Выражение;
		
	КонецЦикла;
	
	Возврат ВыраженияЗаполнения; 
	
КонецФункции

// Возвращает таблицу выражений заполнения аналитик.
//
// Параметры:
//  СхемаКомпоновкиДанных - Схема компоновки данных - Схема получения фактических данных.
//  ВидыАналитик - ТаблицаЗначений - Таблица аналитик.
//   *НомерАналитики - Число - Порядковый номер аналитики.
//   *ВидАналитики   - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Вид аналитики.
//  ПроверятьТипЗначенияВВыражении - Булево - Флаг необходимости проверки типа аналитики в самом выражении. Значение по умолчанию Ложь.
//                                            Должен быть установлен в Истина при получении данных для преобразование
//                                            значений не подходящего типа в пустое значение.
//                                            Должен быть установлен в Ложь при автоматическом подборе подходящих полей СКД.
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица выражений аналитик.
//   *НомерАналитики - Число - Порядковый номер аналитики.
//   *ВидАналитики   - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Вид аналитики.
//   *ТипЗначения    - ОписаниеТипов - тип значения аналитики.
//   *Выражение      - Строка - Строка заполнения аналитики. В зависимости от значения флага ПроверятьТипЗначенияВВыражении может содержать проверку на тип данных.
//   *Неоднозначно   - Булево - Флаг неоднозначности выбранного выражения аналитики. Если Истина, то в правилах получения данных требуется ручной выбор поля аналитики.
//
Функция ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик, ПроверятьТипЗначенияВВыражении = Ложь) Экспорт
	
	ВыраженияЗаполнения = Новый ТаблицаЗначений;
	ВыраженияЗаполнения.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВыраженияЗаполнения.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	ВыраженияЗаполнения.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ВыраженияЗаполнения.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	ВыраженияЗаполнения.Колонки.Добавить("Неоднозначно", Новый ОписаниеТипов("Булево"));
	
	ИсточникиЗаполненияАналитики = Новый Соответствие;
	ТипыИсточниковЗаполненияАналитик = Новый Соответствие;
	Если СхемаКомпоновкиДанных <> Неопределено
	   И СхемаКомпоновкиДанных.НаборыДанных.Количество() <> 0 Тогда
		ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		Для каждого ПолеНабора Из ПоляНабора Цикл
			Если ТипЗнч(ПолеНабора) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных")
				Или ТипЗнч(ПолеНабора) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПолеНабора.ТипЗначения) Тогда
				ИсточникиЗаполненияАналитики.Вставить(ПолеНабора.ПутьКДанным, ПолеНабора.ТипЗначения);
				ЗначениеДляСохранения = ТипыИсточниковЗаполненияАналитик.Получить(ПолеНабора.ТипЗначения);
				Если ЗначениеДляСохранения = Неопределено Тогда
					ЗначениеДляСохранения = Новый Массив;
				КонецЕсли;
				ЗначениеДляСохранения.Добавить(ПолеНабора.ПутьКДанным);
				ТипыИсточниковЗаполненияАналитик.Вставить(ПолеНабора.ТипЗначения, ЗначениеДляСохранения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОписаниеТиповАналитик = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыАналитик.ВыгрузитьКолонку("ВидАналитики"), "ТипЗначения");
	
	Для каждого СтрокаВидАналитики Из ВидыАналитик Цикл
		
		ВидАналитики = СтрокаВидАналитики.ВидАналитики;
		
		НоваяСтрока = ВыраженияЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВидАналитики);
		НоваяСтрока.ТипЗначения = ОписаниеТиповАналитик[ВидАналитики];
		
		Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеАналитикиПоНомеру = "Аналитика" + СтрокаВидАналитики.НомерАналитики;
		
		ОднозначноПодходящееПоле = Новый Массив; // Поле, описание типов которого совпадает с описанием типов аналитики
		УсловноПодходящиеПоля = Новый Массив; // Поля, описание типов которых содержат типы аналитики
		
		Если ИсточникиЗаполненияАналитики[ПолеАналитикиПоНомеру] <> Неопределено Тогда
			ОднозначноПодходящееПоле.Добавить(ПолеАналитикиПоНомеру);
		Иначе
			// Попробуем подобрать поле заполнение аналитики "по типу"
			ОписаниеТиповАналитики = ОписаниеТиповАналитик[ВидАналитики];
			ИсточникЗаполненияАналитики = ТипыИсточниковЗаполненияАналитик.Получить(ОписаниеТиповАналитики);
			Если Не ИсточникЗаполненияАналитики = Неопределено Тогда
				ОднозначноПодходящееПоле = ИсточникЗаполненияАналитики;
			Иначе
				Для каждого ИсточникЗаполненияАналитики Из ИсточникиЗаполненияАналитики Цикл
					Для каждого Тип Из ИсточникЗаполненияАналитики.Значение.Типы() Цикл
						Если ОписаниеТиповАналитики.СодержитТип(Тип) Тогда
							УсловноПодходящиеПоля.Добавить(ИсточникЗаполненияАналитики.Ключ);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ОднозначноПодходящееПоле.Количество() <> 0 Тогда
			Если ПроверятьТипЗначенияВВыражении Тогда
				НоваяСтрока.Выражение = ВыражениеЗначенияАналитикиПоИсточникуИТипу(ОднозначноПодходящееПоле[0],
				                                                                   ВидАналитики);
			Иначе
				НоваяСтрока.Выражение = ОднозначноПодходящееПоле[0];
			КонецЕсли;
			НоваяСтрока.Неоднозначно = ОднозначноПодходящееПоле.Количество() > 1;
		ИначеЕсли УсловноПодходящиеПоля.Количество() <> 0 Тогда
			Если ПроверятьТипЗначенияВВыражении Тогда
				НоваяСтрока.Выражение = ВыражениеЗначенияАналитикиПоИсточникуИТипу(УсловноПодходящиеПоля[0],
				                                                                   ВидАналитики);
			Иначе
				НоваяСтрока.Выражение = УсловноПодходящиеПоля[0];
			КонецЕсли;
			НоваяСтрока.Неоднозначно = УсловноПодходящиеПоля.Количество() > 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыраженияЗаполнения; 
	
КонецФункции

Процедура ДополнитьУсловноеОформлениеНастройкамиОтображенияАналитик(УсловноеОформление, ИмяТаблицы) Экспорт
	
	ВидыАналитики = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыАналитики();
	
	ШаблонТекста = НСтр("ru = '<прочие %ВидАналитики>'");
	
	Для каждого ВидАналитики Из ВидыАналитики Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ВидАналитики");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = ВидАналитики.Ссылка;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ЗначениеАналитики");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбораДанных.Использование = Истина;
		
		Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
		Оформление.Использование = Истина;
		Оформление.Значение = СтрЗаменить(ШаблонТекста, "%ВидАналитики", ВидАналитики.Представление);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Использование = Истина;
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ЗначениеАналитики");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьКомпоновщикНастроекПравила(Правило, ПараметрыЗаполненияАналитик, НастройкаКомпоновки) Экспорт
	
	Если Не ЗначениеЗаполнено(Правило.РазделИсточникаДанных) Или Не ЗначениеЗаполнено(Правило.ИсточникДанных) Тогда
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Инициализировать(Неопределено);
		Возврат;
	КонецЕсли;
	
	// Уточним настройки компоновщика, иначе после формирования "старого" бюджета из кэша возвращается модифицированная схема.
	Если Не ЗначениеЗаполнено(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(Правило, Новый Структура("ВычисляемыеПоля"),, Истина);
		УстановитьСвойстваПолейДляНастройкиПравила(СхемаКомпоновкиДанных, Правило);
		
		ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных = 
			ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ПараметрыЗаполненияАналитик.УникальныйИдентификатор);
	КонецЕсли;
	
	Попытка
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных));
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение инициализации компоновщика настроек правила'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если НастройкаКомпоновки = Неопределено Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных);
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек = ИнициализированныйКомпоновщикПоУмолчанию(СхемаКомпоновкиДанных);
	Иначе
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиЗаполненияАналитикиПоПравилу(ПараметрыЗаполненияАналитик, Правило, ВидыАналитик) Экспорт
	
	ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Очистить();
	
	МассивВидовАналитик = Новый Массив;
	Для каждого ВидАналитики Из ВидыАналитик Цикл
		МассивВидовАналитик.Добавить(ВидАналитики.Значение);
	КонецЦикла;
	
	ДополнительныеСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивВидовАналитик, "ДополнительноеСвойство");
	
	Для НомерАналитики = 1 По 6 Цикл
		
		ВидАналитики = ВидыАналитик["ВидАналитики" + НомерАналитики];
		Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНастройки = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Добавить();
		СтрокаНастройки.НомерАналитики               = НомерАналитики;
		СтрокаНастройки.ВидАналитики                 = ВидАналитики;
		СтрокаНастройки.ДополнительноеСвойство       = ДополнительныеСвойства[ВидАналитики];
		СтрокаНастройки.ЗаполнятьУказаннымЗначением  = Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики];
		СтрокаНастройки.ЗначениеАналитики            = Правило["ЗначениеАналитики" + НомерАналитики];
		СтрокаНастройки.ВыражениеЗаполненияАналитики = Правило["ВыражениеЗаполненияАналитики" + НомерАналитики];
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиНастроекЗаполненияАналитики(НастройкиЗаполненияАналитики, Отказ, РежимНастройкиЗаполненияАналитики = Ложь) Экспорт
	
	Если Не РежимНастройкиЗаполненияАналитики Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Настройте заполнение аналитики ""%1""'");
	ШаблонПоля = "НастройкиЗаполненияАналитики[%1].ПредставлениеВыраженияЗаполненияАналитики";
	
	Для каждого СтрокаНастройки Из НастройкиЗаполненияАналитики Цикл
		
		Если СтрокаНастройки.ЗаполнятьУказаннымЗначением Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаНастройки.НетВДоступныхПолях И СтрокаНастройки.ВыражениеЗаполненияАналитики <> "" Тогда
			Продолжить;
		КонецЕсли;
			
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаНастройки.ВидАналитики);
		Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, СтрокаНастройки.ПолучитьИдентификатор());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, , Поле, , Отказ); 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьНастройкиЗаполненияАналитикиВПравило(ПараметрыЗаполненияАналитик, Правило) Экспорт
	
	Для НомерАналитики = 1 По 6 Цикл
		Правило["ЗначениеАналитики" + НомерАналитики]                    = Неопределено;
		Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] = Неопределено;
		Правило["ВыражениеЗаполненияАналитики" + НомерАналитики]         = Неопределено;
	КонецЦикла;
	
	Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
		НомерАналитики = СтрокаНастройки.НомерАналитики;
		Правило["ЗначениеАналитики" + НомерАналитики]                    = СтрокаНастройки.ЗначениеАналитики;
		Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] = СтрокаНастройки.ЗаполнятьУказаннымЗначением;
		Правило["ВыражениеЗаполненияАналитики" + НомерАналитики]         = СтрокаНастройки.ВыражениеЗаполненияАналитики;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, КомпоновщикНастроек, ОчищатьНедоступныеНастройки = Ложь)
	
	Если СтрокаНастройки.ЗаполнятьУказаннымЗначением Тогда
		СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
	КонецЕсли;
	
	Если СтрокаНастройки.ВыражениеЗаполненияАналитики = "" Тогда
		СтрокаНастройки.НетВДоступныхПолях = Ложь;
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = "";
		Возврат;
	КонецЕсли;
	
	СтрокаНастройки.НетВДоступныхПолях = Ложь;
	
	Поле = Новый ПолеКомпоновкиДанных(СтрокаНастройки.ВыражениеЗаполненияАналитики);
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Поле);
	Если ДоступноеПоле = Неопределено Тогда
		Если ОчищатьНедоступныеНастройки Тогда
			СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
		Иначе
			СтрокаНастройки.НетВДоступныхПолях = Истина;
		КонецЕсли;
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = СтрокаНастройки.ВыражениеЗаполненияАналитики;
	Иначе
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = ДоступноеПоле.Заголовок;  
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыражениеЗаполненияАналитикиПослеВыбора(ПараметрыЗаполненияАналитик, ИдентификаторСтроки) Экспорт 
	
	СтрокаНастройки = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных));
	ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, ПараметрыЗаполненияАналитик.КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПроверитьДоступностьПолейЗаполненияАналитики(ПараметрыЗаполненияАналитик, Правило, ОчищатьНедоступныеНастройки = Ложь) Экспорт
	
	Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
		ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, ПараметрыЗаполненияАналитик.КомпоновщикНастроек, ОчищатьНедоступныеНастройки);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНастройкиЗаполненияАналитикиАвтоматически(ПараметрыЗаполненияАналитик, ВыраженияЗаполненияАналитики = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных) Тогда
		
		Если ВыраженияЗаполненияАналитики = Неопределено Тогда
			Если ТипЗнч(ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики) = Тип("ТаблицаЗначений") Тогда
				ВидыАналитик = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Скопировать(, "НомерАналитики, ВидАналитики");
			Иначе
				ВидыАналитик = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Выгрузить(, "НомерАналитики, ВидАналитики");
			КонецЕсли;
			
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных);
			ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик);
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'В источнике есть несколько подходящих вариантов заполнения аналитики ""%1"". Требуется ручной выбор.'");
		ШаблонПоля = "НастройкиЗаполненияАналитики[%1].ПредставлениеВыраженияЗаполненияАналитики";
		КонтекстФормы = Не ТипЗнч(ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики) = Тип("ТаблицаЗначений");
		
		Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
			Отбор = Новый Структура("НомерАналитики, ВидАналитики");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаНастройки);
			РезультатПоиска = ВыраженияЗаполненияАналитики.НайтиСтроки(Отбор)[0];
			
			Если ЗначениеЗаполнено(РезультатПоиска.Выражение) Тогда
				Если РезультатПоиска.Неоднозначно Тогда
					СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
				Иначе
					СтрокаНастройки.ВыражениеЗаполненияАналитики = РезультатПоиска.Выражение;
				КонецЕсли;
				СтрокаНастройки.ЗаполнятьУказаннымЗначением = Ложь;
			Иначе
				СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
				СтрокаНастройки.ЗаполнятьУказаннымЗначением = Истина;
			КонецЕсли;
			
			Если РезультатПоиска.Неоднозначно И КонтекстФормы Тогда
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаНастройки.ВидАналитики);
				Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, СтрокаНастройки.ПолучитьИдентификатор());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, , Поле);
			КонецЕсли;
			
			ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, ПараметрыЗаполненияАналитик.КомпоновщикНастроек);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойстваПолейДляНастройкиПравила(СхемаКомпоновкиДанных, Правило) Экспорт
	
	Если СхемаКомпоновкиДанных = Неопределено
		ИЛИ СхемаКомпоновкиДанных.НаборыДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
		Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		
		ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		
		Счет = Правило.ИсточникДанных;
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных);
		ПолеГруппаСчет = ПоляНабораДанных.Найти("ГруппаСчет");
		Если ПолеГруппаСчет <> Неопределено Тогда
			РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Код, Наименование");
			ПолеГруппаСчет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", РеквизитыСчета.Код, РеквизитыСчета.Наименование); 
		КонецЕсли;
		
		ВидыКорСубконто = Неопределено;
		Если ТипЗнч(Правило.Ссылка) = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов")
			И ЗначениеЗаполнено(Правило.КорСчет) Тогда
			
			ВидыКорСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.КорСчет);
			ПолеГруппаКорСчет = ПоляНабораДанных.Найти("ГруппаКорСчет");
			Если ПолеГруппаКорСчет <> Неопределено Тогда
				РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Правило.КорСчет, "Код, Наименование");
				ПолеГруппаКорСчет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2", РеквизитыСчета.Код, РеквизитыСчета.Наименование); 
			КонецЕсли;
			
			ПолеКорСчет = ПоляНабораДанных.Найти("ГруппаКорСчет.КорСчет");
			Если ПолеКорСчет <> Неопределено Тогда
				ПолеКорСчет.ОграничениеИспользования.Условие = Истина;
				ПолеКорСчет.ОграничениеИспользованияРеквизитов.Условие = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто);
		
	КонецЕсли;
	
	// Скроем служебные из списка полей, доступных для отбора
	СлужебныеПоля = ИсточникиДанныхПовтИсп.СлужебныеПоляМакетовРасчета();
	
	Для каждого ПолеНабора Из СхемаКомпоновкиДанных.НаборыДанных[0].Поля Цикл
		
		Если ТипЗнч(ПолеНабора) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭтоПолеНедоступноеДляЗаполненияАналитики = Не ЗначениеЗаполнено(ПолеНабора.ТипЗначения);
		
		ПолеНабора.ОграничениеИспользования.Поле = ЭтоПолеНедоступноеДляЗаполненияАналитики;
		ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = ЭтоПолеНедоступноеДляЗаполненияАналитики;
		
		Если ПолеНабора.Поле = "Регистратор" Тогда
			
			ПромежуточноеКэширование = Правило.ПромежуточноеКэшированиеРезультатовРаботыПравил;
			
			ПолеНабора.ОграничениеИспользования.Поле = Не ПромежуточноеКэширование;
			ПолеНабора.ОграничениеИспользования.Условие = Не ПромежуточноеКэширование;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = Не ПромежуточноеКэширование;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Условие = Не ПромежуточноеКэширование;
			
		ИначеЕсли Не СлужебныеПоля.Найти(ПолеНабора.Поле) = Неопределено Тогда
			
			ПолеНабора.ОграничениеИспользования.Условие = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаЗарезервированныхПараметров = ИменаОбщихПараметровПравилПолученияФакта();
	Для каждого ПараметрКомпоновки Из СхемаКомпоновкиДанных.Параметры Цикл
		Если Не ИменаЗарезервированныхПараметров.Найти(ПараметрКомпоновки.Имя) = Неопределено Тогда
			ПараметрКомпоновки.ОграничениеИспользования = Истина;
			ПараметрКомпоновки.ВключатьВДоступныеПоля = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто = Неопределено)
	
	ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	Для НомерСубконто = 1 По 3 Цикл
		УстановитьСвойстваПоляСубконто(НомерСубконто, Ложь, ПоляНабораДанных, ВидыСубконто);
		Если ВидыКорСубконто <> Неопределено Тогда
			УстановитьСвойстваПоляСубконто(НомерСубконто, Истина, ПоляНабораДанных, ВидыКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваПоляСубконто(НомерСубконто, КорСубконто, ПоляНабораДанных, ВидыСубконто)
	
	Если КорСубконто Тогда
		ИмяПоля = "КорСубконто" + НомерСубконто;
	Иначе
		ИмяПоля = "Субконто" + НомерСубконто;
	КонецЕсли;
	
	ОграниченияИспользования = Новый Массив;
	ОграниченияИспользования.Добавить("Поле");
	ОграниченияИспользования.Добавить("Условие");
	ОграниченияИспользования.Добавить("Группировка");
	ОграниченияИспользования.Добавить("Порядок");
	
	Для каждого ПолеНабораДанных Из ПоляНабораДанных Цикл
		Если ТипЗнч(ПолеНабораДанных) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ПолеНабораДанных.Поле <> ИмяПоля Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВидСубконто = ВидыСубконто.Найти(НомерСубконто, "НомерСубконто");
		Если СтрокаВидСубконто <> Неопределено Тогда
			ПолеНабораДанных.ТипЗначения = СтрокаВидСубконто.ТипЗначения;
			ПолеНабораДанных.Заголовок = Строка(СтрокаВидСубконто.ВидСубконто);
		Иначе
			Для каждого Ограничение Из ОграниченияИспользования Цикл
				ПолеНабораДанных.ОграничениеИспользования[Ограничение] = Истина;
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов[Ограничение] = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеНастроекЗаполненияАналитики(УсловноеОформление) Экспорт
	
	ДополнитьУсловноеОформлениеНастройкамиОтображенияАналитик(УсловноеОформление, "НастройкиЗаполненияАналитики");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиВыражениеЗаполненияАналитики");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиНетВДоступныхПолях");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗначениеАналитики");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Указанным значением'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗаполнятьУказаннымЗначением");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Из источника данных'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗаполнятьУказаннымЗначением");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОбъектаНастроекЗаполненияАналитики(Объект) Экспорт
	
	ПараметрыЗаполненияАналитик = ШаблонПараметровЗаполненияАналитик();
	ВидыАналитик                = ВидыАналитик(Объект);
	
	Если Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(Объект.СхемаИсточникаДанных.Получить());
	КонецЕсли;
	
	ИнициализироватьКомпоновщикНастроекПравила(Объект, ПараметрыЗаполненияАналитик, Неопределено); 
	ЗаполнитьНастройкиЗаполненияАналитикиПоПравилу(ПараметрыЗаполненияАналитик, Объект, ВидыАналитик);
	ПроверитьДоступностьПолейЗаполненияАналитики(ПараметрыЗаполненияАналитик, Объект);
	УстановитьНастройкиЗаполненияАналитикиАвтоматически(ПараметрыЗаполненияАналитик);
	ПоместитьНастройкиЗаполненияАналитикиВПравило(ПараметрыЗаполненияАналитик, Объект);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыХешейНастроекИСхемы(Объект) Экспорт
	
	// Генерация и проверка уникальности хеша для настроек
	НастройкиКД = Неопределено;
	Если Не Объект.ДополнительныеСвойства.Свойство("НастройкиКД", НастройкиКД) Тогда
		НастройкиКД = Объект.КомпоновщикНастроек.Получить();
	КонецЕсли;
	Объект.ХешНастроек = ХешНастроекСПроверкойУникальности(Объект, НастройкиКД);

	// Генерация и проверка уникальности хеша для произвольной схемы
	Если Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		СхемаКД = Объект.СхемаИсточникаДанных.Получить();
		Объект.ХешСхемыКомпоновкиДанных = ХешНастроекСПроверкойУникальности(Объект, СхемаКД);
	Иначе
		Объект.ХешСхемыКомпоновкиДанных = "";
	КонецЕсли;
	
КонецПроцедуры

Функция ХешНастроекСПроверкойУникальности(Объект, Настройки)
	
	ЭтоПравилоПолученияФактаПоСтатьямБюджетов = Ложь;
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов") Тогда
		ИмяСправочникаИсточника = "ПравилаПолученияФактаПоПоказателямБюджетов";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
		ИмяСправочникаИсточника = "ПравилаПолученияФактаПоСтатьямБюджетов";
		ЭтоПравилоПолученияФактаПоСтатьямБюджетов = Истина;
	КонецЕсли;
	
	ЭтоНастройкиКомпоновкиДанных = ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных");
	Регламентированный = Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет;
	
	// Проверка наличия идентичного хеша у других объектов и его модификация
	ХешПовторяетсяДляРазныхНастроек = Истина;
	
	Пока ХешПовторяетсяДляРазныхНастроек Цикл 
		Если ЭтоНастройкиКомпоновкиДанных Тогда
			// Отбор не хранится, но влияет на уникальность хеша для статей
			// В произвольных правилах источник данных - информационное поле и не задается пользователем.
			Если Не Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
				ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "ИсточникДанных", Объект.ИсточникДанных);
				Если Регламентированный
					Тогда
					Если ЭтоПравилоПолученияФактаПоСтатьямБюджетов Тогда
						ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "ГруппаКорСчет.КорСчет", Объект.КорСчет);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СериализованныеНастройки = ОбщегоНазначения.ЗначениеВСтрокуXML(Настройки);
		ХешНастроек = ОбщегоНазначенияУТ.ХешСуммаСтроки(СериализованныеНастройки, ХешФункция.MD5);
			
		// Получается не из кеша, т.к. далее в коде удаляется поле "Ссылка" в доп. настройках.
		Если ЭтоНастройкиКомпоновкиДанных Тогда
			НастройкиСИдентичнымХешем = ИсточникиДанныхСервер.ПолучитьХранимыеНастройкиСправочника(ИмяСправочникаИсточника, ХешНастроек, Истина);
		Иначе
			НастройкиСИдентичнымХешем = ИсточникиДанныхСервер.ПолучитьХранимыйМакетСправочника(ИмяСправочникаИсточника, ХешНастроек, Истина);
		КонецЕсли;
		
		// Нет записанных объектов с идентичным хешем
		Если НастройкиСИдентичнымХешем = Неопределено Тогда
			ХешПовторяетсяДляРазныхНастроек = Ложь;
		Иначе
			Если ЭтоНастройкиКомпоновкиДанных Тогда
				ДополнительныеСвойства = НастройкиСИдентичнымХешем.ДополнительныеСвойства;
			Иначе
				ДополнительныеСвойства = НастройкиСИдентичнымХешем.НастройкиПоУмолчанию.ДополнительныеСвойства;
			КонецЕсли;
		
			// Найден только текущий объект
			ХешПовторяетсяДляРазныхНастроек = Не Объект.Ссылка = ДополнительныеСвойства.Ссылка;
			
			// При сравнении настроек, свойство ссылки не требуется
			ДополнительныеСвойства.Удалить("Ссылка");
			
			Если ЭтоНастройкиКомпоновкиДанных Тогда
				// Отбор не хранится, но влияет на уникальность хеша для статей
				// В произвольных правилах источник данных - информационное поле и не задается пользователем.
				Если Не Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
					ФинансоваяОтчетностьСервер.НовыйОтбор(НастройкиСИдентичнымХешем.Отбор, "ИсточникДанных", Объект.ИсточникДанных);
					Если Регламентированный
						Тогда
						Если ЭтоПравилоПолученияФактаПоСтатьямБюджетов Тогда
							ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "ГруппаКорСчет.КорСчет", Объект.КорСчет);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		// В базе данных есть объекты с идентичным хешем. Проверим идентичность настроек
		Если ХешПовторяетсяДляРазныхНастроек Тогда
			СериализованныеНастройкиСИдентичнымХешем = ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкиСИдентичнымХешем);
			
			Если СериализованныеНастройки <> СериализованныеНастройкиСИдентичнымХешем Тогда
				МодификаторХеша = Неопределено;
				Если ЭтоНастройкиКомпоновкиДанных Тогда
					ДополнительныеСвойства = Настройки.ДополнительныеСвойства;
				Иначе
					ДополнительныеСвойства = Настройки.НастройкиПоУмолчанию.ДополнительныеСвойства;
				КонецЕсли;
				
				Если Не ДополнительныеСвойства.Свойство("МодификаторХеша", МодификаторХеша) Тогда
					ДополнительныеСвойства.Вставить("МодификаторХеша");
				КонецЕсли;
				
				Если МодификаторХеша = Неопределено Тогда
					МодификаторХеша = 1;
				Иначе
					МодификаторХеша = МодификаторХеша + 1;
				КонецЕсли;
				
				Если МодификаторХеша = 10 Тогда
					ТекстОшибки = НСтр("ru = 'Превышено допустимое количество итераций проверки хеша настроек.
						|Выполнение прервано для предотвращения зацикливания механизма записи объекта.'");
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				ДополнительныеСвойства.МодификаторХеша = МодификаторХеша;
				
				// Обновим хеш настроек с учетом модификатора
				СериализованныеНастройки = ОбщегоНазначения.ЗначениеВСтрокуXML(Настройки);
				ХешНастроек              = ОбщегоНазначенияУТ.ХешСуммаСтроки(СериализованныеНастройки, ХешФункция.MD5);
			Иначе 
				ХешПовторяетсяДляРазныхНастроек = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ХешНастроек;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПоСтатьямИПоказателям

Процедура ПолучитьФактПоИсточникуДанныхОбороты(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОтборПравил,
			"ПромежуточноеКэшированиеРезультатовРаботыПравил",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		СтатьиБюджетов = Новый СписокЗначений;
		СтатьиБюджетов.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "СтатьяБюджетов", СтатьиБюджетов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	СценарийОтчета = Неопределено;
	Если ПараметрыДанных <> Неопределено Тогда
		ПараметрыДанных.Свойство("Сценарий", СценарийОтчета);
	КонецЕсли;
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	
	ПредполагаетсяФакт = ИсточникДанных.ПредполагаетФактическиеДанные = "Предполагается"
	                 ИЛИ (ИсточникДанных.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
	                   И  СценарийОтчетаФактическиеДанные);
	ПредполагаетсяИсполнениеБюджета = ИсточникДанных.ПредполагаетИсполнениеБюджета = "Предполагается"
	                              ИЛИ (ИсточникДанных.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета"
	                                И  СценарийОтчетаИсполнениеБюджета);
	
	СписокТипов = Новый СписокЗначений;
	Если ПредполагаетсяФакт ИЛИ ПредполагаетсяИсполнениеБюджета Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные);
	КонецЕсли;
	Если ПредполагаетсяФакт Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные);
	КонецЕсли;
	Если ПредполагаетсяИсполнениеБюджета Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета);
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "ТипПравила", СписокТипов, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ФактПоСтатьямБюджетов = ФактПоСтатьямБюджетов(ОтборПравил, ПараметрыПоИсточнику, , Ложь);
	
	Для каждого Строка Из ФактПоСтатьямБюджетов Цикл
		НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ИД_Источника = ИсточникДанных.Идентификатор;
		НоваяСтрока.СуммаПриход = Строка.Сумма;
		НоваяСтрока.СуммаВалПриход = Строка.СуммаВВалюте;
		НоваяСтрока.КоличествоПриход = Строка.Количество;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		ПоказателиБюджетов = Новый СписокЗначений;
		ПоказателиБюджетов.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОтборПравил, "ПоказательБюджетов", ПоказателиБюджетов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	СценарийОтчета = Неопределено;
	Если ПараметрыДанных <> Неопределено Тогда
		ПараметрыДанных.Свойство("Сценарий", СценарийОтчета);
	КонецЕсли;
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	
	ПредполагаетсяФакт = ИсточникДанных.ПредполагаетФактическиеДанные = "Предполагается"
	                 ИЛИ (ИсточникДанных.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
	                   И  СценарийОтчетаФактическиеДанные);
	ПредполагаетсяИсполнениеБюджета = ИсточникДанных.ПредполагаетИсполнениеБюджета = "Предполагается"
	                              ИЛИ (ИсточникДанных.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета"
	                                И  СценарийОтчетаИсполнениеБюджета);
	
	СписокТипов = Новый СписокЗначений;
	Если ПредполагаетсяФакт ИЛИ ПредполагаетсяИсполнениеБюджета Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные);
	КонецЕсли;
	Если ПредполагаетсяФакт Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные);
	КонецЕсли;
	Если ПредполагаетсяИсполнениеБюджета Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета);
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "ТипПравила", СписокТипов, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ФактПоПоказателямБюджетов = ФактПоПоказателямБюджетов(ОтборПравил, ПараметрыПоИсточнику);
	
	Сценарии = СценарииСУчетомОтбора(ПараметрыПоИсточнику.ДополнительныйОтбор);
	Если Сценарии.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определены сценарии источника данных'")
	КонецЕсли;
	
	СтрокиИсполнения = ФактПоПоказателямБюджетов.НайтиСтроки(Новый Структура("Сценарий", Справочники.Сценарии.ИсполнениеБюджета));
	СтрокиФактическихДанных = ФактПоПоказателямБюджетов.НайтиСтроки(Новый Структура("Сценарий", Справочники.Сценарии.ФактическиеДанные));
	
	Для каждого СтрокаСценарии Из Сценарии Цикл
		Если СтрокаСценарии.Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
			ТаблицаДобавления = СтрокиИсполнения;
		Иначе
			ТаблицаДобавления = СтрокиФактическихДанных;
		КонецЕсли;
		Для каждого СтрокаФакт Из ТаблицаДобавления Цикл
			НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФакт);
			НоваяСтрока.Сценарий     = СтрокаСценарии.Сценарий;
			НоваяСтрока.ИД_Источника = ИсточникДанных.Идентификатор;
			
			Если ЗначениеЗаполнено(НоваяСтрока.СтатьяБюджетов) Тогда //целевой показатель
				НоваяСтрока.СуммаПриход      = СтрокаФакт.Сумма;
				НоваяСтрока.СуммаВалПриход   = СтрокаФакт.СуммаВВалюте;
				НоваяСтрока.КоличествоПриход = СтрокаФакт.Количество;
			Иначе
				НоваяСтрока.СуммаНачальныйОстаток      = СтрокаФакт.Сумма;
				НоваяСтрока.СуммаВалНачальныйОстаток   = СтрокаФакт.СуммаВВалюте;
				НоваяСтрока.КоличествоНачальныйОстаток = СтрокаФакт.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Сценарии.Найти(Справочники.Сценарии.ФактическиеДанные) <> Неопределено
		ИЛИ Сценарии.Найти(Справочники.Сценарии.ИсполнениеБюджета) <> Неопределено Тогда
		ФактПоСтатьямБюджетов = ФактПоСтатьямВлияющимНаПоказателиБюджетов(ОтборПравил, ПараметрыПоИсточнику, Ложь);
		Для каждого СтрокаФакт Из ФактПоСтатьямБюджетов Цикл
			НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФакт);
			НоваяСтрока.ИД_Источника = ИсточникДанных.Идентификатор;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗначенияПоИсточникуДанныхНефинансовый(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		НефинансовыеПоказатели = Новый СписокЗначений;
		НефинансовыеПоказатели.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОтборПравил, 
			"НефинансовыйПоказатель", 
			НефинансовыеПоказатели, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	ЗначенияНефинансовыхПоказателей = ЗначенияНефинансовыхПоказателей(ОтборПравил, ПараметрыПоИсточнику);
	
	КопияТаблицаДанныхПоВидуБюджета = ТаблицаДанныхПоВидуБюджета.СкопироватьКолонки();
	ПеренестиЗначенияНФПВОбщуюТаблицу(ЗначенияНефинансовыхПоказателей, ИсточникДанных, Параметры, ПараметрыПоИсточнику, КопияТаблицаДанныхПоВидуБюджета);
	
	// Пересчитаем получившуюся таблицу данных в нужную валюту
	ПересчитатьТаблицуДанныхВВалюту(КопияТаблицаДанныхПоВидуБюджета, Параметры, Истина);
	
	Для каждого Строка Из КопияТаблицаДанныхПоВидуБюджета Цикл
		НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиЗначенияНФПВОбщуюТаблицу(Знач ЗначенияНефинансовыхПоказателей, Знач ИсточникДанных, Знач Параметры, Знач ПараметрыПоИсточнику, Знач ТаблицаДанныхПоВидуБюджета)
	
	Перем ЗначенияКолонокПоУмолчанию, Строка;
	
	// Модифицируем структуру временной таблицы значений и перенесем в общую
	// Пересчет данных здесь производиться не будет.
	ЗначенияКолонокПоУмолчанию = Новый Структура;
	ЗначенияКолонокПоУмолчанию.Вставить("ИД_Источника", ИсточникДанных.Идентификатор);
	ЗначенияКолонокПоУмолчанию.Вставить("Валюта", ПараметрыПоИсточнику.ВалютаОтчета);
	
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаНачальныйОстаток", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаПриход", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаРасход", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаВалНачальныйОстаток", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаВалПриход", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаВалРасход", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("КоличествоНачальныйОстаток", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("КоличествоПриход", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("КоличествоРасход", 0);
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		ЗначенияНефинансовыхПоказателей.Колонки.Период.Имя = "ПериодЗамененный";
		ЗначенияНефинансовыхПоказателей.Колонки.ПериодУстановки.Имя = "Период";
	КонецЕсли;
	
	ЗначенияНефинансовыхПоказателей.Колонки.Валюта.Имя = "ВалютаХранения";
	
	ЗначенияНефинансовыхПоказателей.Колонки.Добавить("ПериодКурса");
	ОбщегоНазначенияУТКлиентСервер.СкопироватьЗначенияИзКолонкиВКолонку(ЗначенияНефинансовыхПоказателей, "Период", "ПериодКурса"); 
	
	ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(ЗначенияНефинансовыхПоказателей, ТаблицаДанныхПоВидуБюджета, ЗначенияКолонокПоУмолчанию);
	
	Для каждого Строка Из ТаблицаДанныхПоВидуБюджета Цикл
		Строка.ИндексНФП = ТаблицаДанныхПоВидуБюджета.Индекс(Строка);
		
		// Уточним данные для будущего пересчета по курсам валют
		Если НЕ Строка.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Денежный Тогда
			Строка.ВалютаХранения = Неопределено;
			Строка.Валюта = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
	
	ПараметрыПоИсточнику.Вставить("ВыражениеНачалоПериода",      ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеНачалоПериода));
	ПараметрыПоИсточнику.Вставить("ВыражениеКонецПериода",       ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеКонецПериода));
	ПараметрыПоИсточнику.Вставить("ВыражениеПериодаГруппировки", ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеПериодаГруппировки));
	ПараметрыПоИсточнику.Вставить("ГраницаФактДанных",           ПараметрыДанных.ГраницаФактДанных);
	
	ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
	ФинансоваяОтчетностьСервер.СкопироватьОтбор(ИсточникДанных.ДополнительныйОтбор.Отбор,
	                                            ДополнительныйОтбор.Отбор);
	Если ДополнительныйОтбор <> Неопределено И ПараметрыДанных <> Неопределено Тогда
		БюджетнаяОтчетностьВыводСервер.ДополнитьНастройкиСКДПередВыводом(ДополнительныйОтбор, ПараметрыДанных);
	КонецЕсли;
	ПараметрыПоИсточнику.ДополнительныйОтбор = ДополнительныйОтбор;
	
	Возврат ПараметрыПоИсточнику;
	
КонецФункции

Функция ПараметрыПолученияФактаПоВидуБюджета(ВалютаОтчета, Период, Периодичность, ВидыАналитик, ПоОрганизациям, ПоПодразделениям, РежимПолученияДанных)
	
	Параметры = ШаблонПараметровПолученияФакта();
	
	Параметры.ВалютаОтчета = ВалютаОтчета;
	Параметры.ВозвращатьСуммуВВалюте = Истина;
	Параметры.Период = Период; 
	Параметры.Периодичность = Периодичность;
	Если ВидыАналитик <> Неопределено Тогда
		Параметры.Вставить("ВидыАналитик", ВидыАналитик);
	КонецЕсли;
	Параметры.ПоОрганизациям = ПоОрганизациям;
	Параметры.ПоПодразделениям = ПоПодразделениям;
	Параметры.ОстаткиТолькоНаНачалоПериода = Истина;
	Параметры.РежимПолученияДанных = РежимПолученияДанных;
	
	// В бюджетных отчетах (экземплярах бюджетов) весь хранимый факт получается отдельно (кэшируемые СКД),
	// для лимитов хранимый факт также не используется (т.к. правила с типом исполнение бюджета не поддерживают хранимый факт).
	Параметры.ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом = Ложь;
	
	Возврат Параметры;
	
КонецФункции

Функция ШаблонТаблицыФактаПоПоказателямБюджетов(Параметры) Экспорт
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	ТаблицаФакта.Колонки.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	Если Параметры.ПоПравиламПолученияДанных Тогда
		ТаблицаФакта.Колонки.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования"));
		
		ОписаниеТиповИсточникДанных = Новый ОписаниеТипов(
				"ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов, 
				|ПланСчетовСсылка.Хозрасчетный,
				|Строка");
		ТаблицаФакта.Колонки.Добавить("ИсточникДанных", ОписаниеТиповИсточникДанных);
		
		ТаблицаФакта.Колонки.Добавить("ТипИтога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИтогов"));
		ТаблицаФакта.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Строка"));
		
		ТаблицаФакта.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов"));
		
	КонецЕсли;
	
	ОписаниеТиповДата =  Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Если Параметры.Периодичность <> Неопределено Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПериодичностьСекунда")
	   И Параметры.ЕстьПериодичностьСекунда Тогда
		ТаблицаФакта.Колонки.Добавить("ПериодСекунда",
			Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КонецЕсли;
	
	Если Параметры.ПоРегистратору Тогда
		ТаблицаФакта.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	КонецЕсли;
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ОписаниеТиповАналитики = ВсеТипыАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаФакта.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
		ТаблицаФакта.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		Если Параметры.ВозвращатьСуммуВВалюте Тогда
			ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			ТаблицаФакта.Колонки.Добавить("СуммаВВалюте", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаФакта;
	
КонецФункции

Функция ШаблонТаблицыЗначенийНефинансовыхПоказателей(Параметры) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаЗначений.Колонки.Добавить("ВидПоказателя", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНефинансовыхПоказателей"));
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаЗначений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаЗначений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	ОписаниеТиповАналитики = ВсеТипыАналитик();
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТаблицаЗначений.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики); 
		ТаблицаЗначений.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	ТаблицаЗначений.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ТаблицаЗначений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	
	ТаблицаЗначений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаЗначений.Колонки.Добавить("ПериодУстановки", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаЗначений.Колонки.Добавить("НомерПодпериода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	
	ТаблицаЗначений.Колонки.Добавить("ЗначениеПоказателя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,6)));
	
	Возврат ТаблицаЗначений;
	
КонецФункции


Процедура ФактСтатьиБюджетовПоПравилу(Правило, Параметры, ТаблицаФакта, ДополнятьСценарийИсполнения = Истина) Экспорт
	
	СхемаКомпоновкиДанных = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(Правило, ОчищаемыеКоллекцииПриПолученииФакта(), Параметры.РежимПолученияДанных, Истина);
	
	НеКопируемыеПараметры = ИменаОбщихПараметровПравилПолученияФакта();
	Для каждого ПараметрКомпоновки Из СхемаКомпоновкиДанных.Параметры Цикл
		Если НЕ НеКопируемыеПараметры.Найти(ПараметрКомпоновки.Имя) = Неопределено Тогда
			ПараметрКомпоновки.Значение = Неопределено;
		ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
			// Пользовательские параметры использовать всегда, даже если в СКД стоит использование Авто.
			ПараметрКомпоновки.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированныйИлиМеждународныйУчет = Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет
		ИЛИ Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет;
		
	Если РегламентированныйИлиМеждународныйУчет Тогда
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных);
		ВидыКорСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.КорСчет);
		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто); 
	КонецЕсли;
	
	НастройкиОтбора = Правило.КомпоновщикНастроек.Получить();
	Настройки = ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных);
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры);
	
	НаборДанныхСценарии = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"),
		"НаборСценарии");
	НаборДанныхСценарии.Запрос =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные) КАК ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета) КАК ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные) КАК
	|		ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные) КАК
	|		ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета) КАК Сценарий";
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(
		НаборДанныхСценарии,
		"ТипПравила",
		"ТипПравила",
		НСтр("ru = 'Тип правила'"),
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипПравилаПолученияФактическихДанныхБюджетирования"));
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(
		НаборДанныхСценарии,
		"Сценарий",
		"Сценарий",
		НСтр("ru = 'Сценарий'"),
		Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	Если Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные Тогда
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные)";
	ИначеЕсли Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета Тогда
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета)";
	Иначе
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные)";
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НоваяСвязьНаборов(
		СхемаКомпоновкиДанных,
		НаборДанных.Имя,
		НаборДанныхСценарии.Имя,
		ВыражениеТипаПравила,
		"ТипПравила");
	
	ДобавитьПолеГруппировки(Настройки, "Сценарий");
	
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ДобавитьПолеСуммыПоСтатьеБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило);
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "НачалоПериода",  Параметры.Период.ДатаНачала);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "КонецПериода",   Параметры.Период.ДатаОкончания);
	Если Правило.РазделИсточникаДанных <> Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ИсточникДанных", Правило.ИсточникДанных);
	КонецЕсли;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ХозяйственнаяОперация", Правило.ХозяйственнаяОперация);
	КонецЕсли;
	
	Если РегламентированныйИлиМеждународныйУчет И ЗначениеЗаполнено(Правило.КорСчет) Тогда
		ПараметрКорСчет = СхемаКомпоновкиДанных.Параметры.Найти("КорСчет");
		ПараметрКорСчет.Значение = Правило.КорСчет;
		ПараметрКорСчет.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
		СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	
	Если Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		ПараметрНачалоПериода = СхемаКомпоновкиДанных.Параметры.Найти("НачалоПериода");
		Если ПараметрНачалоПериода = Неопределено Тогда
			ПараметрНачалоПериода = СхемаКомпоновкиДанных.Параметры.Добавить();
			ПараметрНачалоПериода.Имя = "НачалоПериода";
			ПараметрНачалоПериода.ТипЗначения = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		КонецЕсли;
		ПараметрНачалоПериода.Выражение = Параметры.ВыражениеНачалоПериода;
	КонецЕсли;
	Если Параметры.Свойство("ВыражениеКонецПериода") Тогда
		ПараметрКонецПериода = СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
		Если ПараметрКонецПериода = Неопределено Тогда
			ПараметрКонецПериода = СхемаКомпоновкиДанных.Параметры.Добавить();
			ПараметрКонецПериода.Имя = "КонецПериода";
			ПараметрКонецПериода.ТипЗначения = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		КонецЕсли;
		ПараметрКонецПериода.Выражение = Параметры.ВыражениеКонецПериода;
	КонецЕсли;
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	
	ПараметрОборотПоАналитикеРасхода = СхемаКомпоновкиДанных.Параметры.Найти("ОборотПоАналитикеРасхода");
	Если ПараметрОборотПоАналитикеРасхода <> Неопределено Тогда
		ПараметрОборотПоАналитикеРасхода.Значение = Правило.ОборотПоАналитикеРасхода;
		ПараметрОборотПоАналитикеРасхода.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОборотПоАналитикеРасхода", Правило.ОборотПоАналитикеРасхода);
	КонецЕсли;
	
	Если Параметры.Периодичность <> Неопределено Тогда
		
		ИмяПоляПериод = "Период" + Параметры.Периодичность;
		ЕстьПолеНеобходимойПериодичности = (НаборДанных.Поля.Найти(ИмяПоляПериод) <> Неопределено);
		ЕстьПолеПериод = (НаборДанных.Поля.Найти("Период") <> Неопределено);
		Если ЕстьПолеНеобходимойПериодичности Тогда
			ВыражениеПериод = ИмяПоляПериод;
		ИначеЕсли ЕстьПолеПериод Тогда
			ВыражениеПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"НАЧАЛОПЕРИОДА(Период, ""%1"")", 
				Параметры.Периодичность); 
		Иначе
			ВызватьИсключение НСтр("ru = 'В схема источника данных отсутствует поле периода.
										|Получение данных в разрезе периода невозможно.'");
		КонецЕсли;
		
		Если Параметры.Свойство("ВыражениеПериодаГруппировки") Тогда
			ВыражениеПериод = СтрЗаменить(Параметры.ВыражениеПериодаГруппировки, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеПериод);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Период", ВыражениеПериод);
		ДобавитьПолеГруппировки(Настройки, "Период");
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПериодичностьСекунда")
	   И Параметры.ЕстьПериодичностьСекунда Тогда
		ИмяПоляПериод = "ПериодСекунда";
		ЕстьПолеНеобходимойПериодичности = (НаборДанных.Поля.Найти(ИмяПоляПериод) <> Неопределено);
		ЕстьПолеПериод = (НаборДанных.Поля.Найти("Период") <> Неопределено);
		Если ЕстьПолеНеобходимойПериодичности Тогда
			ВыражениеПериод = ИмяПоляПериод;
		ИначеЕсли ЕстьПолеПериод Тогда
			ВыражениеПериод = "Период";
		Иначе
			ВызватьИсключение НСтр("ru = 'В схема источника данных отсутствует поле периода.
									|Получение данных в разрезе периода невозможно.'");
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодСекунда", ВыражениеПериод);
		ДобавитьПолеГруппировки(Настройки, "ПериодСекунда");
	КонецЕсли;
	
	Если Параметры.ПоРегистратору Тогда
		ЕстьПолеРегистратор = (НаборДанных.Поля.Найти("Регистратор") <> Неопределено);
		Если Не ЕстьПолеРегистратор Тогда
			ВызватьИсключение НСтр("ru = 'В схема источника данных отсутствует поле регистратор. 
										|Получение данных в разрезе регистратора невозможно.'");
		КонецЕсли;
		
		ДобавитьПолеГруппировки(Настройки, "Регистратор");
		
	КонецЕсли;
	
	ДобавитьВыраженияПолейОтборов(СхемаКомпоновкиДанных, Настройки);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	УстановитьОтборНаЗначениеПоказателей(Настройки, Параметры);
	
	РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
		НоваяСтрока = ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, СтрокаРезультат, Правило);
		Если Параметры.Показатели.Свойство("Сумма") Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма * Правило.Коэффициент;
			Если Параметры.ВозвращатьСуммуВВалюте Тогда
				НоваяСтрока.СуммаВВалюте = НоваяСтрока.СуммаВВалюте * Правило.Коэффициент;
			КонецЕсли;
			Если Параметры.ВозвращатьУпрИРеглСуммы Тогда
				НоваяСтрока.СуммаУпр = НоваяСтрока.СуммаУпр * Правило.Коэффициент;
				НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаРегл * Правило.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		Если Параметры.Показатели.Свойство("Количество") Тогда
			НоваяСтрока.Количество = НоваяСтрока.Количество * Правило.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ФактПоказателяБюджетовПоПравилу(Правило, Параметры, ТаблицаФакта, Знач ПереопределеннаяСКД = Неопределено) Экспорт
	
	Если ПереопределеннаяСКД = Неопределено Тогда
		СхемаКомпоновкиДанных = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(Правило, ОчищаемыеКоллекцииПриПолученииФакта(), Параметры.РежимПолученияДанных, Истина);
		
		НеКопируемыеПараметры = ИменаОбщихПараметровПравилПолученияФакта();
		Для каждого ПараметрКомпоновки Из СхемаКомпоновкиДанных.Параметры Цикл
			Если НЕ НеКопируемыеПараметры.Найти(ПараметрКомпоновки.Имя) = Неопределено Тогда
				ПараметрКомпоновки.Значение = Неопределено;
			ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
				// Пользовательские параметры использовать всегда, даже если в СКД стоит использование Авто.
				ПараметрКомпоновки.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СхемаКомпоновкиДанных = ПереопределеннаяСКД;
	КонецЕсли;
	
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет
		 Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных); 
		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто); 
	КонецЕсли;

	ДобавитьПараметр(СхемаКомпоновкиДанных, "Период");
	ДобавитьПараметр(СхемаКомпоновкиДанных, "ПериодГраница");
	ДобавитьПараметр(СхемаКомпоновкиДанных, "ПериодКурса");
	ДобавитьПараметр(СхемаКомпоновкиДанных, "НачалоПериода");
	
	НастройкиОтбора = Правило.КомпоновщикНастроек.Получить();
	Настройки = ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных);
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры);
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ДобавитьПолеСуммыПоПоказателюБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило);
	КонецЕсли;
	
	// Инициализируем параметр, чтобы он появился в макете компоновки данных
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "СтатьяАктивовПассивов", Правило.ИсточникДанных);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ИсточникДанных", Правило.ИсточникДанных);
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	Если Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	ИспользоватьДатуНачала = Параметры.ОстаткиТолькоНаНачалоПериода И 
								Не Правило.ТипПоказателя = Перечисления.ТипПоказателяБюджетов.Целевой;
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		ПараметрПериод = СхемаКомпоновкиДанных.Параметры.Найти("Период");
		ПараметрПериод.Выражение = СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&НАЧАЛОПЕРИОДА", "&ПЕРИОД");
		
		ПараметрПериод = СхемаКомпоновкиДанных.Параметры.Найти("ПериодГраница");
		Если ИспользоватьДатуНачала Тогда
			ПараметрПериод.Выражение = СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&НАЧАЛОПЕРИОДА", "&ПЕРИОД");
		Иначе
			ПараметрПериод.Выражение = "КомпоновкаДанныхСервер.ГраницаПериода(" + СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&НАЧАЛОПЕРИОДА", "&ПЕРИОД") + ", ""Включая"")";
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		
		ВыражениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"НАЧАЛОПЕРИОДА(&ПериодКурса, ""%1"")", Параметры.Периодичность);
								
		Если Правило.ТипПоказателя = Перечисления.ТипПоказателяБюджетов.Расчетный Тогда
			ВыражениеСоединения = ВыражениеПериода;
		Иначе
			ВыражениеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									"КОНЕЦПЕРИОДА(&ПериодКурса, ""%1"")", Параметры.Периодичность);
		КонецЕсли;
		
		Если Параметры.Свойство("ВыражениеПериодаГруппировки") Тогда
			ВыражениеПериода = СтрЗаменить(Параметры.ВыражениеПериодаГруппировки, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеСоединения);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Период", ВыражениеПериода);
		ДобавитьПолеГруппировки(Настройки, "Период");
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПериодичностьСекунда")
	   И Параметры.ЕстьПериодичностьСекунда Тогда
		ВыражениеПериода = "&ПериодКурса";
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодСекунда", ВыражениеПериода);
		ДобавитьПолеГруппировки(Настройки, "ПериодСекунда");
	КонецЕсли;
	
	НаборДанныхСценарии = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"),
		"НаборСценарии");
	НаборДанныхСценарии.Запрос =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные) КАК ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета) КАК ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные) КАК
	|		ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные) КАК
	|		ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета) КАК Сценарий";
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(
		НаборДанныхСценарии,
		"ТипПравила",
		"ТипПравила",
		НСтр("ru = 'Тип правила'"),
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипПравилаПолученияФактическихДанныхБюджетирования"));
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(
		НаборДанныхСценарии,
		"Сценарий",
		"Сценарий",
		НСтр("ru = 'Сценарий'"),
		Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	Если Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные Тогда
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные)";
	ИначеЕсли Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета Тогда
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета)";
	Иначе
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные)";
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НоваяСвязьНаборов(
		СхемаКомпоновкиДанных,
		НаборДанных.Имя,
		НаборДанныхСценарии.Имя,
		ВыражениеТипаПравила,
		"ТипПравила");
	ДобавитьПолеГруппировки(Настройки, "Сценарий");
	
	ДобавитьВыраженияПолейОтборов(СхемаКомпоновкиДанных, Настройки);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	УстановитьОтборНаЗначениеПоказателей(Настройки, Параметры);
	
	Для каждого СтрокаПериод Из Параметры.ТаблицаПериодов Цикл
		Период = ?(ИспользоватьДатуНачала, СтрокаПериод.ДатаНачала, СтрокаПериод.ДатаОкончания);
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "Период", Период, Истина);
		
		ПериодГраница = ?(ИспользоватьДатуНачала, СтрокаПериод.ДатаНачала, Новый Граница(Период, ВидГраницы.Включая));
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "ПериодГраница", ПериодГраница, Истина);
		
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "ПериодКурса", Период, Истина);
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "НачалоПериода", Параметры.Период.ДатаНачала, Истина);
		
		РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
		Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
			НоваяСтрока = ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, СтрокаРезультат, Правило);
			Если Параметры.Показатели.Свойство("Сумма") Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Сумма * Правило.Коэффициент;
				Если Параметры.ВозвращатьСуммуВВалюте Тогда
					НоваяСтрока.СуммаВВалюте = НоваяСтрока.СуммаВВалюте * Правило.Коэффициент;
				КонецЕсли;
			КонецЕсли;
			Если Параметры.Показатели.Свойство("Количество") Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество * Правило.Коэффициент;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗначенияНефинансовогоПоказателяПоПравилу(Правило, Параметры, ТаблицаЗначений) Экспорт
	
	СхемаКомпоновкиДанных = Правило.СхемаПолученияДанных;
	ШаблонВводаНФП = Неопределено;
	Параметры.Свойство("ШаблонВводаНФП", ШаблонВводаНФП);
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ШаблонВводаНФП) Тогда
			ШаблонСообщения = НСтр("ru = 'Не определена схема компоновки данных для нефинансового показателя ""%1""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Правило.НефинансовыйПоказатель);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Не определена схема компоновки данных в шаблоне ввода нефинансовых показателей ""%1"" для нефинансового показателя ""%2""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ШаблонВводаНФП, Правило.НефинансовыйПоказатель);
		КонецЕсли;
		ВызватьИсключение ШаблонСообщения;
	КонецЕсли;
	
	Если Не СхемаКомпоновкиДанных.НаборыДанных.Количество() Тогда
		Если НЕ ЗначениеЗаполнено(ШаблонВводаНФП) Тогда
			ШаблонСообщения = НСтр("ru = 'Отсутствует набор данных в схеме заполнения для нефинансового показателя ""%1""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Правило.НефинансовыйПоказатель);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Отсутствует набор данных в схеме заполнения шаблона ввода нефинансовых показателей ""%1"" для нефинансового показателя ""%2""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ШаблонВводаНФП, Правило.НефинансовыйПоказатель);
		КонецЕсли;
		ВызватьИсключение ШаблонСообщения;
	КонецЕсли;
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	Если ПоляНабора.Найти("ЗначениеПоказателя") = Неопределено Тогда
		ИмяПоляНаЯзыкеКода = "ЗначениеПоказателя";
		Если НЕ ЗначениеЗаполнено(ШаблонВводаНФП) Тогда
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных нефинансового показателя ""%1"" отсутствует поле с именем ""%2""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		Иначе
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных шаблона ввода нефинансовых показателей ""%1"" для нефинансового показателя ""%2"" отсутствует поле с именем ""%3""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ШаблонВводаНФП,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		КонецЕсли;
		ВызватьИсключение ШаблонСообщения;
	КонецЕсли;
	
	Если ПоляНабора.Найти("Период") = Неопределено Тогда
		ИмяПоляНаЯзыкеКода = "Период";
		Если НЕ ЗначениеЗаполнено(ШаблонВводаНФП) Тогда
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных нефинансового показателя ""%1"" отсутствует поле с именем ""%2""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		Иначе
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных шаблона ввода нефинансовых показатей ""%1"" для нефинансового показателя ""%2"" отсутствует поле с именем ""%3""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ШаблонВводаНФП,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		КонецЕсли;
		ВызватьИсключение ШаблонСообщения;
	КонецЕсли;
	
	Если Правило.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных" И ПоляНабора.Найти("Валюта") = Неопределено Тогда
		ИмяПоляНаЯзыкеКода = "Валюта";
		Если НЕ ЗначениеЗаполнено(ШаблонВводаНФП) Тогда
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных нефинансового показателя ""%1"" отсутствует поле с именем ""%2""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		Иначе
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных шаблона ввода нефинансовых показателей ""%1"" для нефинансового показателя ""%2"" отсутствует поле с именем ""%3""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ШаблонВводаНФП,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		КонецЕсли;
		ВызватьИсключение ШаблонСообщения;
	КонецЕсли;
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	Если Правило.НастройкиСхемыПолученияДанных <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьНастройкиКомпоновкиДанных(Настройки, Правило.НастройкиСхемыПолученияДанных); 
	КонецЕсли;
	
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	ДобавитьПолеГруппировки(Настройки, "ЗначениеПоказателя");
	
	Если Правило.ПоОрганизациям 
		И ПоляНабора.Найти("Организация") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Организация");
	КонецЕсли;
	
	Если Правило.ПоПодразделениям 
		И ПоляНабора.Найти("Подразделение") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Подразделение");
	КонецЕсли;
	
	ДобавитьПараметр(СхемаКомпоновкиДанных, "Период");
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	ДобавитьПолеГруппировки(Настройки, "Период");
	
	Если Параметры.Свойство("ДополнительныйОтбор") И Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	Если Не Правило.ПоСценариям Тогда
		ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Настройки.Отбор, "Сценарий");
		Если ЭлементОтбора <> Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Правило.ПоПериодам И ПоляНабора.Найти("НомерПодпериода") <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, 
			"ПериодУстановки",
			"БюджетированиеКлиентСервер.ДобавитьИнтервал(
			|	НАЧАЛОПЕРИОДА(Период, """ + Строка(Правило.Периодичность) + """),
			|	&ПериодичностьПодпериодов,
			|	ВЫБОР КОГДА ЗначениеЗаполнено(НомерПодпериода) ТОГДА НомерПодпериода - 1 ИНАЧЕ 0 КОНЕЦ, 
			|	&Кэш)");
		ДобавитьПараметр(СхемаКомпоновкиДанных, "Кэш", Новый Соответствие);
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ПериодичностьПодпериодов", Правило.ПериодичностьПодпериодов);
	Иначе
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, 
			"ПериодУстановки", 
			"ПериодУстановки");
	КонецЕсли;
	ДобавитьПолеГруппировки(Настройки, "ПериодУстановки");
	
	Если ПоляНабора.Найти("Регистратор") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Регистратор");
	КонецЕсли;
	
	Если Правило.ПоСценариям Тогда
		Если ПоляНабора.Найти("Сценарий") = Неопределено Тогда
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "&ФактическиеДанные");
			ДобавитьПараметр(СхемаКомпоновкиДанных, "ФактическиеДанные", Справочники.Сценарии.ФактическиеДанные);
		КонецЕсли;
		ДобавитьПолеГруппировки(Настройки, "Сценарий");
	КонецЕсли;
	
	Если Правило.ПоПериодам И ПоляНабора.Найти("НомерПодпериода") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "НомерПодпериода");
	КонецЕсли;
	
	Если Правило.ПоПериодам И ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "КонецПериодаГруппировки",
			"КонецПериода(Период, """ + Строка(Параметры.Периодичность) + """)");
		ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Структура[0].Отбор, "ПериодУстановки", Новый ПолеКомпоновкиДанных("Период"), ,ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Структура[0].Отбор, "ПериодУстановки", Новый ПолеКомпоновкиДанных("КонецПериодаГруппировки"), ,ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ДобавитьПолеГруппировки(Настройки, "КонецПериодаГруппировки");
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	
	ВнешниеНаборы = ДобавитьНаборПериодовНефинансовогоПоказателя(СхемаКомпоновкиДанных, Параметры, Правило);
	
	ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "ЗначениеПоказателя", , , ВидСравненияКомпоновкиДанных.Заполнено);
	
	РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
	
	Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
		НоваяСтрока = ДобавитьСтрокуВТаблицуДанных(ТаблицаЗначений, СтрокаРезультат, Правило);
	КонецЦикла;
	
КонецПроцедуры

Функция ПравилоПолученияЗначенийНефинансовогоПоказателя(РеквизитыПоказателя, СхемаПолученияДанных, НастройкиСхемыПолученияДанных = Неопределено) Экспорт
	
	Правило = Новый Структура();
	Правило.Вставить("НефинансовыйПоказатель");
	Правило.Вставить("ПоОрганизациям");
	Правило.Вставить("ПоПодразделениям");
	Правило.Вставить("ПоСценариям");
	Правило.Вставить("ПоПериодам");
	Правило.Вставить("УстанавливатьЗначениеНаКаждыйПериод");
	Правило.Вставить("Периодичность");
	Правило.Вставить("ПериодичностьПодпериодов");
	Правило.Вставить("КоличествоИспользуемыхАналитик");
	
	Правило.Вставить("РасширенныйРежимНастройкиЗаполненияАналитики");
	Для НомерАналитики = 1 По 6 Цикл
		Правило.Вставить("ВидАналитики" + НомерАналитики);
		Правило.Вставить("ВыражениеЗаполненияАналитики" + НомерАналитики);
		Правило.Вставить("ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики);
		Правило.Вставить("ЗначениеАналитики" + НомерАналитики);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Правило, РеквизитыПоказателя);
	
	Правило.Вставить("РазделИсточникаДанных", Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные);
	Правило.Вставить("СхемаПолученияДанных", СхемаПолученияДанных);
	Правило.Вставить("НастройкиСхемыПолученияДанных", НастройкиСхемыПолученияДанных);
	
	Правило.Вставить("ВидПоказателя", РеквизитыПоказателя.ВидПоказателя);
	
	ДенежныйПоказатель = (РеквизитыПоказателя.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Денежный);
	Если Не ДенежныйПоказатель Тогда
		Правило.Вставить("ЗаполнениеВалюты", "НеЗаполнять");
	ИначеЕсли РеквизитыПоказателя.ВалютаОпределяетсяАналитикой Тогда
		Правило.Вставить("ЗаполнениеВалюты", "ОпределяетсяПоАналитике");
		Правило.Вставить("АдресАналитикиВалюта", РеквизитыПоказателя.АдресАналитикиВалюта);
		Правило.Вставить("ПолеВалютыАналитики", РеквизитыПоказателя.ПолеВалютыАналитики);
	Иначе 
		Правило.Вставить("ЗаполнениеВалюты", "ОпределяетсяПоИсточникуДанных");
	КонецЕсли;
	
	КоличественныйПоказатель = (РеквизитыПоказателя.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Количественный);
	Если Не КоличественныйПоказатель Тогда
		Правило.Вставить("ЗаполнениеЕдиницыИзмерения", "НеЗаполнять");
	ИначеЕсли РеквизитыПоказателя.ЕдиницаИзмеренияОпределяетсяАналитикой Тогда
		Правило.Вставить("ЗаполнениеЕдиницыИзмерения", "ОпределяетсяПоАналитике");
		Правило.Вставить("АдресАналитикиЕдиницаИзмерения", РеквизитыПоказателя.АдресАналитикиКоличество);
		Правило.Вставить("ПолеЕдиницыИзмеренияАналитики", РеквизитыПоказателя.ПолеЕдиницыИзмеренияАналитики);
	Иначе
		Правило.Вставить("ЗаполнениеЕдиницыИзмерения", "ФиксированноеЗначение");
		Правило.Вставить("ЕдиницаИзмерения", РеквизитыПоказателя.ЕдиницаИзмерения);
	КонецЕсли;
	
	Возврат Правило;
	
КонецФункции

// Возвращает шаблон параметра ПоляРесурсов для метода ПересчитатьТаблицуДанныхВВалюту
//
// Возвращаемое значение:
// 	Структура - шаблон полей ресурсов
//
Функция ШаблонПолейРесурсовДляПересчетаДанныхВВалюту() Экспорт
	ПоляРесурсов = Новый Структура;
	ПоляРесурсов.Вставить("ПоляСуммы", Новый Массив);
	ПоляРесурсов.Вставить("ПоляСуммыВВалюте", Новый Массив);
	ПоляРесурсов.Вставить("ПоляКоличества", Новый Массив);
	
	Возврат ПоляРесурсов;
КонецФункции

// Производит пересчет полей сумм ресурсов таблицы факта в валюту
//
// Параметры:
// 	ТаблицаДанных   - ТаблицаЗначений - таблица фактических данных
// 	Параметры       - Структура - Параметры получения фактических данных. См. описание БюджетированиеСервер.ШаблонПараметровПолученияФакта.
// 	СохранятьВалюту - Булево - Признак, будет ли сохранена колонка "ВалютаХранения", при ее наличии в таблице данных. По умолчанию Ложь.
// 	ПоляРесурсов    - Неопределено - Поля ресурсов будут вычислены по колонкам таблицы факта. Значение по умолчанию.
// 	                - Структура - используется для пересчета определенных заранее известных полей.
// 	 *ПоляСуммы - Массив - Массив имен полей сумм.
// 	 *ПоляСуммыВВалюте - Массив - Массив имен полей сумм в валюте.
// 	 *ПоляКоличества - Массив - Массив имен полей количества.
//
Процедура ПересчитатьТаблицуДанныхВВалюту(ТаблицаДанных, Параметры, СохранятьВалюту = Ложь, ПоляРесурсов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.ВалютаХранения,
	|	//ВозвращатьСуммуВВалюте ТаблицаДанных.Валюта,
	|	ТаблицаДанных.ПериодКурса
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДанных.ПериодКурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.ПериодКурса КАК Период,
	|	ТаблицаДанных.ВалютаХранения КАК ВалютаХранения,
	|	//ВозвращатьСуммуВВалюте ТаблицаДанных.Валюта КАК Валюта,
	|	&ВалютаОтчета КАК ВалютаОтчета
	|ПОМЕСТИТЬ Валюты
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.ВалютаХранения <> &ВалютаОтчета
	|	//ВозвращатьСуммуВВалюте ИЛИ ТаблицаДанных.ВалютаХранения <> ТаблицаДанных.Валюта
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВалютаХранения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Валюты.Период КАК Период,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ПериодКурса
	|ПОМЕСТИТЬ ПериодыКурсовВалют
	|ИЗ
	|	Валюты КАК Валюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО 
	|			Валюты.Период >= КурсыВалют.Период
	|			И  КурсыВалют.Валюта В (
	|					Валюты.ВалютаХранения, 
	|					//ВозвращатьСуммуВВалюте Валюты.Валюта,
	|					Валюты.ВалютаОтчета)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Валюты.Период,
	|	КурсыВалют.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюты.Период,
	|	КурсыВалют.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыКурсовВалют.Период КАК Период,
	|	ПериодыКурсовВалют.Валюта КАК Валюта,
	|	КурсыВалют.Курс / КурсыВалют.Кратность КАК Курс
	|ИЗ
	|	ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО 
	|			ПериодыКурсовВалют.ПериодКурса = КурсыВалют.Период
	|			И ПериодыКурсовВалют.Валюта = КурсыВалют.Валюта
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("ВалютаОтчета", Параметры.ВалютаОтчета);
	
	Если Параметры.ВозвращатьСуммуВВалюте Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВозвращатьСуммуВВалюте", "");
	КонецЕсли;
	
	КурсыВалют = Запрос.Выполнить();
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаОтчета", Параметры.ВалютаОтчета);
	
	НаборТаблицаФакт = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");
	НаборТаблицаФакт.ИмяОбъекта = "ТаблицаДанных";
	
	ПоляЗначенияНефинансовогоПоказателя = Новый Массив;
	ПоляЗначенияНефинансовогоПоказателя.Добавить("ЗначениеПоказателя");
	
	Если НЕ ПоляРесурсов = Неопределено Тогда
		ПоляСуммы        = ПоляРесурсов.ПоляСуммы;
		ПоляСуммыВВалюте = ПоляРесурсов.ПоляСуммыВВалюте;
		ПоляКоличества   = ПоляРесурсов.ПоляКоличества;
	Иначе
		ПоляСуммы        = Новый Массив;
		ПоляСуммыВВалюте = Новый Массив;
		ПоляКоличества   = Новый Массив;
	КонецЕсли;
	
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборТаблицаФакт.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
		
		Если ПоляРесурсов = Неопределено Тогда
			// Определяются по колонкам таблицы.
			Если Параметры.Показатели.Свойство("Количество") 
				И СтрНачинаетсяС(ИмяПоля, "Количество") Тогда
				ПоляКоличества.Добавить(ИмяПоля);
			КонецЕсли;
			
			Если Параметры.Показатели.Свойство("Сумма") 
				И СтрНачинаетсяС(ИмяПоля, "Сумма") Тогда
				
				Если Параметры.ВозвращатьСуммуВВалюте И СтрНайти(ИмяПоля, "Вал") > 0 Тогда
					ПоляСуммыВВалюте.Добавить(ИмяПоля);
				Иначе
					ПоляСуммы.Добавить(ИмяПоля);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		Если ПоляСуммы.Найти(ИмяПоля) = Неопределено 
			И ПоляСуммыВВалюте.Найти(ИмяПоля) = Неопределено 
			И ПоляКоличества.Найти(ИмяПоля) = Неопределено
			И ПоляЗначенияНефинансовогоПоказателя.Найти(ИмяПоля) = Неопределено
			И (СохранятьВалюту ИЛИ ИмяПоля <> "ВалютаХранения") Тогда
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	НаборыКурсовВалют = Новый Структура;
	НаборыКурсовВалют.Вставить("КурсыВалютыХранения", "ВалютаХранения");
	НаборыКурсовВалют.Вставить("КурсыВалютОтчета", "&ВалютаОтчета");
	НаборыКурсовВалют.Вставить("КурсыВалют", "Валюта");
	
	Для каждого Набор Из НаборыКурсовВалют Цикл
		
		ИмяНабора = Набор.Ключ;
		ПолеВалюты = Набор.Значение; 
		
		НаборКурсыВалют = ФинансоваяОтчетностьСервер.НовыйНабор(
			СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), ИмяНабора);
		НаборКурсыВалют.ИмяОбъекта = "КурсыВалют";
		Для каждого Колонка Из КурсыВалют.Колонки Цикл
			ИмяПоля = Колонка.Имя;
			НовоеПоле = НаборКурсыВалют.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле = ИмяПоля;
			НовоеПоле.ПутьКДанным = ИмяНабора + "_" + ИмяПоля;
			НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
		КонецЦикла;
		
		// Связь с набором данных
		Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ТаблицаДанных";
		Связь.ВыражениеИсточник = "ПериодКурса";
		Связь.НаборДанныхПриемник = ИмяНабора;
		Связь.ВыражениеПриемник = ИмяНабора + "_" + "Период";
		
		Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ТаблицаДанных";
		Связь.ВыражениеИсточник = ПолеВалюты;
		Связь.НаборДанныхПриемник = ИмяНабора;
		Связь.ВыражениеПриемник = ИмяНабора + "_" + "Валюта";
		
	КонецЦикла;
	
	Если ТаблицаДанных.Колонки.Найти("ТребуетсяПересчетПоКурсу") = Неопределено Тогда
		ВыражениеРасчетаКурсаВалютаОтчета = " * ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалютОтчета_Курс, 1)";
		ВыражениеРасчетаКурсаВалюта = " * ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалют_Курс, 1)";
	Иначе
		ВыражениеРасчетаКурсаВалютаОтчета = " * ВЫБОР КОГДА ТребуетсяПересчетПоКурсу ТОГДА ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалютОтчета_Курс, 1) ИНАЧЕ 1 КОНЕЦ";
		ВыражениеРасчетаКурсаВалюта = " * ВЫБОР КОГДА ТребуетсяПересчетПоКурсу ТОГДА ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалют_Курс, 1) ИНАЧЕ 1 КОНЕЦ";
	КонецЕсли;
	
	Для каждого Поле Из ПоляСуммы Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Выражение = Поле + ВыражениеРасчетаКурсаВалютаОтчета;
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, Поле, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	Для каждого Поле Из ПоляЗначенияНефинансовогоПоказателя Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Выражение = Поле + " * ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалют_Курс, 1)";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, Поле, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	Для каждого Поле Из ПоляСуммыВВалюте Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Выражение = Поле + ВыражениеРасчетаКурсаВалюта;
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, Поле, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	Для каждого Поле Из ПоляКоличества Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ФинансоваяОтчетностьСервер.НовыйРесурс(СхемаКомпоновкиДанных, Поле, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(НастройкиКомпоновкиДанных);
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ТаблицаДанных", ТаблицаДанных);
	ВнешниеНаборы.Вставить("КурсыВалют",   КурсыВалют);
	ТаблицаДанных = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ВнешниеНаборы);
	
КонецПроцедуры

Процедура ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Валюта, ВозвращатьСуммуВВалюте)
	
	ПоляСуммы = Новый Массив;
	ПоляСуммы.Добавить("Сумма");
	Если ВозвращатьСуммуВВалюте Тогда
		ПоляСуммы.Добавить("СуммаВВалюте");
	КонецЕсли;
	
	Для каждого ИмяПоля Из ПоляСуммы Цикл
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, ИмяПоля, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, ИмяПоля);
	КонецЦикла;
	
	ИмяПоляВалюта = "ВалютаХранения";
	Если ТипЗнч(Валюта) = Тип("Строка") Тогда
		ВыражениеВалюта = Валюта;
	Иначе                             
		ВыражениеВалюта = "&ВалютаХранения";
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаХранения", Валюта);
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ИмяПоляВалюта, ВыражениеВалюта);
	ДобавитьПолеГруппировки(Настройки, ИмяПоляВалюта);
	
КонецПроцедуры

Функция НайтиПолеКомпоновкиПоИмениПоля(ПоляНабора, ИмяПоля)
	
	Для Каждого ПолеНабора Из ПоляНабора Цикл
		Если НРег(ПолеНабора.Поле) = НРег(ИмяПоля) Тогда
			Возврат ПолеНабора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры)
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	Если Параметры.ПоОрганизациям И НайтиПолеКомпоновкиПоИмениПоля(ПоляНабора, "Организация") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Организация");
	КонецЕсли;
	
	Если Параметры.ПоПодразделениям И НайтиПолеКомпоновкиПоИмениПоля(ПоляНабора, "Подразделение") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Подразделение");
	КонецЕсли;
	
КонецПроцедуры

Функция ИсточникиСуммыПравила(СхемаКомпоновкиДанных, Правило) Экспорт
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ИсточникиСуммы = Новый Структура;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		ИмяНабораДанных = НаборДанных.Имя; // Имя набора данных соответствует регистру операции
		ПоказателиРегистра = МеждународныйУчетСерверПовтИсп.Показатели(ИмяНабораДанных);
		РесурсыИсточникаСуммы = ПоказателиРегистра.Получить(Правило.ИсточникСуммыОперации).Ресурсы;
		Если РесурсыИсточникаСуммы = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для источника суммы %1 хозяйственной операции %2 не найдены соответствующие ресурсы в источнике данных.'"), 
				Правило.ИсточникСуммыОперации, 
				Правило.ИсточникДанных);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Для каждого Ресурс Из РесурсыИсточникаСуммы Цикл
			ПолеСуммы = Ресурс["Имя"];
			Если НаборДанных.Поля.Найти(ПолеСуммы) = Неопределено Тогда
				// Ресурс не выбирается в источнике
				Продолжить;
			КонецЕсли;
			Если Ресурс["ИсточникВалюты"] = "ВалютаУпр" Тогда
				ИсточникиСуммы.Вставить("Упр", ПолеСуммы);
			ИначеЕсли Ресурс["ИсточникВалюты"] = "ВалютаРегл" Тогда
				ИсточникиСуммы.Вставить("Регл", ПолеСуммы);
			Иначе
				ИсточникиСуммы.Вставить("Валюта", ПолеСуммы);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИсточникиСуммы.Вставить("Регл", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИсточникиСуммы.Вставить("Международ", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных.НаборыДанных[0]);
	КонецЕсли;
	
	Возврат ИсточникиСуммы;
	
КонецФункции

Процедура ДобавитьПолеСуммыПоСтатьеБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ИсточникиСуммы = ИсточникиСуммыПравила(СхемаКомпоновкиДанных, Правило);
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	НуженПериодКурса = УстановитьНаиболееПодходящиеПоляЗаполненияСуммы(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	Если Параметры.ВозвращатьУпрИРеглСуммы Тогда
		УстановитьНаиболееПодходящиеПоляЗаполненияСуммыРеглИУпр(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	КонецЕсли;
	
	Если НуженПериодКурса Тогда
		// Период курса
		ЕстьПолеПериодДень = (НаборДанных.Поля.Найти("ПериодДень") <> Неопределено);
		ЕстьПолеПериод = (НаборДанных.Поля.Найти("Период") <> Неопределено);
		Если ЕстьПолеПериодДень Тогда
			ВыражениеПоляПериодКурса = "ПериодДень";
		ИначеЕсли ЕстьПолеПериод Тогда
			ВыражениеПоляПериодКурса = "Период";
		Иначе
			ВыражениеПоляПериодКурса = "&КонецПериода";
		КонецЕсли;
	Иначе
		ВыражениеПоляПериодКурса = "&КонецПериода";
	КонецЕсли;
	
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодКурса", ВыражениеПоляПериодКурса);
	ДобавитьПолеГруппировки(Настройки, "ПериодКурса");
	
КонецПроцедуры

Процедура ДобавитьПолеСуммыПоПоказателюБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ИсточникиСуммы = Новый Структура;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных.НаборыДанных[0]);
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИсточникиСуммы.Вставить("Регл", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИсточникиСуммы.Вставить("Международ", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных.НаборыДанных[0]);
	КонецЕсли;
	
	УстановитьНаиболееПодходящиеПоляЗаполненияСуммы(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодКурса", "&Период");
	ДобавитьПолеГруппировки(Настройки, "ПериодКурса");
	
КонецПроцедуры

Процедура ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило)
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	ПолеКоличество = "Количество";
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ПолеКоличество = ПолеРесурсаБухгалтерии("Количество", Правило.ТипИтога)
	КонецЕсли;
	
	Если ПоляНабора.Найти(ПолеКоличество) <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "Количество", ПолеКоличество, "Сумма");
	Иначе
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "Количество", "NULL", "Сумма");
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Количество");
	
КонецПроцедуры

Процедура ДобавитьПараметр(СхемаКомпоновкиДанных, ИмяПараметра, Значение = Неопределено)
	
	Если СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	Параметр.Имя = ИмяПараметра;
	Параметр.ОграничениеИспользования = Истина;
	
	Если Значение <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.ВключатьВДоступныеПоля = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборНаЗначениеПоказателей(Настройки, Параметры)
	
	Если Параметры.Показатели.Свойство("Сумма")
	   И (Параметры.Показатели.Свойство("Количество")
	  ИЛИ Параметры.ВозвращатьУпрИРеглСуммы) Тогда
		Отбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Настройки.Отбор.Элементы,
			"ГруппаОтбор",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли); 
	Иначе
		Отбор = Настройки.Отбор;
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Отбор, "Сумма", , ВидСравненияКомпоновкиДанных.Заполнено, Истина);
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма")
	   И Параметры.ВозвращатьУпрИРеглСуммы Тогда
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Отбор, "СуммаУпр", , ВидСравненияКомпоновкиДанных.Заполнено, Истина);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Отбор, "СуммаРегл", , ВидСравненияКомпоновкиДанных.Заполнено, Истина);
		
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Отбор, "Количество", , ВидСравненияКомпоновкиДанных.Заполнено, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ФактПоСтатьямВлияющимНаПоказателиБюджетов(ОтборПравил, Параметры, РазворачиватьПериод = Ложь, ПересчитыватьВВалюту = Истина) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	// Дополним отбором, обеспечивающим выбор только статей, влияющих на показатели
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ОтборПравил.Отбор, "ПоказательБюджетов");
	Если ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.Заполнено);
	КонецЕсли;
	
	// Установка отборов.
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаОтбораСтатей = ФинансоваяОтчетностьСервер.НоваяСхема();
	НаборЗапрос = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаОтбораСтатей, Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"), "СвязиПоказателейБюджетов");
	НаборЗапрос.Запрос =
	"ВЫБРАТЬ
	|	СвязиПоказателейБюджетов.СтатьяБюджетов КАК СтатьяБюджетов,
	|	СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов КАК ПоказательБюджетов
	|ИЗ
	|	РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов";
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, "СтатьяБюджетов");
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаОтбораСтатей, НастройкиКомпоновкиДанных, ОтборПравил, "Сценарий");
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(НастройкиКомпоновкиДанных);
	СтатьиБюджетовПоПоказателям = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаОтбораСтатей, НастройкиКомпоновкиДанных);
	МассивСтатей = СтатьиБюджетовПоПоказателям.ВыгрузитьКолонку("СтатьяБюджетов");
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ОтборПравил.Отбор, "СтатьяБюджетов");
	Если ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "СтатьяБюджетов", МассивСтатей, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ФактПоСтатьямБюджетов = ФактПоСтатьямБюджетов(ОтборПравил,
		Параметры,
		Ложь,
		Параметры.ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом);
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	// Наборы данных схемы
	НаборСвязиПоказателейБюджетов = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"),
		"СвязиПоказателейБюджетов");
	
	ТекстЗначенийАналитик = "";
	ТекстТрансляцииАналитик = "";
	ТекстАдресовТрансляции = "";
	ТекстВидовАналитикиПоказателяСвязи = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстЗначенийАналитик = ТекстЗначенийАналитик + ?(ТекстЗначенийАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"СвязиПоказателейБюджетов.Аналитика%1 КАК ЗначениеАналитика%1",
				НомерАналитики);
		
		ТекстТрансляцииАналитик = ТекстТрансляцииАналитик + ?(ТекстТрансляцииАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"СвязиПоказателейБюджетов.ТранслироватьАналитику%1 КАК ТранслироватьАналитику%1",
				НомерАналитики);
		
		ТекстАдресовТрансляции = ТекстАдресовТрансляции + ?(ТекстАдресовТрансляции = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"СвязиПоказателейБюджетов.АдресТрансляцииАналитики%1 КАК АдресТрансляцииАналитики%1",
				НомерАналитики);
		
		ТекстВидовАналитикиПоказателяСвязи = ТекстВидовАналитикиПоказателяСвязи
			+ ?(ТекстВидовАналитикиПоказателяСвязи = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ПоказателиБюджетов.ВидАналитики%1 КАК ПоказательБюджетовВидАналитики%1",
				НомерАналитики);
	КонецЦикла;
	ТестЗапроса =
	"ВЫБРАТЬ
	|	ПоказателиБюджетов.Ссылка КАК ПоказательБюджетов,
	|	ПоказателиБюджетов.КоличествоИспользуемыхАналитик КАК КоличествоИспользуемыхАналитик,
	|	ПоказателиБюджетов.ВалютаОпределяетсяАналитикой КАК ВалютаОпределяетсяАналитикой,
	|	ПоказателиБюджетов.АдресАналитикиВалюта КАК АдресАналитикиВалюта,
	|	ПоказателиБюджетов.АналитикаВалюты.ЗаполнениеВалюты КАК ПолеВалютыАналитики,
	|	СвязиПоказателейБюджетов.СтатьяБюджетов КАК СтатьяБюджетов,
	|	СвязиПоказателейБюджетов.Расход КАК Расход,
	|	СвязиПоказателейБюджетов.Коэффициент КАК Коэффициент,
	|	&ТекстВидовАналитикиПоказателяСвязи,
	|	&ТекстЗначенийАналитик,
	|	&ТекстТрансляцииАналитик,
	|	&ТекстАдресовТрансляции
	|ИЗ
	|	РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
	|	ПО
	|		СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов = ПоказателиБюджетов.Ссылка";
	ТестЗапроса = СтрЗаменить(ТестЗапроса, "&ТекстЗначенийАналитик", ТекстЗначенийАналитик);
	ТестЗапроса = СтрЗаменить(ТестЗапроса, "&ТекстТрансляцииАналитик", ТекстТрансляцииАналитик);
	ТестЗапроса = СтрЗаменить(ТестЗапроса, "&ТекстАдресовТрансляции", ТекстАдресовТрансляции);
	ТестЗапроса = СтрЗаменить(ТестЗапроса, "&ТекстВидовАналитикиПоказателяСвязи", ТекстВидовАналитикиПоказателяСвязи);
	
	НаборСвязиПоказателейБюджетов.Запрос = ТестЗапроса;
	
	ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, "ПоказательБюджетов"); 
	
	НаборФактПоСтатьямБюджетов = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ФактПоСтатьямБюджетов");
	НаборФактПоСтатьямБюджетов.ИмяОбъекта = "ФактПоСтатьямБюджетов";
	
	Ресурсы = Новый Структура;
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		Ресурсы.Вставить("Сумма", "Сумма");
		Если Параметры.ВозвращатьСуммуВВалюте Тогда
			Ресурсы.Вставить("СуммаВал", "СуммаВВалюте");
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Показатели.Свойство("Количество") Тогда
		Ресурсы.Вставить("Количество", "Количество");
	КонецЕсли;
	
	Для каждого Колонка Из ФактПоСтатьямБюджетов.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборФактПоСтатьямБюджетов.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
		НовоеПоле.ОграничениеИспользования.Условие = Истина;
		Если Не Ресурсы.Свойство(ИмяПоля) Тогда
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	// Связи наборов данных
	Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ФактПоСтатьямБюджетов";
	Связь.ВыражениеИсточник = "СтатьяБюджетов";
	Связь.НаборДанныхПриемник = "СвязиПоказателейБюджетов";
	Связь.ВыражениеПриемник = "СтатьяБюджетов";
	
	Если РазворачиватьПериод Тогда
		Для каждого Периодичность Из Перечисления.Периодичность.УпорядоченныеПериодичности() Цикл
			ЕстьПолеРегистратор = НаборФактПоСтатьямБюджетов.Поля.Найти("Регистратор") <> Неопределено;
			ЕстьПолеПериод = НаборФактПоСтатьямБюджетов.Поля.Найти("Период") <> Неопределено;
			Если Не ЗначениеЗаполнено(Периодичность) Тогда
				Поле = "Регистратор";
				Если ЕстьПолеРегистратор Тогда
					Выражение = "Регистратор";
				Иначе
					Выражение = "НЕОПРЕДЕЛЕНО";
				КонецЕсли;
			Иначе
				Поле = "Период" + ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Периодичность);
				Если ЕстьПолеПериод Тогда 
					Выражение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"НАЧАЛОПЕРИОДА(Период, ""%1"")",
						ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Периодичность));
				Иначе
					Выражение = "ДАТАВРЕМЯ(1,1,1)";
				КонецЕсли;
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, Поле, Выражение);
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, Поле);
		КонецЦикла;
	КонецЕсли;
	
	// Вычисляемые поля аналитики
	ВыраженияАналитики = Новый Структура;
	ШаблонВыражения =
	"ВЫБОР
	|	КОГДА КоличествоИспользуемыхАналитик < %НомерАналитики
	|		ТОГДА %ПустоеЗначениеАналитики%
	|	КОГДА НЕ ТранслироватьАналитику%НомерАналитики
	|		ТОГДА ЗначениеАналитика%НомерАналитики";
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		ШаблонВыражения = ШаблонВыражения + Символы.ПС
			+ 	"	КОГДА АдресТрансляцииАналитики%НомерАналитики = " + Сч + "
			  	|		ТОГДА Аналитика" + Сч;
	КонецЦикла;
	ШаблонВыражения = ШаблонВыражения + Символы.ПС + "КОНЕЦ";
	ШаблонВыражения = СтрЗаменить(ШаблонВыражения, "%ПустоеЗначениеАналитики%", ВыражениеПустогоЗначенияАналитики());
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		Выражение = СтрЗаменить(ШаблонВыражения, "%НомерАналитики", НомерАналитики);
		ИмяПоля = "Аналитика" + НомерАналитики;
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ИмяПоля, Выражение);
		ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля); 
		ВыраженияАналитики.Вставить(ИмяПоля, Выражение);
	КонецЦикла;
	
	ТипыВидовВидыАналитик = БюджетированиеПовтИсп.ТипыВидовВидыАналитик();
	Если Параметры.Свойство("Аналитики") Тогда
		Аналитики = Параметры.Аналитики;
	Иначе
		Аналитики = ТипыВидовВидыАналитик.ВыгрузитьКолонку("Ссылка");
		Параметры.Вставить("Аналитики", Аналитики);
	КонецЕсли;
	
	ШаблонВыраженияИменованнойАналитики =
	"ВЫБОР
	|	%УсловиеПоИмениАналитики%
	|	ИНАЧЕ %ПустоеЗначениеАналитики%
	|КОНЕЦ";
	ШаблонУсловиеПоИмениАналитики =
	"КОГДА ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(%ПоказательБюджетовВидАналитики%) = ""%ИмяАналитики%""
	|		ТОГДА %ВыражениеТрансляцииАналитикиСПроверкойПоТипу%";
	
	Для Каждого СтрокаТипыВидовВидыАналитик Из ТипыВидовВидыАналитик Цикл
		ВидАналитики = СтрокаТипыВидовВидыАналитик.Ссылка;
		
		Если Аналитики.Найти(ВидАналитики) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеАналитикиПоВиду = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		Если ФактПоСтатьямБюджетов.Колонки.Найти(ПолеАналитикиПоВиду) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выражение = ШаблонВыраженияИменованнойАналитики;
		
		УсловиеПоИмениАналитики = "";
		Для НомерАналитикиПоказателя = 1 По МаксимальноеКоличествоАналитик Цикл
		
			ЧастьУсловия = СтрЗаменить(ШаблонУсловиеПоИмениАналитики,
				"%ПоказательБюджетовВидАналитики%", "ПоказательБюджетовВидАналитики" + НомерАналитикиПоказателя);
			
			ВыражениеТрансляцииАналитикиСПроверкойПоТипу = СтрЗаменить(ШаблонВыражения,
				"%НомерАналитики", НомерАналитикиПоказателя);
			ЧастьУсловия = СтрЗаменить(ЧастьУсловия,
				"%ВыражениеТрансляцииАналитикиСПроверкойПоТипу%",
				ВыражениеТрансляцииАналитикиСПроверкойПоТипу);
			УсловиеПоИмениАналитики = УсловиеПоИмениАналитики
				+ ?(УсловиеПоИмениАналитики = "", "", " " + Символы.ПС + Символы.Таб) + ЧастьУсловия;
		КонецЦикла;
		
		Выражение = СтрЗаменить(Выражение, "%УсловиеПоИмениАналитики%", УсловиеПоИмениАналитики);
		Выражение = СтрЗаменить(Выражение, "%ИмяАналитики%", ПолеАналитикиПоВиду);
		
		Выражение = СтрЗаменить(Выражение, "%ПустоеЗначениеАналитики%", ВыражениеПустогоЗначенияАналитики());
		
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		ВычисляемоеПоле.ПутьКДанным = ПолеАналитикиПоВиду;
		ВычисляемоеПоле.Выражение   = Выражение;
		ВычисляемоеПоле.ТипЗначения = СтрокаТипыВидовВидыАналитик.ТипЗначения;
		
	КонецЦикла;
	
	Если Параметры.ВозвращатьСуммуВВалюте Тогда
		ТекстУсловийПоАдресуВалюты = "ВЫБОР";
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			ТекстУсловийПоАдресуВалюты = ТекстУсловийПоАдресуВалюты + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"				КОГДА АдресАналитикиВалюта = %1 ТОГДА %2",
					НомерАналитики,
					ВыраженияАналитики["Аналитика" + НомерАналитики]);
		КонецЦикла;
		ТекстУсловийПоАдресуВалюты = ТекстУсловийПоАдресуВалюты + "
		|			КОНЕЦ";
		
		ВыражениеВалюта =
		"ВЫБОР 
		|	КОГДА НЕ ВалютаОпределяетсяАналитикой 
		|		ТОГДА Валюта
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, 
		|			%1, 
		|			ПолеВалютыАналитики,
		|			Валюта)
		|	КОНЕЦ";
		ВыражениеВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ВыражениеВалюта,
			ТекстУсловийПоАдресуВалюты);
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Валюта", ВыражениеВалюта);
		ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, "Валюта");
		
		ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
		ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
	КонецЕсли;
	
	ВыражениеПриход = "ВЫБОР КОГДА Расход ТОГДА 0 ИНАЧЕ Коэффициент * %Поле КОНЕЦ";
	ВыражениеРасход = "ВЫБОР КОГДА Расход ТОГДА Коэффициент * %Поле ИНАЧЕ 0 КОНЕЦ";
	Для каждого Ресурс Из Ресурсы Цикл
		
		РесурсПриход = Ресурс.Ключ + "Приход";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
			СхемаКомпоновкиДанных, 
			РесурсПриход, 
			СтрЗаменить(ВыражениеПриход, "%Поле", Ресурс.Значение), 
			"Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, РесурсПриход);
		
		РесурсРасход = Ресурс.Ключ + "Расход";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
			СхемаКомпоновкиДанных, 
			РесурсРасход, 
			СтрЗаменить(ВыражениеРасход, "%Поле", Ресурс.Значение),
			"Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, РесурсРасход);
		
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ОтборПравил, "Сценарий");
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(НастройкиКомпоновкиДанных);
	
	ВнешниеНаборыДанных = Новый Структура();
	ВнешниеНаборыДанных.Вставить("ФактПоСтатьямБюджетов", ФактПоСтатьямБюджетов);
	
	ТаблицаФакт = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ВнешниеНаборыДанных);
	
	Если ПересчитыватьВВалюту И Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ТаблицаФакт, Параметры, Истина);
	КонецЕсли;
	
	Возврат ТаблицаФакт;
	
КонецФункции

Функция ПолеРесурсаБухгалтерии(ПолеСумма, ТипИтога) Экспорт
	
	Возврат СтрЗаменить(ПолеСумма + Строка(ТипИтога), " ","");
	
КонецФункции

Процедура ДобавитьПолеГруппировки(Настройки, Поле)
	
	Если Настройки.Структура.Количество() = 0 Тогда
		Группировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(Настройки.Структура);
	Иначе
		Группировка = Настройки.Структура[0];
	КонецЕсли;
	
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(Группировка, Поле);
	
КонецПроцедуры

Функция ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, Строка, Правило)
	
	НоваяСтрока = ТаблицаФакта.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Правило);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	
	Для НомерАналитики = 1 По 6 Цикл
		Если ЗначениеЗаполнено(Правило["ВидАналитики" + НомерАналитики])
			И Не ЗначениеЗаполнено(НоваяСтрока["Аналитика" + НомерАналитики]) Тогда
			НоваяСтрока["Аналитика" + НомерАналитики] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура УстановитьНаиболееПодходящиеПоляЗаполненияСуммыРеглИУпр(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	Выражение = Неопределено;
	
	Если ИсточникиСуммы.Свойство("Упр", Выражение) Тогда
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаУпр", Выражение, "Сумма");
	Иначе
		ВыражениеСуммы = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("Сумма").Выражение;
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаУпр", ВыражениеСуммы, "Сумма");
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "СуммаУпр");
	
	Если ИсточникиСуммы.Свойство("Регл", Выражение) Тогда
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаРегл", Выражение, "Сумма");
	Иначе
		ВыражениеСуммы = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("Сумма").Выражение;
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаРегл", ВыражениеСуммы, "Сумма");
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "СуммаРегл");
	
КонецПроцедуры

Функция ДобавитьНаборПериодовНефинансовогоПоказателя(СхемаКомпоновкиДанных, Параметры, Правило)
	
	ТаблицаПериодов = Параметры.ТаблицаПериодов;
	
	ТаблицаПериодовПоДатамУстановки = Новый ТаблицаЗначений;
	ТаблицаПериодовПоДатамУстановки.Колонки.Добавить("Период");
	ТаблицаПериодовПоДатамУстановки.Колонки.Добавить("ПериодУстановки");
	
	Если Не Правило.ПоПериодам Тогда
		Если Правило.УстанавливатьЗначениеНаКаждыйПериод Тогда
			Периодичность = Правило.Периодичность;
		Иначе
			Периодичность = Перечисления.Периодичность.День;
		КонецЕсли;
		Для каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл 
			ПериодУстановки = СтрокаТаблицыПериодов.ДатаНачала;
			Пока ПериодУстановки < СтрокаТаблицыПериодов.ДатаОкончания Цикл
				НоваяСтрока = ТаблицаПериодовПоДатамУстановки.Добавить();
				НоваяСтрока.Период = СтрокаТаблицыПериодов.ДатаНачала;
				НоваяСтрока.ПериодУстановки = ПериодУстановки;
				ПериодУстановки = БюджетированиеКлиентСервер.ДобавитьИнтервал(ПериодУстановки, Правило.Периодичность, 1);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл
			НоваяСтрока = ТаблицаПериодовПоДатамУстановки.Добавить();
			НоваяСтрока.Период = СтрокаТаблицыПериодов.ДатаНачала;
			НоваяСтрока.ПериодУстановки = СтрокаТаблицыПериодов.ДатаНачала;
		КонецЦикла;
	КонецЕсли;
	
	НаборТаблицаПериодовПоДатамУстановки = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаПериодовПоДатамУстановки");
	НаборТаблицаПериодовПоДатамУстановки.ИмяОбъекта = "ТаблицаПериодовПоДатамУстановки";
	
	Для каждого Колонка Из ТаблицаПериодовПоДатамУстановки.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборТаблицаПериодовПоДатамУстановки.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
	КонецЦикла;
	
	Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ТаблицаПериодовПоДатамУстановки";
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		Связь.ВыражениеИсточник = СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&НАЧАЛОПЕРИОДА", "ПЕРИОДУСТАНОВКИ");
	Иначе
		Связь.ВыражениеИсточник = "ПериодУстановки";
	КонецЕсли;
	Связь.НаборДанныхПриемник = СхемаКомпоновкиДанных.НаборыДанных[0].Имя;
	Связь.ВыражениеПриемник = "Период";
	Связь.Параметр = "Период";
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПериодовПоДатамУстановки", ТаблицаПериодовПоДатамУстановки);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

Функция ПреобразоватьВВыражениеСКД(ВыражениеЯзыкаЗапросов, Знач ЧисловоеВыражение = Ложь, Знач ВыражениеАналитики = Ложь) Экспорт
	
	ВыражениеСКД = ВРег(ВыражениеЯзыкаЗапросов); 
	
	Периоды = Новый Структура;
	Периоды.Вставить("ДЕНЬ",      """ДЕНЬ""");
	Периоды.Вставить("НЕДЕЛЯ",    """НЕДЕЛЯ""");
	Периоды.Вставить("ДЕКАДА",    """ДЕКАДА""");
	Периоды.Вставить("МЕСЯЦ",     """МЕСЯЦ""");
	Периоды.Вставить("КВАРТАЛ",   """КВАРТАЛ""");
	Периоды.Вставить("ПОЛУГОДИЕ", """ПОЛУГОДИЕ""");
	Периоды.Вставить("ГОД",       """ГОД""");
	
	Для каждого Период Из Периоды Цикл
		// Уточняем поведение для однокоренных слов
		Если Период.Ключ = "ГОД" И СтрНайти(ВыражениеСКД, "ПОЛУГОДИЕ") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыражениеСКД = СтрЗаменить(ВыражениеСКД, Период.Ключ, Период.Значение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВыражениеЯзыкаЗапросов) Тогда
		Если ЧисловоеВыражение Тогда
			ВыражениеСКД = "0";
		ИначеЕсли ВыражениеАналитики Тогда
			ВыражениеСКД = ВыражениеПустогоЗначенияАналитики();
		Иначе
			ВыражениеСКД = "НЕОПРЕДЕЛЕНО";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыражениеСКД;
	
КонецФункции

Функция ЗначениеНастройкиСКД(КомпоновщикНастроек, ИмяНастройки) Экспорт
	
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(ПользовательскаяНастройка.Параметр) = "Период" Тогда
			Возврат ПользовательскаяНастройка.Значение;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы Цикл
		Если Строка(ПользовательскаяНастройка.Параметр) = "Период" Тогда
			Возврат ПользовательскаяНастройка.Значение;
		КонецЕсли;
	КонецЦикла;
		
КонецФункции

Функция УстановитьНаиболееПодходящиеПоляЗаполненияСуммы(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ПолеЗаполненияСуммыУстановлено = Ложь;
	
	Выражение = Неопределено;
	ВозвращатьСуммуВВалюте = Параметры.ВозвращатьСуммуВВалюте;
	
	НуженПересчет = Истина;
	
	Если ИсточникиСуммы.Свойство("Валюта") Тогда
		ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		ПолеНабораДанныхВалюта = ПоляНабораДанных.Найти("Валюта");
		Если ПолеНабораДанныхВалюта = Неопределено Тогда
			ТипЗначенияВалюты = Тип("СправочникСсылка.Валюты");
			Для каждого ПолеНабораДанных Из ПоляНабораДанных Цикл
				Если ТипЗнч(ПолеНабораДанных) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных")
					Или ТипЗнч(ПолеНабораДанных) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если ПолеНабораДанных.ТипЗначения.СодержитТип(ТипЗначенияВалюты) Тогда
					ПолеНабораДанныхВалюта = ПолеНабораДанных;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПолеНабораДанныхВалюта = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не определена валюта для получения валютной суммы.'");
		Иначе
			ПутьКДаннымВалюта = ПолеНабораДанныхВалюта.ПутьКДанным;
		КонецЕсли;
	КонецЕсли;
	
	// Подберем наиболее подходящее поле заполнения суммы
	Если ИсточникиСуммы.Свойство("Валюта", Выражение) 
		И (Правило.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных"
			ИЛИ Правило.ЗаполнениеВалюты = "ОпределяетсяПоАналитике") Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, ПутьКДаннымВалюта, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	ИначеЕсли Параметры.ВалютаОтчета = Параметры.ВалютаУпр 
		И ИсточникиСуммы.Свойство("Упр", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Параметры.ВалютаУпр, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		НуженПересчет = Ложь;
		
	ИначеЕсли Параметры.ВалютаОтчета = Параметры.ВалютаРегл
		И ИсточникиСуммы.Свойство("Регл", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Параметры.ВалютаРегл, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		НуженПересчет = Ложь;
		
	ИначеЕсли ИсточникиСуммы.Свойство("Валюта", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, ПутьКДаннымВалюта, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	КонецЕсли;
	
	// Если не удалось подобрать наиболее подходящее поле - заполним из первого
	Если Не ПолеЗаполненияСуммыУстановлено Тогда
		Для каждого ИсточникСуммы Из ИсточникиСуммы Цикл
			Выражение = ИсточникСуммы.Значение;
			Если ИсточникСуммы.Ключ = "Регл" Тогда
				Валюта = Параметры.ВалютаРегл;
			ИначеЕсли ИсточникСуммы.Ключ = "Упр" Тогда
				Валюта = Параметры.ВалютаУпр;
			КонецЕсли;
			
			ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Валюта, ВозвращатьСуммуВВалюте);
			ПолеЗаполненияСуммыУстановлено = Истина;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПолеЗаполненияСуммыУстановлено Тогда
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, "NULL", Параметры.ВалютаОтчета, ВозвращатьСуммуВВалюте);
	КонецЕсли;
	
	Возврат НуженПересчет;
	
КонецФункции

Функция ШаблонТаблицыДанныхПоВидуБюджета(Параметры)
	
	ОписаниеТиповДата =  Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповАналитики  = ВсеТипыАналитик();
	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
	ОписаниеТиповСумма = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	ОписаниеТиповЗначениеНефинансовогоПоказателя = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,6)); 
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	
	ТаблицаФакта.Колонки.Добавить("ИндексНФП", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
	ТаблицаФакта.Колонки.Добавить("ИД_Источника", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	МассивТиповСтатьи = Новый Массив;
	МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
	МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов(МассивТиповСтатьи));
	ТаблицаФакта.Колонки.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	
	ТаблицаФакта.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("ВидПоказателя", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНефинансовыхПоказателей"));
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	ТаблицаФакта.Колонки.Добавить("НачалоПериода", ОписаниеТиповДата);
	ТаблицаФакта.Колонки.Добавить("КонецПериода", ОписаниеТиповДата);
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	ТаблицаФакта.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
	
	ТаблицаФакта.Колонки.Добавить("ТребуетсяПересчетПоКурсу", ОписаниеТипаБулево);
	
	ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ТаблицаФакта.Колонки.Добавить("КоличествоНачальныйОстаток", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаНачальныйОстаток", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВалНачальныйОстаток", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("КоличествоПриход", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаПриход", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВалПриход", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("КоличествоРасход", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаРасход", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВалРасход", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЗначениеНефинансовогоПоказателя);
	ТаблицаФакта.Колонки.Добавить("НомерПодпериода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	
	Если Параметры.ПоРегистратору Тогда
		ТаблицаФакта.Колонки.Добавить("Регистратор");
	КонецЕсли;
	
	Возврат ТаблицаФакта;
	
КонецФункции

Функция ОчищаемыеКоллекцииПриПолученииФакта()
	ОчищаемыеКоллекции = Новый Соответствие;
	ОчищаемыеКоллекции.Вставить("ВычисляемыеПоля");
	ОчищаемыеКоллекции.Вставить("ПоляИтога");
	
	Возврат ОчищаемыеКоллекции;
КонецФункции

Процедура ДобавитьПолеВыборкиВЗапросРекурсивно(ИмяКолонки, Знач ЭлементОбъединенногоФакта)
	
	Перем ВыражениеПоляВыборки;
	
	Если ТипЗнч(ЭлементОбъединенногоФакта) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		
		ЭлементОбъединенногоФакта.Запрос = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(
			ЭлементОбъединенногоФакта.Запрос, 
			"&" + ИмяКолонки, 
			ИмяКолонки, , 
			Истина, 
			Истина);
		
	ИначеЕсли ТипЗнч(ЭлементОбъединенногоФакта) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементОбъединенногоФакта Из ЭлементОбъединенногоФакта.Элементы Цикл 
			ДобавитьПолеВыборкиВЗапросРекурсивно(ИмяКолонки, ЭлементОбъединенногоФакта);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ХранимыеМакетыБюджета

Функция ФайлыСохранногоМакета(Бюджет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭкземплярБюджетаПрисоединенныеФайлы.Ссылка,
		|	ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла
		|ИЗ
		|	Справочник.ЭкземплярБюджетаПрисоединенныеФайлы КАК ЭкземплярБюджетаПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ТипыСлужебныхФайловЭкземпляраБюджета КАК ТипыСлужебныхФайловЭкземпляраБюджета
		|		ПО ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла = ТипыСлужебныхФайловЭкземпляраБюджета.Ссылка
		|ГДЕ
		|	ЭкземплярБюджетаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ ЭкземплярБюджетаПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Бюджет);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Новый Структура;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ХранимыйБюджет Тогда
			Результат.Вставить("ХранимыйБюджет", ВыборкаДетальныеЗаписи.Ссылка);
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ВспомогательныеДанные Тогда
			Результат.Вставить("ВспомогательныеДанные", ВыборкаДетальныеЗаписи.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВосстановитьХранимыйМакет(СсылкаНаБюджет, ВидБюджета, ВерсияВидаБюджета) Экспорт
	
	Файлы = БюджетированиеСервер.ФайлыСохранногоМакета(СсылкаНаБюджет);
	Если Не Файлы.Свойство("ХранимыйБюджет")
		Или Не Файлы.Свойство("ВспомогательныеДанные") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВспомогательныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Файлы.ВспомогательныеДанные);
	ИмяФайлаВспомогательныеДанные = ПолучитьИмяВременногоФайла("dat");
	ВспомогательныеДанные.Записать(ИмяФайлаВспомогательныеДанные);
	ВспомогательныеДанные = ЗначениеИзФайла(ИмяФайлаВспомогательныеДанные);
	
	Если ТипЗнч(ВспомогательныеДанные) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ВспомогательныеДанные.Свойство("ВидБюджета")
		ИЛИ Не ВспомогательныеДанные.Свойство("ВерсияВидаБюджета") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВспомогательныеДанные.ВидБюджета <> ВидБюджета
		ИЛИ ВспомогательныеДанные.ВерсияВидаБюджета <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "ВерсияДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранимыйБюджет = РаботаСФайлами.ДвоичныеДанныеФайла(Файлы.ХранимыйБюджет);
	ИмяФайлаХранимыйБюджет = ПолучитьИмяВременногоФайла("mxl");
	ХранимыйБюджет.Записать(ИмяФайлаХранимыйБюджет);
	ХранимыйБюджет = Новый ТабличныйДокумент;
	ХранимыйБюджет.Прочитать(ИмяФайлаХранимыйБюджет);
	
	РезультатВосстановления = ВспомогательныеДанные;
	РезультатВосстановления.Вставить("Результат", ХранимыйБюджет);
	
	ПараметрыВывода = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(
							ВидБюджета, Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
	ПараметрыВывода.Вставить("ИндексыТаблицыДанныхЯчеек", Новый Соответствие);
	РезультатВосстановления.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВывода);
	
	УдалитьФайлы(ИмяФайлаВспомогательныеДанные);
	УдалитьФайлы(ИмяФайлаХранимыйБюджет);
	
	Возврат РезультатВосстановления;
	
КонецФункции

#КонецОбласти

#Область ПроведениеЭкземпляровБюджета

Функция ЗаполнитьКэшПараметровСтатей(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
	
	ТаблицаСтатейИПоказателей = СтруктураПараметров.СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать(,"СтатьяБюджетов");
	ТаблицаСтатейИПоказателей.Свернуть("СтатьяБюджетов");
	
	СтатьиИЦелевыеПоказатели = ТаблицаСтатейИПоказателей.ВыгрузитьКолонку("СтатьяБюджетов");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СтатьиИЦелевыеПоказатели, Справочники.СтатьиБюджетов.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СтатьиИЦелевыеПоказатели, Неопределено);
	
	СоответствиеСтатейПоказателей = Новый Соответствие;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка,
	|	СтатьиБюджетов.ВидАналитики1,
	|	СтатьиБюджетов.ВидАналитики2,
	|	СтатьиБюджетов.ВидАналитики3,
	|	СтатьиБюджетов.ВидАналитики4,
	|	СтатьиБюджетов.ВидАналитики5,
	|	СтатьиБюджетов.ВидАналитики6,
	|	СтатьиБюджетов.ВидАналитики1.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики2.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики3.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики4.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики5.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики6.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики1.ЗаполнениеВалюты,
	|	СтатьиБюджетов.ВидАналитики2.ЗаполнениеВалюты,
	|	СтатьиБюджетов.ВидАналитики3.ЗаполнениеВалюты,
	|	СтатьиБюджетов.ВидАналитики4.ЗаполнениеВалюты,
	|	СтатьиБюджетов.ВидАналитики5.ЗаполнениеВалюты,
	|	СтатьиБюджетов.ВидАналитики6.ЗаполнениеВалюты,
	|	СтатьиБюджетов.УчитыватьПоВалюте,
	|	СтатьиБюджетов.ВалютаОпределяетсяАналитикой,
	|	СтатьиБюджетов.АдресАналитикиВалюта,
	|	СтатьиБюджетов.КоличествоИспользуемыхАналитик
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка В(&СтатьиИЦелевыеПоказатели)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиБюджетов.Ссылка,
	|	ПоказателиБюджетов.ВидАналитики1,
	|	ПоказателиБюджетов.ВидАналитики2,
	|	ПоказателиБюджетов.ВидАналитики3,
	|	ПоказателиБюджетов.ВидАналитики4,
	|	ПоказателиБюджетов.ВидАналитики5,
	|	ПоказателиБюджетов.ВидАналитики6,
	|	ПоказателиБюджетов.ВидАналитики1.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики2.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики3.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики4.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики5.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики6.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики1.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.ВидАналитики2.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.ВидАналитики3.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.ВидАналитики4.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.ВидАналитики5.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.ВидАналитики6.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.УчитыватьПоВалюте,
	|	ПоказателиБюджетов.ВалютаОпределяетсяАналитикой,
	|	ПоказателиБюджетов.АдресАналитикиВалюта,
	|	ПоказателиБюджетов.КоличествоИспользуемыхАналитик
	|ИЗ
	|	Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
	|ГДЕ
	|	ПоказателиБюджетов.Ссылка В(&СтатьиИЦелевыеПоказатели)
	|";
	
	Запрос.УстановитьПараметр("СтатьиИЦелевыеПоказатели", СтатьиИЦелевыеПоказатели);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтатьяПоказательБюджетов Из СтатьиИЦелевыеПоказатели Цикл
		
		РеквизитыСтатьи = Новый Структура;
		СтрокаТаблицыРеквизитов = ТаблицаРеквизитов.Найти(СтатьяПоказательБюджетов, "Ссылка");
		Для Каждого Колонка Из ТаблицаРеквизитов.Колонки Цикл
			Если Колонка.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыСтатьи.Вставить(Колонка.Имя, СтрокаТаблицыРеквизитов[Колонка.Имя]);
		КонецЦикла;
		
		Если РеквизитыСтатьи.УчитыватьПоВалюте Тогда
			Если РеквизитыСтатьи.ВалютаОпределяетсяАналитикой Тогда
				ВидАналитикиВалюта = "ВидАналитики" + РеквизитыСтатьи.АдресАналитикиВалюта;
				ИмяРеквизита = РеквизитыСтатьи[ВидАналитикиВалюта + "ЗаполнениеВалюты"];
				РеквизитыСтатьи.Вставить("ПутьКАналитикеВалюта", ИмяРеквизита);
				РеквизитыСтатьи.Вставить("ИмяАналитикиВалюта", ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(РеквизитыСтатьи[ВидАналитикиВалюта]));
				РеквизитыСтатьи.Вставить("ВидАналитикиВалюта", РеквизитыСтатьи[ВидАналитикиВалюта]);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВидовАналитик = Новый Структура;
		Для Сч = 1 По РеквизитыСтатьи.КоличествоИспользуемыхАналитик Цикл
			ВидАналитики = РеквизитыСтатьи["ВидАналитики" + Сч];
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			СтруктураВидовАналитик.Вставить(ИмяАналитики, ВидАналитики);
		КонецЦикла;
		
		СоответствиеСтатейПоказателей.Вставить(СтатьяПоказательБюджетов, РеквизитыСтатьи);
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(СоответствиеСтатейПоказателей);
	
КонецФункции

Процедура ПоставитьДокументВОчередьПроведения(Документ) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияОтраженияЭкземпляровБюджетов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		НомерЗадания = Константы.НомерЗаданияОтраженияЭкземпляровБюджетов.Получить();
		
		Запись = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьМенеджерЗаписи();
		Запись.Документ = Документ;
		Запись.НомерЗадания = НомерЗадания;
		Запись.Записать();
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru= 'Отложенное проведение экземпляров бюджета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьОтложенноеПроведениеЭкземпляровБюджетов(Ссылка=Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтложенноеПроведениеЭкземпляровБюджета);
	
	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияОтраженияЭкземпляровБюджетов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НомерЗадания = Константы.НомерЗаданияОтраженияЭкземпляровБюджетов.Получить();
		Константы.НомерЗаданияОтраженияЭкземпляровБюджетов.Установить(НомерЗадания + 1);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru= 'Отложенное проведение экземпляров бюджета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданияКОтражениюЭкземпляровБюджета.НомерЗадания КАК НомерЗадания,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.ВидБюджета КАК ВидБюджета,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.ВидБюджета.СохранятьБюджетВТабличнойФормеВЭкземпляреБюджета КАК СохранятьБюджетВТабличнойФормеВЭкземпляреБюджета,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.ВидБюджета.ВерсияДанных КАК ВерсияДанных,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.Сценарий.Валюта КАК Валюта,
		|	ЗаданияКОтражениюЭкземпляровБюджета.ДокументПроведенОжидаетПроверки
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюЭкземпляровБюджета КАК ЗаданияКОтражениюЭкземпляровБюджета
		|ГДЕ
		|	ЗаданияКОтражениюЭкземпляровБюджета.НомерЗадания <= &НомерЗадания
		|	И (&Ссылка = НЕОПРЕДЕЛЕНО
		|			ИЛИ ЗаданияКОтражениюЭкземпляровБюджета.Документ = &Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЗадания УБЫВ";
	
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СоответствиеОбработанныхДокументов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если СоответствиеОбработанныхДокументов[Выборка.Документ] = Истина Тогда
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если Ссылка = Неопределено Тогда
			Ключ = "ОтложенноеПроведениеЭкземпляровБюджета" + Строка(Выборка.Документ.УникальныйИдентификатор());
		
			Отбор = Новый Структура();
			Отбор.Вставить("Ключ", Ключ);
			Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
			
			АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			Если АктивныеЗадания.Количество() > 0 Тогда
				Для Каждого АктивноеЗадание Из АктивныеЗадания Цикл
					АктивноеЗадание.Отменить();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		НужнаДополнительнаяОбработкаОбъекта = Ложь;
				
		Ссылка = Выборка.Документ;
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		ДополнительныеСвойства = Новый Структура;
		Движения = Новый Структура("ОборотыБюджетов");
		Отказ = Ложь;
		
		Движения.ОборотыБюджетов = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
		Движения.ОборотыБюджетов.Отбор.Регистратор.Установить(Ссылка);
		
		ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
		ДополнительныеСвойства.Вставить("ОтложенноеПроведение", Истина);
		
		// Инициализация дополнительных свойств для проведения документа
		ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
		
		// Инициализация данных документа
		Документы.ЭкземплярБюджета.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
		
		// Движения по регистрам
		РегистрыНакопления.ОборотыБюджетов.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
		
		Движения.ОборотыБюджетов.Записать(Истина);
		
		СоответствиеОбработанныхДокументов.Вставить(Выборка.Документ, Истина);
		
		Если НужнаДополнительнаяОбработкаОбъекта Тогда
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.ДокументПроведенОжидаетПроверки = Истина;
			КонецЦикла;
			НаборЗаписей.Записать();
		Иначе
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьОтложенноеПроведениеФоновымЗаданием(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = "ОтложенноеПроведениеЭкземпляровБюджета" + Строка(Ссылка.УникальныйИдентификатор());
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Для Каждого АктивноеЗадание Из АктивныеЗадания Цикл
			АктивноеЗадание.Отменить();
		КонецЦикла;
	КонецЕсли;
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется отложенное проведение экземпляров бюджета'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Ссылка);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("БюджетированиеСервер.ВыполнитьОтложенноеПроведениеЭкземпляровБюджетов");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Проверяет содержимое табличных частей экземпляра бюджета и корректирует их
//
// Параметры:
// 	ДанныеОбъекта - ДокументОбъект.ЭкземплярБюджета - проверяемый и изменяемый объект
// 	ОбъектИПараметрыРасчета - Структура - параметры бюджета, в том числе копия объекта в виде ДанныеФормыСтруктура
// 	Бюджет - ТабличныйДокумент - табличная форма бюджета, по которой производится проверка использования аналитик с помощью значений расшифровок в ячейках
// 	ДанныеРасшифровки - ДанныеРасшифровки.
//
Процедура ПроверитьИсправитьТЧЭкземпляраБюджета(ДанныеОбъекта, ОбъектИПараметрыРасчета, Бюджет, ДанныеРасшифровки) Экспорт
	
	// Привести типы колонок ТЧ АналитикаСтатейБюджета в соответствие к видам аналитик вида бюджета.
	Если ДанныеОбъекта.АналитикаСтатейБюджетов.Количество() > 0 Тогда
		КэшПараметровСтатей = ОбъектИПараметрыРасчета.КэшПараметровСтатей;
					
		АналитикаСтатейБюджетов = ДанныеОбъекта.АналитикаСтатейБюджетов;
		Для Каждого СтрокаАналитикиСтатьейБюджетов Из ДанныеОбъекта.АналитикаСтатейБюджетов Цикл
			ПараметрыСтатьи = КэшПараметровСтатей.Получить(СтрокаАналитикиСтатьейБюджетов.СтатьяБюджетов);
			Если ПараметрыСтатьи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Сч = 1 По 6 Цикл
				// Если тип аналитики не используется в видах аналитик, то значение очистится
				// Например, в ситуации когда изменили состав аналитики вида бюджета.
				ВидАналитики = ПараметрыСтатьи["ВидАналитики" + Сч];
				Если ЗначениеЗаполнено(ВидАналитики) Тогда
					Значение = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(СтрокаАналитикиСтатьейБюджетов["Аналитика" + Сч],
					                                                                   ВидАналитики.ТипЗначения);
				Иначе
					Значение = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
				КонецЕсли;
				СтрокаАналитикиСтатьейБюджетов["Аналитика" + Сч] = Значение;
			КонецЦикла;
		КонецЦикла;
		
		ЗначениеВДанныеФормы(ДанныеОбъекта, ОбъектИПараметрыРасчета.Объект);
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Объект = ОбъектИПараметрыРасчета.Объект; // ДокументОбъект.ЭкземплярБюджета -
	ТабличныеЧастиКэш = Новый Структура;
	
	ТабличнаяЧастьКэш = Объект.АналитикаСтатейБюджетов.Выгрузить();
	ИменаКолонокИндекс = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ИменаКолонокИндекс = ИменаКолонокИндекс + ?(ИменаКолонокИндекс = "", "", ",") + "Аналитика" + НомерАналитики;
	КонецЦикла;
	ИменаКолонокИндекс = ИменаКолонокИндекс + ",СтатьяБюджетов,Валюта";
	ТабличнаяЧастьКэш.Индексы.Добавить(ИменаКолонокИндекс);
	
	ТабличныеЧастиКэш.Вставить("АналитикаСтатейБюджетов", ТабличнаяЧастьКэш);
	
	ТабличнаяЧастьКэш = Объект.АналитикаЗначений.Выгрузить();
	ИменаКолонокИндекс = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ИменаКолонокИндекс = ИменаКолонокИндекс + ?(ИменаКолонокИндекс = "", "", ",") + "Аналитика" + НомерАналитики
			+ "," + "ВидАналитики" + НомерАналитики;
	КонецЦикла;
	ИменаКолонокИндекс = ИменаКолонокИндекс + ",РедактируемоеЗначение,КоличествоИспользуемыхАналитик";
	ТабличнаяЧастьКэш.Индексы.Добавить(ИменаКолонокИндекс);
	ТабличныеЧастиКэш.Вставить("АналитикаЗначений", ТабличнаяЧастьКэш);
	
	// Привести ТЧ в соответствие табличному документу
	СоответствиеНайденныхИД = Новый Соответствие;
	Для КоординатаХ = 1 По Бюджет.ШиринаТаблицы Цикл
		Для КоординатаУ = 1 По Бюджет.ВысотаТаблицы Цикл
			Расшифровка = Бюджет.Область(КоординатаУ, КоординатаХ).Расшифровка;
			Расшифровка = ДанныеРасшифровки[Расшифровка];
			Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
				Расшифровка = БюджетнаяОтчетностьКлиентСервер.ПреобразоватьРасшифровку(ОбъектИПараметрыРасчета, Расшифровка, Истина);
				Если Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИдентификаторСтроки = ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, ТабличныеЧастиКэш, Расшифровка);
				Если ИдентификаторСтроки <> Неопределено Тогда
					МассивПериодов = СоответствиеНайденныхИД[ИдентификаторСтроки];
					Если МассивПериодов = Неопределено Тогда
						МассивПериодов = Новый Массив;
						СоответствиеНайденныхИД.Вставить(ИдентификаторСтроки, МассивПериодов);
					КонецЕсли;
					МассивПериодов.Добавить(Расшифровка.ПериодПланирования);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаТаблицы Из ДанныеОбъекта.АналитикаСтатейБюджетов Цикл
		Если СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки] = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "АналитикаСтатейБюджетов", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ДанныеОбъекта.АналитикаЗначений Цикл
		Если СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки] = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "АналитикаЗначений", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеОбъекта.ОборотыПоСтатьямБюджетов Цикл
		МассивПериодов = СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки];
		Если МассивПериодов = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "ОборотыПоСтатьямБюджетов", СтрокаТаблицы));
			Продолжить;
		КонецЕсли;
		Если МассивПериодов.Найти(СтрокаТаблицы.ПериодПланирования) = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "ОборотыПоСтатьямБюджетов", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТаблицаИСтрока Из МассивНаУдаление Цикл
		ДанныеОбъекта[ТаблицаИСтрока.Таблица].Удалить(ТаблицаИСтрока.Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьХранимыйМакет(МакетДляХранения, ВспомогательныеДанные, СсылкаНаБюджет) Экспорт
	
	ИмяФайлаМакета = ПолучитьИмяВременногоФайла("mxl");
	МакетДляХранения.Записать(ИмяФайлаМакета, ТипФайлаТабличногоДокумента.MXL);
	ХранилищеМакета = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаМакета));
	
	ИмяФайлаВспомогательныхДанных = ПолучитьИмяВременногоФайла("dat");
	ЗначениеВФайл(ИмяФайлаВспомогательныхДанных, ВспомогательныеДанные);
	ХранилищеВспомогательныхДанных = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаВспомогательныхДанных));
	
	СохраненныеФайлы = ФайлыСохранногоМакета(СсылкаНаБюджет);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ДатаМодификацииУниверсальная", ТекущаяУниверсальнаяДата());
	ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", Неопределено);
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", СсылкаНаБюджет);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);

	Файл = Неопределено;
	Если СохраненныеФайлы.Свойство("ХранимыйБюджет", Файл) Тогда
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", ХранилищеМакета);
		РаботаСФайлами.ОбновитьФайл(Файл, ПараметрыФайла);
	Иначе
		ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Бюджет'"));
		ПараметрыФайла.Вставить("РасширениеБезТочки", "mxl");
		Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ХранилищеМакета, Неопределено);
		ФайлОбъект = Файл.ПолучитьОбъект();
		ФайлОбъект.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ХранимыйБюджет;
		ФайлОбъект.Записать();
	КонецЕсли;
	
	Если СохраненныеФайлы.Свойство("ВспомогательныеДанные", Файл) Тогда
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", ХранилищеВспомогательныхДанных);
		РаботаСФайлами.ОбновитьФайл(Файл, ПараметрыФайла);
	Иначе
		ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Вспомогательные данные бюджета'"));
		ПараметрыФайла.Вставить("РасширениеБезТочки", "dat");
		Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ХранилищеВспомогательныхДанных, Неопределено);
		ФайлОбъект = Файл.ПолучитьОбъект();
		ФайлОбъект.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ВспомогательныеДанные;
		ФайлОбъект.Записать();
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаМакета);
	УдалитьФайлы(ИмяФайлаВспомогательныхДанных);
	
КонецПроцедуры

// Получает идентификатор строки табличной части экземпляра бюджета по данным расшифровки.
// Является оптимизацией метода БюджетнаяОтчетностьКлиентСервер.ИдентификаторАналитикиСтатейБюджетов
//
// Параметры:
// 	ОбъектИПараметрыРасчета - Структура - параметры бюджета, в том числе копия объекта в виде ДанныеФормыСтруктура:
// 	 *ВалютаСценария - СправочникСсылка.Валюты - Валюта сценария.
// 	ТабличныеЧастиКэш - Структура - Структура, содержащая выгруженные и проиндексированные табличные части документа.
// 	 *АналитикаСтатейБюджетов - ТаблицаЗначений - выгруженная табличная часть АналитикаСтатейБюджетов:
// 	  **ИдентификаторСтроки - Строка -
// 	  **СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов -
// 	  **Аналитика1 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика2 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика3 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика4 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика5 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика6 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Валюта - СправочникСсылка.Валюты -
// 	 *АналитикаЗначений - ТаблицаЗначений - выгруженная табличная часть АналитикаЗначений:
// 	  **ИдентификаторСтроки - Строка -
// 	  **РедактируемоеЗначение - Строка -
// 	  **ВидАналитики1 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **ВидАналитики2 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **ВидАналитики3 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **ВидАналитики4 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **ВидАналитики5 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **ВидАналитики6 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **Аналитика1 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика2 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика3 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика4 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика5 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика6 - Характеристика.АналитикиСтатейБюджетов -
// 	  **КоличествоИспользуемыхАналитик - Число -
//
Функция ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, ТабличныеЧастиКэш, ДанныеПоиска)
	ИдентификаторСтроки = Неопределено;
	
	ВалютаСценария = ОбъектИПараметрыРасчета.ВалютаСценария;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	СтруктураПоиска = Новый Структура;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		СтруктураПоиска.Вставить("Аналитика" + НомерАналитики);
	КонецЦикла;
	
	Если ДанныеПоиска.Свойство("СтатьяБюджетов") Тогда
		СтруктураПоиска.Вставить("СтатьяБюджетов");
		СтруктураПоиска.Вставить("Валюта");
		ТабличнаяЧастьКэш = ТабличныеЧастиКэш.АналитикаСтатейБюджетов;
	Иначе
		СтруктураПоиска.Вставить("РедактируемоеЗначение");
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			СтруктураПоиска.Вставить("ВидАналитики" + Сч);
		КонецЦикла;
		ТабличнаяЧастьКэш = ТабличныеЧастиКэш.АналитикаЗначений;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПоиска);
	
	Если ДанныеПоиска.Свойство("СтатьяБюджетов") Тогда
		Если ТипЗнч(ДанныеПоиска) = Тип("Структура") Тогда
			Если ДанныеПоиска.Свойство("Валюта") Тогда
				Если ДанныеПоиска.Валюта = Неопределено Тогда
					СтруктураПоиска.Удалить("Валюта");
				Иначе
					СтруктураПоиска.Валюта = ДанныеПоиска.Валюта;
				КонецЕсли;
			Иначе
				СтруктураПоиска.Валюта = ВалютаСценария;
			КонецЕсли;
		Иначе
			СтруктураПоиска.Валюта = ВалютаСценария;
		КонецЕсли;
	Иначе
		МаксимальныйНомерАналитики = 0;
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			Если ЗначениеЗаполнено(СтруктураПоиска["ВидАналитики" + Сч]) Тогда
				МаксимальныйНомерАналитики = Сч;
			КонецЕсли;
		КонецЦикла;
		СтруктураПоиска.Вставить("КоличествоИспользуемыхАналитик", МаксимальныйНомерАналитики);
	КонецЕсли;
	
	РезультатПоиска = ТабличнаяЧастьКэш.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() <> 0 Тогда
		ИдентификаторСтроки = РезультатПоиска[0].ИдентификаторСтроки;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПоСтатьямИПоказателям

Функция РассчитатьФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных)
	
	КолонкиТаблицыДанныхВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных(ПараметрыДанных.ВидБюджета);
	
	// Получаем факт только в разрезе минимальной периодичности
	Периодичности = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Периодичности, КолонкиТаблицыДанныхВидаБюджета.Периодичности);
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		Если ЗначениеЗаполнено(ИсточникДанных.ПериодичностьСмещения)
		   И ЗначениеЗаполнено(ИсточникДанных.ПериодСмещения) Тогда
			Периодичности.Добавить(ИсточникДанных.ПериодичностьСмещения);
		КонецЕсли;
	КонецЦикла;
	Периодичности = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Периодичности);
	Периодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(Периодичности);
	
	ВидыАналитик = КолонкиТаблицыДанныхВидаБюджета.ВидыАналитик;
	Если КолонкиТаблицыДанныхВидаБюджета.Измерения.Найти("Организация") <> Неопределено Тогда
		ПоОрганизациям = Истина;
	Иначе
		ПоОрганизациям = Ложь;
	КонецЕсли;
	Если КолонкиТаблицыДанныхВидаБюджета.Измерения.Найти("Подразделение") <> Неопределено Тогда
		ПоПодразделениям = Истина;
	Иначе
		ПоПодразделениям = Ложь;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод(ПараметрыДанных.НачалоПериода, ПараметрыДанных.КонецПериода);
	Параметры = ПараметрыПолученияФактаПоВидуБюджета(ВалютаОтчета, Период, Периодичность, ВидыАналитик, ПоОрганизациям, ПоПодразделениям, РежимПолученияДанных);
	
	СценарийОтчета = Неопределено;
	Если ПараметрыДанных <> Неопределено Тогда
		ПараметрыДанных.Свойство("Сценарий", СценарийОтчета);
	КонецЕсли;
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	
	ТаблицаДанныхПоВидуБюджета = ШаблонТаблицыДанныхПоВидуБюджета(Параметры);
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		
		Если Не ИсточникДанных.ЕстьОнЛайновыеПравила Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучатьФактическиеДанные = ИсточникДанных.ПредполагаетФактическиеДанные = "Предполагается"
		                        ИЛИ (ИсточникДанных.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
		                          И  СценарийОтчетаФактическиеДанные)
		                        ИЛИ ИсточникДанных.ПредполагаетИсполнениеБюджета = "Предполагается"
		                        ИЛИ (ИсточникДанных.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета"
		                          И  СценарийОтчетаИсполнениеБюджета);
		
		Если Не ИсточникДанных.ПривилегированныйРежим = Неопределено И ИсточникДанных.ПривилегированныйРежим Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		Если ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты И ПолучатьФактическиеДанные Тогда
			ПолучитьФактПоИсточникуДанныхОбороты(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
			Если ИсточникДанных.ЕстьЦелевыеПоказатели = Истина Тогда
				ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
			КонецЕсли;
		ИначеЕсли ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки И ПолучатьФактическиеДанные Тогда
			ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
		ИначеЕсли ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Нефинансовый Тогда
			ПолучитьЗначенияПоИсточникуДанныхНефинансовый(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
		КонецЕсли;
		
		Если Не ИсточникДанных.ПривилегированныйРежим = Неопределено И ИсточникДанных.ПривилегированныйРежим Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкаВидаБюджета = ТаблицаДанныхПоВидуБюджета.Колонки.Найти("СуммаВВалютеНачальныйОстаток");
	Если КолонкаВидаБюджета <> Неопределено Тогда
		КолонкаВидаБюджета.Имя = "СуммаВалНачальныйОстаток";
	КонецЕсли;
	
	Возврат ТаблицаДанныхПоВидуБюджета;
	
КонецФункции

// Расчет с таблицей правил в разрезе идентификаторов источников данных (ИИД) - уникальных схем СКД.
//
// Параметры:
//  ПараметрыДанных - Структура - Отборы, определенные на уровне бюджетного отчета
//  ИсточникиДанных -  Массив - Источников данных вида бюджета
//  ВалютаОтчета    - СправочникСсылка.Валюты - Валюта, в которой необходимо вернуть факт.
//
// Возвращаемое значение:
//  ТаблицаЗначений - фактические данные.
//
Функция РассчитатьФактПоВидуБюджетаАльтернативный(ПараметрыДанных, Знач ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных)
	
	ТипыИсточников = Перечисления.ТипыИсточниковДанныхБюджетирования;
	ИсточникиДанных = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ИсточникиДанных);
	
	КолонкиТаблицыДанных = Неопределено;
	Если Не ПараметрыДанных.Свойство("КолонкиТаблицыДанных", КолонкиТаблицыДанных) Тогда
		КолонкиТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных(ПараметрыДанных.ВидБюджета);
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	// Получаем факт только в разрезе минимальной периодичности
	Периодичности = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Периодичности, КолонкиТаблицыДанных.Периодичности);
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		Если ЗначениеЗаполнено(ИсточникДанных.ПериодичностьСмещения)
		   И ЗначениеЗаполнено(ИсточникДанных.ПериодСмещения) Тогда
			Периодичности.Добавить(ИсточникДанных.ПериодичностьСмещения);
		КонецЕсли;
	КонецЦикла;
	Периодичности = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Периодичности);
	МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(Периодичности);
	
	ПоОрганизациям = Ложь;
	Если Не ПараметрыДанных.Свойство("ПоОрганизациям", ПоОрганизациям) Тогда
		Если КолонкиТаблицыДанных.Измерения.Найти("Организация") <> Неопределено Тогда
			ПоОрганизациям = Истина;
		Иначе
			ПоОрганизациям = Ложь;
		КонецЕсли;
	КонецЕсли;
	ПоПодразделениям = Ложь;
	Если Не ПараметрыДанных.Свойство("ПоПодразделениям", ПоПодразделениям) Тогда
		Если КолонкиТаблицыДанных.Измерения.Найти("Подразделение") <> Неопределено Тогда
			ПоПодразделениям = Истина;
		Иначе
			ПоПодразделениям = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыДанных.Свойство("ПоРегистратору") Тогда
		ПоРегистратору = ПараметрыДанных.ПоРегистратору;
	Иначе
		ПоРегистратору = Ложь;
	КонецЕсли;
	
	// Виды аналитик требуются для применения доп. отборов элементов вида бюджета
	// Это касается отборов по именованным аналитикам, для которых требуются расчетные поля "по имени" вида аналитики.
	ВсеВидыАналитик = КолонкиТаблицыДанных.ВидыАналитик;
	
	// Если аналитика в шапке и установлены отборы, то понадобятся поля
	ДополнительныеФильтрыПоАналитикам = Неопределено;
	Если ПараметрыДанных.Свойство("ДополнительныеФильтрыПоАналитикам", ДополнительныеФильтрыПоАналитикам) 
		И НЕ ДополнительныеФильтрыПоАналитикам = Неопределено Тогда
		Для Каждого ИмяВидаАналитики Из ДополнительныеФильтрыПоАналитикам Цикл 
			ВсеВидыАналитик.Добавить(ФинансоваяОтчетностьПовтИсп.ПолеБюджетногоОтчетаПоИмени(ИмяВидаАналитики.Ключ));
		КонецЦикла;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод(ПараметрыДанных.НачалоПериода, ПараметрыДанных.КонецПериода);
	Параметры = ПараметрыПолученияФактаПоВидуБюджета(ВалютаОтчета, Период, МинимальнаяПериодичность, ВсеВидыАналитик, ПоОрганизациям, ПоПодразделениям, РежимПолученияДанных);
	Параметры.ПоРегистратору = ПоРегистратору;
	
	ТаблицаДанныхПоВидуБюджета = ШаблонТаблицыДанныхПоВидуБюджета(Параметры);
	
	ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
	ДопДанныеВычисляемыеПоля = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.ВычисляемыеПоля;
	ДопДанныеДопНабор        = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
	
	// Для проверки необходимости получения фактических данных
	СценарийОтчета = Неопределено;
	Если ПараметрыДанных <> Неопределено Тогда
		ПараметрыДанных.Свойство("Сценарий", СценарийОтчета);
	КонецЕсли;
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	УказаныНастройкиПоказателей = ПараметрыДанных.Свойство("Показатели");
	ТребуетсяКоличество = Не УказаныНастройкиПоказателей ИЛИ ПараметрыДанных.Показатели.Свойство("Количество");
	ТребуетсяСумма = Не УказаныНастройкиПоказателей ИЛИ ПараметрыДанных.Показатели.Свойство("Сумма");
	
	// Параметры для получения фактических оборотов
	НастройкиСоставаПолей = Неопределено;
	Если Не ПараметрыДанных.Свойство("НастройкиСоставаПолей", НастройкиСоставаПолей) Тогда
		НастройкиСоставаПолей = Новый Структура ;
		НастройкиСоставаПолей.Вставить("ТребуетсяКоличество", ТребуетсяКоличество);
		НастройкиСоставаПолей.Вставить("ТребуетсяСумма", ТребуетсяСумма);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаНачальныйОстаток", Ложь);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаПриход", Истина);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаРасход", Истина);
	КонецЕсли;
	ПараметрыИдентификацииВыраженийОбороты = ШаблонПараметровИдентификацииВыражений(НастройкиСоставаПолей);
	
	ПараметрыФактаОбороты = ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта(Параметры, ПараметрыИдентификацииВыраженийОбороты);
	// Временные переменные для уточнения выражений расчета поля "Валюта"
	ПараметрыФактаОбороты.Вставить("ТребуетсяПересчетПоКурсуУпр",       Ложь);
	ПараметрыФактаОбороты.Вставить("ТребуетсяПересчетПоКурсуРегл",       Ложь);
	
	Если ПараметрыДанных.Свойство("ОтборПоРегистраторуДляВсегоФакта") Тогда
		// Отбор по регистратору для целей оптимизации получения оборотов по статьям, когда
		// известно, что отбор по регистратору должен применяться ко всем статьям всех источников данных.
		// Например, при проверке прохождения документа по лимитам ДС. Результативность зависит от количества правил получения факта.
		ПараметрыФактаОбороты.Вставить("ОтборПоРегистраторуДляВсегоФакта", ПараметрыДанных.ОтборПоРегистраторуДляВсегоФакта);
	КонецЕсли;
	ПереопределениеДатыПересчетаКурса = Ложь;
	Если ПараметрыДанных.Свойство("ПериодКурса") Тогда
		// Для лимитов нужен пересчет в валюту на дату заявки или отчета по лимитам.
		ПереопределениеДатыПересчетаКурса = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФактаОбороты.ДополнительныеФильтрыПоАналитикам, 
		ПараметрыДанных.ДополнительныеФильтрыПоАналитикам);
		
	ПараметрыФактаОбороты.ОграниченияДоступа.РежимПолученияДанных = РежимПолученияДанных;
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОбороты, ПараметрыДанных);
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОбороты.ДополнительныеФильтрыПоИзмерениям, ПараметрыДанных);
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОбороты.ДополнительныеФильтрыПоАналитикам, ПараметрыДанных);
	
	// Параметры для получения фактических остатков
	НастройкиСоставаПолей = Неопределено;
	Если Не ПараметрыДанных.Свойство("НастройкиСоставаПолей", НастройкиСоставаПолей) Тогда
		НастройкиСоставаПолей = Новый Структура ;
		НастройкиСоставаПолей.Вставить("ТребуетсяКоличество", ТребуетсяКоличество);
		НастройкиСоставаПолей.Вставить("ТребуетсяСумма", ТребуетсяСумма);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаНачальныйОстаток", Истина);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаПриход", Ложь);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаРасход", Ложь);
		
		Для каждого ИсточникДанных Из ИсточникиДанных Цикл
			Если ИсточникДанных.ЕстьЦелевыеПоказатели Тогда
				НастройкиСоставаПолей.ТребуетсяСуммаПриход = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПараметрыИдентификацииВыраженийОстатки = ШаблонПараметровИдентификацииВыражений(НастройкиСоставаПолей);
	
	ПараметрыФактаОстатки = ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта(Параметры, ПараметрыИдентификацииВыраженийОстатки);
	// Временные переменные для уточнения выражений расчета поля "Валюта"
	ПараметрыФактаОстатки.Вставить("ТребуетсяПересчетПоКурсуУпр",       Ложь);
	ПараметрыФактаОстатки.Вставить("ТребуетсяПересчетПоКурсуРегл",       Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФактаОстатки.ДополнительныеФильтрыПоАналитикам, 
		ПараметрыДанных.ДополнительныеФильтрыПоАналитикам);
		
	ПараметрыФактаОстатки.ОграниченияДоступа.РежимПолученияДанных = РежимПолученияДанных;
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОстатки, ПараметрыДанных);
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОстатки.ДополнительныеФильтрыПоИзмерениям, ПараметрыДанных);
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОстатки.ДополнительныеФильтрыПоАналитикам, ПараметрыДанных);
	
	ИсточникиДанных.Колонки.Добавить("ВыражениеПериод", ИсточникиДанных.Колонки.ВыражениеПериодаГруппировки.ТипЗначения);
	ИсточникиДанных.Колонки.Добавить("ВыражениеПериодГраница", ИсточникиДанных.Колонки.ВыражениеПериодаГруппировки.ТипЗначения);
	
	// Подготовим вспомогательные данные для получения именованных аналитик 
	ЗапрошенныеВидыАналитик = Параметры.ВидыАналитик;
	ИндексИменИВидовАналитик = Новый Соответствие;
	Для Каждого ЗапрошеннаяАналитика Из ЗапрошенныеВидыАналитик Цикл 
		ИмяИменованнойАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ЗапрошеннаяАналитика);
		
		ПараметрыИдентификацииВыраженийОбороты.ЗначенияПоУмолчаниюДопДанные.Вставить("ИД_ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
		ПараметрыИдентификацииВыраженийОбороты.ЧастиВыражений.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, Новый Массив);
		ПараметрыФактаОбороты.УсловияВыражений.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
		
		ПараметрыИдентификацииВыраженийОстатки.ЗначенияПоУмолчаниюДопДанные.Вставить("ИД_ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
		ПараметрыИдентификацииВыраженийОстатки.ЧастиВыражений.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, Новый Массив);
		ПараметрыФактаОстатки.УсловияВыражений.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
		
		ИндексИменИВидовАналитик.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, ЗапрошеннаяАналитика);
	КонецЦикла;
	
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		Если ИсточникДанных.Объекты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для каждого СтрокаОбъекта Из ИсточникДанных.Объекты Цикл
			Если ТипЗнч(СтрокаОбъекта) = Тип("СправочникСсылка.СтатьиБюджетов")
			 ИЛИ ТипЗнч(СтрокаОбъекта) = Тип("СправочникСсылка.ПоказателиБюджетов")
			 ИЛИ ТипЗнч(СтрокаОбъекта) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
				Для Счетчик = 1 По МаксимальноеКоличествоАналитик Цикл
					ВидАналитики = СтрокаОбъекта["ВидАналитики" + Счетчик];
					Если ЗначениеЗаполнено(ВидАналитики) Тогда
						ИмяИменованнойАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
						
						Если НЕ ИндексИменИВидовАналитик.Получить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики) = Неопределено Тогда
							Продолжить; // Выражение аналитики добавлено
						КонецЕсли;
						
						ПараметрыИдентификацииВыраженийОбороты.ЗначенияПоУмолчаниюДопДанные.Вставить("ИД_ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
						ПараметрыИдентификацииВыраженийОбороты.ЧастиВыражений.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, Новый Массив);
						ПараметрыФактаОбороты.УсловияВыражений.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
						
						ПараметрыИдентификацииВыраженийОстатки.ЗначенияПоУмолчаниюДопДанные.Вставить("ИД_ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
						ПараметрыИдентификацииВыраженийОстатки.ЧастиВыражений.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, Новый Массив);
						ПараметрыФактаОстатки.УсловияВыражений.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
						
						ИндексИменИВидовАналитик.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, ВидАналитики);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗадействованныеДопОтборыОбороты = Новый Соответствие; // Ключ - хеш, Значение - Структура - Идентификаторы + настройки компоновки
	ЗадействованныеДопОтборыОстатки = Новый Соответствие; // Ключ - хеш, Значение - Структура - Идентификаторы + настройки компоновки
	
	ДополнитьИсточникамиДанныхВлияющихСтатей(ИсточникиДанных);
	
	// При обходе источников и заполнении параметров происходит переключение для остатков и оборотов.
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		// При получении данных из самого документа используются НЕ онлайновые 
		Если Не ИсточникДанных.ЕстьОнЛайновыеПравила Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучатьФактическиеДанные = ИсточникДанных.ПредполагаетФактическиеДанные = "Предполагается"
		                        ИЛИ (ИсточникДанных.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
		                          И  СценарийОтчетаФактическиеДанные)
		                        ИЛИ ИсточникДанных.ПредполагаетИсполнениеБюджета = "Предполагается"
		                        ИЛИ (ИсточникДанных.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета"
		                          И  СценарийОтчетаИсполнениеБюджета);
		
		ЭтоОбороты = (ИсточникДанных.ТипИсточника = ТипыИсточников.Обороты);
		ЭтоОстатки = (ИсточникДанных.ТипИсточника = ТипыИсточников.Остатки);
		ЭтоВлияющиеСтатьи = ЗначениеЗаполнено(ИсточникДанных.ПоказательЗависимогоИсточникаДанных);
		ЕстьЦелевые = ИсточникДанных.ЕстьЦелевыеПоказатели;
		ИспользоватьДатуНачала = Параметры.ОстаткиТолькоНаНачалоПериода И Не ЕстьЦелевые;
		
		ДопДанныеТекущегоИсточника = Новый ТаблицаЗначений;
		
		Если ИсточникДанных.ТипИсточника = ТипыИсточников.Нефинансовый Тогда
			
			ПолучитьЗначенияПоИсточникуДанныхНефинансовый(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
			
		Иначе
			
			Если ПолучатьФактическиеДанные Тогда
				// Формирование таблицы периодов с правилами получения факта
				// Каждый источник и все его статьи/показатели получаются в пределах _одного_ периода и набора доп.отборов 
				// Вместо значений периодов, могут подставляться выражения.
				Если ЭтоОбороты И Не ЕстьЦелевые Тогда
					ЗаполняемыеПараметры = ПараметрыФактаОбороты;
					ПараметрыИдентификацииВыражений = ПараметрыИдентификацииВыраженийОбороты;
					ЗадействованныеДопОтборы = ЗадействованныеДопОтборыОбороты;
				ИначеЕсли ЭтоОстатки Или ЕстьЦелевые Тогда
					ЗаполняемыеПараметры = ПараметрыФактаОстатки;
					ПараметрыИдентификацииВыражений = ПараметрыИдентификацииВыраженийОстатки;
					ЗадействованныеДопОтборы = ЗадействованныеДопОтборыОстатки;
					ПараметрыИдентификацииВыражений.ПолучениеОстатковНаГраницуПериода = НЕ ИспользоватьДатуНачала;
					ПараметрыИдентификацииВыражений.ЗначенияПоУмолчанию.ПолучениеОстатковНаГраницуПериода = НЕ ИспользоватьДатуНачала;
				КонецЕсли;
				
				// Обозначим встретившиеся среди источников требования к доступу к данным.
				// Это позволит сократить количество итераций получения фактических данных.
				Если Не ЗаполняемыеПараметры.ОграниченияДоступа.ЕстьПривилегированныйРежим Тогда
					ЗаполняемыеПараметры.ОграниченияДоступа.ЕстьПривилегированныйРежим = ИсточникДанных.ПривилегированныйРежим;
				КонецЕсли;
				Если Не ЗаполняемыеПараметры.ОграниченияДоступа.ЕстьНеПривилегированныйРежим Тогда
					ЗаполняемыеПараметры.ОграниченияДоступа.ЕстьНеПривилегированныйРежим = Не ИсточникДанных.ПривилегированныйРежим;
				КонецЕсли;
				
				// Сформируем коллекцию уникальных доп. отборов, которые указаны в:
				// - Бюджетном отчете
				// - Реквизитах экземпляра бюджета
				// - Операндах вида бюджета.
				СериализованныеНастройки = ОбщегоНазначения.ЗначениеВСтрокуXML(ИсточникДанных.ДополнительныйОтбор.Отбор);
				ХешНастроек = ОбщегоНазначенияУТ.ХешСуммаСтроки(СериализованныеНастройки, ХешФункция.MD5);
				Если ЗадействованныеДопОтборы[ХешНастроек] = Неопределено Тогда
					// Отметим, что уже добавляли, чтобы не усложнять работу оптимизатору запроса СКД
					ЗадействованныеДопОтборы.Вставить(ХешНастроек, 
						Новый Структура("ИД_Источников, Настройки", 
							Новый Массив, 
							ИсточникДанных.ДополнительныйОтбор));
				КонецЕсли; 
				// Уникальные отборы могут применяться в разных источниках, т.к. они определяют еще и уникальный период.
				ЗадействованныеДопОтборы[ХешНастроек].ИД_Источников.Добавить(ИсточникДанных.Идентификатор);
				
				ПараметрыДопДанных            = ЗаполняемыеПараметры.ДополнительныеДанные;
				ЧастиВыражений                = ПараметрыИдентификацииВыражений.ЧастиВыражений;
				ЗначенияПоУмолчанию           = ПараметрыИдентификацииВыражений.ЗначенияПоУмолчанию;
				ЗначенияПоУмолчаниюДопДанные  = ПараметрыИдентификацииВыражений.ЗначенияПоУмолчаниюДопДанные;
			
				// Получим правила получения факта по статьям и показателям
				ТаблицаПравилСтатей = ПравилаПолученияФактаИсточникаДанных(ИсточникДанных, СценарийОтчета);
				Если ДопДанныеДопНабор Тогда
					ДобавитьКолонкиУникальныхИдентификаторов(ТаблицаПравилСтатей, "ПравилоФакта");
				КонецЕсли;
				
				#Область ЗаполнениеТаблицыОбластейДанных
				ИдентификаторыИсточниковДанных = ТаблицаПравилСтатей.ВыгрузитьКолонку("ИдентификаторИсточникаДанных");
				ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыИсточниковДанных);
				
				Если ЕстьЦелевые Тогда
					ЗначенияПоУмолчанию.Период        = Параметры.Период.ДатаОкончания;
				Иначе
					ЗначенияПоУмолчанию.Период        = Параметры.Период.ДатаНачала;
				КонецЕсли;
				ЗначенияПоУмолчанию.НачалоПериода = Параметры.Период.ДатаНачала;
				ЗначенияПоУмолчанию.КонецПериода  = Параметры.Период.ДатаОкончания;
				
				ЗначенияПоУмолчанию.ПривилегированныйРежимИсточника = ИсточникДанных.ПривилегированныйРежим;
				
				Для Каждого ЧастьОдногоВыражения Из ЧастиВыражений Цикл 
					// Идентификаторы для выражений аналитик формируются в таблице доп. данных для каждого правила.
					Если СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеЗаполненияАналитики")
						Или СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеИменованнойАналитики")
						Или СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеПоказателя")
						Или СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеЗаполненияПериодКурса") Тогда
						Продолжить; 
					КонецЕсли;
					
					Если ЧастьОдногоВыражения.Ключ = "ВыражениеПериод"
					 ИЛИ ЧастьОдногоВыражения.Ключ = "ВыражениеПериодГраница" Тогда
						Если ЭтоОстатки Или ЕстьЦелевые Тогда
							Если ИспользоватьДатуНачала Тогда
								ИсточникДанных[ЧастьОдногоВыражения.Ключ] = ИсточникДанных.ВыражениеНачалоПериода;
							Иначе 
								ИсточникДанных[ЧастьОдногоВыражения.Ключ] = ИсточникДанных.ВыражениеКонецПериода;
							КонецЕсли;
						Иначе
							ИсточникДанных[ЧастьОдногоВыражения.Ключ] = ИсточникДанных.ВыражениеПериодаГруппировки;
						КонецЕсли;
					КонецЕсли;
					
					ОбновитьПараметрыИдентификацииВыражений(
						ПараметрыИдентификацииВыражений,
						ЗначенияПоУмолчанию,
						ЧастьОдногоВыражения.Ключ,                  // Имя поля-идентификатора выражения
						ИсточникДанных[ЧастьОдногоВыражения.Ключ]); // Строка выражения
				КонецЦикла;
				
				ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицуИзМассива(ЗаполняемыеПараметры.ОбластиДанных.ТаблицаДанных, 
					ИдентификаторыИсточниковДанных, 
					"ИдентификаторИсточникаДанных", 
					ЗначенияПоУмолчанию);
				
				ЗаполняемыеПараметры.ОбластиДанных.ТаблицаДанных.Свернуть(ЗаполняемыеПараметры.ОбластиДанных.КолонкиСвертки);
				#КонецОбласти 
				
				// Заполним или дополним кэш свойств статей и показателей 
				Если ЗаполняемыеПараметры.ТаблицаПравилСтатей.Количество() = 0 Тогда
					ЗаполняемыеПараметры.ТаблицаПравилСтатей = ТаблицаПравилСтатей;
				Иначе
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПравилСтатей, ЗаполняемыеПараметры.ТаблицаПравилСтатей);
				КонецЕсли;
				
				// Сформируем доп. данные - поля, которые явно не относятся к получаемым данным,
				// но требуются для бюджетирования.
				Если ДопДанныеТекущегоИсточника.Количество() = 0 Тогда
					ДобавитьКолонкиДополнительныхДанных(
						ДопДанныеТекущегоИсточника,
						ИндексИменИВидовАналитик);
				КонецЕсли;
				
				ЗначенияПоУмолчанию.ИД_Источника = ИсточникДанных.Идентификатор;
				ЗначенияПоУмолчанию.ПоказательБюджетов = ИсточникДанных.ПоказательЗависимогоИсточникаДанных;
				
				ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(ТаблицаПравилСтатей,
					ДопДанныеТекущегоИсточника,
					ЗначенияПоУмолчанию,
					ЭтоОбороты И Не ЕстьЦелевые);
					
				КэшРеквизитовДляПолученияСхемы = Новый Структура("ТипОбъектаИсточникаДанных, РазделИсточникаДанных, ИсточникДанных, ХешСхемыКомпоновкиДанных");
					
				// Заполним идентификаторы
				Для Каждого СтрокаДопДанных Из ДопДанныеТекущегоИсточника Цикл
					ЗаполнитьЗначенияСвойств(ЗначенияПоУмолчаниюДопДанные, СтрокаДопДанных);
					
					ЗаполнитьЗначенияСвойств(КэшРеквизитовДляПолученияСхемы, СтрокаДопДанных);
					СтрокаДопДанных.КэшРеквизитовДляПолученияСхемы = КэшРеквизитовДляПолученияСхемы;
					
					Для Каждого ЧастьОдногоВыражения Из ЧастиВыражений Цикл 
						ЭтоВыражениеЗаполненияАналитики = СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеЗаполненияАналитики");
						ЭтоВыражениеИменованнойАналитики = СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеИменованнойАналитики");
						
						ЭтоВыражениеПоказателяКоличество = СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеПоказателяКоличество");
						ЭтоВыражениеПоказателяСумма = СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеПоказателяСумма");
						ЭтоВыражениеПоказателя = ЭтоВыражениеПоказателяКоличество Или ЭтоВыражениеПоказателяСумма;
						
						Если ЭтоВыражениеПоказателя Тогда
							ЭтоПоказательНачальныйОстаток = СтрНайти(ЧастьОдногоВыражения.Ключ, "НачальныйОстаток") > 0;
							ЭтоПоказательПриход = СтрНайти(ЧастьОдногоВыражения.Ключ, "Приход") > 0;
							ЭтоПоказательРасход = СтрНайти(ЧастьОдногоВыражения.Ключ, "Расход") > 0;
						Иначе
							ЭтоПоказательНачальныйОстаток = Ложь;
							ЭтоПоказательПриход = Ложь;
							ЭтоПоказательРасход = Ложь;
						КонецЕсли;
						
						Если НЕ (ЭтоВыражениеЗаполненияАналитики 
							Или ЭтоВыражениеИменованнойАналитики
							Или ЭтоВыражениеПоказателя) Тогда
							Продолжить; // Идентификаторы для других выражений аналитик формируются ранее
						КонецЕсли;
						
						ВыражениеЗаполненияПоля = "";
						Если ЭтоВыражениеЗаполненияАналитики Тогда
							
							Если СтрНайти(ЧастьОдногоВыражения.Ключ, "Валюта")
								Или СтрНайти(ЧастьОдногоВыражения.Ключ, "ВалютаХранения") Тогда
								
								ЭтоВалютаХранения = СтрНайти(ЧастьОдногоВыражения.Ключ, "ВалютаХранения") > 0;
								
								ПараметрыВыражения = ВыражениеЗаполненияАналитикиВалюта(ЗаполняемыеПараметры, СтрокаДопДанных, ЭтоВалютаХранения);
								
								// Если требуется хотя бы для одного случая, то - Истина
								Если Не ЗаполняемыеПараметры.ПоВалютам Тогда
									ЗаполняемыеПараметры.ПоВалютам = ПараметрыВыражения.ПоВалютам;
								КонецЕсли;
								ВыражениеЗаполненияПоля = ПараметрыВыражения.ВыражениеЗаполненияПоля;
								
							ИначеЕсли СтрНайти(ЧастьОдногоВыражения.Ключ, "ЕдиницаИзмерения") Тогда
								
								ПараметрыВыражения = ВыражениеЗаполненияАналитикиЕдиницаИзмерения(ЗаполняемыеПараметры.ПоЕдиницамИзмерения, СтрокаДопДанных);
								
								ЗаполняемыеПараметры.ПоЕдиницамИзмерения = ПараметрыВыражения.ПоЕдиницамИзмерения;
								ВыражениеЗаполненияПоля = ПараметрыВыражения.ВыражениеЗаполненияПоля;
								
							Иначе
								
								НомерАналитики = Число(Прав(ЧастьОдногоВыражения.Ключ, 1));
								Если НЕ СтрокаДопДанных.СтатьяБюджетовДляРасчетаПоказателя Тогда
									ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоДопДанным(НомерАналитики, СтрокаДопДанных);
									ВыражениеЗаполненияПоля = ВыражениеЗначенияАналитикиПоИсточникуИВидуАналитики(ВыражениеЗаполненияПоля, "ВидАналитики" + НомерАналитики);
								Иначе
									// В данном случае получение аналитики может переопределятся в регистре СвязиПоказателейБюджетов.
									ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоУсловиюТрансляцииСвязейСтатейИПоказателей(НомерАналитики, СтрокаДопДанных);
								КонецЕсли;
								
							КонецЕсли;
							
							ОбновитьПараметрыИдентификацииВыражений(
								ПараметрыИдентификацииВыражений,
								ЗначенияПоУмолчаниюДопДанные,
								ЧастьОдногоВыражения.Ключ, // Имя поля-идентификатора выражения
								ВыражениеЗаполненияПоля,  // Строка выражения
								,
								Истина);
								
						ИначеЕсли ЭтоВыражениеИменованнойАналитики Тогда
							
							ЗапрошенныйВидАналитики = ИндексИменИВидовАналитик[ЧастьОдногоВыражения.Ключ];
							
							Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл 
								Если НЕ СтрокаДопДанных.СтатьяБюджетовДляРасчетаПоказателя Тогда
									ВидАналитикиПравила = СтрокаДопДанных["ВидАналитики" + НомерАналитики];
								Иначе
									// Вид аналитики определяется по показателю.
									ВидАналитикиПравила = СтрокаДопДанных["СвязиПоказателейБюджетов_ВидАналитики" + НомерАналитики];
								КонецЕсли;
								
								Если ЗапрошенныйВидАналитики = ВидАналитикиПравила Тогда
									
									Если НЕ СтрокаДопДанных.СтатьяБюджетовДляРасчетаПоказателя Тогда
										ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоДопДанным(НомерАналитики, СтрокаДопДанных);
										ВыражениеЗаполненияПоля = ВыражениеЗначенияАналитикиПоИсточникуИВидуАналитики(ВыражениеЗаполненияПоля, "ВидАналитики" + НомерАналитики);
									Иначе
										// В данном случае получение аналитики может переопределятся в регистре СвязиПоказателейБюджетов.
										ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоУсловиюТрансляцииСвязейСтатейИПоказателей(НомерАналитики, СтрокаДопДанных);
									КонецЕсли;
									
									ОбновитьПараметрыИдентификацииВыражений(
										ПараметрыИдентификацииВыражений,
										ЗначенияПоУмолчаниюДопДанные,
										ЧастьОдногоВыражения.Ключ, // Имя поля-идентификатора выражения
										ВыражениеЗаполненияПоля,  // Строка выражения
										,
										Истина);
										
									Прервать;
								Иначе
									Продолжить;
								КонецЕсли;
							КонецЦикла;
							
						ИначеЕсли ЭтоВыражениеПоказателя Тогда
							
							ИмяВыраженияВДопДанных = ЧастьОдногоВыражения.Ключ;
							ИмяВыраженияВДопДанных = СтрЗаменить(ИмяВыраженияВДопДанных, "НачальныйОстаток", "");
							ИмяВыраженияВДопДанных = СтрЗаменить(ИмяВыраженияВДопДанных, "Приход", "");
							ИмяВыраженияВДопДанных = СтрЗаменить(ИмяВыраженияВДопДанных, "Расход", "");
							
							Если ЭтоВыражениеПоказателяСумма Тогда
								ПараметрыВыражения = ВыражениеЗаполненияПоказателяСумма(ЗаполняемыеПараметры, СтрокаДопДанных);
								
								// Если требуется хотя бы для одного случая, то - Истина
								Если Не ЗаполняемыеПараметры.ТребуетсяПересчетПоКурсу Тогда
									ЗаполнитьЗначенияСвойств(ЗаполняемыеПараметры, ПараметрыВыражения);
								КонецЕсли;
								ВыражениеЗаполненияПоля = ПараметрыВыражения.ВыражениеЗаполненияПоля;
							Иначе
								ВыражениеЗаполненияПоля = СтрокаДопДанных[ИмяВыраженияВДопДанных];
							КонецЕсли;
							
							// Уточним выражение неиспользуемых в источнике полей
							Если ЭтоОбороты И Не ЭтоВлияющиеСтатьи И Не ЭтоПоказательПриход 
								Или ЭтоОстатки И Не ЭтоПоказательНачальныйОстаток
								Или ЭтоВлияющиеСтатьи И СтрокаДопДанных.Расход И Не ЭтоПоказательРасход
								Или ЭтоВлияющиеСтатьи И Не СтрокаДопДанных.Расход И Не ЭтоПоказательПриход Тогда
								ВыражениеЗаполненияПоля = "0";
							КонецЕсли;
							
							ОбновитьПараметрыИдентификацииВыражений(
								ПараметрыИдентификацииВыражений,
								ЗначенияПоУмолчаниюДопДанные,
								ЧастьОдногоВыражения.Ключ, // Имя поля-идентификатора выражения
								ВыражениеЗаполненияПоля,   // Строка выражения
								Истина);
								
							Если ЭтоВыражениеПоказателяСумма Тогда
								СтрокаДопДанных.ТребуетсяПересчетПоКурсу = ПараметрыВыражения.ТребуетсяПересчетПоКурсу;
							КонецЕсли;
								
							Если ЗаполняемыеПараметры.ТребуетсяПересчетПоКурсу Тогда
								ПараметрыВыражения = ВыражениеЗаполненияАналитикиВалюта(ЗаполняемыеПараметры, СтрокаДопДанных, Истина);
								
								// Если требуется хотя бы для одного случая, то - Истина
								Если Не ЗаполняемыеПараметры.ПоВалютам Тогда
									ЗаполняемыеПараметры.ПоВалютам = ПараметрыВыражения.ПоВалютам;
								КонецЕсли;
								ВыражениеЗаполненияПоля = ПараметрыВыражения.ВыражениеЗаполненияПоля;
								
								ОбновитьПараметрыИдентификацииВыражений(
									ПараметрыИдентификацииВыражений,
									ЗначенияПоУмолчаниюДопДанные,
									"ВыражениеЗаполненияАналитикиВалютаХранения", // Имя поля-идентификатора выражения
									ВыражениеЗаполненияПоля);// Строка выражения
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ЗаполнитьЗначенияСвойств(СтрокаДопДанных, ЗначенияПоУмолчаниюДопДанные);
				КонецЦикла;
				
				Если ПараметрыДопДанных.ТаблицаДанных.Количество() = 0 Тогда
					ДобавитьКолонкиДополнительныхДанных(ПараметрыДопДанных.ТаблицаДанных, ИндексИменИВидовАналитик);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДопДанныеТекущегоИсточника, ПараметрыДопДанных.ТаблицаДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Источники данных статей содержат правила факта и данные получать требуется
	Если ПараметрыФактаОбороты.ОбластиДанных.ТаблицаДанных.Количество() > 0 Тогда
		СформироватьУсловияВыражений(ПараметрыФактаОбороты, ПараметрыИдентификацииВыраженийОбороты);
		УточнитьУсловияВыраженийДопДанныхСУчетомВыраженийОбластей(ПараметрыФактаОбороты, Ложь);
		УточнитьМаксимальныйНомерАналитики(ПараметрыФактаОбороты);
		
		ПараметрыФактаОбороты.ДополнительныеДанные.Вид = ВидДопДанных;
		
		// Применим исполняемые отборы факта
		СформироватьСводныйДопОтборПоИсточникамДанных(ЗадействованныеДопОтборыОбороты, ПараметрыФактаОбороты, Ложь);
		
		СопоставитьИерархическиеИсточникиДанных(ПараметрыФактаОбороты);
		
		ФактическиеДанныеПоСтатьям = ФактическиеДанныеИзИсточников("ПравилаПолученияФактаПоСтатьямБюджетов", ПараметрыФактаОбороты);
		Для Каждого КолонкаФакта Из ФактическиеДанныеПоСтатьям.Колонки Цикл 
			КолонкаФакта.Имя = СтрЗаменить(КолонкаФакта.Имя, "СуммаВалютаУпр", "Сумма");
			КолонкаФакта.Имя = СтрЗаменить(КолонкаФакта.Имя, "СуммаВалюта", "СуммаВал");
		КонецЦикла;
		
		Если ПараметрыФактаОбороты.ТребуетсяПересчетПоКурсу И ФактическиеДанныеПоСтатьям.Количество() > 0 Тогда
			Если ПереопределениеДатыПересчетаКурса Тогда
				ФактическиеДанныеПоСтатьям.ЗаполнитьЗначения(ПараметрыДанных.ПериодКурса, "ПериодКурса");
			КонецЕсли;
			
			ПересчитатьТаблицуДанныхВВалюту(ФактическиеДанныеПоСтатьям, Параметры, Истина);
		КонецЕсли;
		
		// Сгенерируем строки фактических данных
		СгенерироватьСтрокиФактическихДанных(ТаблицаДанныхПоВидуБюджета, ФактическиеДанныеПоСтатьям, ПараметрыФактаОбороты, ЗадействованныеДопОтборыОбороты);
	КонецЕсли;
	
	// Источники данных показателей содержат правила факта и данные получать требуется
	Если ПараметрыФактаОстатки.ОбластиДанных.ТаблицаДанных.Количество() > 0 Тогда
		СформироватьУсловияВыражений(ПараметрыФактаОстатки, ПараметрыИдентификацииВыраженийОстатки);
		УточнитьУсловияВыраженийДопДанныхСУчетомВыраженийОбластей(ПараметрыФактаОстатки, ПараметрыФактаОстатки.ОстаткиТолькоНаНачалоПериода);
		УточнитьМаксимальныйНомерАналитики(ПараметрыФактаОстатки);
		
		ПараметрыФактаОстатки.ДополнительныеДанные.Вид = ВидДопДанных;
		
		СформироватьСводныйДопОтборПоИсточникамДанных(ЗадействованныеДопОтборыОстатки, ПараметрыФактаОстатки, Истина);
		
		// Применим исполняемые отборы факта
		СопоставитьИерархическиеИсточникиДанных(ПараметрыФактаОстатки);
		
		ФактическиеДанныеПоПоказателям = ФактическиеДанныеИзИсточников("ПравилаПолученияФактаПоПоказателямБюджетов", ПараметрыФактаОстатки);
		Для Каждого КолонкаФакта Из ФактическиеДанныеПоПоказателям.Колонки Цикл 
			КолонкаФакта.Имя = СтрЗаменить(КолонкаФакта.Имя, "СуммаВалютаУпр", "Сумма");
			КолонкаФакта.Имя = СтрЗаменить(КолонкаФакта.Имя, "СуммаВалюта", "СуммаВал");
		КонецЦикла;
		
		Если ПараметрыФактаОстатки.ТребуетсяПересчетПоКурсу И ФактическиеДанныеПоПоказателям.Количество() > 0 Тогда
			ПересчитатьТаблицуДанныхВВалюту(ФактическиеДанныеПоПоказателям, Параметры, Истина);
		КонецЕсли;
		
		// Сгенерируем строки фактических данных, для расчета начального остатка показателей
		СгенерироватьСтрокиФактическихДанных(ТаблицаДанныхПоВидуБюджета, ФактическиеДанныеПоПоказателям, ПараметрыФактаОстатки, ЗадействованныеДопОтборыОстатки);

	КонецЕсли;
	
	Возврат ТаблицаДанныхПоВидуБюджета;
	
КонецФункции

Процедура СформироватьСводныйДопОтборПоИсточникамДанных(Знач ЗадействованныеДопОтборы, Знач ПараметрыФакта, ИсключитьСценарий = Ложь)
	
	Перем ГруппаОтборИсточникаДанных, ГруппаОтборИсточниковДанных, ДопОтборыФакта, ЗадействованныйДопОтбор;
	
	// Заполним настройки доп. отборов в параметрах получения факта
	Если ПараметрыФакта.ДополнительныйОтбор = Неопределено Тогда
		ПараметрыФакта.ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
	КонецЕсли;
	ДопОтборыФакта = ПараметрыФакта.ДополнительныйОтбор.Отбор;
	
	ДопОтборыФакта.Элементы.Очистить();
	
	ГруппаОтборИсточниковДанных = ФинансоваяОтчетностьСервер.НовыйОтбор(ДопОтборыФакта,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборИсточниковДанных.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтборИсточниковДанных.Использование = Истина;
	ГруппаОтборИсточниковДанных.Представление = "ОтборВсехИсточниковДанных";
	
	Для Каждого ЗадействованныйДопОтбор Из ЗадействованныеДопОтборы Цикл 
		// Создадим совокупный отбор
		ГруппаОтборИсточникаДанных = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаОтборИсточниковДанных,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборИсточникаДанных.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаОтборИсточникаДанных.Использование = Истина;
		ГруппаОтборИсточникаДанных.Представление = "ОтборИсточникаДанных_" + ЗадействованныйДопОтбор.Ключ;
		
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ЗадействованныйДопОтбор.Значение.Настройки.Отбор, ГруппаОтборИсточникаДанных, Истина);
		ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаОтборИсточникаДанных, "ИД_Источника", ЗадействованныйДопОтбор.Значение.ИД_Источников, , ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЦикла;
	
	// Заполним отборы значениями 
	БюджетнаяОтчетностьВыводСервер.ДополнитьНастройкиСКДПередВыводомАльтернативный(ПараметрыФакта.ДополнительныйОтбор, ПараметрыФакта, ИсключитьСценарий);
	
	Если ИсключитьСценарий Тогда
		
		// Также доп. отбор по сценариям не должен срабатывать для получения начального остатка расчетного показателя
		// (т.к. для расчетного показателя нет сценария и типа правил "исполнение бюджета", а конечный остаток по целевому 
		// показателю рассчитывается как начальный остаток по сценарию Факт и данные влияющих статей по тому сценарию, который либо задан в отборе либо в структуре отчета либо в шапке отчета (экземпляра бюджета),
		// но должен срабатывать для влияющих статей на расчетный показатель и для целевых показателей
		ЭлементыОтбораОстатки = КомпоновкаДанныхКлиентСервер.ПолучитьЭлементыОтбора(ПараметрыФакта.ДополнительныйОтбор.Отбор);
		ЭлементыОтбораСценарийКУдалению = Новый Массив;
		Для каждого ЭлементОтбора Из ЭлементыОтбораОстатки Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "Сценарий" Тогда
				
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Строка")
					И СтрНайти(ЭлементОтбора.ПравоеЗначение, "<заполнить") Тогда
					// Настраиваемые отборы пропускаем
					Продолжить;
				КонецЕсли;
				Если НЕ ЭлементОтбора.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				// Поместим элемент отбора по сценарию в группу ИЛИ, в ту же группу добавим группу И с двумя отборами: заполнен показатель бюджетов и не заполнена статья бюджетов
				// (т.к. для влияющих статей, ровно как и для целевого показателя, будет заполнена и статья и показатель)
				Если ЭлементОтбора.Родитель = Неопределено Тогда
					ЭлементыОтбораРодителя = ПараметрыФакта.ДополнительныйОтбор.Отбор.Элементы;
				Иначе
					ЭлементыОтбораРодителя = ЭлементОтбора.Родитель.Элементы;
				КонецЕсли;
				ГруппаИЛИ = ЭлементыОтбораРодителя.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаИЛИ.Использование = Истина;
				ГруппаИЛИ.Представление = НСтр("ru = 'Отбор по сценариям при получении факта применяется только для статей (включая влияющие на показатель статьи) и целевые показатели'");
				
				НовыйЭлементОтбораСценарий = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлементОтбораСценарий, ЭлементОтбора,"ЛевоеЗначение, ВидСравнения, ПравоеЗначение, Использование, Представление");
				
				ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				ГруппаИ.Использование = Истина;
				
				НовыйЭлементОтбораНеСтатья = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбораНеСтатья.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяБюджетов");
				НовыйЭлементОтбораНеСтатья.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				НовыйЭлементОтбораНеСтатья.Использование = Истина;
				
				НовыйЭлементОтбораРасчетныйПоказатель = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбораРасчетныйПоказатель.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоказательБюджетов");
				НовыйЭлементОтбораРасчетныйПоказатель.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
				НовыйЭлементОтбораРасчетныйПоказатель.Использование = Истина;
				
				ЭлементыОтбораСценарийКУдалению.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		Для каждого УдаляемыйЭлементОтбора Из ЭлементыОтбораСценарийКУдалению Цикл
			Если УдаляемыйЭлементОтбора.Родитель = Неопределено Тогда
				ЭлементыОтбораРодителя = ПараметрыФакта.ДополнительныйОтбор.Отбор.Элементы;
			Иначе
				ЭлементыОтбораРодителя = УдаляемыйЭлементОтбора.Родитель.Элементы;
			КонецЕсли;
			ЭлементыОтбораРодителя.Удалить(УдаляемыйЭлементОтбора);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьИерархическиеИсточникиДанных(ПараметрыФакта)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаСопоставления = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолучитьМакет("ИерархияИсточниковДанныхБюджетирования");
	МакетСопоставления = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СхемаСопоставления, СхемаСопоставления.НастройкиПоУмолчанию);
		
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаДопДанных", ПараметрыФакта.ДополнительныеДанные.ТаблицаДанных);
		
	ПараметрыФакта.ИерархияИсточниковДанных.ТаблицаСопоставлений = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетСопоставления, ВнешниеНаборыДанных);
	
	СопоставлениеДляОтборов = ПараметрыФакта.ИерархияИсточниковДанных.СопоставлениеДляОтборов;
	Для Каждого Сопоставление Из ПараметрыФакта.ИерархияИсточниковДанных.ТаблицаСопоставлений Цикл 
		Если СопоставлениеДляОтборов[Сопоставление.ИсточникДанныхИсходный] = Неопределено Тогда
			Отбор = Новый Структура("ИсточникДанныхИсходный", Сопоставление.ИсточникДанныхИсходный);
			НайденныеСтроки = ПараметрыФакта.ИерархияИсточниковДанных.ТаблицаСопоставлений.НайтиСтроки(Отбор);
			
			МассивДочернихИсточников = Новый Массив;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				МассивДочернихИсточников.Добавить(НайденнаяСтрока.ИсточникДанных);
			КонецЦикла;
			
			СопоставлениеДляОтборов.Вставить(Сопоставление.ИсточникДанныхИсходный, МассивДочернихИсточников);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим сопоставления для кор.счетов
	ТаблицаКорСчетов = ПараметрыФакта.ДополнительныеДанные.ТаблицаДанных.Скопировать(, "КорСчет");
	ТаблицаКорСчетов.Колонки.КорСчет.Имя = "ИсточникДанных";
	Для Каждого СтрокаТаблицы Из ТаблицаКорСчетов Цикл 
		Если СтрокаТаблицы.ИсточникДанных = Неопределено Тогда
			СтрокаТаблицы.ИсточникДанных = Истина;
		КонецЕсли;
	КонецЦикла;
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаДопДанных", ТаблицаКорСчетов);
		
	ПараметрыФакта.ИерархияИсточниковДанных.ТаблицаСопоставленийКорСчетов = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетСопоставления, ВнешниеНаборыДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает таблицу сценариев с учетом отбора компоновки данных.
//
// Параметры:
// 	 ОтборКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки отбора по сценарию.
// Возвращаемое значение:
//   ТаблицаЗначений - таблица сценариев.
//		* Сценарий - СправочникСсылка.Сценарии - Сценарий.
//		* Валюта - СправочникСсылка.Валюты - Валюта.
//		* ТребоватьУказанияКурсовДляКаждогоПериода - Булево - Признак, что требуется указывать куры для каждого периода. 
//
Функция СценарииСУчетомОтбора(ОтборКомпоновкиДанных)
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НаборДанныхСценарии = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"), "Сценарии");
		
	НаборДанныхСценарии.Запрос = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сценарии.Ссылка КАК Сценарий,
	|	Сценарии.Валюта КАК Валюта,
	|	Сценарии.ТребоватьУказанияКурсовДляКаждогоПериода КАК ТребоватьУказанияКурсовДляКаждогоПериода
	|ИЗ
	|	Справочник.Сценарии КАК Сценарии
	|ГДЕ
	|	НЕ Сценарии.ЭтоГруппа
	|	И НЕ Сценарии.ПометкаУдаления";
	НаборДанныхСценарии.АвтоЗаполнениеДоступныхПолей = Истина;
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(Настройки);
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Сценарий");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Валюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Периодичность");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "ТребоватьУказанияКурсовДляКаждогоПериода");
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, ОтборКомпоновкиДанных);
	
	Возврат ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	
КонецФункции

// Возвращает таблицу соответствия идентификаторов источников данных и сценариев с учетом отбора компоновки данных.
//
// Параметры:
// 	 ИдентификаторыИсточниковДанных - ТаблицаЗначений - Свернутая таблица значений, содержащая только перечисления идентификаторов источников данных.
//		* ИД_Источника - Строка - Идентификатор источника данных таблицы факта.
// 	 ОтборКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки отбора по сценарию.
// Возвращаемое значение:
//   ТаблицаЗначений - таблица сценариев.
//		* Сценарий - СправочникСсылка.Сценарии - Сценарий.
//		* Валюта - СправочникСсылка.Валюты - Валюта.
//		* ТребоватьУказанияКурсовДляКаждогоПериода - Булево - Признак, что требуется указывать куры для каждого периода. 
//
Функция СценарииИдентификаторовИсточниковДанныхСУчетомОтбора(ИдентификаторыИсточниковДанных, ОтборКомпоновкиДанных)
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ИдентификаторыИсточниковДанных", ИдентификаторыИсточниковДанных);
	
	СхемаКомпоновкиДанных     = ФинансоваяОтчетностьСервер.НоваяСхема();
	
	НаборДанныхИдентификаторы = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ИдентификаторыИсточниковДанных");
	
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхИдентификаторы, "ИД_Источника", "ИД_Источника",, Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	
	НаборДанныхСценарии       = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"), "Сценарии");
	
	НаборДанныхСценарии.Запрос = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сценарии.Ссылка КАК Сценарий,
	|	Сценарии.Валюта КАК Валюта,
	|	Сценарии.ТребоватьУказанияКурсовДляКаждогоПериода КАК ТребоватьУказанияКурсовДляКаждогоПериода
	|ИЗ
	|	Справочник.Сценарии КАК Сценарии
	|ГДЕ
	|	НЕ Сценарии.ЭтоГруппа
	|	И НЕ Сценарии.ПометкаУдаления";
	
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхСценарии, "Сценарий", "Сценарий",, Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхСценарии, "Валюта", "Валюта",, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхСценарии, "ТребоватьУказанияКурсовДляКаждогоПериода", "ТребоватьУказанияКурсовДляКаждогоПериода",, Новый ОписаниеТипов("Булево"));
	
	ФинансоваяОтчетностьСервер.НоваяСвязьНаборов(СхемаКомпоновкиДанных,
	                                             "ИдентификаторыИсточниковДанных",
	                                             "Сценарии",
	                                             "ИСТИНА",
	                                             "ИСТИНА");
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(Настройки);
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "ИД_Источника");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Сценарий");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Валюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "ТребоватьУказанияКурсовДляКаждогоПериода");
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, ОтборКомпоновкиДанных);
	
	СценарииИдентификаторовИсточников = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
	СценарииИдентификаторовИсточников.Индексы.Добавить("ИД_Источника");
	
	Возврат СценарииИдентификаторовИсточников;
	
КонецФункции

Процедура СгенерироватьСтрокиФактическихДанных(ТаблицаДанныхПоВидуБюджета, ФактическиеДанные, ПараметрыФакта, ЗадействованныеДопОтборы)
	
	ИдентификаторыИсточниковДанных = ФактическиеДанные.Скопировать(, "ИД_Источника");
	ИдентификаторыИсточниковДанных.Свернуть("ИД_Источника", "");
	
	СформироватьСводныйДопОтборПоИсточникамДанных(ЗадействованныеДопОтборы, ПараметрыФакта, Ложь);
	СценарииИсточниковДанных = СценарииИдентификаторовИсточниковДанныхСУчетомОтбора(ИдентификаторыИсточниковДанных, ПараметрыФакта.ДополнительныйОтбор);
	
	Для каждого СтрокаФакт Из ФактическиеДанные Цикл
		// 1. Добавление строк для полученных сценариев НЕ выполняется для статей бюджетов, полученных независимо от показателя,
		// а также статей бюджетов, полученных как влияющие на расчетный показатель. Для них добавляются строки по тому сценарию,
		// по которому они были получены (фактические данные или исполнение бюджета).
		// 2. Добавление строк для полученных сценариев выполняется только для расчетных и целевых показателей, причем, если
		// сценарий, по которому было получено значение показателя = исполнение бюджета, то добавляются строки только по сценарию исполнение бюджета
		// (для не задвоения данных при указании в отчете фактического сценария и сценария исполнения бюджета) - см. методы получения неоптимизированного факта.
		Если НЕ ЗначениеЗаполнено(СтрокаФакт.ПоказательБюджетов)
		 ИЛИ ТипЗнч(СтрокаФакт.СтатьяБюджетов) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
			НоваяСтрокаФактическихДанных = ТаблицаДанныхПоВидуБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаФактическихДанных, СтрокаФакт);
			
		Иначе
			Если СтрокаФакт.Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
				НоваяСтрокаФактическихДанных = ТаблицаДанныхПоВидуБюджета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаФактическихДанных, СтрокаФакт);
			Иначе
				СценарииИсточника = СценарииИсточниковДанных.НайтиСтроки(Новый Структура("ИД_Источника", СтрокаФакт.ИД_Источника));
				Для каждого СтрокаСценарии Из СценарииИсточника Цикл
					Если СтрокаСценарии.Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрокаФактическихДанных = ТаблицаДанныхПоВидуБюджета.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаФактическихДанных, СтрокаФакт);
					НоваяСтрокаФактическихДанных.Сценарий = СтрокаСценарии.Сценарий;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыражениеЗаполненияАналитикиВалюта(ПараметрыПолученияФакта, Знач СтрокаДопДанных, ЭтоВалютаХранения = Ложь)
	
	ПоВалютам = Ложь;
	ВыражениеЗаполненияПоля = "";
	ПрефиксПоиска = ПрефиксПоиска(СтрокаДопДанных.РазделИсточникаДанных, "Валюта");
	
	Если ПараметрыПолученияФакта.ВозвращатьСуммуВВалюте И СтрокаДопДанных.ЗаполнениеВалюты <> "НеЗаполнять" Тогда
		Если Не ПараметрыПолученияФакта.ПоВалютам Тогда
			ПоВалютам = Истина;
		КонецЕсли;
		
		ВВалютеОтчета = Ложь;
		Если СтрокаДопДанных.СтатьяБюджетовДляРасчетаПоказателя
			И НЕ ЭтоВалютаХранения Тогда
			// Валюта может переопределятся по аналитике показателя.
			ВыражениеЗаполненияПоля = ВыражениеЗаполненияВалютыПоУсловиюТрансляцииСвязейСтатейИПоказателей(СтрокаДопДанных);
			Если НЕ ВыражениеЗаполненияПоля = "&ВалютаОтчета" Тогда
				ПоВалютам = Истина;
			КонецЕсли;
		ИначеЕсли СтрокаДопДанных.ЗаполнениеВалюты = "ОпределяетсяПоАналитике" Тогда
			ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоДопДанным(СтрокаДопДанных.АдресАналитикиВалюта, СтрокаДопДанных);
			
			Если ВыражениеЗаполненияПоля = "" Тогда
				// НЕ РасширенныйРежимНастройкиЗаполненияАналитики и ЗаполнятьУказаннымЗначениемАналитику
				ВыражениеЗаполненияПоля = "&ВалютаОтчета";
			Иначе
				ВыражениеЗаполненияПоля = ВыражениеЗаполненияПоля + "." + СтрокаДопДанных.ПолеВалютыАналитики;
			КонецЕсли;
		ИначеЕсли СтрокаДопДанных.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных" 
			Или ЭтоВалютаХранения Тогда
			СхемаКомпоновкиДанныхПравила = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(СтрокаДопДанных.КэшРеквизитовДляПолученияСхемы);
			
			ПоляНабора = СхемаКомпоновкиДанныхПравила.НаборыДанных[0].Поля;
			
			ВВалютеИсточника = Истина;
			Если СтрокаДопДанных.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет 
				И Не СтрокаДопДанных.ИсточникВалютный 
				Или ПараметрыПолученияФакта.Свойство("ТребуетсяПересчетПоКурсуРегл") И ПараметрыПолученияФакта.ТребуетсяПересчетПоКурсуРегл
				Тогда
					ВыражениеЗаполненияПоля = "&ВалютаРегл";
					ВВалютеИсточника = Ложь;
			ИначеЕсли ПараметрыПолученияФакта.Свойство("ТребуетсяПересчетПоКурсуУпр") И ПараметрыПолученияФакта.ТребуетсяПересчетПоКурсуУпр Тогда
				ВыражениеЗаполненияПоля = "&ВалютаУпр";
				ВВалютеИсточника = Ложь;
			КонецЕсли;
			
			Если ВВалютеИсточника Тогда
				Если ПоляНабора.Найти(ПрефиксПоиска + "Валюта") <> Неопределено Тогда
					ВыражениеЗаполненияПоля = ПрефиксПоиска + "Валюта";
				Иначе
					ВВалютеОтчета = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаДопДанных.ЗаполнениеВалюты = "ОпределяетсяВалютойОтчета" Тогда
			ВВалютеОтчета = Истина;
		КонецЕсли;
		
		Если ВВалютеОтчета Тогда
			ВыражениеЗаполненияПоля = "&ВалютаОтчета";
		КонецЕсли;
	КонецЕсли;
	
	ВыражениеЗаполненияАналитикиВалюта = Новый Структура("ВыражениеЗаполненияПоля, ПоВалютам", 
		ВыражениеЗаполненияПоля, ПоВалютам);
	
	Возврат ВыражениеЗаполненияАналитикиВалюта;
	
КонецФункции

Функция ВыражениеЗаполненияАналитикиЕдиницаИзмерения(Знач ПоЕдиницамИзмерения, Знач СтрокаДопДанных)
	
	Перем ВыражениеЗаполненияПоля;
	
	ВыражениеЗаполненияПоля = "";
	Если СтрокаДопДанных.ЗаполнениеЕдиницыИзмерения <> "НеЗаполнять" Тогда
		Если Не ПоЕдиницамИзмерения Тогда
			ПоЕдиницамИзмерения = Истина;
		КонецЕсли;
		
		Если СтрокаДопДанных.ЗаполнениеЕдиницыИзмерения = "ОпределяетсяПоАналитике" Тогда
			ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоДопДанным(СтрокаДопДанных.АдресАналитикиЕдиницаИзмерения, СтрокаДопДанных);
			
			Если ВыражениеЗаполненияПоля = "" Тогда
				// НЕ РасширенныйРежимНастройкиЗаполненияАналитики и ЗаполнятьУказаннымЗначениемАналитику
				ВыражениеЗаполненияПоля = "НЕОПРЕДЕЛЕНО";
			Иначе
				ВыражениеЗаполненияПоля = ВыражениеЗаполненияПоля + "." + СтрокаДопДанных.ПолеЕдиницыИзмеренияАналитики;
			КонецЕсли;
		ИначеЕсли СтрокаДопДанных.ЗаполнениеЕдиницыИзмерения = "ФиксированноеЗначение" Тогда 
			ВыражениеЗаполненияПоля = "ЕдиницаИзмерения";
		КонецЕсли;
	КонецЕсли;
	
	ВыражениеЗаполненияАналитикиЕдиницаИзмерения = Новый Структура("ВыражениеЗаполненияПоля, ПоЕдиницамИзмерения", 
		ВыражениеЗаполненияПоля, ПоЕдиницамИзмерения);
	
	Возврат ВыражениеЗаполненияАналитикиЕдиницаИзмерения;
	
КонецФункции

Функция ВыражениеЗаполненияАналитикиПоДопДанным(Знач НомерАналитики, Знач СтрокаДопДанных)
	
	ВыражениеЗаполненияПоля = "";
	
	Если СтрокаДопДанных.РасширенныйРежимНастройкиЗаполненияАналитики 
		И СтрокаДопДанных["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] Тогда
		ВыражениеЗаполненияПоля = "ЗначениеАналитики" + НомерАналитики;
	Иначе
		ВыражениеЗаполненияПоля = СтрокаДопДанных["ВыражениеЗаполненияАналитики" + НомерАналитики];
	КонецЕсли;
	
	Возврат ВыражениеЗаполненияПоля;

КонецФункции

Функция ВыражениеЗаполненияАналитикиПоУсловиюТрансляцииСвязейСтатейИПоказателей(Знач НомерАналитикиПоказателя, Знач СтрокаДопДанных)
	
	Если СтрокаДопДанных.СвязиПоказателейБюджетов_КоличествоИспользуемыхАналитик < НомерАналитикиПоказателя Тогда
		ИтоговоеВыражение = ВыражениеПустогоЗначенияАналитики();
	ИначеЕсли НЕ СтрокаДопДанных["СвязиПоказателейБюджетов_ТранслироватьАналитику" + НомерАналитикиПоказателя] Тогда
		ИтоговоеВыражение = "СвязиПоказателейБюджетов_Аналитика" + НомерАналитикиПоказателя;
	Иначе
		НомерАналитикиСтатьи = СтрокаДопДанных["СвязиПоказателейБюджетов_АдресТрансляцииАналитики" + НомерАналитикиПоказателя];
		Если НЕ ЗначениеЗаполнено(НомерАналитикиСтатьи) Тогда
			ИтоговоеВыражение = ВыражениеПустогоЗначенияАналитики();
		Иначе
			// Выражение значение соответствует выражению для статьи, а проверка по типу по виду аналитики показателя бюджетов.
			ЗначениеАналитикиПоПравиламСтатьи = ВыражениеЗаполненияАналитикиПоДопДанным(НомерАналитикиСтатьи, СтрокаДопДанных);
			ЗначениеАналитикиПоПравиламСтатьи = ВыражениеЗначенияАналитикиПоИсточникуИВидуАналитики(ЗначениеАналитикиПоПравиламСтатьи,
				"СвязиПоказателейБюджетов_ВидАналитики" + НомерАналитикиПоказателя);
			Если НЕ ЗначениеЗаполнено(ЗначениеАналитикиПоПравиламСтатьи) Тогда
				ЗначениеАналитикиПоПравиламСтатьи = ВыражениеПустогоЗначенияАналитики();
			КонецЕсли;
			ИтоговоеВыражение = ЗначениеАналитикиПоПравиламСтатьи;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИтоговоеВыражение;
	
КонецФункции

Функция ВыражениеЗаполненияВалютыПоУсловиюТрансляцииСвязейСтатейИПоказателей(Знач СтрокаДопДанных)
	
	Если НЕ СтрокаДопДанных.СвязиПоказателейБюджетов_ВалютаОпределяетсяАналитикой Тогда
		ИтоговоеВыражение = "&ВалютаОтчета";
	Иначе
		НомерАналитикиПоказателя = СтрокаДопДанных.СвязиПоказателейБюджетов_АдресАналитикиВалюта;
		
		Если НЕ СтрокаДопДанных["СвязиПоказателейБюджетов_ТранслироватьАналитику" + НомерАналитикиПоказателя] Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаДопДанных["СвязиПоказателейБюджетов_Аналитика" + НомерАналитикиПоказателя]) Тогда
				ИтоговоеВыражение = "&ВалютаОтчета";
			Иначе
				ПолеВалютыАналитики = СтрокаДопДанных.СвязиПоказателейБюджетов_ПолеВалютыАналитики;
				ИтоговоеВыражение = "СвязиПоказателейБюджетов_Аналитика" + НомерАналитикиПоказателя + "." + ПолеВалютыАналитики;
			КонецЕсли;
		Иначе
			НомерАналитикиСтатьи = СтрокаДопДанных["СвязиПоказателейБюджетов_АдресТрансляцииАналитики" + НомерАналитикиПоказателя];
			ВидАналитикиСтатьи = СтрокаДопДанных["ВидАналитики" + НомерАналитикиСтатьи];
			// Проверка на возможность обращения к полю валюты
			ПараметрыЗаполненияВалютыВидаАналитики = БюджетированиеПовтИсп.ПараметрыЗаполненияВалютыВидаАналитики(ВидАналитикиСтатьи);
			Если НЕ ПараметрыЗаполненияВалютыВидаАналитики.УчитыватьПоВалюте Тогда
				ИтоговоеВыражение = "&ВалютаОтчета";
			Иначе
				ПолеВалютыАналитики = ПараметрыЗаполненияВалютыВидаАналитики.ЗаполнениеВалюты;
				ЗначениеАналитикиПоПравиламСтатьи = ВыражениеЗаполненияАналитикиПоДопДанным(НомерАналитикиСтатьи, СтрокаДопДанных);
				Если НЕ ЗначениеЗаполнено(ЗначениеАналитикиПоПравиламСтатьи) Тогда
					ИтоговоеВыражение = "&ВалютаОтчета";
				Иначе
					ВыражениеСКонтролемТипа = "
					|Выбор 
					// Приведение пустых к значению Неопределено - Null, Неопределено, ПустаяСсылка
					|	Когда НЕ ЗначениеЗаполнено(%1) Тогда %3
					// Проверка на соответствие значения ожидаемому типу
					|	Когда НЕ ТипЗначения(%1) В (БюджетированиеПовтИсп.ТипыВидаАналитики(ЕСТЬNULL(%2, НЕОПРЕДЕЛЕНО))) Тогда %3
					// После всех проверок можно использовать значение поля
					|	Иначе ЕСТЬNULL(%1.%4, %3)
					|Конец";
					ВыражениеСКонтролемТипа = СтрШаблон(ВыражениеСКонтролемТипа, 
						"СвязиПоказателейБюджетов_ВидАналитики" + НомерАналитикиПоказателя,
						ЗначениеАналитикиПоПравиламСтатьи, 
						"&ВалютаОтчета",
						ПолеВалютыАналитики);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИтоговоеВыражение;
	
КонецФункции

Функция ВыражениеЗаполненияПоказателяСумма(Знач ПараметрыПолученияФакта, Знач СтрокаДопДанных)
	
	ПолеЗаполненияСуммыУстановлено = Ложь;
	
	// Возвращаемые параметры
	Выражение = "";
	ТребуетсяПересчетПоКурсу = Ложь;
	ТребуетсяПересчетПоКурсуУпр = Ложь;
	ТребуетсяПересчетПоКурсуРегл = Ложь;
	
	// Подберем наиболее подходящее поле заполнения суммы
	Если СтрокаДопДанных.ВыраженияПоказателейСуммы.Свойство("Валюта", Выражение) 
		И (СтрокаДопДанных.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных"
			ИЛИ СтрокаДопДанных.ЗаполнениеВалюты = "ОпределяетсяПоАналитике") Тогда
		
		ПолеЗаполненияСуммыУстановлено = Истина;
		ТребуетсяПересчетПоКурсу = Истина;
		
	ИначеЕсли ПараметрыПолученияФакта.ВалютаОтчета = ПараметрыПолученияФакта.ВалютаУпр 
		И СтрокаДопДанных.ВыраженияПоказателейСуммы.Свойство("ВалютаУпр", Выражение) Тогда
		
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	ИначеЕсли ПараметрыПолученияФакта.ВалютаОтчета = ПараметрыПолученияФакта.ВалютаРегл
		И СтрокаДопДанных.ВыраженияПоказателейСуммы.Свойство("ВалютаРегл", Выражение) Тогда
		
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	ИначеЕсли СтрокаДопДанных.ВыраженияПоказателейСуммы.Свойство("Валюта", Выражение) Тогда
		
		ПолеЗаполненияСуммыУстановлено = Истина;
		ТребуетсяПересчетПоКурсу = Истина;
		
	КонецЕсли;
	
	// Если не удалось подобрать наиболее подходящее поле - заполним из первого
	Если Не ПолеЗаполненияСуммыУстановлено Тогда
		Для каждого ИсточникСуммы Из СтрокаДопДанных.ВыраженияПоказателейСуммы Цикл
			Выражение = ИсточникСуммы.Значение;
			ПолеЗаполненияСуммыУстановлено = Истина;
			
			ИсточникУпр        = СтрЗаканчиваетсяНа(Выражение, "Упр") ИЛИ ИсточникСуммы.Ключ = "ВалютаУпр";
			ИсточникРегл       = СтрЗаканчиваетсяНа(Выражение, "Регл") ИЛИ ИсточникСуммы.Ключ = "ВалютаРегл";
			ИсточникМеждународ = ИсточникСуммы.Ключ = "ВалютаМеждународ"; // В регистрах хранятся только ресурсы регл и упр.
			
			ТребуетсяПересчетПоКурсуУпр        = ИсточникУпр И Не ПараметрыПолученияФакта.ВалютаОтчета = ПараметрыПолученияФакта.ВалютаУпр;
			ТребуетсяПересчетПоКурсуРегл       = ИсточникРегл И Не ПараметрыПолученияФакта.ВалютаОтчета = ПараметрыПолученияФакта.ВалютаРегл;
			ТребуетсяПересчетПоКурсуМеждународ = ИсточникМеждународ И Не ПараметрыПолученияФакта.ВалютаОтчета = ПараметрыПолученияФакта.ВалютаМеждународ;
			ТребуетсяПересчетПоКурсу           = ТребуетсяПересчетПоКурсуУпр
			                                 ИЛИ ТребуетсяПересчетПоКурсуРегл
			                                 ИЛИ ТребуетсяПересчетПоКурсуМеждународ
			                                 ИЛИ (НЕ ИсточникУпр И НЕ ИсточникРегл И НЕ ИсточникМеждународ);
			
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	// Уточним с учетом функциональной опции
	ТребуетсяПересчетПоКурсу = ТребуетсяПересчетПоКурсу И БюджетированиеПовтИсп.ИспользоватьНесколькоВалют();
	
	Если Не ПолеЗаполненияСуммыУстановлено Тогда
		Выражение = "0";
	КонецЕсли;
	
	ВыражениеЗаполненияПоказателяСумма = Новый Структура;
	ВыражениеЗаполненияПоказателяСумма.Вставить("ВыражениеЗаполненияПоля", Выражение);
	ВыражениеЗаполненияПоказателяСумма.Вставить("ТребуетсяПересчетПоКурсу", ТребуетсяПересчетПоКурсу);
	ВыражениеЗаполненияПоказателяСумма.Вставить("ТребуетсяПересчетПоКурсуУпр", ТребуетсяПересчетПоКурсуУпр);
	ВыражениеЗаполненияПоказателяСумма.Вставить("ТребуетсяПересчетПоКурсуРегл", ТребуетсяПересчетПоКурсуРегл); 
	
	Возврат ВыражениеЗаполненияПоказателяСумма;
	
КонецФункции

Функция ПрефиксПоиска(РазделИсточникаДанных, ИмяПоля)
	Префикс = "";
	
	Если ИмяПоля = "Валюта" 
		И (РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет 
		Или РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет) Тогда
		Префикс = "ГруппаСчет.";
	КонецЕсли;
	
	Возврат Префикс;
КонецФункции

// Обновляет переданные параметры идентификации выражений и значения по умолчанию.
//
Процедура ОбновитьПараметрыИдентификацииВыражений(
				ПараметрыИдентификацииВыражений,
				ЗначенияПоУмолчанию,
				Знач ИмяПоляВыражения,
				Знач Выражение,
				Знач ЧисловоеВыражение = Ложь,
				Знач ВыражениеАналитики = Ложь)
	
	Перем НайденныйИдентификаторВыражения;
	
	ЗадействованныеВыражения = ПараметрыИдентификацииВыражений.ЗадействованныеВыражения;
	ВыражениеВстречаетсяВПоле = ПараметрыИдентификацииВыражений.ВыражениеВстречаетсяВПоле;
	
	ЧастиВыражений = ПараметрыИдентификацииВыражений.ЧастиВыражений[ИмяПоляВыражения];
	ТекущийИдентификаторВыражения = ПараметрыИдентификацииВыражений.ТекущийИдентификаторВыражения;
	
	Если ИмяПоляВыражения = "ВыражениеПериодГраница" Тогда
		// Выражение периода границы - то же самое, что выражение периода, но с приведением к границе.
		ИмяПоляИдентификатора = "ИД_ВыражениеПериод";
	Иначе
		ИмяПоляИдентификатора = "ИД_" + ИмяПоляВыражения;
	КонецЕсли;
	ВыражениеИспользовалосьДляПоля = Ложь;
	
	НайденныйИдентификаторВыражения = ЗадействованныеВыражения[Выражение];
		
	Если НайденныйИдентификаторВыражения = Неопределено Тогда
		ЗадействованныеВыражения.Вставить(Выражение, ТекущийИдентификаторВыражения);
		
		ЗначенияПоУмолчанию[ИмяПоляИдентификатора] = ТекущийИдентификаторВыражения;
		
		ПараметрыИдентификацииВыражений.ТекущийИдентификаторВыражения = ТекущийИдентификаторВыражения + 1;
	Иначе
		ЗначенияПоУмолчанию[ИмяПоляИдентификатора] = НайденныйИдентификаторВыражения;
		
		ТекущийИдентификаторВыражения = НайденныйИдентификаторВыражения;
		
		ОтборКомбинации = Новый Структура("Выражение, ИмяПоляВыражения", Выражение, ИмяПоляВыражения); 
		ВыражениеИспользовалосьДляПоля = ВыражениеВстречаетсяВПоле.НайтиСтроки(ОтборКомбинации).Количество() <> 0;
	КонецЕсли;
	
	Если Не ВыражениеИспользовалосьДляПоля Тогда
	
		НоваяКомбинация = ВыражениеВстречаетсяВПоле.Добавить();
		НоваяКомбинация.Выражение = Выражение;
		НоваяКомбинация.ИмяПоляВыражения = ИмяПоляВыражения;
		
		ВыражениеСКД = ПреобразоватьВВыражениеСКД(Выражение, ЧисловоеВыражение, ВыражениеАналитики);
		Если ИмяПоляВыражения = "ВыражениеПериодГраница"
		   И ПараметрыИдентификацииВыражений.ПолучениеОстатковНаГраницуПериода Тогда
			// Для целевых показателей необходимо получение остатков на границу периода.
			Если ПараметрыИдентификацииВыражений.ИспользуетсяПриведениеКГраницеПериода Тогда
				ВыражениеСКД = "КомпоновкаДанныхСервер.ГраницаПериода(" + ВыражениеСКД + ", ""Включая"")";
			Иначе
				ВыражениеСКД = "ДОБАВИТЬКДАТЕ(" + ВыражениеСКД + ", ""Секунда"", 1)";
			КонецЕсли;
		КонецЕсли;
		ЧастиВыражений.Добавить(
			" КОГДА "
			+ ИмяПоляИдентификатора 
			+ " = " 
			+ ТекущийИдентификаторВыражения 
			+ " ТОГДА " 
			+ ВыражениеСКД);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ИспользуетсяПриведениеКГраницеПериодаВСвязяхСхемыПолученияФакта()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТекущийРежим = Метаданные.РежимСовместимости;
	Режимы = Метаданные.СвойстваОбъектов.РежимСовместимости;
	
	ВерсияСПриведениемКГранице = "8.3.14";
	
	ВерсияПлатформы = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, ВерсияСПриведениемКГранице) >= 0
	   И ТекущийРежим = Режимы.НеИспользовать Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура УточнитьУсловияВыраженийДопДанныхСУчетомВыраженийОбластей(Знач ПараметрыФакта, ПолучениеКурсаНаНачалоПериода = Ложь)
	ПериодичностьЗаполнена = ЗначениеЗаполнено(ПараметрыФакта.Периодичность);
	СуффиксВыражения = ?(ПериодичностьЗаполнена И НЕ ПолучениеКурсаНаНачалоПериода, "Период", "НачалоПериода");
	Если СуффиксВыражения = "Период"
		И СокрЛП(ВРЕГ(ПараметрыФакта.УсловияВыражений["Выражение" + СуффиксВыражения])) = "НЕОПРЕДЕЛЕНО" Тогда
		// В отчете нет измерения периода, периодом является начало периода отчета
		СуффиксВыражения = "НачалоПериода";
	КонецЕсли;
	
	Если ПараметрыФакта.ТребуетсяПересчетПоКурсу Тогда
		Для Каждого СтрокаДопДанных Из ПараметрыФакта.ДополнительныеДанные.ТаблицаДанных Цикл 
			СтрокаДопДанных.ИД_ВыражениеЗаполненияПериодКурса = СтрокаДопДанных["ИД_Выражение" + СуффиксВыражения];
		КонецЦикла;
	КонецЕсли;
	Если СуффиксВыражения = "НачалоПериода" Тогда
		// В оптимизированном факте всегда рассчитывается поле НачалоПериода уже с учетом смещения (выражение передается в связях
		// источников данных в набор ОбъединенныйФакт как выражение источник).
		// Выполнение того же выражения в вычисляемом поле над уже преобразованной датой не требуется.
		ПараметрыФакта.УсловияВыражений.ВыражениеЗаполненияПериодКурса = "НачалоПериода";
	Иначе
		ПараметрыФакта.УсловияВыражений.ВыражениеЗаполненияПериодКурса = "ПериодПланирования";
	КонецЕсли;
КонецПроцедуры

Процедура УточнитьМаксимальныйНомерАналитики(ПараметрыФакта)
	МаксимальныйНомерАналитики = ПараметрыФакта.МаксимальныйНомерАналитики;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		Если НЕ ПараметрыФакта.УсловияВыражений["ВыражениеЗаполненияАналитики" + НомерАналитики] = ПреобразоватьВВыражениеСКД(ВыражениеПустогоЗначенияАналитики()) Тогда
			МаксимальныйНомерАналитики = НомерАналитики;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФакта.МаксимальныйНомерАналитики = МаксимальныйНомерАналитики;
КонецПроцедуры

// Собирает из отдельных частей готовые выражения для расчета в СКД
//
Процедура СформироватьУсловияВыражений(Знач ПараметрыФакта, Знач ПараметрыИдентификацииВыражений)
	
	Перем ЧастьОдногоВыражения, ЭтоВыражениеПоказателя;
	
	Для Каждого ЧастьОдногоВыражения Из ПараметрыИдентификацииВыражений.ЧастиВыражений Цикл 
		ЭтоВыражениеПоказателя = СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеПоказателя");
		
		Если ЧастьОдногоВыражения.Значение.Количество() = 0 Тогда
			ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = "НЕОПРЕДЕЛЕНО";
		ИначеЕсли ЧастьОдногоВыражения.Значение.Количество() = 1 Тогда
			УсловиеВыражения = ЧастьОдногоВыражения.Значение[0];
			
			Если СтрЗаканчиваетсяНа(ВРЕГ(УсловиеВыражения), "НЕОПРЕДЕЛЕНО") Тогда
				ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = "НЕОПРЕДЕЛЕНО";
			ИначеЕсли СтрЗаканчиваетсяНа(УсловиеВыражения, "0") Тогда
				ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = "0";
			Иначе
				НачалоВыражения = СтрНайти(УсловиеВыражения, "ТОГДА");
				ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = Прав(УсловиеВыражения, СтрДлина(УсловиеВыражения) - (НачалоВыражения + 4));
			КонецЕсли;
			
			ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = 
				?(ЭтоВыражениеПоказателя, "Коэффициент * ", "") 
				+ ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ];
		Иначе
			ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = 
				?(ЭтоВыражениеПоказателя, "Коэффициент * ", "")
				+ "ВЫБОР" 
				+ Символы.ПС 
				+ СтрСоединить(ЧастьОдногоВыражения.Значение, Символы.ПС) 
				+ Символы.ПС
				+ "КОНЕЦ";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавляет колонки дополнительных данных, которые предназначены для мэппинга факта на статьи и показатели.
//
Процедура ДобавитьКолонкиДополнительныхДанных(ТаблицаДополнительныхДанных, ИндексИменИВидовАналитик)
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	КолонкиТаблицыДанных = ТаблицаДополнительныхДанных.Колонки;
	
	ТребуетсяЗаполнение = КолонкиТаблицыДанных.Найти("ИдентификаторИсточникаДанных") = Неопределено;
	
	Если ТребуетсяЗаполнение Тогда
		ОписаниеТипаДата   = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
		ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
		ОписаниеТипаИД  = ОбщегоНазначения.ОписаниеТипаЧисло(4,, ДопустимыйЗнак.Неотрицательный);
		ОписаниеТипаАдрес  = ОбщегоНазначения.ОписаниеТипаЧисло(1,, ДопустимыйЗнак.Неотрицательный);
		ОписаниеТипаКоэффициент  = ОбщегоНазначения.ОписаниеТипаЧисло(7,2);
		ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
		ОписаниеТипаВидАналитики = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов");
		ОписаниеТипаЗначениеАналитики = Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип;
		
		// Ключ области данных и поля связи с обобщенными данными
		КолонкиТаблицыДанных.Добавить("ИдентификаторИсточникаДанных",    ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ПривилегированныйРежимИсточника", ОписаниеТипаБулево);
		КолонкиТаблицыДанных.Добавить("Период",                          ОписаниеТипаДата);
		КолонкиТаблицыДанных.Добавить("НачалоПериода",                   ОписаниеТипаДата);
		КолонкиТаблицыДанных.Добавить("КонецПериода",                    ОписаниеТипаДата);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПериод",              ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеНачалоПериода",       ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеКонецПериода",        ОписаниеТипаИД);
		
		// Дополнительные данные
		КолонкиТаблицыДанных.Добавить("ИД_Источника", ОписаниеТипаСтрока); // ИД источника данных бюджетирования
		
		КолонкиТаблицыДанных.Добавить("ПравилоФакта", ИсточникиДанныхПовтИсп.ОписаниеТипаПравил());
		КолонкиТаблицыДанных.Добавить("ТипОбъектаИсточникаДанных");
		КолонкиТаблицыДанных.Добавить("КэшРеквизитовДляПолученияСхемы");
		КолонкиТаблицыДанных.Добавить("ХешСхемыКомпоновкиДанных");
		
		КолонкиТаблицыДанных.Добавить("ТипПравила", ИсточникиДанныхПовтИсп.ОписаниеТипаПолученияДанныхБюджетирования());
		КолонкиТаблицыДанных.Добавить("Коэффициент", ОписаниеТипаКоэффициент);
		КолонкиТаблицыДанных.Добавить("Расход", ОписаниеТипаБулево);
		КолонкиТаблицыДанных.Добавить("УникальныйИдентификатор", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ИсточникДанных");
		КолонкиТаблицыДанных.Добавить("КорСчет");
		
		КолонкиТаблицыДанных.Добавить("СтатьяБюджетов", Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов"));
		КолонкиТаблицыДанных.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
		
		// Поля, используемые для формирования идентификаторов выражений для нумерованных и именованных аналитик.
		КолонкиТаблицыДанных.Добавить("РасширенныйРежимНастройкиЗаполненияАналитики", ОписаниеТипаБулево);
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			КолонкиТаблицыДанных.Добавить("ВидАналитики" + НомерАналитики, ОписаниеТипаВидАналитики);
			КолонкиТаблицыДанных.Добавить("ВыражениеЗаполненияАналитики" + НомерАналитики); // Строка или Неопределено
			КолонкиТаблицыДанных.Добавить("ИД_ВыражениеЗаполненияАналитики" + НомерАналитики, ОписаниеТипаИД);
			КолонкиТаблицыДанных.Добавить("ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики, ОписаниеТипаБулево);
			КолонкиТаблицыДанных.Добавить("ЗначениеАналитики" + НомерАналитики, ОписаниеТипаЗначениеАналитики);
		КонецЦикла;
		КолонкиТаблицыДанных.Добавить("ОборотПоАналитикеРасхода", ОписаниеТипаБулево);
		
		// Колонки, используемые только в случае получения данных по статьям бюджетов, влияющим на показатели бюджетов.
		// В таком случае аналитика может быть переопределена, также аналитика валюты может быть переопределена.
		// Признаком таких строк является флаг СтатьяБюджетовДляРасчетаПоказателя = Истина
		// (статья бюджетов и показатель бюджетов заполнены, причем статья бюджетов - это не статья, а не целевой показатель).
		КолонкиТаблицыДанных.Добавить("СтатьяБюджетовДляРасчетаПоказателя", ОписаниеТипаБулево);
		КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_КоличествоИспользуемыхАналитик");
		КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_ВалютаОпределяетсяАналитикой", ОписаниеТипаБулево);
		КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_АдресАналитикиВалюта", ОписаниеТипаАдрес);
		КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_ПолеВалютыАналитики"); // Строка или Неопределено
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_Аналитика" + НомерАналитики, ОписаниеТипаЗначениеАналитики);
			КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_ТранслироватьАналитику" + НомерАналитики, ОписаниеТипаБулево);
			КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_АдресТрансляцииАналитики" + НомерАналитики, ОписаниеТипаАдрес);
			КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_ВидАналитики" + НомерАналитики, ОписаниеТипаВидАналитики);
		КонецЦикла;
		
		
		
		
		КолонкиТаблицыДанных.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования"));
		
		// Валюта
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеЗаполненияАналитикиВалюта", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИсточникВалютный", ОписаниеТипаБулево);
		КолонкиТаблицыДанных.Добавить("ЗаполнениеВалюты", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("АдресАналитикиВалюта", ОписаниеТипаАдрес);
		КолонкиТаблицыДанных.Добавить("ПолеВалютыАналитики", ОписаниеТипаСтрока);
		
		КолонкиТаблицыДанных.Добавить("ТребуетсяПересчетПоКурсу", ОписаниеТипаБулево);
		
		// Валюта хранения
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеЗаполненияАналитикиВалютаХранения", ОписаниеТипаИД);
		
		// Период курса
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеЗаполненияПериодКурса", ОписаниеТипаИД);
		
		// Единица измерения
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеЗаполненияАналитикиЕдиницаИзмерения", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ЗаполнениеЕдиницыИзмерения", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("АдресАналитикиЕдиницаИзмерения", ОписаниеТипаАдрес);
		КолонкиТаблицыДанных.Добавить("ПолеЕдиницыИзмеренияАналитики", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
		// Показатели фактических данных
		КолонкиТаблицыДанных.Добавить("ВыражениеПоказателяКоличество", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ВыражениеПоказателяСуммаВалюта", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ВыражениеПоказателяСуммаВалютаУпр", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ВыражениеПоказателяСуммаВалютаРегл", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ВыраженияПоказателейСуммы");
		
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяКоличествоНачальныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаНачальныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаУпрНачальныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаРеглНачальныйОстаток", ОписаниеТипаИД);
		
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяКоличествоПриход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаПриход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаУпрПриход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаРеглПриход", ОписаниеТипаИД);
		
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяКоличествоРасход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаРасход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаУпрРасход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаРеглРасход", ОписаниеТипаИД);
		
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяКоличествоКонечныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаКонечныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаУпрКонечныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_ВыражениеПоказателяСуммаВалютаРеглКонечныйОстаток", ОписаниеТипаИД);
		
		Для Каждого ИмяВидАналитики Из ИндексИменИВидовАналитик Цикл 
			КолонкиТаблицыДанных.Добавить("ИД_" + ИмяВидАналитики.Ключ, ОписаниеТипаИД);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в исходную таблицу колонки вида ИмяКолонки_УникальныйИдентификатор
// При постобработке данных такие колонки свертываются в одну колонку вида ИмяКолонки.
//
Процедура ДобавитьКолонкиУникальныхИдентификаторов(ИсходнаяТаблица, ИсходныеКолонки)
	
	ТипПараметраИсходныеКолонки = ТипЗнч(ИсходныеКолонки);
	Если ТипПараметраИсходныеКолонки = Тип("Массив") Тогда
		КоллекцияИсходныхКолонок = ИсходныеКолонки;
	ИначеЕсли ТипПараметраИсходныеКолонки = Тип("Строка") Тогда
		КоллекцияИсходныхКолонок = СтрРазделить(ИсходныеКолонки, ",", Ложь);
	Иначе
		КоллекцияИсходныхКолонок = Новый Массив;
	КонецЕсли;
	
	ОднаКолонка = (КоллекцияИсходныхКолонок.Количество() = 1);
	
	Для Каждого ИсходнаяКолонка Из КоллекцияИсходныхКолонок Цикл 
		ИмяИсходнойКолонки = СокрЛП(ИсходнаяКолонка);
		ИмяДобавляемойКолонки = ?(ОднаКолонка, "", ИмяИсходнойКолонки) + "УникальныйИдентификатор";
		
		ИсходнаяТаблица.Колонки.Добавить(ИмяДобавляемойКолонки);
		
		Для Каждого ИсходнаяСтрока Из ИсходнаяТаблица Цикл
			ИсходнаяСтрока[ИмяДобавляемойКолонки] = КомпоновкаДанныхСервер.СтрУникальныйИдентификатор(ИсходнаяСтрока[ИмяИсходнойКолонки]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры 

// Возвращает правила получения факта для статей и показателей
//
// Параметры:
//  ИсточникДанных - Структура - параметры источника данных. См. подробнее БюджетнаяОтчетностьРасчетКэшаСервер.ДобавитьИсточник().
//  СценарийОтчета - СправочникСсылка.Сценарии - Сценарий отчета, если он задан.
//                 - Неопределено - Если сценарий отчета не задан.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица правил получения фактических данных. См. подробнее свойство ТаблицаПравилСтатей в ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта().
//
Функция ПравилаПолученияФактаИсточникаДанных(ИсточникДанных, СценарийОтчета)
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	
	ПравилаПолученияФактаИсточникаДанных = Неопределено;
	
	ТипыИсточников  = Перечисления.ТипыИсточниковДанныхБюджетирования;
	ТипыПравилФакта = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования;
	
	ПродолжитьРасчет = Истина;
	ИмяМакета = "ПравилаПолученияФакта";
	Если ИсточникДанных.ТипИсточника = ТипыИсточников.Обороты 
		И НЕ ИсточникДанных.ЕстьЦелевыеПоказатели Тогда
		ИмяСправочникаИсточника = "ПравилаПолученияФактаПоСтатьямБюджетов";
		ИмяПоляОтбора = "СтатьяБюджетов";
	ИначеЕсли ИсточникДанных.ТипИсточника = ТипыИсточников.Остатки 
		Или ИсточникДанных.ЕстьЦелевыеПоказатели Тогда
		ИмяСправочникаИсточника = "ПравилаПолученияФактаПоПоказателямБюджетов";
		ИмяПоляОтбора = "ПоказательБюджетов";
	Иначе
		ПродолжитьРасчет = Ложь;
	КонецЕсли;
	
	Если ПродолжитьРасчет Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		СхемаКомпоновкиДанныхПравил = ИсточникиДанныхПовтИсп.ПолучитьМакетСправочника(ИмяСправочникаИсточника, ИмяМакета);
		СКДПравил = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(СхемаКомпоновкиДанныхПравил);
		Настройки = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДПравил);
		
		ПредполагаетсяФакт = ИсточникДанных.ПредполагаетФактическиеДанные = "Предполагается"
		                 ИЛИ (ИсточникДанных.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
		                   И  СценарийОтчетаФактическиеДанные);
		ПредполагаетсяИсполнениеБюджета = ИсточникДанных.ПредполагаетИсполнениеБюджета = "Предполагается"
		                              ИЛИ (ИсточникДанных.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета"
		                                И  СценарийОтчетаИсполнениеБюджета);
		
		СписокТиповПравил = Новый СписокЗначений;
		Если ПредполагаетсяФакт ИЛИ ПредполагаетсяИсполнениеБюджета Тогда
			СписокТиповПравил.Добавить(ТипыПравилФакта.ИсполнениеБюджетаИФактическиеДанные);
		КонецЕсли;
		Если ПредполагаетсяФакт Тогда
			СписокТиповПравил.Добавить(ТипыПравилФакта.ФактическиеДанные);
		КонецЕсли;
		Если ПредполагаетсяИсполнениеБюджета Тогда
			СписокТиповПравил.Добавить(ТипыПравилФакта.ИсполнениеБюджета);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ТипПравила", СписокТиповПравил, ВидСравненияКомпоновкиДанных.ВСписке);
		
		ЗначенияОтбораПоСтатьямПоказателям = Новый СписокЗначений;
		ЗначенияОтбораПоСтатьямПоказателям.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		
		ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, ИмяПоляОтбора, ЗначенияОтбораПоСтатьямПоказателям, ВидСравненияКомпоновкиДанных.ВСписке);
		
		Если ИсточникДанных.ТипИсточника = ТипыИсточников.Обороты 
			И НЕ ИсточникДанных.ЕстьЦелевыеПоказатели Тогда
			ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор,
			                                           "ПромежуточноеКэшированиеРезультатовРаботыПравил",
			                                           Ложь,
			                                           ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсточникДанных.ПоказательЗависимогоИсточникаДанных) Тогда
			ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ПоказательБюджетов", ИсточникДанных.ПоказательЗависимогоИсточникаДанных);
		ИначеЕсли ИсточникДанных.ТипИсточника = ТипыИсточников.Обороты 
				И НЕ ИсточникДанных.ЕстьЦелевыеПоказатели Тогда
			ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
		КонецЕсли;
		
		// Получим правила в виде таблицы со значениями реквизитов
		ПравилаПолученияФактаИсточникаДанных = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКДПравил, Настройки);
		ПравилаПолученияФактаИсточникаДанных.Колонки.Добавить("ТипОбъектаИсточникаДанных");
		ПравилаПолученияФактаИсточникаДанных.ЗаполнитьЗначения(Тип("СправочникСсылка." + ИмяСправочникаИсточника), "ТипОбъектаИсточникаДанных");
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ПравилаПолученияФактаИсточникаДанных.Колонки.Правило.Имя = "ПравилоФакта";
	
	Возврат ПравилаПолученияФактаИсточникаДанных;
	
КонецФункции

Процедура АдаптироватьВыражениеПоля(ИсходноеВыражение, ПрефиксИдентификатора = "", Знач УсловияВыражений)
	
	ПодготовленноеВыражение = "";
	
	Если СтрНачинаетсяС(ИсходноеВыражение, "Выражение") Тогда
		Если УсловияВыражений.Свойство(ИсходноеВыражение, ПодготовленноеВыражение) Тогда
			
			ПодготовленноеВыражение = СтрЗаменить(ПодготовленноеВыражение, "ИД_", ПрефиксИдентификатора + "ИД_");
			ПодготовленноеВыражение = СтрЗаменить(ПодготовленноеВыражение, "&НАЧАЛОПЕРИОДА", ПрефиксИдентификатора + "НАЧАЛОПЕРИОДА");
			ПодготовленноеВыражение = СтрЗаменить(ПодготовленноеВыражение, "&КОНЕЦПЕРИОДА", ПрефиксИдентификатора + "КОНЕЦПЕРИОДА");
			ПодготовленноеВыражение = СтрЗаменить(ПодготовленноеВыражение, "&ПЕРИОД", ПрефиксИдентификатора + "ПЕРИОД");
			
			ИсходноеВыражение = ПодготовленноеВыражение;
		Иначе
			ИсходноеВыражение = "НЕОПРЕДЕЛЕНО";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура АдаптироватьВыражениеПериодаПланирования(ИсходноеВыражение, ВыражениеПериодаПланирования)
	
	ИсходноеВыражение = ВРЕГ(ИсходноеВыражение);
	
	ИсходноеВыражение = СтрЗаменить(ИсходноеВыражение, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеПериодаПланирования);
	ИсходноеВыражение = СтрЗаменить(ИсходноеВыражение, "ПЕРИОДКУРСА", ВыражениеПериодаПланирования);
	
КонецПроцедуры

// Выгружает данные в переданную таблицу по макету СКД, при необходимости включая привилегированный режим.
//
Процедура ВыгрузитьРезультатПоМакетуСУчетомОграниченийДоступа(ЗаполняемаяТаблица, МакетПолученияДанных, ВнешниеНаборыДанных, ПривилегированныйРежим)
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрПривилегированныйРежим = МакетПолученияДанных.ЗначенияПараметров.Найти("ПривилегированныйРежим");
	Если ПараметрПривилегированныйРежим <> Неопределено Тогда
		ПараметрПривилегированныйРежим.Значение = ПривилегированныйРежим;
	КонецЕсли;
	
	Если ТипЗнч(ЗаполняемаяТаблица) = Тип("ТаблицаЗначений") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетПолученияДанных, ВнешниеНаборыДанных),
			ЗаполняемаяТаблица);
	Иначе
		ЗаполняемаяТаблица = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетПолученияДанных, ВнешниеНаборыДанных);
	КонецЕсли;

	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблонПараметровИдентификацииВыражений(НастройкиСоставаПолей)
	
	Перем ПараметрыИдентификацииВыражений;
	
	ПараметрыИдентификацииВыражений = Новый Структура;
	
	ПараметрыИдентификацииВыражений.Вставить("ТекущийИдентификаторВыражения", 1);
	ПараметрыИдентификацииВыражений.Вставить("ЗадействованныеВыражения", Новый Соответствие); // Ключ - выражение, Значение - идентификатор условия выражения
	
	ВыражениеВстречаетсяВПоле = Новый ТаблицаЗначений;
	ВыражениеВстречаетсяВПоле.Колонки.Добавить("Выражение");
	ВыражениеВстречаетсяВПоле.Колонки.Добавить("ИмяПоляВыражения");
	ПараметрыИдентификацииВыражений.Вставить("ВыражениеВстречаетсяВПоле", ВыражениеВстречаетсяВПоле);
	
	// Расширяемая структура. Могут добавляться свойства вид "ИД_ИмяПоВидуАналитики", например, "ИД_Партнеры".
	ЧастиВыражений = Новый Структура; 
	ЗначенияПоУмолчанию = Новый Структура;
	
	// Выражения периода
	ЧастиВыражений.Вставить("ВыражениеНачалоПериода",      Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеКонецПериода",       Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеПериод",             Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеПериодГраница",      Новый Массив);
	
	ЗначенияПоУмолчанию.Вставить("ИД_ВыражениеНачалоПериода");
	ЗначенияПоУмолчанию.Вставить("ИД_ВыражениеКонецПериода");
	ЗначенияПоУмолчанию.Вставить("ИД_ВыражениеПериод");
	ЗначенияПоУмолчанию.Вставить("ПолучениеОстатковНаГраницуПериода", Ложь);
	
	ЗначенияПоУмолчанию.Вставить("НачалоПериода");
	ЗначенияПоУмолчанию.Вставить("КонецПериода");
	ЗначенияПоУмолчанию.Вставить("Период");
	
	// Выражения аналитик
	ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитики1", Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитики2", Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитики3", Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитики4", Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитики5", Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитики6", Новый Массив);
	
	// Выражения количественных показателей
	Если НастройкиСоставаПолей.ТребуетсяКоличество Тогда
		ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитикиЕдиницаИзмерения",  Новый Массив);
		ЧастиВыражений.Вставить("ВыражениеПоказателяКоличествоНачальныйОстаток", Новый Массив);
	КонецЕсли;
	
	// Выражения суммовых показателей
	Если НастройкиСоставаПолей.ТребуетсяСумма Тогда
		ЧастиВыражений.Вставить("ВыражениеЗаполненияПериодКурса",                     Новый Массив);
		ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитикиВалюта",                 Новый Массив);
		ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитикиВалютаХранения",         Новый Массив);
		
		Если НастройкиСоставаПолей.ТребуетсяСуммаНачальныйОстаток Тогда 
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаНачальныйОстаток",     Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаУпрНачальныйОстаток",  Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРеглНачальныйОстаток", Новый Массив);
		КонецЕсли;
		
		Если НастройкиСоставаПолей.ТребуетсяСуммаПриход Тогда 
			ЧастиВыражений.Вставить("ВыражениеПоказателяКоличествоПриход",                Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаПриход",               Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаУпрПриход",            Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРеглПриход",           Новый Массив);
		КонецЕсли;
		
		Если НастройкиСоставаПолей.ТребуетсяСуммаРасход Тогда 
			ЧастиВыражений.Вставить("ВыражениеПоказателяКоличествоРасход",                Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРасход",               Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаУпрРасход",            Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРеглРасход",           Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияПоУмолчанию.Вставить("ПривилегированныйРежимИсточника");
	ЗначенияПоУмолчанию.Вставить("ИД_Источника");
	ЗначенияПоУмолчанию.Вставить("ПоказательБюджетов");
	
	ПараметрыИдентификацииВыражений.Вставить("ЧастиВыражений", ЧастиВыражений);
	ПараметрыИдентификацииВыражений.Вставить("ЗначенияПоУмолчанию", ЗначенияПоУмолчанию);
	
	// Расширяемая структура. Могут добавляться свойства вид "ИД_ИмяПоВидуАналитики", например, "ИД_Партнеры".
	ЗначенияПоУмолчаниюДопДанные = Новый Структура;
	Для Каждого ЧастьВыражения Из ЧастиВыражений Цикл
		Если СтрНачинаетсяС(ЧастьВыражения.Ключ, "ВыражениеПоказателя")
			Или СтрНачинаетсяС(ЧастьВыражения.Ключ, "ВыражениеЗаполненияАналитики") Тогда
			ЗначенияПоУмолчаниюДопДанные.Вставить("ИД_" + ЧастьВыражения.Ключ);
		КонецЕсли;
	КонецЦикла;

	ЗначенияПоУмолчаниюДопДанные.Вставить("ИД_ВыражениеЗаполненияПериодКурса");
	// Дополнительный отбор элемента вида бюджета
	ЗначенияПоУмолчаниюДопДанные.Вставить("ДополнительныйОтбор");
	
	ПараметрыИдентификацииВыражений.Вставить("ЗначенияПоУмолчаниюДопДанные", ЗначенияПоУмолчаниюДопДанные);
	
	// Целевые показатели выделены в отдельные источники данных.
	// Параметр используется как флаг необходимости получения остатков с учетом границы периода (параметр &ПериодГраница).
	ПараметрыИдентификацииВыражений.Вставить("ПолучениеОстатковНаГраницуПериода", Ложь);
	ПараметрыИдентификацииВыражений.Вставить("ИспользуетсяПриведениеКГраницеПериода", ИспользуетсяПриведениеКГраницеПериодаВСвязяхСхемыПолученияФакта());
	
	Возврат ПараметрыИдентификацииВыражений;

КонецФункции

Процедура ДополнитьИсточникамиДанныхВлияющихСтатей(ИсточникиДанных)
	
	ТипыИсточников = Перечисления.ТипыИсточниковДанныхБюджетирования;
	
	ИсходноеКоличествоИсточников = ИсточникиДанных.Количество();
	ИсточникиДанных.Колонки.Добавить("ПоказательЗависимогоИсточникаДанных");
	
	ПоказателиБюджетов = Новый Массив;
	
	Для ИндексИсточника = 0 По ИсходноеКоличествоИсточников - 1 Цикл
		ИсточникДанных = ИсточникиДанных[ИндексИсточника];
		
		// При получении данных из самого документа используются НЕ онлайновые 
		Если Не ИсточникДанных.ТипИсточника = ТипыИсточников.Остатки Тогда // Только у показателей влияющие статьи
			Продолжить;
		КонецЕсли;
		
		ОбъектыИсточника = ИсточникДанных.Объекты;
		Если ОбъектыИсточника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ОбъектИсточника Из ОбъектыИсточника Цикл
			ПоказателиБюджетов.Добавить(ОбъектИсточника.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Если ПоказателиБюджетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим таблицу правил, по которым планируется получить данные
	УстановитьПривилегированныйРежим(Истина);
	
	// Есть метод для источников данных
	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	// Дополним отбором, обеспечивающим выбор только статей, влияющих на показатели
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Настройки.Отбор, "ПоказательБюджетов");
	Если ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "ПоказательБюджетов", ПоказателиБюджетов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "ПоказательБюджетов");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, 
		"ПромежуточноеКэшированиеРезультатовРаботыПравил", Ложь, 
		ВидСравненияКомпоновкиДанных.Равно);
	
	ТаблицаПравилСтатей = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	ТаблицаПравилСтатей.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ТаблицаПравилСтатей.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"), "ТипОбъектаИсточникаДанных");
	ТаблицаПравилСтатей.Индексы.Добавить("ПоказательБюджетов");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаПравилСтатей.Количество() > 0 Тогда
		Для ИндексИсточника = 0 По ИсходноеКоличествоИсточников - 1 Цикл
			ИсточникДанных = ИсточникиДанных[ИндексИсточника];
			
			// При получении данных из самого документа используются НЕ онлайновые 
			Если Не ИсточникДанных.ТипИсточника = ТипыИсточников.Остатки Тогда // Только у показателей влияющие статьи
				Продолжить;
			КонецЕсли;
			Если ОбъектыИсточника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектыИсточника = ИсточникДанных.Объекты;
			Для Каждого ОбъектИсточника Из ОбъектыИсточника Цикл
				Отбор = Новый Структура("ПоказательБюджетов", ОбъектИсточника);
				НайденныеСтроки = ТаблицаПравилСтатей.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НовыйИсточник = ИсточникиДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйИсточник, ИсточникДанных,,"ТипИсточника, Объекты");
					НовыйИсточник.ПредполагаетФактическиеДанные = ИсточникДанных.ВлияющиеСтатьиПредполагаетФактическиеДанные;
					НовыйИсточник.ПредполагаетИсполнениеБюджета = ИсточникДанных.ВлияющиеСтатьиПредполагаетИсполнениеБюджета;
					НовыйИсточник.ВлияющиеСтатьиПредполагаетФактическиеДанные = "";
					НовыйИсточник.ВлияющиеСтатьиПредполагаетИсполнениеБюджета = "";
					
					НовыйИсточник.Объекты = Новый Массив;
					
					НовыйИсточник.ПоказательЗависимогоИсточникаДанных = ОбъектИсточника;
					НовыйИсточник.ТипИсточника = ТипыИсточников.Обороты;
					
					Для Каждого ПравилоСтатьи Из НайденныеСтроки Цикл 
						НовыйИсточник.Объекты.Добавить(ПравилоСтатьи.СтатьяБюджетов);
					КонецЦикла;
					НовыйИсточник.Объекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НовыйИсточник.Объекты);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользоватьАльтернативныйАлгоритм()
	ИспользоватьАльтернативныйАлгоритм = Истина;
	Возврат ИспользоватьАльтернативныйАлгоритм;
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ЭкземплярБюджетаПрисоединенныеФайлыПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(Источник.ТипСлужебногоФайла)
		И ЗначениеЗаполнено(Источник.Редактирует) Тогда
		
		ВызватьИсключение НСтр("ru = 'Файл является служебным
									|Редактирование файла запрещено'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Проверяет, выполнились ли обработчики обновления, блокирующие формирование бюджетного отчета.
//
Функция ДанныеДляБюджетногоОтчетаЕщеОбновляются() Экспорт
	Возврат НЕ ОбновлениеИнформационнойБазы.ОбъектОбработан("Отчет.БюджетныйОтчет").Обработан;
КонецФункции

// Функция для проверки объектов при открытии форм и перед записью.
// Может использоваться как функция проверки по умолчанию, если
// достаточно логики - заблокированные объекты зарегистрированы на узлах плана обмена ОбновлениеИнформационнойБазы.
//
// Параметры:
//  МетаданныеИОтбор - Структура - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
//
// Возвращаемое значение:
//  Булево - Истина, если объект обновлен и доступен для изменения.
//
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Данные = МетаданныеИОтбор.Данные;
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Если Не ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
			Возврат Истина;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеИОтбор = Неопределено Тогда
		МетаданныеИОтбор = ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным(Данные, Неопределено);
	КонецЕсли;
	
	Если МетаданныеИОтбор.ЭтоНовый Тогда
		
		ДанныеТекущегоОбъектаОбновлены = Истина;
		
	Иначе
		
		ДанныеТекущегоОбъектаОбновлены = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, МетаданныеИОтбор.Метаданные, МетаданныеИОтбор.Отбор);
		
	КонецЕсли;
	
	Если НЕ ДанныеТекущегоОбъектаОбновлены Тогда
		Возврат ДанныеТекущегоОбъектаОбновлены;
	КонецЕсли;
	
	СвязанныеОбъекты = Новый Массив;
	
	ДанныеСвязанныхОбъектовОбновлены = Истина;
	
	Если МетаданныеИОтбор.Метаданные = Метаданные.Документы.УстановкаЗначенийНефинансовыхПоказателей Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.НефинансовыеПоказателиБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ШаблоныВводаНефинансовыхПоказателей);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Документы.ЭкземплярБюджета Тогда 
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.НефинансовыеПоказателиБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.СвязиПоказателейБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.ЗначенияНефинансовыхПоказателей);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.БюджетныйОтчет Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.НефинансовыеПоказателиБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.СвязиПоказателейБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.ЗначенияНефинансовыхПоказателей);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.ОборотнаяВедомостьБюджетирования Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.ОборотноСальдоваяВедомостьБюджетирования Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.СвязиПоказателейБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.ПроверкаСвязейПоказателейБюджетов Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.СвязиПоказателейБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.РезультатРаботыПравилПолученияФактическихДанных Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.РасшифровкаФормулыБюджетногоОтчета Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования Тогда 
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаЛимитовПоДаннымБюджетирования);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств Тогда
		Если Константы.ИспользоватьЛимитыРасходаДенежныхСредствБюджетирования.Получить() Тогда
			СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
			СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаЛимитовПоДаннымБюджетирования);
			СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
			СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого МетаданныеСвязанногоОбъекта Из СвязанныеОбъекты Цикл
	
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, МетаданныеСвязанногоОбъекта) Тогда
			ДанныеСвязанныхОбъектовОбновлены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеТекущегоОбъектаОбновлены И ДанныеСвязанныхОбъектовОбновлены;
	
КонецФункции

#КонецОбласти
