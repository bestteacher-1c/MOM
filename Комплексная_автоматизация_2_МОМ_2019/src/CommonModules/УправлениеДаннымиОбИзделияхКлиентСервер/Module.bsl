////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Возвращает параметры выбора спецификаций для номенклатуры.
// 
// Возвращаемое значение:
//  Структура - параметры выбора спецификаций (по умолчанию).
//
Функция ПараметрыВыбораСпецификаций() Экспорт
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("ДоступныеТипы", Новый Массив);
	ПараметрыВыбора.Вставить("ДоступныеСтатусы", Новый Массив);
	
	ПараметрыВыбора.Вставить("ИсключитьПроизводствоНаСтороне", Ложь);
	ПараметрыВыбора.Вставить("СпецификацииПоФиксированнойСтоимости", ""); // Показывать, Доступны
	
	ПараметрыВыбора.Вставить("ПолучитьСпецификацииПоНоменклатуре", Истина);
	
	Возврат ПараметрыВыбора;
	
КонецФункции

// Возвращает параметры необходимые для выполнения действия "ПроверитьЗаполнитьСпецификацию".
//
// Параметры:
//  Дата						 - Структура - дата начала производства (на эту дату спецификация должна быть действующей)
//  Подразделение				 - Структура - подразделение, за которым закреплено производство
//  ПараметрыВыбораСпецификаций	 - Структура - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций()
//  ИмяПоля						 - Строка	 - имя реквизита, содержащего ссылку на спецификацию
//  ЕстьПризнакОсновная			 - Булево	 - Истина, если требуется заполнение признаков ОсновнаяСпецификация, ВыбранаОсновнаяСпецификация.
// 
// Возвращаемое значение:
//  Структура - список параметров.
//
Функция ПараметрыДействияПроверитьЗаполнитьСпецификацию(Дата, Подразделение, ПараметрыВыбораСпецификаций, ИмяПоля = "Спецификация", ЕстьПризнакОсновная = Ложь) Экспорт
	
	ПараметрыДействия = Новый Структура("Дата,Подразделение,ПараметрыВыбораСпецификаций,ИмяПоляСпецификация,ЕстьПризнакОсновная");
	
	ПараметрыДействия.Дата = НачалоДня(Дата);
	ПараметрыДействия.Подразделение = Подразделение;
	
	ПараметрыДействия.ПараметрыВыбораСпецификаций = ПараметрыВыбораСпецификаций;
	
	ПараметрыДействия.ИмяПоляСпецификация = ИмяПоля;
	ПараметрыДействия.ЕстьПризнакОсновная = ЕстьПризнакОсновная;
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Установить параметры выбора спецификаций в форме
//
// Параметры:
//  Элемент						 - ПолеФормы, Массив - поле ввода спецификации или список полей
//  ПараметрыВыбораСпецификаций	 - Структура		 - параметры выбора спецификаций, см. ПараметрыВыбораСпецификаций().
//
Процедура УстановитьПараметрыВыбораСпецификаций(Элемент, ПараметрыВыбораСпецификаций) Экспорт
	
	ПараметрыВыбора = Новый Массив();
	
	Для каждого ЗначениеПараметра Из ПараметрыВыбораСпецификаций Цикл
		НовыйПараметр = Новый ПараметрВыбора(ЗначениеПараметра.Ключ, ЗначениеПараметра.Значение);
		ПараметрыВыбора.Добавить(НовыйПараметр);
	КонецЦикла;
	
	Если ПараметрыВыбораСпецификаций.Свойство("ДоступныеТипы") И ПараметрыВыбораСпецификаций.ДоступныеТипы.Количество() <> 0 Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипПроизводственногоПроцесса", Новый ФиксированныйМассив(ПараметрыВыбораСпецификаций.ДоступныеТипы));
		ПараметрыВыбора.Добавить(НовыйПараметр);
	КонецЕсли;
	
	Если ТипЗнч(Элемент) <> Тип("Массив") Тогда
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Иначе
		Для Индекс = 0 По Элемент.ВГраница() Цикл
			Элемент[Индекс].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для номенклатуры.
//
// Параметры:
//  Элемент						 - ПолеФормы									 - поле для ввода номенклатуры
//  ТипПроизводственногоПроцесса - Перечисление.ТипыПроизводственныхПроцессов	 - тип производственного процесса.
//
Процедура УстановитьПараметрыВыбораНоменклатуры(Элемент, ТипПроизводственногоПроцесса) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	Если ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
	 Или ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
	 
		МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		
	КонецЕсли;
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТипов)));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетПоФормулам

// Возвращает описание функций используемых в конструкторе формул
// 
// Возвращаемое значение:
//  массив - описание функций внешних модулей.
//
Функция ОписаниеФункцийКонструктораФормул() Экспорт
	
	Результат = Новый Массив;
	
	Описание = СоздатьОписаниеФункцииКонструктораФормул(
					"ВыборПоПорогу",,
					НСтр("ru = 'Выбор по порогу'"),
					НСтр("ru = 'ВыборПоПорогу'"),
					НСтр("ru = 'ВыборПоПорогу(,,,)'"));
	
	Результат.Добавить(Описание);
	
	Возврат Результат;
	
КонецФункции

// Выбирает значение согласно заданному порогу
//
// Параметры:
//  Параметр	 - Число	 - параметр
//  Значение	 - Число	 - значение
//  Порог		 - Число	 - порог.
// 
// Возвращаемое значение:
//  Число - результат выбора
//
Функция ВыборПоПорогу(
	Параметр,
	Значение,
	Порог,
	Значение2 = 0,
	Порог2 = Неопределено,
	Значение3 = 0,
	Порог3 = Неопределено,
	Значение4 = 0,
	Порог4 = Неопределено,
	Значение5 = 0,
	Порог5 = Неопределено) Экспорт
	
	Результат = 0;
	
	Если Порог >= Параметр Тогда 
		
		Результат = Значение;
		
	ИначеЕсли Значение2 <> 0 И Порог2 = Неопределено Тогда
		
		Результат = Значение2;
		
	ИначеЕсли Порог2 <> 0 И Значение2 <> Неопределено И Порог2 >= Параметр Тогда
		
		Результат = Значение2;
		
	ИначеЕсли Значение3 <> 0 И Порог3 = Неопределено Тогда
		
		Результат = Значение3;
		
	ИначеЕсли Порог3 <> 0 И Значение3 <> Неопределено И Порог3 >= Параметр Тогда
		
		Результат = Значение3;
		
	ИначеЕсли Значение4 <> 0 И Порог4 = Неопределено Тогда
		
		Результат = Значение4;
	
	ИначеЕсли Порог4 <> 0 И Значение4 <> Неопределено И Порог4 >= Параметр Тогда
		
		Результат = Значение4;
		
	ИначеЕсли Значение5 <> 0 И Порог5 = Неопределено Тогда
		
		Результат = Значение5;
		
	ИначеЕсли Порог5 <> 0 И Значение5 <> Неопределено И Порог5 >= Параметр Тогда
		
		Результат = Значение5;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РедактированиеМатериалов

// Выполняет стандартные действия при вводе новой строки таб. части, в которой предусмотрен автовыбор номенклатуры
//  - устанавливает способ автовыбора номенклатуры
//  - устанавливает способ автовыбора характеристики
//  - копирует настройки автовыбора.
//
// Параметры:
//  ДанныеСтроки			 - ДанныеФормыСтруктура	 - содержит данные строки
//  КлючСвязиИсточника		 - Число, Неопределено	 - ключ связи источника (при копировании строки)
//  СоответствиеСвойств		 - ДанныеФормыКоллекция	 - табличная часть "СоответствиеСвойств".
//
Процедура ПриВводеНовойСтрокиСАвтовыбором(ДанныеСтроки, КлючСвязиИсточника = Неопределено, СоответствиеСвойств = Неопределено) Экспорт

	НоваяСтрока = (КлючСвязиИсточника = Неопределено);
	
	Если НоваяСтрока ИЛИ Не ЗначениеЗаполнено(ДанныеСтроки.СпособАвтовыбораНоменклатуры) Тогда
		ДанныеСтроки.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
	КонецЕсли;
	
	Если НоваяСтрока ИЛИ Не ЗначениеЗаполнено(ДанныеСтроки.СпособАвтовыбораХарактеристики) Тогда
		ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	КонецЕсли;
	
	Если (КлючСвязиИсточника <> Неопределено) Тогда
		СписокСтрок = СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязиИсточника));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			НоваяСтрока = СоответствиеСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			НоваяСтрока.КлючСвязи = ДанныеСтроки.КлючСвязи;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет стандартные действия при вводе новой строки в таблице, в которой предусмотрена возможность отбора по свойствам
//   - копирует настройки отбора
//
// Параметры:
//  ДанныеСтроки          - ДанныеФормыСтруктура   - содержит данные строки
//  КлючСвязиИсточника    - Число, Неопределено    - ключ связи источника (при копировании строки)
//  ОтборПоСвойствам      - ДанныеФормыКоллекция   - табличная часть "ОтборПоСвойствам"
Процедура ПриВводеНовойСтрокиСОтборомПоСвойствам(ДанныеСтроки, КлючСвязиИсточника = Неопределено, ОтборПоСвойствам = Неопределено) Экспорт

	Если КлючСвязиИсточника <> Неопределено Тогда // Копирование
		
		СписокСтрок = ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязиИсточника));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			НоваяСтрока = ОтборПоСвойствам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			НоваяСтрока.КлючСвязи = ДанныеСтроки.КлючСвязи;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Выполняет стандартные действия при изменении материала
//
Процедура ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(ДанныеСтроки, Объект) Экспорт

	Если ДанныеСтроки.СпособАвтовыбораНоменклатуры <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ") Тогда
		ДанныеСтроки.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
		ДанныеСтроки.НоменклатураСтрокой = "";
	КонецЕсли; 
		
КонецПроцедуры

// Выполняет стандартные действия при изменении характеристики
//
Процедура ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ДанныеСтроки, Объект) Экспорт

	Если ДанныеСтроки.СпособАвтовыбораХарактеристики <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ") Тогда
		ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
		ДанныеСтроки.ХарактеристикаСтрокой = "";
	КонецЕсли;
	
	ЗаданныеСвойства = Объект.СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи));
	Для каждого ЭлементКоллекции Из ЗаданныеСвойства Цикл
		Объект.СоответствиеСвойств.Удалить(ЭлементКоллекции);
	КонецЦикла; 
	
КонецПроцедуры

// Функция определяет является ли материал полуфабрикатом производимым в процессе
//
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура - содержит данные строки.
// 
// Возвращаемое значение:
//   - Булево - Истина, если материал является полуфабрикатом и производится в процессе.
//
Функция ПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки) Экспорт
	
	
	Возврат Ложь; // пустой обработчик
	
КонецФункции

// Функция определяет является ли материал полуфабрикатом производимым в процессе на этапе.
//
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура - содержит данные строки.
// 
// Возвращаемое значение:
//   - Булево - Истина, если материал является полуфабрикатом и производится в процессе на этапе.
//
Функция ПолуфабрикатПроизводитсяНаЭтапе(ДанныеСтроки) Экспорт
	
	
	Возврат Ложь; // пустой обработчик
	
КонецФункции

// Функция определяет является ли материал полуфабрикатом производимым в процессе по спецификации.
//
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура - содержит данные строки.
// 
// Возвращаемое значение:
//   - Булево - Истина, если материал является полуфабрикатом и производится в процессе по спецификации.
//
Функция ПолуфабрикатПроизводитсяПоСпецификации(ДанныеСтроки) Экспорт
	
	
	Возврат Ложь; // пустой обработчик
	
КонецФункции

#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

// Получает данные основного изделия спецификации
//
// Параметры:
//  Объект	 - СправочникОбъект.РесурсныеСпецификации, Структура - спецификация.
// 
// Возвращаемое значение:
//  Структура - данные основного изделия.
//
Функция ДанныеОсновногоИзделияСпецификации(Объект) Экспорт
	
	ЭтоСборка   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
	ЭтоРемонт   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт"));
	ЭтоРазборка = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка"));
	
	Если (ЭтоСборка ИЛИ ЭтоРемонт)
		И Объект.ВыходныеИзделия.Количество() <> 0 Тогда
		
		Результат = Новый Структура(
			"Номенклатура,
			|Характеристика,
			|Упаковка,
			|КоличествоУпаковок,
			|Количество");
		ЗаполнитьЗначенияСвойств(Результат, Объект.ВыходныеИзделия[0]);
		
	ИначеЕсли ЭтоРазборка Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Номенклатура", Объект.НоменклатураВходящегоИзделия);
		Результат.Вставить("Характеристика", Объект.ХарактеристикаВходящегоИзделия);
		Результат.Вставить("Упаковка", Объект.УпаковкаВходящегоИзделия);
		Результат.Вставить("КоличествоУпаковок", Объект.КоличествоУпаковокВходящегоИзделия);
		Результат.Вставить("Количество", Объект.КоличествоВходящегоИзделия);
		
	Иначе
		
		Результат = Новый Структура;
		Результат.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		Результат.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		Результат.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
		Результат.Вставить("КоличествоУпаковок", 0);
		Результат.Вставить("Количество", 0);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление единицы измерения партии выпуска
//
// Параметры:
//  ОписаниеПартииВыпуска	 - Структура, Строка, СправочникСсылка.УпаковкиЕдиницыИзмерения	 - описание или единица измерения партии выпуска
//  Количество				 - Число														 - количество единиц/партий.
// 
// Возвращаемое значение:
//  Строка - представление единицы измерения партии выпуска.
//
Функция ПредставлениеЕдиницыИзмеренияПартииВыпуска(ОписаниеПартииВыпуска = Неопределено, Количество = 0) Экспорт
	
	Если ОписаниеПартииВыпуска <> Неопределено Тогда
		
		Если ТипЗнч(ОписаниеПартииВыпуска) = Тип("ФиксированнаяСтруктура") Тогда
			ИспользуетсяОписаниеПартииВыпуска = Истина;
			ЕдиницаИзмеренияПартииВыпуска = ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска;
		Иначе
			ИспользуетсяОписаниеПартииВыпуска = Ложь;
			ЕдиницаИзмеренияПартииВыпуска = ОписаниеПартииВыпуска;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияПартииВыпуска) Тогда
			Результат = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
								Количество,
								НСтр("ru = 'партия'"),
								НСтр("ru = 'партии'"),
								НСтр("ru = 'партий'"),
								"ж");
		Иначе
			Результат = Строка(ЕдиницаИзмеренияПартииВыпуска);
		КонецЕсли;
		
		// Дополним единицу измерения описанием партии выпуска
		Если ИспользуетсяОписаниеПартииВыпуска 
			И Не ОписаниеПартииВыпуска.МножественныйВыпуск
				И ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия <> ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска
				И ОписаниеПартииВыпуска.КоличествоУпаковок > 0 
				Тогда
				Результат = СтрШаблон(
								НСтр("ru = '%1 (%2 %3)'"),
								Результат,
								Формат(ОписаниеПартииВыпуска.КоличествоУпаковок,"ЧН=; ЧГ="), 
								ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия
				);
		КонецЕсли;
		
		Возврат Результат;
	Иначе
		
		Возврат НСтр("ru = 'единиц/партий изделий'");
	КонецЕсли;

КонецФункции

// Устанавливает оформление для поля ввода количества единиц/партий
//
// Параметры:
//  ВыпускПроизвольнымиПорциями	 - Булево	 - Истина, если доступен выпуск произвольными порциями
//  Элемент						 - ПолеФормы - элемент управления.
//
Процедура УстановитьПараметрыВводаКоличестваЕдиницПартий(ВыпускПроизвольнымиПорциями, Элемент) Экспорт
	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, ?(ВыпускПроизвольнымиПорциями,3,0)));
	
	Элемент.КнопкаВыбора        = ВыпускПроизвольнымиПорциями;
	Элемент.КнопкаРегулирования = НЕ ВыпускПроизвольнымиПорциями;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Проверяет, что спецификацию можно назначить основной.
//
// Параметры:
//  СвойстваСпецификации	- Структура - содержит свойства спецификации (Статус,ТипПроизводственногоПроцесса)
//  СтруктураОшибки			- Структура - содержит результат проверки: 
//		ТекстОшибки: причина по которой спецификация не может быть основной.
//
// Возвращаемое значение:
//   Булево - Истина, если можно назначить основной.
//
Функция СпецификациюМожноНазначитьОсновной(СвойстваСпецификации, СтруктураОшибки) Экспорт
	
	Если СвойстваСпецификации.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка") Тогда
		Шаблон = НСтр("ru = 'Назначить основной можно только спецификацию типа ""%1"".'");
		ТекстСообщения = СтрШаблон(Шаблон, ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
		СтруктураОшибки.Вставить("ТекстОшибки", ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если СвойстваСпецификации.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует") Тогда
		СтруктураОшибки.Вставить("ТекстОшибки", НСтр("ru = 'Спецификация может быть основной только в статусе ""Действует"".'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует представление этапа, которое можно использовать для вывода пользователю.
//
// Параметры:
//  СпецификацияПредставление			- Строка - Представление спецификации
//  ЭтапПредставление					- Строка - Представление этапа
//  МногоэтапныйПроизводственныйПроцесс	- Булево - Признак того что производственный процесс состоит из нескольких этапов
//  ЭтапВосстановленияБрака				- Булево - Признак того что этап создан для восстановление брака.
//
// Возвращаемое значение:
//   Строка   - представление этапа.
//
Функция ПредставлениеЭтапа(СпецификацияПредставление, ЭтапПредставление, МногоэтапныйПроизводственныйПроцесс, ЭтапВосстановленияБрака = Ложь) Экспорт

	Если МногоэтапныйПроизводственныйПроцесс Тогда
		СпецификацияСтрока = ЭтапПредставление + ", " + СпецификацияПредставление;
	Иначе
		СпецификацияСтрока = СпецификацияПредставление;
	КонецЕсли;
	Если ЭтапВосстановленияБрака Тогда
		СпецификацияСтрока = СпецификацияСтрока + " (" + НСтр("ru = 'восстановление брака'") + ")";
	КонецЕсли; 

	Возврат СпецификацияСтрока;
		
КонецФункции

// Возвращает строковое представление статуса спецификации
//
// Параметры:
//  Статус			 - ПеречислениеСсылка.СтатусыСпецификаций	 - статус спецификации
//  Основная		 - Булево									 - признак, спецификация является основной
//  НачалоДействия	 - Дата										 - начало периода действия
//  КонецДействия	 - Дата										 - конец периода действия
//  СтрокаСтатус	 - Строка									 - представление.
// 
// Возвращаемое значение:
//  Строка - представление спецификации.
//
Функция ПредставлениеСтатусаСпецификации(Статус, Основная, НачалоДействия = '00010101', КонецДействия = '00010101', СтрокаСтатус = "") Экспорт
	
	Если ПустаяСтрока(СтрокаСтатус) Тогда
		СтрокаСтатус = Строка(Статус);
	КонецЕсли;
	
	СтрокаПериодДействия = "";
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует") Тогда
		Если НачалоДействия <> '00010101' И КонецДействия <> '00010101' Тогда
			СтрокаПериодДействия = " " + СтрШаблон(НСтр("ru = 'с %1 по %2'"), Формат(НачалоДействия, "ДЛФ=D"), Формат(КонецДействия, "ДЛФ=D"));
		ИначеЕсли НачалоДействия <> '00010101' Тогда
			СтрокаПериодДействия = " " + СтрШаблон(НСтр("ru = 'с %1'"), Формат(НачалоДействия, "ДЛФ=D"));
		ИначеЕсли КонецДействия <> '00010101'  Тогда
			СтрокаПериодДействия = " " + СтрШаблон(НСтр("ru = 'по %1'"), Формат(КонецДействия, "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	
	СтатусСтрока = СтрШаблон("%1%2%3", СтрокаСтатус, СтрокаПериодДействия, ?(Основная, ", " + НСтр("ru = 'основная'"), ""));
	Возврат СтатусСтрока
	
КонецФункции

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#Область СписокРесурсныхСпецификаций

Процедура УстановитьОтборПоНоменклатуреВСпискеСпецификаций(Список, Номенклатура, Назначение = Неопределено) Экспорт
	
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru='Отбор по номенклатуре'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ВыходныеИзделия.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		Номенклатура,
		,
		ЗначениеЗаполнено(Номенклатура) И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = ПредопределенноеЗначение("Перечисление.ИспользованиеНоменклатурыВНСИПроизводства.Изделие")));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ВозвратныеОтходы.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		Номенклатура,
		,
		ЗначениеЗаполнено(Номенклатура) И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = ПредопределенноеЗначение("Перечисление.ИспользованиеНоменклатурыВНСИПроизводства.Изделие")));
	
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.МатериалыИУслуги.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		Номенклатура,
		,
		ЗначениеЗаполнено(Номенклатура) И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = ПредопределенноеЗначение("Перечисление.ИспользованиеНоменклатурыВНСИПроизводства.Материал")));
	
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Номенклатура", Номенклатура);
	
КонецПроцедуры

#КонецОбласти

#Область ПрименениеМатериалов

// Заполняет информацию по автовыбору материала в строке табличной части
//
Процедура ЗаполнитьИнформациюПоПрименениюМатериала(Строка) Экспорт
	
	СтрокаВероятность = "";
	
	Строка.ПрименениеМатериалаРедактирование = Строка.ПрименениеМатериала + ?(НЕ ПустаяСтрока(СтрокаВероятность) И НЕ ПустаяСтрока(Строка.ПрименениеМатериала),", ","") + СтрокаВероятность;
	
КонецПроцедуры

#КонецОбласти


#Область Прочее

Функция СтруктураОписаниеПартииВыпуска() Экспорт
	
	ОписаниеПартииВыпуска = Новый Структура("
		|МножественныйВыпуск,
		|
		|Номенклатура,
		|Характеристика,
		|Упаковка,
		|КоличествоУпаковок,
		|Количество,
		|
		|ЕдиницаИзмеренияИзделия,
		|ЕдиницаИзмеренияПартииВыпуска");
	
	ОписаниеПартииВыпуска.МножественныйВыпуск = Ложь;
	
	ОписаниеПартииВыпуска.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	ОписаниеПартииВыпуска.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	
	ОписаниеПартииВыпуска.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	ОписаниеПартииВыпуска.КоличествоУпаковок = 0;
	ОписаниеПартииВыпуска.Количество = 0;
	
	ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	
	Возврат ОписаниеПартииВыпуска;
	
КонецФункции

Функция СтруктураЭтапаСпецификации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПроизводствоНаСтороне", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ОсновнаяЕдиницаВремени() Экспорт

	Возврат ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");

КонецФункции

Функция РеквизитыНастройкаСоответствияСвойств() Экспорт
	
	Возврат "СвойствоМатериала,СвойствоПродукции,ЗначениеСвойства,АлгоритмРасчетаЗначения,СпособПодбораЗначения";
	
КонецФункции

Функция РеквизитыНастройкаОтбораПоСвойствам() Экспорт
	
	Возврат "Свойство,Условие,Значение";
	
КонецФункции

Функция СоздатьОписаниеФункцииКонструктораФормул(ИмяФункции, ИмяМодуля = "", Наименование = "", Идентификатор = "", Представление = "")
	
	Результат = Новый Структура("ИмяФункции, ИмяМодуля, Наименование, Идентификатор, Представление");
	
	Результат.ИмяФункции = ИмяФункции;
	
	Если ПустаяСтрока(ИмяМодуля) Тогда
		Результат.ИмяМодуля = "УправлениеДаннымиОбИзделияхКлиентСервер";
	Иначе
		Результат.ИмяМодуля = ИмяМодуля;
	КонецЕсли;
	
	Если ПустаяСтрока(Наименование) Тогда
		Результат.Наименование = ИмяФункции;
	Иначе
		Результат.Наименование = Наименование;
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		Результат.Идентификатор = ИмяФункции;
	Иначе
		Результат.Идентификатор = Идентификатор;
	КонецЕсли;
	
	Если ПустаяСтрока(Представление) Тогда
		Результат.Представление = СтрШаблон("%1()", Результат.Идентификатор);
	Иначе
		Результат.Представление = Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыВыбораСпецификацийНаИзготовлениеСборку() Экспорт
	
	ПараметрыВыбора = ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбора.ДоступныеТипы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
	ПараметрыВыбора.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует"));
	
	Возврат ПараметрыВыбора;
	
КонецФункции

Функция СписокУсловийОтбораПоСвойствамНоменклатуры() Экспорт
	
	Результат = Новый Массив;
	
	Реквизиты = "Идентификатор, Представление, Сравнение";
	
	Результат.Добавить(Новый Структура(Реквизиты, "Равно",             НСтр("ru = 'Равно'"),               Ложь));
	Результат.Добавить(Новый Структура(Реквизиты, "НеРавно",           НСтр("ru = 'Не равно'"),            Ложь));
	
	Результат.Добавить(Новый Структура(Реквизиты, "Больше",            НСтр("ru = 'Больше'"),              Истина));
	Результат.Добавить(Новый Структура(Реквизиты, "БольшеИлиРавно",    НСтр("ru = 'Больше или равно'"),    Истина));
	Результат.Добавить(Новый Структура(Реквизиты, "Меньше",            НСтр("ru = 'Меньше'"),              Истина));
	Результат.Добавить(Новый Структура(Реквизиты, "МеньшеИлиРавно",    НСтр("ru = 'Меньше или равно'"),    Истина));
	
	Результат.Добавить(Новый Структура(Реквизиты, "ВСписке",           НСтр("ru = 'В списке'"),            Ложь));
	Результат.Добавить(Новый Структура(Реквизиты, "НеВСписке",         НСтр("ru = 'Не в списке'"),         Ложь));
	
	Результат.Добавить(Новый Структура(Реквизиты, "ВИнтервале",        НСтр("ru = 'В интервале (>,<)'"),   Истина));
	Результат.Добавить(Новый Структура(Реквизиты, "ВИнтервалеВключая", НСтр("ru = 'В интервале (>=,<=)'"), Истина));
	
	Результат.Добавить(Новый Структура(Реквизиты, "Заполнено",         НСтр("ru = 'Заполнено'"),           Ложь));
	Результат.Добавить(Новый Структура(Реквизиты, "НеЗаполнено",       НСтр("ru = 'Не заполнено'"),        Ложь));
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураУсловийОтбораПоСвойствамНоменклатуры() Экспорт
	
	СтруктураУсловий = Новый Структура;
	
	Условия = СписокУсловийОтбораПоСвойствамНоменклатуры();
	Для каждого Условие Из Условия Цикл
		
		СвойстваУсловия = Новый Структура;
		СвойстваУсловия.Вставить("Идентификатор", Условие.Идентификатор);
		СвойстваУсловия.Вставить("Представление", Условие.Представление);
		СвойстваУсловия.Вставить("Сравнение"    , Условие.Сравнение);
		СвойстваУсловия.Вставить("Список"       , СтрНайти(Условие.Идентификатор, "ВСписке") > 0);
		СвойстваУсловия.Вставить("Интервал"     , СтрНайти(Условие.Идентификатор, "ВИнтервале") > 0);
		СвойстваУсловия.Вставить("Заполненность", СтрНайти(Условие.Идентификатор, "Заполнено") > 0);
		
		СтруктураУсловий.Вставить(Условие.Идентификатор, СвойстваУсловия);
		
	КонецЦикла;
	
	Возврат СтруктураУсловий;
	
КонецФункции

#КонецОбласти

#КонецОбласти
