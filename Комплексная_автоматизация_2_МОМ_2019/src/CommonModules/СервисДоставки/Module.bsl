////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис доставки".
// ОбщийМодуль.СервисДоставки.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Добавляет элементы формы 1С:Доставки на форму объекта при создании на сервере.
// 
// Параметры:
//   Форма - УправляемаяФорма - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СДоставка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоРаботыССервисомДоставки() Тогда
		Возврат;
	КонецЕсли;
	
	// Делаем видимой отдельную группу с доставкой
	ЭлементУправления = Форма.Элементы.Найти("ГруппаСервисДоставки");
	Если ЭлементУправления <> Неопределено Тогда
		ЭлементУправления.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыСервиса

// Создание заказа на доставку в сервисе.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата  - Строка - адрес хранилища с результатом.
//
Процедура СоздатьИзменитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаСоздатьИзменитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Оформление заказа на доставку у грузоперевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОформитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	ПравоОтправкиЗаказовНаДоставкуПеревозчику(Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОформленияЗаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОформитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение заказа на доставку по идентификатору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеЗаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отмена заказа на доставку
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОтменитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОтменаЗаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОтменитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка заказов на доставку по отборам.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьЗаказыНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаЗаказовНаДоставкуСОтборами(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьЗаказыНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка строк графика заказа
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьГрафикДвиженияЗаказа(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучитьГрафикДвиженияЗаказа(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьГрафикДвиженияЗаказа(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка строк графика заказа
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьГрафикДвиженияЗаказаПоТрекНомеру(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучитьГрафикДвиженияЗаказаПоТрекНомеру(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьГрафикДвиженияЗаказа(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка доступных печатных форм для заказа на доставку.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДоступныеПечатныеФормы(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаДоступныхПечатныхФорм(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДоступныеФормы(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка выбранных файлов печатных форм.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьФайлыПечатныхФорм(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеФайловПечатныхФорм(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьФайлыДоступныхФорм(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка доступных тарифов.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьТарифы(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеТарифов(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьТарифы(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка состояний заказов на доставку.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСостояния(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаСостояний(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСостояния(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка грузоперевозчиков сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьГрузоперевозчиков(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаГрузоперевозчиков(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьГрузоперевозчиков(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение данных грузоперевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДанныеГрузоперевозчика(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеДанныхГрузоперевозчика(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДанныеГрузоперевозчика(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка услуг для тарифа.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьУслугиТарифов(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеУслугиДляТипаГрузоперевозки(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьУслугиДляТипаГрузоперевозки(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение доступных терминалов по адресу и направлению.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДоступныеТерминалы(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаДоступныхТерминалов(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДоступныеТерминалы(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение данных терминала.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДанныеТерминала(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеДанныхТерминала(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДанныеТерминала(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

#Область КонструкторыЗапросов

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку() Экспорт
	
	Параметры = НовыйПараметрыЗаказаНаДоставку();
	Параметры.Вставить("ИдентификаторЗаказа"); //Идентификатор заказа 1С:Доставка
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОформитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОтменитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку() Экспорт
	
	// Таблица состояний.
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("Идентификатор", СервисДоставкиСлужебный.Типы().Число);
	
	// Таблица откуда.
	ТаблицаОткуда = Новый ТаблицаЗначений;
	ТаблицаОткуда.Колонки.Добавить("КодФИАС", СервисДоставкиСлужебный.Типы().Строка);
	
	// Таблица куда
	ТаблицаКуда = Новый ТаблицаЗначений;
	ТаблицаКуда.Колонки.Добавить("КодФИАС", СервисДоставкиСлужебный.Типы().Строка);
	
	// Таблица отправителей.
	ТаблицаОтправителей = Новый ТаблицаЗначений;
	ТаблицаОтправителей.Колонки.Добавить("Наименование", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаОтправителей.Колонки.Добавить("ЮрФизЛицо", СервисДоставкиСлужебный.Типы().Число);
	ТаблицаОтправителей.Колонки.Добавить("ИНН", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаОтправителей.Колонки.Добавить("КПП", СервисДоставкиСлужебный.Типы().Строка);
	
	// Таблица получателей.
	ТаблицаПолучателей = Новый ТаблицаЗначений;
	ТаблицаПолучателей.Колонки.Добавить("Наименование", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаПолучателей.Колонки.Добавить("ЮрФизЛицо", СервисДоставкиСлужебный.Типы().Число);
	ТаблицаПолучателей.Колонки.Добавить("ИНН", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаПолучателей.Колонки.Добавить("КПП", СервисДоставкиСлужебный.Типы().Строка);
	
	Результат = Новый Структура;
	
	// Страничный отбор.
	Результат.Вставить("Страница",			0);  // page
	Результат.Вставить("РазмерСтраницы",	0);  // size
	Результат.Вставить("Сортировка",		""); //
	
	// Отборы для поиска.
	Результат.Вставить("Роль", 				""); 				// role
	Результат.Вставить("НомерЗаказа", 				""); 		// number
	Результат.Вставить("ДокументОснованиеИдентификатор", "");	// baseDocumentId
	Результат.Вставить("Состояние",		ТаблицаСостояний); 		// statuses
	Результат.Вставить("Отправитель",	ТаблицаОтправителей); 	// sender
	Результат.Вставить("Получатель",	ТаблицаПолучателей); 	// receiver
	Результат.Вставить("Откуда", 		ТаблицаОткуда); 		// shipmentPoint
	Результат.Вставить("Куда",			ТаблицаКуда); 			// deliveryPoint
	Результат.Вставить("Грузоперевозчик"); 						// carrier
	Результат.Вставить("Оплата"); 								// paymentStatus
	Результат.Вставить("ДатаСозданияОт"); 						// dateCreateFrom
	Результат.Вставить("ДатаСозданияДо"); 						// dateCreateTo
	Результат.Вставить("ДатаОтгрузкиОт"); 						// dateShipmentFrom
	Результат.Вставить("ДатаОтгрузкиДо"); 						// dateShipmentTo
	Результат.Вставить("ДатаДоставкиОт"); 						// dateDeliveryFrom
	Результат.Вставить("ДатаДоставкиДо"); 						// dateDeliveryTo
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьГрафикДвиженияЗаказа() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗаказа");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьГрафикДвиженияЗаказаПоТрекНомеру() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТрекНомер");
	Результат.Вставить("ГрузоперевозчикИдентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДоступныеПечатныеФормы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗаказа");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаЗагрузитьФайлыПечатныхФорм() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗаказа");
	Результат.Вставить("Список", Новый Массив());
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПечатнаяФормаДляЗапроса() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторДокумента");
	Результат.Вставить("ИдентификаторПечатнойФормы");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьСостояния() Экспорт
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьГрузоперевозчиков() Экспорт
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДанныеГрузоперевозчика() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДанныеТерминала() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьТарифы() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТипГрузоперевозки", 1);
	Результат.Вставить("ЗаказчикРоль", 1);  //1 -отправитель, 2 -Получатель, 3 - плательщик 4 - третье лицо.
	
	Результат.Вставить("ДатаОтгрузки");
	Результат.Вставить("ВремяОтгрузкиС");
	Результат.Вставить("ВремяОтгрузкиПо");
	Результат.Вставить("ВремяОтгрузкиОбедС");
	Результат.Вставить("ВремяОтгрузкиОбедПо");
	
	Результат.Вставить("ДатаДоставки");
	Результат.Вставить("ВремяДоставкиС");
	Результат.Вставить("ВремяДоставкиПо");
	Результат.Вставить("ВремяДоставкиОбедС");
	Результат.Вставить("ВремяДоставкиОбедПо");

	Результат.Вставить("ОтправительАдрес");         //Полный адрес
	Результат.Вставить("ОтправительАдресЗначение"); //Формат JSON 1С:БСП
	
	Результат.Вставить("ПолучательАдрес");          //Полный адрес
	Результат.Вставить("ПолучательАдресЗначение"); //Формат JSON 1С:БСП
	
	Результат.Вставить("ГрузКоличествоГрузовыхМест", 1);
	Результат.Вставить("ГрузСтоимость");
	Результат.Вставить("ГрузСодержимое");
	
	Результат.Вставить("ГрузОбщийОбъем");
	Результат.Вставить("ГрузОбщийВес");
	Результат.Вставить("ГрузМаксимальнаяВысота");
	Результат.Вставить("ГрузМаксимальнаяДлина");
	Результат.Вставить("ГрузМаксимальнаяШирина");
	Результат.Вставить("ГрузМаксимальныйВес");
	
	// Таблица услуги
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьУслугиТарифов() Экспорт
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДоступныеТерминалы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ГрузоперевозчикИдентификатор", "");
	Результат.Вставить("Направление", 0);
	Результат.Вставить("ОтправительАдрес", "");         //Полный адрес
	Результат.Вставить("ОтправительАдресЗначение"); //Формат JSON 1С:БСП
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонструкторыОтветов

// Возвращает параметры для ответа на запрос.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыОтветаПолучитьГрафикДвиженияЗаказа() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ИдентификаторЗаказа", ""); //Идентификатор заказа 1С:Доставка
	Параметры.Вставить("ТрекНомер", "");
	Параметры.Вставить("НомерЗаказа", "");
	Параметры.Вставить("ДатаЗаказа", '00010101');
	Параметры.Вставить("ДатаСозданияЗаказа", '00010101');
	Параметры.Вставить("Состояние", "");
	Параметры.Вставить("СостояниеИдентификатор", 0);
	Параметры.Вставить("Заблокирован", Ложь);
	Параметры.Вставить("ТипГрузоперевозки", 1);
	
	Параметры.Вставить("Грузоперевозчик", НовыйПараметрыГрузоперевозчика());
	Параметры.Вставить("Тариф", НовыйПараметрыТарифа());
	Параметры.Вставить("СпособОтгрузки", 1);
	Параметры.Вставить("СпособДоставки", 1);
	Параметры.Вставить("ДатаОтгрузки", '00010101');
	Параметры.Вставить("ДатаДоставки", '00010101');
	Параметры.Вставить("ДатаДоставки", '00010101');
	
	Параметры.Вставить("ТочкаОтправления", НовыйПараметрыТочкиМаршрута());
	Параметры.Вставить("ДополнительнаяИнформация", "");
	
	Параметры.Вставить("ГрафикДвиженияЗаказа", Новый Массив());
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область КонструкторыДанных

// Возвращает параметры объекта данных сервиса доставки.
//
// Параметры:
//  РазмерСтраницы - Число - количество строк на странице.
//  Страница	   - Число - номер текущей страницы.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыСтраницСервиса(РазмерСтраницы = 0, Страница = 0) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Страница",          Страница); // Номер страницы для запроса.
	Результат.Вставить("РазмерСтраницы",    РазмерСтраницы); // Количество записей на одной странице для запроса.
	Результат.Вставить("КоличествоСтрок",   0); // Количество строк в сервисе.
	Результат.Вставить("КоличествоСтраниц", 0); // Количество страниц в сервисе.
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗаказаНаДоставку() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДокументОснование", Неопределено);
	Параметры.Вставить("ДокументОснованиеИдентификатор", Неопределено);
	Параметры.Вставить("ФормаОплаты", 1);
	Параметры.Вставить("Валюта", НовыйПараметрыВалюты());
	
	Параметры.Вставить("ТипГрузоперевозки", 1);
	Параметры.Вставить("Грузоперевозчик", НовыйПараметрыГрузоперевозчика());
	Параметры.Вставить("Тариф", НовыйПараметрыТарифа());
	
	Параметры.Вставить("Отправитель", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("ПунктПриемаГруза", НовыйПараметрыПунктаПриемаВыдачи());
	Параметры.Вставить("СпособОтгрузки", 1);
	Параметры.Вставить("ДатаОтгрузки", '00010101');
	Параметры.Вставить("ВремяОтгрузки", НовыйПараметрыВремениОтгрузкиДоставки()); 
	
	Параметры.Вставить("Получатель", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("ПунктВыдачиГруза", НовыйПараметрыПунктаПриемаВыдачи());
	Параметры.Вставить("СпособДоставки", 1);
	Параметры.Вставить("ДатаДоставки", '00010101');
	Параметры.Вставить("ВремяДоставки", НовыйПараметрыВремениОтгрузкиДоставки()); 
	
	Параметры.Вставить("ПлательщикРоль", 0); //1 - Отправитель; 2 - Получатель; 3 - Третье лицо
	Параметры.Вставить("Плательщик", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("Груз", НовыйПараметрыГруза());
	
	// Таблица услуги
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Параметры.Вставить("Услуги", ТаблицаУслуги);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыУчастникаГрузоперевозки() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Контрагент", НовыйПараметрыКонтрагента());
	Параметры.Вставить("Адрес", НовыйПараметрыАдреса("АдресДоставки"));
	Параметры.Вставить("КонтактноеЛицо", НовыйПараметрыКонтактногоЛица());
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыКонтрагента() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("ЮрФизЛицо", 0);
	Параметры.Вставить("ИНН", "");
	Параметры.Вставить("КПП", "");
	Параметры.Вставить("ЮридическийАдрес", НовыйПараметрыАдреса("Юридический"));
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыКонтактногоЛица() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Телефон", НовыйПараметрыТелефона());
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Параметры:
//  ТипАдреса - Строка - наименование типа адреса. Например: "АдресДоставки", "Юридический", "Фактический". 
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыАдреса(ТипАдреса = "") Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ТипАдреса", ТипАдреса);
	Параметры.Вставить("Владелец", Неопределено);
	Параметры.Вставить("ВладелецНаименование", "");
	Параметры.Вставить("Представление", "");
	Параметры.Вставить("ЗначенияПолей", "");
	Параметры.Вставить("Значение", "");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыСвойстваУслуги() Экспорт

	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("ЕдиницаИзмерения", "");
	Результат.Вставить("ТипЗначения", "");
	Результат.Вставить("Значение", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры организации для подключения к 1С:Бизнес-сеть.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция ПараметрыОрганизацииБизнесСетиДляПодключения() Экспорт
	
	Результат = Новый Структура("ИдентификаторОрганизации, ВременныйТокен");
	Результат.ИдентификаторОрганизации = "";
	Результат.ВременныйТокен = "";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Права

// Проверяет возможность работы в сервисе 1С:Доставка для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права.
//
Функция ПравоРаботыССервисомДоставки(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Использование", Метаданные.Обработки.СервисДоставки);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СервисДоставкиСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Проверяет возможность отправки заказов перевозчику в сервисе 1С:Доставка для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права.
//
Функция ПравоОтправкиЗаказовНаДоставкуПеревозчику(ВыводитьСообщение = Ложь) Экспорт
	
	ЕстьПраво = Пользователи.РолиДоступны("ОтправкаЗаказовНаДоставкуПеревозчикуСервисДоставки", , Ложь);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СервисДоставкиСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Проверяет возможность работы в сервисе 1С:Доставка для текущего пользователя.
//
// Параметры:
//  Параметры - Структура - см. НовыйПараметрыАдреса().
// 
Процедура ЗаполнитьАдресПоПараметрам(Параметры) Экспорт
	
	СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получение данных из строки в формате JSON.
//
Функция ЗначениеИзСтрокиJSON(Значение, ЕстьОшибка=Ложь, ТекстОшибки="") Экспорт
	
	// Проверка типа JSON
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	ПервыйСимвол = Лев(Значение, 1);
	Если ПервыйСимвол <> "[" И ПервыйСимвол <> "{" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЕстьОшибка = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Сервис доставки.Преобразование данных.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеТиповЗначений(Свойство, Значение, ДополнительныеПараметрыФункцииПреобразования, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Значение, НазначениеТипаXML.Явное);
		
		Возврат ЗаписьJSON.Закрыть();
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьПодключениеИнтернетПоддержки(ЕстьПодключениеКСервису = Неопределено) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ЕстьПодключениеКСервису = Истина;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ТипЗнч(ПараметрыАутентификации) = Тип("Структура") Тогда
			ЕстьПодключениеКСервису = Истина;
		Иначе
			ЕстьПодключениеКСервису = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьБлокОшибок(Результат, ОперацияВыполнена) Экспорт
	
	Если Результат.Свойство("Ошибки") Тогда
		Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
			Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
				ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
			КонецЦикла;
		КонецЕсли;
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйПараметрыВалюты() Экспорт

	ПараметрыВалюты = Новый Структура;
	
	ПараметрыВалюты.Вставить("Код", НСтр("ru = '643'"));
	ПараметрыВалюты.Вставить("Наименование", НСтр("ru = 'RUB'"));
	ПараметрыВалюты.Вставить("Ссылка");
	
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыВалюты(ПараметрыВалюты);

	Возврат ПараметрыВалюты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонструкторыДанных

Функция НовыйПараметрыОтветаПолучитьЗаказНаДоставку()
	
	Результат = НовыйПараметрыЗаказаНаДоставку();
	Результат.Вставить("ИдентификаторЗаказа", ""); //Идентификатор заказа 1С:Доставка
	Результат.Вставить("НомерЗаказаДляПечати", ""); //Идентификатор документа заказа 1С:Доставка
	Результат.Вставить("ТрекНомер", "");
	Результат.Вставить("НомерЗаказа", "");
	Результат.Вставить("ДатаЗаказа", '00010101');
	Результат.Вставить("ДатаСозданияЗаказа", '00010101');
	Результат.Вставить("ДатаОтгрузки", '00010101');
	Результат.Вставить("ДатаДоставки", '00010101');
	Результат.Вставить("СуммаДокумента", '00010101');
	Результат.Вставить("СуммаСкидки", 0);
	Результат.Вставить("ЦенаВключаетНДС", 0);
	Результат.Вставить("Оплачен", 0);
	Результат.Вставить("Состояние", 0);
	Результат.Вставить("СостояниеИдентификатор", 0);
	Результат.Вставить("Заблокирован", Ложь);
	Результат.Вставить("ДополнительнаяИнформация", "");
	Результат.Вставить("Документы", Новый Массив());
	
	// Таблица "Дополнительные данные"
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Наименование");
	Таблица.Колонки.Добавить("Значение");
	Таблица.Колонки.Добавить("ТипЗначения");
	Таблица.Колонки.Добавить("Список", СервисДоставкиСлужебный.Типы().Массив);
	
	Результат.Вставить("ДополнительныеДанныеЗаказа", Таблица);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыТарифа()

	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("НеГабарит", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыГрузоперевозчика()

	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Телефон", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыТелефона()

	Параметры = Новый Структура;
	Параметры.Вставить("Представление", "");
	Параметры.Вставить("Значение", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыУслугиЗаказа()

	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Категория", "");
	Результат.Вставить("Обязательная", Ложь);
	Результат.Вставить("СтавкаНДСНаименование", "");
	Результат.Вставить("СтавкаНДСИдентификатор", "");
	Результат.Вставить("СуммаНДС", 0);
	Результат.Вставить("СуммаСНДС", 0);
	Результат.Вставить("СуммаСкидки", 0);
	Результат.Вставить("СвойстваУслуги", Новый Массив());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыГруза()

	Параметры = Новый Структура;
	Параметры.Вставить("КоличествоГрузовыхМест", 1);
	Параметры.Вставить("Вес", 0);
	Параметры.Вставить("Объем", 0);
	Параметры.Вставить("МаксимальнаяВысота", 0);
	Параметры.Вставить("МаксимальнаяДлина", 0);
	Параметры.Вставить("МаксимальнаяШирина", 0);
	Параметры.Вставить("МаксимальныйВес", 0);
	Параметры.Вставить("НегабаритныйВес", 0);
	Параметры.Вставить("НегабаритныйОбъем", 0);
	Параметры.Вставить("КоличествоНегабаритныхГрузовыхМест", 0);
	Параметры.Вставить("Содержимое", "");
	Параметры.Вставить("Стоимость", 0);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыДокументаЗаказа()

	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("ТипДокументаНаименование", "");
	Результат.Вставить("ТипДокументаИдентификатор", 0);
	Результат.Вставить("Состояние", "");
	Результат.Вставить("Номер", "");
	Результат.Вставить("Дата", '00010101');
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("СуммаДолга", 0);
	Результат.Вставить("СуммаСкидки", 0);
	Результат.Вставить("Оплачен", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПунктаПриемаВыдачи()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("ТипНаименование", "");
	Параметры.Вставить("ТипИдентификатор", "");
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Телефон", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыТочкиМаршрута()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Город", "");
	Параметры.Вставить("Тип", НовыйПараметрыТипТочкиМаршрута());
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Телефон", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыТипТочкиМаршрута()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыВремениОтгрузкиДоставки()

	Параметры = Новый Структура;
	
	Параметры.Вставить("С", '00010101'); 
	Параметры.Вставить("По", '00010101');
	Параметры.Вставить("ОбедС", '00010101');
	Параметры.Вставить("ОбедПо", '00010101');
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииДляРаботыССервисом

// Выполнение команды сервиса.
//
// Параметры:
//   ЗапросСервиса - Структура - параметры вызова или имя команды.
//   Отказ - Булево - признак ошибки выполнения.
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьЗапрос(ЗапросСервиса, Отказ)
	
	Если Не ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗапросСервиса.Свойство("ОрганизацияБизнесСети") 
		Или Не ЗначениеЗаполнено(ЗапросСервиса.ОрганизацияБизнесСети) Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
		
	ПараметрыОрганизацииБизнесСети = ПараметрыОрганизацииБизнесСетиДляПодключения();
	
	Если Не ЗначениеЗаполнено(ПараметрыОрганизацииБизнесСети.ИдентификаторОрганизации) Тогда
		ПараметрыОрганизацииБизнесСети.Вставить("ИдентификаторОрганизации", БизнесСеть.ИдентификаторОрганизации(ЗапросСервиса.ОрганизацияБизнесСети));
	КонецЕсли;
	
	Если ПараметрыОрганизацииБизнесСети = Неопределено Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗапросСервиса, ПараметрыОрганизацииБизнесСети);
		
	ИмяСервиса = "Доставка";
	Если Не ПустаяСтрока(ЗапросСервиса.Сервис) Тогда
		ИмяСервиса = ЗапросСервиса.Сервис;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросСервиса.ИдентификаторОрганизации) Тогда
		ЗапросСервиса.Адрес = "api/" + ПараметрыОрганизацииБизнесСети.ИдентификаторОрганизации + "/" + ЗапросСервиса.Адрес;
	КонецЕсли;
		
	// Инициализация параметров соединения.
	ПараметрыСоединения = ПараметрыСоединения(ИмяСервиса);
	
	Если ПараметрыСоединения = Неопределено Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// СтрокаАутентификации формируется заранее, поскольку может быть обращение к сервису
	СтрокаАутентификации = БизнесСеть.СтрокаАутентификацииДляВыполненияКомандыСервиса(ЗапросСервиса, ПараметрыСоединения, Отказ);
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru='Информационная база не подключена к организация ""%1"" в сервисе 1С:Бизнес-сеть.'")
			+ Символы.ПС + НСтр("ru ='Для подключения организации запустите мастер регистрации организаций в сервисе 1С:Бизнес-сеть.'");
			
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросСервиса.ОрганизацияБизнесСети);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "СервисДоставки");
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка времени ожидания ответа.
	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
	
	// Инициализация соединения.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстСообщения = НСтр("ru='Отсутствует соединение с сервисом 1С:Доставка'")
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "СервисДоставки");
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ЗапросСервиса.Адрес);
	
	Если ЗначениеЗаполнено(СтрокаАутентификации) Тогда
		Запрос.Заголовки.Вставить("Authorization", СокрЛП(СТрЗаменить(СтрокаАутентификации,"Bearer ", "")));
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка заголовков запроса.
	Если ЗапросСервиса.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ЗапросСервиса.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Метод = "GET" Тогда
		Запрос.Заголовки.Вставить("Accept", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "POST" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PUT" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PATCH" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "DELETE" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
		Запрос.Заголовки.Вставить("Content-Length", СтрДлина(Запрос.ПолучитьТелоКакСтроку()));
	КонецЕсли;
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ЗапросСервиса.Метод, Запрос);
		Данные = Ответ.ПолучитьТелоКакСтроку();
	Исключение
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ЗапросСервиса.Адрес + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ЗапросСервиса.Наименование,
			ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецПопытки;
	
	// Обработка результата запроса.
	Результат = ОбработатьОтветСервиса(Соединение, ЗапросСервиса, Ответ, Данные, Отказ);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОтветСервиса(Соединение, ЗапросСервиса, HTTPОтвет, Данные, Отказ)
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) = Неопределено
		И КодСостояния <> 200
		И ЗапросСервиса.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		Если КодСостояния >= 500 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Внутренняя ошибка сервиса'"));
		ИначеЕсли КодСостояния >= 400 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Ошибка параметров запроса'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		Возврат ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросСервиса.Результат) Тогда
		Данные = ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(ЗначениеИзСтрокиJSON(Данные),
			ЗапросСервиса.Результат, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат КодСостояния;
	КонецЕсли;
	
	Если ЗапросСервиса.ОбработкаРезультата <> Неопределено Тогда
		Результат = ОбработатьОтветСервисаПродолжение(ЗапросСервиса.ОбработкаРезультата, КодСостояния, Данные, Отказ);
	Иначе
		Результат = ЗначениеИзСтрокиJSON(Данные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Отказ)

	ТекстОшибки = ЗапросСервиса.Ошибки.Получить(КодСостояния);
	
	Если ТекстОшибки = Ложь Тогда
		Возврат КодСостояния;
	ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru = 'Сервис доставки. Ошибка'");
	КонецЕсли;
	
	Отказ = Истина;
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если Не ПустаяСтрока(ЗапросСервиса.Наименование) Тогда
		ТекстОшибки = ТекстОшибки + " (" + ЗапросСервиса.Наименование + ")";
	КонецЕсли;
	
	ОшибкаСервиса = "";
	Если ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
		
		Если ЗначениеДанных.Свойство("error") Тогда
			ЗначениеДанных = ЗначениеДанных.error;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("title") Тогда
			ОшибкаСервиса = ЗначениеДанных.title;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("requestTraceId") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС)
				+ НСтр("ru = 'Идентификатор ошибки'") + ": " + ЗначениеДанных.requestTraceId;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("detail") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС) + ЗначениеДанных.detail;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("message") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС) + ЗначениеДанных.message;
		ИначеЕсли ЗначениеДанных.Свойство("error_description") Тогда
			ОшибкаСервиса = ЗначениеДанных.error_description;
		ИначеЕсли ЗначениеДанных.Свойство("ПодробныйТекстОшибки") Тогда
			ОшибкаСервиса = ЗначениеДанных.ПодробныйТекстОшибки;
		ИначеЕсли ЗначениеДанных.Свойство("validationError") И ТипЗнч(ЗначениеДанных.validationError) = Тип("Массив") Тогда
			ОшибкиВложенные = "";
			Для каждого СтрокаОшибки Из ЗначениеДанных.validationError Цикл
				ОшибкиВложенные = ОшибкиВложенные + ?(ПустаяСтрока(ОшибкиВложенные), "", Символы.ПС)
					+ " - " + СтрокаОшибки.message + " (" + СтрокаОшибки.field + ")";
			КонецЦикла;
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + ":" + Символы.ПС) + ОшибкиВложенные;
		КонецЕсли;
	КонецЕсли;
	
	АдресСоединенияURL =  ?(Соединение.Защищенное, "https://", "http://") + Соединение.Сервер
		+ ":" + Формат(Соединение.Порт, "ЧГ=") + ?(Лев(ЗапросСервиса.Адрес, 1) = "/", "", "/") + ЗапросСервиса.Адрес;
	
	ПодробныйТекстОшибки = ТекстОшибки
		+ ?(КодСостояния > 200, Символы.ПС + НСтр("ru = 'Код состояния:'") + " " + КодСостояния, "")
		+ Символы.ПС + ЗапросСервиса.Метод + " " +АдресСоединенияURL
		+ ?(ОшибкаСервиса = "", "", Символы.ПС + ОшибкаСервиса)
		+ ?(ПустаяСтрока(ЗапросСервиса.Детализация), "", Символы.ПС 
			+ НСтр("ru = 'Детализация'") + ": " + ЗапросСервиса.Детализация);
	
	Если Не (ЗапросСервиса.Свойство("БлокироватьСообщенияОбОшибках")
		И ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина) Тогда
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки + Символы.ПС + ОшибкаСервиса);
	КонецЕсли;
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Сервис доставки.'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ ЗапросСервиса.Наименование, УровеньЖурналаРегистрации.Ошибка,,, ПодробныйТекстОшибки);
		
	Возврат КодСостояния;
	
КонецФункции

Функция ОбработатьОтветСервисаПродолжение(Обработка, КодСостояния, Данные, Отказ)
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если ТипЗнч(Обработка) = Тип("ТаблицаЗначений") Тогда
		Если ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		ИначеЕсли ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Обработка) = Тип("Строка") Тогда
		Результат = КонвертироватьЗначениеСервиса(ЗначениеДанных, Обработка, КодСостояния);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПараметрАдресаHTML(Адрес, Имя, Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=");
	КонецЕсли;
	
	Адрес = Адрес + ?(СтрНайти(Адрес, "?") = 0, "?", "&") + Имя + "=" + Значение;
	
КонецПроцедуры

#Область НастройкиПодключенияКСервису

Функция ПараметрыСоединения(ИмяСервиса)
	
	Возврат СервисДоставкиПовтИсп.ПараметрыСоединения(ИмяСервиса);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеКонструкторы

// Описание запроса сервиса.
// 
// Возвращаемое значение:
//  Структура - данные для запроса.
//
Функция НовыйЗапросСервиса()
	
	ЗапросСервиса = Новый Структура;
	ЗапросСервиса.Вставить("Сервис",       "Доставка");
	ЗапросСервиса.Вставить("Наименование", ""); // Полное наименование метода.
	ЗапросСервиса.Вставить("Адрес",        ""); // Адрес URI метода.
	ЗапросСервиса.Вставить("Метод",        ""); // Метод HTTP соединения, например POST. См. МетодыСоединения()
	ЗапросСервиса.Вставить("Права",        "");
	ЗапросСервиса.Вставить("Данные");           // Двоичные данные или строка.
	ЗапросСервиса.Вставить("РазрешенныеСостояния", Новый Массив);
	ЗапросСервиса.Вставить("Ошибки",       Новый Соответствие); // Соответствие ошибок, например: (404, "Не найдено").
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь); // Не выводить сообщения об ошибках.
	ЗапросСервиса.Вставить("ОбработкаРезультата");        // Строка, ТаблицаЗначений
	ЗапросСервиса.Вставить("Страница",       0);  // page
	ЗапросСервиса.Вставить("РазмерСтраницы", 0);  // size
	ЗапросСервиса.Вставить("ИдентификаторОрганизации", "");
	ЗапросСервиса.Вставить("ВременныйТокен", ""); // используется для выполнения запросов по токенам, не сохраненных в ИБ
	ЗапросСервиса.Вставить("Аутентификация", Ложь); // для некоторых методов, аутентификация может быть не нужна
	ЗапросСервиса.Вставить("ТипКонтента", "  application/json");
	
	
	ЗапросСервиса.Вставить("Таймаут",      120);  // Длительность ожидания ответа.
	ЗапросСервиса.Вставить("Результат");        // Свойство возврата результата, например "path[0].cat".
	ЗапросСервиса.Вставить("ДополнительныеПараметры");          // Дополнительные параметры.
	ЗапросСервиса.Вставить("Контент",      ""); // Описание контента (передается в заголовке).
	ЗапросСервиса.Вставить("Детализация",  ""); // Дополнительная информация для описания деталей запроса.
	ЗапросСервиса.Вставить("Заголовки",  Новый Соответствие()); // Дополнительная информация для описания деталей запроса.
	
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЗапросовКСервису

Функция ЗапросСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Создать, изменить заказ на доставку'");
	ЗапросСервиса.Адрес = "delivery/order";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-ordr.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("vnd-1cbn-idempotency-key", ПараметрыЗапроса.КлючИдемпотентности);
	Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-result.v1+json");
	
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	// Тело запроса
	Данные = Новый Структура;
	
	Параметры = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(ПараметрыЗапроса, Параметры);
	
	ДобавитьЗначение(Данные, "id", Параметры.ИдентификаторЗаказа, Истина);
	ДобавитьЗначение(Данные, "baseDocumentId", Параметры.ДокументОснованиеИдентификатор, Истина);
	ДобавитьЗначение(Данные, "transportationTypeId", Параметры.ТипГрузоперевозки, Истина);
	ДобавитьЗначение(Данные, "carrierId", Параметры.ГрузоперевозчикИдентификатор, Истина);
	ДобавитьЗначение(Данные, "tariffId", Параметры.ТарифИдентификатор, Истина);
	ДобавитьЗначение(Данные, "currencyId", Параметры.ВалютаКод, Истина);
	
	ДобавитьЗначение(Данные, "shipment.tipeId", Параметры.СпособОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.pointId", Параметры.ПунктПриемаГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "shipment.date", Параметры.ДатаОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.time.from", Параметры.ВремяОтгрузкиС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.to", Параметры.ВремяОтгрузкиПо, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakFrom", Параметры.ВремяОтгрузкиОбедС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakTo", Параметры.ВремяОтгрузкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "shipment.address.view", Параметры.ОтправительАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.address.value", Новый ХранилищеЗначения(Параметры.ОтправительАдресЗначение, Новый СжатиеДанных(9)), Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.name", Параметры.ОтправительКонтрагентНаименование, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.typeId", Параметры.ОтправительКонтрагентЮрФизЛицо, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.inn", Параметры.ОтправительКонтрагентИНН, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.kpp", Параметры.ОтправительКонтрагентКПП, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.view", Параметры.ОтправительКонтрагентЮридическийАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтрагентЮридическийАдресЗначение, Новый СжатиеДанных(9)), Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.name", Параметры.ОтправительКонтактноеЛицоНаименование, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phone.number", Параметры.ОтправительКонтактноеЛицоТелефонПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phone.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтактноеЛицоТелефонЗначение, Новый СжатиеДанных(9)), Истина);
	
	ДобавитьЗначение(Данные, "delivery.tipeId", Параметры.СпособДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.pointId", Параметры.ПунктВыдачиГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "delivery.date", Параметры.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.time.From", Параметры.ВремяДоставкиС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.To", Параметры.ВремяДоставкиПо, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakFrom", Параметры.ВремяДоставкиОбедС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakTo", Параметры.ВремяДоставкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "delivery.address.view", Параметры.ПолучательАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.address.value", Новый ХранилищеЗначения(Параметры.ПолучательАдресЗначение, Новый СжатиеДанных(9)), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.name", Параметры.ПолучательКонтрагентНаименование, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.inn", Параметры.ПолучательКонтрагентИНН, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.kpp", Параметры.ПолучательКонтрагентКПП, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.typeId", Параметры.ПолучательКонтрагентЮрФизЛицо, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.view", Параметры.ПолучательКонтрагентЮридическийАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.value", Новый ХранилищеЗначения(Параметры.ПолучательКонтрагентЮридическийАдресЗначение, Новый СжатиеДанных(9)), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.name", Параметры.ПолучательКонтактноеЛицоНаименование, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phone.number", Параметры.ПолучательКонтактноеЛицоТелефонПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phone.value", Новый ХранилищеЗначения(Параметры.ПолучательКонтактноеЛицоТелефонЗначение, Новый СжатиеДанных(9)), Истина);
	
	ДобавитьЗначение(Данные, "payment.typeId", Параметры.ФормаОплаты, Истина);
	ДобавитьЗначение(Данные, "payment.payerRoleId", Параметры.ПлательщикРоль, Истина);
	
	Если Параметры.ПлательщикРоль = 3 Тогда
		ДобавитьЗначение(Данные, "payment.participant.counteragent.name", Параметры.ПлательщикКонтрагентНаименование, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.typeId", Параметры.ПлательщикКонтрагентЮрФизЛицо, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.inn", Параметры.ПлательщикКонтрагентИНН, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.kpp", Параметры.ПлательщикКонтрагентКПП, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.legaladdress.view", Параметры.ПлательщикКонтрагентЮридическийАдресПредставление, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.legaladdress.value", Новый ХранилищеЗначения(Параметры.ПлательщикКонтрагентЮридическийАдресЗначение, Новый СжатиеДанных(9)), Истина);
		ДобавитьЗначение(Данные, "payment.participant.contactPerson.name", Параметры.ПлательщикКонтактноеЛицоНаименование, Истина);
		ДобавитьЗначение(Данные, "payment.participant.contactPerson.phone.number", Параметры.ПлательщикКонтактноеЛицоТелефонПредставление, Истина);
		ДобавитьЗначение(Данные, "payment.participant.contactPerson.phone.value", Новый ХранилищеЗначения(Параметры.ПлательщикКонтактноеЛицоТелефонЗначение, Новый СжатиеДанных(9)), Истина);
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "cargo.quantity", Параметры.ГрузКоличествоГрузовыхМест, Истина);
	ДобавитьЗначение(Данные, "cargo.weight", Параметры.ГрузВес, Истина);
	ДобавитьЗначение(Данные, "cargo.volume", Параметры.ГрузОбъем, Истина);
	ДобавитьЗначение(Данные, "cargo.maxHeight", Параметры.ГрузМаксимальнаяВысота, Истина);
	ДобавитьЗначение(Данные, "cargo.maxLength", Параметры.ГрузМаксимальнаяДлина, Истина);
	ДобавитьЗначение(Данные, "cargo.maxWidth", Параметры.ГрузМаксимальнаяШирина, Истина);
	ДобавитьЗначение(Данные, "cargo.maxWeight", Параметры.ГрузМаксимальныйВес, Истина);
	ДобавитьЗначение(Данные, "cargo.description", Параметры.ГрузСодержимое, Истина);
	ДобавитьЗначение(Данные, "cargo.value", Параметры.ГрузСтоимость, Истина);
	ДобавитьЗначение(Данные, "cargo.oversizedWeight", Параметры.ГрузНегабаритныйВес, Истина);
	ДобавитьЗначение(Данные, "cargo.oversizedVolume", Параметры.ГрузНегабаритныйОбъем, Истина);
	ДобавитьЗначение(Данные, "cargo.oversizedQuantity", Параметры.ГрузКоличествоНегабаритныхГрузовыхМест, Истина);
	
	МассивУслуг = Новый Массив();
	
	Для Каждого ТекущаяУслуга Из ПараметрыЗапроса.Услуги Цикл
		
		НоваяУслуга = Новый Структура();
		НоваяУслуга.Вставить("id", ТекущаяУслуга.Идентификатор);
		
		МассивСвойств = Новый Массив();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = Новый Структура();
			ДобавитьЗначение(НовоеСвойство, "id", ТекущееСвойство.Идентификатор, Истина);
			ДобавитьЗначение(НовоеСвойство, "value", ТекущееСвойство.Значение, Истина);
			МассивСвойств.Добавить(НовоеСвойство);
		КонецЦикла;
		
		НоваяУслуга.Вставить("properties", МассивСвойств);
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "services", МассивУслуг, Истина);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаОформленияЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Оформление заказа на доставку.'");
	ЗапросСервиса.Адрес = СтрШаблон("delivery/orders/%1/carrier", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение заказа на доставку.'");
	ЗапросСервиса.Адрес = СтрШаблон("delivery/orders/%1/get", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-ordr.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОтменаЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Отмена заказа на доставку.'");
	ЗапросСервиса.Адрес = СтрШаблон("delivery/orders/%1/cancel", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаЗаказовНаДоставкуСОтборами(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка заказов на доставку'");
	ЗапросСервиса.Адрес = СтрШаблон("delivery/orders");
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-srchords.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-ordrs.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Страница) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РазмерСтраницы) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерСтраницы);
	КонецЕсли;
	
	// Тело запроса
	Данные = Новый Структура;
		
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Роль) Тогда
		
		ДобавитьЗначение(Данные,"role", ПараметрыЗапроса.Роль);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Состояние) Тогда
		
		Состояния = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Состояние Цикл
			Состояния.Добавить(ЭлементКоллекции.Идентификатор);
		КонецЦикла;
		ДобавитьЗначение(Данные,"statuses", Состояния);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.НомерЗаказа) Тогда
		
		ДобавитьЗначение(Данные,"number", ПараметрыЗапроса.НомерЗаказа);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ДокументОснованиеИдентификатор) Тогда
		
		ДобавитьЗначение(Данные,"baseDocumentId", ПараметрыЗапроса.ДокументОснованиеИдентификатор, Истина);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыЗапроса.Отправитель) Тогда
		
		Отправители = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Отправитель Цикл
			Отправитель = Новый Структура;
			Отправитель.Вставить("inn", ЭлементКоллекции.ИНН);
			Отправитель.Вставить("kpp",  ЭлементКоллекции.КПП);
			Отправитель.Вставить("type",  ЭлементКоллекции.ЮрФизЛицо);
			Отправитель.Вставить("name",  ЭлементКоллекции.Наименование);
			Отправители.Добавить(Отправитель);
		КонецЦикла;
		ДобавитьЗначение(Данные,"sender", Отправители);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Получатель) Тогда
		
		Получатели = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Получатель Цикл
			Получатель = Новый Структура;
			Получатель.Вставить("inn", ЭлементКоллекции.ИНН);
			Получатель.Вставить("kpp",  ЭлементКоллекции.КПП);
			Получатель.Вставить("type",  ЭлементКоллекции.ЮрФизЛицо);
			Получатель.Вставить("name",  ЭлементКоллекции.Наименование);
			Получатели.Добавить(Получатель);
		КонецЦикла;
		ДобавитьЗначение(Данные,"receiver", Получатели);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Откуда) Тогда
		
		АдресаОткуда = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Откуда Цикл
			АдресОткуда = Новый Структура;
			АдресОткуда.Вставить("id", ЭлементКоллекции.КодФИАС);
			АдресаОткуда.Добавить(АдресОткуда);
		КонецЦикла;
		ДобавитьЗначение(Данные,"shipmentPoint", АдресаОткуда);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Куда) Тогда
		
		АдресаКуда = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Куда Цикл
			АдресКуда = Новый Структура;
			АдресКуда.Вставить("id", ЭлементКоллекции.КодФИАС);
			АдресаКуда.Добавить(АдресКуда);
		КонецЦикла;
		ДобавитьЗначение(Данные,"deliveryPoint", АдресаКуда);
		
	КонецЕсли;
	
	ДобавитьЗначение(Данные,"carrier", ПараметрыЗапроса.Грузоперевозчик);
	ДобавитьЗначение(Данные,"paymentStatus", ПараметрыЗапроса.Оплата);
	ДобавитьЗначение(Данные,"dateCreateFrom", ПараметрыЗапроса.ДатаСозданияОт);
	ДобавитьЗначение(Данные,"dateCreateTo", ПараметрыЗапроса.ДатаСозданияДо);
	ДобавитьЗначение(Данные,"dateShipmentFrom", ПараметрыЗапроса.ДатаОтгрузкиОт);
	ДобавитьЗначение(Данные,"dateShipmentTo", ПараметрыЗапроса.ДатаОтгрузкиДо);
	ДобавитьЗначение(Данные,"dateDeliveryFrom", ПараметрыЗапроса.ДатаДоставкиОт);
	ДобавитьЗначение(Данные,"dateDeliveryTo", ПараметрыЗапроса.ДатаДоставкиДо);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучитьГрафикДвиженияЗаказа(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных по заказу.'");
	ЗапросСервиса.Адрес = СтрШаблон("delivery/orders/%1/history", ПараметрыЗапроса.ИдентификаторЗаказа);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-tracker.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучитьГрафикДвиженияЗаказаПоТрекНомеру(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных по заказу.'");
	ЗапросСервиса.Адрес = СтрШаблон("delivery/orders/%1/search/%2", ПараметрыЗапроса.ТрекНомер, ?(ЗначениеЗаполнено(ПараметрыЗапроса.ГрузоперевозчикИдентификатор),ПараметрыЗапроса.ГрузоперевозчикИдентификатор, "0"));
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-tracker.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаДоступныхПечатныхФорм(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка доступных печатных форм.'");
	ЗапросСервиса.Адрес = СтрШаблон("delivery/orders/%1/availableForms", ПараметрыЗапроса.ИдентификаторЗаказа);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-forms.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеФайловПечатныхФорм(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение файлов печатных форм.'");
	ЗапросСервиса.Адрес = СтрШаблон("delivery/orders/%1/forms", ПараметрыЗапроса.ИдентификаторЗаказа);
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-nfiles.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-files.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Данные = Новый Структура;
		
	Данные.Вставить("_embedded", Новый Структура());
	
	МассивФорм = Новый Массив();
	
	Для Каждого ТекущаяФорма Из ПараметрыЗапроса.Список Цикл
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("id", ТекущаяФорма.ИдентификаторПечатнойФормы);
		ПараметрыФормы.Вставить("docId", ТекущаяФорма.ИдентификаторДокумента);
		
		МассивФорм.Добавить(ПараметрыФормы);
		
	КонецЦикла;
	
	Данные._embedded.Вставить("items", МассивФорм);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеТарифов(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка тарифов'");
	ЗапросСервиса.Адрес = СтрШаблон("delivery/calculator");
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-srchtrfs.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-tariffs.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	// Тело запроса
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "transportationTypeId", ПараметрыЗапроса.ТипГрузоперевозки, Истина);
	ДобавитьЗначение(Данные, "requesterRoleId", ПараметрыЗапроса.ЗаказчикРоль, Истина);
	
	ДобавитьЗначение(Данные, "shipment.date", ПараметрыЗапроса.ДатаОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.time.from", ПараметрыЗапроса.ВремяОтгрузкиС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.to", ПараметрыЗапроса.ВремяОтгрузкиПо, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakFrom", ПараметрыЗапроса.ВремяОтгрузкиОбедС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakTo", ПараметрыЗапроса.ВремяОтгрузкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "shipment.address.view", ПараметрыЗапроса.ОтправительАдрес, Истина);
	ДобавитьЗначение(Данные, "shipment.address.value", ПараметрыЗапроса.ОтправительАдресЗначение, Истина);
	ДобавитьЗначение(Данные, "delivery.date", ПараметрыЗапроса.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.time.from", ПараметрыЗапроса.ВремяДоставкиС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.to", ПараметрыЗапроса.ВремяДоставкиПо, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakFrom", ПараметрыЗапроса.ВремяДоставкиОбедС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakTo", ПараметрыЗапроса.ВремяДоставкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "delivery.address.view", ПараметрыЗапроса.ПолучательАдрес, Истина);
	ДобавитьЗначение(Данные, "delivery.address.value", ПараметрыЗапроса.ПолучательАдресЗначение, Истина);
	ДобавитьЗначение(Данные, "cargo.quantity", ПараметрыЗапроса.ГрузКоличествоГрузовыхМест, Истина);
	ДобавитьЗначение(Данные, "cargo.weight", ПараметрыЗапроса.ГрузОбщийВес, Истина);
	ДобавитьЗначение(Данные, "cargo.volume", ПараметрыЗапроса.ГрузОбщийОбъем, Истина);
	ДобавитьЗначение(Данные, "cargo.maxHeight", ПараметрыЗапроса.ГрузМаксимальнаяВысота, Истина);
	ДобавитьЗначение(Данные, "cargo.maxLength", ПараметрыЗапроса.ГрузМаксимальнаяДлина, Истина);
	ДобавитьЗначение(Данные, "cargo.maxWidth", ПараметрыЗапроса.ГрузМаксимальнаяШирина, Истина);
	ДобавитьЗначение(Данные, "cargo.maxWeight", ПараметрыЗапроса.ГрузМаксимальныйВес, Истина);
	ДобавитьЗначение(Данные, "cargo.description", ПараметрыЗапроса.ГрузСодержимое, Истина);
	ДобавитьЗначение(Данные, "cargo.value", ПараметрыЗапроса.ГрузСтоимость, Истина);
	
	МассивУслуг = Новый Массив();
	
	Для Каждого ТекущаяУслуга Из ПараметрыЗапроса.Услуги Цикл
		
		НоваяУслуга = Новый Структура();
		НоваяУслуга.Вставить("id", ТекущаяУслуга.Идентификатор);
		
		МассивСвойств = Новый Массив();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = Новый Структура();
			ДобавитьЗначение(НовоеСвойство, "id", ТекущееСвойство.Идентификатор, Истина);
			ДобавитьЗначение(НовоеСвойство, "value", ТекущееСвойство.Значение, Истина);
			МассивСвойств.Добавить(НовоеСвойство);
		КонецЦикла;
		
		НоваяУслуга.Вставить("properties", МассивСвойств);
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "services", МассивУслуг, Истина);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаСостояний(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка состояний заказов'");
	ЗапросСервиса.Адрес = СтрШаблон("deliveryCatalogs/statuses");
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-statuses.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаГрузоперевозчиков(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка грузоперевозчиков'");
	ЗапросСервиса.Адрес = СтрШаблон("deliveryCatalogs/carriers");
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-carriers.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеДанныхГрузоперевозчика(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных грузоперевозчика'");
	ЗапросСервиса.Адрес = СтрШаблон("deliveryCatalogs/carriers/%1", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-carrier.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеУслугиДляТипаГрузоперевозки(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка услуг'");
	ЗапросСервиса.Адрес = СтрШаблон("deliveryCatalogs/services");
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-services.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Если ПараметрыЗапроса.Свойство("ТипГрузоперевозки") И ЗначениеЗаполнено(ПараметрыЗапроса.ТипГрузоперевозки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "transportationType", ПараметрыЗапроса.ТипГрузоперевозки);
	Иначе
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "transportationType", "1");
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаДоступныхТерминалов(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка доступных терминалов.'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/pointsByAdrress";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-points.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/vnd-1cbn-delivcat-points.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	// Тело запроса
	Данные = Новый Структура;
		
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Адрес) Тогда
		
		ДобавитьЗначение(Данные, "address.view", ПараметрыЗапроса.Адрес, Истина);
		ДобавитьЗначение(Данные, "address.value", ПараметрыЗапроса.АдресЗначение, Истина);
		
	Иначе
		ТекстСообщения = НСтр("ru='Не заполнен адрес.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ГрузоперевозчикИдентификатор) Тогда
		ДобавитьЗначение(Данные, "carrierId", ПараметрыЗапроса.ГрузоперевозчикИдентификатор, Истина);
	Иначе
		ТекстСообщения = НСтр("ru='Не заполнен код грузоперевозчика.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Направление) Тогда
		ДобавитьЗначение(Данные, "typeOperation", ПараметрыЗапроса.Направление, Истина);
	Иначе
		ТекстСообщения = НСтр("ru='Не заполнен код операции.'");
		Отказ = Истина;
	КонецЕсли;
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеДанныхТерминала(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных пункта приема-выдачи груза'");
	ЗапросСервиса.Адрес = СтрШаблон("deliveryCatalogs/points/%1", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-point.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

#КонецОбласти

#Область ОбработкаРезультатовЗапросовКСервису

Процедура ОбработатьРезультатЗапросаСоздатьИзменитьЗаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));
	Результат.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(СтруктураОтвета, "barcode"));
	Результат.Вставить("НомерЗаказа", ПолучитьЗначение(СтруктураОтвета, "number"));
	Результат.Вставить("ДатаЗаказа", ПолучитьЗначение(СтруктураОтвета, "date", "Дата"));
	Результат.Вставить("ТрекНомер", ПолучитьЗначение(СтруктураОтвета, "trackNumber"));
	Результат.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(СтруктураОтвета, "createDate"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОформитьЗаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));
	Результат.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(СтруктураОтвета, "barcode"));
	Результат.Вставить("НомерЗаказа", ПолучитьЗначение(СтруктураОтвета, "number"));
	Результат.Вставить("ДатаЗаказа", ПолучитьЗначение(СтруктураОтвета, "date", "Дата"));
	Результат.Вставить("ТрекНомер", ПолучитьЗначение(СтруктураОтвета, "trackNumber"));
	Результат.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(СтруктураОтвета, "createDate"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОтменитьЗаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьЗаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Параметры = НовыйПараметрыОтветаПолучитьЗаказНаДоставку();
	
	ПараметрыЗаказа = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыЗаказа);
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыЗаказа.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(Данные, "id"));
	ПараметрыЗаказа.Вставить("ДокументОснование", ДокументОснованияЗаказаНаДоставкуПоGUID(ПолучитьЗначение(Данные, "baseDocumentId")));
	ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(Данные, "trackNumber"));
	ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(Данные, "barcode"));
	ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(Данные, "number"));
	ПараметрыЗаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(Данные, "date","Дата"));
	ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(Данные, "createDate", "Дата"));
	ПараметрыЗаказа.Вставить("СуммаДокумента", ПолучитьЗначение(Данные, "totalSum","Число",0));
	ПараметрыЗаказа.Вставить("СуммаСкидки", ПолучитьЗначение(Данные, "totalDiscountSum","Число",0));
	ПараметрыЗаказа.Вставить("ЦенаВключаетНДС", ПолучитьЗначение(Данные, "includingVAT",, Истина));
	
	ПараметрыВалюты = НовыйПараметрыВалюты();
	ПараметрыЗаказа.Вставить("ВалютаКод", ПараметрыВалюты.Код);
	ПараметрыЗаказа.Вставить("ВалютаНаименование", ПараметрыВалюты.Наименование);
	ПараметрыЗаказа.Вставить("ВалютаСсылка", ПараметрыВалюты.Ссылка);
	
	ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(Данные, "status.name",, НСтр("ru='Состояние неизвестно'")));
	ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(Данные, "status.id",, 0));
	ПараметрыЗаказа.Вставить("Заблокирован", ПолучитьЗначение(Данные, "isLocked",, Ложь));
	ПараметрыЗаказа.Вставить("Оплачен", ПолучитьЗначение(Данные, "isPaid",, Ложь));
	
	ПараметрыЗаказа.Вставить("ТипГрузоперевозки", ПолучитьЗначение(Данные, "transportationType",,1));
	Если Не ЗначениеЗаполнено(ПараметрыЗаказа.ТипГрузоперевозки) Тогда
		ПараметрыЗаказа.ТипГрузоперевозки = 1;
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrier.name"));
	ПараметрыЗаказа.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrier.id"));
	ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(Данные, "tariff.name"));
	ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(Данные, "tariff.id"));
	
	// Отгрузка
	ПараметрыЗаказа.Вставить("СпособОтгрузки", ПолучитьЗначение(Данные, "shipment.type.id"));
	ПараметрыЗаказа.Вставить("СпособОтгрузкиНаименование", ПолучитьЗначение(Данные, "shipment.type.name"));
	
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаИдентификатор", ПолучитьЗначение(Данные, "shipment.point.id"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаНаименование", ПолучитьЗначение(Данные, "shipment.point.name"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаАдрес", ПолучитьЗначение(Данные, "shipment.point.address"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТелефон", ПолучитьЗначение(Данные, "shipment.point.phone"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТипНаименование", ПолучитьЗначение(Данные, "shipment.point.type.name"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТипИдентификатор", ПолучитьЗначение(Данные, "shipment.point.type.id"));
	
	ПараметрыЗаказа.Вставить("ОтправительАдресПредставление", ПолучитьЗначение(Данные, "shipment.address.view"));
	ПараметрыЗаказа.Вставить("ОтправительАдресЗначение", ПолучитьЗначение(Данные, "shipment.address.value", "ХранилищеЗначения"));
	
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(Данные, "shipment.date","Дата"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиС", ПолучитьЗначение(Данные, "shipment.time.from", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиПо", ПолучитьЗначение(Данные, "shipment.time.to", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедС", ПолучитьЗначение(Данные, "shipment.time.breakFrom", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедПо", ПолучитьЗначение(Данные, "shipment.time.breakTo", "Дата"));
	
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "shipment.participant.counteragent.typeId",,1));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентИНН", ПолучитьЗначение(Данные, "shipment.participant.counteragent.inn"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентКПП", ПолучитьЗначение(Данные, "shipment.participant.counteragent.kpp"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентНаименование", ПолучитьЗначение(Данные, "shipment.participant.counteragent.name"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.view"));
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоИННиКПП(ПараметрыЗаказа.ОтправительКонтрагентИНН, ПараметрыЗаказа.ОтправительКонтрагентКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ОтправительКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыЗаказа.Вставить("ОтправительКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.name"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.email"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phone.number"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	
	// Доставка
	ПараметрыЗаказа.Вставить("СпособДоставки", ПолучитьЗначение(Данные, "delivery.type.id"));
	ПараметрыЗаказа.Вставить("СпособДоставкиНаименование", ПолучитьЗначение(Данные, "delivery.type.name"));
	
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаИдентификатор", ПолучитьЗначение(Данные, "delivery.point.id"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаНаименование", ПолучитьЗначение(Данные, "delivery.point.name"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаАдрес", ПолучитьЗначение(Данные, "delivery.point.address"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТелефон", ПолучитьЗначение(Данные, "delivery.point.phone"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТипНаименование", ПолучитьЗначение(Данные, "delivery.point.type.name"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТипИдентификатор", ПолучитьЗначение(Данные, "delivery.point.type.id"));
	
	ПараметрыЗаказа.Вставить("ПолучательАдресПредставление", ПолучитьЗначение(Данные, "delivery.address.view"));
	ПараметрыЗаказа.Вставить("ПолучательАдресЗначение", ПолучитьЗначение(Данные, "delivery.address.value", "ХранилищеЗначения"));
	
	ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(Данные, "delivery.date","Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиС", ПолучитьЗначение(Данные, "delivery.time.from", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиПо", ПолучитьЗначение(Данные, "delivery.time.to", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиОбедС", ПолучитьЗначение(Данные, "delivery.time.breakFrom", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиОбедПо", ПолучитьЗначение(Данные, "delivery.time.breakTo", "Дата"));
	
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "delivery.participant.counteragent.typeId",,1));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентИНН", ПолучитьЗначение(Данные, "delivery.participant.counteragent.inn"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентКПП", ПолучитьЗначение(Данные, "delivery.participant.counteragent.kpp"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентНаименование", ПолучитьЗначение(Данные, "delivery.participant.counteragent.name"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.view"));
	
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоИННиКПП(ПараметрыЗаказа.ПолучательКонтрагентИНН, ПараметрыЗаказа.ПолучательКонтрагентКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ПолучательКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыЗаказа.Вставить("ПолучательКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.name"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.email"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.phone.number"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	
	// Оплата
	ПараметрыЗаказа.Вставить("ФормаОплаты", ПолучитьЗначение(Данные, "payment.type.id",,1));
	ПараметрыЗаказа.Вставить("ФормаОплатыНаименование", ПолучитьЗначение(Данные, "payment.type.name",,""));
	
	ПараметрыЗаказа.Вставить("ПлательщикРоль", ПолучитьЗначение(Данные, "payment.payerRoleId",,0));
	
	ПараметрыЗаказа.Вставить("ПлательщикЮрФизЛицо", ПолучитьЗначение(Данные, "payment.participant.counteragent.typeId",,1));
	ПараметрыЗаказа.Вставить("ПлательщикИНН", ПолучитьЗначение(Данные, "payment.participant.counteragent.inn"));
	ПараметрыЗаказа.Вставить("ПлательщикКПП", ПолучитьЗначение(Данные, "payment.participant.counteragent.kpp"));
	ПараметрыЗаказа.Вставить("ПлательщикНаименование", ПолучитьЗначение(Данные, "payment.participant.counteragent.name"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "payment.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "payment.participant.counteragent.legaladdress.view"));
	
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "payment.participant.contactPerson.name"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "payment.participant.contactPerson.email"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phone.number"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоИННиКПП(ПараметрыЗаказа.ПлательщикИНН, ПараметрыЗаказа.ПлательщикКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ПлательщикСсылка", УчастникГрузоперевозки);
		ПараметрыЗаказа.Вставить("ПлательщикНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	// Груз
	ПараметрыЗаказа.Вставить("ГрузВес", ПолучитьЗначение(Данные, "cargo.weight"));
	ПараметрыЗаказа.Вставить("ГрузОбъем", ПолучитьЗначение(Данные, "cargo.volume"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальнаяВысота", ПолучитьЗначение(Данные, "cargo.maxHeight"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальнаяДлина", ПолучитьЗначение(Данные, "cargo.maxLength"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальнаяШирина", ПолучитьЗначение(Данные, "cargo.maxWidth"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальныйВес", ПолучитьЗначение(Данные, "cargo.maxWeight"));
	ПараметрыЗаказа.Вставить("ГрузСодержимое", ПолучитьЗначение(Данные, "cargo.description"));
	ПараметрыЗаказа.Вставить("ГрузКоличествоГрузовыхМест", ПолучитьЗначение(Данные, "cargo.quantity"));
	ПараметрыЗаказа.Вставить("ГрузСтоимость", ПолучитьЗначение(Данные, "cargo.value"));
	ПараметрыЗаказа.Вставить("ГрузНегабаритныйВес", ПолучитьЗначение(Данные, "cargo.oversizedWeight",,0));
	ПараметрыЗаказа.Вставить("ГрузНегабаритныйОбъем", ПолучитьЗначение(Данные, "cargo.oversizedVolume",,0));
	ПараметрыЗаказа.Вставить("ГрузКоличествоНегабаритныхГрузовыхМест", ПолучитьЗначение(Данные, "cargo.oversizedQuantity"));
	
	ТарифНеГабарит = (ПараметрыЗаказа.ГрузКоличествоНегабаритныхГрузовыхМест <> 0);
	ПараметрыЗаказа.Вставить("ТарифНеГабарит", ТарифНеГабарит);
	
	// Услуги
	Услуги = ПолучитьЗначение(Данные, "services");
	МассивУслуг = Новый Массив;
	
	Для Каждого ТекУслуга Из Услуги Цикл
		
		НоваяУслуга = НовыйПараметрыУслугиЗаказа();
		НоваяУслуга.Идентификатор = ТекУслуга.id;
		НоваяУслуга.Наименование = ТекУслуга.name;
		НоваяУслуга.Категория = ТекУслуга.category;
		НоваяУслуга.Обязательная = ТекУслуга.required;
		НоваяУслуга.СтавкаНДСНаименование = ТекУслуга.vatRateName;
		НоваяУслуга.СтавкаНДСИдентификатор = ТекУслуга.vatRateId;
		НоваяУслуга.СуммаНДС = ТекУслуга.vat;
		НоваяУслуга.СуммаСНДС = ТекУслуга.sum;
		НоваяУслуга.СуммаСкидки = ТекУслуга.discountSum;
		
		Для Каждого ТекущееСвойство Из ТекУслуга.properties Цикл
			
			НовоеСвойство = НовыйПараметрыСвойстваУслуги();
			НовоеСвойство.Идентификатор = ТекущееСвойство.id;
			НовоеСвойство.Наименование = ТекущееСвойство.name;
			НовоеСвойство.ТипЗначения = ТекущееСвойство.type;
			НовоеСвойство.ЕдиницаИзмерения = ТекущееСвойство.unit;
			НовоеСвойство.Значение = ТекущееСвойство.value;
			
			НоваяУслуга.СвойстваУслуги.Добавить(НовоеСвойство);
			
		КонецЦикла;
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	ПараметрыЗаказа.Вставить("Услуги", МассивУслуг);
	
	// Документы
	ДокументыЗаказа = ПолучитьЗначение(Данные, "documents");
	МассивДокументов = Новый Массив;
	
	Для Каждого ТекущийДокумент Из ДокументыЗаказа Цикл
		
		НовыйДокумент = НовыйПараметрыДокументаЗаказа();
		НовыйДокумент.Идентификатор = ТекущийДокумент.id;
		НовыйДокумент.ТипДокументаНаименование = ТекущийДокумент.typeName;
		НовыйДокумент.ТипДокументаИдентификатор = ТекущийДокумент.typeId;
		НовыйДокумент.Состояние = ТекущийДокумент.status;
		НовыйДокумент.Номер = ТекущийДокумент.number;
		НовыйДокумент.Дата = ТекущийДокумент.date;
		НовыйДокумент.Сумма = ТекущийДокумент.totalSum;
		НовыйДокумент.СуммаДолга = ТекущийДокумент.debtSum;
		НовыйДокумент.СуммаСкидки = ТекущийДокумент.discountSum;
		НовыйДокумент.Оплачен = ТекущийДокумент.isPaid;
		
		МассивДокументов.Добавить(НовыйДокумент);
		
	КонецЦикла;
	
	ПараметрыЗаказа.Вставить("Документы", МассивДокументов);
	
	// Дополнительные данные
	ДополнительныеДанные = ПолучитьЗначение(Данные, "additionalData");
	
	Если ДополнительныеДанные <> Неопределено Тогда
		МассивДополнительныеДанные = Новый Массив;
		
		Для Каждого ТекущиеДанные Из ДополнительныеДанные Цикл
			
			НоваяСтрока = Новый Структура();
			НоваяСтрока.Вставить("Наименование", ТекущиеДанные.name);
			НоваяСтрока.Вставить("ТипЗначения", ТекущиеДанные.type);
			НоваяСтрока.Вставить("Значение", ТекущиеДанные.value);
			НоваяСтрока.Вставить("Список", Новый Массив());
			
			Для Каждого ТекЭлемент Из ТекущиеДанные.items Цикл
				
				НовыйЭлемент = Новый Структура();
				НовыйЭлемент.Вставить("Наименование", ТекЭлемент.name);
				НовыйЭлемент.Вставить("ТипЗначения", ТекЭлемент.type);
				НовыйЭлемент.Вставить("Значение", ТекЭлемент.value);
				
				НоваяСтрока.Список.Добавить(НовыйЭлемент);
				
			КонецЦикла;
			
			МассивДополнительныеДанные.Добавить(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ДополнительныеДанныеЗаказа", МассивДополнительныеДанные);
	
	ПараметрыЗаказа.Вставить("ДополнительнаяИнформация", ПолучитьЗначение(Данные, "additionalInfo"));
	
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Параметры, ПараметрыЗаказа);
	
	Результат.Вставить("Данные", Параметры);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьЗаказыНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним блок "Страницы"
	БлокСтраницыОтвета = ПолучитьЗначение(СтруктураОтвета, "page");
	
	ПараметрыСтраницы = Новый Структура();
	
	ПараметрыСтраницы.Вставить("Страница", ПолучитьЗначение(БлокСтраницыОтвета, "number",,1));
	ПараметрыСтраницы.Вставить("РазмерСтраницы", ПолучитьЗначение(БлокСтраницыОтвета, "size",,100));
	ПараметрыСтраницы.Вставить("КоличествоСтрок", ПолучитьЗначение(БлокСтраницыОтвета, "totalElements",,0));
	ПараметрыСтраницы.Вставить("КоличествоСтраниц", ПолучитьЗначение(БлокСтраницыОтвета, "totalPages",,1));
	
	Результат.Вставить("Страницы", ПараметрыСтраницы);
	
	// Заполним список документов
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЗаказовОтвета = ПолучитьЗначение(БлокСпискаОтвета, "items", Новый Массив());
	
	СписокЗаказов = Новый Массив();
	Для Каждого ТекущийЗаказ Из СписокЗаказовОтвета Цикл
		
		ПараметрыЗаказа = Новый Структура();
		
		ПараметрыЗаказа.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЗаказ, "id"));
		ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(ТекущийЗаказ, "trackNumber"));
		ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(ТекущийЗаказ, "number"));
		ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(ТекущийЗаказ, "barcode"));
		ПараметрыЗаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(ТекущийЗаказ, "date", "Дата"));
		ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(ТекущийЗаказ, "createDate", "Дата"));
		
		ПараметрыЗаказа.Вставить("ДокументОснование", ДокументОснованияЗаказаНаДоставкуПоGUID(ПолучитьЗначение(ТекущийЗаказ, "baseDocumentId")));
		
		Если ЗначениеЗаполнено(ПараметрыЗаказа.ДокументОснование) Тогда
			ПараметрыЗаказа.Вставить("ДокументОснованиеПредставление", Строка(ПараметрыЗаказа.ДокументОснование));
		Иначе
			ПараметрыЗаказа.Вставить("ДокументОснованиеПредставление", ПолучитьЗначение(ТекущийЗаказ, "baseDocumentName"));
		КонецЕсли;
		
		ПараметрыЗаказа.Вставить("Сумма", ПолучитьЗначение(ТекущийЗаказ, "totalSum","Число",0));
		ПараметрыЗаказа.Вставить("ОтправительИНН", ПолучитьЗначение(ТекущийЗаказ, "sender.inn"));
		ПараметрыЗаказа.Вставить("ОтправительКПП", ПолучитьЗначение(ТекущийЗаказ, "sender.kpp"));
		ПараметрыЗаказа.Вставить("ОтправительНаименование", ПолучитьЗначение(ТекущийЗаказ, "sender.name"));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиПредставление", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.address","Строка",""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.name","Строка",""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиТипНаименование", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.typename","Строка",""));
		ПараметрыЗаказа.Вставить("ПолучательИНН", ПолучитьЗначение(ТекущийЗаказ, "reciever.inn"));
		ПараметрыЗаказа.Вставить("ПолучательКПП", ПолучитьЗначение(ТекущийЗаказ, "reciever.kpp"));
		ПараметрыЗаказа.Вставить("ПолучательНаименование", ПолучитьЗначение(ТекущийЗаказ, "reciever.name",,));
		ПараметрыЗаказа.Вставить("АдресДоставкиПредставление", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.address","Строка",""));
		ПараметрыЗаказа.Вставить("АдресДоставкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.name","Строка",""));
		ПараметрыЗаказа.Вставить("АдресДоставкиТипНаименование", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.typename","Строка",""));
		ПараметрыЗаказа.Вставить("ЗаборОтАдреса", ПолучитьЗначение(ТекущийЗаказ, "deliveryFromAddress"));
		ПараметрыЗаказа.Вставить("ДоставкаДоАдреса", ПолучитьЗначение(ТекущийЗаказ, "deliveryToAddress"));
		ПараметрыЗаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(ТекущийЗаказ, "shipmentDate","Дата"));
		ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(ТекущийЗаказ, "deliveryDate","Дата"));
		ПараметрыЗаказа.Вставить("ПеревозчикНаименование", ПолучитьЗначение(ТекущийЗаказ, "carrier.name"));
		ПараметрыЗаказа.Вставить("ПеревозчикИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "carrier.id"));
		ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(ТекущийЗаказ, "tariff.name"));
		ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "tariff.id"));
		ПараметрыЗаказа.Вставить("ПлательщикИНН", ПолучитьЗначение(ТекущийЗаказ, "payer.inn"));
		ПараметрыЗаказа.Вставить("ПлательщикКПП", ПолучитьЗначение(ТекущийЗаказ, "payer.kpp"));
		ПараметрыЗаказа.Вставить("ПлательщикНаименование", ПолучитьЗначение(ТекущийЗаказ, "payer.name"));
		ПараметрыЗаказа.Вставить("Оплачен", ПолучитьЗначение(ТекущийЗаказ, "isPaid",, Ложь));
		ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(ТекущийЗаказ, "status",, НСтр("ru='Состояние неизвестно'")));
		ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "statusId",, 0));
		ПараметрыЗаказа.Вставить("ВалютаКод", ПолучитьЗначение(ТекущийЗаказ, "currency.code",,"643"));
		ПараметрыЗаказа.Вставить("ВалютаНаименование", ПолучитьЗначение(ТекущийЗаказ, "currency.name",,"RUB"));
		
		СписокЗаказов.Добавить(ПараметрыЗаказа);
		
	КонецЦикла;
	
	Результат.Вставить("Список", СписокЗаказов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьГрафикДвиженияЗаказа(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Параметры = НовыйПараметрыОтветаПолучитьГрафикДвиженияЗаказа();
	
	ПараметрыЗаказа = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыЗаказа);
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыЗаказа.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(Данные, "id"));
	ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(Данные, "trackNumber"));
	ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(Данные, "number"));
	ПараметрыЗаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(Данные, "date","Дата"));
	ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(Данные, "createDate", "Дата"));
	
	ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(Данные, "status.name",, НСтр("ru='Состояние неизвестно'")));
	ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(Данные, "status.id",, 0));
	ПараметрыЗаказа.Вставить("Заблокирован", ПолучитьЗначение(Данные, "isLocked",, Ложь));
	
	ПараметрыЗаказа.Вставить("ТипГрузоперевозки", ПолучитьЗначение(Данные, "transportationType",,1));
	Если Не ЗначениеЗаполнено(ПараметрыЗаказа.ТипГрузоперевозки) Тогда
		ПараметрыЗаказа.ТипГрузоперевозки = 1;
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrier.name"));
	ПараметрыЗаказа.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrier.id"));
	ПараметрыЗаказа.Вставить("ГрузоперевозчикТелефон", ПолучитьЗначение(Данные, "carrier.phone"));
	ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(Данные, "tariff.name"));
	ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(Данные, "tariff.id"));
	ПараметрыЗаказа.Вставить("ДополнительнаяИнформация", ПолучитьЗначение(Данные, "additionalInfo"));
	
	// Отгрузка
	ПараметрыЗаказа.Вставить("СпособОтгрузкиИдентификатор", ПолучитьЗначение(Данные, "shipment.type.id"));
	ПараметрыЗаказа.Вставить("СпособОтгрузкиНаименование", ПолучитьЗначение(Данные, "shipment.type.name"));
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(Данные, "shipment.date","Дата"));
	
	ПараметрыЗаказа.Вставить("ТочкаОтправленияИдентификатор", ПолучитьЗначение(Данные, "shipment.point.id"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияНаименование", ПолучитьЗначение(Данные, "shipment.point.name"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияАдрес", ПолучитьЗначение(Данные, "shipment.point.address"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияТипИдентификатор", ПолучитьЗначение(Данные, "shipment.point.type.id"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияТипНаименование", ПолучитьЗначение(Данные, "shipment.point.type.name"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияГород", ПолучитьЗначение(Данные, "shipment.point.city"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияТелефон", ПолучитьЗначение(Данные, "shipment.point.phone"));
	
	// Доставка
	ПараметрыЗаказа.Вставить("СпособДоставкиИдентификатор", ПолучитьЗначение(Данные, "delivery.type.id"));
	ПараметрыЗаказа.Вставить("СпособДоставкиНаименование", ПолучитьЗначение(Данные, "delivery.type.name"));
	ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(Данные, "delivery.date","Дата"));
	
	ПараметрыЗаказа.Вставить("ТочкаНазначенияИдентификатор", ПолучитьЗначение(Данные, "delivery.point.id"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияНаименование", ПолучитьЗначение(Данные, "delivery.point.name"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияАдрес", ПолучитьЗначение(Данные, "delivery.point.address"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияТипИдентификатор", ПолучитьЗначение(Данные, "delivery.point.type.id"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияТипНаименование", ПолучитьЗначение(Данные, "delivery.point.type.name"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияГород", ПолучитьЗначение(Данные, "delivery.point.city"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияТелефон", ПолучитьЗначение(Данные, "delivery.point.phone"));
	
	СписокЭлементов = ПолучитьЗначение(Данные, "schedule",,Новый Структура());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Дата", ПолучитьЗначение(ТекущийЭлемент, "date", "Дата"));
		ДанныеЭлемента.Вставить("ДатаМаксимальная", ПолучитьЗначение(ТекущийЭлемент, "dateMax", "Дата"));
		ДанныеЭлемента.Вставить("ЭтоФакт", ПолучитьЗначение(ТекущийЭлемент, "isFact",,Ложь));
		ДанныеЭлемента.Вставить("СостояниеНаименование", ПолучитьЗначение(ТекущийЭлемент, "status.name"));
		ДанныеЭлемента.Вставить("СостояниеИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "status.id"));
		ДанныеЭлемента.Вставить("МестоположениеИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "point.id"));
		ДанныеЭлемента.Вставить("МестоположениеГород", ПолучитьЗначение(ТекущийЭлемент, "point.city"));
		ДанныеЭлемента.Вставить("МестоположениеНаименование", ПолучитьЗначение(ТекущийЭлемент, "point.name"));
		ДанныеЭлемента.Вставить("МестоположениеАдрес", ПолучитьЗначение(ТекущийЭлемент, "point.adress"));
		ДанныеЭлемента.Вставить("МестоположениеТипИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "point.type.id"));
		ДанныеЭлемента.Вставить("МестоположениеТипНаименование", ПолучитьЗначение(ТекущийЭлемент, "point.type.name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	ПараметрыЗаказа.Вставить("ГрафикДвиженияЗаказа", НовыйСписокЭлементов);
	
	Результат.Вставить("Данные", ПараметрыЗаказа);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДоступныеФормы(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items", Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("ИдентификаторДокумента", ПолучитьЗначение(ТекущийЭлемент, "docId"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ДанныеЭлемента.Вставить("Расширение", ПолучитьЗначение(ТекущийЭлемент, "extension"));
		ДанныеЭлемента.Вставить("Обязательная", ПолучитьЗначение(ТекущийЭлемент, "required"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьФайлыДоступныхФорм(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded");
	
	СписокФайловПечатныхФорм = Новый Массив();
	
	Если БлокСпискаОтвета <> Неопределено Тогда
		
		СписокФайловПечатныхФормИсточника = ПолучитьЗначение(БлокСпискаОтвета, "items", Новый Массив());
		
		Для Каждого ТекущийЗаказ Из СписокФайловПечатныхФормИсточника Цикл
			
			ПараметрыФормы = Новый Структура();
			
			ПараметрыФормы.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЗаказ, "id"));
			ПараметрыФормы.Вставить("Наименование", ПолучитьЗначение(ТекущийЗаказ, "name"));
			ПараметрыФормы.Вставить("Данные", ПолучитьЗначение(ТекущийЗаказ, "data"));
			ПараметрыФормы.Вставить("Расширение", ПолучитьЗначение(ТекущийЗаказ, "extension"));
			ПараметрыФормы.Вставить("Кодировка", ПолучитьЗначение(ТекущийЗаказ, "encodingMethod"));
			
			СписокФайловПечатныхФорм.Добавить(ПараметрыФормы);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Вставить("Список", СписокФайловПечатныхФорм);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСостояния(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items", Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("ИдентификаторГруппы", ПолучитьЗначение(ТекущийЭлемент, "groupId"));
		ДанныеЭлемента.Вставить("НаименованиеГруппы", ПолучитьЗначение(ТекущийЭлемент, "groupName"));
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьГрузоперевозчиков(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items", Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ДанныеЭлемента.Вставить("НаименованиеПолное", ПолучитьЗначение(ТекущийЭлемент, "fullName"));
		ДанныеЭлемента.Вставить("Описание", ПолучитьЗначение(ТекущийЭлемент, "descriptoin"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДанныеГрузоперевозчика(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыГрузоперевозчика = Новый Структура();
	
	ПараметрыГрузоперевозчика.Вставить("Идентификатор", ПолучитьЗначение(Данные, "id"));
	ПараметрыГрузоперевозчика.Вставить("Наименование", ПолучитьЗначение(Данные, "name"));
	ПараметрыГрузоперевозчика.Вставить("НаименованиеПолное", ПолучитьЗначение(Данные, "fullName"));
	ПараметрыГрузоперевозчика.Вставить("Описание", ПолучитьЗначение(Данные, "description"));
	ПараметрыГрузоперевозчика.Вставить("АдресСайта", ПолучитьЗначение(Данные, "addressWebSite"));
	ПараметрыГрузоперевозчика.Вставить("ЮридическийАдрес", ПолучитьЗначение(Данные, "addressLegal"));
	ПараметрыГрузоперевозчика.Вставить("ФизическийАдрес", ПолучитьЗначение(Данные, "addressPhysical"));
	ПараметрыГрузоперевозчика.Вставить("Телефон", ПолучитьЗначение(Данные, "phone"));
	
	Результат.Вставить("Данные", ПараметрыГрузоперевозчика);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьТарифы(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",, Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "carrierId"));
		ДанныеЭлемента.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(ТекущийЭлемент, "carrierName"));
		ДанныеЭлемента.Вставить("ТарифИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "tariffId"));
		ДанныеЭлемента.Вставить("ТарифНаименование", ПолучитьЗначение(ТекущийЭлемент, "tariffName"));
		ДанныеЭлемента.Вставить("Стоимость", ПолучитьЗначение(ТекущийЭлемент, "cost"));
		ДанныеЭлемента.Вставить("МинимальныйСрок", ПолучитьЗначение(ТекущийЭлемент, "termMin"));
		ДанныеЭлемента.Вставить("МаксимальныйСрок", ПолучитьЗначение(ТекущийЭлемент, "termMax"));
		ДанныеЭлемента.Вставить("Негабарит", ПолучитьЗначение(ТекущийЭлемент, "oversize"));
		ДанныеЭлемента.Вставить("ОписаниеНеГабарит", ПолучитьЗначение(ТекущийЭлемент, "oversizecomment"));
		ДанныеЭлемента.Вставить("Описание", ПолучитьЗначение(ТекущийЭлемент, "comment"));
		ДанныеЭлемента.Вставить("ДетализацияСтоимости", Новый Массив());
		
		Для Каждого ТекущаяУслуга Из ТекущийЭлемент.costDetails Цикл
	
			НоваяУслуга = Новый Структура();
			
			НоваяУслуга.Вставить("Идентификатор", ПолучитьЗначение(ТекущаяУслуга, "id"));
			НоваяУслуга.Вставить("Наименование", ПолучитьЗначение(ТекущаяУслуга, "name"));
			НоваяУслуга.Вставить("Стоимость", ПолучитьЗначение(ТекущаяУслуга, "cost"));
			НоваяУслуга.Вставить("ВариантУчета", ПолучитьЗначение(ТекущаяУслуга, "type"));
			НоваяУслуга.Вставить("Описание", ПолучитьЗначение(ТекущаяУслуга, "comment"));
			
			ДанныеЭлемента.ДетализацияСтоимости.Добавить(НоваяУслуга);
			
		КонецЦикла;
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьУслугиДляТипаГрузоперевозки(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "services",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "commonServices", Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ДанныеЭлемента.Вставить("Категория", ПолучитьЗначение(ТекущийЭлемент, "category"));
		ДанныеЭлемента.Вставить("Обязательная", ПолучитьЗначение(ТекущийЭлемент, "required"));
		ДанныеЭлемента.Вставить("Свойства", Новый Массив());
		
		Для Каждого ТекущееСвойство Из ТекущийЭлемент.properties Цикл
	
			НовоеСвойство = Новый Структура();
			
			НовоеСвойство.Вставить("Идентификатор", ПолучитьЗначение(ТекущееСвойство, "id"));
			НовоеСвойство.Вставить("Наименование", ПолучитьЗначение(ТекущееСвойство, "name"));
			НовоеСвойство.Вставить("ТипЗначения", ПолучитьЗначение(ТекущееСвойство, "type"));
			НовоеСвойство.Вставить("ЕдиницаИзмерения", ПолучитьЗначение(ТекущееСвойство, "unit"));
			
			ДанныеЭлемента.Свойства.Добавить(НовоеСвойство);
			
		КонецЦикла;
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "incompatibleServices", Новый Массив());
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("ИдентификаторНесовместимойУслуги", ПолучитьЗначение(ТекущийЭлемент, "incompatibleId"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("СписокНесовместимыеУслуги", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДоступныеТерминалы(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним список
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	Список = ПолучитьЗначение(БлокСпискаОтвета, "items", Новый Массив());
	
	СписокТерминалов = Новый Массив();
	Для Каждого ТекущийТерминал Из Список Цикл
		
		ПараметрыТерминала = Новый Структура();
		
		ПараметрыТерминала.Вставить("Идентификатор", ПолучитьЗначение(ТекущийТерминал, "id"));
		ПараметрыТерминала.Вставить("Наименование", ПолучитьЗначение(ТекущийТерминал, "name"));
		ПараметрыТерминала.Вставить("Адрес", ПолучитьЗначение(ТекущийТерминал, "address"));
		ПараметрыТерминала.Вставить("Описание", ПолучитьЗначение(ТекущийТерминал, "description"));
		ПараметрыТерминала.Вставить("Телефон", ПолучитьЗначение(ТекущийТерминал, "telephone"));
		ПараметрыТерминала.Вставить("ТипИдентификатор", ПолучитьЗначение(ТекущийТерминал, "typeId"));
		ПараметрыТерминала.Вставить("ТипНаименование", ПолучитьЗначение(ТекущийТерминал, "typeName"));
		ПараметрыТерминала.Вставить("Долгота", ПолучитьЗначение(ТекущийТерминал, "longitude"));
		ПараметрыТерминала.Вставить("Широта", ПолучитьЗначение(ТекущийТерминал, "latitude"));
		ПараметрыТерминала.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(ТекущийТерминал, "carrierName"));
		ПараметрыТерминала.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(ТекущийТерминал, "carrierId"));
		
		ГрафикРаботыСписок = ПолучитьЗначение(ТекущийТерминал, "worktable");
		ГрафикРаботыНовый = Новый Массив();
		
		Для Каждого ТекущаяСтрока Из ГрафикРаботыСписок Цикл
			СтрокаГрафикаРаботы = Новый Структура();
			СтрокаГрафикаРаботы.Вставить("Отдел", ПолучитьЗначение(ТекущаяСтрока, "department"));
			СтрокаГрафикаРаботы.Вставить("ГрафикРаботыПредставление", ПолучитьЗначение(ТекущаяСтрока, "worktableView"));
			ГрафикРаботыНовый.Добавить(СтрокаГрафикаРаботы);
		КонецЦикла;
		
		ПараметрыТерминала.Вставить("ГрафикРаботы", ГрафикРаботыНовый);
		
		СписокТерминалов.Добавить(ПараметрыТерминала);
		
	КонецЦикла;
	
	Результат.Вставить("Список", СписокТерминалов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДанныеТерминала(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыТерминала = Новый Структура();
	
	ПараметрыТерминала.Вставить("Идентификатор", ПолучитьЗначение(Данные, "id"));
	ПараметрыТерминала.Вставить("Наименование", ПолучитьЗначение(Данные, "name"));
	ПараметрыТерминала.Вставить("Адрес", ПолучитьЗначение(Данные, "address"));
	ПараметрыТерминала.Вставить("Описание", ПолучитьЗначение(Данные, "description"));
	ПараметрыТерминала.Вставить("Телефон", ПолучитьЗначение(Данные, "telephone"));
	ПараметрыТерминала.Вставить("ТипИдентификатор", ПолучитьЗначение(Данные, "typeId"));
	ПараметрыТерминала.Вставить("ТипНаименование", ПолучитьЗначение(Данные, "typeName"));
	ПараметрыТерминала.Вставить("Долгота", ПолучитьЗначение(Данные, "longitude"));
	ПараметрыТерминала.Вставить("Широта", ПолучитьЗначение(Данные, "latitude"));
	ПараметрыТерминала.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrierName"));
	ПараметрыТерминала.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrierId"));
	
	ГрафикРаботыСписок = ПолучитьЗначение(Данные, "worktable");
	ГрафикРаботыНовый = Новый Массив();
	
	Для Каждого ТекущаяСтрока Из ГрафикРаботыСписок Цикл
		СтрокаГрафикаРаботы = Новый Структура();
		СтрокаГрафикаРаботы.Вставить("Отдел", ПолучитьЗначение(ТекущаяСтрока, "department"));
		СтрокаГрафикаРаботы.Вставить("ГрафикРаботыПредставление", ПолучитьЗначение(ТекущаяСтрока, "worktableView"));
		ГрафикРаботыНовый.Добавить(СтрокаГрафикаРаботы);
	КонецЦикла;
	
	ПараметрыТерминала.Вставить("ГрафикРаботы", ГрафикРаботыНовый);
	
	Результат.Вставить("Данные", ПараметрыТерминала);
	
КонецПроцедуры

Процедура ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат)

	БлокОшибок = ПолучитьЗначение(СтруктураОтвета, "errors");
	Если БлокОшибок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = Новый Массив();
	Результат.Вставить("Ошибки", БлокОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область КонвертацияДанных

Процедура ДобавитьКолонкиТаблицыОписания(ТаблицаИсточник, Имя, Префикс = "")
	
	Таблица = Новый ТаблицаЗначений;
	
	Если Имя = "PageParameters" Тогда
		
		Таблица.Колонки.Добавить("Страница",          СервисДоставкиСлужебный.Типы().Число, "number");
		Таблица.Колонки.Добавить("РазмерСтраницы",    СервисДоставкиСлужебный.Типы().Число, "size");
		Таблица.Колонки.Добавить("КоличествоСтрок",   СервисДоставкиСлужебный.Типы().Число, "totalElements");
		Таблица.Колонки.Добавить("КоличествоСтраниц", СервисДоставкиСлужебный.Типы().Число, "totalPages");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдено описание данных сервиса %1'"), Имя);
		
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаИсточник = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если Префикс <> "" Тогда
		Префикс = Префикс + ".";
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Таблица.Колонки Цикл
		ТаблицаИсточник.Колонки.Добавить(ЭлементКоллекции.Имя, ЭлементКоллекции.ТипЗначения, Префикс + ЭлементКоллекции.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

// Получение структуры данных по абсолютному пути.
// Параметры:
//  Путь - Строка - например, "pathToRoot[0].categories".
//
// Возвращаемое значение:
//  Произвольный - возвращаемые данные.
//
Функция ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Значение, Путь, Отказ)
	
	СвойстваПути = СтрРазделить(Путь, ".");
	Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	Возврат Результат;
	
КонецФункции

// Получить значение данных структуры в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив - элементы пути, например  pathToRoot[0]; categories.
//  Отказ - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваСтруктурыВРекурсии(Знач Значение, Знач СвойстваПути, Отказ = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если ТипЗнч(Значение) <> Тип("Структура")
		ИЛИ Значение.Свойство(Свойство) = Ложь Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	КонецЕсли;
	
КонецФункции

// Преобразование массива структур в таблицу значений, структуры в структуру.
//
// Параметры:
//  Коллекция				 - Массив - массив структур.
//  ОписаниеТаблицыЗначений	 - ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат преобразования.
//
Функция ПреобразоватьКоллекциюПоТаблицеЗначений(Знач Источник, Знач ОписаниеТаблицыЗначений, ТипРезультата = Неопределено)
	
	Если ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() = 0 Тогда
		Возврат ОписаниеТаблицыЗначений;
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") И НЕ ЗначениеЗаполнено(Источник) Тогда
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеТаблицыЗначений.Скопировать().Добавить());
	КонецЕсли;
	
	Если ТипРезультата = Неопределено Тогда
		Если ТипЗнч(Источник) = Тип("Массив") Тогда
			ТипРезультата = Тип("ТаблицаЗначений");
		Иначе
			ТипРезультата = ТипЗнч(Источник);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыЧерезТочку = Новый Соответствие; // Реквизиты, получаемые через точку.
	ПравилаКонвертации  = Новый Соответствие; // Список конвертаций значений "*".
	ВложенныеКоллекции  = Новый Соответствие; // Список вложенных коллекций "|".
	
	// Создание колонок без типов.
	ВременнаяТаблица = Новый ТаблицаЗначений;
	Для каждого КолонкаТаблицыОписания Из ОписаниеТаблицыЗначений.Колонки Цикл
		
		// Поиск правил преобразования.
		ИмяСвойстваИсточника = КолонкаТаблицыОписания.Заголовок;
		
		РазделительПравила = СтрНайти(ИмяСвойстваИсточника, "*");
		Если РазделительПравила <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительПравила - 1));
			ИмяПравила = Сред(КолонкаТаблицыОписания.Заголовок, РазделительПравила + 1);
		КонецЕсли;
		
		РазделительОписание = СтрНайти(ИмяСвойстваИсточника, "|");
		Если РазделительОписание <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительОписание - 1));
			ИмяОписания = Сред(КолонкаТаблицыОписания.Заголовок, РазделительОписание + 1);
		КонецЕсли;
		
		НовоеИмяСвойстваИсточника = ИмяСвойстваИсточника;
		
		// Поиск реквизитов в структуре.
		Если СтрНайти(ИмяСвойстваИсточника, ".") Тогда
			НовоеИмяСвойстваИсточника = СтрЗаменить(ИмяСвойстваИсточника, ".", "_");
			РеквизитыЧерезТочку.Вставить(ИмяСвойстваИсточника, НовоеИмяСвойстваИсточника);
		КонецЕсли;
		
		// Добавления правила конвертации.
		Если РазделительПравила <> 0 Тогда
			ПравилаКонвертации.Вставить(НовоеИмяСвойстваИсточника, ИмяПравила);
		КонецЕсли;
		
		// Добавления описание вложенной коллекции.
		Если РазделительОписание <> 0 Тогда
			ВложенныеКоллекции.Вставить(НовоеИмяСвойстваИсточника, ИмяОписания);
		КонецЕсли;
		
		ВременнаяТаблица.Колонки.Добавить(НовоеИмяСвойстваИсточника,, КолонкаТаблицыОписания.Имя);
		
	КонецЦикла;
	
	// Заполнение данных таблицы обработки.
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		
		// Источником данных является массив структур.
		
		Для каждого СтрокаИсточника Из Источник Цикл
			НоваяСтрока = ВременнаяТаблица.Добавить();
			Если СтрокаИсточника <> Неопределено Тогда // Возможно значение неопределено.
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
			КонецЕсли;
			                                       
			// Заполнение реквизитов в структуре.
			Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
				СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
				НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(СтрокаИсточника, СоставСтруктурыРеквизита);
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
		
		// Источником данных является структура.
		
		НоваяСтрока = ВременнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
		
		// Заполнение реквизитов в структуре.
		Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
			СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
			НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(Источник, СоставСтруктурыРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
	// Обработка по правилам преобразования "*".
	Для каждого ЭлементПреобразования Из ПравилаКонвертации Цикл
		ДанныеОбработки = ВременнаяТаблица.ВыгрузитьКолонку(ЭлементПреобразования.Ключ);
		ОбработанныеЗначения = КонвертироватьЗначениеСервиса(ДанныеОбработки, ЭлементПреобразования.Значение);
		Если ТипЗнч(ОбработанныеЗначения) = Тип("Массив") Тогда
			ВременнаяТаблица.ЗагрузитьКолонку(ОбработанныеЗначения, ЭлементПреобразования.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Обработка по описаниям вложенных коллекций "|".
	Для каждого ЭлементОписания Из ВложенныеКоллекции Цикл
		
		ТаблицаОписанияДанных = Неопределено;
		ДобавитьКолонкиТаблицыОписания(ТаблицаОписанияДанных, ЭлементОписания.Значение);
		Для каждого ЭлементКоллекции Из ВременнаяТаблица Цикл
			ОбработанныеЗначения = ПреобразоватьКоллекциюПоТаблицеЗначений(
				ЭлементКоллекции[ЭлементОписания.Ключ], ТаблицаОписанияДанных);
			ЭлементКоллекции[ЭлементОписания.Ключ] = ОбработанныеЗначения;
		КонецЦикла;
		
	КонецЦикла;
	
	// Обратное переименование колонок.
	Для каждого КолонкаТаблицыОбработки Из ВременнаяТаблица.Колонки Цикл
		КолонкаТаблицыОбработки.Имя = КолонкаТаблицыОбработки.Заголовок;
	КонецЦикла;
	
	// Финальная подготовка результата преобразования.
	Если ТипРезультата = Тип("ТаблицаЗначений") Тогда
		
		// Заполнение таблицы результата.
		Результат = ОписаниеТаблицыЗначений.Скопировать();
		Для каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	ИначеЕсли ТипРезультата = Тип("Структура") И ВременнаяТаблица.Количество() = 1 Тогда
		
		// Заполнение структуры
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ВременнаяТаблица[0]);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразовать значение полученное из сервиса.
//
// Параметры:
//  Данные			- Произвольный - данные, полученные из сервиса.
//  Правило			- Строка - имя обработчика.
//  КодСостояния	- Число - код состояния ответа сервиса.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемое значение разбора.
//
Функция КонвертироватьЗначениеСервиса(Значение, Правило, КодСостояния = 200)
	
	Перем Результат;

	Если Правило = "ИстинаПоКоду200" Тогда
		
		Результат = (КодСостояния = 200);
		
	ИначеЕсли ТипЗнч(Правило) = Тип("Строка") Тогда
		
		Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СтрРазделить(Правило, "."));
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации значения'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавление значение в структуру с учетом обязательности заполнения.
//
// Параметры:
//  Результат			 - Структура - переменная для добавления значения.
//  Поле				 - Строка	 - имя добавляемого поля.
//  Значение			 - Произвольный	 - добавляемое значение
//  ОбязательныйРеквизит - Булево		 - признак обязательности значения.
//
Процедура ДобавитьЗначение(Результат, Знач Поле, Знач Значение, ОбязательныйРеквизит = Ложь)
	
	Если Не ОбязательныйРеквизит И Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(Поле, ".");
	Если ПозицияРазделителя > 0 Тогда
		МассивПолей = СтрРазделить(Поле, ".");
		ИмяСвойства = МассивПолей[0];
		Если Не Результат.Свойство(ИмяСвойства) Тогда
			Результат.Вставить(ИмяСвойства);
		КонецЕсли;
		ДобавитьЗначение(Результат[ИмяСвойства], Сред(Поле, ПозицияРазделителя + 1), Значение, ОбязательныйРеквизит);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = СокрЛП(Значение);
	КонецЕсли;
	
	Результат.Вставить(Поле, Значение);
	
КонецПроцедуры

Функция ПолучитьЗначение(Знач Источник, Знач ИмяРеквизита, ТипЗначения = "", ЗначениеПоУмолчанию = Неопределено)
	
	Значение = ЗначениеПоУмолчанию;
	
	МассивПолей = СтрРазделить(ИмяРеквизита, ".");
	КоличествоПолей = МассивПолей.Количество()-1;
	
	Для Ид = 0 По КоличествоПолей-1 Цикл
		ИмяСвойства = МассивПолей[Ид];
		
		Если ТипЗнч(Источник) = Тип("Структура")
			И Источник.Свойство(ИмяСвойства) Тогда
			Источник = Источник[ИмяСвойства];
		Иначе
			Возврат Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяРеквизита = МассивПолей[КоличествоПолей];
	
	Если ТипЗнч(Источник) = Тип("Структура")
		И Источник.Свойство(ИмяРеквизита) Тогда
		
		ИсходноеЗначение = Источник [ИмяРеквизита];
		
		Если ИсходноеЗначение = Неопределено Тогда
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Массив") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Структура") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Дата") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Строка") И ВРег(ИсходноеЗначение) = "NONE" Тогда
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли ТипЗначения = "" Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗначения = "Дата" Тогда
			Значение = СтрокаВДату(ИсходноеЗначение);
		ИначеЕсли ТипЗначения = "Число" Тогда
			Значение = СтрокаВЧисло(ИсходноеЗначение);
		ИначеЕсли ТипЗначения = "ХранилищеЗначения" Тогда
			Значение = ХранилищеЗначенияИзJSON(ИсходноеЗначение);
		Иначе
			ТребуемыйТип	= Новый ОписаниеТипов(ТипЗначения);
			Значение		= ТребуемыйТип.ПривестиЗначение(ИсходноеЗначение);
		КонецЕсли; 
		
		Если Значение = Неопределено Тогда
			Значение = ЗначениеПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Значение;
	
КонецФункции

Функция ХранилищеЗначенияИзJSON(Значение)
	
	Результат = "";
	Значение = СокрЛП(Значение);
	
	Если Значение <> "" Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Значение);
		Попытка
			ЗначениеИзJSON = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
		Исключение
			Возврат Результат;
		КонецПопытки;
		
		ЧтениеJSON.Закрыть();
	
		Если ЗначениеЗаполнено(ЗначениеИзJSON) 
			И ТипЗнч(ЗначениеИзJSON) = Тип("ХранилищеЗначения") Тогда
			Результат = ЗначениеИзJSON.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаВДату(СтрокаДанных)
	
	Результат = Дата(1,1,1);
	
	Если Не ЗначениеЗаполнено(СтрокаДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПрочитатьДатуJSON(СтрокаДанных, ФорматДатыJSON.ISO);
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаВЧисло(Значение)
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Результат = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		НовоеЗначение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
		Если НовоеЗначение = Неопределено Тогда
			Результат = 0;
		Иначе
			Результат = НовоеЗначение;
		КонецЕсли;
		
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеВСтрокуJSON(Параметры, Отказ = Ложь, ОписаниеОшибки = "")
	
	Результат = Неопределено;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	Попытка
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, Параметры,,"ПреобразованиеТиповЗначений", СервисДоставки);
	Исключение
		Отказ = Истина;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхИзЛокальнойБазыДанных

Функция ДокументОснованияЗаказаНаДоставкуПоGUID(ИдентификаторДокумента);
		
	ДокументОснование = Неопределено;
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторДокумента) Тогда
		ИдентификаторДокумента = Новый УникальныйИдентификатор(ИдентификаторДокумента);
		
		Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			
			ОжидаемыеТипыДокументов = Метаданные.ОпределяемыеТипы.ОснованиеЗаказаСервисДоставки.Тип.Типы();
			
			Для Каждого ОжидаемыйТип Из ОжидаемыеТипыДокументов Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ОжидаемыйТип);
				Если ОбъектМетаданных <> Неопределено
					И ОбщегоНазначения.ЭтоСсылка(ОжидаемыйТип) 
					И ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
				
					НаименованиеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(ОжидаемыйТип);
					НаименованиеТипа = СтрЗаменить(НаименованиеТипа, "Ссылка", "");
					МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаименованиеТипа);
					ВозможныйДокументОснование = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторДокумента));
					
					Если ВозможныйДокументОснование.ПолучитьОбъект() <> Неопределено Тогда
						ДокументОснование = ВозможныйДокументОснование;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

Функция УчастникГрузоперевозкиПоИННиКПП(ИНН, КПП)
	
	УчастникГрузоперевозки = Неопределено;
	
	Если ИННиКППЗаполнены(ИНН, КПП) Тогда 
		
		ТипыОрганизаций = Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.Типы();
		ТипыКонтрагентов = Метаданные.ОпределяемыеТипы.КонтрагентСервисДоставки.Тип.Типы();
		
		ТекстЗапроса = "";
		Для Каждого ТекущийТип Из ТипыОрганизаций Цикл
			
			ТипСтрока = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТекущийТип);
			ТипСтрока = СтрЗаменить(ТипСтрока, "Ссылка", "");
			ТипМетаданных = СтрЗаменить(ТипСтрока, "Справочник.", "");
			
			ОбъектМетаданных = Метаданные.Справочники.Найти(ТипМетаданных);
			Если НЕ ОбъектМетаданных = Неопределено Тогда
				Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("ИНН", Метаданные.Справочники[ТипМетаданных]) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ТекстПодзапроса = "ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	Таблица.ИНН КАК ИНН,
			|	Таблица.КПП КАК КПП,
			|	Таблица.ЮрФизЛицо КАК ЮрФизЛицо,
			|	Таблица.НаименованиеПолное КАК Наименование,
			|	1 КАК ЭтоОрганизация
			|ИЗ
			|	" + ТипСтрока + " КАК Таблица
			|ГДЕ
			|	Таблица.ИНН = &ИНН
			|	И Таблица.КПП = &КПП
			|
			|ОБЪЕДИНИТЬ ВСЕ";
			
			ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса + Символы.ПС;
			
		КонецЦикла;
		
		Для Каждого ТекущийТип Из ТипыКонтрагентов Цикл
			
			ТипСтрока = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТекущийТип);
			ТипСтрока = СтрЗаменить(ТипСтрока, "Ссылка", "");
			ТипМетаданных = СтрЗаменить(ТипСтрока, "Справочник.", "");
			
			ОбъектМетаданных = Метаданные.Справочники.Найти(ТипМетаданных);
			Если НЕ ОбъектМетаданных = Неопределено Тогда
				Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("ИНН", Метаданные.Справочники[ТипМетаданных]) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ТекстПодзапроса = "ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	Таблица.ИНН КАК ИНН,
			|	Таблица.КПП КАК КПП,
			|	Таблица.ЮрФизЛицо КАК ЮрФизЛицо,
			|	Таблица.НаименованиеПолное КАК Наименование,
			|	0 КАК ЭтоОрганизация
			|ИЗ
			|	" + ТипСтрока + " КАК Таблица
			|ГДЕ
			|	Таблица.ИНН = &ИНН
			|	И Таблица.КПП = &КПП
			|
			|ОБЪЕДИНИТЬ ВСЕ";
			
			ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса + Символы.ПС;
			
		КонецЦикла;
		
		Если ТекстЗапроса <> "" Тогда
			
			ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-15);
			ТекстЗапроса = ТекстЗапроса + "УПОРЯДОЧИТЬ ПО ЭтоОрганизация";
			
			Запрос = Новый Запрос();
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Запрос.УстановитьПараметр("КПП", КПП);
			
			УстановитьПривилегированныйРежим(Истина);
			Результат = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда 
					УчастникГрузоперевозки = НовыйПараметрыКонтрагента();
					ЗаполнитьЗначенияСвойств(УчастникГрузоперевозки, Выборка);
					УчастникГрузоперевозки.ИНН = ИНН;
					УчастникГрузоперевозки.КПП = КПП;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УчастникГрузоперевозки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаДанных

Функция ИННиКППЗаполнены(Знач ИНН, Знач КПП)
	
	ИНН = СокрЛП(ИНН);
	КПП = СокрЛП(КПП);
	
	Результат = (ЗначениеЗаполнено(ИНН) И СтрДлина(ИНН) = 10 И ЗначениеЗаполнено(КПП)) 
				ИЛИ (ЗначениеЗаполнено(ИНН) И СтрДлина(ИНН) = 12);
			
	Возврат Результат
			
КонецФункции

#КонецОбласти

#КонецОбласти
