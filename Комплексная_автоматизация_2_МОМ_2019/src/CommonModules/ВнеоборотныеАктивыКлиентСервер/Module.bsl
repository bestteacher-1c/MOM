////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция возвращает расшифровку срока полезного использования в годах и месяцах.
//
// Параметры:
//  СрокПолезногоИспользования	 - Число - Срок полезного использования (в месяцах), подлежащий расшифровке.
//  ЗаключитьВСкобки			 - Булево	 - Истина, если срок использования нужно заключить в скобки.
// 
// Возвращаемое значение:
//  Строка - расшифровка срока полезного использования в годах и месяцах.
//
Функция РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользования, ЗаключитьВСкобки = Истина) Экспорт
	
	РасшифровкаСрокаПолезногоИспользования = "";
	
	Если ЗначениеЗаполнено(СрокПолезногоИспользования) Тогда
	
		ЧислоЛет     = Цел(СрокПолезногоИспользования / 12);
		ЧислоМесяцев = (СрокПолезногоИспользования % 12);
		
		Если НЕ (ЧислоЛет = 0) Тогда
			
			// Построим строку с числом лет.
			Если (СтрДлина(ЧислоЛет) > 1) И (Число(Сред(ЧислоЛет, СтрДлина(ЧислоЛет) - 1, 1)) = 1) Тогда
				СтрокаГод = " " + НСтр("ru = 'лет'");
			ИначеЕсли Число(Прав(ЧислоЛет, 1)) = 1 Тогда
				СтрокаГод = " " + НСтр("ru = 'год'");
			ИначеЕсли (Число(Прав(ЧислоЛет, 1)) > 1) И (Число(Прав(ЧислоЛет, 1)) < 5) Тогда
				СтрокаГод = " " + НСтр("ru = 'года'");
			Иначе
				СтрокаГод = " " + НСтр("ru = 'лет'");
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + Строка(ЧислоЛет) + СтрокаГод;
			
		КонецЕсли;
		
		Если НЕ (ЧислоМесяцев = 0) Тогда
			
			// Построим строку с числом месяцев.
			Если (СтрДлина(ЧислоМесяцев) > 1) И (Число(Сред(ЧислоМесяцев, СтрДлина(ЧислоМесяцев) - 1, 1)) = 1) Тогда
				СтрокаМесяц = " " + НСтр("ru = 'месяцев'");
			ИначеЕсли Число(Прав(ЧислоМесяцев, 1)) = 1 Тогда
				СтрокаМесяц = " " + НСтр("ru = 'месяц'");
			ИначеЕсли (Число(Прав(ЧислоМесяцев, 1)) > 1) И (Число(Прав(ЧислоМесяцев, 1)) < 5) Тогда
				СтрокаМесяц = " " + НСтр("ru = 'месяца'");
			Иначе
				СтрокаМесяц = " " + НСтр("ru = 'месяцев'");
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + ?(НЕ ЗначениеЗаполнено(РасшифровкаСрокаПолезногоИспользования), "", " ") + Строка(ЧислоМесяцев) + СтрокаМесяц;
		
		КонецЕсли;
		
		Если ЗаключитьВСкобки Тогда
			РасшифровкаСрокаПолезногоИспользования = "(" + РасшифровкаСрокаПолезногоИспользования + ")";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РасшифровкаСрокаПолезногоИспользования;
	
КонецФункции

// Устанавливает текст подсказки срока использования в годах и месяцах.
//
// Параметры:
//  СрокиИспользования	 - Соответствие	 - Ключ содержит элемент формы, Значение содержит срок использования.
//
Процедура УстановитьТекстПодсказкиСрокИспользования(СрокиИспользования) Экспорт
	
	Для каждого ЭлементСрокИспользования Из СрокиИспользования Цикл
		ЭлементФормы = ЭлементСрокИспользования.Ключ;
		РасшифровкаСрока = РасшифровкаСрокаПолезногоИспользования(ЭлементСрокИспользования.Значение);
		Если ЗначениеЗаполнено(РасшифровкаСрока) Тогда
			ЭлементФормы.Подсказка = РасшифровкаСрока;
			ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
		Иначе
			ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует параметры для подбора элементов на основании параметров указанных для элемента формы.
// Используется для подбора в формах выбора с такими же параметрами выбора, как и при выборе.
//
// Параметры:
//  ЭлементФормы - ЭлементФормы - Элемент формы в котором указаны параметры подбора.
//  Форма		 - ФормаКлиентскогоПриложения - Форма на которой расположен элемент. Используется для получения параметров.
// 
// Возвращаемое значение:
//  Структура - параметры подбора.
//
Функция ПараметрыПодбора(ЭлементФормы, Форма) Экспорт

	ВложенныеПараметры = Новый Соответствие;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	
	Для каждого ЭлементКоллекции Из ЭлементФормы.ПараметрыВыбора Цикл
		ИмяПараметра = СтрРазделить(ЭлементКоллекции.Имя, ".");
		Если ИмяПараметра.Количество() > 1 Тогда
			ВложенныйПараметр = ВложенныеПараметры.Получить(ИмяПараметра[0]);
			Если ВложенныйПараметр = Неопределено Тогда
				ВложенныйПараметр = Новый Структура;
			КонецЕсли; 
			ВложенныйПараметр.Вставить(ИмяПараметра[1], ЭлементКоллекции.Значение);
			ВложенныеПараметры.Вставить(ИмяПараметра[0], ВложенныйПараметр);
		Иначе
			ПараметрыПодбора.Вставить(ИмяПараметра[0], ЭлементКоллекции.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ЭлементКоллекции Из ЭлементФормы.СвязиПараметровВыбора Цикл
		ЗначениеПараметра = СтрРазделить(ЭлементКоллекции.ПутьКДанным, ".");
		Если ЗначениеПараметра.Количество() > 1 Тогда
			ЗначениеПараметра = Форма[ЗначениеПараметра[0]][ЗначениеПараметра[1]];
		Иначе
			ЗначениеПараметра = Форма[ЗначениеПараметра[0]];
		КонецЕсли;		
		ИмяПараметра = СтрРазделить(ЭлементКоллекции.Имя, ".");
		Если ИмяПараметра.Количество() > 1 Тогда
			ВложенныйПараметр = ВложенныеПараметры.Получить(ИмяПараметра[0]);
			Если ВложенныйПараметр = Неопределено Тогда
				ВложенныйПараметр = Новый Структура;
			КонецЕсли; 
			ВложенныйПараметр.Вставить(ИмяПараметра[1], ЗначениеПараметра);
			ВложенныеПараметры.Вставить(ИмяПараметра[0], ВложенныйПараметр);
		Иначе
			ПараметрыПодбора.Вставить(ИмяПараметра[0], ЗначениеПараметра);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл
		ПараметрыПодбора.Вставить(ВложенныйПараметр.Ключ, ВложенныйПараметр.Значение);
	КонецЦикла; 
	
	Возврат ПараметрыПодбора;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Служит универсальной процедурой для изменения свойств элементов формы на основании полученных параметров.
// Параметры вычисляются при изменении реквизитов объекта.
//
// Параметры:
//  Форма                        - ФормаКлиентскогоПриложения - Форма, в которой нужно настроить зависимые элементы.
//  ПараметрыРеквизитовОбъекта   - Массив - Содержит список свойств и их значения (см. ДобавитьПараметрыРеквизитаОбъекта).
//
Процедура НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		ВнеоборотныеАктивыВызовСервера.ПроверитьПараметрыРеквизитовОбъекта(ПараметрыРеквизитовОбъекта);
	КонецЕсли;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если НЕ ЗначениеЗаполнено(ПараметрыРеквизита.ИмяЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного"
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненногоБезОчистки" Тогда
			Форма.Элементы[ПараметрыРеквизита.ИмяЭлемента].ТолькоПросмотр = ПараметрыРеквизита.Значение;
			Форма.Элементы[ПараметрыРеквизита.ИмяЭлемента].АвтоОтметкаНезаполненного = НЕ ПараметрыРеквизита.Значение;
		ИначеЕсли ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОчистки" Тогда
			Форма.Элементы[ПараметрыРеквизита.ИмяЭлемента].ТолькоПросмотр = ПараметрыРеквизита.Значение;
		ИначеЕсли ПараметрыРеквизита.Свойство = "ВидимостьЭлемента" Тогда
			Форма.Элементы[ПараметрыРеквизита.ИмяЭлемента].Видимость = ПараметрыРеквизита.Значение;
		Иначе
			Форма.Элементы[ПараметрыРеквизита.ИмяЭлемента][ПараметрыРеквизита.Свойство] = ПараметрыРеквизита.Значение;
		КонецЕсли;
		Если ПараметрыРеквизита.Свойство = "АвтоОтметкаНезаполненного"
				И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного"
				И ПараметрыРеквизита.Значение = Истина Тогда
			Форма.Элементы[ПараметрыРеквизита.ИмяЭлемента].ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Используется для заполнения параметров свойств элементов формы.
// Далее эти параметры используются в процедурах:
//     - ВнеоборотныеАктивыКлиентСервер.НастроитьЗависимыеЭлементыФормы(), 
//     - ВнеоборотныеАктивыСлужебный.ОтключитьПроверкуЗаполненияРеквизитовОбъекта().
//
//  Пример вызова:
//  ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
//  "ОС.СуммаСписанияУУ", "ОССуммаСписанияУУ", "Видимость", СуммаВидима, ПараметрыРеквизитовОбъекта);
//
// Параметры:
//  ИмяРеквизита				 - Строка - Имя реквизита для которого устанавливается свойство (может быть пустым).
//  ИмяЭлемента					 - Строка - Имя элемента формы с которым связан реквизит.
//  Свойство					 - Строка - Свойство элемента формы. Разрешено любое свойство предусмотренное платформой для элементов формы.
//                                          Дополнительно можно использовать служебные свойства:
//                                              - "ТолькоПросмотрБезОтметкиНезаполненного" - позволяет установить только
//                                                  просмотр у элемента и отключить проверку заполнения.
//                                              - "ВидимостьЭлемента" - позволяет управлять только видимостью элемента,
//                                                                      а проверка заполнения не отключается.
//  Значение					 - Произвольный - Любое значение свойства.
//  ПараметрыРеквизитовОбъекта	 - Массив - Параметры в которые нужно добавить.
//
Процедура ДобавитьПараметрыРеквизитаОбъекта(ИмяРеквизита, ИмяЭлемента, Свойство, Значение, ПараметрыРеквизитовОбъекта) Экспорт
	
	НовыйПараметр = Новый Структура;
	НовыйПараметр.Вставить("ИмяРеквизита", ИмяРеквизита);
	НовыйПараметр.Вставить("ИмяЭлемента", ИмяЭлемента);
	НовыйПараметр.Вставить("Свойство", Свойство);
	НовыйПараметр.Вставить("Значение", Значение);
	
	ПараметрыРеквизитовОбъекта.Добавить(НовыйПараметр);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияЭлемента(ЭлементФормы, ЗаголовокЭлемента) Экспорт

	Если ЗаголовокЭлемента <> Неопределено И ЗаголовокЭлемента.Количество() <> 0 Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокЭлемента);
		ЭлементФормы.Видимость = Истина;
	Иначе
		ЭлементФормы.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

// Добавляет в табличную часть выбранные ОС / НМА.
//
// Параметры:
//  ТабличнаяЧасть		 - ДанныеФормыКоллекция	 - Табличная часть основных средств.
//  ИмяРеквизита		 - Строка				 - Имя реквизита табличной части.
//  ВыбранноеЗначение	 - Массив				 - Выбранные основные средства (параметр события ОбработкаВыбора).
// 
// Возвращаемое значение:
//  Массив - Список добавленных строк.
//
Функция ОбработкаВыбораЭлемента(ТабличнаяЧасть, ИмяРеквизита, ВыбранноеЗначение) Экспорт

	Если ВыбранноеЗначение.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ДобавленныеСтроки = Новый Массив;
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		СтруктураПоиска = Новый Структура(ИмяРеквизита, ЭлементМассива);
		СписокСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока[ИмяРеквизита] = ЭлементМассива;
			ДобавленныеСтроки.Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;

КонецФункции

Функция ЗначениеСвойстваРеквизитаОбъекта(ИмяРеквизита, Свойство, ПараметрыРеквизитовОбъекта) Экспорт

	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		Если ПараметрыРеквизита.ИмяРеквизита = ИмяРеквизита И ПараметрыРеквизита.Свойство = Свойство Тогда
			Возврат ПараметрыРеквизита.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УстановитьВидимостьЗначенияСпискаВыбора(СписокВыбора, ЗначениеВидно, ЗначениеЭлемента, ПредставлениеЭлемента = "", Позиция = Неопределено) Экспорт

	ЭлементСписка = СписокВыбора.НайтиПоЗначению(ЗначениеЭлемента);
	
	Если ЗначениеВидно Тогда
		Если ЭлементСписка = Неопределено Тогда
			Если Позиция <> Неопределено Тогда
				СписокВыбора.Вставить(Позиция, ЗначениеЭлемента, ПредставлениеЭлемента);
			Иначе
				СписокВыбора.Добавить(ЗначениеЭлемента, ПредставлениеЭлемента);
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ЭлементСписка <> Неопределено Тогда
		СписокВыбора.Удалить(ЭлементСписка);
	КонецЕсли; 

КонецПроцедуры

Функция ПараметрыПринятияКУчетуОС(Объект, ВспомогательныеРеквизиты) Экспорт

	ПараметрыПринятияКУчетуОС = ПараметрыПринятияКУчетуОСИВводаОстатков(Объект, ВспомогательныеРеквизиты);
	
	//
	ФактическаяСтоимость =
		Объект.ЧастичныйВводВЭксплуатацию 
		ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена")
		ИЛИ НЕ ВспомогательныеРеквизиты.ЕстьУчетСебестоимости
		ИЛИ ПринятиеКУчетуОСКлиентСерверЛокализация.ПрименяетсяФактическаяСтоимость(Объект);
	
	ПараметрыПринятияКУчетуОС.Вставить("ФактическаяСтоимость", ФактическаяСтоимость);
	
	Возврат ПараметрыПринятияКУчетуОС;
	
КонецФункции

Функция ПараметрыПринятияКУчетуНМА(Объект, ВспомогательныеРеквизиты) Экспорт

	ДоступныПараметрыАмортизацииУУ = (Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
										ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.ПустаяСсылка"))
									И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
									
	ПоНаработке = 
		ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			И Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции");
				
	ПараметрыПринятияКУчетуНМА = Новый Структура;
	ПараметрыПринятияКУчетуНМА.Вставить("ДоступныПараметрыАмортизацииУУ", ДоступныПараметрыАмортизацииУУ);
	ПараметрыПринятияКУчетуНМА.Вставить("ПоНаработке", ПоНаработке);
	ПараметрыПринятияКУчетуНМА.Вставить("ПоИнвентаризации", Ложь);
	
	ПринятиеКУчетуНМАКлиентСерверЛокализация.ДополнитьПараметрыПринятияКУчетуНМА(Объект, ВспомогательныеРеквизиты, ПараметрыПринятияКУчетуНМА);
	
	Возврат ПараметрыПринятияКУчетуНМА;

КонецФункции

Функция ПараметрыВводаОстатковОС(Объект, ВспомогательныеРеквизиты) Экспорт

	ПараметрыВводаОстатковОС = ПараметрыПринятияКУчетуОСИВводаОстатков(Объект, ВспомогательныеРеквизиты);
	
	ПараметрыВводаОстатковОС.Вставить("ДоступныПараметрыУчета", ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
	
	Возврат ПараметрыВводаОстатковОС;

КонецФункции
  
Процедура УстановитьВидимостьТекущегоЗначенияПараметра_ИзменениеПараметровОС(Форма, ИмяПараметра, СтруктураИзмененныхРеквизитов) Экспорт

	Если СтруктураИзмененныхРеквизитов.Количество() = 0 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПоказатьТекущиеЗначения") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство(ИмяПараметра + "Флаг") Тогда
		Форма.Элементы["ОС" + ИмяПараметра].Видимость = Форма.Объект[ИмяПараметра + "Флаг"] И Форма.ПоказатьТекущиеЗначения;
	КонецЕсли;

КонецПроцедуры

#Область ОпределениеСвойствЗависимыхРеквизитовОбъекта

Функция ЗначенияСвойствЗависимыхРеквизитов_ГФУ(Объект, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ГФУ(
		Объект, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ПараметрыПринятияКУчетуОС = ПараметрыПринятияКУчетуОС(Объект, ВспомогательныеРеквизиты);
	
	#Область Основное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС")
										И ВспомогательныеРеквизиты.ИспользоватьОбъектыСтроительства);
										
		ДобавитьПараметрыРеквизитаОбъекта(
			"ВидАналитикиКапитализацииРасходов", 
			"ВидАналитикиРасходовОсновныеСредства", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ВидАналитикиКапитализацииРасходов", 
			"ВидАналитикиРасходовОбъектыСтроительства", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъектСтроительства", 
			"ОбъектСтроительства", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЧастичныйВводВЭксплуатацию", 
			"ЧастичныйВводВЭксплуатацию", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидАналитикиКапитализацииРасходов")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС")
							ИЛИ Объект.ВидАналитикиКапитализацииРасходов <> ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства");
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЧастичныйВводВЭксплуатацию", 
			"ЧастичныйВводВЭксплуатацию", 
			"ТолькоПросмотр", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидАналитикиКапитализацииРасходов")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (Объект.ВидАналитикиКапитализацииРасходов <> ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства"));
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъектСтроительства", 
			"ОбъектСтроительства", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете 
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьУУ", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ЛиквидационнаяСтоимость", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ЛиквидационнаяСтоимостьРегл", 
			"ОСЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаУУ", 
			"ПорядокУчетаУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияУУРасшифровка", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУ", 
			"НачислятьАмортизациюУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ
							И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный")
								ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка"));
							
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ
							И Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка"));
							
		ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
											
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ") 
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ПоказательНаработки", 
			"ОСПоказательНаработки", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСПоказательНаработкиЕдиницаИзмерения", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ОбъемНаработки", 
			"ОСОбъемНаработки", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовУУ, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовУУ, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СтатьяРасходовБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"АвтоОтметкаНезаполненного", 
			ПараметрыПринятияКУчетуОС.СтатьяРасходовУУОбязательна, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	
	#КонецОбласти
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуОС(
		Объект, ВспомогательныеРеквизиты, ПараметрыПринятияКУчетуОС, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_СписаниеОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЧастичнаяЛиквидация") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ОтражатьВРеглУчете И Объект.ЧастичнаяЛиквидация;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СуммаСписанияБУ", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЧастичнаяЛиквидация") ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете 
			И Объект.ЧастичнаяЛиквидация
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СуммаСписанияУУ", 
			"ОССуммаСписанияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_СписаниеОС(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
		
	#Область Учет
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НачислятьАмортизациюУУФлаг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУ", 
			"НачислятьАмортизациюУУ", 
			"ТолькоПросмотр", 
			НЕ Объект.НачислятьАмортизациюУУФлаг, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУ", 
			"НачислятьАмортизациюУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУФлаг", 
			"НачислятьАмортизациюУУФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУФлаг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.МетодНачисленияАмортизацииУУФлаг, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУФлаг", 
			"МетодНачисленияАмортизацииУУФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияУУФлаг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.СрокИспользованияУУФлаг, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУФлаг", 
			"СрокИспользованияУУФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияУУРасшифровка", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("КоэффициентУскоренияУУФлаг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"ТолькоПросмотр", 
			НЕ Объект.КоэффициентУскоренияУУФлаг, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУФлаг", 
			"КоэффициентУскоренияУУФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЛиквидационнаяСтоимостьФлаг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"ТолькоПросмотр", 
			НЕ Объект.ЛиквидационнаяСтоимостьФлаг, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьФлаг", 
			"ЛиквидационнаяСтоимостьФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЛиквидационнаяСтоимостьРеглФлаг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"ТолькоПросмотр", 
			НЕ Объект.ЛиквидационнаяСтоимостьРеглФлаг, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРеглФлаг", 
			"ЛиквидационнаяСтоимостьРеглФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ГруппаФинансовогоУчетаФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета", 
			"ГруппаФинансовогоУчета", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ГруппаФинансовогоУчетаФлаг, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПоказательНаработкиФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПоказательНаработки", 
			"ПоказательНаработки", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ПоказательНаработкиФлаг, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОбъемНаработкиФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ОбъемНаработкиФлаг, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Амортизация
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражениеАмортизационныхРасходовФлаг")
		ИЛИ ОбновитьВсе Тогда
	
		ДобавитьПараметрыРеквизитаОбъекта(
			"Амортизация", 
			"Амортизация", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ОтражениеАмортизационныхРасходовФлаг, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
		
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровОС(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_МодернизацияОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	#Область Основное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидАналитикиКапитализацииРасходов")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (Объект.ВидАналитикиКапитализацииРасходов <> ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства"));
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъектСтроительства", "ОбъектСтроительства", "ТолькоПросмотрБезОтметкиНезаполненного", ЗначениеСвойства, ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если ОбновитьВсе Тогда
		
		ВыборВидаАналитикиДоступен = (ВспомогательныеРеквизиты.ИспользоватьОбъектыСтроительства);
										
		ДобавитьПараметрыРеквизитаОбъекта(
			"ВидАналитикиКапитализацииРасходов", 
			"ВидАналитикиРасходовОсновныеСредства", 
			"ВидимостьЭлемента", 
			ВыборВидаАналитикиДоступен, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ВидАналитикиКапитализацииРасходов", 
			"ВидАналитикиРасходовОбъектыСтроительства", 
			"ВидимостьЭлемента", 
			ВыборВидаАналитикиДоступен, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъектСтроительства", 
			"ОбъектСтроительства", 
			"Видимость", 
			ВыборВидаАналитикиДоступен, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьУУ", 
			"ОССтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьБУ", 
			"ОССтоимостьБУ", 
			"Видимость", 
			Объект.ОтражатьВРеглУчете, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_МодернизацияОС(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ПереоценкаОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьУУ", 
			"ОССтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьБУ", 
			"ОССтоимостьБУ", 
			"Видимость", 
			Объект.ОтражатьВРеглУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_РазукомплектацияОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете 
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьУУ", 
			"ОССтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ЛиквидационнаяСтоимость", 
			"ОСЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ЛиквидационнаяСтоимостьРегл", 
			"ОСЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_РазукомплектацияОС(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	ПараметрыРеквизитовОбъекта = Неопределено;
	
	Если ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковОсновныхСредств")
		ИЛИ ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС")
		ИЛИ ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе")
		ИЛИ ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПредметовЛизингаНаБалансе") Тогда
		
		ПараметрыРеквизитовОбъекта = ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_ОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
		
	ИначеЕсли ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР") Тогда
		
		ПараметрыРеквизитовОбъекта = ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_НМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
		
	КонецЕсли;
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ПараметрыПринятияКУчетуНМА = ПараметрыПринятияКУчетуНМА(Объект, ВспомогательныеРеквизиты);
	
	ДоступныПараметрыАмортизацииУУ = Объект.ОтражатьВУпрУчете
		И Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию");
		
	#Область Основное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//	
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаУУ", 
			"ПорядокУчетаУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		Или ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ДоступныПараметрыАмортизацииУУ
							И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный")
								ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"));
							
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		Или СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете
			И Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			И Объект.МетодНачисленияАмортизацииУУ =
				ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка");
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		Или СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		Или СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		Или СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ")
		Или СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		Или ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			ПараметрыПринятияКУчетуНМА.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете;
							
		ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(
		Объект, ПараметрыПринятияКУчетуНМА, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_СписаниеНМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ЧастичнаяЛиквидация")
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = (Объект.ОтражатьВУпрУчете И Объект.ЧастичнаяЛиквидация);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.СуммаСписанияУУ", 
			"НМАСуммаСписанияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_СписаниеНМА(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ПереоценкаНМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.СтоимостьУУ", 
			"НМАСтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		Или ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.СтоимостьБУ", 
			"НМАСтоимостьБУ", 
			"Видимость", 
			Объект.ОтражатьВРеглУчете, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ПеремещениеНМА(Объект, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПеремещениеНМА(
		Объект, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровНМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	#Область УУ
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчета", 
			"ПорядокУчета", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"СпособНачисленияАмортизацииУУ", 
			"СпособНачисленияАмортизацииУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", Объект.ОтражатьВУпрУчете, ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияУУРасшифровка", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументОснование", 
			"ДокументОснование", 
			"Видимость", 
			ЗначениеЗаполнено(Объект.ДокументОснование), 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровНМА(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
		
	#Область Флаги
	НевидимыеФлаги = Новый Массив;
	ВидимыеФлаги = Новый Массив;
	
	ИзменяемыеРеквизиты = ИзменяемыеРеквизиты_ИзменениеПараметровНМА();
	
	Для каждого ПараметрРеквизитовОбъекта Из ПараметрыРеквизитовОбъекта Цикл
		Если ПараметрРеквизитовОбъекта.Свойство = "Видимость"
			И ЗначениеЗаполнено(ПараметрРеквизитовОбъекта.ИмяРеквизита)
			И ИзменяемыеРеквизиты.Свойство(ПараметрРеквизитовОбъекта.ИмяРеквизита) Тогда
			Если ПараметрРеквизитовОбъекта.Значение Тогда
				ВидимыеФлаги.Добавить(ПараметрРеквизитовОбъекта.ИмяРеквизита);
			Иначе
				НевидимыеФлаги.Добавить(ПараметрРеквизитовОбъекта.ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИзменяемыйРеквизит Из ИзменяемыеРеквизиты Цикл
		Если Не Объект[ИзменяемыйРеквизит.Ключ + "Флаг"] Тогда
			ДобавитьПараметрыРеквизитаОбъекта(
				ИзменяемыйРеквизит.Ключ, ИзменяемыйРеквизит.Ключ, "ТолькоПросмотрБезОтметкиНезаполненного", Истина, ПараметрыРеквизитовОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ВидимыйФлаг Из ВидимыеФлаги Цикл
		ДобавитьПараметрыРеквизитаОбъекта(ВидимыйФлаг + "Флаг", ВидимыйФлаг + "Флаг", "Видимость", Истина, ПараметрыРеквизитовОбъекта);
	КонецЦикла;
	Для каждого НевидимыйФлаг Из НевидимыеФлаги Цикл
		ДобавитьПараметрыРеквизитаОбъекта(НевидимыйФлаг + "Флаг", НевидимыйФлаг + "Флаг", "Видимость", Ложь, ПараметрыРеквизитовОбъекта);
	КонецЦикла;
	#КонецОбласти
		
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_РеализацияУслугПрочихАктивов(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_РеализацияУслугПрочихАктивов(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
		
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗаполнитьРеквизитыВЗависимостиОтСвойств_ИзменениеПараметровОС(Объект, ПараметрыРеквизитовОбъекта) Экспорт

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Истина
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного" И ПараметрыРеквизита.Значение = Истина Тогда
			Действие = "Очистить";
		ИначеЕсли ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Истина
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного" И ПараметрыРеквизита.Значение = Ложь Тогда
			Действие = "Заполнить";
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Прав(ПараметрыРеквизита.ИмяРеквизита, 4) = "Флаг" Тогда
			Если Действие = "Очистить" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = Ложь;
				ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли;
		КонецЕсли; 
		
		Если ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюБУ" 
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюНУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюУУ" Тогда
			Если Действие = "Очистить" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = Ложь;
				ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;

		Если ПараметрыРеквизита.ИмяРеквизита = "ОбъемНаработки" 
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ЛиквидационнаяСтоимость"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "СпециальныйКоэффициентНУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "СрокИспользованияНУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "КоэффициентУскоренияУУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "СрокИспользованияУУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "КоэффициентУскоренияБУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "КоэффициентАмортизацииБУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "СрокИспользованияБУ" Тогда
			Если Действие = "Очистить" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = 0;
				ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;

		Если ПараметрыРеквизита.ИмяРеквизита = "ПоказательНаработки" 
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ГруппаФинансовогоУчета"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "МетодНачисленияАмортизацииУУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ГрафикАмортизации" Тогда
			Если Действие = "Очистить" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = Неопределено;
				ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ОтражениеАмортизационныхРасходовФлаг" Тогда
			Если Действие = "Очистить" Тогда
				Объект.Амортизация.Очистить();
				ИзмененныеРеквизиты.Добавить("Амортизация");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ОтражениеАмортизационнойПремииФлаг" Тогда
			Если Действие = "Очистить" Тогда
				Объект.АмортизационнаяПремия.Очистить();
				ИзмененныеРеквизиты.Добавить("АмортизационнаяПремия");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ОтражениеИмущественныхНалоговФлаг" Тогда
			Если Действие = "Очистить" Тогда
				Объект.ИмущественныеНалоги.Очистить();
				ИзмененныеРеквизиты.Добавить("ИмущественныеНалоги");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");

КонецФункции

Функция ЗаполнитьРеквизитыВЗависимостиОтСвойств_МодернизацияОС(Объект, ПараметрыРеквизитовОбъекта) Экспорт

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Истина
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного" И ПараметрыРеквизита.Значение = Истина Тогда
			Действие = "Очистить";
		ИначеЕсли ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Истина
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного" И ПараметрыРеквизита.Значение = Ложь Тогда
			Действие = "Заполнить";
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "НаправлениеДеятельности" Тогда
			Если Действие = "Очистить" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = Неопределено;
				ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");

КонецФункции

Функция ИзменяемыеРеквизиты_ИзменениеПараметровНМА() Экспорт
	
	ИзменяемыеРеквизиты = Новый Структура("ПорядокУчета,СпособНачисленияАмортизацииУУ,СрокИспользованияУУ,ОбъемНаработки,КоэффициентУскоренияУУ,
		|ЛиквидационнаяСтоимость,ЛиквидационнаяСтоимостьРегл,ГруппаФинансовогоУчета,АмортизационныеРасходы");
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьИзменяемыеРеквизиты_ИзменениеПараметровНМА(ИзменяемыеРеквизиты);
	
	Возврат ИзменяемыеРеквизиты;
	
КонецФункции
 
#КонецОбласти

#Область Налоги

Процедура УстановитьДоступностьПараметровИмущественныхНалогов(Объект, Элементы, ПрефиксЭлементов = "") Экспорт

	ОсвобождениеОтНалогообложения = Объект[ПрефиксЭлементов + "ОсвобождениеОтНалогообложения"];
	
	// Это сниженная ставка
	Элементы[ПрефиксЭлементов + "СнижениеНалоговойСтавки"].Доступность = НЕ ОсвобождениеОтНалогообложения;
	Элементы[ПрефиксЭлементов + "СнижениеНалоговойСтавкиДвижимоеИмущество"].Доступность = НЕ ОсвобождениеОтНалогообложения;
	
	// Все имущество освобождено от налога, код льготы.
	ПолеДоступно = ОсвобождениеОтНалогообложения;
	Элементы[ПрефиксЭлементов + "КодНалоговойЛьготыОсвобождениеОтНалогообложения"].Доступность = ПолеДоступно;
	Элементы[ПрефиксЭлементов + "КодНалоговойЛьготыОсвобождениеОтНалогообложения"].АвтоОтметкаНезаполненного = ПолеДоступно;
	Элементы[ПрефиксЭлементов + "КодНалоговойЛьготыОсвобождениеОтНалогообложения"].ОтметкаНезаполненного = 
		ПолеДоступно И ПустаяСтрока(Объект[ПрефиксЭлементов + "КодНалоговойЛьготыОсвобождениеОтНалогообложения"]);

	// Налог уменьшен на.
	Элементы[ПрефиксЭлементов + "УменьшениеСуммыНалогаВПроцентах"].Доступность = НЕ ОсвобождениеОтНалогообложения;
	ПолеДоступно = НЕ ОсвобождениеОтНалогообложения И Объект[ПрефиксЭлементов + "УменьшениеСуммыНалогаВПроцентах"];
	Элементы[ПрефиксЭлементов + "ПроцентУменьшения"].Доступность = ПолеДоступно;
	Элементы[ПрефиксЭлементов + "ПроцентУменьшения"].АвтоОтметкаНезаполненного = ПолеДоступно;
	Элементы[ПрефиксЭлементов + "ПроцентУменьшения"].ОтметкаНезаполненного = ПолеДоступно И Объект[ПрефиксЭлементов + "ПроцентУменьшения"] = 0;
	Элементы[ПрефиксЭлементов + "ПроцентУменьшенияДекорацияПроцент"].Доступность = ПолеДоступно;

	// Движимое имущество, принятое на учет с 1 января 2013 года
	ПолеДоступно = Объект[ПрефиксЭлементов + "Период"] >= '201801010000'
					И Объект[ПрефиксЭлементов + "Период"] < '201901010000';
	Элементы[ПрефиксЭлементов + "НалоговаяСтавкаДвижимоеИмущество"].Видимость = ПолеДоступно;
	Элементы[ПрефиксЭлементов + "НалоговаяСтавкаДвижимоеИмуществоДекорацияПроцент"].Видимость = ПолеДоступно;
	Элементы[ПрефиксЭлементов + "СнижениеНалоговойСтавкиДвижимоеИмущество"].Видимость = ПолеДоступно;
	Элементы[ПрефиксЭлементов + "ОсвобождениеОтНалогообложенияДвижимогоИмущества"].Видимость = ПолеДоступно;
	Элементы[ПрефиксЭлементов + "ОсвобождениеОтНалогообложенияДвижимогоИмущества"].Доступность = ПолеДоступно И НЕ ОсвобождениеОтНалогообложения;
	
КонецПроцедуры

Процедура ОсвобождениеОтНалогообложенияПриИзменении(Объект, Элементы, ПрефиксЭлементов = "") Экспорт

	Если Объект[ПрефиксЭлементов + "ОсвобождениеОтНалогообложения"] Тогда
		
		Объект[ПрефиксЭлементов + "СнижениеНалоговойСтавки"] = Ложь;
		Объект[ПрефиксЭлементов + "СнижениеНалоговойСтавкиДвижимоеИмущество"] = Ложь;
		Объект[ПрефиксЭлементов + "УменьшениеСуммыНалогаВПроцентах"] = Ложь;
		Объект[ПрефиксЭлементов + "ПроцентУменьшения"] = 0;
		Объект[ПрефиксЭлементов + "ОсвобождениеОтНалогообложенияДвижимогоИмущества"] = Ложь;
		
	Иначе
		Объект[ПрефиксЭлементов + "КодНалоговойЛьготыОсвобождениеОтНалогообложения"] = "";
	КонецЕсли;
	
	УстановитьДоступностьПараметровИмущественныхНалогов(Объект, Элементы, ПрефиксЭлементов);
	
КонецПроцедуры

Процедура СтавкиНалогаНаИмуществоПериодПриИзменении(Объект, Элементы, ПрефиксЭлементов = "") Экспорт

	Если Объект[ПрефиксЭлементов + "Период"] >= '201801010000'
		И НЕ Элементы[ПрефиксЭлементов + "НалоговаяСтавкаДвижимоеИмущество"].Видимость Тогда
		
		Объект[ПрефиксЭлементов + "НалоговаяСтавкаДвижимоеИмущество"] = 1.1;
		
	ИначеЕсли Объект[ПрефиксЭлементов + "Период"] < '201801010000' Тогда
		
		Объект[ПрефиксЭлементов + "НалоговаяСтавкаДвижимоеИмущество"] = 0;
		Объект[ПрефиксЭлементов + "ОсвобождениеОтНалогообложенияДвижимогоИмущества"] = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьПараметровИмущественныхНалогов(Объект, Элементы, ПрефиксЭлементов);
	
КонецПроцедуры

Функция МинимальнаяДатаРегистрации(Объект) Экспорт

	ДатаРегистрации = '000101010000';
	
	Для каждого ДанныеСтроки Из Объект.ОС Цикл
		Если ДанныеСтроки.ДатаРегистрации = '000101010000' Тогда
			ДатаРегистрации = ?(ДатаРегистрации <> '000101010000', Мин(Объект.Дата, ДатаРегистрации), Объект.Дата);
		Иначе
			ДатаРегистрации = ?(ДатаРегистрации <> '000101010000', Мин(ДанныеСтроки.ДатаРегистрации, ДатаРегистрации), ДанныеСтроки.ДатаРегистрации);
		КонецЕсли;
	КонецЦикла; 
	
	Если ДатаРегистрации = '000101010000' Тогда
		ДатаРегистрации = Объект.Дата;
	КонецЕсли; 

	Возврат ДатаРегистрации;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДействияВыполняемыеПриИзмененииРеквизитов

Процедура ПриИзмененииРеквизитов_ПринятиеКУчетуОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты) Экспорт

	Если НЕ ЗначениеЗаполнено(ИзмененныеРеквизиты) Тогда
		Возврат; 
	КонецЕсли; 
	
	СписокРеквизитов = СтрРазделить(ИзмененныеРеквизиты, ",");
	
	// ВАЖНО: Порядок имеет значение!
	
	Если СписокРеквизитов.Найти("ХозяйственнаяОперация") <> Неопределено
		ИЛИ СписокРеквизитов.Найти("ВидАналитикиКапитализацииРасходов") <> Неопределено Тогда
	
		Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС")
			ИЛИ Объект.ВидАналитикиКапитализацииРасходов <> ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства") Тогда
			Объект.ЧастичныйВводВЭксплуатацию = Ложь;
			СписокРеквизитов.Добавить("ЧастичныйВводВЭксплуатацию");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ХозяйственнаяОперация") <> Неопределено Тогда
		
		Если Объект.ЧастичныйВводВЭксплуатацию
			И (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации")
				ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга")) Тогда
			Объект.ЧастичныйВводВЭксплуатацию = Ложь;
			СписокРеквизитов.Добавить("ЧастичныйВводВЭксплуатацию");
		КонецЕсли;
		
		Если Объект.ВидАналитикиКапитализацииРасходов = ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства")
			И (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации")
				ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга")) Тогда
			Объект.ВидАналитикиКапитализацииРасходов = ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства");
			СписокРеквизитов.Добавить("ВидАналитикиКапитализацииРасходов");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ОтражатьВРеглУчете") <> Неопределено
		И ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА Тогда
		
		Объект.НачислятьАмортизациюБУ = Объект.ОтражатьВРеглУчете;
		Объект.НачислятьАмортизациюНУ = Объект.ОтражатьВРеглУчете;
		СписокРеквизитов.Добавить("НачислятьАмортизациюБУ");
		СписокРеквизитов.Добавить("НачислятьАмортизациюНУ");
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ОтражатьВУпрУчете") <> Неопределено Тогда
		Объект.НачислятьАмортизациюУУ = Объект.ОтражатьВУпрУчете;
		СписокРеквизитов.Добавить("НачислятьАмортизациюУУ");
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ОтражатьВРеглУчете") <> Неопределено И НЕ Объект.ОтражатьВРеглУчете
		ИЛИ СписокРеквизитов.Найти("ОтражатьВУпрУчете") <> Неопределено И НЕ Объект.ОтражатьВУпрУчете Тогда
		
		Для каждого СтрокаТаблицы Из Объект.ОС Цикл
			Если НЕ Объект.ОтражатьВРеглУчете Тогда
				СтрокаТаблицы.СтоимостьБУ = 0;
				СтрокаТаблицы.СтоимостьНУ = 0;
				СтрокаТаблицы.СтоимостьПР = 0;
				СтрокаТаблицы.СтоимостьВР = 0;
			КонецЕсли; 
			Если НЕ Объект.ОтражатьВУпрУчете Тогда
				СтрокаТаблицы.СтоимостьУУ = 0;
				СтрокаТаблицы.ЛиквидационнаяСтоимость = 0;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	ПринятиеКУчетуОСКлиентСерверЛокализация.ПриИзмененииРеквизитов(Объект, ВспомогательныеРеквизиты, СписокРеквизитов);
	
	ИзмененныеРеквизиты = СтрСоединить(СписокРеквизитов, ",");
	
КонецПроцедуры

Функция ЗаполнитьРеквизитыВЗависимостиОтСвойств_ВводОстатков(Объект, ПараметрыРеквизитовОбъекта) Экспорт

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Действие = ОчиститьИлиЗаполнить(Объект, ПараметрыРеквизита);
		
		Если НЕ ЗначениеЗаполнено(Действие) Тогда
			Продолжить;
		КонецЕсли;
		
		#Область СтраницаАмортизация
		
		Если ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюБУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюНУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюУУ" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = ?(Действие = "Заполнить", Истина, Ложь);
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ГрафикАмортизации" Тогда
			Если Действие = "Очистить" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = Неопределено;
				ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли; 
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ВключитьАмортизационнуюПремиюВСоставРасходов" Тогда
			Если Действие = "Очистить" Тогда
				Объект.ВключитьАмортизационнуюПремиюВСоставРасходов = Ложь;
				Объект.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;
				ИзмененныеРеквизиты.Добавить("ВключитьАмортизационнуюПремиюВСоставРасходов");
				ИзмененныеРеквизиты.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
			КонецЕсли; 
		КонецЕсли;
		
		#КонецОбласти
		
		#Область СтраницаСтоимость
		Если Действие = "Очистить" 
			И (ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьБУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьНУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьПР"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьВР"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьУУ"
			
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьБУЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьНУЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьПРЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьВРЦФ"
				
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияБУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияНУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияВР"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияПР"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияУУ"
				
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияБУЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияНУЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияПРЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияВРЦФ") Тогда

			Объект[ПараметрыРеквизита.ИмяРеквизита] = 0;
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);

		КонецЕсли;
		
		#КонецОбласти
		
		#Область СтраницаОтражениеРасходов
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовБУ" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовБУ = Неопределено;
				Объект.АналитикаРасходовБУ = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовУУ" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовУУ = Неопределено;
				Объект.АналитикаРасходовУУ = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяРасходовУУ");
				ИзмененныеРеквизиты.Добавить("АналитикаРасходовУУ");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовНалог" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовНалог = Неопределено;
				Объект.АналитикаРасходовНалог = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяРасходовНалог");
				ИзмененныеРеквизиты.Добавить("АналитикаРасходовНалог");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяДоходов" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяДоходов = Неопределено;
				Объект.АналитикаДоходов = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяДоходов");
				ИзмененныеРеквизиты.Добавить("АналитикаДоходов");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовАмортизационнойПремии" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовАмортизационнойПремии = Неопределено;
				Объект.АналитикаРасходовАмортизационнойПремии = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяРасходовАмортизационнойПремии");
				ИзмененныеРеквизиты.Добавить("АналитикаРасходовАмортизационнойПремии");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ПередаватьРасходыВДругуюОрганизацию" Тогда
			Если Действие = "Очистить" Тогда
				Объект.ПередаватьРасходыВДругуюОрганизацию = Ложь;
				Объект.ОрганизацияПолучательРасходов = Неопределено;
				ИзмененныеРеквизиты.Добавить("ПередаватьРасходыВДругуюОрганизацию");
				ИзмененныеРеквизиты.Добавить("ОрганизацияПолучательРасходов");
			КонецЕсли;
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЦикла; 
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");
	
КонецФункции

Процедура ОчиститьНеиспользуемыеРеквизиты(Объект, ПараметрыРеквизитовОбъекта, ИменаТабличныхЧастей = "") Экспорт

	НеиспользуемыеРеквизитыТабличныхЧастей = Новый Соответствие;
	
	ТабличныеЧастиОбъекта = Новый Структура(ИменаТабличныхЧастей);
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если НЕ ЗначениеЗаполнено(ПараметрыРеквизита.ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ (ПараметрыРеквизита.Свойство = "ТолькоПросмотр" ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного")
					И ПараметрыРеквизита.Значение = Истина Тогда
					
			ПутьКРеквизиту = СтрРазделить(ПараметрыРеквизита.ИмяРеквизита, ".");
			Если ПутьКРеквизиту.ВГраница() <> 0 Тогда
				РеквизитыТЧ = НеиспользуемыеРеквизитыТабличныхЧастей.Получить(ПутьКРеквизиту[0]);
				Если РеквизитыТЧ = Неопределено Тогда
					РеквизитыТЧ = Новый Массив;
				КонецЕсли;
				РеквизитыТЧ.Добавить(ПутьКРеквизиту[1]);
				НеиспользуемыеРеквизитыТабличныхЧастей.Вставить(ПутьКРеквизиту[0], РеквизитыТЧ);
			ИначеЕсли ТипЗнч(Объект[ПараметрыРеквизита.ИмяРеквизита]) = Тип("ДанныеФормыКоллекция") 
				ИЛИ ТабличныеЧастиОбъекта.Свойство(ПараметрыРеквизита.ИмяРеквизита) Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита].Очистить();
			Иначе
				Объект[ПараметрыРеквизита.ИмяРеквизита] = Неопределено;
			КонецЕсли; 
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Очистка реквизитов ТЧ
	Для каждого КлючИЗначение Из НеиспользуемыеРеквизитыТабличныхЧастей Цикл
		Для каждого ДанныеСтроки Из Объект[КлючИЗначение.Ключ] Цикл
			Для каждого ИмяРеквизита Из КлючИЗначение.Значение Цикл
				ДанныеСтроки[ИмяРеквизита] = Неопределено;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Функция ОчиститьИлиЗаполнить(Объект, ПараметрыРеквизита) Экспорт

	Если НЕ ЗначениеЗаполнено(ПараметрыРеквизита.ИмяРеквизита) Тогда
		Возврат "";
	КонецЕсли;
	
	ЭтоБулево = ТипЗнч(Объект[ПараметрыРеквизита.ИмяРеквизита]) = Тип("Булево");
	
	Действие = "";
	
	Если ((ПараметрыРеквизита.Свойство = "Видимость" ИЛИ ПараметрыРеквизита.Свойство = "ВидимостьЭлемента") И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Истина)
		И (НЕ ЭтоБулево И ЗначениеЗаполнено(Объект[ПараметрыРеквизита.ИмяРеквизита]) 
			ИЛИ ЭтоБулево И Объект[ПараметрыРеквизита.ИмяРеквизита] = Истина) Тогда
		
		Действие = "Очистить";
	ИначеЕсли ((ПараметрыРеквизита.Свойство = "Видимость" ИЛИ ПараметрыРеквизита.Свойство = "ВидимостьЭлемента") И ПараметрыРеквизита.Значение = Истина
				ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Ложь)
			И (НЕ ЭтоБулево И НЕ ЗначениеЗаполнено(Объект[ПараметрыРеквизита.ИмяРеквизита])
				ИЛИ ЭтоБулево И Объект[ПараметрыРеквизита.ИмяРеквизита] = Ложь) Тогда
			
		Действие = "Заполнить";
	КонецЕсли;

	Возврат Действие;
	
КонецФункции
 
#КонецОбласти

#Область ОпределениеСвойствЗависимыхРеквизитовОбъекта

Функция ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_ОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ПараметрыВводаОстатковОС = ПараметрыВводаОстатковОС(Объект, ВспомогательныеРеквизиты);
	
	ПоНаработкеУУ = (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции"));
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") Тогда
		СтруктураИзмененныхРеквизитов.Вставить("ДоступныПараметрыУчета");
	КонецЕсли;
	
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаУУ", 
			"ПорядокУчетаУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПринятияКУчетуУУ", 
			"ДатаПринятияКУчетуУУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
				
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете 
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МОЛ", 
			"МОЛ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АдресМестонахождения", 
			"АдресМестонахождения", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Стоимость
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьБУ", 
			"ТекущаяСтоимостьБУ", 
			"Видимость", 
			ВспомогательныеРеквизиты.ОтражатьВРеглУчете, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВРеглУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьБУ", 
			"ПервоначальнаяСтоимостьБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьУУ", 
			"ТекущаяСтоимостьУУ", 
			"Видимость", 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.АмортизацияУУДоступна
			ИЛИ НЕ ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
				И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"НакопленнаяАмортизацияУУ", 
			"НакопленнаяАмортизацияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.АмортизацияБУДоступна 
				ИЛИ ПараметрыВводаОстатковОС.АмортизацияУУДоступна
					И ВспомогательныеРеквизиты.ОтражатьВРеглУчете
					И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
					И ВспомогательныеРеквизиты.ОтражатьВРеглУчете;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"НакопленнаяАмортизацияБУ", 
			"НакопленнаяАмортизацияБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьОтличается", 
			"ПервоначальнаяСтоимостьОтличается", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьОтличается")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = НЕ Объект.ПервоначальнаяСтоимостьОтличается;
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьБУ", 
			"ПервоначальнаяСтоимостьБУ", 
			"ТолькоПросмотрБезОтметкиНезаполненногоБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненногоБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область События
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЕстьИзменениеПараметровАмортизацииУУ", 
			"ЕстьИзменениеПараметровАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаИзмененияПараметровУУ", 
			"ДатаИзмененияПараметровУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЕстьИзменениеПараметровАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			Объект.ЕстьИзменениеПараметровАмортизацииУУ 
			И ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ВспомогательныеРеквизиты.ПорядокУчетаВНАВУпрУчете = ПредопределенноеЗначение("Перечисление.ПорядокУчетаВНАВУпрУчете.ПоСтандартамРегл")
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"СтоимостьДляВычисленияАмортизацииУУ", 
			"СтоимостьДляВычисленияАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("ЕстьИзменениеПараметровАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = НЕ Объект.ЕстьИзменениеПараметровАмортизацииУУ;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаИзмененияПараметровУУ", 
			"ДатаИзмененияПараметровУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЕстьРезервПереоценки", 
			"ЕстьРезервПереоценки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"РезервПереоценкиАмортизации", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"РезервПереоценкиСтоимости", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.Дата < ВспомогательныеРеквизиты.ДатаНачалаУчета);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументВводаВЭксплуатациюУУ", 
			"ДокументВводаВЭксплуатациюУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Амортизация
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЕстьИзменениеПараметровАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ 
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И Объект.ЕстьИзменениеПараметровАмортизацииУУ 
			И НЕ ПоНаработкеУУ;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУОстаточный", 
			"СрокИспользованияУУОстаточный", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ 
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И Объект.ЕстьИзменениеПараметровАмортизацииУУ 
			И ПоНаработкеУУ
			И ВспомогательныеРеквизиты.ПорядокУчетаВНАВУпрУчете = ПредопределенноеЗначение("Перечисление.ПорядокУчетаВНАВУпрУчете.ПоСтандартамРегл");
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработкиОстаточныйУУ", 
			"ОбъемНаработкиОстаточныйУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный")
					ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка"));
							
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУ", 
			"НачислятьАмортизациюУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка");
							
		ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ПоНаработке
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПоказательНаработки", 
			"ПоказательНаработки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступноОтражениеРасходовУУ
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ВводОстатковВнеоборотныхАктивовКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_ОС(
		Объект, ВспомогательныеРеквизиты, ПараметрыВводаОстатковОС, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_НМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ПараметрыВводаОстатковНМА = ПараметрыПринятияКУчетуНМА(Объект, ВспомогательныеРеквизиты);
	ПараметрыВводаОстатковНМА.Вставить("ДоступныПараметрыУчета", ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
	
	АмортизацияУУДоступна = 
		ВспомогательныеРеквизиты.ОтражатьВУпрУчете
		И (Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.ПустаяСсылка"));
			
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") Тогда
		СтруктураИзмененныхРеквизитов.Вставить("ДоступныПараметрыУчета");
	КонецЕсли;
			
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПриобретения", 
			"ДатаПриобретения", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПринятияКУчетуУУ", 
			"ДатаПринятияКУчетуУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаУУ", 
			"ПорядокУчетаУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
			
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете 
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета
			И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	#КонецОбласти
									
	#Область Стоимость
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьБУ", 
			"ТекущаяСтоимостьБУ", 
			"Видимость", 
			ВспомогательныеРеквизиты.ОтражатьВРеглУчете, 
			ПараметрыРеквизитовОбъекта);
			
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВРеглУчете
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьБУ", 
			"ПервоначальнаяСтоимостьБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьУУ", 
			"ТекущаяСтоимостьУУ", 
			"Видимость", 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
			
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ВидОбъектаУчета <> ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР")
				И АмортизацияУУДоступна
			ИЛИ НЕ ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета
				И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"НакопленнаяАмортизацияУУ", 
			"НакопленнаяАмортизацияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьОтличается")
		ИЛИ ОбновитьВсе Тогда
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ПервоначальнаяСтоимостьОтличается, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьУУ", 
			"ТекущаяСтоимостьУУ", 
			"АвтоОтметкаНезаполненного", 
			НЕ Объект.ПервоначальнаяСтоимостьОтличается, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьБУ", 
			"ПервоначальнаяСтоимостьБУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ПервоначальнаяСтоимостьОтличается, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьБУ", 
			"ТекущаяСтоимостьБУ", 
			"АвтоОтметкаНезаполненного", 
			НЕ Объект.ПервоначальнаяСтоимостьОтличается И НЕ Объект.ПрименениеЦелевогоФинансирования, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьОтличается", 
			"ПервоначальнаяСтоимостьОтличается", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область События
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ВидОбъектаУчета <> ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР")
							И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
	
		ДобавитьПараметрыРеквизитаОбъекта(
			"ЕстьРезервПереоценки", 
			"ЕстьРезервПереоценки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"РезервПереоценкиАмортизации", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"РезервПереоценкиСтоимости", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.Дата < ВспомогательныеРеквизиты.ДатаНачалаУчета);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументПринятияКУчетуУУ", 
			"ДокументПринятияКУчетуУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Амортизация
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковНМА.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковНМА.ДоступныПараметрыАмортизацииУУ
							И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный")
								ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"));
							
		ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка")
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
							
		ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	// НАРАБОТКА
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковНМА.ПоНаработке
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеДоходовИРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			ПараметрыВводаОстатковНМА.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;
	
	#КонецОбласти
	
	ВводОстатковВнеоборотныхАктивовКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_НМА(
		Объект, ВспомогательныеРеквизиты, ПараметрыВводаОстатковНМА, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыПринятияКУчетуОСИВводаОстатков(Объект, ВспомогательныеРеквизиты)

	//
	ДоступныПараметрыАмортизацииУУ = (Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
										ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена")
										ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.ПустаяСсылка"))
									И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
	//		
	ДоступноОтражениеРасходовУУ = 
		ВспомогательныеРеквизиты.ОтражатьВУпрУчете
		И (Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету"));
			
	//
	АмортизацияУУДоступна = (Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
								ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету"))
							И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
							
	//		
	АмортизацияБУДоступна = Ложь;
	
	//
	ПоНаработке = (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции"));
	
	ПараметрыПринятияКУчетуОС = Новый Структура;
	ПараметрыПринятияКУчетуОС.Вставить("ДоступныПараметрыАмортизацииУУ", ДоступныПараметрыАмортизацииУУ);
	ПараметрыПринятияКУчетуОС.Вставить("ДоступноОтражениеРасходовУУ",    ДоступноОтражениеРасходовУУ);
	ПараметрыПринятияКУчетуОС.Вставить("АмортизацияУУДоступна",          АмортизацияУУДоступна);
	ПараметрыПринятияКУчетуОС.Вставить("АмортизацияБУДоступна",          АмортизацияБУДоступна);
	ПараметрыПринятияКУчетуОС.Вставить("ПоНаработке",                    ПоНаработке);

	ПринятиеКУчетуОСКлиентСерверЛокализация.ДополнитьПараметрыПринятияКУчетуОС(Объект, ВспомогательныеРеквизиты, ПараметрыПринятияКУчетуОС);
	
	Возврат ПараметрыПринятияКУчетуОС;

КонецФункции

#КонецОбласти

#КонецОбласти
