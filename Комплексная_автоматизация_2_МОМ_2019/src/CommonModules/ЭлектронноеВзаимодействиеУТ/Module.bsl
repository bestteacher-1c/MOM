
#Область ПрограммныйИнтерфейс

// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - Ссылка - ссылка на элемент справочника, по которому надо получить данные.
//
// Возвращаемое значение:
//  Структура - данные юридического (физического лица).
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, Знач БанковскийСчет = Неопределено, ДатаСведений = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		ДанныеЮрФизЛица = Справочники.РегистрацииВНалоговомОргане.СведенияОПодразделении(ЮрФизЛицо, ДатаСведений);
		ДанныеЮрФизЛица.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);		
		ДанныеЮрФизЛица.Вставить("Телефоны", "");		
	Иначе
		ДанныеЮрФизЛица = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ЮрФизЛицо, ДатаСведений,, БанковскийСчет);
		Если Не ДанныеЮрФизЛица.Свойство("СтранаРегистрации") Тогда
			ДанныеЮрФизЛица.Вставить("СтранаРегистрации", Справочники.СтраныМира.Россия);
		КонецЕсли;
	КонецЕсли;
	Если Не ДанныеЮрФизЛица.Свойство("Наименование") Тогда
		ДанныеЮрФизЛица.Вставить("Наименование", ДанныеЮрФизЛица.ПолноеНаименование);
	КонецЕсли;
	ДанныеЮрФизЛица.Вставить("Ссылка", ЮрФизЛицо);
	
	Если ДанныеЮрФизЛица.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицо 
		И ДанныеЮрФизЛица.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		ПолноеНаименование = ДанныеЮрФизЛица.ОфициальноеНаименование;
		Если ВРЕГ(Лев(ПолноеНаименование,2))="ИП" Тогда
			ПолноеНаименование = Прав(ПолноеНаименование, СтрДлина(ПолноеНаименование)-2);
		ИначеЕсли ВРЕГ(Лев(ПолноеНаименование, СтрДлина("Индивидуальный предприниматель")))="ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ" Тогда
			ПолноеНаименование = Прав(ПолноеНаименование, СтрДлина(ПолноеНаименование)-СтрДлина("Индивидуальный предприниматель"));
		КонецЕсли;
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолноеНаименование);
		
		ДанныеЮрФизЛица.Вставить("Фамилия", ФИО.Фамилия);
		ДанныеЮрФизЛица.Вставить("Имя", ФИО.Имя);
		ДанныеЮрФизЛица.Вставить("Отчество", ФИО.Отчество);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеЮрФизЛица;
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита) // нестандартный реквизит
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита)<> Неопределено Тогда // другой реквизит
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник."+ИмяРеквизита+" = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", 	Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСсылкуНаНоменклатуруПоИдентификаторуНоменклатурыПоставщика(Идентификатор) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпрНоменклатура.Номенклатура КАК Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	               |ГДЕ
	               |	СпрНоменклатура.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоговорКонтрагентаПоРеквизитам(РеквизитыДоговора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Номер = &НомерДоговора
	|	И ДоговорыКонтрагентов.Дата = &ДатаДоговора
	|	И ДоговорыКонтрагентов.Контрагент = &Владелец";
	Запрос.УстановитьПараметр("НомерДоговора", РеквизитыДоговора.НомерДоговора);
	Запрос.УстановитьПараметр("ДатаДоговора", РеквизитыДоговора.ДатаДоговора);
	Запрос.УстановитьПараметр("Владелец", РеквизитыДоговора.Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Договор;
	
КонецФункции

Процедура УдалитьДокументыНеподходящиеДляФормированияЭД(МассивДокументов, МассивДокументовДляУдаления, ШаблонСообщения) Экспорт
	
	Для Каждого Документ Из МассивДокументовДляУдаления Цикл
		Найденный = МассивДокументов.Найти(Документ);
		Если Найденный <> Неопределено Тогда
			МассивДокументов.Удалить(Найденный);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(Документ)), 
				Документ);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Функция НайтиСсылкуНаНоменклатуруПоНоменклатуреПоставщика(НоменклатураПоставщика) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Номенклатура Как Ссылка
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &НоменклатураПоставщика";
	
	Запрос.УстановитьПараметр("НоменклатураПоставщика", НоменклатураПоставщика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", ДатаКИ = Неопределено) Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		Или СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		 
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
	
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН", СведенияОбУчастнике.ИНН);
			
		Если ЗначениеЗаполнено(СведенияОбУчастнике.ПолноеНаименование)
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование);
		КонецЕсли;
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия", СведенияОбУчастнике.Фамилия);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя", СведенияОбУчастнике.Имя);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество", СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура();
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", ВидАдреса);
	
	Если АдресУчастника.Свойство("АдресРФ") Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			Если АдресУчастника.ПроизвольныйАдрес Тогда
				ТипАдреса = "Произвольный";
			Иначе
				ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");				
			КонецЕсли;			
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Контакт.Телефон",
									СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) 
		 И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскийСчет.НомерСчета", НомерСчета);
		
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.НаимБанк", БанкНаименование);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.БИК", БИК);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) 
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаТОРГ(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", ДатаКИ = Неопределено) Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		 
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
			
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.Страна", СведенияОбУчастнике.СтранаРегистрации.НаименованиеПолное);
			
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН", СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации", СведенияОбУчастнике.Свидетельство);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия", СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя", СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество", СведенияОбУчастнике.Отчество);
			
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН", СведенияОбУчастнике.ИНН);
		Если ЗначениеЗаполнено(СведенияОбУчастнике.ПолноеНаименование)
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование);
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия", СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя", СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество", СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура();
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", ВидАдреса);
	
	Если АдресУчастника.Свойство("АдресРФ") Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			Если АдресУчастника.ПроизвольныйАдрес Тогда
				ТипАдреса = "Произвольный";
			Иначе
				ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");				
			КонецЕсли;			
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Контакт.Телефон",
									СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) 
		 И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскийСчет.НомерСчета", НомерСчета);
		
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.НаимБанк", БанкНаименование);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.БИК", БИК);
		КонецЕсли;
		
		КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет)
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет.КорСчет") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.КорСчет", КоррСчет);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) 
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктурноеПодразделение(ДеревоДанных, ВидУчастника, Подразделение) Экспорт
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".СтруктурноеПодразделение", Подразделение.Наименование);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе // Передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		
		Если ИмяРеквизита = "СтавкаНДС" ИЛИ ИмяРеквизита = "НалСтВел" Тогда
			Результат = НайтиПеречисление("НДС", Результат);
		ИначеЕсли ИмяРеквизита = "ВариантОплаты" Тогда
			Если Результат = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения
			ИначеЕсли Результат = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления 
			ИначеЕсли Результат = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления
			ИначеЕсли Результат = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки
			ИначеЕсли Результат = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения
			ИначеЕсли Результат = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки
			КонецЕсли
		Иначе
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора), тогда нашли всего лишь индекс строки
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдресИзКонтактнойИнформации(Владелец, ТипАдреса = "Юр", ДатаКИ = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидыКИ = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресОрганизации"].Ссылка;
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидыКИ = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресКонтрагента"].Ссылка;
	Иначе
		ВидыКИ = Неопределено;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Владелец);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, , ВидыКИ, ДатаКИ);
	
	Для Каждого Колонка Из КонтактнаяИнформация.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, КонтактнаяИнформация[0]);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТелефонИзКонтактнойИнформации(Владелец) Экспорт
	
	Результат = ФормированиеПечатныхФорм.ПолучитьТелефонИзКонтактнойИнформации(Владелец);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдресЭПИзКонтактнойИнформации(Владелец) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресЭП
	|ИЗ
	|	Справочник.%ИмяСправочника%.КонтактнаяИнформация КАК КонтактнаяИнформация 
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидEmail";
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailОрганизации"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Организации");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailКонтрагента"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Контрагенты");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailПартнера"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Партнеры");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Тип",      Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидEmail", ВидEmail);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.АдресЭП;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает таблицу с ключевыми реквизитами объекта.
// 
// Параметры:
//  ИмяОбъекта - Строка - имя объекта конфигурации, ключевые реквизиты которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица ключевых реквизитов.
//
Функция КлючевыеРеквизитыОбъекта(ИмяОбъекта) Экспорт
	
	ТаблицаРеквизитов = ИнициализацияТаблицыРеквизитовОбъектов();
	
	Если ИмяОбъекта = "Документ.ПакетЭД" Тогда
		Возврат ТаблицаРеквизитов;
	КонецЕсли;
	
	СтруктураКлючевыхРеквизитов = Новый Структура;
	ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов);

	Если НЕ ЗначениеЗаполнено(СтруктураКлючевыхРеквизитов) Тогда
		ШаблонСообщения = НСтр("ru = 'Не определена структура ключевых реквизитов для объекта %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяОбъекта);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ТекПорядок = -50;
	Для Каждого ТекЭлемент Из СтруктураКлючевыхРеквизитов Цикл
		НовСтрока                            = ТаблицаРеквизитов.Добавить();
		НовСтрока.Порядок                    = ТекПорядок;
		НовСтрока.ИмяОбъекта                 = ИмяОбъекта;
		НовСтрока.ИмяТабличнойЧасти          = ?(ТекЭлемент.Ключ = "Шапка", "", ТекЭлемент.Ключ);
		НовСтрока.РеквизитыОбъекта           = ТекЭлемент.Значение;
		НовСтрока.СтруктураРеквизитовОбъекта = Новый Структура(ТекЭлемент.Значение);
		ТекПорядок = ТекПорядок + 100;
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Порядок Возр");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации) Экспорт
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииШапкиДоИзменения(Объект,
			СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииШапкиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	Иначе
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииТабличнойЧастиДоИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииТабличнойЧастиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	КонецЕсли;
	
	Возврат НЕ ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения,
												   ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения,
												   СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
КонецФункции

Функция ПодлежитОбменуЭД(Объект) Экспорт
	
	ПодлежитОбменуЭД = Истина;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств")
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ПодлежитОбменуЭД = Не Объект.ПроведеноБанком;
	КонецЕсли;
	
	Возврат ПодлежитОбменуЭД;
	
КонецФункции

Функция ЗаполнитьСопоставлениеНоменклатуры(Строка, ШтрихкодыКомбинаций = Неопределено, ШтрихкодыНоменклатуры = Неопределено, Упаковка = Неопределено, СоответствиеСтавокНДСКонтрагента = Неопределено) Экспорт
	
	Таблица = Строка.Владелец();
	Сопоставление = Новый Структура;
	Сопоставление.Вставить("НоменклатураИБ", 		Строка.Номенклатура);
	Сопоставление.Вставить("ХарактеристикаИБ", 		Строка.Характеристика);
	Если Упаковка <> Неопределено Тогда
		ЗначениеУпаковки = Упаковка
	Иначе
		ЗначениеУпаковки = Строка.Упаковка 		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗначениеУпаковки) И СоответствиеСтавокНДСКонтрагента = Неопределено Тогда
		ЗначениеУпаковки = Строка.ЕдиницаИзмерения
	КонецЕсли;
	Сопоставление.Вставить("УпаковкаИБ", 			ЗначениеУпаковки);
	
	Если Таблица.Колонки.Найти("Идентификатор") <> Неопределено Тогда
		Сопоставление.Вставить("Идентификатор", 		Строка.Идентификатор);
	Иначе
		Сопоставление.Вставить("Идентификатор", 		"");
	КонецЕсли;	
	
	Если Таблица.Колонки.Найти("ЕдиницаИзмеренияНаименование") <> Неопределено Тогда
		Сопоставление.Вставить("ЕдиницаИзмерения", 		Строка.ЕдиницаИзмеренияНаименование);
	Иначе
		Сопоставление.Вставить("ЕдиницаИзмерения", 		"");
	КонецЕсли;
		
	Если Таблица.Колонки.Найти("ЕдиницаИзмеренияКод") <> Неопределено Тогда
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", 	Строка.ЕдиницаИзмеренияКод);
	ИначеЕсли Таблица.Колонки.Найти("ЕдиницаИзмеренияКодПоОКЕИ") <> Неопределено Тогда
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", 	Строка.ЕдиницаИзмеренияКодПоОКЕИ);
	Иначе
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", 		"");
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("ХарактеристикаНаименование") <> Неопределено Тогда
		Сопоставление.Вставить("Характеристика", 		Строка.ХарактеристикаНаименование);
	ИначеЕсли Таблица.Колонки.Найти("ХарактеристикаНаименованиеПолное") <> Неопределено Тогда
		Сопоставление.Вставить("Характеристика", 		Строка.ХарактеристикаНаименованиеПолное);		
	ИначеЕсли Таблица.Колонки.Найти("НаименованиеХарактеристики") <> Неопределено Тогда
		Сопоставление.Вставить("Характеристика", 		Строка.НаименованиеХарактеристики);
	Иначе
		Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
			Сопоставление.Вставить("Характеристика", 		Строка.Характеристика.Наименование);
		Иначе
			Сопоставление.Вставить("Характеристика", 		"");
		КонецЕсли;	
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("НоменклатураНаименование") <> Неопределено Тогда
		Сопоставление.Вставить("Наименование", 			Строка.НоменклатураНаименование);
	ИначеЕсли Таблица.Колонки.Найти("УслугаНаименованиеПолное") <> Неопределено Тогда
		Сопоставление.Вставить("Наименование", 			Строка.УслугаНаименованиеПолное);		
	Иначе
		Сопоставление.Вставить("Наименование", 			Строка.Наименование);
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("НоменклатураКод") <> Неопределено Тогда
		Сопоставление.Вставить("Артикул", 			Строка.НоменклатураКод);
	ИначеЕсли Таблица.Колонки.Найти("Артикул") <> Неопределено Тогда
		Сопоставление.Вставить("Артикул", 			Строка.Артикул);
	Иначе
		Сопоставление.Вставить("Артикул", 			"");		
	КонецЕсли;
	
	Если Сопоставление.Идентификатор <> "" И Сопоставление.Идентификатор <> NULL Тогда
		Сопоставление.Вставить("СтавкаНДС", СоответствиеСтавокНДСКонтрагента.Получить(Строка.СтавкаНДС));
		Сопоставление.Вставить("ШтрихкодыНоменклатуры", Строка.ШтрихкодыНоменклатуры);
		Сопоставление.Вставить("ШтрихкодКомбинации",    Строка.ШтрихкодКомбинации);		
	Иначе
		Сопоставление.Вставить("СтавкаНДС", Строка.СтавкаНДС);
		ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление, ШтрихкодыНоменклатуры, ШтрихкодыКомбинаций,
				Строка.Номенклатура, Строка.Характеристика, ЗначениеУпаковки);
	КонецЕсли;
	
	Возврат Сопоставление
	
КонецФункции

// Обработчик события "ОбработкаЗаполнения" электронных документов.
// 
// Параметры:
//  Источник		 		- Объект 	   - Электронный документ;
//	ДанныеЗаполнения 		- Произвольный - Значение, которое используется как основание для заполнения;
//  СтандартнаяОбработка    - Булево       - Признак выполнения стандартной (системной) обработки события.
//
Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчетеОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт

	ОбщегоНазначенияУТ.ОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

Функция НайтиСоздатьПриобретениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументПриобретенияТоваровУслуг(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьВозвратТоваровОтПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументВозвратаТоваровОтПокупателя(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументСчетФактура(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;

КонецФункции

Функция НайтиСоздатьСчетФактуруАванс(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора, Истина);
	ДанныеШапки = ДанныеДляЗагрузки.Шапка;
	Авансы = ДанныеДляЗагрузки.Авансы;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(истина);
		ДокументОбъект = Документы.СчетФактураПолученныйАванс.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
		ДокументОбъект.Заполнить(ДанныеШапки);
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	ДокументОбъект.НомерВходящегоДокумента = ДанныеШапки.Номер;
	ДокументОбъект.ДатаВходящегоДокумента = ДанныеШапки.Дата;
	
	ДокументОбъект.Авансы.Загрузить(Авансы);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(ВозвращаемоеЗначение, ДополнительныеСвойства, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьСчетФактуруКомитента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	ДанныеШапки = ДанныеДляЗагрузки.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(истина);
		ДокументОбъект = Документы.СчетФактураКомитента.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеШапки);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеШапки);
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	// Заполним ТЧ Покупатели
	Если ДанныеШапки.Свойство("Покупатель") Тогда
		ДокументОбъект.Покупатели.Очистить();
		НоваяСтрока = ДокументОбъект.Покупатели.Добавить();
		НоваяСтрока.Покупатель = ДанныеШапки.Покупатель;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьПоступлениеУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументПоступленияУслуг(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьЗаявкуНаРасходованиеДенежныхСредств(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств") Тогда
		Текст = НСтр("ru = 'Для создания документа ""Заявка на расходование денежных средств"" необходимо включить функциональную опцию ""Использовать заявки на расходование денежных средств""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);		
		Возврат Неопределено		
	КонецЕсли;
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаявкиНаРасходование(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
	Иначе  // создаем новый
		ДокументОбъект = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.Свойство("СрокПлатежа") Тогда 
		ДокументОбъект.ЖелательнаяДатаПлатежа = ДанныеЗаполнения.СрокПлатежа;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НомерДокументаОснования") 
	   И ДанныеЗаполнения.Свойство("ДатаДокументаОснования") 
	   И ЗначениеЗаполнено(ДанныеЗаполнения.НомерДокументаОснования)
	   И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаДокументаОснования) Тогда
	   	РеквизитыИБ = Новый Структура;
		РеквизитыИБ.Вставить("Номер", 	ДанныеЗаполнения.НомерДокументаОснования);
		Если ТипЗнч(ДанныеЗаполнения.ДатаДокументаОснования) = Тип("Строка") Тогда
        	РеквизитыИБ.Вставить("Дата", 	ПолучитьДатуВремяИзСтроки(ДанныеЗаполнения.ДатаДокументаОснования));
		Иначе
        	РеквизитыИБ.Вставить("Дата", 	ДанныеЗаполнения.ДатаДокументаОснования);
		КонецЕсли;	
		НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ);
		Если ЗначениеЗаполнено(НайденныйДок) Тогда
			ДокументОбъект.ДокументОснование = НайденныйДок;
		КонецЕсли;	
	КонецЕсли;   
	 	
	ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ДанныеЗаполнения.Сумма;
	
	// табл.часть расшифровка
	НовСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	НовСтрока.ВалютаВзаиморасчетов 	= ДокументОбъект.Валюта;
	НовСтрока.Сумма 				= ДокументОбъект.СуммаДокумента;
	НовСтрока.СуммаВзаиморасчетов 	= ДокументОбъект.СуммаДокумента;
	Если ДанныеЗаполнения.Свойство("СуммаНалогаИтог") Тогда
		НовСтрока.СуммаНДС			= ДанныеЗаполнения.СуммаНалогаИтог;
	КонецЕсли;
	
    Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		НовСтрока.Партнер = ДанныеЗаполнения.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(НайденныйДок) Тогда
		НовСтрока.Заказ = НайденныйДок;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьРегистрацияЦен(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляРегистрацииЦен(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказКлиента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";   
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаКлиента(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
			
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымКлиента", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымКлиента", ДанныеЗаполнения.ДатаПоДаннымКлиента);
			КонецЕсли;
				РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ЗаказТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если Записывать И ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ДокументОбъект.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		Если ДанныеЗаполнения.Свойство("ДополнительнаяИнформация") Тогда
			ДанныеЗаполнения.Вставить("ДопИнф", ДанныеЗаполнения.ДополнительнаяИнформация);
			ДанныеЗаполнения.Удалить("ДополнительнаяИнформация");
		КонецЕсли;
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("ДопИнф") Тогда
			ДокументОбъект.ДополнительнаяИнформация = ДанныеЗаполнения.ДопИнф;
		КонецЕсли;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
		
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// заполнение способа доставки
	Если ДанныеЗаполнения.Свойство("СпособДоставки") Тогда
	     СпособДоставки = ДанныеЗаполнения.СпособДоставки;
	     Если СпособДоставки = "Доставка" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
	     ИначеЕсли СпособДоставки = "Самовывоз" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	     КонецЕсли;
	КонецЕсли;
	
	// заполнение договора
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) И ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
		Если ДокументОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// сумма документа
	Если ДанныеДляЗагрузки.Шапка.Свойство("Сумма") Тогда
		ДокументОбъект.СуммаДокумента = ДанныеДляЗагрузки.Шапка.Сумма;
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Товары.Итог("СуммаСНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДанныеДляЗагрузки.Товары.Итог("СуммаНДС") = 0 Тогда 
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(ВозвращаемоеЗначение, ДополнительныеСвойства, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если Записывать И ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ДокументОбъект.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// заполнение реквизита ЗакупкаПодДеятельность
	ПараметрыЗаполнения = Документы.ЗаказПоставщику.ПараметрыЗаполненияВидаДеятельностиНДС(ДокументОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокументОбъект.ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// заполнение способа доставки
	Если ДанныеЗаполнения.Свойство("СпособДоставки") Тогда
	     СпособДоставки = ДанныеЗаполнения.СпособДоставки;
	     Если СпособДоставки = "Доставка" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	     ИначеЕсли СпособДоставки = "Самовывоз" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя;
	     КонецЕсли;
	КонецЕсли;
	
	// заполнение договора
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) И ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
		Если ДокументОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Партнер) Тогда
			ЗакупкиСервер.ЗаполнитьНоменклатуруПоставщикаВТаблице(ДокументОбъект.Товары, ДанныеЗаполнения.Партнер);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Товары.Итог("СуммаСНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДанныеДляЗагрузки.Товары.Итог("СуммаНДС") = 0 Тогда 
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(ВозвращаемоеЗначение, ДополнительныеСвойства, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ОтчетКомиссионера.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Для Каждого Строка ИЗ ДокументОбъект.Товары Цикл
		Строка.Сумма = Строка.СуммаСНДС - Строка.СуммаНДС;
	КонецЦикла;	
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ОтчетКомиссионераОСписании.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Процедура ЗаполнитьДокументПриобретенияТоваровУслуг(Документ, ДанныеДляЗагрузки, Записывать) Экспорт
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	РеквизитыИБКонтрагента = Новый Структура;
	
	// попробуем найти заказ поставщику
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение партнера, если контрагент создается новый.
	ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "Партнер"); 
	Если Не ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(ПартнерКонтрагента) Тогда
		ДокументОбъект.Партнер = ПартнерКонтрагента;
	КонецЕсли;
	
	ДокументОбъект.ЗаказПоставщику = НайденныйДок;
	
	Если ЗначениеЗаполнено(НайденныйДок) Тогда
		ДокументОбъект.ПоступлениеПоЗаказам = Истина;
	КонецЕсли;

	// заполнение реквизита ЗакупкаПодДеятельность
	ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияВидаДеятельностиНДС(ДокументОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокументОбъект.ЗакупкаПодДеятельность, ПараметрыЗаполнения);

	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ЕстьЗаказВТЧ = Ложь;
	Для Каждого Строка Из ДанныеДляЗагрузки.Товары Цикл
		РеквизитыИБ = Новый Структура;
		Если ЗначениеЗаполнено(Строка.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", Строка.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", Строка.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			Строка.ЗаказПоставщику = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДокументОбъект.Контрагент, РеквизитыИБ);
			ЕстьЗаказВТЧ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ЗначениеЗаполнено(ДокументОбъект.Партнер) Тогда
		ЗакупкиСервер.ЗаполнитьНоменклатуруПоставщикаВТаблице(ДокументОбъект.Товары, ДокументОбъект.Партнер);
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Свойство("ШтрихкодыУпаковок") Тогда 
		ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ДанныеДляЗагрузки.ШтрихкодыУпаковок);
	КонецЕсли;
	
	Отказ = Ложь;
	
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(ДокументОбъект.Товары, Отказ);
	
	Если ЕстьЗаказВТЧ Тогда
		ДанныеДляЗагрузки.Товары.Свернуть("ЗаказПоставщику");
		Если ДанныеДляЗагрузки.Товары.Количество()>1 Тогда
			ДокументОбъект.ПоступлениеПоЗаказам=Истина;
			ДанныеПривязки = ПолучитьДанныеПривязкиСтрокЗаказов(ДокументОбъект.Товары.Выгрузить(,"Номенклатура, Количество, ЗаказПоставщику"));
			индекс = 0;
			Для Каждого Строка ИЗ ДанныеПривязки Цикл
				ДокСтрокаТовары = документОбъект.Товары.Получить(Индекс);
				ЗаполнитьЗначенияСвойств(ДокСтрокаТовары, Строка);
				Если НЕ ЗначениеЗаполнено(ДокСтрокаТовары.КодСтроки) ИЛИ ДокСтрокаТовары.КодСтроки = 0 Тогда
					ДокСтрокаТовары.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
				КонецЕсли;
				Индекс = индекс + 1;
			КонецЦикла
		ИначеЕсли ДанныеДляЗагрузки.Товары.Количество()=1 Тогда
			ДокументОбъект.ЗаказПоставщику = ДанныеДляЗагрузки.Товары[0].ЗаказПоставщику;
		КонецЕсли
	КонецЕсли;
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	Если ДанныеЗаполнения.Свойство("Сумма") И ДанныеЗаполнения.Сумма = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДокументОбъект.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	// пересчет цен и сумм в зависимости от включения НДС в цену
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда 		
		СтруктураДействий.Вставить("ПересчитатьЦенуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
		
		// Проверка заполнения партнера в номенклатуре поставщика 
		Если ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(Строка.НоменклатураПоставщика)
			И НЕ ЗначениеЗаполнено(Строка.НоменклатураПоставщика.Владелец) Тогда
				НоменклатураПоставщикаОбъект = Строка.НоменклатураПоставщика.ПолучитьОбъект();
				Попытка 
					НоменклатураПоставщикаОбъект.Заблокировать();
				Исключение
					ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные номенклатуры поставщика ""%1"".
					|Возможно, номенклатура поставщика редактируется другим пользователем'"),
					НоменклатураПоставщикаОбъект.Наименование);			
					ВызватьИсключение ТекстИсключенияЗаписи;
				КонецПопытки;
				НоменклатураПоставщикаОбъект.Владелец = ДокументОбъект.Партнер;
				НоменклатураПоставщикаОбъект.Записать();
				НоменклатураПоставщикаОбъект.Разблокировать();
		КонецЕсли;		
	КонецЦикла;

	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Документ, ДополнительныеСвойства, Отказ);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияУслуг(Документ, ДанныеДляЗагрузки, Записывать) Экспорт
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПриобретениеУслугПрочихАктивов.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// попробуем найти заказ поставщику
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		РеквизитыИБКонтрагента = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
		КонецЕсли;
	КонецЕсли;
	Если Значениезаполнено(НайденныйДок) ТОгда
		ДокументОбъект.ЗаказПоставщику = НайденныйДок;
	КонецЕсли;

	// заполнение реквизита ЗакупкаПодДеятельность
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыЗаполненияВидаДеятельностиНДС(ДокументОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокументОбъект.ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Расходы.Загрузить(ДанныеДляЗагрузки.Расходы);
	
	Если ДокументОбъект.Расходы.Итог("СуммаНДС") > 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Конецесли;
	ДокументОбъект.ЦенаВключаетНДС = Ложь;
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Расходы, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Документ, ДополнительныеСвойства, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументСчетФактура(Документ, ДанныеДляЗагрузки, Записывать) Экспорт
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеШапки = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(истина);
		Если ДанныеШапки.КодВидаОперации = "02" Тогда
			ДокументОбъект = Документы.СчетФактураПолученныйАванс.СоздатьДокумент();
		ИначеЕсли ДанныеШапки.Свойство("Сумма") И ДанныеШапки.Сумма = 0 Тогда
			ДокументОбъект = Документы.СчетФактураПолученныйНалоговыйАгент.СоздатьДокумент();
			ДанныеШапки.КодВидаОперации = "42";
		Иначе
			ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Заполнить(ДанныеШапки);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеШапки);
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	Если Не ДанныеШапки.КодВидаОперации = "02" Тогда
		// Дополнительно заполним суммы документа.
		// Если суммы по документу-основанию не найдены, то добавляем суммы к первой строке ТЧ.
		Если Не ДокументОбъект.ДокументыОснования.Количество() = 0 И ДанныеДляЗагрузки.Свойство("Суммы") Тогда
			Суммы = ДанныеДляЗагрузки.Суммы;
			Для Каждого СтрокаТЧ Из ДокументОбъект.ДокументыОснования Цикл
				СтрокаТЧ.Сумма = 0;
				СтрокаТЧ.СуммаНДС = 0;
				СтрокаТЧ.СуммаУвеличение = 0;
				СтрокаТЧ.СуммаУменьшение = 0;
				СтрокаТЧ.СуммаНДСУвеличение = 0;
				СтрокаТЧ.СуммаНДСУменьшение = 0;
			КонецЦикла;
			Для Каждого ТекущаяСтрока Из Суммы Цикл
				СтруктураПоиска = Новый Структура("ДокументОснование,ХозяйственнаяОперация,ИсходныйДокумент,СтавкаНДС");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
				
				НайденныеСтроки = ДокументОбъект.ДокументыОснования.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НужнаяСтрока = ДокументОбъект.ДокументыОснования[0];
				Иначе
					НужнаяСтрока = НайденныеСтроки[0];
				КонецЕсли;
				
				НужнаяСтрока.Сумма = НужнаяСтрока.Сумма + ТекущаяСтрока.Сумма;
				НужнаяСтрока.СуммаНДС = НужнаяСтрока.СуммаНДС + ТекущаяСтрока.СуммаНДС;
				Если ДокументОбъект.Корректировочный Тогда
					НужнаяСтрока.СуммаУвеличение = НужнаяСтрока.СуммаУвеличение + ТекущаяСтрока.СуммаУвеличение;
					НужнаяСтрока.СуммаУменьшение = НужнаяСтрока.СуммаУменьшение + ТекущаяСтрока.СуммаУменьшение;
					НужнаяСтрока.СуммаНДСУвеличение = НужнаяСтрока.СуммаНДСУвеличение + ТекущаяСтрока.СуммаНДСУвеличение;
					НужнаяСтрока.СуммаНДСУменьшение = НужнаяСтрока.СуммаНДСУменьшение + ТекущаяСтрока.СуммаНДСУменьшение;
				КонецЕсли;
			КонецЦикла;
			
			// Устанавливаем флаг ручной корректировки сумм документа,
			// чтобы не затерлись при перезаполнении из торгового документа.
			ДокументОбъект.РучнаяКорректировкаСуммДокумента = Истина;
		КонецЕсли;
	Иначе
		// Заполним ТЧ Авансы
		ДокументОбъект.Авансы.Загрузить(ДанныеДляЗагрузки.Авансы);
		Если ДанныеШапки.Свойство("Сумма") И ДанныеШапки.Сумма = 0 Тогда
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
			ДокументОбъект.КодВидаОперации = "41";
			Для Каждого СтрокаАванса Из ДокументОбъект.Авансы Цикл
				СтрокаАванса.СтавкаНДС = УчетНДСУП.СтавкаНДСПоУмолчанию(ДокументОбъект.Дата, Истина);
				ПроцентНДС = УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(СтрокаАванса.СтавкаНДС);
				СтрокаАванса.СуммаНДС = СтрокаАванса.Сумма * ПроцентНДС / (100 + ПроцентНДС);
			КонецЦикла;
			ДокументОбъект.Сумма = ДокументОбъект.Авансы.Итог("Сумма");
			ДокументОбъект.СуммаНДС = ДокументОбъект.Авансы.Итог("СуммаНДС");
			ДокументОбъект.ДатаОтраженияВРеглУчете = ДокументОбъект.ДатаСоставления;
		Иначе
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			ДокументОбъект.ДатаОтраженияВРеглУчете = ДокументОбъект.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Документ, ДополнительныеСвойства, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки, Записывать) Экспорт
	
	Текст = "";
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе // создаем новый
		ДокументОбъект = Документы.КорректировкаПриобретения.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Отказ = Ложь;
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(ДокументОбъект.Товары, Отказ);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// Склады в ТЧ
	Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование.Склад) И Не ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
			ДокументОбъект.Склад = ДанныеЗаполнения.ДокументОснование.Склад;
		КонецЕсли
	КонецЕсли;	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// Пересчет цен и сумм в зависимости от включения НДС в цену
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда 		
		СтруктураДействий.Вставить("ПересчитатьЦенуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	// Заполним расхождения
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
		ИспользуетсяДокументПоступлениеТоваров = Ложь;
		Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
			ВариантОформленияЗакупок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, "ВариантОформленияЗакупок");
			ИспользуетсяДокументПоступлениеТоваров = ВариантОформленияЗакупок <> Перечисления.ВариантыОформленияЗакупок.НеРазделять;
		КонецЕсли;
		Документы.КорректировкаПриобретения.ЗаполнитьРасхождения(ДокументОбъект, ИспользуетсяДокументПоступлениеТоваров);
	КонецЕсли;
	
	// Сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Документ, ДополнительныеСвойства, Отказ);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументВозвратаТоваровОтПокупателя(Документ, ДанныеДляЗагрузки, Записывать) Экспорт
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	РеквизитыИБКонтрагента = Новый Структура;
	
	// попробуем найти документ реализации
	НайденныйДок = Неопределено;
	Если ЗначениеЗаполнено(ДанныеЗаполнения.НомерДокументаОснования) Тогда
		НайденныйДок = НайтиРеализациюТоваровУслуг(ДанныеЗаполнения.Организация, ДанныеЗаполнения.НомерДокументаОснования, ДанныеЗаполнения.ДатаДокументаОснования);
	КонецЕсли;
	
	ДокументОбъект.ДокументРеализации = НайденныйДок;
	
	// Заполнение партнера, если контрагент создается новый.
	ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "Партнер"); 
	Если Не ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(ПартнерКонтрагента) Тогда
		ДокументОбъект.Партнер = ПартнерКонтрагента;
	КонецЕсли;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл
		Если ЗначениеЗаполнено(НайденныйДок) Тогда 
			Строка.ДокументРеализации = НайденныйДок;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументОбъект.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	// пересчет цен и сумм в зависимости от включения НДС в цену
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда 		
		СтруктураДействий.Вставить("ПересчитатьЦенуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	КонецЦикла;

	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Документ, ДополнительныеСвойства, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеТоваров(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("Курс", 1);
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "Поставщик";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2"" '"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "Плательщик";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
	
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		МассаНетто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КоличествоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
		НоваяСтрока.Количество = ?(ЗначениеЗаполнено(МассаНетто), МассаНетто, КоличествоМест);
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"ТаблицаТоваров.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
		ТипНоменклатуры = НоваяСтрока.Номенклатура.ТипНоменклатуры;
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			НоваяСтрока.СписатьНаРасходы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеРабот(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("Курс", 1);
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "Заказчик";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2"" '"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "Исполнитель";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
	
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаСНДС");
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"ТаблицаУслуг.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаУслуг.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаУслуг.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаУслуг.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслугПоПередачеРабот(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("Курс", 1);
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "Заказчик";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "Исполнитель";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		
		НаименованиеНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
		Если ЗначениеЗаполнено(НаименованиеНоменклатуры) Тогда
			НоваяСтрока.Содержание = НаименованиеНоменклатуры;
		Иначе
			НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Описание");
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

#Область ВспомогательныеМетоды_УПД_УКД

Процедура ЗаполнитьДанныеСчетаФактурыУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	Если Не ЗначениеЗаполнено(ДанныеШапки.Ссылка) Тогда
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ПодробныйТекстОшибки = ("ru = 'Ошибка при формирование ЭД. Ошибка в документе-основании.'");
		ТекстСообщения = НСтр("ru = 'Невозможно сформировать ЭД. Проверьте корректность заполнения данных в счете-фактуре и документе-основании.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		Отказ = Истина;
		Возврат
	КонецЕсли;	
	
	Если СтруктураДанных.Свойство("СчетФактураНаАванс") И СтруктураДанных.СчетФактураНаАванс Тогда
		ВидСчетаФактуры = "Авансовый";
	Иначе
		ВидСчетаФактуры = "Реализация";
	КонецЕсли;
	
	СчетФактура = ДанныеШапки.Ссылка;	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры",	СчетФактура);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);
	ДокументыОснования = Новый Массив;
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" или ВидСчетаФактуры = "Авансовый" Тогда
		ДокументыОснования.Добавить(СчетФактура.ДокументОснование);		
	Иначе
		Для Каждого СтрокаТЧ Из СчетФактура.ДокументыОснования Цикл
			ДокументыОснования.Добавить(СтрокаТЧ.ДокументОснование);
		КонецЦикла;	
		Если ДанныеШапки.Исправление И ЗначениеЗаполнено(СчетФактура.СчетФактураОснование) Тогда
			ДокументыОснования.Добавить(СчетФактура.СчетФактураОснование);
		КонецЕсли;		
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		
		ПлатежныеДокументы = Новый ТаблицаЗначений;
		ПлатежныеДокументы.Колонки.Добавить("НомерСтроки");
		ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
		ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
		
		Если ВидСчетаФактуры = "Реализация" Тогда
			Для Каждого СтрокаПРД Из СчетФактура.ПлатежноРасчетныеДокументы Цикл
				НоваяСтрока = ПлатежныеДокументы.Добавить();
				НоваяСтрока.НомерСтроки = СтрокаПРД.НомерСтроки;
				НоваяСтрока.НомерПРД    = СтрокаПРД.НомерПлатежноРасчетногоДокумента;
				НоваяСтрока.ДатаПРД     = СтрокаПРД.ДатаПлатежноРасчетногоДокумента;
			КонецЦикла;
		Иначе
			НоваяСтрока = ПлатежныеДокументы.Добавить();
			НоваяСтрока.НомерСтроки = 1;
			НоваяСтрока.НомерПРД    = СчетФактура.НомерПлатежноРасчетногоДокумента;
			НоваяСтрока.ДатаПРД     = СчетФактура.ДатаПлатежноРасчетногоДокумента;
		КонецЕсли;	
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
		
	КонецЕсли;
	
	Если ДанныеШапки.ПредставлениеДокумента <> "счет-фактура комиссионера" Тогда
		Если ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
		НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	КонецЕсли;
	
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" Тогда
		ЭтоКомиссия = Истина;
		ВыборкаДанныхКонтрагента = СтруктураДанных.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДанныхКонтрагента.НайтиСледующий(Новый Структура("Ссылка", ДанныеШапки.Ссылка));
		ДанныеКонтрагента = ВыборкаДанныхКонтрагента.Выбрать();
		ДанныеКонтрагента.Следующий();
	Иначе
		ЭтоКомиссия = Ложь
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			или ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		ДокументОтгрузки = ДанныеШапки.Ссылка.ДокументОснование;
	Иначе
		ДокументОтгрузки = ДанныеШапки.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ДокументОтгрузки.Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено Тогда
			ВидОперации = НСтр("ru = 'Формирование ЭД'");
			ПодробныйТекстОшибки = ("ru = 'Ошибка при формирование ЭД. Неверный статус документа.'");
			ТекстСообщения = НСтр("ru = 'Формирование ЭД возможно только для документов в статусе ""Реализовано"".'");
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			Отказ = Истина;
			Возврат
		КонецЕсли;
	КонецЕсли;	
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПроверитьМаркируемуюПродукциюДокумента(ДокументОтгрузки, Отказ);
	
	Если Отказ Тогда
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ПодробныйТекстОшибки = ("ru = 'Ошибка при формирование ЭД. Неверное указание маркированной продукции.'");
		ТекстСообщения = НСтр("ru = 'Проверите указанние штрихкодов для маркируемых товаров в табличной части.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтрокаДереваВидСчетаФактуры = ЭлектронноеВзаимодействие.СтрокаДерева(ДеревоДанных, "ВидСчетаФактуры");
	ВидСчетаФактуры = СтрокаДереваВидСчетаФактуры.Значение;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
		"НомерДокумента",  НомерСчетаФактурыНаПечать(ДанныеШапки.Номер, ДанныеШапки.ИндексПодразделения));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.Дата);
	
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Число(ДанныеШапки.НомерИсправления));	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643", ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", "Российский рубль");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ДанныеШапки.ТолькоУслуги);			
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация, ДанныеШапки.БанковскийСчетОрганизации, ДанныеШапки.Дата);
	СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр", ДанныеШапки.Дата);
	// Заполняем структурное подразделение
	Если ДанныеШапки.ПредставлениеДокумента <> "счет-фактура комиссионера" Тогда	
		ЗаполнитьСтруктурноеПодразделение(ДеревоДанных, "СведенияОПродавце", ДанныеШапки.Ссылка.Подразделение);
	КонецЕсли;
	
	// Выводим данные грузоотправителя.
	Если ДанныеШапки.Организация = ДанныеШапки.Грузоотправитель И Не ДанныеШапки.ТолькоУслуги Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе",	Истина);	
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель) И Не ДанныеШапки.ТолькоУслуги Тогда
		СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.БанковскийСчетГрузоотправителя);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузоотправителе, "СведенияОГрузоотправителе.Грузоотправитель", "Факт", ДанныеШапки.Дата);
	КонецЕсли;
	
	// Выводим данные грузополучателя.
	Если Не ДанныеШапки.ТолькоУслуги Тогда
		СведенияОГрузополучателе = "";
		Если НЕ ЭтоКомиссия Тогда
			Если ДанныеШапки.Грузополучатель <> Неопределено Тогда
				СведенияОГрузополучателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузополучатель, ДанныеШапки.БанковскийСчетГрузополучателя, ДанныеШапки.Дата);
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(ДанныеКонтрагента.Грузополучатель) Тогда
			СведенияОГрузополучателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Грузополучатель, ДанныеШапки.БанковскийСчетГрузополучателя, ДанныеШапки.Дата);
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОГрузополучателе) Тогда
			ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузополучателе, "СведенияОГрузополучателе", "Факт", ДанныеШапки.Дата);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПокупателе = "";
	Если НЕ ЭтоКомиссия Тогда 
		СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент, ДанныеШапки.БанковскийСчетКонтрагента, ДанныеШапки.Дата);
		Если Не ПустаяСтрока(ДанныеШапки.КПППокупателя) Тогда
			СведенияОПокупателе.КПП = ДанныеШапки.КПППокупателя;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда		
			СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Контрагент, ДанныеШапки.БанковскийСчетКонтрагента, ДанныеШапки.Дата);
			Если Не ПустаяСтрока(ДанныеКонтрагента.КПППокупателя) Тогда
				СведенияОПокупателе.КПП = ДанныеКонтрагента.КПППокупателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОПокупателе) Тогда
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр", ДанныеШапки.Дата);
	КонецЕсли;	
		
	Если ЭтоКомиссия Тогда
		// Получателем данного счета-фактуры является комиссионер. Поместим данные о получателе в доп. данные.
		СведенияОКомиссионере = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент, ДанныеШапки.БанковскийСчетКонтрагента, ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере", "Юр", ДанныеШапки.Дата);
	КонецЕсли;
	
	СоставительДокументаНаименование = СведенияОПоставщике.ПолноеНаименование
		+ ?(ЗначениеЗаполнено(СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокументаНаименование);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога");
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Признак");
	ТаблицаТоваров.Колонки.Добавить("ТоварКод");
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировке");
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	ЕстьРаботы = Ложь;
	
	ИспользоватьНаборы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;
	
	ТаблицаКодовМаркировки = Неопределено;
	СтруктураДанных.Свойство("Маркировка", ТаблицаКодовМаркировки);
	ОбъектыСОграничениемДлиныКодов = Новый Массив;
	
	ЗаполнениеКодаТовара = СтруктураЭД.ВариантыЗаполненияПолей.ТоварКод;

	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	ВыборкаДляСопоставления = ВыборкаДляСопоставленияНоменклатуры(ДокументОтгрузки);
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	
	Пока СтрокаТовары.Следующий() Цикл
		
		Если ИспользоватьНаборы Тогда
			Если СтрокаТовары.ЭтоНабор и СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах <> Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(СтрокаТовары.Номенклатура) или ЗначениеЗаполнено(СтрокаТовары.НоменклатураНаименование))  Тогда
			Продолжить;
		КонецЕсли;	
			
		Если СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			или СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
			ЕстьТовары = Истина;
		ИначеЕсли СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ЕстьУслуги = Истина;
		ИначеЕсли СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ЕстьРаботы = Истина;
		КонецЕсли;
		
		СуммаСНДС   = Окр(СтрокаТовары.СуммаСНДС, 2);
		СуммаНДС    = Окр(СтрокаТовары.СуммаНДС, 2);
		СуммаБезНДС = Окр(СтрокаТовары.СуммаБезНДС, 2);
		
		НовСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовары);
		
		НовСтрока.ТоварНаименование  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование
			) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru = ' (возвратная тара)'"), "");
			
		НовСтрока.ТоварИдентификатор = Строка(СтрокаТовары.Номенклатура.УникальныйИдентификатор());
		НовСтрока.НалоговаяСтавка    = СтрокаТовары.СтавкаНДС;
			
		НовСтрока.ЦенаЗаЕдиницуИзмерения    = Окр(СтрокаТовары.Цена, 2);
		НовСтрока.СтоимостьТоваровБезНалога = СуммаБезНДС;
		НовСтрока.СуммаНалога               = СуммаНДС;
		НовСтрока.СтоимостьТоваровСНалогом  = СуммаСНДС;
		
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.НалоговаяСтавка          = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНалога              = 0;
			НовСтрока.СтоимостьТоваровСНалогом = 0;
		КонецЕсли;

		Если ТипЗнч(СтрокаТовары.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ДокументРеализации = СтрокаТовары.Ссылка.ДокументОснование;
		Иначе
			ДокументРеализации = СтрокаТовары.Ссылка;
		КонецЕсли;
		Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если СтрокаТовары.НомерСтроки > 0 Тогда
				СтрокаТабЧасти = ДокументРеализации.Товары[СтрокаТовары.НомерСтроки - 1];
			Иначе
				СтрокаТабЧасти = ДокументРеализации.Товары[СтрокаТовары.НомерСтроки];
			КонецЕсли;	
			УпаковкаИзДокумента = СтрокаТабЧасти.Упаковка;
			Если УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
				УпаковкаИзДокумента = ЭлектронноеВзаимодействиеУТВызовСервера.ВернутьЕдиницуХранения(СтрокаТабЧасти.Номенклатура)
			КонецЕсли;
		Иначе
			УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();					
		КонецЕсли;
		
		// Сопоставление.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
		КонецЕсли;
		
		Если Не ВидСчетаФактуры = "Авансовый" Тогда
			НовСтрока.ЕдиницаИзмеренияКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
			НовСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияНаименование);
			//Анализ вариантов заполнения
			Если ЗаполнениеКодаТовара = "Штрихкод" И НовСтрока.Сопоставление.Свойство("ШтрихкодКомбинации") Тогда
				НовСтрока.ТоварКод = НовСтрока.Сопоставление.ШтрихкодКомбинации;
			Иначе
				НовСтрока.ТоварКод = СтрокаТовары.НоменклатураКод;
			КонецЕсли;
			//Конец анализа вариантов заполнения
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхождения) Тогда
			НовСтрока.СтранаПроисхожденияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СтранаПроисхождения, "Наименование");
		КонецЕсли;
		
		НовСтрока.Признак = ОпределитьПризнакТовара(СтрокаТовары.Номенклатура, ДокументОтгрузки);
		
		//Заполнение Таможенной декларации
		Если ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
			СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
			СтрокаТД.ТаможеннаяДекларацияНомер = СокрЛП(Строка(СтрокаТовары.НомерГТД));
			Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхожденияКод) Тогда
				СтрокаТД.СтранаПроисхожденияКод = СтрокаТовары.СтранаПроисхожденияКод;
			КонецЕсли;
			НовСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОТаможеннойДекларации, "СтранаПроисхожденияКод",,,
				НСтр("ru = 'Не заполнен код страны происхождения'"));
		КонецЕсли;
		//Конец заполнения Таможенной декларации
		
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке(НовСтрока, СтрокаТовары, ТаблицаКодовМаркировки, ОбъектыСОграничениемДлиныКодов);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.ПроверитьСведенияОМаркировке(ТаблицаКодовМаркировки, ОбъектыСОграничениемДлиныКодов, Отказ);
	Если Отказ Тогда
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ПодробныйТекстОшибки = ("ru = 'Ошибка при формирование ЭД. Неверное указание маркированной продукции.'");
		ТекстСообщения = НСтр("ru = 'Не удалось распределить все штрихкоды упаковок для маркируемых товаров в табличной части.
		| Возможная причина: слишком большое количество кодов в строке, требуется разбиение строки'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество",,, НСтр("ru = 'Не указано количество товара в табличной части'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияНаименование",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении страны происхождения в сведениях по ГТД. Возможные причины:
		|	- не заполнена колонка ""Страна происхождения""
		|	- указанной страны нет в классификаторе стран мира'");
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", ТекстОшибки);
	
	СоставСодержания = Новый Массив;
	Если Не ВидСчетаФактуры = "Авансовый" Тогда
		Если ЕстьТовары Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
		КонецЕсли;
		Если ЕстьУслуги Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
		КонецЕсли;
		Если ЕстьРаботы Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Работы выполнены в полном объеме.'"));
		КонецЕсли;
		СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	Иначе
		СоставСодержания.Добавить(НСтр("ru = 'Регистрация счет-фактуры на аванс.'"));
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	//Заполним документы основания.
	Если ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.КорректировкаРеализации")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ОтчетКомиссионера")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ОтчетКомитенту")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") 
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
			и Не ВидСчетаФактуры = "Авансовый" Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтгрузки, "ЗаказКлиента");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", МассивДокументовОснований);
	КонецЕсли;	
		
	Если ДанныеШапки.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеШапки.Дата);
	
	Если Не ВидСчетаФактуры = "Авансовый" Тогда
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
		
		Если ЗначениеЗаполнено(ДанныеШапки.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеШапки.ДоверенностьДата)
			И (ЗначениеЗаполнено(ДанныеШапки.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеШапки.ДоверенностьЛицо)) Тогда
			
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДокументНаименование = НСтр("ru = 'по доверенности'");
			НоваяСтрока.ДокументНомер = ДанныеШапки.ДоверенностьНомер;
			НоваяСтрока.ДокументДата = ДанныеШапки.ДоверенностьДата;
			НоваяСтрока.ДокументДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'выданной %1 %2'"),
					ДанныеШапки.ДоверенностьВыдана,
					ДанныеШапки.ДоверенностьЛицо);
					
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
				НСтр("ru = 'Необходимо указать дату доверенности.'"));
					
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеШапки.Основание)
			И ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата) Тогда
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			Если СтрНайти(ДанныеШапки.Основание, "№") Тогда
				СтрокаНаименование = Лев(ДанныеШапки.Основание, СтрНайти(ДанныеШапки.Основание, "№") - 2);
				Если ПустаяСтрока(СтрокаНаименование) Тогда
					СтрокаНаименование = "Договор";
				КонецЕсли;
			Иначе
				СтрокаНаименование = ДанныеШапки.Основание;
			КонецЕсли;
			НоваяСтрока.ДокументНаименование = СтрокаНаименование;
			НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
			НоваяСтрока.ДокументДата = ДанныеШапки.ОснованиеДата;
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
				НСтр("ru = 'Необходимо указать дату договора.'"));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОснованиеОтгрузкиТоваров) Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
	    КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
			ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеШапки.Кладовщик);
			Если ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика)
				И ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", ФИО.Отчество);
			ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик не работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСчетаФактурыУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	СчетФактура = ДанныеШапки.Ссылка;	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры",	СчетФактура);	
	Если ДанныеШапки.ПредставлениеДокумента <> "счет-фактура комиссионера" Тогда
		Если ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
		НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			или ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		ДокументИсправления = ДанныеШапки.Ссылка.ДокументОснование;
		СчетФактура = ДанныеШапки.Ссылка;	
	Иначе
		ДокументИсправления = ДанныеШапки.Ссылка;
		СчетФактура = Неопределено;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
		"НомерДокумента", НомерСчетаФактурыНаПечать(ДанныеШапки.Номер, ДанныеШапки.ИндексПодразделения));	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.Дата);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'Предлагаю изменить стоимость'"));
	
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Число(ДанныеШапки.НомерИсправления));	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	ДокументыОснования = Новый Массив;
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		
		ТаблицаИсходныхДокументов = СчетФактура.Товары.Выгрузить();
		ТаблицаИсходныхДокументов.Свернуть("ПредыдущийСчетФактура");
		Для Каждого СтрокаТЧ Из ТаблицаИсходныхДокументов Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ПредыдущийСчетФактура) Тогда
				ДокументыОснования.Добавить(СтрокаТЧ.ПредыдущийСчетФактура);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из СчетФактура.ДокументыОснования Цикл
			ОснованиеСчетаФактуры = СтрокаТЧ.ДокументОснование;
			Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
				ДокументыОснования.Добавить(ОснованиеСчетаФактуры);
			КонецЕсли;
		КонецЦикла;	
		
	Иначе
		ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсправления, "ДокументОснование");
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			ДокументыОснования.Добавить(ДокументРеализации);
		КонецЕсли;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);

	Если СчетФактура <> Неопределено Тогда
		Для Каждого СтрокаТЧ Из СчетФактура.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ПредыдущийСчетФактура) Тогда
				Продолжить;
			КонецЕсли;
			
			ИсходныйДокумент = СтрокаТЧ.ПредыдущийСчетФактура.ПолучитьОбъект();
			НомерИсходногоДокумента = ИсходныйДокумент.ПредставлениеНомера;
			ДатаИсходногоДокумента = ?(ИсходныйДокумент.Исправление, ИсходныйДокумент.СчетФактураОснование.Дата, ИсходныйДокумент.Дата);
			НомерИсправленияИсходногоДокумента = ИсходныйДокумент.НомерИсправления;
			ДатаИсправленияИсходногоДокумента = ?(ИсходныйДокумент.Исправление, ИсходныйДокумент.Дата, Дата(1,1,1));
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", НомерИсходногоДокумента);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", ДатаИсходногоДокумента);
			
			ПредставлениеИсходногоДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Универсальный передаточный документ № %1 от %2'"),
						НомерИсходногоДокумента,
						ДатаИсходногоДокумента);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ПредставлениеИсходногоДокумента", ПредставлениеИсходногоДокумента);
			
			Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента",
					Число(НомерИсправленияИсходногоДокумента));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента",
					ДатаИсправленияИсходногоДокумента);
			КонецЕсли;
			
			Прервать;
		КонецЦикла;
	Иначе
		Основание = ДокументИсправления.ДокументОснование;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", Основание.Номер);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Основание.Дата);
		
		ПредставлениеИсходногоДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Универсальный передаточный документ № %1 от %2'"),
				НомерСчетаФактурыНаПечать(Основание.Номер, ДанныеШапки.ИндексПодразделения, Истина),
				Формат(Основание.Дата, "ДЛФ=D; ДП=--"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ПредставлениеИсходногоДокумента", ПредставлениеИсходногоДокумента);
	КонецЕсли;
		
	ОснованиеКорректировки = Новый ТаблицаЗначений;
	ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
	ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
	
	Если ЗначениеЗаполнено(ДанныеШапки.Основание)
		И ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата) Тогда
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		Если СтрНайти(ДанныеШапки.Основание, "№") Тогда
			СтрокаНаименование = Лев(ДанныеШапки.Основание, СтрНайти(ДанныеШапки.Основание, "№") - 2);
			Если ПустаяСтрока(СтрокаНаименование) Тогда
				СтрокаНаименование = "Договор";
			КонецЕсли;
		Иначе
			СтрокаНаименование = ДанныеШапки.Основание;
		КонецЕсли;
		НоваяСтрока.ДокументНаименование = СтрокаНаименование;
		НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
		НоваяСтрока.ДокументДата = ДанныеШапки.ОснованиеДата;
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));
		
		Если ЗначениеЗаполнено(СтрокаНаименование) Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		КонецЕсли;
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643", ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", "Российский рубль");
	
	Если СчетФактура <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ДанныеШапки.ТолькоУслуги);
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", Ложь);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация, ДанныеШапки.БанковскийСчетОрганизации);
	СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр", ДанныеШапки.Дата);
	// Заполняем структурное подразделение
	ЗаполнитьСтруктурноеПодразделение(ДеревоДанных, "СведенияОПродавце", ДанныеШапки.Ссылка.Подразделение);
	
	СоставительДокументаНаименование = СведенияОПоставщике.ПолноеНаименование
		+ ?(ЗначениеЗаполнено(СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокументаНаименование);
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент, ДанныеШапки.БанковскийСчетКонтрагента);
	СведенияОПокупателе.КПП = ДанныеШапки.КПППокупателя;
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр", ДанныеШапки.Дата);
		
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	ИспользоватьНаборы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;

	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	ВыборкаДляСопоставления = ВыборкаДляСопоставленияНоменклатуры(ДокументИсправления);
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	
	Пока СтрокаТовары.Следующий() Цикл
		
		НовСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовары);
		
		НовСтрока.ТоварНаименование  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование
			) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru = ' (возвратная тара)'"), "");
			
		НовСтрока.ТоварИдентификатор 						= Строка(СтрокаТовары.Номенклатура.УникальныйИдентификатор());
		НовСтрока.НалоговаяСтавкаДоКорректировки 			= СтрокаТовары.СтавкаНДС;
		НовСтрока.НалоговаяСтавка							= СтрокаТовары.СтавкаНДС;
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			НовСтрока.СтоимостьТоваровСНалогом  = 0;
			НовСтрока.СуммаНалога  = 0;
			НовСтрока.СтоимостьТоваровСНалогомДоКорректировки  = 0;
			НовСтрока.СуммаНалогаДоКорректировки  = 0;
			Продолжить;	
		КонецЕсли;
		
		НовСтрока.ЕдиницаИзмеренияКодДоКорректировки		= СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		НовСтрока.ЕдиницаИзмеренияКод               		= СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		НовСтрока.КоличествоДоКорректировки					= СтрокаТовары.КоличествоДо;
		НовСтрока.Количество                				= СтрокаТовары.Количество;
		НовСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки 	= Окр(СтрокаТовары.ЦенаДо, 2);
		НовСтрока.ЦенаЗаЕдиницуИзмерения                	= Окр(СтрокаТовары.Цена, 2);
		НовСтрока.СтоимостьТоваровБезНалогаДоКорректировки 	= Окр(СтрокаТовары.СуммаБезНДСДо, 2);
		НовСтрока.СтоимостьТоваровБезНалога                	= Окр(СтрокаТовары.СуммаБезНДС, 2);
		НовСтрока.СтоимостьТоваровБезНалогаУвеличение      	= Окр(СтрокаТовары.РазницаБезНДСУвеличение, 2);
		НовСтрока.СтоимостьТоваровБезНалогаУменьшение      	= Окр(СтрокаТовары.РазницаБезНДСУменьшение, 2);
		НовСтрока.СуммаНалогаДоКорректировки 				= Окр(СтрокаТовары.СуммаНДСДо, 2);
		НовСтрока.СуммаНалога                				= Окр(СтрокаТовары.СуммаНДС, 2);
		НовСтрока.СуммаНалогаУвеличение      				= Окр(СтрокаТовары.РазницаНДСУвеличение, 2);
		НовСтрока.СуммаНалогаУменьшение      				= Окр(СтрокаТовары.РазницаНДСУменьшение, 2);
		НовСтрока.СтоимостьТоваровСНалогомДоКорректировки 	= Окр(СтрокаТовары.СуммаСНДСДо, 2);
		НовСтрока.СтоимостьТоваровСНалогом                	= Окр(СтрокаТовары.СуммаСНДС, 2);
		НовСтрока.СтоимостьТоваровСНалогомУвеличение      	= Окр(СтрокаТовары.РазницаСНДСУвеличение, 2);
		НовСтрока.СтоимостьТоваровСНалогомУменьшение      	= Окр(СтрокаТовары.РазницаСНДСУменьшение, 2);
	
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.НалоговаяСтавка                         = "НДС исчисляется налоговым агентом";
			НовСтрока.НалоговаяСтавкаДоКорректировки          = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНалога                             = 0;
			НовСтрока.СуммаНалогаДоКорректировки              = 0;
			НовСтрока.СуммаНалогаУвеличение                   = 0;
			НовСтрока.СуммаНалогаУменьшение                   = 0;
			НовСтрока.СтоимостьТоваровСНалогом                = 0;
			НовСтрока.СтоимостьТоваровСНалогомДоКорректировки = 0;
			НовСтрока.СтоимостьТоваровСНалогомУвеличение      = 0;
			НовСтрока.СтоимостьТоваровСНалогомУменьшение      = 0;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТовары.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ДокументКорректировки = СтрокаТовары.Ссылка.ДокументОснование;
		Иначе
			ДокументКорректировки = СтрокаТовары.Ссылка;
		КонецЕсли;
		Если ТипЗнч(ДокументКорректировки) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Если СтрокаТовары.НомерСтроки > 0 Тогда
				СтрокаТабЧасти = ДокументКорректировки.Товары[СтрокаТовары.НомерСтроки - 1];
			Иначе
				СтрокаТабЧасти = ДокументКорректировки.Товары[СтрокаТовары.НомерСтроки];
			КонецЕсли;	
			УпаковкаИзДокумента = СтрокаТабЧасти.Упаковка;
			Если УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
				УпаковкаИзДокумента = ЭлектронноеВзаимодействиеУТВызовСервера.ВернутьЕдиницуХранения(СтрокаТабЧасти.Номенклатура)
			КонецЕсли;
		Иначе
			УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();					
		КонецЕсли;
		
		// Сопоставление.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество",,, НСтр("ru = 'Не указано количество товара в табличной части'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКодДоКорректировки",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение", ТаблицаТоваров.Итог("СуммаНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение", ТаблицаТоваров.Итог("СуммаНалогаУменьшение"));
	
КонецПроцедуры

Процедура НайтиСоздатьПриобретениеТоваровУслугУПД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СпособОбработки) = Тип("Строка") Тогда
		СпособОбработкиСтрокой = СпособОбработки;
	Иначе
		СпособОбработкиСтрокой = СпособОбработки.ПервичныйДокумент;
	КонецЕсли;
	
	Если СпособОбработкиСтрокой = "ПриобретениеУслугПрочихАктивов" Тогда
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслугУПД(ДеревоДанных);		
		ЗаполнитьДокументПоступленияУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	Иначе
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслугУПД(ДеревоДанных);
		Если СпособОбработкиСтрокой = "ВозвратТоваровОтКлиента" Тогда
			ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);		
		Иначе
			ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСоздатьСчетФактуруУПД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных);
	ЗаполнитьДокументСчетФактура(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Процедура НайтиСоздатьКорректировкуПоступленияУКД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных);
	ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Процедура НайтиСоздатьКорректировочныйСчетФактуруУКД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных);
	ДанныеДляЗагрузки.Шапка.Вставить("Корректировочный", Истина);
	
	МассивОбъектов = Новый Массив;
	Если ДанныеДляЗагрузки.Шапка.Свойство("ДокументыОснования") Тогда
		Для Каждого ДокументОснование Из ДанныеДляЗагрузки.Шапка.ДокументыОснования Цикл
			Корректировка = ДокументОснование.Ссылка;
			ДокументОснование = Корректировка.ДокументОснование;		
		КонецЦикла;
	КонецЕсли;
	ТаблицаСчетаФактуры = УчетНДСУП.СчетаФактурыПолученныеПоДокументамОснованиям(ДокументОснование, Ложь);
	Если ТаблицаСчетаФактуры.Количество() = 0 Тогда
		СчетФактураОснование = Неопределено;
	Иначе
		СчетФактураОснование = ТаблицаСчетаФактуры[0].Ссылка;
	КонецЕсли;
	ДанныеДляЗагрузки.Шапка.Вставить("СчетФактураОснование", СчетФактураОснование);
	
	ЗаполнитьДокументСчетФактура(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных) Экспорт
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Номер", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаСоставления",  ТекущаяДатаСеанса());
	ДанныеОбъекта.Вставить("Дата", ТекущаяДатаСеанса());
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Контрагент",  СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика));
	ДанныеОбъекта.Вставить("ИННКонтрагента", ИННПоставщика);
	ДанныеОбъекта.Вставить("КППКонтрагента", КПППоставщика);
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	// Если счет-фактура на аванс.
	ВидСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		КодВидаОперации = "02";
	Иначе
		КодВидаОперации = "01";
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	ДанныеОбъекта.Вставить("ПолученВЭлектронномВиде", Истина);
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;	
	
	// Получим документы-основания
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		МассивДокументовОснований = Новый Массив;		
		Если ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда 
			Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
				МассивДокументовОснований.Добавить(ДокументОснования);
			КонецЦикла;
		Иначе
			МассивДокументовОснований.Добавить(ДокументыОснованияСчетаФактуры);
		КонецЕсли;
		ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);		
	КонецЕсли;
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ВалютаОбъекта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ВалютаОбъекта, КодВалюты);
	ДанныеОбъекта.Вставить("Валюта", ВалютаОбъекта);
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	ДанныеОбъекта.Вставить("СуммаНДС", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога"));
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеОбъекта);
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		Авансы = Документы.СчетФактураПолученныйАванс.ПустаяСсылка().Авансы.Выгрузить();
		СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
			НоваяСтрока = Авансы.Добавить();
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ДанныеОбъекта.Дата, Истина), СтавкаНДС);
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЦикла;
		ДанныеДляОбъекта.Вставить("Авансы", Авансы);
	КонецЕсли;
	
	Если ВидСчетаФактуры = "Реализация" Тогда
		ЗаполнитьСуммыДляСчетаФактуры(ДанныеДляОбъекта, ДеревоДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных) Экспорт
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Номер", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаСоставления",  ТекущаяДатаСеанса());
	ДанныеОбъекта.Вставить("Дата", ТекущаяДатаСеанса());
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Контрагент",  СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика));
	ДанныеОбъекта.Вставить("ИННКонтрагента", ИННПоставщика);
	ДанныеОбъекта.Вставить("КППКонтрагента", КПППоставщика);
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	КодВидаОперации = "01";
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	ДанныеОбъекта.Вставить("ПолученВЭлектронномВиде", Истина);
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;	
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение")
									+ ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение"));
	
	// Получим документы-основания
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		МассивДокументовОснований = Новый Массив;		
		Если ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда 
			Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
				МассивДокументовОснований.Добавить(ДокументОснования);
			КонецЦикла;
		Иначе
			МассивДокументовОснований.Добавить(ДокументыОснованияСчетаФактуры);
		КонецЕсли;
		ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);		
	КонецЕсли;
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ВалютаОбъекта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ВалютаОбъекта, КодВалюты);
	ДанныеОбъекта.Вставить("Валюта", ВалютаОбъекта);
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеОбъекта);
	
	ЗаполнитьСуммыДляКорректировочногоСчетаФактуры(ДанныеДляОбъекта, ДеревоДанных);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугУПД(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("Курс", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2"" '"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	Товары.Колонки.Добавить("ШтрихкодыУпаковок");
	
	ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Признак = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		
		НоваяСтрока = Товары.Добавить();
	
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
			Если НоваяСтрока.Цена = 0 Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтоИмущество = Ложь;
		Если ЗначениеЗаполнено(Признак) Тогда
			ЭтоИмущество = ?(Признак = "1", Истина, Ложь);
		Иначе
			ЭтоИмущество = Истина;
		КонецЕсли;
		
		ТипНоменклатуры = НоваяСтрока.Номенклатура.ТипНоменклатуры;
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			НоваяСтрока.СписатьНаРасходы = Истина;
			ЭтоИмущество = Ложь;
		КонецЕсли;
		
		Если ЭтоИмущество Тогда
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
											"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда				
				НомерТаможеннойДекларации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				КодСтраныПроисхождения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");				
				Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
					ТаможеннаяДекларация = Неопределено;
					СтранаПроисхождения = Неопределено;
					ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
					НайтиТаможенныеДекларации(ТаможеннаяДекларация, НомерТаможеннойДекларации, СтранаПроисхождения); 
					Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
						НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
						
						ПараметрыДляЗаполнения = Справочники.НомераГТД.ПараметрыДляЗаполненияЭлемента(НомерТаможеннойДекларации, СтранаПроисхождения);
						ПараметрыДляЗаполнения.ЗаполнитьПорядковыйНомерТовараАвтоматически = Истина;
						НоваяТаможеннаяДекларация.Заполнить(ПараметрыДляЗаполнения);
						
						НоваяТаможеннаяДекларация.Записать();
						ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
					КонецЕсли;
					НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок, СведенияОТоваре);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка",             ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары",            Товары);
	ДанныеДляЗаполнения.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслугУПД(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("Курс", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2"" '"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("ВалютаВзаиморасчетов", Валюта);
	Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("Курс", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	ДокументыОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Для Каждого Основание Из ДокументыОснования Цикл
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ДанныеОбъекта.Вставить("ДокументОснование", Основание);
				ДанныеОбъекта.Вставить("НалогообложениеНДС", Основание.НалогообложениеНДС);			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПоставщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2"" '"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеПокупателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя));
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение")
									+ ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение"));
									
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
	
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
			Если НоваяСтрока.Цена = 0 Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", ДатаКИ = Неопределено) Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП);

	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИНН",
									СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
									СведенияОбУчастнике.Свидетельство);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Фамилия",
									СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Имя",
									СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Отчество",
									СведенияОбУчастнике.Отчество);
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", ВидАдреса);
	
	Если АдресУчастника.Свойство("АдресРФ") Тогда
		ТипАдреса = ?(АдресУчастника.АдресРФ, "АдресРФ", "АдресИнформация");
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.Телефон",
									СведенияОбУчастнике.Телефоны);
	КонецЕсли;

	Если ЗначениеЗаполнено(СведенияОбУчастнике.ЭлектроннаяПочта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
									СведенияОбУчастнике.ЭлектроннаяПочта);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
				НомерСчета);
				
		Банк = ""; БИК = ""; КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
										БанкНаименование);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
										БИК);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
										КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.КодПоОКПО) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КодОКПО", СведенияОбУчастнике.КодПоОКПО);
	КонецЕсли;
		
КонецПроцедуры

Функция НомерСчетаФактурыНаПечать(Номер, ИндексПодразделения, УдалитьПользовательскийПрефикс = Ложь) Экспорт
	
	НомерНаПечать = "";
	
	Если Номер <> Неопределено Тогда
	
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, УдалитьПользовательскийПрефикс);
		
		ПозицияРазделителя = СтрНайти(НомерНаПечать, "-");
		Префикс = Лев(НомерНаПечать, ПозицияРазделителя);
		НомерБезПрефикса = Сред(НомерНаПечать, ПозицияРазделителя + 1);
		
		Если Лев(НомерБезПрефикса, 1) = "И" Тогда
			НомерНаПечать = Префикс + Сред(НомерБезПрефикса, 2);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИндексПодразделения) Тогда
			НомерНаПечать = НомерНаПечать + "/" + ИндексПодразделения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерНаПечать;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

// Определяет, является ли объект корректировочным документом.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка._ДемоСчетФактураВыданный.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, объект является ли корректировочным документом.
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если СсылкаНаОбъект <> Документы.СчетФактураВыданный.ПустаяСсылка() Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Корректировочный");
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПодвала(ДанныеПечати, ИтоговыеСуммы, ДеревоДанных) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КоэффициентПересчетаВТонны     = НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"СведенияПоОтпускуГруза.ДатаОтпуска", 
			ДанныеПечати.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей", 
			ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписейПрописью", 
			ЧислоПрописью(ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей, ,",,,,,,,,0"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.ВсегоМест", 
			ИтоговыеСуммы.КоличествоМест);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто", 
			ИтоговыеСуммы.МассаНетто);
	
	Если ИтоговыеСуммы.КоличествоМест > 0 Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью", 
			ЧислоПрописью(ИтоговыеСуммы.КоличествоМест, ,",,,,,,,,0"));
	КонецЕсли;
	
	Если ИтоговыеСуммы.МассаНетто > 0 Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописью(ИтоговыеСуммы.МассаНетто, КоэффициентПересчетаВТонны);
		МассаГрузаНеттоПрописью = 
			ЧислоПрописью(ИтоговыеСуммы.МассаНетто * ПараметрыМассыПрописью.Коэффициент, "ДП=Истина", ПараметрыМассыПрописью.Формат);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНеттоПрописью", 
			МассаГрузаНеттоПрописью);
		
	КонецЕсли;
	
	Если ИтоговыеСуммы.МассаБрутто > 0 Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописью(ИтоговыеСуммы.МассаНетто, КоэффициентПересчетаВТонны);
		МассаГрузаБруттоПрописью = 
			ЧислоПрописью(ИтоговыеСуммы.МассаБрутто * ПараметрыМассыПрописью.Коэффициент, "ДП=Истина", ПараметрыМассыПрописью.Формат);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБруттоПрописью", 
			МассаГрузаБруттоПрописью);
			
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто", 
			ИтоговыеСуммы.МассаБрутто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.КоличествоМест", 
			ИтоговыеСуммы.КоличествоМест);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.МассаБрутто", 
			ИтоговыеСуммы.МассаБрутто);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.МассаНетто", 
			ИтоговыеСуммы.МассаНетто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.СуммаБезНДС", 
			ИтоговыеСуммы.СуммаБезНДС);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.СуммаНДС", 
			ИтоговыеСуммы.СуммаНДС);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.СуммаСНДС", 
			ИтоговыеСуммы.СуммаСНДС);
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы(ВидЭД) Экспорт
	
	Структура = Новый Структура;
	
	// Инициализация итогов по документу.
	Если ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		Структура.Вставить("Количество", 0);
		Структура.Вставить("СуммаНДС", 0);
		Структура.Вставить("СуммаБезНДС", 0);
		Структура.Вставить("СуммаСНДС", 0);
	Иначе
		Структура.Вставить("КоличествоМест", 0);
		Структура.Вставить("МассаНетто", 0);
		Структура.Вставить("МассаБрутто", 0);
		Структура.Вставить("СуммаБезНДС", 0);
		Структура.Вставить("СуммаНДС", 0);
		Структура.Вставить("СуммаСНДС", 0);
		
		Если ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			Структура.Вставить("МассаНеттоДоКорректировки", 0);
			Структура.Вставить("СуммаБезНДСДоКорректировки", 0);
			Структура.Вставить("СуммаНДСДоКорректировки", 0);
			Структура.Вставить("СуммаСНДСДоКорректировки", 0);
		КонецЕсли;
		
		Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
		Структура.Вставить("СуммаПрописью", "");
	КонецЕсли;	
		
	Возврат Структура;
	
КонецФункции

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки, ВидЭД) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ИтоговыеСуммы.Количество	 = ИтоговыеСуммы.Количество + ДанныеСтроки.Количество;
		ИтоговыеСуммы.СуммаНДС       = ИтоговыеСуммы.СуммаНДС + ДанныеСтроки.СуммаНДС;
		ИтоговыеСуммы.СуммаБезНДС    = ИтоговыеСуммы.СуммаБезНДС + ДанныеСтроки.Сумма;
		ИтоговыеСуммы.СуммаСНДС      = ИтоговыеСуммы.СуммаСНДС + ДанныеСтроки.Сумма + ДанныеСтроки.СуммаНДС;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.КоличествоМест) Тогда
			КоличествоМест = ДанныеСтроки.КоличествоМест;
			Если КоличествоМест <> Цел(КоличествоМест) Тогда
				КоличествоМест = Цел(КоличествоМест) + 1;
			КонецЕсли;
		Иначе
			КоличествоМест = 0;
		КонецЕсли;
		
		ИтоговыеСуммы.КоличествоМест = ИтоговыеСуммы.КоличествоМест + КоличествоМест;
		ИтоговыеСуммы.СуммаБезНДС    = ИтоговыеСуммы.СуммаБезНДС + ДанныеСтроки.СуммаБезНДС;
		ИтоговыеСуммы.СуммаНДС       = ИтоговыеСуммы.СуммаНДС + ДанныеСтроки.СуммаНДС;
		ИтоговыеСуммы.СуммаСНДС      = ИтоговыеСуммы.СуммаСНДС + ДанныеСтроки.СуммаСНДС;
		ИтоговыеСуммы.МассаБрутто    = ИтоговыеСуммы.МассаБрутто + ДанныеСтроки.МассаБрутто;
		ИтоговыеСуммы.МассаНетто     = ИтоговыеСуммы.МассаНетто + ДанныеСтроки.МассаНетто;
		ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей + 1;
		
		Если ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			ИтоговыеСуммы.МассаНеттоДоКорректировки  = ИтоговыеСуммы.МассаНеттоДоКорректировки + ДанныеСтроки.МассаНеттоДоКорректировки;
			ИтоговыеСуммы.СуммаБезНДСДоКорректировки = ИтоговыеСуммы.СуммаБезНДСДоКорректировки + ДанныеСтроки.СуммаБезНДСДоКорректировки;
			ИтоговыеСуммы.СуммаНДСДоКорректировки    = ИтоговыеСуммы.СуммаНДСДоКорректировки + ДанныеСтроки.СуммаНДСДоКорректировки;
			ИтоговыеСуммы.СуммаСНДСДоКорректировки   = ИтоговыеСуммы.СуммаСНДСДоКорректировки 
				+ ДанныеСтроки.СуммаБезНДСДоКорректировки 
				+ ДанныеСтроки.СуммаНДСДоКорректировки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкруглитьМассыТовара(ДанныеСтроки) Экспорт
	
	ДанныеСтроки.МассаБрутто = Окр(ДанныеСтроки.МассаБрутто, 3);
	ДанныеСтроки.МассаНетто = Окр(ДанныеСтроки.МассаНетто, 3);

КонецПроцедуры

Процедура ОбработатьТаблицуТоваров(ТаблицаТоваров) Экспорт
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ИД) Тогда
			ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
			Если ТипЗнч(Строка.Характеристика) = Тип("Строка") Тогда
				СсылкаНаХарактеристику = Строка.ХарактеристикаСсылка;
			Иначе
				СсылкаНаХарактеристику = Строка.Характеристика;
			КонецЕсли;
			ИДХарактеристики = ?(ЗначениеЗаполнено(СсылкаНаХарактеристику),СсылкаНаХарактеристику.УникальныйИдентификатор(),"");
			Если ТипЗнч(Строка.Упаковка) = Тип("Строка") Тогда
				СсылкаНаУпаковку = Строка.УпаковкаСсылка;
			Иначе
				СсылкаНаУпаковку = Строка.Упаковка;
			КонецЕсли;
			ИДУпаковки = ?(ЗначениеЗаполнено(СсылкаНаУпаковку),СсылкаНаУпаковку.УникальныйИдентификатор(),"");
			Строка.ИД = Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
			Строка.Наименование = ?(ЗначениеЗаполнено(Строка.Наименование),Строка.Наименование,"")  //номенклатура
			+ ?(ЗначениеЗаполнено(Строка.Характеристика)," (","") //Открывающаяся скобка
			+ ?(ЗначениеЗаполнено(Строка.Характеристика),Строка.Характеристика,"") //характеристика
			+ ?(ЗначениеЗаполнено(Строка.Характеристика),")",""); //Закрывающаяся скобка
		КонецЕсли;
		//Коды единиц измерения для CML 4.02
		Строка.БазоваяЕдиницаКод = СокрЛП(Строка.БазоваяЕдиницаКод);
		Строка.УпаковкаКод = СокрЛП(Строка.УпаковкаКод);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьКонтрагентаВБД(ДанныеКонтрагента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	НовыйПартнер        = Неопределено;
	СсылкаНаКонтрагента = Неопределено;
	
	Если СтрДлина(ДанныеКонтрагента.ИНН) = 10 Тогда
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Иначе
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	КонецЕсли;
	ДанныеКонтрагента.Вставить("Наименование", ДанныеКонтрагента.Наименование);
	ДанныеКонтрагента.Вставить("НаименованиеПолное", ДанныеКонтрагента.Наименование);
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	Если ДанныеКонтрагента.Свойство("ЮрАдрес") Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент, 
		                                                             ДанныеКонтрагента.ЮрАдрес, 
		                                                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			                                                         ТекущаяДатаСеанса());
	КонецЕсли; 
		
	Если ДанныеКонтрагента.Свойство("ФактАдрес") Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент, 
		                                                             ДанныеКонтрагента.ФактАдрес, 
		                                                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
		
	СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
	НовыйПартнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
	
	ЗаполнитьЗначенияСвойств(НовыйПартнер, ДанныеКонтрагента);
	
	НовыйПартнер.ДатаРегистрации = ТекущаяДатаСеанса();
	НовыйПартнер.Клиент 		 = Истина;
	НовыйПартнер.Поставщик 		 = Истина;
	НовыйПартнер.ПрочиеОтношения = Истина;
	
	Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Иначе
		НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;
	
	ИспользуютсяГруппыДоступаПартнеров = Справочники.ГруппыДоступаПартнеров.ИспользуютсяГруппыДоступа();
	Если ИспользуютсяГруппыДоступаПартнеров
		И НЕ ЗначениеЗаполнено(НовыйПартнер.ГруппаДоступа) Тогда
		НовыйПартнер.ГруппаДоступа = ГруппаДоступаПартнера();
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство("ФактАдрес") Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйПартнер, 
		                                                             ДанныеКонтрагента.ФактАдрес, 
		                                                             Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	КонецЕсли;
	
	НачатьТранзакцию();	
	Попытка		
		//Записываем нового партнера
		Если НовыйПартнер <> Неопределено Тогда
			НовыйПартнер.Записать();
			НовыйКонтрагент.Партнер = НовыйПартнер.Ссылка;
		КонецЕсли;
		
		//Записываем нового контрагента
		НовыйКонтрагент.Записать();
		СсылкаНаКонтрагента = НовыйКонтрагент.Ссылка;		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + НСтр("ru = '(подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Создание нового контрагента'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат СсылкаНаКонтрагента; 
	
КонецФункции

Процедура ЗаполнитьДокументыОснования(ДеревоДанных, СсылкаНаОбъект) Экспорт
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДокументыОснования", 
			МассивДокументовОснований);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		Попытка 
			НовЭл.Заблокировать();
		Исключение
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить данные номенклатуры поставщика ""%1"".
			|Возможно, номенклатура поставщика редактируется другим пользователем'"),
			НовЭл.Наименование);			
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	//
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	// если нет ссылки на номенклатуру, то будем создавать ее
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда 
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // Найдена ссылка
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе // будем искать по индексу
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
		// Заполняем идентификатор номенклатуры поставщика, если он получен в реквизите Ид
		СтрокаИд = СтрокаОбъекта.Строки.Найти("Ид", "Реквизит", Истина);
		Если НЕ ЗначениеЗаполнено(НовЭл.Идентификатор) И ЗначениеЗаполнено(СтрокаИд) Тогда
			НовЭл.Идентификатор = СтрокаИд.ЗначениеРеквизита;
		КонецЕсли;
		// Заполнение найденного поставщика (владельца, тип Справочник.Партнеры)
		СтрокиПартнеры = ДеревоРазбора.Строки.Найти("Партнеры", "ТипОбъекта", Истина);
		Если СтрокиПартнеры <> Неопределено и СтрокиПартнеры.Строки.Количество() = 1 Тогда
			НовЭл.Владелец = СтрокиПартнеры.Строки[0].СсылкаНаОбъект;
		Иначе
			СтрокиКонтрагент = ДеревоРазбора.Строки.Найти("Контрагенты", "ТипОбъекта", Истина);
			Если СтрокиКонтрагент <> Неопределено И СтрокиКонтрагент.Строки.Количество() = 1 Тогда
				НовЭл.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокиКонтрагент.Строки[0].СсылкаНаОбъект, "Партнер");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	//
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
		НовЭл.Разблокировать();
	Исключение
		Текст = НСтр("ru = 'Создание элемента справочника ""Номенклатура поставщиков"".'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция РеквизитыБанковскогоСчета(ИмяСправочника, СсылкаНаБанковскийСчет) Экспорт
	
	БанковскийСчет = Новый Структура;
	ЗапросСчет = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
					|	БанковскиеСчета.НомерСчета,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.НаименованиеБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.Наименование
					|	КОНЕЦ КАК НаименованиеБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.БИКБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.Код
					|	КОНЕЦ КАК БИКБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.КоррСчетБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.КоррСчет
					|	КОНЕЦ КАК КоррСчетБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.НаименованиеБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Наименование
					|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.БИКБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Код
					|	КОНЕЦ КАК БИКБанкаДляРасчетов,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.КоррСчетБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.КоррСчет
					|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов
					|ИЗ
					|	Справочник."+ИмяСправочника+" КАК БанковскиеСчета
					|ГДЕ
					|	БанковскиеСчета.Ссылка = &Ссылка";
					ЗапросСчет.Текст = ТекстЗапроса;
	ЗапросСчет.УстановитьПараметр("Ссылка", СсылкаНаБанковскийСчет);
	Выборка = ЗапросСчет.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		БанковскийСчет.Вставить("НомерСчета", Выборка.НомерСчета);
		Банк = Новый Структура;
		Банк.Вставить("Наименование", Выборка.НаименованиеБанка);
		Банк.Вставить("Код", Выборка.БИКБанка);
		Банк.Вставить("КоррСчет", Выборка.КоррСчетБанка);
		БанковскийСчет.Вставить("Банк", Банк);
		БанкДляРасчетов = Неопределено; // заполнение анализируется в модуле формирования
		Если ЗначениеЗаполнено(Выборка.БИКБанкаДляРасчетов) Тогда // используется банк для расчетов
			БанкДляРасчетов = Новый Структура;
			БанкДляРасчетов.Вставить("Наименование", Выборка.НаименованиеБанкаДляРасчетов);
			БанкДляРасчетов.Вставить("Код", Выборка.БИКБанкаДляРасчетов);
			БанкДляРасчетов.Вставить("КоррСчет", Выборка.КоррСчетБанкаДляРасчетов);
		КонецЕсли;
		БанковскийСчет.Вставить("БанкДляРасчетов", БанкДляРасчетов);
	КонецЕсли;
	Возврат БанковскийСчет;
	
КонецФункции

Функция СоздатьРасчетныйСчет(СтрокаОбъекта, ВидРС, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаОбъект = Неопределено;
	НайденнаяСтрока = СтрокаОбъекта;
	
	Если ВидРС = "БанковскийСчетКонтрагента" Тогда
		НовЭл = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
		Если (НЕ ДеревоРазбора.Строки.Найти("Контрагенты")=Неопределено) 
		   И ДеревоРазбора.Строки.Найти("Контрагенты").Строки.Количество()>0 Тогда
			СсылкаНаВладельца = ДеревоРазбора.Строки.Найти("Контрагенты").Строки[0].СсылкаНаОбъект;
		КонецЕсли;	
	ИначеЕсли ВидРС = "БанковскийСчетОрганизации" Тогда
		НовЭл = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
		НовЭл.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	НовЭл.НомерСчета 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "НомерСчета");
		
	НовЭл.ВалютаДенежныхСредств = ДенежныеСредстваСервер.ПолучитьВалютуПоНомеруСчета(НовЭл.НомерСчета);
	//
	ИндексИскомойСтроки = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Банк");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НовЭл.Банк 			= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	ИндексИскомойСтроки 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "БанкКорреспондент");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НовЭл.БанкДляРасчетов 	= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		СсылкаНаВладельца = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Владелец");	
	КонецЕсли;
	НовЭл.Владелец 		= СсылкаНаВладельца;
	НовЭл.Наименование 	= Прав(СокрЛП(НовЭл.НомерСчета), 4) + " в " + НовЭл.Банк.Наименование; // наименование счета
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Создание элемента справочника %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					ВидРС); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект; // запишем в дерево
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ДобавитьВДеревоДанныеСчета(ДеревоДокумента, ДанныеСчета) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", ДанныеСчета.НомерСчета);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", ДанныеСчета.Банк.Наименование);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", ДанныеСчета.Банк.Код);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", ДанныеСчета.Банк.КоррСчет);
	
	Если ЗначениеЗаполнено(ДанныеСчета.БанкДляРасчетов) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", ДанныеСчета.БанкДляРасчетов.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", ДанныеСчета.БанкДляРасчетов.КоррСчет);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", ДанныеСчета.БанкДляРасчетов.Код);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУИП(ДеревоДокумента, УИП) Экспорт
	
	СтруктураДопДанных = Новый Структура("ИдентификаторПлатежа", УИП);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, СтруктураДопДанных, Истина);
	
КонецПроцедуры

Процедура ПриПроверкеВозможностиСозданияУчетногоДокумента(Знач Параметры, Отказ, Описание) Экспорт
	
	Если Параметры.ЭтоСводныйУПД Тогда
		
		Отказ = Истина;
		Описание = НСтр("ru = 'Отражение в учете сводных счетов-фактур не поддерживается.'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов(ВариантыЗаполненияПолей) Экспорт
	
	ВариантКодУПД = ВариантыЗаполненияПолей.УПД_ТоварКод.НайтиПоЗначению("Код");
	ВариантКодУПД.Представление = "Артикул";
	ВариантКодПередачаТоваров = ВариантыЗаполненияПолей.ПередачаТоваров_ТоварКод.НайтиПоЗначению("Код");
	ВариантКодПередачаТоваров.Представление = "Артикул";
	
КонецПроцедуры

Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
	Если Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.УПД
		ИЛИ Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.УКД Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиУПД();
	
	ИначеЕсли Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетФактура
		ИЛИ Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры();
		
	ИначеЕсли Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиРеализации();
		
	ИначеЕсли Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиАкта();
		
	ИначеЕсли Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиКорректировкиРеализации();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляЗаполнения(НоменклатураКонтрагента) Экспорт
	
	СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	РаботаСНоменклатуройУТ.ПреобразоватьСтавкуНДССервиса(НоменклатураКонтрагента.СтавкаНДС, СтавкаНДС);
			
	СсылкаНаЕдиницуИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницыИзмеренияКонтрагента = Новый Структура;
	ЕдиницыИзмеренияКонтрагента.Вставить("ОКЕИ", НоменклатураКонтрагента.ЕдиницаИзмеренияКод);
	ЕдиницыИзмеренияКонтрагента.Вставить("Наименование", НоменклатураКонтрагента.ЕдиницаИзмерения);
	РаботаСНоменклатуройУТ.ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницыИзмеренияКонтрагента, СсылкаНаЕдиницуИзмерения);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Артикул", НоменклатураКонтрагента.Артикул);
	ДанныеЗаполнения.Вставить("Наименование", НоменклатураКонтрагента.Наименование);
	ДанныеЗаполнения.Вставить("НаименованиеПолное", НоменклатураКонтрагента.Наименование);
	ДанныеЗаполнения.Вставить("ЕдиницаИзмерения", СсылкаНаЕдиницуИзмерения);
	ДанныеЗаполнения.Вставить("СтавкаНДС", СтавкаНДС);
	
	Возврат ДанныеЗаполнения;

КонецФункции

#Область УПД_2019

Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СсылкаНаОбъект, "НалогообложениеНДС") Тогда
		ТипыБезНДС = Перечисления.ТипыНалогообложенияНДС.ТипыБезНДС();
		Если ТипыБезНДС.Найти(СсылкаНаОбъект.НалогообложениеНДС) <> Неопределено Тогда
			СтруктураЭД.Функция = "ДОП";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		СтруктураЭД.Функция = "ДОП";		
	КонецЕсли;
	
	Если СтруктураЭД.Функция <> "ДОП" Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") 
				или ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураКомиссионеру") 
				или ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
			СчетФактура = СсылкаНаОбъект;
		Иначе
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(СсылкаНаОбъект);		
			РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(МассивОбъектов);
			МассивСчетовФактур = РезультатАнализа.СчетаФактурыНаПечать;
			Если МассивСчетовФактур.Количество() = 0 Тогда
				НоваяСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(НоваяСчетФактура, СсылкаНаОбъект);
				СтрокаОснований = НоваяСчетфактура.ДокументыОснования.Добавить();
				
				НоваяСчетФактура.ДокументОснование 	= СсылкаНаОбъект.Ссылка;
				СтрокаОснований.ДокументОснование 	= СсылкаНаОбъект.Ссылка;
				НоваяСчетФактура.КодВидаОперации 	= НоваяСчетФактура.КодВидаОперации(СсылкаНаОбъект.Ссылка);
				НоваяСчетФактура.Дата 				= ТекущаяДатаСеанса();
				НоваяСчетФактура.ДатаВыставления 	= ТекущаяДатаСеанса();
				НоваяСчетФактура.УстановитьНовыйНомер();
				НоваяСчетФактура.ЗаполнитьПараметрыСчетаФактурыПоОснованию();
				НоваяСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
				МассивСчетовФактур.Добавить(НоваяСчетФактура.Ссылка);
				
				//Запись в Реестр документов
				ДополнительныеСвойства = Новый Структура;
				РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(НоваяСчетФактура.Ссылка, ДополнительныеСвойства, Ложь);
			КонецЕсли;
			СчетФактура = МассивСчетовФактур[0];
		КонецЕсли;
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(СчетФактура);
		ПараметрыПечати = Новый Структура();
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
			СтруктураДанных = Документы.СчетФактураВыданныйАванс.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов);
		Иначе
			СтруктураДанных = Документы[СчетФактура.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
		КонецЕсли;	
		
		ЗаполнитьДанныеСчетаФактурыУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ);		
		ЗаполнитьДанныеПервичногоДокументаУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ);
	Иначе
		ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура();
	
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			СтруктураДанных = КорректировкаРеализацииЛокализация.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
		Иначе
			СтруктураДанных = АктВыполненныхРаботЛокализация.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ИмяОбъекта = СсылкаНаОбъект.Метаданные().Имя;
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ИмяОбъекта);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[ИмяОбъекта];
		КонецЕсли;
		СтруктураДанных = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
	КонецЕсли;
	
	ЗаполнитьДанныеПервичногоДокументаУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ)

КонецПроцедуры

Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ)
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС_2019(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование) = ТИП(Документ.ПриобретениеТоваровУслуг)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ВТОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Дата КАК Дата,
	|	ПриобретениеТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПриобретениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	ПриобретениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП,
	|	&Принял КАК Принял,
	|	&Должность КАК ПринялДолжность
	|ИЗ
	|	&ТипДокумента КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО ПриобретениеТоваровУслуг.Ссылка = ВТОснование.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
	|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО СчетФактураПолученный.Ссылка = ВТОснование.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО ПриобретениеТоваровУслугТовары.Ссылка = ВТОснование.ДокументОснование
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Товар)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО ПриобретениеТоваровУслугТовары.Ссылка = ВТОснование.ДокументОснование
	|ГДЕ			
	|	ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО ПриобретениеТоваровУслугТовары.Ссылка = ВТОснование.ДокументОснование
	|ГДЕ			
	|	ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Работа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка.Номер КАК Номер,
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО АктОРасхожденияхПослеПриемкиТовары.ДокументОснование = ВТОснование.ДокументОснование
	|ГДЕ			
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка.Статус <> Значение(Перечисление.СтатусыАктаОРасхождениях.ПустаяСсылка)
	|	И АктОРасхожденияхПослеПриемкиТовары.Ссылка.Статус <> Значение(Перечисление.СтатусыАктаОРасхождениях.НеСогласовано)
	|	И НЕ АктОРасхожденияхПослеПриемкиТовары.Ссылка.ПометкаУдаления
	|";
	
	Если ЗначениеЗаполнено(СтруктураЭД.ВладелецЭД.ДокументыОснования) И 
				ТипЗнч(СтруктураЭД.ВладелецЭД.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		ОснованиеАкт = Истина;
	Иначе
		ОснованиеАкт = Ложь;
	КонецЕсли;	
		
	Если ОснованиеАкт Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ПриобретениеУслугПрочихАктивов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Принял", "Неопределено");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Должность", "Неопределено");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ПриобретениеТоваровУслуг");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Принял", "ПриобретениеТоваровУслуг.Принял");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Должность", "ПриобретениеТоваровУслуг.ПринялДолжность");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СодержаниеОперации = "";
	ДатаПолученияТоваров = ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	"";
	ТоварПринял = "";
	ТоварПринялДолжность = "";
	ЕстьДокументыУчета = Истина;
	
	Если Не РезультатЗапроса[1].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров 		  =	Выборка.Дата;
		ОрганизацияНаименованиеПолное =	Выборка.ОрганизацияНаименованиеПолное;
		Если Не ОснованиеАкт Тогда
			ТоварПринял 				  = Выборка.Принял;
			ТоварПринялДолжность 		  = Выборка.ПринялДолжность;
		КонецЕсли;
		
	ИначеЕсли Не РезультатЗапроса[2].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[2].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли РезультатЗапроса[1].Пустой() и РезультатЗапроса[2].Пустой() Тогда
		
		ЕстьДокументыУчета = Ложь;
		ДатаПолученияТоваров =			 СтруктураЭД.ДатаЭД;
		ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(СтруктураЭД.Организация);
		ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияНаименованиеПолное) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	Если ЕстьДокументыУчета Тогда 
		Если РезультатЗапроса[6].Пустой() Тогда

			СоставСодержания = Новый Массив;
			Если Не РезультатЗапроса[3].Пустой() Тогда
				СоставСодержания.Добавить(НСтр("ru = 'Товары принял без претензий.'"));
			КонецЕсли;
			Если Не РезультатЗапроса[4].Пустой() Или ОснованиеАкт Тогда
				СоставСодержания.Добавить(НСтр("ru = 'Услуги получены, претензий нет.'"));
			КонецЕсли;
			Если Не РезультатЗапроса[5].Пустой() Тогда
				СоставСодержания.Добавить(НСтр("ru = 'Результаты работ принял без претензий.'"));
			КонецЕсли;
			Если СоставСодержания.Количество() Тогда
				СодержаниеОперации  = СтрСоединить(СоставСодержания, " ");
			КонецЕсли;
			
			КодИтога = "1";
			
		Иначе
			
			КодИтога = "2";
			ВидДокументаОРасхождении = "3";
			Выборка = РезультатЗапроса[6].Выбрать();
			Выборка.Следующий();
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДокументОРасхождениях.Наименование", "Акт о расхождениях после приемки");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДокументОРасхождениях.Вид", ВидДокументаОРасхождении);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДокументОРасхождениях.Номер", Выборка.Номер);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДокументОРасхождениях.Дата", Выборка.Дата);
			
		КонецЕсли;
	Иначе
		КодИтога = "1";		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.СодержаниеОперации", СодержаниеОперации);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.КодИтога", КодИтога);

	Если ЗначениеЗаполнено(ТоварПринял) Тогда
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ТоварПринял);
		Если ЗначениеЗаполнено(ТоварПринялДолжность)
			И ЗначениеЗаполнено(ТоварПринял) Тогда
			// Принявший товар работает в организации
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность", Строка(ТоварПринялДолжность));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий", "Должностные обязанности");					
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия", ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя", ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество", ФИО.Отчество);
		ИначеЕсли ЗначениеЗаполнено(ТоварПринял) Тогда
			// Принявший товар не работает в организации
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	Текст = "";
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				 Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, ПервичныйДокумент, Истина, СпособОбработки, ОписаниеОшибки);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		// Заполним основание в СФ.
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СчетФактура, СпособОбработки, ОписаниеОшибки);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

Процедура НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СпособОбработки) = Тип("Строка") Тогда
		СпособОбработкиСтрокой = СпособОбработки;
	Иначе
		СпособОбработкиСтрокой = СпособОбработки.ПервичныйДокумент;
	КонецЕсли;
	
	Если СпособОбработкиСтрокой = "ПриобретениеУслугПрочихАктивов" Тогда
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслугУПД_2019(ДеревоДанных);		
		ЗаполнитьДокументПоступленияУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	Иначе
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслугУПД_2019(ДеревоДанных);
		Если СпособОбработкиСтрокой = "ВозвратТоваровОтКлиента" Тогда
			ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);		
		Иначе
			ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СсылкаНаВладельца = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактурыУПД_2019(ДеревоДанных);
	ЗаполнитьДокументСчетФактура(СсылкаНаВладельца, ДанныеДляЗагрузки, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗначениеНаименованияДанныхСопоставленияНоменклатурыБЭД
Процедура ЗначениеНаименованияДанныхСопоставленияНоменклатурыБЭД(Знач СсылкаНаОбъект, ЗначениеНаименования) Экспорт
	
	НаименованиеРеквизита = НаименованиеРеквизитаСопоставленияНоменклатурыБЭД(ТипЗнч(СсылкаНаОбъект));
	
	Если НаименованиеРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗначениеНаименования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, НаименованиеРеквизита);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗначенияНаименованийДанныхСопоставленияНоменклатурыБЭД
Процедура ЗначенияНаименованийДанныхСопоставленияНоменклатурыБЭД(Знач НаборСсылокНаОбъекты, СоответствиеЗначенийНаименований) Экспорт
	
	НаименованиеРеквизита = НаименованиеРеквизитаСопоставленияНоменклатурыБЭД(ТипЗнч(НаборСсылокНаОбъекты[0]));
	
	Если НаименованиеРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЗначенийНаименований = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НаборСсылокНаОбъекты, НаименованиеРеквизита);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ОпределитьНаименованиеТипаОбъектаСопоставленияНоменклатурыБЭД
Процедура ОпределитьНаименованиеТипаОбъектаСопоставленияНоменклатурыБЭД(Знач СсылкаНаОбъект, НаименованиеТипаОбъекта) Экспорт

	ТипСсылкиНаОбъект = ТипЗнч(СсылкаНаОбъект);
	Если ТипСсылкиНаОбъект = Тип("СправочникСсылка.Номенклатура") Тогда
		НаименованиеТипаОбъекта = "Номенклатура";
	ИначеЕсли ТипСсылкиНаОбъект = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		НаименованиеТипаОбъекта = "Характеристика";
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ИнициализацияТекстаЗапросаПоискаСопоставленияПоНатуральнымКлючам
Процедура ИнициализацияТекстаЗапросаПоискаСопоставленияПоНатуральнымКлючам(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	               |	ТаблицаНатуральныхКлючей.Штрихкод КАК Штрихкод,
	               |	ТаблицаНатуральныхКлючей.ЭтоВнутреннийШтрихкод КАК ЭтоВнутреннийШтрихкод,
	               |	Штрихкоды.Номенклатура КАК Номенклатура,
	               |	ИСТИНА КАК ШтрихкодСопоставлен
	               |ПОМЕСТИТЬ ТаблицаСопоставленныхПоШтрихкодам
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНатуральныхКлючей КАК ТаблицаНатуральныхКлючей
	               |		ПО Штрихкоды.Штрихкод = ТаблицаНатуральныхКлючей.Штрихкод
	               |ГДЕ
	               |	ТаблицаНатуральныхКлючей.Штрихкод <> """"
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИдентификаторНоменклатуры,
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СправочникНоменклатура.Артикул КАК Артикул,
	               |	ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	               |	СправочникНоменклатура.Ссылка КАК Номенклатура,
	               |	ИСТИНА КАК АртикулСопоставлен
	               |ПОМЕСТИТЬ ТаблицаСопоставленныхПоАртикулам
	               |ИЗ
	               |	ТаблицаНатуральныхКлючей КАК ТаблицаНатуральныхКлючей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ПО ТаблицаНатуральныхКлючей.Артикул = СправочникНоменклатура.Артикул
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСопоставленныхПоШтрихкодам КАК ТаблицаСопоставленныхПоШтрихкодам
	               |		ПО ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры = ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры
	               |		И НЕ ТаблицаСопоставленныхПоШтрихкодам.ЭтоВнутреннийШтрихкод
		           |ГДЕ
	               |	ТаблицаНатуральныхКлючей.Артикул <> """"
	               |	И ТаблицаСопоставленныхПоШтрихкодам.ЭтоВнутреннийШтрихкод ЕСТЬ NULL
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИдентификаторНоменклатуры,
	               |	Номенклатура";
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ТекстЗапросаПоискаВариантовСопоставленияПоШтрихкодамКомбинаций
Процедура ТекстЗапросаПоискаВариантовСопоставленияПоШтрихкодамКомбинаций(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Штрихкоды.Штрихкод КАК ШтрихкодКомбинации,
	               |	Штрихкоды.Номенклатура КАК Номенклатура,
	               |	Штрихкоды.Характеристика КАК Характеристика,
	               |	Штрихкоды.Упаковка КАК Упаковка
	               |ПОМЕСТИТЬ НайденныеКомбинации
	               |ИЗ
	               |	ТаблицаШтрихкодовКомбинации КАК ТаблицаШтрихкодовКомбинации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	               |		ПО ТаблицаШтрихкодовКомбинации.ШтрихкодКомбинации = Штрихкоды.Штрихкод
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ШтрихкодКомбинации,
	               |	Номенклатура,
	               |	Характеристика,
	               |	Упаковка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НайденныеКомбинации.ШтрихкодКомбинации КАК ШтрихкодКомбинации
	               |ПОМЕСТИТЬ СписокУникальныхШтрихкодовКомбинаций
	               |ИЗ
	               |	НайденныеКомбинации КАК НайденныеКомбинации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НайденныеКомбинации.ШтрихкодКомбинации
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(НайденныеКомбинации.Номенклатура) = 1 И
	               |	КОЛИЧЕСТВО(НайденныеКомбинации.Характеристика) = 1 И
	               |	КОЛИЧЕСТВО(НайденныеКомбинации.Упаковка) = 1
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ШтрихкодКомбинации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НайденныеКомбинации.ШтрихкодКомбинации КАК ШтрихкодКомбинации,
	               |	НайденныеКомбинации.Номенклатура КАК НоменклатураИБ,
	               |	НайденныеКомбинации.Характеристика КАК ХарактеристикаИБ,
	               |	НайденныеКомбинации.Упаковка КАК УпаковкаИБ
	               |ИЗ
	               |	НайденныеКомбинации КАК НайденныеКомбинации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокУникальныхШтрихкодовКомбинаций КАК СписокУникальныхШтрихкодовКомбинаций
	               |		ПО НайденныеКомбинации.ШтрихкодКомбинации = СписокУникальныхШтрихкодовКомбинаций.ШтрихкодКомбинации";

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ТекстЗапросаОтбораХарактеристикНоменклатурыБЭДПоВладельцу
Процедура ТекстЗапросаОтбораХарактеристикНоменклатурыБЭДПоВладельцу(ТекстЗапроса) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВариантыСопоставленияПоСловарю.Идентификатор КАК Идентификатор,
	               |	ВариантыСопоставленияПоСловарю.СсылкаНаОбъект КАК СсылкаНаОбъект,
	               |	ТаблицаНоменклатуры.НоменклатураИБ КАК НоменклатураИБ
	               |ПОМЕСТИТЬ ХарактеристикиПоВладельцу
	               |ИЗ
	               |	ВариантыСопоставленияПоСловарю КАК ВариантыСопоставленияПоСловарю
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |		ПО ВариантыСопоставленияПоСловарю.Идентификатор = ТаблицаНоменклатуры.ИдентификаторХарактеристики
	               |			И (ВариантыСопоставленияПоСловарю.СсылкаНаОбъект.Владелец ССЫЛКА Справочник.Номенклатура)
	               |			И ВариантыСопоставленияПоСловарю.СсылкаНаОбъект.Владелец = ТаблицаНоменклатуры.НоменклатураИБ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВариантыСопоставленияПоСловарю.Идентификатор,
	               |	ВариантыСопоставленияПоСловарю.СсылкаНаОбъект,
	               |	ТаблицаНоменклатуры.НоменклатураИБ
	               |ИЗ
	               |	ВариантыСопоставленияПоСловарю КАК ВариантыСопоставленияПоСловарю
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |		ПО ВариантыСопоставленияПоСловарю.Идентификатор = ТаблицаНоменклатуры.ИдентификаторХарактеристики
	               |			И (ВариантыСопоставленияПоСловарю.СсылкаНаОбъект.Владелец ССЫЛКА Справочник.ВидыНоменклатуры)
	               |			И ВариантыСопоставленияПоСловарю.СсылкаНаОбъект.Владелец = ТаблицаНоменклатуры.НоменклатураИБ.ВидНоменклатуры
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Идентификатор,
	               |	СсылкаНаОбъект";
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ТекстЗапросаПоискаВариантовСопоставленияУпаковкиНоменклатурыБЭД
Процедура ТекстЗапросаПоискаВариантовСопоставленияУпаковкиНоменклатурыБЭД(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕдиницыИзмерения.Ссылка КАК УпаковкаИБ,
	               |	ТаблицаНоменклатуры.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	               |	ТаблицаНоменклатуры.НоменклатураИБ КАК НоменклатураИБ
	               |ИЗ
	               |	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |		ПО ТаблицаНоменклатуры.ЕдиницаИзмеренияКод = ЕдиницыИзмерения.Код
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УпаковкиНоменклатуры.Ссылка,
	               |	ТаблицаНоменклатуры.ИдентификаторУпаковки,
	               |	ТаблицаНоменклатуры.НоменклатураИБ
	               |ИЗ
	               |	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	               |		ПО (ВЫБОР
	               |				КОГДА ТаблицаНоменклатуры.НоменклатураИБ.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	               |					ТОГДА УпаковкиНоменклатуры.Владелец = ТаблицаНоменклатуры.НоменклатураИБ.Ссылка
	               |				КОГДА ТаблицаНоменклатуры.НоменклатураИБ.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	               |					ТОГДА УпаковкиНоменклатуры.Владелец = ТаблицаНоменклатуры.НоменклатураИБ.НаборУпаковок
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ) И ТаблицаНоменклатуры.ЕдиницаИзмерения = УпаковкиНоменклатуры.Наименование";

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ТекстЗапросаОтбораСтрокСопоставленияДляЗаполненияХарактеристик
Процедура ТекстЗапросаОтбораСтрокСопоставленияДляЗаполненияХарактеристик(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ТаблицаСопоставления.Идентификатор КАК Идентификатор
	                |ИЗ
	                |	ТаблицаСопоставления КАК ТаблицаСопоставления
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	                |		ПО ТаблицаСопоставления.НоменклатураИБ = ХарактеристикиНоменклатуры.Владелец
	                |			И (ХарактеристикиНоменклатуры.Владелец ССЫЛКА Справочник.Номенклатура)
	                |ГДЕ
	                |	ХарактеристикиНоменклатуры.Ссылка = &Характеристика
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ТаблицаСопоставления.Идентификатор
	                |ИЗ
	                |	ТаблицаСопоставления КАК ТаблицаСопоставления
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	                |		ПО ТаблицаСопоставления.НоменклатураИБ.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	                |			И (ХарактеристикиНоменклатуры.Владелец ССЫЛКА Справочник.ВидыНоменклатуры)
	                |ГДЕ
	                |	ХарактеристикиНоменклатуры.Ссылка = &Характеристика";

КонецПроцедуры

// Инициализирует текст запроса поиска штрихкодов комбинации и штрихкодов номенклатуры по табличной части "Товары" документа,
// в котором есть колонки: Номенклатура, Характеристика, Упаковка.
// В запросе используется временная таблица "ВТ_Товары", в которой должны быть колонки: Номенклатура, Характеристика, Упаковка.
// При отсутствии своей временной таблицы необходимо заполнять параметр "ИмяДокумента", и в запросе установить параметр "Ссылка".
// 
// Параметры:
//  ТекстЗапроса    - Строка - текст запроса поиска штрихкодов по данным табличной части документа.
//  ИмяДокумента    - Строка - имя объекта метаданных документа, в котором есть табличная часть "Товары" с колонками:
//                             Номенклатура, Характеристика, Упаковка.
//  МножествоСсылок - Булево - признак поиска штрихкодов по нескольким ссылкам документов.
//
Процедура ИнициализацияТекстаЗапросаПоискаШтрихкодовПоВременнойТаблицеТоваров(
		ТекстЗапроса, Знач ИмяДокумента = Неопределено, Знач МножествоСсылок = Ложь) Экспорт
		
	ПакетыЗапросов = Новый Массив;
	ПакетыЗапросов.Добавить(ТекстЗапроса);
		
	Если ИмяДокумента <> Неопределено Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	&Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Документ.&ИмяДокумента.&ТЧ КАК Товары
		|ГДЕ
		|	Товары.Ссылка &УсловиеСсылки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСсылки", ?(МножествоСсылок, "В (&Ссылка)", "= &Ссылка"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", ИмяДокумента);
		
		Если ИмяДокумента = "АктВыполненныхРабот" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТЧ", "Услуги");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Упаковка", "Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
		ИначеЕсли ИмяДокумента = "СчетФактураВыданныйАванс" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТЧ", "Авансы");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Упаковка", "Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТЧ", "Товары");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Упаковка", "Товары.Упаковка");		
		КонецЕсли;
		
		ПакетыЗапросов.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Штрихкоды.Штрихкод КАК Штрихкод,
	               |	Штрихкоды.Номенклатура КАК Номенклатура,
	               |	Штрихкоды.Характеристика КАК Характеристика,
	               |	Штрихкоды.Упаковка КАК Упаковка
	               |ПОМЕСТИТЬ СписокШтрихкодовПоКомбинации
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	               |		ПО (ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура)
	               |			И (ВТ_Товары.Характеристика = Штрихкоды.Характеристика)
	               |			И (ВТ_Товары.Упаковка = Штрихкоды.Упаковка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Штрихкод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокШтрихкодовПоКомбинации.Штрихкод) КАК КоличествоШтрихкодов,
	               |	СписокШтрихкодовПоКомбинации.Номенклатура КАК Номенклатура,
	               |	СписокШтрихкодовПоКомбинации.Характеристика КАК Характеристика,
	               |	СписокШтрихкодовПоКомбинации.Упаковка КАК Упаковка
	               |ПОМЕСТИТЬ ПоискРазличныхКомбинаций
	               |ИЗ
	               |	СписокШтрихкодовПоКомбинации КАК СписокШтрихкодовПоКомбинации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СписокШтрихкодовПоКомбинации.Номенклатура,
	               |	СписокШтрихкодовПоКомбинации.Характеристика,
	               |	СписокШтрихкодовПоКомбинации.Упаковка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КоличествоШтрихкодов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокШтрихкодовПоКомбинации.Штрихкод КАК Штрихкод,
	               |	СписокШтрихкодовПоКомбинации.Номенклатура КАК Номенклатура,
	               |	СписокШтрихкодовПоКомбинации.Характеристика КАК Характеристика,
	               |	СписокШтрихкодовПоКомбинации.Упаковка КАК Упаковка
	               |ИЗ
	               |	СписокШтрихкодовПоКомбинации КАК СписокШтрихкодовПоКомбинации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоискРазличныхКомбинаций КАК ПоискРазличныхКомбинаций
	               |		ПО СписокШтрихкодовПоКомбинации.Номенклатура = ПоискРазличныхКомбинаций.Номенклатура
	               |			И СписокШтрихкодовПоКомбинации.Характеристика = ПоискРазличныхКомбинаций.Характеристика
	               |			И СписокШтрихкодовПоКомбинации.Упаковка = ПоискРазличныхКомбинаций.Упаковка
	               |ГДЕ
	               |	ПоискРазличныхКомбинаций.КоличествоШтрихкодов = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Штрихкоды.Штрихкод КАК Штрихкод,
	               |	Штрихкоды.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	               |		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура";
	
	ПакетыЗапросов.Добавить(ТекстЗапроса);

	ТекстЗапроса = СтрСоединить(ПакетыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецПроцедуры

// Добавляет в структуру поле ШтрихкодыНоменклатуры и ШтрихкодКомбинации в сопоставление номенклатуры БЭД.
//
// Параметры:
//  Сопоставление         - Структура        - сопоставление номенклатуры БЭД.
//  ШтрихкодыНоменклатуры - Массив из Строка - набор штрихкодов номенклатуры.
//  ШтрихкодыКомбинаций   - Массив из Строка - набор штрихкодов по комбинации строки: номенклатура, характеристика, упаковка.
//  НоменклатураИБ        - ОпределяемыйТип.НоменклатураБЭД               - ссылка на номенклатуру.
//  ХарактеристикаИБ      - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка на характеристику.
//  ЕдиницаИзмеренияИБ    - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - ссылка на единицу измерения/упаковку.
//
Процедура ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление, ШтрихкодыНоменклатуры, ШтрихкодыКомбинаций,
		НоменклатураИБ, ХарактеристикаИБ, ЕдиницаИзмеренияИБ) Экспорт
	
	ШтрихкодыТовара = Новый Массив;
	ОтборШтрихкодов = Новый Структура;
	ОтборШтрихкодов.Вставить("Номенклатура", НоменклатураИБ);
	НайденныеСтрокиШтрихкодов = ШтрихкодыНоменклатуры.НайтиСтроки(ОтборШтрихкодов);
	Для Каждого СтрокаШтрихкода Из НайденныеСтрокиШтрихкодов Цикл
		ШтрихкодыТовара.Добавить(СтрокаШтрихкода.Штрихкод);
	КонецЦикла;
	Сопоставление.Вставить("ШтрихкодыНоменклатуры", ШтрихкодыТовара);
	
	ОтборШтрихкодов = Новый Структура;
	ОтборШтрихкодов.Вставить("Номенклатура"    , НоменклатураИБ);
	ОтборШтрихкодов.Вставить("Характеристика"  , ХарактеристикаИБ);
	ОтборШтрихкодов.Вставить("Упаковка", ЕдиницаИзмеренияИБ);
	СтрокаПоиска = ШтрихкодыКомбинаций.НайтиСтроки(ОтборШтрихкодов);
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Сопоставление.Вставить("ШтрихкодКомбинации", СтрокаПоиска[0].Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

// Получает штрихкоды номенклатуры и комбинации (номенклатура, характеристика, упаковка) по набору товаров.
//
// Параметры:
//  НаборТоваров          - ВыборкаИзРезультатаЗапроса - выборка товаров из табличной части документа.
//  ШтрихкодыКомбинаций   - Массив из Строка           - набор штрихкодов комбинации: номенклатура, характеристика, упаковка.
//  ШтрихкодыНоменклатуры - Массив из Строка           - набор штрихкодов номенклатуры.
//
Процедура ШтрихкодыПоТоварам(НаборТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры) Экспорт
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ТипНабораТоваров = ТипЗнч(НаборТоваров);
	
	Если ТипНабораТоваров = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		НаборТоваров.Сбросить();
		Пока НаборТоваров.Следующий() Цикл
			СтрокаТовара = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара, НаборТоваров);
		КонецЦикла;
		НаборТоваров.Сбросить();
	Иначе
		Для Каждого Товар Из НаборТоваров Цикл
			СтрокаТовара = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара, Товар);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка";
	
	ИнициализацияТекстаЗапросаПоискаШтрихкодовПоВременнойТаблицеТоваров(Запрос.Текст);
	
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	
	ШтрихкодыКомбинаций = ПакетыЗапросов[3].Выгрузить();
	ШтрихкодыКомбинаций.Индексы.Добавить("Номенклатура, Характеристика, Упаковка");

	ШтрихкодыНоменклатуры = ПакетыЗапросов[4].Выгрузить();
	ШтрихкодыНоменклатуры.Индексы.Добавить("Номенклатура");
	
КонецПроцедуры

Функция ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Ссылка.Партнер КАК Владелец,
	|	&Идентификатор КАК Идентификатор,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	&Упаковка КАК Упаковка
	|ИЗ
	|	Документ.&НаименованиеДокумента.&ТЧ КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	ДокументМетаданные = СсылкаНаОбъект.Метаданные();	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеДокумента", ДокументМетаданные.Имя);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТЧ", "Услуги");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Упаковка", "Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Идентификатор", """""");		
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТЧ", "Авансы");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Товары.Ссылка.Партнер", "Товары.Ссылка.Контрагент.Партнер");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Упаковка", "Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Идентификатор", """""");	
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТЧ", "Товары");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Упаковка", "ВЫБОР
															   |  КОГДА Товары.Упаковка = Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
															   |       Товары.Номенклатура.ЕдиницаИзмерения
															   |  ИНАЧЕ
															   |      Товары.Упаковка
															   |КОНЕЦ");
		ЕстьКолонкаНоменклатураПоставщика = ДокументМетаданные.ТабличныеЧасти.Товары.Реквизиты.Найти("НоменклатураПоставщика") <> Неопределено;
		Если ЕстьКолонкаНоменклатураПоставщика Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Идентификатор", "ЕСТЬNULL(Товары.НоменклатураПоставщика.Идентификатор, """")");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Идентификатор", """""");
		КонецЕсли;		
	КонецЕсли;	
	
	ТаблицаОтбора = Запрос.Выполнить().Выгрузить();
	
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	ОбменСКонтрагентами.СоздатьВременнуюТаблицуСоответствияНоменклатуры(ТаблицаОтбора, "втНоменклатураКонтрагента", МенеджерТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втНоменклатураКонтрагента.Номенклатура КАК Номенклатура,
	|	втНоменклатураКонтрагента.Характеристика КАК Характеристика,
	|	втНоменклатураКонтрагента.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.Идентификатор, """") КАК Идентификатор,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.НаименованиеХарактеристики, """") КАК НаименованиеХарактеристики,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмерения, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмеренияКод, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.СтавкаНДС, """") КАК СтавкаНДС,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.ШтрихкодыНоменклатуры, """") КАК ШтрихкодыНоменклатуры,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.ШтрихкодКомбинации, """") КАК ШтрихкодКомбинации
	|ИЗ
	|	втНоменклатураКонтрагента КАК втНоменклатураКонтрагента";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеМетоды_УПД_УКД_2019

Процедура ЗаполнитьДанныеПервичногоДокументаУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
		НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	КонецЕсли;
	
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" Тогда
		ЭтоКомиссия = Истина;
		ВыборкаДанныхКонтрагента = СтруктураДанных.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДанныхКонтрагента.НайтиСледующий(Новый Структура("Ссылка", ДанныеШапки.Ссылка));
		ДанныеКонтрагента = ВыборкаДанныхКонтрагента.Выбрать();
		ДанныеКонтрагента.Следующий();
	Иначе
		ЭтоКомиссия = Ложь
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			или ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		ДокументОтгрузки = ДанныеШапки.Ссылка.ДокументОснование;
	Иначе
		ДокументОтгрузки = ДанныеШапки.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ДокументОтгрузки.Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено Тогда
			ВидОперации = НСтр("ru = 'Формирование ЭД'");
			ПодробныйТекстОшибки = ("ru = 'Ошибка при формирование ЭД. Неверный статус документа.'");
			ТекстСообщения = НСтр("ru = 'Формирование ЭД возможно только для документов в статусе ""Реализовано"".'");
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			Отказ = Истина;
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПроверитьМаркируемуюПродукциюДокумента(ДокументОтгрузки, Отказ);
	
	Если Отказ Тогда
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ПодробныйТекстОшибки = ("ru = 'Ошибка при формирование ЭД. Неверное указание маркированной продукции.'");
		ТекстСообщения = НСтр("ru = 'Проверите указанние штрихкодов для маркируемых товаров в табличной части.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтрокаДереваВидСчетаФактуры = ЭлектронноеВзаимодействие.СтрокаДерева(ДеревоДанных, "ВидСчетаФактуры");
	ВидСчетаФактуры = СтрокаДереваВидСчетаФактуры.Значение;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
		"НомерДокумента",  НомерСчетаФактурыНаПечать(ДанныеШапки.Номер, ДанныеШапки.ИндексПодразделения));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.Дата);
	
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Число(ДанныеШапки.НомерИсправления));	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643", ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", "Российский рубль");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ДанныеШапки.ТолькоУслуги);			
	
	// Выводим данные продавца. 
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация, ДанныеШапки.БанковскийСчетОрганизации, ДанныеШапки.Дата);
	СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
	ТаблицаПродавцов = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОПродавце");
	ТаблицаПродавцов.Колонки.Добавить("СведенияОбУчастнике");
	ДанныеПродавца = ПолучитьДанныеУчастникаУПД(СведенияОПоставщике, "Юр");
	СтрокаПродавца = ТаблицаПродавцов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПродавца, ДанныеПродавца);
	// Заполняем структурное подразделение
	Если ДанныеШапки.ПредставлениеДокумента <> "счет-фактура комиссионера" Тогда
		Если ЗначениеЗаполнено(ДанныеШапки.Ссылка.Подразделение) Тогда
			СтрокаПродавца.СтруктурноеПодразделение = ДанныеШапки.Ссылка.Подразделение.Наименование;
		КонецЕсли;
	КонецЕсли;
	ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаПродавцов);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПродавцов, "СведенияОПродавце");
	
	// Выводим данные грузоотправителя.
	ТаблицаГрузоотправителей = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОГрузоотправителе");
	ТаблицаГрузоотправителей.Колонки.Добавить("СведенияОбУчастнике");
	
	Если ДанныеШапки.Организация = ДанныеШапки.Грузоотправитель И Не ДанныеШапки.ТолькоУслуги Тогда
		ТаблицаГрузоотправителей.Добавить().ОнЖе = Истина;	
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель) И Не ДанныеШапки.ТолькоУслуги Тогда
		СведенияОГрузоотправителе = Неопределено; 
		СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.БанковскийСчетГрузоотправителя);
		ДанныеГрузоотправителя = ПолучитьДанныеУчастникаУПД(СведенияОГрузоотправителе, "Факт");
		СтрокаГрузоотправителя = ТаблицаГрузоотправителей.Добавить();
		СтрокаГрузоотправителя.Грузоотправитель = ДанныеГрузоотправителя;		
		СтрокаГрузоотправителя.СведенияОбУчастнике = СведенияОГрузоотправителе;
	КонецЕсли;
	ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаГрузоотправителей, "Грузоотправитель");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузоотправителей, "СведенияОГрузоотправителе");
	
	// Выводим данные грузополучателя.
	ТаблицаГрузополучателей = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОГрузополучателе");
	ТаблицаГрузополучателей.Колонки.Добавить("СведенияОбУчастнике");
	
	Если Не ДанныеШапки.ТолькоУслуги Тогда
		СведенияОГрузополучателе = "";
		Если НЕ ЭтоКомиссия Тогда
			Если ДанныеШапки.Грузополучатель <> Неопределено Тогда
				СведенияОГрузополучателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузополучатель, ДанныеШапки.БанковскийСчетГрузополучателя, ДанныеШапки.Дата);
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(ДанныеКонтрагента.Грузополучатель) Тогда
			СведенияОГрузополучателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Грузополучатель, ДанныеШапки.БанковскийСчетГрузополучателя, ДанныеШапки.Дата);
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОГрузополучателе) Тогда
			ДанныеГрузополучателя = ПолучитьДанныеУчастникаУПД(СведенияОГрузополучателе, "Факт");
			СтрокаГрузополучателя = ТаблицаГрузополучателей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГрузополучателя, ДанныеГрузополучателя);
		КонецЕсли;
		ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаГрузополучателей);
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузополучателей, "СведенияОГрузополучателе");
	КонецЕсли;
	
	// Выводим данные покупателя. 
	СведенияОПокупателе = "";
	Если НЕ ЭтоКомиссия Тогда 
		СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент, ДанныеШапки.БанковскийСчетКонтрагента, ДанныеШапки.Дата);
		Если Не ПустаяСтрока(ДанныеШапки.КПППокупателя) Тогда
			СведенияОПокупателе.КПП = ДанныеШапки.КПППокупателя;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда		
			СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Контрагент, ДанныеШапки.БанковскийСчетКонтрагента, ДанныеШапки.Дата);
			Если Не ПустаяСтрока(ДанныеКонтрагента.КПППокупателя) Тогда
				СведенияОПокупателе.КПП = ДанныеКонтрагента.КПППокупателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОПокупателе) Тогда
		ТаблицаПокупателей = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОПокупателе");
		ТаблицаПокупателей.Колонки.Добавить("СведенияОбУчастнике");
		ДанныеПокупателя = ПолучитьДанныеУчастникаУПД(СведенияОПокупателе, "Юр");
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, ДанныеПокупателя);
		ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаПокупателей);
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПокупателей, "СведенияОПокупателе");
	КонецЕсли;	
		
	Если ЭтоКомиссия Тогда
		// Получателем данного счета-фактуры является комиссионер. Поместим данные о получателе в доп. данные.
		СведенияОКомиссионере = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент, ДанныеШапки.БанковскийСчетКонтрагента, ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере", "Юр", ДанныеШапки.Дата);
	КонецЕсли;
	
	СоставительДокументаНаименование = СведенияОПоставщике.ПолноеНаименование
		+ ?(ЗначениеЗаполнено(СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокументаНаименование);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога");
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Признак");
	ТаблицаТоваров.Колонки.Добавить("ТоварКод");
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор");
	ТаблицаТоваров.Колонки.Добавить("КодВидаТовара");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировке");
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	ЕстьРаботы = Ложь;
	
	ИспользоватьНаборы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;
	
	ТаблицаКодовМаркировки = Неопределено;
	СтруктураДанных.Свойство("Маркировка", ТаблицаКодовМаркировки);
	
	ЗаполнениеКодаТовара = СтруктураЭД.ВариантыЗаполненияПолей.ТоварКод;
	ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(СведенияОПокупателе.СтранаРегистрации, ДанныеШапки.Дата);
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	ВыборкаДляСопоставления = ВыборкаДляСопоставленияНоменклатуры(ДокументОтгрузки);
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
		
	Пока СтрокаТовары.Следующий() Цикл
		
		Если ИспользоватьНаборы Тогда
			Если СтрокаТовары.ЭтоНабор и СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах <> Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(СтрокаТовары.Номенклатура) или ЗначениеЗаполнено(СтрокаТовары.НоменклатураНаименование))  Тогда
			Продолжить;
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			Если СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар 
				или СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
				ЕстьТовары = Истина;
			ИначеЕсли СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЕстьУслуги = Истина;
			ИначеЕсли СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				ЕстьРаботы = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СуммаСНДС   = Окр(СтрокаТовары.СуммаСНДС, 2);
		СуммаНДС    = Окр(СтрокаТовары.СуммаНДС, 2);
		СуммаБезНДС = Окр(СтрокаТовары.СуммаБезНДС, 2);
		
		НовСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовары);
		
		НовСтрока.ТоварНаименование  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование
			) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru = ' (возвратная тара)'"), "");
			
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			НовСтрока.ТоварИдентификатор = Строка(СтрокаТовары.Номенклатура.УникальныйИдентификатор());
		КонецЕсли;
		НовСтрока.НалоговаяСтавка    = СтрокаТовары.СтавкаНДС;
			
		НовСтрока.ЦенаЗаЕдиницуИзмерения    = Окр(СтрокаТовары.Цена, 2);
		НовСтрока.СтоимостьТоваровБезНалога = СуммаБезНДС;
		НовСтрока.СуммаНалога               = СуммаНДС;
		НовСтрока.СтоимостьТоваровСНалогом  = СуммаСНДС;
		
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.НалоговаяСтавка          = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНалога              = 0;
			НовСтрока.СтоимостьТоваровСНалогом = 0;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТовары.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ДокументРеализации = СтрокаТовары.Ссылка.ДокументОснование;
		Иначе
			ДокументРеализации = СтрокаТовары.Ссылка;
		КонецЕсли;
		Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если СтрокаТовары.НомерСтроки > 0 Тогда
				СтрокаТабЧасти = ДокументРеализации.Товары[СтрокаТовары.НомерСтроки - 1];
			Иначе
				СтрокаТабЧасти = ДокументРеализации.Товары[СтрокаТовары.НомерСтроки];
			КонецЕсли;	
			УпаковкаИзДокумента = СтрокаТабЧасти.Упаковка;
			Если УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
				УпаковкаИзДокумента = ЭлектронноеВзаимодействиеУТВызовСервера.ВернутьЕдиницуХранения(СтрокаТабЧасти.Номенклатура)
			КонецЕсли;
		Иначе
			УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();					
		КонецЕсли;
		
		// Сопоставление.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
		КонецЕсли;
		
		Если Не ВидСчетаФактуры = "Авансовый" Тогда
			НовСтрока.ЕдиницаИзмеренияКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
			НовСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияНаименование);
			//Анализ вариантов заполнения
			Если ЗаполнениеКодаТовара = "Штрихкод" И НовСтрока.Сопоставление.Свойство("ШтрихкодКомбинации") Тогда
				НовСтрока.ТоварКод = НовСтрока.Сопоставление.ШтрихкодКомбинации;
			Иначе
				НовСтрока.ТоварКод = СтрокаТовары.НоменклатураКод;
			КонецЕсли;
			//Конец анализа вариантов заполнения			
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхождения) Тогда
			НовСтрока.СтранаПроисхожденияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СтранаПроисхождения, "Наименование");
		КонецЕсли;
		
		НовСтрока.Признак = ОпределитьПризнакТовара(СтрокаТовары.Номенклатура, ДокументОтгрузки);
		
		Если Не ЭтоКомиссия 
			 И Не ВидСчетаФактуры = "Авансовый"   
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.АктВыполненныхРабот")
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.КорректировкаРеализации") 
			 И ЗначениеЗаполнено(СтрокаТовары.КодТНВЭД) И ВыводитьКодыТНВЭД Тогда
			 
			НовСтрока.КодВидаТовара = СтрокаТовары.КодТНВЭД.Код;
		ИначеЕсли ВидСчетаФактуры = "Авансовый" 
			И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.КодТНВЭД) И ВыводитьКодыТНВЭД Тогда
			
			НовСтрока.КодВидаТовара = СтрокаТовары.Номенклатура.КодТНВЭД.Код;
		КонецЕсли;	
			
		//Заполнение Таможенной декларации
		Если ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
			СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
			СтрокаТД.ТаможеннаяДекларацияНомер = СокрЛП(Строка(СтрокаТовары.НомерГТД));
			Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхожденияКод) Тогда
				СтрокаТД.СтранаПроисхожденияКод = СтрокаТовары.СтранаПроисхожденияКод;
			КонецЕсли;
			НовСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОТаможеннойДекларации, "СтранаПроисхожденияКод",,,
				НСтр("ru = 'Не заполнен код страны происхождения'"));			
		КонецЕсли;
		//Конец заполнения Таможенной декларации
		
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке_2019(НовСтрока, СтрокаТовары, ТаблицаКодовМаркировки);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество",,, НСтр("ru = 'Не указано количество товара в табличной части'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияНаименование",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении страны происхождения в сведениях по ГТД. Возможные причины:
		|	- не заполнена колонка ""Страна происхождения""
		|	- указанной страны нет в классификаторе стран мира'");
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", ТекстОшибки);
	
	СоставСодержания = Новый Массив;
	Если Не ВидСчетаФактуры = "Авансовый" Тогда
		Если ЕстьТовары Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
		КонецЕсли;
		Если ЕстьУслуги Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
		КонецЕсли;
		Если ЕстьРаботы Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Работы выполнены в полном объеме.'"));
		КонецЕсли;
		СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	Иначе
		СоставСодержания.Добавить(НСтр("ru = 'Регистрация счет-фактуры на аванс.'"));
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	//Заполним документы основания.
	Если ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.КорректировкаРеализации")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ОтчетКомиссионера")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ОтчетКомитенту")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") 
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
			и Не ВидСчетаФактуры = "Авансовый" Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтгрузки, "ЗаказКлиента");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", МассивДокументовОснований);
	КонецЕсли;	
		
	Если ДанныеШапки.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеШапки.Дата);
	
	Если Не ВидСчетаФактуры = "Авансовый" Тогда
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
		
		Если ЗначениеЗаполнено(ДанныеШапки.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеШапки.ДоверенностьДата)
			И (ЗначениеЗаполнено(ДанныеШапки.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеШапки.ДоверенностьЛицо)) Тогда
			
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДокументНаименование = НСтр("ru = 'по доверенности'");
			НоваяСтрока.ДокументНомер = ДанныеШапки.ДоверенностьНомер;
			НоваяСтрока.ДокументДата = ДанныеШапки.ДоверенностьДата;
			НоваяСтрока.ДокументДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'выданной %1 %2'"),
					ДанныеШапки.ДоверенностьВыдана,
					ДанныеШапки.ДоверенностьЛицо);
					
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
				НСтр("ru = 'Необходимо указать дату доверенности.'"));
					
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеШапки.Основание)
			И ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата) Тогда
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			Если СтрНайти(ДанныеШапки.Основание, "№") Тогда
				СтрокаНаименование = Лев(ДанныеШапки.Основание, СтрНайти(ДанныеШапки.Основание, "№") - 2);
				Если ПустаяСтрока(СтрокаНаименование) Тогда
					СтрокаНаименование = "Договор";
				КонецЕсли;
			Иначе
				СтрокаНаименование = ДанныеШапки.Основание;
			КонецЕсли;
			НоваяСтрока.ДокументНаименование = СтрокаНаименование;
			НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
			НоваяСтрока.ДокументДата = ДанныеШапки.ОснованиеДата;
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
				НСтр("ru = 'Необходимо указать дату договора.'"));
			
		КонецЕсли;
		
		Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Если ЗначениеЗаполнено(ДокументОтгрузки.ДокументПоступления) Тогда
				ДокументПоступления = ДокументОтгрузки.ДокументПоступления;
				Если ЗначениеЗаполнено(ДокументПоступления.ДатаВходящегоДокумента) И ЗначениеЗаполнено(ДокументПоступления.НомерВходящегоДокумента) Тогда
					НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
					НоваяСтрока.ДокументНаименование = "Входящий электронный документ";					
					НоваяСтрока.ДокументНомер = ДокументПоступления.НомерВходящегоДокумента;
					НоваяСтрока.ДокументДата = ДокументПоступления.ДатаВходящегоДокумента;
					
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
						НСтр("ru = 'Необходимо указать дату документа поступления.'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОснованиеОтгрузкиТоваров) Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
	    КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
			ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеШапки.Кладовщик);
			Если ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика)
				И ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", ФИО.Отчество);
			ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик не работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСчетаФактурыУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	Если Не ЗначениеЗаполнено(ДанныеШапки.Ссылка) Тогда
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ПодробныйТекстОшибки = ("ru = 'Ошибка при формирование ЭД. Ошибка в документе-основании.'");
		ТекстСообщения = НСтр("ru = 'Невозможно сформировать ЭД. Проверьте корректность заполнения данных в счете-фактуре и документе-основании.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		Отказ = Истина;
		Возврат
	КонецЕсли;	
	
	Если СтруктураДанных.Свойство("СчетФактураНаАванс") И СтруктураДанных.СчетФактураНаАванс Тогда
		ВидСчетаФактуры = "Авансовый";
	Иначе
		ВидСчетаФактуры = "Реализация";
	КонецЕсли;
	
	СчетФактура = ДанныеШапки.Ссылка;	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры",	СчетФактура);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);
	ДокументыОснования = Новый Массив;
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" или ВидСчетаФактуры = "Авансовый" Тогда
		ДокументыОснования.Добавить(СчетФактура.ДокументОснование);		
	Иначе
		Для Каждого СтрокаТЧ Из СчетФактура.ДокументыОснования Цикл
			ДокументыОснования.Добавить(СтрокаТЧ.ДокументОснование);
		КонецЦикла;	
		Если ДанныеШапки.Исправление И ЗначениеЗаполнено(СчетФактура.СчетФактураОснование) Тогда
			ДокументыОснования.Добавить(СчетФактура.СчетФактураОснование);
		КонецЕсли;		
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	ОбстоятельстваФормированияСФ = "";
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" Тогда
		ОбстоятельстваФормированияСФ = "3";
	ИначеЕсли ВидСчетаФактуры = "Авансовый" Тогда
		ОбстоятельстваФормированияСФ = "2";
	ИначеЕсли ВидСчетаФактуры = "Реализация" Тогда
		ОбстоятельстваФормированияСФ = "1";
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ", ОбстоятельстваФормированияСФ);
	
	Если ДанныеШапки.ПредставлениеДокумента <> "счет-фактура комиссионера" Тогда
		Если ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		
		ПлатежныеДокументы = Новый ТаблицаЗначений;
		ПлатежныеДокументы.Колонки.Добавить("НомерСтроки");
		ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
		ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
		
		Если ВидСчетаФактуры = "Реализация" Тогда
			Для Каждого СтрокаПРД Из СчетФактура.ПлатежноРасчетныеДокументы Цикл
				НоваяСтрока = ПлатежныеДокументы.Добавить();
				НоваяСтрока.НомерСтроки = СтрокаПРД.НомерСтроки;
				НоваяСтрока.НомерПРД    = СтрокаПРД.НомерПлатежноРасчетногоДокумента;
				НоваяСтрока.ДатаПРД     = СтрокаПРД.ДатаПлатежноРасчетногоДокумента;
			КонецЦикла;
		Иначе
			НоваяСтрока = ПлатежныеДокументы.Добавить();
			НоваяСтрока.НомерСтроки = 1;
			НоваяСтрока.НомерПРД    = СчетФактура.НомерПлатежноРасчетногоДокумента;
			НоваяСтрока.ДатаПРД     = СчетФактура.ДатаПлатежноРасчетногоДокумента;
		КонецЕсли;	
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", ДатаКИ = Неопределено) Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);

	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
			
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН", СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации", СведенияОбУчастнике.Свидетельство);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия", СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя", СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество", СведенияОбУчастнике.Отчество);
			
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН", СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия", СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя", СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество", СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ВидАдреса + "АдресОрганизации"].Ссылка;
	ИначеЕсли ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ВидАдреса + "АдресКонтрагента"].Ссылка;
	Иначе
		ВидКонтактнойИнформации = Неопределено;
	КонецЕсли;
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации", СведенияОбУчастнике.Ссылка);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.Телефон",
									СведенияОбУчастнике.Телефоны);
	КонецЕсли;

	Если ЗначениеЗаполнено(СведенияОбУчастнике.ЭлектроннаяПочта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
									СведенияОбУчастнике.ЭлектроннаяПочта);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
				НомерСчета);
				
		Банк = ""; БИК = ""; КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
										БанкНаименование);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
										БИК);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
										КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.КодПоОКПО) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КодОКПО", СведенияОбУчастнике.КодПоОКПО);
	КонецЕсли;
		
КонецПроцедуры

Функция ПодготовитьСтруктуруДляСчетаФактурыУПД_2019(ДеревоДанных) Экспорт
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Номер", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаСоставления",  ТекущаяДатаСеанса());
	ДанныеОбъекта.Вставить("Дата", ТекущаяДатаСеанса());
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"), 
			ДанныеОбъекта.Номер, Формат(ДанныеОбъекта.ДатаСоставления,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Сведения о поставщике.
	Для Каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		ДанныеОбъекта.Вставить("Контрагент", КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
	// Сведения о покупателе.
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
	// Если счет-фактура на аванс.
	ВидСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		КодВидаОперации = "02";
	Иначе
		КодВидаОперации = "01";
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	ДанныеОбъекта.Вставить("ПолученВЭлектронномВиде", Истина);
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;	
	
	// Получим документы-основания
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		МассивДокументовОснований = Новый Массив;		
		Если ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда 
			Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
				МассивДокументовОснований.Добавить(ДокументОснования);
			КонецЦикла;
		Иначе
			МассивДокументовОснований.Добавить(ДокументыОснованияСчетаФактуры);
		КонецЕсли;
		ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);		
	КонецЕсли;
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ВалютаОбъекта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ВалютаОбъекта, КодВалюты);
	ДанныеОбъекта.Вставить("Валюта", ВалютаОбъекта);
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	ДанныеОбъекта.Вставить("СуммаНДС", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога"));
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеОбъекта);
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		Авансы = Документы.СчетФактураПолученныйАванс.ПустаяСсылка().Авансы.Выгрузить();
		СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
			НоваяСтрока = Авансы.Добавить();
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ДанныеОбъекта.Дата, Истина), СтавкаНДС);
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЦикла;
		ДанныеДляОбъекта.Вставить("Авансы", Авансы);
	КонецЕсли;
	
	Если ВидСчетаФактуры = "Реализация" Тогда
		ЗаполнитьСуммыДляСчетаФактуры(ДанныеДляОбъекта, ДеревоДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугУПД_2019(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("Курс", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"), 
			ДанныеОбъекта.Номер, Формат(ДанныеОбъекта.ДатаСоставления,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Сведения о поставщике.
	Для Каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		Контрагент	= КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки");	
		Прервать;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	КонецЕсли;
	
	// Сведения о покупателе.
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
	// Сведения об основании.
	СведенияОДокументеОтгрузки = ДеревоДанных.Строки.Найти("ОснованиеОтгрузкиТоваров", "ПолныйПуть");
	Для Каждого СтрокиСведений Из СведенияОДокументеОтгрузки.Строки Цикл
		ДанныеОбъекта.Вставить("ДатаДокументаОснования", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокиСведений, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДата"));
		ДанныеОбъекта.Вставить("НомерДокументаОснования", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокиСведений, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНомер"));
		Прервать;
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Признак = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		
		НоваяСтрока = Товары.Добавить();
	
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
			Если НоваяСтрока.Цена = 0 Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтоИмущество = Ложь;
		Если ЗначениеЗаполнено(Признак) Тогда
			ЭтоИмущество = ?(Признак = "1", Истина, Ложь);
		Иначе
			ЭтоИмущество = Истина;
		КонецЕсли;
		
		ТипНоменклатуры = НоваяСтрока.Номенклатура.ТипНоменклатуры;
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			НоваяСтрока.СписатьНаРасходы = Истина;
			ЭтоИмущество = Ложь;
		КонецЕсли;
		
		Если ЭтоИмущество Тогда
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
											"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда				
				НомерТаможеннойДекларации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				КодСтраныПроисхождения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");				
				Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
					ТаможеннаяДекларация = Неопределено;
					СтранаПроисхождения = Неопределено;
					ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
					НайтиТаможенныеДекларации(ТаможеннаяДекларация, НомерТаможеннойДекларации, СтранаПроисхождения); 
					Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
						НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
						ПараметрыДляЗаполнения = Справочники.НомераГТД.ПараметрыДляЗаполненияЭлемента(НомерТаможеннойДекларации, СтранаПроисхождения);
						ПараметрыДляЗаполнения.ЗаполнитьПорядковыйНомерТовараАвтоматически = Истина;
						НоваяТаможеннаяДекларация.Заполнить(ПараметрыДляЗаполнения);
						НоваяТаможеннаяДекларация.Записать();
						ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
					КонецЕсли;
					НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ШтрихкодыУпаковок, СведенияОТоваре);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	ДанныеДляЗаполнения.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслугУПД_2019(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("Курс", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"), 
			ДанныеОбъекта.Номер, Формат(ДанныеОбъекта.ДатаСоставления,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Сведения о поставщике.
	Для Каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		Контрагент	= КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки");	
		Прервать;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	КонецЕсли;
	
	// Сведения о покупателе.
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ОрганизацияПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Организация = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Организации.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Контрагент = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Контрагенты.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		
		Фамилия  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя      = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		
		ЭлементыИмени = Новый Массив;
		Если ЗначениеЗаполнено(Фамилия) Тогда
			ЭлементыИмени.Добавить(Фамилия);
		КонецЕсли;
		Если ЗначениеЗаполнено(Имя) Тогда
			ЭлементыИмени.Добавить(Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(Отчество) Тогда
			ЭлементыИмени.Добавить(Отчество);
		КонецЕсли;
		ПолноеНаименование = СтрСоединить(ЭлементыИмени, " ");
		
		Если ЗначениеЗаполнено(ИНН) Или ЗначениеЗаполнено(НаименованиеПолное) Тогда 
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН";
			Если ЗначениеЗаполнено(ИНН) Тогда
				Запрос.УстановитьПараметр("ИНН", ИНН);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.ИНН = &ИНН", "Контрагенты.НаименованиеПолное = &НаименованиеПолное");
				Запрос.УстановитьПараметр("НаименованиеПолное", ПолноеНаименование);
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Процедура ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаУчастников, ПутьКУчастнику = "")
	
	ПутьКПолю = ?(ЗначениеЗаполнено(ПутьКУчастнику), ПутьКУчастнику + ".", "");
	
	Для каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		
		Сведения = СтрокаТаблицы.СведенияОбУчастнике;
		Если Не ЗначениеЗаполнено(Сведения) Тогда
			Продолжить;
		КонецЕсли;
		
		Участник = ?(ЗначениеЗаполнено(ПутьКУчастнику), СтрокаТаблицы[ПутьКУчастнику], СтрокаТаблицы);
		
		Если Участник.ТипУчастника.Свойство("ЮЛ") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.НаименованиеОрганизации", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.ИНН", Сведения.Ссылка, "Объект.ИНН");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.ИНН", Сведения.Ссылка, "Объект.КПП");
				
		ИначеЕсли Участник.ТипУчастника.Свойство("ИЛ") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИЛ.НаименованиеОрганизации", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
		ИначеЕсли Участник.ТипУчастника.Свойство("ИП") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.ИНН", Сведения.Ссылка, "Объект.ИНН");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.Фамилия", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.Имя", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.Отчество", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			Если ТипЗнч(Сведения.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
				
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
					ПутьКПолю + "ТипУчастника.ИП.СвидетельствоОГосРегистрации", Сведения.Ссылка, "Объект.СвидетельствоСерияНомер");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПостфиксПоляАдрес = ?(ТипЗнч(Сведения.Ссылка) = Тип("СправочникСсылка.Контрагенты"), "Контрагента", "Организации");
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			ПутьКПолю + "Адрес.АвтоматическиЗаполняемый", Сведения.Ссылка, "КонтактнаяИнформацияПолеЮрАдрес" + ПостфиксПоляАдрес);
			
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			ПутьКПолю + "КонтактныеСведения.Телефон", Сведения.Ссылка);
			
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			ПутьКПолю + "КонтактныеСведения.ЭлектроннаяПочта", Сведения.Ссылка);
			
		НомерСчета = "";
		Если Сведения.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
			
			Если Сведения.Свойство("БанковскийСчетСсылка") Тогда
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
					ПутьКПолю + "БанковскиеРеквизиты.НомерСчета", Сведения.БанковскийСчетСсылка, "Объект.НомерСчета");
			КонецЕсли;
				
			Банк = ""; БИК = ""; КоррСчет = "";
			Если Сведения.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
						ПутьКПолю + "БанковскиеРеквизиты.НаименованиеБанка", Сведения.БанкСсылка, "Объект.Наименование");
				КонецЕсли;
			КонецЕсли;
			Если Сведения.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
						ПутьКПолю + "БанковскиеРеквизиты.БИКБанка", Сведения.БанкСсылка, "Объект.Код");
				КонецЕсли;
			КонецЕсли;
			Если Сведения.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
						ПутьКПолю + "БанковскиеРеквизиты.КорреспондентскийСчетБанка", Сведения.БанкСсылка, "Объект.КоррСчет");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		КодПоОКПО = "";
		Если Сведения.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "КодОКПО", Сведения.Ссылка, "Объект.КодПоОКПО");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеУчастникаУПД(Знач СведенияОбУчастнике, ВидАдреса = "Юр")
	
	Данные = Новый Структура("СведенияОбУчастнике", СведенияОбУчастнике);
	
	Данные.Вставить("ТипУчастника", Новый Структура);
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		Данные.ТипУчастника.Вставить("ЮЛ", Новый Структура);
		Данные.ТипУчастника.ЮЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		Данные.ТипУчастника.ЮЛ.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ЮЛ.Вставить("КПП", СведенияОбУчастнике.КПП);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		Данные.ТипУчастника.Вставить("ИЛ", Новый Структура);
		Данные.ТипУчастника.ИЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		Данные.ТипУчастника.Вставить("ИП", Новый Структура);
		Данные.ТипУчастника.ИП.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ИП.Вставить("Фамилия", СведенияОбУчастнике.Фамилия);
		Данные.ТипУчастника.ИП.Вставить("Имя", СведенияОбУчастнике.Имя);
		Данные.ТипУчастника.ИП.Вставить("Отчество", СведенияОбУчастнике.Отчество);
		Данные.ТипУчастника.ИП.Вставить("СвидетельствоОГосРегистрации",  СведенияОбУчастнике.Свидетельство);
		
	Иначе
		
		Данные.ТипУчастника.Вставить("ФЛ", Новый Структура);
		Данные.ТипУчастника.ФЛ.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ФЛ.Вставить("Фамилия", СведенияОбУчастнике.Фамилия);
		Данные.ТипУчастника.ФЛ.Вставить("Имя", СведенияОбУчастнике.Имя);
		Данные.ТипУчастника.ФЛ.Вставить("Отчество", СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ВидАдреса + "АдресОрганизации"].Ссылка;
	ИначеЕсли ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ВидАдреса + "АдресКонтрагента"].Ссылка;
	Иначе
		ВидКонтактнойИнформации = Неопределено;
	КонецЕсли;
		
	Данные.Вставить("Адрес", Новый Структура);
	Данные.Адрес.Вставить("АвтоматическиЗаполняемый", Новый Структура);
	Данные.Адрес.АвтоматическиЗаполняемый.Вставить("ОбъектКонтактнойИнформации", СведенияОбУчастнике.Ссылка);
	Данные.Адрес.АвтоматическиЗаполняемый.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	
	Данные.Вставить("КонтактныеСведения", Новый Структура);
	
	Телефон = "";
	Если СведенияОбУчастнике.Свойство("Телефоны", Телефон) И ЗначениеЗаполнено(Телефон) Тогда
		Данные.КонтактныеСведения.Вставить("Телефон", Телефон);
	КонецЕсли;
	
	ЭлектроннаяПочта = "";
	Если СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", ЭлектроннаяПочта) И ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Данные.КонтактныеСведения.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	КонецЕсли;
	
	Данные.Вставить("БанковскиеРеквизиты", Новый Структура);
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		
		Данные.БанковскиеРеквизиты.Вставить("НомерСчета", НомерСчета);
		
		Банк = ""; БИК = ""; КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
			
			Данные.БанковскиеРеквизиты.Вставить("НаименованиеБанка", БанкНаименование);
			
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("БИКБанка", БИК);
			
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("КорреспондентскийСчетБанка", КоррСчет);
			
		КонецЕсли;
	КонецЕсли;
	
	КодПоОКПО = "";
	Если СведенияОбУчастнике.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
	
		Данные.Вставить("КодОКПО", КодПоОКПО);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область АктОРасхождениях

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляАктОРасхождениях.
Процедура ЗаполнитьДанныеДляАктОРасхождениях(Знач СсылкаНаОбъект, Знач СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура();
	
	СтруктураДанных = АктОРасхожденияхПослеПриемкиЛокализация.ПолучитьДанныеДляПечатнойФормыТОРГ2(ПараметрыПечати, МассивОбъектов);
	ВыборкаШапка = СтруктураДанных.ДанныеПечати.Выбрать();
	ВыборкаШапка.Следующий();
	
	// Наименование документа
	НаименованиеДокумента = НСтр("ru = 'Акт об установленном расхождении по количеству и качеству при приемке товарно-материальных ценностей'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НаименованиеДокумента", НаименованиеДокумента);
	
	// Номер документа.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерДокумента", ВыборкаШапка.НомерДокумента);
	
	// Дата документа.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаДокумента", ВыборкаШапка.ДатаДокумента);
		
	// Покупатель / Составитель.
	Покупатель = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.Организация) Тогда
		
		Покупатель = ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Организация, , ВыборкаШапка.ДатаДокумента);
		
		// Покупатель.
		ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, Покупатель, "Покупатель", "Юр", ВыборкаШапка.ДатаДокумента);
		// Грузополучатель.
		ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, Покупатель, "Грузополучатель", "Юр", ВыборкаШапка.ДатаДокумента);		
		// Составитель.
		СоставительДокументаНаименование = Покупатель.ПолноеНаименование
			+ ?(ЗначениеЗаполнено(Покупатель.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), Покупатель.ИНН, Покупатель.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1'"), Покупатель.ИНН));
				
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			ВыборкаШапка.Ссылка, "Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "СоставительДокументаНаименование", СоставительДокументаНаименование, ПараметрыОбработкиОшибок);
	Иначе
		// Покупатель.
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			ВыборкаШапка.Ссылка, "Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "Покупатель", Покупатель, ПараметрыОбработкиОшибок);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "Грузополучатель", Покупатель, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	// Продавец.
	Продавец = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.Поставщик) Тогда
		Продавец = ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Поставщик, , ВыборкаШапка.ДатаДокумента);
		ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, Продавец, "Продавец", "Юр", ВыборкаШапка.ДатаДокумента);
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			ВыборкаШапка.Ссылка, "Объект.Контрагент");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "Продавец", Продавец, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	// Грузоотправитель.
	Грузоотправитель = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.Грузоотправитель) Тогда
		Грузоотправитель = ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Грузоотправитель, , ВыборкаШапка.ДатаДокумента);
		ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, Грузоотправитель, "Грузоотправитель", "Юр", ВыборкаШапка.ДатаДокумента);
	КонецЕсли;
	
	// Страховая компания.
	СтраховаяКомпания = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.СтраховаяКомпания) Тогда
		СтраховаяКомпания = ПолучитьДанныеЮрФизЛица(ВыборкаШапка.СтраховаяКомпания, , ВыборкаШапка.ДатаДокумента);
		ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, СтраховаяКомпания, "СтраховаяКомпания", "Юр", ВыборкаШапка.ДатаДокумента);
	КонецЕсли;
	
	// Сведения по транспортным документам.
	ДокументОснование = Неопределено;
	СведенияПоТранспортнымДокументам = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияПоТранспортнымДокументам");
	ВыборкаТовары = СтруктураДанных.ДанныеТовары.Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаТовары.КоличествоПоДокументам) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СведенияПоТранспортнымДокументам.Добавить();
		НоваяСтрока.ВидУпаковки = ВыборкаТовары.ВидУпаковки;
		НоваяСтрока.НаименованиеГруза = ВыборкаТовары.НоменклатураНаименование;
		НоваяСтрока.ЕдиницаИзмеренияКод = ВыборкаТовары.ЕдиницаИзмеренияКод;
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТовары.ЕдиницаИзмеренияНаименование;
		Если ЗначениеЗаполнено(ВыборкаТовары.ДокументОснование) Тогда
			ДокументОснование = ВыборкаТовары.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияПоТранспортнымДокументам, "СведенияПоТранспортнымДокументам");
	
	// Сопроводительный документ.
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			Если ЗначениеЗаполнено(ДокументОснование.НомерВходящегоДокумента) и ЗначениеЗаполнено(ДокументОснование.ДатаВходящегоДокумента) Тогда 
				СопроводительныйДокументНаименование = ?(ЗначениеЗаполнено(ДокументОснование.НаименованиеВходящегоДокумента),
				ДокументОснование.НаименованиеВходящегоДокумента, "Счет-фактура");
			Иначе
				СопроводительныйДокументНаименование = "БСД";
			КонецЕсли;
		Иначе
			СопроводительныйДокументНаименование = "БСД";
		КонецЕсли;
		СопроводительныйДокументНомер = ?(ЗначениеЗаполнено(ДокументОснование.НомерВходящегоДокумента),
			ДокументОснование.НомерВходящегоДокумента, "б/н");
		СопроводительныйДокументДата = ?(ЗначениеЗаполнено(ДокументОснование.ДатаВходящегоДокумента),
			ДокументОснование.ДатаВходящегоДокумента, "");
		Если ЗначениеЗаполнено(СопроводительныйДокументНаименование) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, "СведенияОбОсмотреГруза.СопроводительныйДокумент.Наименование", СопроводительныйДокументНаименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(СопроводительныйДокументНомер) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, "СведенияОбОсмотреГруза.СопроводительныйДокумент.Номер", СопроводительныйДокументНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(СопроводительныйДокументДата) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, "СведенияОбОсмотреГруза.СопроводительныйДокумент.Дата", СопроводительныйДокументДата);
		КонецЕсли;
	КонецЕсли;
	
	// Сведения о времени приемки.
	ОбщийПуть = "СведенияОВремениПриемки.";
	ТаблицаПриемкиТоваров = ВыборкаШапка.ТаблицаПриемкиТоваров.Выбрать();
	Если ТаблицаПриемкиТоваров.Следующий() Тогда
		Если ЗначениеЗаполнено(ТаблицаПриемкиТоваров.ДатаПрибытияВПунктНазначения) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ОбщийПуть + "ДатаПрибытияВПунктНазначения", ТаблицаПриемкиТоваров.ДатаПрибытияВПунктНазначения);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаПриемкиТоваров.ДатаВыдачи) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ОбщийПуть + "ДатаВыдачиОрганизациейТранспорта", ТаблицаПриемкиТоваров.ДатаВыдачи);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаПриемкиТоваров.ДатаВскрытия) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ОбщийПуть + "ДатаВскрытияТранспортныхСредств", ТаблицаПриемкиТоваров.ДатаВскрытия);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаПриемкиТоваров.ДатаДоставкиНаСклад) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ОбщийПуть + "ДатаДоставкиНаСкладПолучателя", ТаблицаПриемкиТоваров.ДатаДоставкиНаСклад);
		КонецЕсли;
	КонецЕсли;
	
	// Обстоятельства приемки.
	ОбщийПуть = "ОбстоятельстваПриемки.";
	Если ЗначениеЗаполнено(ВыборкаШапка.УсловияХраненияТовараДоВскрытия) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "УсловияХраненияТоваровНаСкладеПолучателя", ВыборкаШапка.УсловияХраненияТовараДоВскрытия);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаШапка.СостояниеТарыИУпаковки) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "СостояниеТарыУпаковки", ВыборкаШапка.СостояниеТарыИУпаковки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаШапка.СпособОпределенияКоличества) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "ТипОпределенияКоличества", ВыборкаШапка.СпособОпределенияКоличества);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаШапка.ДополнительнаяИнформация) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "ДополнительныеСведения", ВыборкаШапка.ДополнительнаяИнформация);
	КонецЕсли;
	//  Транспортный документ.
	Если ЗначениеЗаполнено(ВыборкаШапка.НомерЖелезнодорожнойНакладной) И ЗначениеЗаполнено(ВыборкаШапка.ДатаЖелезнодорожнойНакладной) Тогда
		ТранспортныйДокументНаименование = НСтр("ru = 'Железнодорожная накладная'");
		ТранспортныйДокументНомер = ?(ЗначениеЗаполнено(ВыборкаШапка.НомерЖелезнодорожнойНакладной),
			ВыборкаШапка.ТранспортныйДокументНомер,  НСтр("ru = 'б/н'"));
		ТранспортныйДокументДата = ?(ЗначениеЗаполнено(ВыборкаШапка.ДатаЖелезнодорожнойНакладной),
			ВыборкаШапка.ТранспортныйДокументДата, "");
	Иначе
		ТранспортныйДокументНаименование =  НСтр("ru = 'БСД'");
		ТранспортныйДокументНомер =  НСтр("ru = 'б/н'");
		ТранспортныйДокументДата = "";
	КонецЕсли;	
	Если ЗначениеЗаполнено(ТранспортныйДокументНаименование) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "ТранспортныйДокумент.Наименование", ТранспортныйДокументНаименование);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТранспортныйДокументНомер) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "ТранспортныйДокумент.Номер", ТранспортныйДокументНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТранспортныйДокументДата) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "ТранспортныйДокумент.Дата", ТранспортныйДокументДата);
	КонецЕсли;
	
	// Сведения о лице, принявшем товар.
	ОбщийПуть = "СведенияОЛицеПринявшемТовар.РаботникОрганизацииПокупателя.";
	Если ЗначениеЗаполнено(ВыборкаШапка.КладовщикПринявшийТовар) Тогда
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ВыборкаШапка.КладовщикПринявшийТовар);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "Фамилия", ФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "Имя", ФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "Отчество", ФИО.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "ОснованиеПолномочий", НСтр("ru = 'Должностные обязанности'"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "Должность", НСтр("ru = 'Кладовщик'"));
	КонецЕсли;
	
	// Краткое описание события.
	ОписаниеСобытия = НСтр("ru = 'При приемке указанных в документе ценностей (результатов работ) установлены расхождения с сопроводительными документами.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "КраткоеОписаниеСобытия", ОписаниеСобытия);
	
	// Заключение комиссии.
	Если ЗначениеЗаполнено(ВыборкаШапка.ЗаключениеКомиссии) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ЗаключениеКомиссии", ВыборкаШапка.ЗаключениеКомиссии);
	КонецЕсли;
	
	// Результаты приемки.
	РезультатыПриемки = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "РезультатыПриемки");
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(ВыборкаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	
	
	ВыборкаДляСопоставления = ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
		
	ВыборкаТовары.Сбросить();
	Пока ВыборкаТовары.Следующий() Цикл
		
		НоваяСтрока = РезультатыПриемки.Добавить();
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТовары.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.ЕдиницаИзмеренияКод = ВыборкаТовары.ЕдиницаИзмеренияКод;
		НоваяСтрока.ИнформацияОРасхождениях = ВыборкаТовары.КомментарийМенеджера;
		
		НоваяСтрока.Товар = Новый Структура;
		НоваяСтрока.Товар.Вставить("Наименование", ВыборкаТовары.НоменклатураНаименование);
		НоваяСтрока.Товар.Вставить("Характеристика", ВыборкаТовары.ХарактеристикаНаименование);
		НоваяСтрока.Товар.Вставить("Артикул", ВыборкаТовары.Артикул);
		НоваяСтрока.Товар.Вставить("Код", ВыборкаТовары.Код);
		НоваяСтрока.Товар.Вставить("Паспорт", ВыборкаТовары.НомерПаспорта);
		
		Если ЗначениеЗаполнено(ВыборкаТовары.КоличествоПоДокументам) Тогда
			НоваяСтрока.ПоДокументу = Новый Структура;
			НоваяСтрока.ПоДокументу.Вставить("Количество", ВыборкаТовары.КоличествоПоДокументам);
			НоваяСтрока.ПоДокументу.Вставить("Цена", ВыборкаТовары.Цена);
			НоваяСтрока.ПоДокументу.Вставить("СтавкаНДС", ВыборкаТовары.СтавкаНДС);
			НоваяСтрока.ПоДокументу.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоДокументам);
			НоваяСтрока.ПоДокументу.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДСПоДокументам);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТовары.КоличествоПоФакту) Тогда
			НоваяСтрока.ПоФакту = Новый Структура;
			НоваяСтрока.ПоФакту.Вставить("Количество", ВыборкаТовары.КоличествоПоФакту);
			НоваяСтрока.ПоФакту.Вставить("Цена", ВыборкаТовары.ЦенаПоФакту);
			НоваяСтрока.ПоФакту.Вставить("СтавкаНДС", ВыборкаТовары.СтавкаНДС);
			НоваяСтрока.ПоФакту.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоФакту);
			НоваяСтрока.ПоФакту.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДСПоФакту);
		КонецЕсли;
		
		НоваяСтрока.Излишки = Новый Структура;
		НоваяСтрока.Недостача = Новый Структура;
		Если ВыборкаТовары.КоличествоПоФакту > ВыборкаТовары.КоличествоПоДокументам Тогда
			НоваяСтрока.Излишки.Вставить("Количество", ВыборкаТовары.КоличествоПоФакту - ВыборкаТовары.КоличествоПоДокументам);
		ИначеЕсли ВыборкаТовары.КоличествоПоФакту < ВыборкаТовары.КоличествоПоДокументам Тогда
			НоваяСтрока.Недостача.Вставить("Количество", ВыборкаТовары.КоличествоПоДокументам - ВыборкаТовары.КоличествоПоФакту);
		КонецЕсли;
		Если ВыборкаТовары.СуммаНДСПоФакту > ВыборкаТовары.СуммаНДСПоДокументам Тогда
			НоваяСтрока.Излишки.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоФакту - ВыборкаТовары.СуммаНДСПоДокументам);
		ИначеЕсли ВыборкаТовары.СуммаНДСПоФакту < ВыборкаТовары.СуммаНДСПоДокументам Тогда
			НоваяСтрока.Недостача.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоДокументам - ВыборкаТовары.СуммаНДСПоФакту);
		КонецЕсли;
		Если ВыборкаТовары.СуммаСНДСПоФакту > ВыборкаТовары.СуммаСНДСПоДокументам Тогда
			НоваяСтрока.Излишки.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДСПоФакту - ВыборкаТовары.СуммаСНДСПоДокументам);
		ИначеЕсли ВыборкаТовары.СуммаСНДСПоФакту < ВыборкаТовары.СуммаСНДСПоДокументам Тогда
			НоваяСтрока.Недостача.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДСПоДокументам - ВыборкаТовары.СуммаСНДСПоФакту);
		КонецЕсли;
		
		// Сопоставление.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ВыборкаТовары.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ВыборкаТовары.Характеристика);
		ПараметрыОтбора.Вставить("Упаковка", ВыборкаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(ВыборкаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, РезультатыПриемки, "РезультатыПриемки");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктОРасхождениях_ФНС_2019.
Процедура НайтиСоздатьАктОРасхождениях_ФНС_2019(ДеревоДанных, ДокументУчета = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Данные = Новый Структура;
	Для каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
		Путь = СтрокаДерева.ПолныйПуть;
		ДанныеСтроки = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, Путь);
		Данные.Вставить(Путь, ДанныеСтроки);
	КонецЦикла;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ДокументУчета) Тогда
		ДокументОбъект = ДокументУчета.ПолучитьОбъект();
		// Попытка заблокировать документ.
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		// конец попытки заблокировать документ.
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
        КонецЕсли;		
	Иначе
		ДокументОбъект = Документы.АктОРасхожденияхПослеОтгрузки.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// Шапка.
	ДокументОбъект.ОснованиеДляСоставленияАкта = "Входящий электронный документ";	
	ДокументОбъект.Статус = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
	
	СведенияОПродавце = РеквизитыУчастникаАктаОРасхождениях(Данные.Продавец);
	ДокументОбъект.Организация = СсылкаНаОбъектПоИННКПП("Организации", СведенияОПродавце.ИНН, СведенияОПродавце.КПП);
	
	СведенияОПокупателе = РеквизитыУчастникаАктаОРасхождениях(Данные.Покупатель);	
	ДокументОбъект.Контрагент = СсылкаНаОбъектПоИННКПП("Контрагенты", СведенияОПокупателе.ИНН, СведенияОПокупателе.КПП);	
	ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "Партнер"); 
	Если Не ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(ПартнерКонтрагента) Тогда
		ДокументОбъект.Партнер = ПартнерКонтрагента;
	КонецЕсли;	
	
	СведенияОГрузоотправителе = РеквизитыУчастникаАктаОРасхождениях(Данные.Грузоотправитель);
	Грузоотправитель = СсылкаНаОбъектПоИННКПП("Контрагенты", СведенияОГрузоотправителе.ИНН, СведенияОГрузоотправителе.КПП);
	Если ЗначениеЗаполнено(Грузоотправитель) Тогда
		ДокументОбъект.Грузоотправитель = Грузоотправитель.НаименованиеПолное;
	КонецЕсли;
	
	СведенияОСтраховойКомпании = РеквизитыУчастникаАктаОРасхождениях(Данные.СтраховаяКомпания);	
	СтраховаяКомпания = СсылкаНаОбъектПоИННКПП("Контрагенты", СведенияОСтраховойКомпании.ИНН, СведенияОСтраховойКомпании.КПП);
	Если ЗначениеЗаполнено(СтраховаяКомпания) Тогда
		ДокументОбъект.СтраховаяКомпания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтраховаяКомпания, "Партнер");
	КонецЕсли;
	
	ДокументОснование = Неопределено;
	ДокументЗаполненПоОснованию = Ложь;
	СопроводительныйДокумент = Данные.СведенияОбОсмотреГруза.СопроводительныйДокумент;
	Если ЗначениеЗаполнено(СопроводительныйДокумент.Номер) Тогда
		ДокументОснование = НайтиРеализациюТоваровУслуг(ДокументОбъект.Организация, СопроводительныйДокумент.Номер, СопроводительныйДокумент.Дата);
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ЗаполнитьНаОсновании(ДокументОснование, ДокументОбъект);
			ДокументЗаполненПоОснованию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.НомерВходящегоДокумента = Данные.НомерДокумента;
	ДокументОбъект.ДатаВходящегоДокумента = Данные.ДатаДокумента;
	
	ДокументОбъект.МестоПриемкиТовара = Данные.СведенияОбОсмотреГруза.МестоСоставленияДокумента;
	ДокументОбъект.ДатаДоставкиТоваров = Данные.СведенияОбОсмотреГруза.ДатаОсмотра;
	
	ДокументОбъект.УсловияХраненияТовараДоВскрытияНаСкладеПолучателя = Данные.ОбстоятельстваПриемки.УсловияХраненияТоваровНаСкладеПолучателя;
	ДокументОбъект.СостояниеТарыИУпаковки = Данные.ОбстоятельстваПриемки.СостояниеТарыУпаковки;
	ДокументОбъект.СпособОпределенияКоличества = Данные.ОбстоятельстваПриемки.ТипОпределенияКоличества;
	ДокументОбъект.ДополнительнаяИнформация = Данные.ОбстоятельстваПриемки.ДополнительныеСведения;
	
	Приемщик = РеквизитыПриемщикаАктаОРасхождениях(Данные.СведенияОЛицеПринявшемТовар);
	ДокументОбъект.КладовщикПринявшийТовар = Приемщик.Представление;
	
	ДокументОбъект.ЗаключениеКомиссии = Данные.ЗаключениеКомиссии;
	
	// Приемка товаров.
	ДокументОбъект.ПриемкаТоваров.Очистить();
	НоваяСтрока = ДокументОбъект.ПриемкаТоваров.Добавить();	
	НоваяСтрока.ДатаПрибытияВПунктНазначения = Данные.СведенияОВремениПриемки.ДатаПрибытияВПунктНазначения;
	НоваяСтрока.ДатаВыдачиОрганизациейТранспорта = Данные.СведенияОВремениПриемки.ДатаВыдачиОрганизациейТранспорта;
	НоваяСтрока.ДатаВскрытия = Данные.СведенияОВремениПриемки.ДатаВскрытияТранспортныхСредств;
	НоваяСтрока.ДатаДоставкиНаСкладПолучателя = Данные.СведенияОВремениПриемки.ДатаДоставкиНаСкладПолучателя;	
	
	// Товары.
	Если Не ДокументЗаполненПоОснованию Тогда
		ДокументОбъект.Товары.Очистить();
		Для Каждого СтрокаПриемки Из Данные.РезультатыПриемки Цикл
			СтрокаТовара = ДокументОбъект.Товары.Добавить();
			Если ЗначениеЗаполнено(СтрокаПриемки.ПоДокументу.Цена) Тогда
				СтрокаТовара.Цена = СтрокаПриемки.ПоДокументу.Цена;
				СтрокаТовара.СтавкаНДС = СтрокаПриемки.ПоДокументу.СтавкаНДС;
				СтрокаТовара.ЗаполненоПоРеализации = Истина;			
			Иначе
				СтрокаТовара.Цена = СтрокаПриемки.ПоФакту.Цена;
				СтрокаТовара.СтавкаНДС = СтрокаПриемки.ПоФакту.СтавкаНДС;
			КонецЕсли;
			
			СтрокаТовара.КоличествоПоДокументу = СтрокаПриемки.ПоДокументу.Количество;
			СтрокаТовара.КоличествоУпаковокПоДокументу = СтрокаПриемки.ПоДокументу.Количество;
			СтрокаТовара.СуммаПоДокументу = СтрокаПриемки.ПоДокументу.СуммаСНДС - СтрокаПриемки.ПоДокументу.СуммаНДС;
			СтрокаТовара.СуммаНДСПоДокументу = СтрокаПриемки.ПоДокументу.СуммаНДС;
			СтрокаТовара.СуммаСНДСПоДокументу = СтрокаПриемки.ПоДокументу.СуммаСНДС;
			
			СтрокаТовара.Количество = СтрокаПриемки.ПоФакту.Количество;
			СтрокаТовара.КоличествоУпаковок = СтрокаПриемки.ПоФакту.Количество;
			СтрокаТовара.Сумма = СтрокаПриемки.ПоФакту.СуммаСНДС - СтрокаПриемки.ПоФакту.СуммаНДС;
			СтрокаТовара.СуммаНДС = СтрокаПриемки.ПоФакту.СуммаНДС;
			СтрокаТовара.СуммаСНДС = СтрокаПриемки.ПоФакту.СуммаСНДС;
			
			СтрокаТовара.КомментарийКлиента = СтрокаПриемки.ИнформацияОРасхождениях;
			
			Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.НоменклатураИБ) Тогда
				СтрокаТовара.Номенклатура = СтрокаПриемки.Сопоставление.НоменклатураИБ;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.ХарактеристикаИБ) Тогда
				СтрокаТовара.Характеристика = СтрокаПриемки.Сопоставление.ХарактеристикаИБ;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.УпаковкаИБ) Тогда
				СтрокаТовара.Упаковка = СтрокаПриемки.Сопоставление.УпаковкаИБ;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаПриемки Из Данные.РезультатыПриемки Цикл
			СтрокаТовара = ДокументОбъект.Товары.Найти(СтрокаПриемки.Сопоставление.НоменклатураИБ, "Номенклатура");
			Если ЗначениеЗаполнено(СтрокаТовара) Тогда  
				СтрокаТовара.Количество = СтрокаПриемки.ПоФакту.Количество;
				СтрокаТовара.КоличествоУпаковок = СтрокаПриемки.ПоФакту.Количество;
				СтрокаТовара.Сумма = СтрокаПриемки.ПоФакту.СуммаСНДС - СтрокаПриемки.ПоФакту.СуммаНДС;
				СтрокаТовара.СуммаНДС = СтрокаПриемки.ПоФакту.СуммаНДС;
				СтрокаТовара.СуммаСНДС = СтрокаПриемки.ПоФакту.СуммаСНДС;
				
				СтрокаТовара.Реализация = ДокументОснование;	
				СтрокаТовара.Склад = ДокументОснование.Склад;	
				
				СтрокаТовара.КомментарийКлиента = СтрокаПриемки.ИнформацияОРасхождениях;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Если ДокументОбъект.Товары.Итог("СуммаСНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДокументОбъект.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
		ДокументОбъект.Разблокировать();			
		ДокументУчета = ДокументОбъект.Ссылка;
		
		//Запись в Реестр документов
		ДополнительныеСвойства = Новый Структура;
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(ДокументУчета, ДополнительныеСвойства, Ложь);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), ДокументУчета,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных, Отказ) Экспорт

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержитТолькоИзменения", Истина);
	
	СведенияОбОрганизации = Неопределено;
	СведенияОбОрганизации = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(Организация);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Владелец", "Юр", ТекущаяДатаСеанса());
	
	ДанныеДляЭД = ПолучитьДанныеПоТоварам(ТоварыКаталога);
	ДанныеДляЭД.Колонки.Добавить("Сопоставление");
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(ДанныеДляЭД, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	
	
	Для Каждого СтрокаТовара Из ДанныеДляЭД Цикл
		
		Сопоставление = Новый Структура;
		Сопоставление.Вставить("Наименование", СтрокаТовара.Наименование);
		Сопоставление.Вставить("Характеристика", СтрокаТовара.ХарактеристикаНаименование);
		Сопоставление.Вставить("ЕдиницаИзмерения", СтрокаТовара.БазоваяЕдиницаНаименование);
		Сопоставление.Вставить("Артикул", СтрокаТовара.Артикул);
		Сопоставление.Вставить("СтавкаНДС", СтрокаТовара.СтавкаНДС);
		Сопоставление.Вставить("НоменклатураИБ", СтрокаТовара.Номенклатура);
		Сопоставление.Вставить("ХарактеристикаИБ", СтрокаТовара.Характеристика);
		Сопоставление.Вставить("УпаковкаИБ", СтрокаТовара.Упаковка);		

		ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление, ШтрихкодыНоменклатуры, ШтрихкодыКомбинаций,
				СтрокаТовара.Номенклатура, СтрокаТовара.Характеристика, СтрокаТовара.Упаковка);
		
		СтрокаТовара.Сопоставление = Сопоставление;
		
	КонецЦикла;
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ДанныеДляЭД);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДанныеДляЭД, "Товары");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Находит элемент справочника по реквизитам ИНН и КПП
// Если элемент не найден возвращаем Неопределено
// Параметры:
//  ТипОбъекта - Строка, имя справочника в метаданных;
//  ИНН - строка;
//  КПП - строка;
//  Организация - СправочникСсылка - ссылка на элемент справочника организации.
//
// Возвращаемое значение:
//  Результат - ссылка на справочник или неопределено
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) 
	
	Результат = Неопределено;
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Результат, Организация); 
	
	Возврат Результат;
	
КонецФункции

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//  ВидУчастника - Строка - вид участника как он представлен в дереве данных.
//  КорневойЭлементДерева - Строка - необходимо использовать в случае, если в таблице надо заполнить
//    сложный тип данных (группа, выбор). Например: "Товары.НомерСтроки.Покупатель", Покупатель -
//    является сложным типом данных, тогда КорневойЭлементДерева = "Товары.НомерСтроки".
//
Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника)
	
	АдресУчастника.Удалить("ПроизвольныйАдрес");		
	
	Если ТипАдреса = "Произвольный" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст);
	ИначеЕсли ТипАдреса = "Структурированный" ИЛИ ТипАдреса = "Иностранный" Тогда
		Если АдресУчастника.АдресРФ Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("КодГАР");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
			ПолныйПуть = ВидУчастника + ".Адрес.Иностранный.КодСтраны";
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
				АдресУчастника.Удалить("КодСтр");
				АдресУчастника.Удалить("АдрТекст");				
			Иначе
				АдресУчастника.Удалить("КодСтраны");
				АдресУчастника.Удалить("АдресТекст");				
			КонецЕсли;			
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресРФ" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресИнформация" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("КодГАР");
	
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "КодГАР" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.КодГАР",
									Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиДокумент(ВидЭД, Контрагент, РеквизитыИБ = Неопределено, РеквизитыИБКонтрагента = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныйДок = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0 Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе	
    				Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;	
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказПоставщику КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0  Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено 
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда	
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0  Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено 
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат НайденныйДок;
	
КонецФункции

Процедура НайтиТаможенныеДекларации(ТаможеннаяДекларация, НомерТаможеннойДекларации, СтранаПроисхождения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Выборка.Ссылка
	|ИЗ
	|	Справочник.НомераГТД КАК Выборка
	|ГДЕ
	|	Выборка.СтранаПроисхождения = &СтранаПроисхождения И
	|	Выборка.Код = &НомерТД";
	
	Запрос.УстановитьПараметр("НомерТД", НомерТаможеннойДекларации);
	Запрос.УстановитьПараметр("СтранаПроисхождения", СтранаПроисхождения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТаможеннаяДекларация = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры	
	
Процедура ЗаполнитьСтрокуТЧ(ТЗ, ДанныеЗаполнения, ДеревоРазбора, ЭтоЗаказ = Ложь)
	
	НовСтрока = ТЗ.Добавить();
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ИмяРеквизитаВБД = "Описание" Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли ИмяРеквизитаВБД = "СумНДС" Тогда
			ИмяРеквизитаВБД = "СуммаНДС";
		ИначеЕсли ИмяРеквизитаВБД = "СтТовУчНал" Тогда
			ИмяРеквизитаВБД = "Сумма";
		ИначеЕсли ИмяРеквизитаВБД = "НалСтВел" Тогда
			ИмяРеквизитаВБД = "СтавкаНДС";
		КонецЕсли;
		
		Если ИмяРеквизитаВБД = "СуммаСНДС" Тогда
			Если ЭтоЗаказ Тогда
				НовСтрока.Сумма = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ИмяРеквизитаВБД, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяРеквизитаВБД = "Сопоставление" Тогда
			Сопоставление = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Номенклатура")
				И Сопоставление.Свойство("НоменклатураИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
					НовСтрока.Номенклатура = Сопоставление.НоменклатураИБ;
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Характеристика")
				И Сопоставление.Свойство("ХарактеристикаИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.ХарактеристикаИБ) Тогда
					НовСтрока.Характеристика = Сопоставление.ХарактеристикаИБ;
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "ЕдиницаИзмерения")
				И Сопоставление.Свойство("УпаковкаИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.УпаковкаИБ) Тогда
					НовСтрока.ЕдиницаИзмерения = Сопоставление.УпаковкаИБ;
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Упаковка")
				И Сопоставление.Свойство("УпаковкаИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.УпаковкаИБ) Тогда
					НовСтрока.Упаковка = Сопоставление.УпаковкаИБ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение характеристики номенклатуры и упаковки.
		Если ИмяРеквизитаВБД = "НоменклатураПоставщика" Тогда
			Если КолонкаСуществует(ТЗ, "Характеристика") Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Характеристика = НайденноеЗначение.Характеристика;	
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Упаковка") Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Упаковка = НайденноеЗначение.Упаковка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не КолонкаСуществует(ТЗ, ИмяРеквизитаВБД) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		НовСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
		Если ТекСтрока.Реквизит = "Номенклатура" Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
				НовСтрока.Упаковка = НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КолонкаСуществует(Таблица, ИмяКолонки)
	
	Результат = Не (Таблица.Колонки.Найти(ИмяКолонки) = Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("НомерПоДаннымПоставщика");
	ТЗ.Колонки.Добавить("ДатаПоДаннымПоставщика");
	ТЗ.Колонки.Добавить("НомерПоДаннымКлиента");
	ТЗ.Колонки.Добавить("ДатаПоДаннымКлиента");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	// реквизиты для связки "заказ - поступление"
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымКлиента", 		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымКлиента",  		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымПоставщика", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымПоставщика"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымПоставщика",  	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымПоставщика"));
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из ТЗ Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора, Аванс = Ложь)
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаСоставления", ТекущаяДатаСеанса());
	НомерСчетаФактуры = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры");
	Если ЗначениеЗаполнено(НомерСчетаФактуры) Тогда
		ДанныеЗаполненияШапки.Вставить("Корректировочный", Истина);
		НомерИсправления = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления");
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", НомерИсправления);
		ДатаИсправления = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправления");
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ДатаИсправления);
		Если ЗначениеЗаполнено(НомерИсправления) 
			 И ЗначениеЗаполнено(ДатаИсправления) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", НомерСчетаФактуры);
		ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Дата", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
		ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки,  "ДатаИсправления"));
	КонецЕсли;
	
	ВалКод = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВалКод");
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Валюта, ВалКод);
	ДанныеЗаполненияШапки.Вставить("Валюта", Валюта);
	
	// Получим данные по комиссионеру
	Комиссионер = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Комиссионер");
	Если ЗначениеЗаполнено(Комиссионер) Тогда
		// Счет-фактура выставлена комитентом
		ИндексОрганизация = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Организация");
		СтрокаОрганизация = ДеревоРазбора.Строки.Найти(ИндексОрганизация, "ИндексСтроки", Истина);
		ДанныеЗаполненияШапки.Вставить("Покупатель", СсылкаНаОбъектПоИННКПП("Контрагенты", 
			ПолучитьЗначениеРеквизитаДерева(СтрокаОрганизация, "ИНН", Истина, ДеревоРазбора), 
			ПолучитьЗначениеРеквизитаДерева(СтрокаОрганизация, "КПП", Истина, ДеревоРазбора)));
		ДанныеЗаполненияШапки.Вставить("Организация", Комиссионер);
	Иначе
		// Счет-фактура на поступление
		ДанныеЗаполненияШапки.Вставить("Организация", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора));
		
	КонецЕсли;
	
	// Данные по контрагенту
	ДанныеЗаполненияШапки.Вставить("Контрагент", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Контрагент", Истина, ДеревоРазбора));
	ДанныеЗаполненияШапки.Вставить("Партнер",    ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Партнер", Истина, ДеревоРазбора));

	ИндексКонтрагент = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Контрагент");
	СтрокаКонтрагент = ДеревоРазбора.Строки.Найти(ИндексКонтрагент, "ИндексСтроки", Истина);
	ДанныеЗаполненияШапки.Вставить("ИННКонтрагента", ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагент, "ИНН", Истина, ДеревоРазбора));
	ДанныеЗаполненияШапки.Вставить("КППКонтрагента", ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагент, "КПП", Истина, ДеревоРазбора));
	
	ДанныеЗаполненияШапки.Вставить("Сумма",       ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СуммаДокумента", Истина, ДеревоРазбора));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",    ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СумНДС", Истина, ДеревоРазбора));
	
	// Получим документы-основания
	СтрокаДокументыОснования = СтрокаДляЗагрузки.Строки.Найти("ДокументыОснования");
	Если СтрокаДокументыОснования <> Неопределено Тогда
		МассивДокументовОснований = Новый Массив;
		Для Каждого Строка Из СтрокаДокументыОснования.Строки Цикл
			Если ЗначениеЗаполнено(Строка.СсылкаНаОбъект) Тогда
				МассивДокументовОснований.Добавить(Строка.СсылкаНаОбъект);
			КонецЕсли;
		КонецЦикла;
		ДанныеЗаполненияШапки.Вставить("ДокументыОснования", МассивДокументовОснований);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ПолученВЭлектронномВиде", Истина);
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	
	Если Аванс Тогда
		Авансы = Документы.СчетФактураПолученныйАванс.ПустаяСсылка().Авансы.Выгрузить();
		Отбор = Новый Структура("Реквизит", "СтрокаТЧ");
		СтрокиТЧ = СтрокаДляЗагрузки.Строки.НайтиСтроки(Отбор);
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ЗаполнитьСтрокуТЧ(Авансы, СтрокаТЧ.Строки, ДеревоРазбора);
		КонецЦикла;
		ДанныеДляОбъекта.Вставить("Авансы", Авансы);
	КонецЕсли;
	
	Если Не Аванс Тогда
		ЗаполнитьСуммыДляСчетаФактуры(ДанныеДляОбъекта, ДеревоРазбора);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("НоменклатураПоставщика");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		
	Иначе
		ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
		ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	КонецЕсли;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	// а также НомерСтрокиДокументаПоставщика
	НомерСтрокиДокумента = 0;
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Содержание) Тогда
			ТекСтрока.Содержание = ТекСтрока.НоменклатураПоставщика;
		КонецЕсли;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаявкиНаРасходование(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ЧастичнаяОплата = истина;
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения
		
	СтрокаСрокПлатежа = СтрокаДляЗагрузки.Строки.Найти("ДатаОкончанияДействияСчета", "Реквизит");
	ДанныеЗаполненияШапки.Вставить("СрокПлатежа", СтрокаСрокПлатежа.ЗначениеРеквизита);
	
	СтрокаСуммаДокумента = СтрокаДляЗагрузки.Строки.Найти("СуммаИтог", 		"Реквизит");
	СтрокаСуммаНДС 		 = СтрокаДляЗагрузки.Строки.Найти("СуммаНалогаИтог","Реквизит");
	
	Если ЧастичнаяОплата И ЗначениеЗаполнено(СтрокаСуммаДокумента.ЗначениеРеквизита) Тогда
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", СтрокаСуммаДокумента.ЗначениеРеквизита + СтрокаСуммаНДС.ЗначениеРеквизита);
	Иначе
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", СтрокаСуммаДокумента.ЗначениеРеквизита);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерДокументаОснования"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаДокументаОснования"));
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляРегистрацииЦен(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения 
	
	// найдем ВидЦеныПоставщика или создадим новый
	ВидЦеныПоставщика = ОпределитьВидЦеныПоставщика(ДанныеЗаполненияШапки.Партнер, СтрокаДляЗагрузки.Строки.Найти("ТипыЦен").ЗначениеРеквизита);
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика, а также обязательный реквизит ВидЦеныПоставщика
	Для Каждого ТекСтрока Из ТЗ Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Характеристика) Тогда
				ТекСтрока.Характеристика = ТекСтрока.НоменклатураПоставщика.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Упаковка) Тогда
				ТекСтрока.Упаковка = ТекСтрока.НоменклатураПоставщика.Упаковка;
			КонецЕсли;
		КонецЕсли;
		ТекСтрока.ВидЦеныПоставщика = ВидЦеныПоставщика;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаКлиента(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ЗаказКлиента.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ЗаказКлиента.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		КонецЕсли;
    КонецЦикла;
		
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("СуммаСкидки"),"СуммаРучнойСкидки");
	
	//Заполним значения по умолчанию в ТЧ
	ТЗ.ЗаполнитьЗначения(Перечисления.ВариантыОбеспечения.НеТребуется, "ВариантОбеспечения");
	ТЗ.ЗаполнитьЗначения(ТекущаяДатаСеанса(), "ДатаОтгрузки");
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ЗаказПоставщику.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ЗаказПоставщику.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		КонецЕсли;
	КонецЦикла;
	
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("СуммаСкидки"),"СуммаРучнойСкидки");
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика
	Для Каждого ТекСтрока Из ТЗ Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Характеристика) Тогда
				ТекСтрока.Характеристика = ТекСтрока.НоменклатураПоставщика.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Упаковка) Тогда
				ТекСтрока.Упаковка = ТекСтрока.НоменклатураПоставщика.Упаковка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 			   ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",			   ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ОтчетКомиссионера.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ОтчетКомиссионера.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();  	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			
			НоваяСтрока = ТЗ.Добавить();
			Для Каждого ТекСтрока Из СтрокаРеквизита.Строки Цикл
				
				ИмяРеквизитаВБД = ТекСтрока.Реквизит;
				
				Если ИмяРеквизитаВБД = "ДополнительныеРеквизиты" Тогда
					
					СтруктураДополнительныхРеквизитов = ТекСтрока.ЗначениеРеквизита;
					Если СтруктураДополнительныхРеквизитов.Свойство("ДатаПродажи") Тогда
						НоваяСтрока["ДатаСчетаФактурыКомиссионера"] = СтруктураДополнительныхРеквизитов.ДатаПродажи;
					КонецЕсли;
					
					// Заполним информацию о покупателе
					ДанныеПокупателя = Новый Структура("Наименование, ИНН, КПП, ЮрАдрес, ФактАдрес");
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательНаименование") Тогда
						ДанныеПокупателя.Наименование = СтруктураДополнительныхРеквизитов.ПокупательНаименование;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательИНН") Тогда
						ДанныеПокупателя.ИНН = СтруктураДополнительныхРеквизитов.ПокупательИНН;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательКПП") Тогда
						ДанныеПокупателя.КПП = СтруктураДополнительныхРеквизитов.ПокупательКПП;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательЮрАдрес") Тогда
						ДанныеПокупателя.ЮрАдрес = СтруктураДополнительныхРеквизитов.ПокупательЮрАдрес;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательФактАдрес") Тогда
						ДанныеПокупателя.ФактАдрес = СтруктураДополнительныхРеквизитов.ПокупательФактАдрес;
					КонецЕсли;
					
					// Попробуем найти среди существующих
					Покупатель = СсылкаНаОбъектПоИННКПП("Контрагенты", ДанныеПокупателя.ИНН, ДанныеПокупателя.КПП);
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
						Покупатель = СоздатьКонтрагентаВБД(ДанныеПокупателя)
					КонецЕсли;
					
					НоваяСтрока.Покупатель = Покупатель;
					
				КонецЕсли;
				
				Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) <> Неопределено Тогда
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТЗ Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
		
		ТекущийПроцентНДС = УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС);
		ТекСтрока.СуммаПродажиНДС = Окр(ТекСтрока.СуммаПродажи * ТекущийПроцентНДС / (100 + ТекущийПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	КонецЦикла;
	
	Если ТЗ.Итог("СуммаПродажиНДС") > 0 Тогда
		ДанныеЗаполненияШапки.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	Иначе
		ДанныеЗаполненияШапки.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	КонецЕсли;
	
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("Сумма"), "СуммаСНДС");
	ТЗ.Колонки.Удалить("Сумма");
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ОтчетКомиссионераОСписании.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
   	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТЗ Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура();
	ДанныеЗаполнения = Новый Структура();
	Товары = Документы.КорректировкаПриобретения.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполнения.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Если СтрокаРеквизита.Реквизит = "Основание" Тогда
						ИмяРеквизита = "ДокументОснование";
					Иначе
						ИмяРеквизита = СтрокаРеквизита.Реквизит;
					КонецЕсли;
					ДанныеЗаполнения.Вставить(ИмяРеквизита, Реквизит);
				КонецЕсли;
				
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора); 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	// Дополним ДанныеЗаполнения реквизитами основания
	ДокументОснование = Неопределено;
	Если ДанныеЗаполнения.Свойство("ДокументОснование") И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		
		ДокументОснование = ДанныеЗаполнения.ДокументОснование; 
		
		ТекстЗапроса = "";
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда 
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДанныеДокумента.Соглашение			 КАК Соглашение,
			|	ДанныеДокумента.Договор				 КАК Договор,
			|	ДанныеДокумента.Склад				 КАК Склад,
			|	ДанныеДокумента.Валюта				 КАК Валюта,
			|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
			|	ДанныеДокумента.Подразделение		 КАК Подразделение,
			|	ДанныеДокумента.Сделка				 КАК Сделка,
			|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
			|	ДанныеДокумента.ПоступлениеПоЗаказам КАК ПоступлениеПоЗаказам
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &ДокументОснование";
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда 
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка				 КАК ДокументОснование,
			|	ДанныеДокумента.Партнер				 КАК Партнер,
			|	ДанныеДокумента.Контрагент			 КАК Контрагент,
			|	ДанныеДокумента.Соглашение			 КАК Соглашение,
			|	ДанныеДокумента.Организация			 КАК Организация,
			|	ДанныеДокумента.Договор				 КАК Договор,
			|	ДанныеДокумента.Валюта				 КАК Валюта,
			|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
			|	ДанныеДокумента.Подразделение		 КАК Подразделение,
			|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
			|	Ложь								 КАК ПоступлениеПоЗаказам
			|
			|ИЗ
			|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &ДокументОснование";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			Запрос.Текст = ТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				ДанныеЗаполнения.Вставить(Колонка.Имя);
			КонецЦикла;
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Товары.Итог("СуммаНДС") > 0 Тогда
			ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		Иначе	
			ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ЦенаВключаетНДС", Ложь);
		
	КонецЕсли;
	
	// Вид операции ЭД определяет хоз. операцию документа
	ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ИсправлениеОшибок);
	Иначе
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон);
	КонецЕсли;
	
	ЭтоКорректировкаПриобретенияУслуг = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// Заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
		
		Если ЭтоКорректировкаПриобретенияУслуг Тогда
			ТекСтрока.Содержание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.НоменклатураПоставщика, "Наименование");
			ТекСтрока.НоменклатураПоставщика = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполнения);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПараметрыМассыПрописью(Масса, КоэффициентПересчетаВТонны)
	
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны > 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 > 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент * КоэффициентПересчетаВТонны);
	
КонецФункции

Функция НайтиПеречисление(Наименование, ПредставлениеПеречисления)
	
	НайденноеЗначение = Неопределено;
	Если Наименование = "НДС" Тогда
		ИмяПеречисления = "СтавкиНДС";
		Если НЕ ТипЗнч(ПредставлениеПеречисления)=Тип("ПеречислениеСсылка.СтавкиНДС") Тогда // определяем по числу
			Возврат ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(ПредставлениеПеречисления); 
		КонецЕсли;
	ИначеЕсли Наименование = "ТипНоменклатуры" Тогда
		ИмяПеречисления = "ТипыНоменклатуры";
	ИначеЕсли Наименование = "ТипыНалогообложенияНДС" Тогда
		ИмяПеречисления = "ТипыНалогообложенияНДС";	
	ИначеЕсли Наименование = "СпособыРасчетаКомиссионногоВознаграждения" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
	ИначеЕсли Наименование = "ВариантыОплатыКлиентом" Тогда
		ИмяПеречисления = "ВариантыОплатыКлиентом";	
	ИначеЕсли Наименование = "ВариантыОплатыПоставщику" Тогда
		ИмяПеречисления = "ВариантыОплатыПоставщику";			
	ИначеЕсли Наименование = "ФормыОплаты" Тогда
		ИмяПеречисления = "ФормыОплаты";	
	ИначеЕсли Наименование = "СпособРасчета" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
		Если ПредставлениеПеречисления = "От суммы" Тогда
			ПредставлениеПеречисления = НСтр("ru = 'Процент от суммы продажи'");
		ИначеЕсли ПредставлениеПеречисления = "От разницы" Тогда
			ПредставлениеПеречисления = НСтр("ru = 'Процент от разности суммы продажи и суммы комитента'");
		КонецЕсли;	
	Иначе
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Врег(ЭлПеречисления.Синоним) = Врег(ПредставлениеПеречисления) тогда
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Функция ПолучитьДанныеПривязкиСтрокЗаказов(Товары)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.ЗаказПоставщику КАК ЗаказПоставщику
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки КАК КодСтроки,
	|	ТаблицаЗаказы.Склад КАК Склад,
	|	ТаблицаЗаказы.КОформлению КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыПоставщикам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыОстатки.Склад КАК Склад,
	|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				(Номенклатура, ЗаказПоставщику) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура КАК Номенклатура,
	|						Товары.ЗаказПоставщику КАК ЗаказПоставщику
	|					ИЗ
	|						Товары КАК Товары)) КАК ЗаказыОстатки
	|	ГДЕ
	|		ЗаказыОстатки.КОформлениюОстаток > 0) КАК ТаблицаЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.ЗаказПоставщику,
	|	ЗаказыПоставщикам.КодСтроки,
	|	ЗаказыПоставщикам.Склад,
	|	ЗаказыПоставщикам.Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|		ПО Товары.Номенклатура = ЗаказыПоставщикам.Номенклатура
	|			И Товары.ЗаказПоставщику = ЗаказыПоставщикам.ЗаказПоставщику
	|			И Товары.Количество <= ЗаказыПоставщикам.КОформлениюОстаток";
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки)
	
	СсылкаНаОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
			СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) 
			 И МетаданныеОбъекта.Реквизиты.Найти(Строка.Ключ) <> Неопределено
			 И ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
			ТекущийОбъект[Строка.Ключ] = Строка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
		
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьВидЦеныПоставщика(Партнер, ТипыЦен)
	
	ПараметрыЦены = ТипыЦен[0];
	ИспользоватьНесколькоВалют = Константы.ИспользоватьНесколькоВалют.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыЦенПоставщиков.Ссылка
	               |ИЗ
	               |	Справочник.ВидыЦенПоставщиков КАК ВидыЦенПоставщиков
	               |ГДЕ
	               |	ВидыЦенПоставщиков.Владелец = &Владелец
	               |	И ВидыЦенПоставщиков.ЦенаВключаетНДС = &ЦенаВключаетНДС";
				   
	Запрос.УстановитьПараметр("Владелец", 		 Партнер);	
	Запрос.УстановитьПараметр("Валюта", 		 ПараметрыЦены.Валюта);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ПараметрыЦены.ВключаетНДС);
	
	Если ИспользоватьНесколькоВалют Тогда
		Запрос.Текст = Запрос.Текст + " И ВидыЦенПоставщиков.Валюта.Код = &Валюта";
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ТипЦенДляТЧ = Результат.Ссылка;
	Иначе
		ТипЦенДляТЧ = Справочники.ВидыЦенПоставщиков.СоздатьЭлемент();
		ТипЦенДляТЧ.Наименование =    "Основной";
		ТипЦенДляТЧ.Владелец = 		  Партнер;
		ТипЦенДляТЧ.ЦенаВключаетНДС = ПараметрыЦены.ВключаетНДС;
		Если ИспользоватьНесколькоВалют Тогда
			ТипЦенДляТЧ.Валюта =  	  Справочники.Валюты.НайтиПоКоду(ПараметрыЦены.Валюта);
		КонецЕсли;
		
		Попытка
			ТипЦенДляТЧ.Записать();
		Исключение
			Текст = НСтр("ru = 'Создание элемента справочника ""Виды цен поставщиков"".'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТипЦенДляТЧ.Ссылка
	
КонецФункции

Процедура ЗаполнитьСоглашениеПоСтатистике(Объект)
	
	ЗаполняемыеРеквизиты = Новый Структура("Соглашение");
		
	РеквизитыДляОтбора = Новый Структура;
	РеквизитыДляОтбора.Вставить("Партнер", Объект.Партнер);
	РеквизитыДляОтбора.Вставить("Валюта", Объект.Валюта);
	РеквизитыДляОтбора.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);

	ЗаполнениеСвойствПоСтатистикеСервер.ПолучитьЗначенияСвойств(
			Объект.Ссылка, ЗаполняемыеРеквизиты, РеквизитыДляОтбора);
				
	Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты.Соглашение) Тогда
		Объект.Соглашение = ЗаполняемыеРеквизиты.Соглашение;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДатуВремяИзСтроки(ДатаВремяСтрокой)
	
	Результат = Неопределено;
	ДатаВремя = СтрЗаменить(ДатаВремя, "-", "");
	ДатаВремя = СтрЗаменить(ДатаВремя, ":", "");
	Если СтрДлина(ДатаВремя) - СтрНайти(ДатаВремя, " ") = 5 Тогда // время в формате Ч:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "0");
	ИначеЕсли СтрНайти(ДатаВремя, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		ДатаВремя = СтрЗаменить(ДатаВремя, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат = ОписаниеТипа.ПривестиЗначение(ДатаВремя);  // дата и время в виде "ГГГГММДДЧЧММСС"
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ОписаниеТипа.ПривестиЗначение(Лев(ДатаВремя, 8));  // только дата "ГГГГММДД"
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ГруппаДоступаПартнера()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Партнеры.Ссылка,
	|	Партнеры.ГруппаДоступа
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И НЕ Партнеры.ГруппаДоступа = ЗНАЧЕНИЕ(Справочник.ГруппыДоступаПартнеров.ПустаяСсылка)");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ГруппыДоступаПартнеров.ПустаяСсылка();
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ГруппаДоступа;
	
КонецФункции

Функция ОпределитьПризнакТовара(Товар, ДокументОтгрузки)
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ДокументОтгрузки.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			Возврат "4"; // Имущественные права;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Товар) Тогда
		Если Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			Возврат "1"; // Имущество
		ИначеЕсли Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			Возврат "2"; // Работа			
		ИначеЕсли Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			Возврат "3"; // Услуга
		Иначе
			Возврат "5"; // Иное
		КонецЕсли;
	Иначе
		Возврат "5"; // Иное
	КонецЕсли;
	
КонецФункции

Функция ИнициализацияТаблицыРеквизитовОбъектов()
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаРеквизитов.Колонки;
	Колонки.Добавить("Порядок",                    Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",          Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыОбъекта",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовОбъекта", Новый ОписаниеТипов("Структура"));
	
	ТаблицаРеквизитов.Индексы.Добавить("ИмяОбъекта");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры:
//  ИмяОбъекта - Строка - текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//  СтруктураКлючевыхРеквизитов - Структура - перечень параметров объекта.
//
Процедура ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов)
	
	Если ИмяОбъекта = "Документ.КоммерческоеПредложениеКлиенту" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.РеализацияТоваровУслуг" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПриобретениеТоваровУслуг" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ВозвратТоваровОтКлиента" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказКлиента" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказПоставщику" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, НоменклатураПоставщика, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураВыданный" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ДокументОснование");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураВыданныйАванс" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ДокументОснование");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// Авансы
		СтрокаРеквизитовОбъекта = ("Номенклатура, Сумма, СтавкаНДС, СуммаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Авансы", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураКомиссионеру" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Комиссионер, ДокументОснование");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// Покупатели
		СтрокаРеквизитовОбъекта = ("Покупатель, НомерСчетаФактуры");
		СтруктураКлючевыхРеквизитов.Вставить("Покупатели", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПроизвольныйЭД" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, Партнер, Сообщение");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетНаОплатуКлиенту" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, БанковскийСчет");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомитенту" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, НоменклатураПоставщика, Цена, Сумма, СуммаНДС, СтавкаНДС, СуммаПродажи, СуммаВознаграждения");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомитентуОСписании" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, НоменклатураПоставщика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.АктВыполненныхРабот" Тогда 
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПередачаТоваровМеждуОрганизациями" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, ОрганизацияПолучатель, 
			|ЦенаВключаетНДС, РасчетыЧерезОтдельногоКонтрагента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ВозвратТоваровМеждуОрганизациями" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, ОрганизацияПолучатель, 
			|ЦенаВключаетНДС, РасчетыЧерезОтдельногоКонтрагента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаявкаНаРасходованиеДенежныхСредств" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Партнер, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("РасшифровкаПлатежа", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.КорректировкаРеализации" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СписаниеБезналичныхДенежныхСредств" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, БанковскийСчет, ТипПлатежногоДокумента, ХозяйственнаяОперация,
			|СуммаДокумента, Контрагент, БанковскийСчетКонтрагента, БанковскийСчетПолучатель, ПодотчетноеЛицо,
			|НазначениеПлатежа, Валюта, ВидПлатежа, ОчередностьПлатежа, ПеречислениеВБюджет, ВидПеречисленияВБюджет,
			|СтатусСоставителя, КодБК, КодОКАТО, ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПоступлениеБезналичныхДенежныхСредств" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, БанковскийСчет, ТипПлатежногоДокумента, ХозяйственнаяОперация,
			|СуммаДокумента, Контрагент, БанковскийСчетКонтрагента, БанковскийСчетОтправитель, ПодотчетноеЛицо,
			|НазначениеПлатежа, Валюта");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	
	ИначеЕсли ИмяОбъекта = "Документ.АктОРасхожденияхПослеПриемки" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ВозвратТоваровПоставщику" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
		
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти
	+ " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|	ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция РеквизитыРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|	ТекущийОбъект.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры:
//  Таблица1 - ТаблицаЗначений - первая таблица проверки, реквизиты, которые надо проверить на совпадение.
//  Таблица2 - ТаблицаЗначений - вторая таблица проверки.
//  РеквизитыОбъекта - Строка - реквизиты, перечисленные через запятую.
//  ДопПараметры - Структура - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, РеквизитыОбъекта, ДопПараметры = Неопределено)
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Шапка" Тогда
			
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = НСтр("ru = 'Реквизиты шапки'");
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти( - ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта,
						"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ	НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда
						Продолжить;
					КонецЕсли;
					НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРеквизита.Реквизит  = ИмяКолонки;
					НовСтрокаДереваЗнч            = НовСтрокаДереваРеквизита.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД = ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД = НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = СтрШаблон(НСтр("ru = 'Табличная часть <%1>'"), ИмяТабличнойЧасти);
			НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРеквизита.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакСовпадения;
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры

#Область НастройкиФормированияДокумента

Функция ЗапросКонструктораДополнительныхПолейШапкиУПД()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Номер КАК Номер,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Организация КАК Организация,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Контрагент КАК Контрагент,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.СчетФактураОснование КАК СчетФактураОснование,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.СтрокаПлатежноРасчетныеДокументы КАК СтрокаПлатежноРасчетныеДокументы,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Корректировочный КАК Корректировочный,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Валюта КАК Валюта,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ВыставленВЭлектронномВиде КАК ВыставленВЭлектронномВиде,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаВыставления КАК ДатаВыставления,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КППКонтрагента КАК КППКонтрагента,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение КАК КодВидаОперацииНаУменьшение,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Подразделение КАК Подразделение,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Ответственный КАК Ответственный,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.СводныйКорректировочный КАК СводныйКорректировочный,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ИННКонтрагента КАК ИННКонтрагента,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданный.Ссылка КАК Ссылка,
		|	СчетФактураВыданный.Номер КАК Номер,
		|	СчетФактураВыданный.Дата КАК Дата,
		|	СчетФактураВыданный.Организация КАК Организация,
		|	СчетФактураВыданный.Контрагент КАК Контрагент,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
		|	СчетФактураВыданный.СчетФактураОснование КАК СчетФактураОснование,
		|	СчетФактураВыданный.СтрокаПлатежноРасчетныеДокументы КАК СтрокаПлатежноРасчетныеДокументы,
		|	СчетФактураВыданный.Исправление КАК Исправление,
		|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
		|	СчетФактураВыданный.Корректировочный КАК Корректировочный,
		|	СчетФактураВыданный.Валюта КАК Валюта,
		|	СчетФактураВыданный.ВыставленВЭлектронномВиде КАК ВыставленВЭлектронномВиде,
		|	СчетФактураВыданный.ДатаВыставления КАК ДатаВыставления,
		|	СчетФактураВыданный.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураВыданный.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	СчетФактураВыданный.КППКонтрагента КАК КППКонтрагента,
		|	СчетФактураВыданный.КодВидаОперацииНаУменьшение КАК КодВидаОперацииНаУменьшение,
		|	СчетФактураВыданный.Подразделение КАК Подразделение,
		|	СчетФактураВыданный.Ответственный КАК Ответственный,
		|	СчетФактураВыданный.СводныйКорректировочный КАК СводныйКорректировочный,
		|	СчетФактураВыданный.ИННКонтрагента КАК ИННКонтрагента,
		|	СчетФактураВыданный.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	СчетФактураВыданныйАванс.Ссылка,
		|	СчетФактураВыданныйАванс.Номер,
		|	СчетФактураВыданныйАванс.Дата,
		|	СчетФактураВыданныйАванс.Организация,
		|	СчетФактураВыданныйАванс.Контрагент,
		|	СчетФактураВыданныйАванс.ДокументОснование,
		|	СчетФактураВыданныйАванс.СчетФактураОснование,
		|	СчетФактураВыданныйАванс.СтрокаПлатежноРасчетныеДокументы,
		|	СчетФактураВыданныйАванс.Исправление,
		|	СчетФактураВыданныйАванс.НомерИсправления,
		|	СчетФактураВыданныйАванс.Корректировочный,
		|	NULL,
		|	СчетФактураВыданныйАванс.ВыставленВЭлектронномВиде,
		|	СчетФактураВыданныйАванс.ДатаВыставления,
		|	СчетФактураВыданныйАванс.КодВидаОперации,
		|	NULL,
		|	СчетФактураВыданныйАванс.КППКонтрагента,
		|	NULL,
		|	СчетФактураВыданныйАванс.Подразделение,
		|	СчетФактураВыданныйАванс.Ответственный,
		|	СчетФактураВыданныйАванс.СводныйКорректировочный,
		|	СчетФактураВыданныйАванс.ИННКонтрагента,
		|	СчетФактураВыданныйАванс.ИдентификаторГосКонтракта
		|ИЗ
		|	Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
		|ГДЕ
		|	СчетФактураВыданныйАванс.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиРеализации()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Дата КАК Дата,
		|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
		|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	РеализацияТоваровУслуг.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	РеализацияТоваровУслуг.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	РеализацияТоваровУслуг.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
		|	РеализацияТоваровУслуг.Валюта КАК Валюта,
		|	РеализацияТоваровУслуг.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
		|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
		|	РеализацияТоваровУслуг.УдалитьДатаПлатежа КАК УдалитьДатаПлатежа,
		|	РеализацияТоваровУслуг.ДатаРаспоряжения КАК ДатаРаспоряжения,
		|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
		|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
		|	РеализацияТоваровУслуг.ДоверенностьЛицо КАК ДоверенностьЛицо,
		|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
		|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.Менеджер КАК Менеджер,
		|	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
		|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	РеализацияТоваровУслуг.Партнер КАК Партнер,
		|	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
		|	РеализацияТоваровУслуг.Сделка КАК Сделка,
		|	РеализацияТоваровУслуг.СкидкиРассчитаны КАК СкидкиРассчитаны,
		|	РеализацияТоваровУслуг.Склад КАК Склад,
		|	РеализацияТоваровУслуг.Согласован КАК Согласован,
		|	РеализацияТоваровУслуг.Соглашение КАК Соглашение,
		|	РеализацияТоваровУслуг.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РеализацияТоваровУслуг.ФормаОплаты КАК ФормаОплаты,
		|	РеализацияТоваровУслуг.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	РеализацияТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	РеализацияТоваровУслуг.Касса КАК Касса,
		|	РеализацияТоваровУслуг.Отпустил КАК Отпустил,
		|	РеализацияТоваровУслуг.ОтпустилДолжность КАК ОтпустилДолжность,
		|	РеализацияТоваровУслуг.РеализацияПоЗаказам КАК РеализацияПоЗаказам,
		|	РеализацияТоваровУслуг.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	РеализацияТоваровУслуг.КартаЛояльности КАК КартаЛояльности,
		|	РеализацияТоваровУслуг.Договор КАК Договор,
		|	РеализацияТоваровУслуг.Основание КАК Основание,
		|	РеализацияТоваровУслуг.Статус КАК Статус,
		|	РеализацияТоваровУслуг.Автор КАК Автор,
		|	РеализацияТоваровУслуг.УдалитьСуммаПредоплаты КАК УдалитьСуммаПредоплаты,
		|	РеализацияТоваровУслуг.УдалитьСуммаПредоплатыЗаТару КАК УдалитьСуммаПредоплатыЗаТару,
		|	РеализацияТоваровУслуг.СпособДоставки КАК СпособДоставки,
		|	РеализацияТоваровУслуг.ЗонаДоставки КАК ЗонаДоставки,
		|	РеализацияТоваровУслуг.ПеревозчикПартнер КАК ПеревозчикПартнер,
		|	РеализацияТоваровУслуг.ВремяДоставкиС КАК ВремяДоставкиС,
		|	РеализацияТоваровУслуг.ВремяДоставкиПо КАК ВремяДоставкиПо,
		|	РеализацияТоваровУслуг.АдресДоставкиПеревозчика КАК АдресДоставкиПеревозчика,
		|	РеализацияТоваровУслуг.КонтактноеЛицо КАК КонтактноеЛицо,
		|	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
		|	РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	РеализацияТоваровУслуг.ПорядокРасчетов КАК ПорядокРасчетов,
		|	РеализацияТоваровУслуг.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	РеализацияТоваровУслуг.ДатаВозвратаМногооборотнойТары КАК ДатаВозвратаМногооборотнойТары,
		|	РеализацияТоваровУслуг.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
		|	РеализацияТоваровУслуг.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную,
		|	РеализацияТоваровУслуг.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|	РеализацияТоваровУслуг.ОснованиеДата КАК ОснованиеДата,
		|	РеализацияТоваровУслуг.ОснованиеНомер КАК ОснованиеНомер,
		|	РеализацияТоваровУслуг.ДопоставкаПоРеализации КАК ДопоставкаПоРеализации,
		|	РеализацияТоваровУслуг.ДатаПереходаПраваСобственности КАК ДатаПереходаПраваСобственности,
		|	РеализацияТоваровУслуг.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|	РеализацияТоваровУслуг.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	РеализацияТоваровУслуг.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
		|	РеализацияТоваровУслуг.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	РеализацияТоваровУслуг.Курс КАК Курс,
		|	РеализацияТоваровУслуг.Кратность КАК Кратность,
		|	РеализацияТоваровУслуг.ПорядокОплаты КАК ПорядокОплаты,
		|	РеализацияТоваровУслуг.ЕстьМаркируемаяПродукцияГИСМ КАК ЕстьМаркируемаяПродукцияГИСМ,
		|	РеализацияТоваровУслуг.УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС КАК УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС,
		|	РеализацияТоваровУслуг.СуммаВзаиморасчетовПоТаре КАК СуммаВзаиморасчетовПоТаре
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КорректировкаРеализации.Ссылка,
		|	КорректировкаРеализации.Номер,
		|	КорректировкаРеализации.Дата,
		|	КорректировкаРеализации.АдресДоставки,
		|	КорректировкаРеализации.БанковскийСчетОрганизации,
		|	КорректировкаРеализации.БанковскийСчетКонтрагента,
		|	КорректировкаРеализации.БанковскийСчетГрузоотправителя,
		|	КорректировкаРеализации.БанковскийСчетГрузополучателя,
		|	КорректировкаРеализации.Валюта,
		|	КорректировкаРеализации.ВалютаВзаиморасчетов,
		|	КорректировкаРеализации.Грузополучатель,
		|	КорректировкаРеализации.Грузоотправитель,
		|	КорректировкаРеализации.ДатаПлатежа,
		|	NULL,
		|	КорректировкаРеализации.ДоверенностьВыдана,
		|	КорректировкаРеализации.ДоверенностьДата,
		|	КорректировкаРеализации.ДоверенностьЛицо,
		|	КорректировкаРеализации.ДоверенностьНомер,
		|	NULL,
		|	КорректировкаРеализации.Организация,
		|	КорректировкаРеализации.Контрагент,
		|	КорректировкаРеализации.Менеджер,
		|	КорректировкаРеализации.НалогообложениеНДС,
		|	КорректировкаРеализации.СуммаДокумента,	
		|	КорректировкаРеализации.Партнер,
		|	КорректировкаРеализации.Подразделение,
		|	КорректировкаРеализации.Сделка,
		|	NULL,
		|	КорректировкаРеализации.Склад,
		|	КорректировкаРеализации.Согласован,
		|	КорректировкаРеализации.Соглашение,
		|	КорректировкаРеализации.СуммаВзаиморасчетов,
		|	КорректировкаРеализации.ФормаОплаты,
		|	NULL,
		|	КорректировкаРеализации.ЦенаВключаетНДС,
		|	NULL,
		|	КорректировкаРеализации.Отпустил,
		|	КорректировкаРеализации.ОтпустилДолжность,
		|	КорректировкаРеализации.ПродажаПоЗаказам,
		|	NULL,
		|	NULL,		
		|	КорректировкаРеализации.Договор,
		|	КорректировкаРеализации.Основание,
		|	NULL,
		|	NULL,		
		|	NULL,
		|	NULL,
		|	NULL,		
		|	NULL,
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	КорректировкаРеализации.Руководитель,
		|	КорректировкаРеализации.ГлавныйБухгалтер,
		|	КорректировкаРеализации.ПорядокРасчетов,
		|	NULL,
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	КорректировкаРеализации.ОснованиеДата,
		|	КорректировкаРеализации.ОснованиеНомер,
		|	NULL,		
		|	NULL,		
		|	КорректировкаРеализации.ВариантОформленияПродажи,
		|	NULL,		
		|	NULL,		
		|	КорректировкаРеализации.НаправлениеДеятельности,
		|	КорректировкаРеализации.Курс,
		|	КорректировкаРеализации.Кратность,
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	NULL		
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиАкта()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктВыполненныхРабот.Ссылка КАК Ссылка,
		|	АктВыполненныхРабот.Номер КАК Номер,
		|	АктВыполненныхРабот.Дата КАК Дата,
		|	АктВыполненныхРабот.АктПоЗаказам КАК АктПоЗаказам,
		|	АктВыполненныхРабот.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	АктВыполненныхРабот.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	АктВыполненныхРабот.Валюта КАК Валюта,
		|	АктВыполненныхРабот.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	АктВыполненныхРабот.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	АктВыполненныхРабот.ДополнительнаяИнформацияШапки КАК ДополнительнаяИнформацияШапки,
		|	АктВыполненныхРабот.ЗаказКлиента КАК ЗаказКлиента,
		|	АктВыполненныхРабот.Касса КАК Касса,
		|	АктВыполненныхРабот.Комментарий КАК Комментарий,
		|	АктВыполненныхРабот.Контрагент КАК Контрагент,
		|	АктВыполненныхРабот.Менеджер КАК Менеджер,
		|	АктВыполненныхРабот.НалогообложениеНДС КАК НалогообложениеНДС,
		|	АктВыполненныхРабот.Организация КАК Организация,
		|	АктВыполненныхРабот.Партнер КАК Партнер,
		|	АктВыполненныхРабот.Подразделение КАК Подразделение,
		|	АктВыполненныхРабот.Сделка КАК Сделка,
		|	АктВыполненныхРабот.СкидкиРассчитаны КАК СкидкиРассчитаны,
		|	АктВыполненныхРабот.Согласован КАК Согласован,
		|	АктВыполненныхРабот.Соглашение КАК Соглашение,
		|	АктВыполненныхРабот.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	АктВыполненныхРабот.СуммаДокумента КАК СуммаДокумента,
		|	АктВыполненныхРабот.ФормаОплаты КАК ФормаОплаты,
		|	АктВыполненныхРабот.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	АктВыполненныхРабот.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	АктВыполненныхРабот.КартаЛояльности КАК КартаЛояльности,
		|	АктВыполненныхРабот.Договор КАК Договор,
		|	АктВыполненныхРабот.Автор КАК Автор,
		|	АктВыполненныхРабот.КонтактноеЛицо КАК КонтактноеЛицо,
		|	АктВыполненныхРабот.Руководитель КАК Руководитель,
		|	АктВыполненныхРабот.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	АктВыполненныхРабот.ПорядокРасчетов КАК ПорядокРасчетов,
		|	АктВыполненныхРабот.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	АктВыполненныхРабот.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	АктВыполненныхРабот.Курс КАК Курс,
		|	АктВыполненныхРабот.Кратность КАК Кратность,
		|	АктВыполненныхРабот.ПорядокОплаты КАК ПорядокОплаты,
		|	АктВыполненныхРабот.Основание КАК Основание,
		|	АктВыполненныхРабот.ОснованиеДата КАК ОснованиеДата,
		|	АктВыполненныхРабот.ОснованиеНомер КАК ОснованиеНомер
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
		|ГДЕ
		|	АктВыполненныхРабот.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КорректировкаРеализации.Ссылка,
		|	КорректировкаРеализации.Номер,
		|	КорректировкаРеализации.Дата,
		|	КорректировкаРеализации.ПродажаПоЗаказам,
		|	КорректировкаРеализации.БанковскийСчетОрганизации,
		|	КорректировкаРеализации.БанковскийСчетКонтрагента,
		|	КорректировкаРеализации.Валюта,
		|	КорректировкаРеализации.ВалютаВзаиморасчетов,
		|	NULL,
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	КорректировкаРеализации.Комментарий,
		|	КорректировкаРеализации.Контрагент,
		|	КорректировкаРеализации.Менеджер,
		|	КорректировкаРеализации.НалогообложениеНДС,
		|	КорректировкаРеализации.Организация,
		|	КорректировкаРеализации.Партнер,
		|	КорректировкаРеализации.Подразделение,
		|	КорректировкаРеализации.Сделка,
		|	NULL,
		|	КорректировкаРеализации.Согласован,
		|	КорректировкаРеализации.Соглашение,
		|	КорректировкаРеализации.СуммаВзаиморасчетов,
		|	КорректировкаРеализации.СуммаДокумента,	
		|	КорректировкаРеализации.ФормаОплаты,
		|	КорректировкаРеализации.ЦенаВключаетНДС,
		|	NULL,
		|	NULL,
		|	КорректировкаРеализации.Договор,
		|	NULL,
		|	NULL,
		|	КорректировкаРеализации.Руководитель,
		|	КорректировкаРеализации.ГлавныйБухгалтер,
		|	КорректировкаРеализации.ПорядокРасчетов,
		|	NULL,
		|	КорректировкаРеализации.НаправлениеДеятельности,
		|	КорректировкаРеализации.Курс,
		|	КорректировкаРеализации.Кратность,
		|	NULL,
		|	КорректировкаРеализации.Основание,
		|	КорректировкаРеализации.ОснованиеДата,
		|	КорректировкаРеализации.ОснованиеНомер	
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиКорректировкиРеализации()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КорректировкаРеализации.Ссылка КАК Ссылка,
		|	КорректировкаРеализации.Номер КАК Номер,
		|	КорректировкаРеализации.Дата КАК Дата,
		|	КорректировкаРеализации.ДокументОснование КАК ДокументОснование,
		|	КорректировкаРеализации.Партнер КАК Партнер,
		|	КорректировкаРеализации.Контрагент КАК Контрагент,
		|	КорректировкаРеализации.Соглашение КАК Соглашение,
		|	КорректировкаРеализации.Организация КАК Организация,
		|	КорректировкаРеализации.Договор КАК Договор,
		|	КорректировкаРеализации.Склад КАК Склад,
		|	КорректировкаРеализации.Подразделение КАК Подразделение,
		|	КорректировкаРеализации.Сделка КАК Сделка,
		|	КорректировкаРеализации.Валюта КАК Валюта,
		|	КорректировкаРеализации.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	КорректировкаРеализации.Менеджер КАК Менеджер,
		|	КорректировкаРеализации.СуммаДокумента КАК СуммаДокумента,
		|	КорректировкаРеализации.ДатаПлатежа КАК ДатаПлатежа,
		|	КорректировкаРеализации.ФормаОплаты КАК ФормаОплаты,
		|	КорректировкаРеализации.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	КорректировкаРеализации.НалогообложениеНДС КАК НалогообложениеНДС,
		|	КорректировкаРеализации.ПродажаПоЗаказам КАК ПродажаПоЗаказам,
		|	КорректировкаРеализации.ПодразделениеДоходы КАК ПодразделениеДоходы,
		|	КорректировкаРеализации.СтатьяДоходов КАК СтатьяДоходов,
		|	КорректировкаРеализации.АналитикаДоходов КАК АналитикаДоходов,
		|	КорректировкаРеализации.ПодразделениеРасходы КАК ПодразделениеРасходы,
		|	КорректировкаРеализации.СтатьяРасходов КАК СтатьяРасходов,
		|	КорректировкаРеализации.АналитикаРасходов КАК АналитикаРасходов,
		|	КорректировкаРеализации.Согласован КАК Согласован,
		|	КорректировкаРеализации.Отпустил КАК Отпустил,
		|	КорректировкаРеализации.ОтпустилДолжность КАК ОтпустилДолжность,
		|	КорректировкаРеализации.Основание КАК Основание,
		|	КорректировкаРеализации.Грузополучатель КАК Грузополучатель,
		|	КорректировкаРеализации.Грузоотправитель КАК Грузоотправитель,
		|	КорректировкаРеализации.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	КорректировкаРеализации.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	КорректировкаРеализации.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	КорректировкаРеализации.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
		|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
		|	КорректировкаРеализации.ДоверенностьНомер КАК ДоверенностьНомер,
		|	КорректировкаРеализации.ДоверенностьДата КАК ДоверенностьДата,
		|	КорректировкаРеализации.ДоверенностьВыдана КАК ДоверенностьВыдана,
		|	КорректировкаРеализации.ДоверенностьЛицо КАК ДоверенностьЛицо,
		|	КорректировкаРеализации.Комментарий КАК Комментарий,
		|	КорректировкаРеализации.Руководитель КАК Руководитель,
		|	КорректировкаРеализации.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	КорректировкаРеализации.ПорядокРасчетов КАК ПорядокРасчетов,
		|	КорректировкаРеализации.ВидКорректировки КАК ВидКорректировки,
		|	КорректировкаРеализации.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	КорректировкаРеализации.ОснованиеДата КАК ОснованиеДата,
		|	КорректировкаРеализации.ОснованиеНомер КАК ОснованиеНомер,
		|	КорректировкаРеализации.АктОРасхожденияхПослеОтгрузкиОснование КАК АктОРасхожденияхПослеОтгрузкиОснование,
		|	КорректировкаРеализации.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|	КорректировкаРеализации.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	КорректировкаРеализации.Курс КАК Курс,
		|	КорректировкаРеализации.Кратность КАК Кратность
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьСуммыДляСчетаФактуры(ДанныеДляОбъекта, ДеревоДанных)
	
	Суммы = Документы.СчетФактураПолученный.ПустаяСсылка().ДокументыОснования.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Суммы.Добавить();
		НоваяСтрока.ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ДокументОснование");
		
		СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
	КонецЦикла;
	
	// Свернем суммы по реквизитам табличной части ДокументыОснования.
	Суммы.Свернуть("ДокументОснование,ХозяйственнаяОперация,ИсходныйДокумент,СтавкаНДС", "Сумма,СуммаНДС");
	ДанныеДляОбъекта.Вставить("Суммы", Суммы);
	
КонецПроцедуры

Процедура ЗаполнитьСуммыДляКорректировочногоСчетаФактуры(ДанныеДляОбъекта, ДеревоДанных)
	
	Суммы = Документы.СчетФактураПолученный.ПустаяСсылка().ДокументыОснования.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Суммы.Добавить();
		НоваяСтрока.ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ДокументОснование");
		
		СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "СведенияОТоварах.НомерСтроки.СуммаНалога");
		НоваяСтрока.СуммаУвеличение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомУвеличение");
		НоваяСтрока.СуммаУменьшение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомУменьшение");
		НоваяСтрока.СуммаНДСУвеличение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаУвеличение");
		НоваяСтрока.СуммаНДСУменьшение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаУменьшение");
		
	КонецЦикла;
	
	// Свернем суммы по реквизитам табличной части ДокументыОснования.
	Суммы.Свернуть("ДокументОснование,ХозяйственнаяОперация,ИсходныйДокумент,СтавкаНДС", "Сумма,СуммаНДС,СуммаУвеличение,СуммаУменьшение,СуммаНДСУвеличение,СуммаНДСУменьшение");
	ДанныеДляОбъекта.Вставить("Суммы", Суммы);
	
КонецПроцедуры

#Область СопоставлениеНоменклатуры

Функция НаименованиеРеквизитаСопоставленияНоменклатурыБЭД(ТипОбъекта)
	
	Если ТипОбъекта = Тип("СправочникСсылка.Номенклатура") 
			или ТипОбъекта = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		Возврат "НаименованиеПолное";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область АктОРасхождениях

Функция РеквизитыУчастникаАктаОРасхождениях(Знач Участник)
	
	Реквизиты = Новый Структура("ИНН,КПП,Наименование");
	
	Если Участник.ТипУчастника.Свойство("ЮЛ") Тогда
		
		Реквизиты.ИНН = Участник.ТипУчастника.ЮЛ.ИНН;
		Реквизиты.КПП = Участник.ТипУчастника.ЮЛ.КПП;
		Реквизиты.Наименование = Участник.ТипУчастника.ЮЛ.НаименованиеОрганизации;
		
	ИначеЕсли Участник.ТипУчастника.Свойство("ИЛ") Тогда
		
		Реквизиты.Наименование = Участник.ТипУчастника.ИЛ.НаименованиеОрганизации;
		
	ИначеЕсли Участник.ТипУчастника.Свойство("ИП") Тогда
		
		Реквизиты.ИНН = Участник.ТипУчастника.ИП.ИНН;
		
	ИначеЕсли Участник.ТипУчастника.Свойство("ФЛ") Тогда
		
		Реквизиты.ИНН = Участник.ТипУчастника.ФЛ.ИНН;
		ЧастиФИО = Новый Массив;
		Если ЗначениеЗаполнено(Участник.ТипУчастника.ФЛ.Фамилия) Тогда
			ЧастиФИО.Добавить(Участник.ТипУчастника.ФЛ.Фамилия);
		КонецЕсли;
		Если ЗначениеЗаполнено(Участник.ТипУчастника.ФЛ.Имя) Тогда
			ЧастиФИО.Добавить(Участник.ТипУчастника.ФЛ.Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(Участник.ТипУчастника.ФЛ.Отчество) Тогда
			ЧастиФИО.Добавить(Участник.ТипУчастника.ФЛ.Отчество);
		КонецЕсли;
		Реквизиты.Наименование = СтрСоединить(ЧастиФИО);
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыПриемщикаАктаОРасхождениях(Знач Приемщик)
	
	Реквизиты = Новый Структура("ФИО,Представление,Должность");
	Реквизиты.ФИО = Новый Структура("Фамилия,Имя,Отчество");
	
	Если Приемщик.Свойство("РаботникОрганизацииПокупателя") Тогда
		
		Работник = Приемщик.РаботникОрганизацииПокупателя;
		Реквизиты.ФИО.Фамилия = Работник.Фамилия;
		Реквизиты.ФИО.Имя = Работник.Имя;
		Реквизиты.ФИО.Отчество = Работник.Отчество;
		Реквизиты.Представление = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Реквизиты.ФИО);
		Реквизиты.Должность = Работник.Должность;
		
	ИначеЕсли Приемщик.Свойство("ИноеЛицо") Тогда
		
		Если Приемщик.ИноеЛицо.Свойство("ПредставительОрганизации") Тогда
			
			Представитель = Приемщик.ИноеЛицо.ПредставительОрганизации;
			Реквизиты.ФИО.Фамилия = Представитель.Фамилия;
			Реквизиты.ФИО.Имя = Представитель.Имя;
			Реквизиты.ФИО.Отчество = Представитель.Отчество;
			Реквизиты.Представление = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Реквизиты.ФИО);
			Реквизиты.Должность = Представитель.Должность;
			
		ИначеЕсли Приемщик.ИноеЛицо.Свойство("ФизическоеЛицо") Тогда
			
			ФизическоеЛицо = Приемщик.ИноеЛицо.ФизическоеЛицо;
			Реквизиты.ФИО.Фамилия = ФизическоеЛицо.Фамилия;
			Реквизиты.ФИО.Имя = ФизическоеЛицо.Имя;
			Реквизиты.ФИО.Отчество = ФизическоеЛицо.Отчество;
			Реквизиты.Представление = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Реквизиты.ФИО);
			Реквизиты.Должность = ФизическоеЛицо.ОснованиеПолномочий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция НайтиРеализациюТоваровУслуг(Знач Организация, Знач НомерДокумента, Знач ДатаДокумента)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеПервичныхДокументов.Документ КАК СФ,
	|	ДанныеПервичныхДокументов.Документ.ДокументОснование КАК Документ
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|	И ДанныеПервичныхДокументов.Номер = &НомерДокумента
	|	И НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.Дата, ДЕНЬ) = &ДатаДокумента
	|	И ТИПЗНАЧЕНИЯ(ДанныеПервичныхДокументов.Документ) = ТИП(Документ.СчетФактураВыданный)";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НомерДокумента", НомерДокумента);
	Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(ДатаДокумента));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Документ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНаОсновании(Основание, ДокументОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоОснованиюРеализации();	
	Запрос.УстановитьПараметр("Основание", Основание);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыОснования.РеализацияТоваровУслуг,
		РеквизитыОснования.СтатусДокумента,
		РеквизитыОснования.ЕстьОшибкиПроведен,
		РеквизитыОснования.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов,
		РеквизитыОснования.СоглашениеДоступноВнешнимПользователям);
	
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыОснования);
	
	ДокументОбъект.Товары.Загрузить(РезультатЗапроса[1].Выгрузить());
	ДокументОбъект.Серии.Загрузить(РезультатЗапроса[2].Выгрузить());
	
КонецПроцедуры

Функция ТекстЗапросаПоОснованиюРеализации()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕ РеализацияТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
	|			ИЛИ РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваровУслуг,
	|	РеализацияТоваровУслуг.Статус КАК СтатусДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Менеджер,
	|	РеализацияТоваровУслуг.НалогообложениеНДС,
	|	РеализацияТоваровУслуг.Партнер,
	|	РеализацияТоваровУслуг.Валюта,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Грузоотправитель) КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.ХозяйственнаяОперация,
	|	РеализацияТоваровУслуг.ЦенаВключаетНДС,
	|	РеализацияТоваровУслуг.Договор,
	|	РеализацияТоваровУслуг.КонтактноеЛицо,
	|	РеализацияТоваровУслуг.Соглашение,
	|	РеализацияТоваровУслуг.Подразделение,
	|	РеализацияТоваровУслуг.Соглашение.ДоступноВнешнимПользователям КАК СоглашениеДоступноВнешнимПользователям
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика,
	|	РеализацияТоваровУслугТовары.Серия,
	|	РеализацияТоваровУслугТовары.Назначение,
	|	РеализацияТоваровУслугТовары.Упаковка,
	|	РеализацияТоваровУслугТовары.КоличествоУпаковок,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.ВидЦены,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.КоличествоУпаковок = 0
	|			ТОГДА РеализацияТоваровУслугТовары.Цена
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Сумма / РеализацияТоваровУслугТовары.КоличествоУпаковок КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.Склад,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.СуммаСНДС,
	|	РеализацияТоваровУслугТовары.СтатусУказанияСерий,
	|	РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
	|	РеализацияТоваровУслугТовары.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслугТовары.КодСтроки КАК КодСтроки,
	|	ИСТИНА КАК ЗаполненоПоРеализации,
	|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковокПоДокументу,
	|	РеализацияТоваровУслугТовары.Количество КАК КоличествоПоДокументу,
	|	РеализацияТоваровУслугТовары.Сумма КАК СуммаПоДокументу,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДСПоДокументу,
	|	РеализацияТоваровУслугТовары.СуммаСНДС КАК СуммаСНДСПоДокументу
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслугСерии.Серия          КАК Серия,
	|	РеализацияТоваровУслугСерии.Количество     КАК Количество,
	|	РеализацияТоваровУслугСерии.Количество     КАК КоличествоПоДокументу,
	|	РеализацияТоваровУслугСерии.Номенклатура   КАК Номенклатура,
	|	РеализацияТоваровУслугСерии.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугСерии.Назначение     КАК Назначение,
	|	РеализацияТоваровУслугСерии.Склад          КАК Склад,
	|	РеализацияТоваровУслугСерии.Ссылка         КАК Реализация,
	|	ИСТИНА                                     КАК ЗаполненоПоРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Серии КАК РеализацияТоваровУслугСерии
	|ГДЕ
	|	РеализацияТоваровУслугСерии.Ссылка = &Основание
	|";

КонецФункции 

#КонецОбласти

Функция ПолучитьДанныеПоТоварам(ТоварыКаталога)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА ВТ_Товары.Номенклатура.Наименование
	|		ИНАЧЕ ВТ_Товары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК БазоваяЕдиницаКод,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Наименование, """") КАК БазоваяЕдиницаНаименование,
	|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """") КАК БазоваяЕдиницаНаименованиеПолное,
	|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """") КАК БазоваяЕдиницаМеждународноеСокращение,
	|	1 КАК ЕдиницаХраненияОстатковКоэффициент,
	|	ВТ_Товары.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ЕСТЬNULL(ВТ_Товары.Характеристика.Наименование, """") КАК ХарактеристикаНаименование,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Номенклатура.Марка.Наименование КАК ТорговаяМарка,
	|	ВТ_Товары.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ВТ_Товары.Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|
	|";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТоварыКаталога);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат МассивРезультатов[1].Выгрузить();
	
КонецФункции

// Подготавливает данные для обработки ошибок заполнения обязательных полей.
//
// Параметры:
//  ТаблицаТоваров   - ТаблицаЗначений - сведения о товарах для формирования электронного документа.
//  СсылкаНаДокумент - ДокументСсылка - Ссылка на основание электронного документа.
//
Процедура ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаДокумент = Неопределено) Экспорт

	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Артикул", "Номенклатура", "Объект.Артикул");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Наименование", "Номенклатура", "Объект.Наименование");
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда		
		Если ТаблицаТоваров.Колонки.Найти("Количество") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Цена", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Сумма") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Сумма", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмеренияКодПоОКЕИ") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ЕдиницаИзмеренияКодПоОКЕИ", "ЕдиницаИзмерения", "Объект.Код");
		
		// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
		СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()));
		Если СтрокиСПустойЕдиницей.Количество() Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем единицу прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			Иначе
				// Иначе ссылаемся на незаполненность единицы в самой номенклатуре.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", "Номенклатура", "Объект.ЕдиницаИзмерения");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаКод", "Упаковка", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаМеждународноеСокращение", "Упаковка", "Объект.МеждународноеСокращение");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименование", "Упаковка", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименованиеПолное", "Упаковка", "Объект.НаименованиеПолное");
	
	// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
	СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()));
	Если СтрокиСПустойЕдиницей.Количество() Тогда
		Если СсылкаНаДокумент <> Неопределено Тогда
			// Для документов берем единицу прямо из документа.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
		Иначе
			// Это каталог товаров - для него единица берется из номенклатуры.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", "Номенклатура", "Объект.ЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ВалютаЦены") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ВалютаЦены", "Валюта", "Объект.Код");
		
		// Если валюта пустая, надо ссылаться на незаполненность самой валюты, а не ее полей.
		СтрокиСПустойВалютой = ТаблицаТоваров.НайтиСтроки(Новый Структура("Валюта", Справочники.Валюты.ПустаяСсылка()));
		Если СтрокиСПустойВалютой.Количество() И СсылкаНаДокумент <> Неопределено Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем валюту прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойВалютой,
					"ВалютаЦены", СсылкаНаДокумент, "Объект.Валюта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ЭлектронноеВзаимодействиеУТ.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.10.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("155cdaf2-893b-4e03-bc43-dbc1c5557d56");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействиеУТ.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает константу ""Использовать обмен электронными документами"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьОбменЭД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьЭлектронныеПодписи.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьОбменЭД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьЭлектронныеПодписи.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбменСКонтрагентами.ВключитьУтверждениеВходящихДокументов";
	НоваяСтрока.Порядок = "До";

КонецПроцедуры

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если НЕ Константы.ИспользоватьОбменЭД.Получить() Тогда
		Если НЕ Константы.ИспользоватьЭлектронныеПодписи.Получить() Тогда
			МенеджерЗначенияИспользоватьЭП = Константы.ИспользоватьЭлектронныеПодписи.СоздатьМенеджерЗначения();
			МенеджерЗначенияИспользоватьЭП.Значение = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначенияИспользоватьЭП);			
		КонецЕсли;
		МенеджерЗначенияИспользоватьЭД = Константы.ИспользоватьОбменЭД.СоздатьМенеджерЗначения();
		МенеджерЗначенияИспользоватьЭД.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначенияИспользоватьЭД);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти 

Функция ВыводитьКодыТНВЭД(СтранаРегистрации, ДатаПроверки)
	
	Выводить = Ложь;
	
	Выводить = УчетНДСРФ.СтранаЯвляетсяЧленомТаможенногоСоюза(СтранаРегистрации, ДатаПроверки)
		И ДатаПроверки >= УчетНДСУП.НастройкиУчета().ДатаРазделенияЭкспорта;
	
	Возврат Выводить;
	
КонецФункции

#КонецОбласти

#Область Диагностика

Процедура ПриОпределенииДокументовСПоддержкойДиагностикиОшибок(СписокДокументов) Экспорт
	
	СписокДокументов.Добавить(Метаданные.Документы.АктВыполненныхРабот);
	СписокДокументов.Добавить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями);
	СписокДокументов.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента);
	СписокДокументов.Добавить(Метаданные.Документы.ЗаказКлиента);
	СписокДокументов.Добавить(Метаданные.Документы.ЗаказПоставщику);
	СписокДокументов.Добавить(Метаданные.Документы.ЗапросКоммерческогоПредложенияОтКлиента);
	СписокДокументов.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	СписокДокументов.Добавить(Метаданные.Документы.КоммерческоеПредложениеКлиенту);
	СписокДокументов.Добавить(Метаданные.Документы.КорректировкаПриобретения);
	СписокДокументов.Добавить(Метаданные.Документы.КорректировкаРеализации);
	СписокДокументов.Добавить(Метаданные.Документы.ОтчетКомиссионера);
	СписокДокументов.Добавить(Метаданные.Документы.ОтчетКомиссионераОСписании);
	СписокДокументов.Добавить(Метаданные.Документы.ОтчетКомитенту);
	СписокДокументов.Добавить(Метаданные.Документы.ОтчетКомитентуОСписании);
	СписокДокументов.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями);
	СписокДокументов.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг);
	СписокДокументов.Добавить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	СписокДокументов.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	СписокДокументов.Добавить(Метаданные.Документы.РегистрацияЦенНоменклатурыПоставщика);
	СписокДокументов.Добавить(Метаданные.Документы.СчетНаОплатуКлиенту);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураВыданный);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураВыданныйАванс);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураКомиссионеру);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураКомитента);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураПолученный);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураПолученныйАванс);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураПолученныйНалоговыйАгент);
	
КонецПроцедуры

Процедура ПриПроверкеИспользованияУведомлений(Используется) Экспорт
	
	Используется = Истина

КонецПроцедуры

#КонецОбласти

#Область ПрямойОбмен

Процедура ИспользоватьПрямойОбмен(Использовать) Экспорт
	
	Использовать = Истина;
	
КонецПроцедуры

#КонецОбласти
