////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Открывает форму выбора спецификаций по номенклатуре
//
// Параметры:
//  Номенклатура				 - СправочникСсылка.Номенклатура - номенклатура
//  Характеристика				 - СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика номенклатуры
//  НачалоПроизводства			 - Дата											 - дата начала производства, на эту дату спецификация должна быть действующей
//  Подразделение				 - СправочникСсылка.СтруктураПредприятия		 - подразделение, за которым закреплено производство
//  ПараметрыВыбораСпецификаций	 - Структура									 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций()
//  Владелец					 - ФормаКлиентскогоПриложения								 - владелец формы.
//
Процедура ОткрытьФормуВыбораСпецификацийПоНоменклатуре(Номенклатура, Характеристика, НачалоПроизводства = '00010101', Подразделение = Неопределено, ПараметрыВыбораСпецификаций = Неопределено, Владелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Номенклатура", Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	
	ПараметрыФормы.Вставить("НачалоПроизводства", НачалоПроизводства);
	ПараметрыФормы.Вставить("Подразделение", ?(Подразделение <> Подразделение, Подразделение, ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка")));
	
	Если ПараметрыВыбораСпецификаций <> Неопределено Тогда
		ИсточникПараметров = ПараметрыВыбораСпецификаций;
	Иначе
		ИсточникПараметров = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	КонецЕсли;
	Для каждого Элемент Из ИсточникПараметров Цикл
		Если Элемент.Ключ <> "ПолучитьСпецификацииПоНоменклатуре"
			И Элемент.Ключ <> "ПолучитьСпецификацииПоСпискуНоменклатуры" Тогда
			ПараметрыФормы.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("ПолучитьСпецификацииПоНоменклатуре", Истина);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаВыбораПоНоменклатуре", ПараметрыФормы, Владелец);
	
КонецПроцедуры

// Открывает форму выбора спецификаций по номенклатуре
//
// Параметры:
//  СписокИзделий				 - ТаблицаЗначений	 - список номенклатуры, содержит колонки "Номенклатура, Характеристика, НачалоПроизводства, Подразделение"
//  ПараметрыВыбораСпецификаций	 - Структура		 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций()
//  Владелец					 - ФормаКлиентскогоПриложения	 - владелец формы.
//
Процедура ОткрытьФормуВыбораСпецификацийПоСпискуНоменклатуры(СписокИзделий, ПараметрыВыбораСпецификаций = Неопределено, Владелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("СписокИзделий", СписокИзделий);
	
	Если ПараметрыВыбораСпецификаций <> Неопределено Тогда
		ИсточникПараметров = ПараметрыВыбораСпецификаций;
	Иначе
		ИсточникПараметров = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	КонецЕсли;
	Для каждого Элемент Из ИсточникПараметров Цикл
		Если Элемент.Ключ <> "ПолучитьСпецификацииПоНоменклатуре"
			И Элемент.Ключ <> "ПолучитьСпецификацииПоСпискуНоменклатуры" Тогда
			ПараметрыФормы.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("ПолучитьСпецификацииПоСпискуНоменклатуры", Истина);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаВыбораПоНоменклатуре", ПараметрыФормы, Владелец);
	
КонецПроцедуры

// Копирует спецификацию и этапы
//
// Параметры:
//  Источник							- СправочникСсылка.РесурсныеСпецификации - спецификация, которую нужно скопировать
//  ОписаниеОбработкиПослеКопирования	- ОписаниеОповещения - содержит описание процедуры, которую нужно вызвать после копирования.
//
Процедура КопироватьРесурснуюСпецификацию(Источник, ОписаниеОбработкиПослеКопирования = Неопределено) Экспорт

	ТекстВопроса = НСтр("ru = 'Будет создана и записана копия ресурсной спецификации (включая этапы производственного процесса).
								|Скопировать?'");
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Скопировать'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ДополнительныеПараметры = Новый Структура("Источник,ОписаниеОбработкиПослеКопирования", Источник, ОписаниеОбработкиПослеКопирования);
	ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьРесурснуюСпецификациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

// Открывает форму основных спецификаций для указанного изделия.
//
// Параметры:
//  Номенклатура 				- СправочникСсылка.Номенклатура - производимое изделие.
//  ПараметрыВыполненияКоманды	- ПараметрыВыполненияКоманды - описывает структуру, передаваемую в обработчик команды.
//
Процедура ПоказатьОсновныеСпецификацииИзделия(Номенклатура, Спецификация = Неопределено, ПараметрыВыполненияКоманды = Неопределено) Экспорт

	СтруктураБыстрогоОтбора = Новый Структура("Номенклатура", Номенклатура);
	ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора,ДляЗаданнойНоменклатуры", СтруктураБыстрогоОтбора, Истина);
	Если Спецификация <> Неопределено И НЕ Спецификация.Пустая() Тогда
		ПараметрыФормы.Вставить("ДляЗаданнойСпецификации", Спецификация);
	КонецЕсли;
	
	Если ПараметрыВыполненияКоманды = Неопределено Тогда
		ОткрытьФорму("РегистрСведений.ОсновныеСпецификации.ФормаСписка", ПараметрыФормы);
	Иначе
		ОткрытьФорму("РегистрСведений.ОсновныеСпецификации.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	КонецЕсли; 
	
КонецПроцедуры

// Устанавливает новый статус для спецификаций
//
// Параметры:
//	НовыйСтатус				- ПеречислениеСсылка.СтатусыСпецификаций - новый статус
//	ПредставлениеСтатуса	- Строка - представление нового статуса
//  МассивСпецификаций		- Массив - список спецификаций.
//
Процедура УстановитьСтатусСпецификаций(НовыйСтатус, ПредставлениеСтатуса, МассивСпецификаций) Экспорт
	
	Если МассивСпецификаций.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      НовыйСтатус);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     МассивСпецификаций);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусСпецификацийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru='Выбранным спецификациям будет установлен статус ""%1"". Продолжить?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеСтатуса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Назначает спецификацию основной для указанного изделия во всех подразделениях
//
// Параметры:
//  Подразделение	- СправочникСсылка.СтруктураПредприятия - подразделение за которым закреплено обеспечение изделием
//  Номенклатура	- СправочникСсылка.Номенклатура - производимое изделие
//  Характеристика	- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика производимого изделия
//  Спецификация	- СправочникСсылка.РесурсныеСпецификации - основная спецификация.
//
// Возвращаемое значение:
//   Булево   - Истина, если спецификация назначена основной.
//
Функция НазначитьОсновнойСпецификациейДляВсехПодразделений(Номенклатура, Характеристика, Спецификация) Экспорт
	Перем СтруктураОшибки;
	
	СвойстваЗаписи = Новый Структура;
	
	СвойстваЗаписи.Вставить("Номенклатура",   Номенклатура);
	СвойстваЗаписи.Вставить("Характеристика", Характеристика);
	СвойстваЗаписи.Вставить("Спецификация",   Спецификация);
	
	СвойстваЗаписи.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	
	НавигационнаяСсылка = Неопределено;
	Результат = УправлениеДаннымиОбИзделияхВызовСервера.НазначитьОсновнойСпецификацией(СвойстваЗаписи, НавигационнаяСсылка, СтруктураОшибки);
	
	Если Результат Тогда
		ОповеститьОЗаписиОсновнойСпецификации(СвойстваЗаписи, НавигационнаяСсылка);
	ИначеЕсли СтруктураОшибки.Свойство("ТекстОшибки") Тогда
		ПоказатьПредупреждение(,СтруктураОшибки.ТекстОшибки,, НСтр("ru = 'Не удалось назначить спецификацию основной'"));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Формирует оповещение о записи основной спецификации
// Используется для обновления данных в формах и для информирования пользователя о завершенной операции.
//
// Параметры:
//  СвойстваЗаписи - Структура, РегистрСведенийМенеджерЗаписи - содержит значения свойств записи
//  НавигационнаяСсылка - Строка - навигационная ссылка на измененную запись.
//
Процедура ОповеститьОЗаписиОсновнойСпецификации(СвойстваЗаписи = Неопределено, НавигационнаяСсылка = Неопределено) Экспорт

	Если СвойстваЗаписи <> Неопределено Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Подразделение",  СвойстваЗаписи.Подразделение);
		СтруктураЗаписи.Вставить("Номенклатура",   СвойстваЗаписи.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика", СвойстваЗаписи.Характеристика);
		СтруктураЗаписи.Вставить("Спецификация",   СвойстваЗаписи.Спецификация);
	Иначе
		СтруктураЗаписи = Неопределено;
	КонецЕсли; 
	
	Оповестить("Запись_ОсновныеСпецификации", СтруктураЗаписи);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ОсновныеСпецификации"));
	
	Если НавигационнаяСсылка <> Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменена основная спецификация'"), НавигационнаяСсылка);
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет действия при удалении видов рабочих центров из табличной части
// - удаляет альтернативные виды рабочих центров.
//
// Параметры:
//  ТаблицаФормы								- ТаблицаФормы - таблица формы на которой расположен список видов рабочих центров
//  АльтернативныеВидыРабочихЦентров			- ДанныеФормыКоллекция - табличная часть, содержащая альтернативные виды рабочих центров.
//
Процедура ПередУдалениемВидовРабочихЦентров(ТаблицаФормы, АльтернативныеВидыРабочихЦентров) Экспорт

	ВыделенныеСтроки = ТаблицаФормы.ВыделенныеСтроки;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
		
		СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", ДанныеСтроки.КлючСвязи);
		СписокСтрок = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			АльтернативныеВидыРабочихЦентров.Удалить(НайденнаяСтрока);
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура КопироватьРесурснуюСпецификациюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = УправлениеДаннымиОбИзделияхВызовСервера.КопироватьРесурснуюСпецификацию(ДополнительныеПараметры.Источник);
	
	Если Ссылка <> Неопределено Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.РесурсныеСпецификации"));
		Оповестить("Запись_ЭтапыПроизводства");
		ПоказатьЗначение(, Ссылка);
		
		ПоказатьОповещениеПользователя(
				НСтр("ru = 'Создание:'"), 
				ПолучитьНавигационнуюСсылку(Ссылка), 
				Ссылка);
		
		Если ДополнительныеПараметры.ОписаниеОбработкиПослеКопирования <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОбработкиПослеКопирования, Ссылка);
		КонецЕсли; 
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось скопировать ресурсную спецификацию.'"));
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьСтатусСпецификацийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = УправлениеДаннымиОбИзделияхВызовСервера.УстановитьСтатусСпецификаций(
										ДополнительныеПараметры.ВыделенныеСсылки, 
										ДополнительныеПараметры.ЗначениеСтатуса);
										
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Неопределено,
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);
			
	Оповестить("Запись_РесурсныеСпецификации");
	ОповеститьОбИзменении(Тип("СправочникСсылка.РесурсныеСпецификации"));
	
КонецПроцедуры


#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

Функция НастроитьАвтовыборНоменклатурыЗавершение(РезультатНастройки, ДанныеСтроки, СоответствиеСвойств) Экспорт

	Если РезультатНастройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки,
							РезультатНастройки,
							"Номенклатура,Характеристика,НоменклатураСтрокой,ХарактеристикаСтрокой,
							|СпособАвтовыбораНоменклатуры,СпособАвтовыбораХарактеристики,
							|АлгоритмАвтовыбораХарактеристики, СвойствоСодержащееНоменклатуру");
	
	Если ДанныеСтроки.Свойство("ПрименениеМатериала") Тогда
		ДанныеСтроки.ПрименениеМатериала = РезультатНастройки.Описание;
	ИначеЕсли ДанныеСтроки.Свойство("ОписаниеИзделия") Тогда
		ДанныеСтроки.ОписаниеИзделия = РезультатНастройки.Описание;
	КонецЕсли;
	
	// Удалим старые настройки
	СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
	СписокСтрок = СоответствиеСвойств.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаСоответствие Из СписокСтрок Цикл
		СоответствиеСвойств.Удалить(СтрокаСоответствие);
	КонецЦикла;
	
	// Обновим данные
	Если ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции") Тогда
		Для каждого Элемент Из РезультатНастройки.СоответствиеСвойств Цикл
			НастройкаСоответствия = СоответствиеСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(НастройкаСоответствия, Элемент);
			НастройкаСоответствия.КлючСвязи = ДанныеСтроки.КлючСвязи;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ДанныеСтроки.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ДанныеСтроки.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, Неопределено);
	
	Возврат Истина;
	
КонецФункции

Функция НастроитьОтборПоСвойствамИРасчетПоФормуламЗавершение(РезультатНастройки, ДанныеСтроки, ОтборПоСвойствам) Экспорт

	Если РезультатНастройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеСтроки.АлгоритмРасчетаКоличества = РезультатНастройки.АлгоритмРасчетаКоличества;
	ДанныеСтроки.РасчетПоФормуле = НЕ ПустаяСтрока(ДанныеСтроки.АлгоритмРасчетаКоличества);
	
	// Удалим старые настройки
	СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
	СписокСтрок = ОтборПоСвойствам.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаУсловие Из СписокСтрок Цикл
		ОтборПоСвойствам.Удалить(СтрокаУсловие);
	КонецЦикла;
	
	Для каждого Условие Из РезультатНастройки.ОтборПоСвойствам Цикл
		НоваяСтрока = ОтборПоСвойствам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Условие);
		НоваяСтрока.КлючСвязи = ДанныеСтроки.КлючСвязи;
	КонецЦикла;
	
	ДанныеСтроки.УстановленОтборПоСвойствам = РезультатНастройки.ОтборПоСвойствам.Количество() > 0;
	
	// Очистим старые реквизиты
	Если ДанныеСтроки.Свойство("УдалитьОтборСвойство") Тогда
		ДанныеСтроки.УдалитьОтборСвойство         = Неопределено;
		ДанныеСтроки.УдалитьОтборЗначениеСвойства = Неопределено;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция РеквизитыНастроекПоСтрокеВМассивСтруктур(ДанныеСтроки, ТаблицаНастроек, СписокРеквизитов) Экспорт
	
	Результат = Новый Массив;
	
	СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
	
	СписокСтрок = ТаблицаНастроек.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из СписокСтрок Цикл
		СтруктураДанныхСтроки = Новый Структура(СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки, Строка);
		Результат.Добавить(СтруктураДанныхСтроки);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#КонецОбласти
