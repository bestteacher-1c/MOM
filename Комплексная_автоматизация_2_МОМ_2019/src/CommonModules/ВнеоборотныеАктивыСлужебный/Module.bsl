////////////////////////////////////////////////////////////////////////////////
// Содержит служебные процедуры и функции подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроверкиУчета

Функция ЕстьУчетВнеоборотныхАктивов2_4() Экспорт

	СписокЗапросовОбъединение = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.МестонахождениеОС КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАУУ КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСУУ КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК Таблица";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаЕстьУчетВнеоборотныхАктивов2_4(СписокЗапросовОбъединение);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();

КонецФункции

Функция ЕстьУчетВнеоборотныхАктивов() Экспорт

	СписокЗапросовОбъединение = Новый Массив;
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаЕстьУчетВнеоборотныхАктивов(СписокЗапросовОбъединение);
	
	Если СписокЗапросовОбъединение.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();

КонецФункции

Процедура ПроверитьВозможностьПринятияКУчетуОС(Объект, Отказ) Экспорт

	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьВозможностьПринятияКУчетуОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка,
		|	ОбъектыЭксплуатации.Представление,
		|	ОбъектыЭксплуатации.ДокументСнятияСУчета,
		|	ОбъектыЭксплуатации.УжеПринятоКУчету
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|		ОбъектыЭксплуатации.Представление КАК Представление,
		|
		|		ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчета, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчета,
		|
		|		&ОтражатьВУпрУчете
		|				И ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
		|				И ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ, НЕОПРЕДЕЛЕНО) <> &Ссылка
		|				И ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)) КАК УжеПринятоКУчету
		|
		|	ИЗ
		|		Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И Организация = &Организация
		|						И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
		|			ПО (ПервоначальныеСведенияОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|			ПО (МестонахождениеОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
		|			ПО (ПорядокУчетаОСУУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|				И (ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация)
		|	ГДЕ
		|		ОбъектыЭксплуатации.Ссылка В(&СписокОС)
		|	
		|	) КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.УжеПринятоКУчету";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОС", Объект.ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуОС2_4") Тогда
		Запрос.УстановитьПараметр("МОЛ", Объект.МОЛ);
		Запрос.УстановитьПараметр("Местонахождение", Объект.Местонахождение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Запрос.УстановитьПараметр("МОЛ", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("Местонахождение", Объект.Местонахождение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РазукомплектацияОС") Тогда
		Запрос.УстановитьПараметр("МОЛ", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("Местонахождение", Объект.Подразделение);
	Иначе
		Запрос.УстановитьПараметр("МОЛ", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("Местонахождение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	
	МестонахождениеВТабличнойЧасти =
		ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4")
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС;
	Запрос.УстановитьПараметр("МестонахождениеВТабличнойЧасти", МестонахождениеВТабличнойЧасти);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЭтоВводОстатков = ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		ИмяРеквизитаДляСообщения = "НомерСтроки";
	Иначе
		ИмяРеквизитаДляСообщения = "ОсновноеСредство";
	КонецЕсли; 
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеСтроки = Объект.ОС.Найти(Выборка.Ссылка, "ОсновноеСредство");
		
		Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, ИмяРеквизитаДляСообщения);
		
		Если Выборка.УжеПринятоКУчету Тогда
			Если ЗначениеЗаполнено(Выборка.ДокументСнятияСУчета) Тогда
				ТекстСообщения = НСтр("ru='Основное средство ""%1"" было снято с учета в организации %2. Повторное принятие к учету в ту же организацию не поддерживается.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Объект.Организация);
			ИначеЕсли ЭтоВводОстатков Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru='По основному средству ""%1"" уже введены остатки.'"), Выборка.Представление);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru='Основное средство ""%1"" уже принято к учету.'"), Выборка.Представление);
			КонецЕсли; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		КонецЕсли;
		
		ВнеоборотныеАктивыЛокализация.ПроверитьВозможностьПринятияКУчетуОС(
			Выборка, Объект, ДанныеСтроки, МестонахождениеВТабличнойЧасти, Путь, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыОСПриПринятииКУчету(Объект, ИмяТЧ, Отказ) Экспорт

	Запрос = Новый Запрос;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьРеквизитыОСПриПринятииКУчету(Запрос, Объект);
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка,
		|	ОбъектыЭксплуатации.Представление,
		|
		|	ОбъектыЭксплуатации.НеЗаполненИнвентарныйНомер
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|		ОбъектыЭксплуатации.Представление КАК Представление,
		|
		|		ОбъектыЭксплуатации.ИнвентарныйНомер = """" КАК НеЗаполненИнвентарныйНомер,
		|
		|	ИЗ
		|		Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|	ГДЕ
		|		ОбъектыЭксплуатации.Ссылка В(&СписокОС)
		|
		|	) КАК ОбъектыЭксплуатации
		|
		|ГДЕ
		|	ОбъектыЭксплуатации.НеЗаполненИнвентарныйНомер";
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СписокОС", Объект[ИмяТЧ].ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеСтроки = Объект[ИмяТЧ].Найти(Выборка.Ссылка, "ОсновноеСредство");
		
		Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
		
		Если Выборка.НеЗаполненИнвентарныйНомер Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='В карточке основного средства ""%1"" необходимо заполнить инвентарный номер.'"), Выборка.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, "ИнвентарныйНомер",, Отказ);
		КонецЕсли;
		
		ВнеоборотныеАктивыЛокализация.ПроверитьРеквизитыОСПриПринятииКУчету(Выборка, Объект, Путь, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьПринятияКУчетуНМА(Объект, Отказ, НМАВШапке = Ложь) Экспорт
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьВозможностьПринятияКУчетуНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыУчета.Ссылка,
		|	ОбъектыУчета.Представление,
		|	ОбъектыУчета.ВидОбъектаУчета,
		|	ОбъектыУчета.ТекущаяОрганизация,
		|	ОбъектыУчета.ТекущееПодразделение,
		|	ОбъектыУчета.ДокументСписания,
		|	ОбъектыУчета.УжеПринятоКУчету
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбъектыУчета.Ссылка КАК Ссылка,
		|		ОбъектыУчета.Представление КАК Представление,
		|		ОбъектыУчета.ВидОбъектаУчета КАК ВидОбъектаУчета,
		|		МестоУчетаНМА.Организация КАК ТекущаяОрганизация,
		|		МестоУчетаНМА.Подразделение КАК ТекущееПодразделение,
		|		ЕСТЬNULL(ПервоначальныеСведения.ДокументСписания, НЕОПРЕДЕЛЕНО) КАК ДокументСписания,
		|
		|		&ОтражатьВУпрУчете
		|				И ЕСТЬNULL(ПервоначальныеСведения.ДокументПринятияКУчетуУУ, НЕОПРЕДЕЛЕНО) <> &Ссылка
		|				И ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК УжеПринятоКУчету
		|
		|	ИЗ
		|		Справочник.НематериальныеАктивы КАК ОбъектыУчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И Организация = &Организация
		|						И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведения
		|			ПО (ПервоначальныеСведения.НематериальныйАктив = ОбъектыУчета.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И НематериальныйАктив В (&СписокНМА)) КАК МестоУчетаНМА
		|			ПО (МестоУчетаНМА.НематериальныйАктив = ОбъектыУчета.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМАУУ
		|			ПО (ПорядокУчетаНМАУУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
		|				И (ПорядокУчетаНМАУУ.Организация = МестоУчетаНМА.Организация)
		|	ГДЕ
		|		ОбъектыУчета.Ссылка В(&СписокНМА)) КАК ОбъектыУчета
		|ГДЕ
		|	ОбъектыУчета.УжеПринятоКУчету";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если НМАВШапке Тогда
		Запрос.УстановитьПараметр("СписокНМА", Объект.НематериальныйАктив);
	Иначе
		Запрос.УстановитьПараметр("СписокНМА", Объект.НМА.ВыгрузитьКолонку("НематериальныйАктив"));
	КонецЕсли;
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуНМА2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект.Местонахождение);
	Иначе
		Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		ИмяРеквизитаДляСообщения = "НомерСтроки";
	Иначе
		ИмяРеквизитаДляСообщения = "НематериальныйАктив";
	КонецЕсли; 
	
	ЭтоВводОстатков =  ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4");
	
	Пока Выборка.Следующий() Цикл
		
		Если НМАВШапке Тогда
			Путь = "НематериальныйАктив";
		Иначе
			ДанныеСтроки = Объект.НМА.Найти(Выборка.Ссылка, "НематериальныйАктив");
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НМА", ДанныеСтроки.НомерСтроки, ИмяРеквизитаДляСообщения);
		КонецЕсли;
			
		Если Выборка.УжеПринятоКУчету Тогда
			
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				Если ЗначениеЗаполнено(Выборка.ДокументСписания) Тогда
					ТекстСообщения = НСтр("ru='Расходы на НИОКР ""%1"" были списаны в организации %2. Повторное принятие к учету в ту же организацию не поддерживается.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Объект.Организация);
				ИначеЕсли ЭтоВводОстатков Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru='По расходам на НИОКР ""%1"" уже введены остатки.'"), Выборка.Представление);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru='Расходы на НИОКР ""%1"" уже приняты к учету.'"), Выборка.Представление);
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Выборка.ДокументСписания) Тогда
					ТекстСообщения = НСтр("ru='Нематериальный актив ""%1"" был списан в организации %2. Повторное принятие к учету в ту же организацию не поддерживается.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Объект.Организация);
				ИначеЕсли ЭтоВводОстатков Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru='По нематериальному активу ""%1"" уже введены остатки.'"), Выборка.Представление);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru='Нематериальный актив ""%1"" уже принят к учету.'"), Выборка.Представление);
				КонецЕсли;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
			
		КонецЕсли; 
		
		ВнеоборотныеАктивыЛокализация.ПроверитьВозможностьПринятияКУчетуНМА(Выборка, Объект, Путь, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЧтоОСПринятыКУчету(Объект, Отказ) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата) Тогда
		// Не нужно проверять, т.к. сработает проверка проведения документа раньше даты начала учета.
		Возврат;
	КонецЕсли;
	
	СостоянияПринят = Новый Массив;
	СостоянияПринят.Добавить(Перечисления.СостоянияОС.ПринятоКУчету);
	
	ТипДокумента = ТипЗнч(Объект);
	Если ТипДокумента = Тип("ДокументОбъект.ПеремещениеОС2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ПодготовкаКПередачеОС2_4") Тогда
		ПроверитьВВыбранномУчете = Ложь;
	Иначе
		ПроверитьВВыбранномУчете = ВедетсяРегламентированныйУчетВНА();
	КонецЕсли; 
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьЧтоОСПринятыКУчету(Объект, СостоянияПринят, ПроверитьВВыбранномУчете);
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|	ОбъектыЭксплуатации.Представление КАК Представление,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету) КАК СостояниеБУ,
		|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И Регистратор <> &Ссылка
		|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
		|		ПО (ПорядокУчетаОСУУ.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В(&СписокОС)
		|	И НЕ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В (&СостоянияПринят)";
		
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("СостоянияПринят", СостоянияПринят);
	Запрос.УстановитьПараметр("ПроверитьВВыбранномУчете", ПроверитьВВыбранномУчете);
	
	ОсновноеСредствоВШапке = (ТипЗнч(Объект) = Тип("ДокументОбъект.РазукомплектацияОС"));
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4")
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОС
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаЗаБалансом) Тогда
		ИмяТЧ = "АрендованныеОС";
	Иначе
		ИмяТЧ = "ОС";
	КонецЕсли;
	
	Если ОсновноеСредствоВШапке Тогда
		Запрос.УстановитьПараметр("СписокОС", Объект.ОсновноеСредство);
	Иначе
		Запрос.УстановитьПараметр("СписокОС", Объект[ИмяТЧ].ВыгрузитьКолонку("ОсновноеСредство"));
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДоступенВыборОтраженияВУчетах = ВедетсяРегламентированныйУчетВНА();
	
	Пока Выборка.Следующий() Цикл
		
		Если ДоступенВыборОтраженияВУчетах Тогда
			
			Если СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено
				И СостоянияПринят.Найти(Выборка.СостояниеУУ) <> Неопределено Тогда
				
				ТекстСообщения = НСтр("ru='Основное средство ""%1"" не принято к учету на %2 в регламентированном учете.'");
				
			ИначеЕсли СостоянияПринят.Найти(Выборка.СостояниеУУ) = Неопределено
				И СостоянияПринят.Найти(Выборка.СостояниеБУ) <> Неопределено Тогда
				
				ТекстСообщения = НСтр("ru='Основное средство ""%1"" не принято к учету на %2 в управленческом учете.'");
				
			Иначе
				ТекстСообщения = НСтр("ru='Основное средство ""%1"" не принято к учету на %2.'");
			КонецЕсли; 
			
		Иначе
			ТекстСообщения = НСтр("ru='Основное средство ""%1"" не принято к учету на %2.'");
		КонецЕсли; 
		
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			
		Если ОсновноеСредствоВШапке Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "ОсновноеСредство",, Отказ);
		Иначе
			ДанныеСтроки = Объект[ИмяТЧ].Найти(Выборка.Ссылка, "ОсновноеСредство");
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЧтоНМАПринятыКУчету(Объект, Отказ) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата) Тогда
		// Не нужно проверять, т.к. сработает проверка проведения документа раньше даты начала учета.
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьЧтоНМАПринятыКУчету();
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НематериальныеАктивы.Ссылка КАК Ссылка,
		|	НематериальныеАктивы.Представление КАК Представление,
		|	НематериальныеАктивы.ВидОбъектаУчета КАК ВидОбъектаУчета,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету) КАК СостояниеБУ,
		|	ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) КАК СостояниеУУ,
		|	МестоУчетаНМА.Организация КАК Организация,
		|	МестоУчетаНМА.Организация.Представление КАК ОрганизацияПредставление,
		|	МестоУчетаНМА.Подразделение КАК Подразделение,
		|	МестоУчетаНМА.Подразделение.Представление КАК ПодразделениеПредставление
		|ИЗ
		|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И Регистратор <> &Ссылка
		|					И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМАУУ
		|		ПО (ПорядокУчетаНМАУУ.НематериальныйАктив = НематериальныеАктивы.Ссылка)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(
		|				&Период,
		|				Регистратор <> &Ссылка
		|					И НематериальныйАктив В (&СписокНМА)) КАК МестоУчетаНМА
		|		ПО (МестоУчетаНМА.НематериальныйАктив = НематериальныеАктивы.Ссылка)
		|ГДЕ
		|	НематериальныеАктивы.Ссылка В(&СписокНМА)
		|	И (
		|		НЕ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) В (&СостоянияПринят)
		|
		// Проверка места учета НМА
		|		ИЛИ (
		|				(НЕ &ОтражатьВУпрУчете ИЛИ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, НЕОПРЕДЕЛЕНО) В (&СостоянияПринят))
		|				И (ЕСТЬNULL(МестоУчетаНМА.Организация, НЕОПРЕДЕЛЕНО) <> &Организация
		|						И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(МестоУчетаНМА.Подразделение, НЕОПРЕДЕЛЕНО) <> &Подразделение
		|						И &Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			)
		|		)";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНМА", Объект.НМА.ВыгрузитьКолонку("НематериальныйАктив"));
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ИзменениеПараметровНМА2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект.Местонахождение);
	Иначе
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	СостоянияПринят = Новый Массив;
	СостоянияПринят.Добавить(Перечисления.ВидыСостоянийНМА.ПринятКУчету);
	Запрос.УстановитьПараметр("СостоянияПринят", СостоянияПринят);
	
	ТипДокумента = ТипЗнч(Объект);
	Если ТипДокумента = Тип("ДокументОбъект.ПеремещениеНМА2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ПодготовкаКПередачеНМА2_4") Тогда
		ПроверитьВВыбранномУчете = Ложь;
	Иначе
		ПроверитьВВыбранномУчете = ВедетсяРегламентированныйУчетВНА();
	КонецЕсли; 
	Запрос.УстановитьПараметр("ПроверитьВВыбранномУчете", ПроверитьВВыбранномУчете);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДанныеСтроки = Объект.НМА.Найти(Выборка.Ссылка, "НематериальныйАктив");
		
		ТекстСообщения = Неопределено;
		
		Если СостоянияПринят.Найти(Выборка.СостояниеУУ) = Неопределено
			И СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено Тогда
			
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				ТекстСообщения = НСтр("ru='Расходы на НИОКР ""%1"" не приняты к учету на %2.'");
			Иначе
				ТекстСообщения = НСтр("ru='Нематериальный актив ""%1"" не принят к учету на %2.'");
			КонецЕсли; 
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			
		ИначеЕсли Объект.ОтражатьВРеглУчете
			И ПроверитьВВыбранномУчете
			И СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено Тогда
			
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				ТекстСообщения = НСтр("ru='Расходы на НИОКР ""%1"" не приняты к учету на %2 в регламентированном учете.'");
			Иначе
				ТекстСообщения = НСтр("ru='Нематериальный актив ""%1"" не принят к учету на %2 в регламентированном учете.'");
			КонецЕсли; 
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			
		ИначеЕсли Объект.ОтражатьВУпрУчете
			И ПроверитьВВыбранномУчете
			И СостоянияПринят.Найти(Выборка.СостояниеУУ) = Неопределено Тогда
			
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				ТекстСообщения = НСтр("ru='Расходы на НИОКР ""%1"" не приняты к учету на %2 в управленческом учете.'");
			Иначе
				ТекстСообщения = НСтр("ru='Нематериальный актив ""%1"" не принят к учету на %2 в управленческом учете.'");
			КонецЕсли; 
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			
		Иначе
			
			// НМА принят к учету, проверим местонахождение.
			
			Если Выборка.Организация <> Объект.Организация
				И ЗначениеЗаполнено(Объект.Организация) Тогда
				
				Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
					ТекстСообщения = НСтр("ru='Расходы на НИОКР ""%1"" приняты к учету в другой организации %2.'");
				Иначе
					ТекстСообщения = НСтр("ru='Нематериальный актив ""%1"" принят к учету в другой организации %2.'");
				КонецЕсли; 
				
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.ОрганизацияПредставление);
				
			КонецЕсли; 
			
			Если Выборка.Подразделение <> Объект.Подразделение
				И ЗначениеЗаполнено(Объект.Подразделение) Тогда
				
				Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
					ТекстСообщения = НСтр("ru='Расходы на НИОКР ""%1"" приняты к учету в другое подразделение %2.'");
				Иначе
					ТекстСообщения = НСтр("ru='Нематериальный актив ""%1"" принят к учету в другое подразделение %2.'");
				КонецЕсли; 
				
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.ПодразделениеПредставление);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если ТекстСообщения <> Неопределено Тогда
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НМА", ДанныеСтроки.НомерСтроки, "НематериальныйАктив");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция СообщитьЕслиОСНеПринятоКУчету(ОсновноеСредство, Дата) Экспорт

	ПервоначальныеСведения = Справочники.ОбъектыЭксплуатации.ПервоначальныеСведения(ОсновноеСредство, Дата);
	Если ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.НеПринятоКУчету
		И ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.НеПринятоКУчету Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство ""%1"" не принято к учету.'"), Строка(ОсновноеСредство));
		ВызватьИсключение ТекстСообщения;
		
	ИначеЕсли ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.СнятоСУчета
		ИЛИ ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.СнятоСУчета Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство ""%1"" снято с учета.'"), Строка(ОсновноеСредство));
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли; 

	Возврат ПервоначальныеСведения;
	
КонецФункции

Функция СообщитьЕслиНМАНеПринятКУчету(НематериальныйАктив, Дата) Экспорт

	ПервоначальныеСведения = Справочники.НематериальныеАктивы.ПервоначальныеСведения(НематериальныйАктив, Дата);
	Если ПервоначальныеСведения.СостояниеБУ = Перечисления.ВидыСостоянийНМА.НеПринятКУчету
		И ПервоначальныеСведения.СостояниеУУ = Перечисления.ВидыСостоянийНМА.НеПринятКУчету Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету.'"), Строка(НематериальныйАктив));
		ВызватьИсключение ТекстСообщения;
		
	ИначеЕсли ПервоначальныеСведения.СостояниеБУ = Перечисления.ВидыСостоянийНМА.Списан
		ИЛИ ПервоначальныеСведения.СостояниеУУ = Перечисления.ВидыСостоянийНМА.Списан Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Нематериальный актив ""%1"" снят с учета.'"), Строка(НематериальныйАктив));
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли; 

	Возврат ПервоначальныеСведения;
	
КонецФункции
 
#КонецОбласти

#Область РаботаСЗависимымиРеквизитами

Процедура ОтключитьПроверкуЗаполненияРеквизитовОбъекта(ПараметрыРеквизитовОбъекта, МассивНепроверяемыхРеквизитов) Экспорт

	Если ПараметрыРеквизитовОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		Если ЗначениеЗаполнено(ПараметрыРеквизита.ИмяРеквизита)
			И (ПараметрыРеквизита.Свойство = "Видимость"
				ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр"
				ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного"
				ИЛИ ПараметрыРеквизита.Свойство = "ОтметкаНезаполненного"
				ИЛИ ПараметрыРеквизита.Свойство = "АвтоОтметкаНезаполненного") Тогда
			
			Если (ПараметрыРеквизита.Свойство = "Видимость"
						ИЛИ ПараметрыРеквизита.Свойство = "ОтметкаНезаполненного"
						ИЛИ ПараметрыРеквизита.Свойство = "АвтоОтметкаНезаполненного")
					И ПараметрыРеквизита.Значение = Ложь 
				ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного"
					И ПараметрыРеквизита.Значение = Истина
				ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр"
					И ПараметрыРеквизита.Значение = Истина Тогда
					
				МассивНепроверяемыхРеквизитов.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетАмортизации

Процедура ДополнитьПараметрамиУчетаВнеоборотныхАктивов(ПараметрыРасчета) Экспорт

	ПараметрыРасчета.Вставить("ПорядокУчетаВНАВУпрУчете", Константы.ПорядокУчетаВНАВУпрУчете.Получить());
	
	ВнеоборотныеАктивыЛокализация.ДополнитьПараметрамиУчетаВнеоборотныхАктивов(ПараметрыРасчета);
	
КонецПроцедуры

Функция ТекстПоляФактическийСрокИспользования(ПолеНачалаПериода) Экспорт

	ТекстПоля = 
	"((ГОД(&НачалоМесяца) - ГОД(НАЧАЛОПЕРИОДА(&ПолеНачалаПериода, МЕСЯЦ))) * 12 
		|				+ МЕСЯЦ(&НачалоМесяца) 
		|				- МЕСЯЦ(НАЧАЛОПЕРИОДА(&ПолеНачалаПериода, МЕСЯЦ)))";
	
	Возврат СтрЗаменить(ТекстПоля, "&ПолеНачалаПериода", ПолеНачалаПериода);
	
КонецФункции

Функция ТекстРаспределенияСуммы(ИмяПоля) Экспорт

	ТекстЗапроса =	
	"	(ВЫРАЗИТЬ(&Сумма
	|				* (СпособыОтраженияРасходов.БазаНакопленная + СпособыОтраженияРасходов.База) 
	|					/ СпособыОтраженияРасходов.СуммаБазы КАК ЧИСЛО(31,2)))
	|			- (ВЫРАЗИТЬ(&Сумма * СпособыОтраженияРасходов.БазаНакопленная / СпособыОтраженияРасходов.СуммаБазы КАК ЧИСЛО(31,2)))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Сумма", ИмяПоля);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов_Амортизация(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
 
Процедура УничтожитьВременныеТаблицыПослеЗаписиРасчетаАмортизации(МенеджерВременныхТаблиц) Экспорт
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, "НомераПакетовСФилиалами,ВТ_НачисленнаяАмортизация");
	
КонецПроцедуры

Процедура ТекстЗапросаПараметрыРасчетаАмортизации(ИмяРегистра, ИмяТаблицы, ДобавитьТекстДляДоначисления, ОбъектУчета, СписокЗапросов, ВычислениеПолей = Неопределено) Экспорт

	Если ВычислениеПолей = Неопределено Тогда
		ВычислениеПолей = Новый Структура;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&НачалоМесяца КАК НачалоМесяца,
	|	&ТекстПолей
	|ПОМЕСТИТЬ ВТ_ИмяРегистра
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&КонецПредыдущегоМесяца,
	|			(ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					СписокОбъектовУчета.ОсновноеСредство
	|				ИЗ
	|					ВТ_СписокОбъектовУчета КАК СписокОбъектовУчета)) КАК ТаблицаРегистра";

	Если ДобавитьТекстДляДоначисления Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&НачалоМесяца КАК НачалоМесяца,
		|&ТекстПолей
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОС КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (&ТипПринятиеКУчету)
		|	И (ТаблицаРегистра.ОсновноеСредство) В
		|			(ВЫБРАТЬ
		|				СписокОбъектовУчета.ОсновноеСредство
		|			ИЗ
		|				ВТ_СписокОбъектовУчета_УУ КАК СписокОбъектовУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&НачалоПредыдущегоМесяца КАК НачалоМесяца,
		|	&ТекстПолей
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОС КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.Период МЕЖДУ &НачалоПредыдущегоМесяца И &КонецПредыдущегоМесяца
		|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (&ТипПринятиеКУчету)
		|	И (ТаблицаРегистра.ОсновноеСредство) В
		|			(ВЫБРАТЬ
		|				СписокОбъектовУчета.ОсновноеСредство
		|			ИЗ
		|				ВТ_СписокОбъектовУчета_Доначисление_УУ КАК СписокОбъектовУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&НачалоПредыдущегоМесяца КАК НачалоМесяца,
		|	&ТекстПолей
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
		|			&КонецПозапрошлогоМесяца,
		|			(ОсновноеСредство) В
		|				(ВЫБРАТЬ
		|					СписокОбъектовУчета.ОсновноеСредство
		|				ИЗ
		|					ВТ_СписокОбъектовУчета_Доначисление_УУ КАК СписокОбъектовУчета)) КАК ТаблицаРегистра";
		
		Если ОбъектУчета = "ОсновноеСредство" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&НачалоМесяца КАК НачалоМесяца,
			|&ТекстПолей
			|ИЗ
			|	РегистрСведений.ПорядокУчетаОС КАК ТаблицаРегистра
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК РазукомплектацияОС
			|		ПО РазукомплектацияОС.Ссылка = ТаблицаРегистра.Регистратор
			|ГДЕ
			|	ТаблицаРегистра.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) = ТИП(Документ.РазукомплектацияОС)
			|	И ТаблицаРегистра.ОсновноеСредство <> РазукомплектацияОС.ОсновноеСредство
			|	И (ТаблицаРегистра.ОсновноеСредство) В
			|			(ВЫБРАТЬ
			|				СписокОбъектовУчета.ОсновноеСредство
			|			ИЗ
			|				ВТ_СписокОбъектовУчета_УУ КАК СписокОбъектовУчета)";
		КонецЕсли;
		
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	ЕстьОрганизация = Ложь;
	
	СписокПолей = Новый Массив;
	СписокПолей.Добавить("	ТаблицаРегистра.Период КАК Период");
	Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		СписокПолей.Добавить("	ТаблицаРегистра.Регистратор КАК Регистратор");
	КонецЕсли;
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		СписокПолей.Добавить("	ТаблицаРегистра." + МетаданныеИзмерения.Имя + " КАК " + МетаданныеИзмерения.Имя);
		Если МетаданныеИзмерения.Имя = "Организация" Тогда
			ЕстьОрганизация = Истина;
		КонецЕсли; 
	КонецЦикла; 
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Ресурсы Цикл
		Если ВычислениеПолей.Свойство(МетаданныеИзмерения.Имя) Тогда
			ПутьКПолю = ВычислениеПолей[МетаданныеИзмерения.Имя];
		Иначе
			ПутьКПолю = "	ТаблицаРегистра." + МетаданныеИзмерения.Имя
		КонецЕсли; 
		СписокПолей.Добавить(ПутьКПолю + " КАК " + МетаданныеИзмерения.Имя);
	КонецЦикла; 
	
	РазделительПолей = ",
	|	";
	ТекстПолей = СтрСоединить(СписокПолей, РазделительПолей);
	
	Если ЕстьОрганизация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(ОсновноеСредство)", "(ОсновноеСредство, Организация)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(ТаблицаРегистра.ОсновноеСредство)", "(ТаблицаРегистра.ОсновноеСредство, ТаблицаРегистра.Организация)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокОбъектовУчета.ОсновноеСредство", "СписокОбъектовУчета.ОсновноеСредство, СписокОбъектовУчета.Организация");
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОсновноеСредство", ОбъектУчета);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокУчетаОС", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ИмяРегистра", "ВТ_" + ?(ИмяТаблицы <> "", ИмяТаблицы, ИмяРегистра));
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	" + ОбъектУчета + ?(ЕстьОрганизация, ",Организация", "");
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

// Формирует текст запроса, отражающий начисленную амортизацию в регистре ПрочиеРасходы.
// Используется в документах, которые могут начислять амортизацию.
// 
// Возвращаемое значение:
//  Текст - Текст запроса.
//
Функция ТекстЗапросаТаблицаОтражениеНачисленнойАмортизацииВПрочихРасходах() Экспорт

	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаТаблицаОтражениеНачисленнойАмортизацииВПрочихРасходах();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаРасходы.ПериодРасчета                      КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
		|	ТаблицаРасходы.Организация                        КАК Организация,
		|	ТаблицаРасходы.КорПодразделение                   КАК Подразделение,
		|	ТаблицаРасходы.СтатьяРасходов                     КАК СтатьяРасходов,
		|	ТаблицаРасходы.АналитикаРасходов                  КАК АналитикаРасходов,
		|	ТаблицаРасходы.КорНаправлениеДеятельности         КАК НаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                      КАК ВидДеятельностиНДС,
		|	СУММА(ТаблицаРасходы.СуммаУУ)                     КАК СуммаСНДС,
		|	СУММА(ТаблицаРасходы.СуммаУУ)                     КАК СуммаБезНДС,
		|	СУММА(ТаблицаРасходы.СуммаУУ)                     КАК СуммаБезНДСУпр,
		|	0                                                 КАК СуммаСНДСРегл,
		|	0                                                 КАК СуммаБезНДСРегл,
		|	0                                                 КАК ПостояннаяРазница,
		|	0                                                 КАК ВременнаяРазница,
		|	ТаблицаРасходы.ХозяйственнаяОперация              КАК ХозяйственнаяОперация,
		|	НЕОПРЕДЕЛЕНО                                      КАК АналитикаУчетаНоменклатуры
		|ИЗ
		|	ВТ_НачисленнаяАмортизация КАК ТаблицаРасходы
		|ГДЕ
		|	НЕ ТаблицаРасходы.НачислятьИзнос
		|	И ТаблицаРасходы.Организация = &Организация
		|	И ТаблицаРасходы.НомерПакета = &НомерПакета
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРасходы.Организация,
		|	ТаблицаРасходы.ПериодРасчета,
		|	ТаблицаРасходы.КорПодразделение,
		|	ТаблицаРасходы.КорНаправлениеДеятельности,
		|	ТаблицаРасходы.СтатьяРасходов,
		|	ТаблицаРасходы.АналитикаРасходов,
		|	ТаблицаРасходы.ХозяйственнаяОперация";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция МинимальнаяОстаточнаяСтоимость() Экспорт

	Возврат 5;

КонецФункции
 
#КонецОбласти

#Область ПереоценкаОС_НМА

// Добавляет тексты запросов для проведения при переоценке ОС и НМА.
//
// Параметры:
//  Запрос			 - Запрос - Запрос который используется при проведении.
//  ТекстыЗапроса	 - СписокЗначений - Список запросов.
//  ВидОбъектовУчета - Строка - "ОС" или "НМА".
//
Процедура ТекстыЗапросаПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета) Экспорт

	ТекстЗапросаВтТаблицаПереоценки(ТекстыЗапроса, ВидОбъектовУчета);
	ТекстЗапросаТаблицаСтоимостьПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета);
	ТекстЗапросаТаблицаАмортизацияПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета);
	ТекстЗапросаТаблицаПрочиеДоходыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета);
	ТекстЗапросаТаблицаПрочиеРасходыПриПереоценке(ТекстыЗапроса);
	ТекстЗапросаТаблицаПартииПрочихРасходовПриПереоценке(ТекстыЗапроса);
	ТекстЗапросаТаблицаТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Объединяет в отчете подчиненные ячейки.
// Используется в отчетах, которые вертикально выводят показатели БУ, НУ, ПУ, ВП, УУ.
//
// Параметры:
//  ТабДок					 - ТабличныйДокумент - Табличный документ отчета.
//  СписокГруппЯчеек		 - Массив			 - Список групп ячеек.
//  СписокПодчиненныхЯчеек	 - Массив			 - Список ячеек, которые будут объединены с группой ячеек.
//
Процедура ОбъединитьПодчиненныеЯчейки(ТабДок, СписокГруппЯчеек, СписокПодчиненныхЯчеек) Экспорт
	
	ШапкаНайдена = Ложь;
		
	Для индСтр = 1 По ТабДок.ВысотаТаблицы Цикл
		
		Для КолонкаНачалаШапки = 1 По ТабДок.ШиринаТаблицы Цикл
			
			ОбластьЯчейки = ТабДок.Область(индСтр, КолонкаНачалаШапки);
			ШапкаНайдена = СписокГруппЯчеек.Найти(ОбластьЯчейки.Текст) <> Неопределено;
			Если ШапкаНайдена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		Если ШапкаНайдена Тогда
			
			Для индКол = КолонкаНачалаШапки По ТабДок.ШиринаТаблицы Цикл
				
				Смещение = 0;
				
				Для Сч = 0 По 5 Цикл
					
					ОбластьЯчейки = ТабДок.Область(индСтр + Сч, индКол);
					
					Если СписокГруппЯчеек.Найти(ОбластьЯчейки.Текст) <> Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					Смещение = Смещение + 1;
					
				КонецЦикла;
				
				ОбластьЯчейки = ТабДок.Область(
									индСтр + Смещение, 
									индКол, 
									индСтр + Смещение, 
									индКол);
									
				ТекстЗаголовка = ОбластьЯчейки.Текст;
				
				ВысотаШапки = 0;
				Для Индекс = 1 По 10 Цикл
					
					ОбластьЯчейки = ТабДок.Область(
											индСтр+Индекс+Смещение, 
											индКол, 
											индСтр+Индекс+Смещение, 
											индКол);
											
					СледующаяЯчейка = ОбластьЯчейки.Текст;
					
					Если СписокПодчиненныхЯчеек.Найти(СледующаяЯчейка) = Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					ВысотаШапки = ВысотаШапки + 1;
					
				КонецЦикла;
				
				ОбъединяемаяОбласть = ТабДок.Область(индСтр+Смещение, индКол, индСтр + ВысотаШапки + Смещение, индКол);
				ОбъединяемаяОбласть.Объединить();
				ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
				ОбъединяемаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
			КонецЦикла; 
				
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что отчет формируется начиная с даты начала учета версии 2.4.
//
// Параметры:
//  НачалоПериода	 - Дата	 - Начало периода отчета.
//  ОкончаниеПериода - Дата	 - Окончание периода отчета.
//  ШаблонСообщения	 - Текст - Шаблон сообщения об ошибке.
//  Отказ			 - Булево	 - Признак отказа.
// 
// Возвращаемое значение:
//  Булево - Ложь, если отчет формируется до даты начала учета версии 2.4.
//
Функция ПроверитьПериодОтчетаВерсии24(НачалоПериода, ОкончаниеПериода, ШаблонСообщения, Отказ) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатаНачалаУчета = Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить();
	
	Если НачалоПериода < ДатаНачалаУчета
		ИЛИ ЗначениеЗаполнено(ОкончаниеПериода)
			И ОкончаниеПериода < ДатаНачалаУчета Тогда
			
		Отказ = Истина;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(ДатаНачалаУчета, "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

// Добавляет период отчета в значения отбора.
//
// Параметры:
//  НастройкиКомпоновкиДанных	 - НастройкиКомпоновкиДанных - Настройки СКД.
//  ЗначенияОтбораДанных		 - Структура				 - Значения отбора.
//
Процедура ПериодОтчета(НастройкиКомпоновкиДанных, ЗначенияОтбораДанных) Экспорт

	ПараметрОтчета = ЗначениеПараметраСКД(НастройкиКомпоновкиДанных, "ПериодОтчета");
	
	Если ПараметрОтчета <> Неопределено Тогда
		ЗначенияОтбораДанных.Вставить("НачалоПериода", ПараметрОтчета.ДатаНачала);
		ЗначенияОтбораДанных.Вставить("ОкончаниеПериода", ПараметрОтчета.ДатаОкончания);
	Иначе
		ЗначенияОтбораДанных.Вставить("НачалоПериода", '000101010000');
		ЗначенияОтбораДанных.Вставить("ОкончаниеПериода", '000101010000');
	КонецЕсли; 
	
КонецПроцедуры

// Получает значение параметра СКД.
//
// Параметры:
//  НастройкиКомпоновкиДанных	 - НастройкиКомпоновкиДанных - Настройки СКД.
//  Параметр					 - Строка, ПараметрКомпоновкиДанных	 - поле или имя поля, для которого нужно вернуть параметр.
//  ПустоеЗначение				 - Произвольный						 - Значение, которое нужно вернуть, если параметр не используется.
// 
// Возвращаемое значение:
//  Произвольный - Значение параметра СКД.
//
Функция ЗначениеПараметраСКД(НастройкиКомпоновкиДанных, Параметр, ПустоеЗначение = Неопределено) Экспорт

	ПараметрОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиКомпоновкиДанных, Параметр);
	
	Если ПараметрОтчета.Использование Тогда
		Возврат ПараметрОтчета.Значение;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;

КонецФункции

// Возвращает значение отбора установленного в отчете
//
// Параметры:
//  ИмяПоля			 - Строка									 - Имя отбора.
//  ЭлементыОтбора	 - КоллекцияЭлементовОтбораКомпоновкиДанных	 - Отбор компоновки данных.
// 
// Возвращаемое значение:
//  Массив - Установленный отбор.
//
Функция ЗначениеОтбораОтчета(ИмяПоля, ЭлементыОтбора) Экспорт

	МассивЗначенийОтбора = Новый Массив;
	
	Если ЭлементыОтбора = Неопределено Тогда
		Возврат МассивЗначенийОтбора;
	КонецЕсли;
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ЗначениеОтбора = Неопределено;
	Для каждого ЭлементКоллекции Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементКоллекции.ЛевоеЗначение = Поле 
			И ЭлементКоллекции.Использование Тогда
			
			ЗначениеОтбора = ЭлементКоллекции.ПравоеЗначение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЗначениеОтбора <> Неопределено И ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
		МассивЗначенийОтбора = ЗначениеОтбора.ВыгрузитьЗначения();
	ИначеЕсли ЗначениеОтбора <> Неопределено Тогда
		МассивЗначенийОтбора.Добавить(ЗначениеОтбора);
	КонецЕсли;
	
	Возврат МассивЗначенийОтбора;

КонецФункции
 
#КонецОбласти

#Область ТекстыЗапросов

Процедура ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос, ИмяТаблицы = Неопределено) Экспорт

	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = "ВтРасчетСтоимости";
	КонецЕсли; 
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	NULL   КАК Ссылка,
	|	NULL   КАК ОбъектУчета,
	|	NULL   КАК КорСтатьяРасходов,
	|	NULL   КАК КорАналитикаРасходов,
	|	NULL   КАК КорПодразделение,
	|	NULL   КАК КорНаправлениеДеятельности,
	|	0      КАК Стоимость,
	|	0      КАК Сумма,
	|	0      КАК СтоимостьРегл,
	|	0      КАК СтоимостьНУ,
	|	0      КАК СтоимостьПР,
	|	0      КАК СтоимостьВР,
	|	0      КАК СтоимостьЦФ,
	|	0      КАК СтоимостьНУЦФ,
	|	0      КАК СтоимостьПРЦФ,
	|	0      КАК СтоимостьВРЦФ,
	|	0      КАК АмортизационнаяПремия,
	|	0      КАК РезервПереоценкиСтоимости,
	|	0      КАК РезервПереоценкиСтоимостиРегл,
	|	0      КАК ЗалоговаяСтоимость,
	|	0      КАК ПредварительнаяСтоимость,
	|	0      КАК ПредварительнаяСтоимостьРегл,
	|	0      КАК КорПостояннаяРазница,
	|	0      КАК КорВременнаяРазница,
	|	0      КАК КорректировкаСтоимостиНУ
	|ПОМЕСТИТЬ " + ИмяТаблицы + " 
	|ГДЕ
	|	ЛОЖЬ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапросаПустаяТаблицаСтоимостьВНА(ТекстыЗапроса, Запрос, ИмяТаблицы = Неопределено) Экспорт

	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = "ВТ_СтоимостьВНА";
	КонецЕсли; 
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	NULL КАК Ссылка,
	|	NULL КАК Дата,
	|	NULL КАК Организация,
	|	NULL КАК ОбъектУчета,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьНУ,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьВР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьНУЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК СтоимостьВРЦФ,
	|	0 КАК АмортизационнаяПремия,
	|	0 КАК ЗалоговаяСтоимость,
	|	0 КАК ПредварительнаяСтоимость,
	|	0 КАК ПредварительнаяСтоимостьРегл,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|	0 КАК ДоляЦФБУ,
	|	0 КАК ДоляЦФНУ
	|ПОМЕСТИТЬ ВТ_СтоимостьВНА";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры
 
Процедура ТекстЗапросаПустаяВтРасчетРасходов(ТекстыЗапроса, Запрос) Экспорт

	ИмяТаблицы = "ВтРасчетРасходов";
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрочиеРасходы.СтатьяРасходов             КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов          КАК АналитикаРасходов,
	|	ПрочиеРасходы.Подразделение              КАК Подразделение,
	|	ПрочиеРасходы.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	0                                        КАК Сумма,
	|	0                                        КАК СуммаБезНДС,
	|	0                                        КАК СуммаУпр,
	|	0                                        КАК СуммаРегл,
	|	0                                        КАК ПостояннаяРазница,
	|	0                                        КАК ВременнаяРазница
	|ПОМЕСТИТЬ ВтРасчетРасходов 
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ЛОЖЬ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапросаПустыеТаблицыОтложенныхДвижений(ТекстыЗапроса, Запрос) Экспорт

	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_СтоимостьВНА") = Неопределено
		И НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТ_СтоимостьВНА", ТекстыЗапроса) Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	NULL   КАК Ссылка,
		|	NULL   КАК ОбъектУчета,
		|	0      КАК Стоимость,
		|	0      КАК СтоимостьРегл
		|ПОМЕСТИТЬ ВТ_СтоимостьВНА 
		|ГДЕ
		|	ЛОЖЬ";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТ_СтоимостьВНА");
		
	КонецЕсли;
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_АмортизацияВНА") = Неопределено
		И НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТ_АмортизацияВНА", ТекстыЗапроса) Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	NULL   КАК Ссылка,
		|	NULL   КАК ОбъектУчета,
		|	0      КАК Амортизация,
		|	0      КАК АмортизацияРегл
		|ПОМЕСТИТЬ ВТ_АмортизацияВНА 
		|ГДЕ
		|	ЛОЖЬ";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТ_АмортизацияВНА");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаОС(ТекстыЗапроса, ИмяДокумента, ИмяВременнойТаблицы = Неопределено) Экспорт

	ИмяТаблицы = ?(ИмяВременнойТаблицы <> Неопределено, ИмяВременнойТаблицы, "втТаблицаОС");
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаВтТаблицаПервоначальныеСведенияОС(ТекстыЗапроса, ИмяДокумента);
	ТекстЗапросаВтТаблицаПорядокУчетаОС(ТекстыЗапроса, ИмяДокумента);
	ТекстЗапросаВтТаблицаМестонахождениеОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство                  КАК ОсновноеСредство,
	|
	|	ПорядокУчета.ГруппаФинансовогоУчета         КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности        КАК НаправлениеДеятельности,
	|	ПорядокУчета.ПоказательНаработки            КАК ПоказательНаработки,
	|	ПорядокУчета.ОбъемНаработки                 КАК ОбъемНаработки,
	|
	|	МестонахождениеОС.Организация               КАК Организация,
	|	МестонахождениеОС.Арендатор                 КАК Арендатор,
	|	МестонахождениеОС.МОЛ                       КАК МОЛ,
	|	МестонахождениеОС.Местонахождение           КАК Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения      КАК АдресМестонахождения,
	|	МестонахождениеОС.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение,
	|	МестонахождениеОС.ПодразделениеАрендатора   КАК ПодразделениеАрендатора,
	|	МестонахождениеОС.МОЛАрендатора             КАК МОЛАрендатора,
	|
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВРеглУчете,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВУпрУчете,
	|	&ПоляЛокализации
	|	
	|ПОМЕСТИТЬ втТаблицаОС
	|ИЗ
	|	Документ.ПеремещениеОС2_4.ОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПервоначальныеСведенияОС КАК ПервоначальныеСведения
	|		ПО ТаблицаОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаОС КАК ПорядокУчета
	|		ПО ТаблицаОС.ОсновноеСредство = ПорядокУчета.ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахождениеОС КАК МестонахождениеОС
	|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеОС2_4", ИмяДокумента);
	
	ВнеоборотныеАктивыЛокализация.ДобавитьВТекстЗапросаВтТаблицаОСПоляЛокализации(ТекстЗапроса, ИмяДокумента);
	
	Если ИмяВременнойТаблицы <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ втТаблицаОС", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаПервоначальныеСведенияОС(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПервоначальныеСведенияОС";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.Организация КАК Организация,
	|	ПервоначальныеСведенияОС.ПорядокУчетаУУ КАК ПорядокУчетаУУ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ КАК ДатаВводаВЭксплуатациюУУ,
	|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ КАК ДокументВводаВЭксплуатациюУУ,
	|	ПервоначальныеСведенияОС.ДокументСнятияСУчета КАК ДокументСнятияСУчета,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьУУ КАК ПервоначальнаяСтоимостьУУ,
	|	&ПервоначальныеСведенияОС_РеквизитыЛокализация
	|ПОМЕСТИТЬ втПервоначальныеСведенияОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПервоначальныеСведенияОС.ОсновноеСредство";
	
	ВнеоборотныеАктивыЛокализация.ДобавитьВТекстЗапросаРесурсыРегистраПервоначальныеСведенияОС(ТекстЗапроса, "ПервоначальныеСведенияОС");
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаПервоначальныеСведенияНМА(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПервоначальныеСведенияНМА";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ втПервоначальныеСведенияНМА
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						втСписокНМА КАК СписокНМА)) КАК ПервоначальныеСведенияНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПервоначальныеСведенияНМА.НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаПорядокУчетаОС(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПорядокУчетаОС";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчета.ОсновноеСредство        КАК ОсновноеСредство,
	|	ПорядокУчета.ГруппаФинансовогоУчета  КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПорядокУчета.ПоказательНаработки     КАК ПоказательНаработки,
	|	ПорядокУчета.ОбъемНаработки          КАК ОбъемНаработки
	|ПОМЕСТИТЬ втПорядокУчетаОС
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК ПорядокУчета
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПорядокУчетаОСУУ";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаОСУУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСУУ.Состояние КАК Состояние,
	|	ПорядокУчетаОСУУ.НачислятьАмортизациюУУ КАК НачислятьАмортизациюУУ,
	|	ПорядокУчетаОСУУ.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ПорядокУчетаОСУУ.СтатьяРасходов КАК СтатьяРасходов,
	|	ПорядокУчетаОСУУ.АналитикаРасходов КАК АналитикаРасходов,
	|	ПорядокУчетаОСУУ.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизацию,
	|	ПорядокУчетаОСУУ.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходов
	|ПОМЕСТИТЬ втПорядокУчетаОСУУ
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК ПорядокУчетаОСУУ
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаПараметрыАмортизацииОСУУ(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПараметрыАмортизацииОСУУ";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииОСУУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСУУ.СрокИспользования КАК СрокИспользования,
	|	ПараметрыАмортизацииОСУУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСУУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСУУ.СтоимостьДляВычисленияАмортизацииРегл КАК СтоимостьДляВычисленияАмортизацииРегл,
	|	ПараметрыАмортизацииОСУУ.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСУУ.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	|	ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимостьРегл,
	|	ПараметрыАмортизацииОСУУ.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|	ПараметрыАмортизацииОСУУ.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации
	|ПОМЕСТИТЬ втПараметрыАмортизацииОСУУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСУУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПараметрыАмортизацииОСУУ.ОсновноеСредство";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаМестонахождениеОС(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втМестонахождениеОС";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОС.Организация КАК Организация,
	|	МестонахождениеОС.МОЛ КАК МОЛ,
	|	МестонахождениеОС.Местонахождение КАК Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
	|	МестонахождениеОС.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение,
	|	МестонахождениеОС.Арендатор КАК Арендатор,
	|	МестонахождениеОС.ПодразделениеАрендатора КАК ПодразделениеАрендатора,
	|	МестонахождениеОС.МОЛАрендатора КАК МОЛАрендатора
	|ПОМЕСТИТЬ втМестонахождениеОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК МестонахождениеОС";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаНМА(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втТаблицаНМА";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив              КАК НематериальныйАктив,
	|
	|	ПорядокУчета.ГруппаФинансовогоУчета         КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности        КАК НаправлениеДеятельности,
	|	ПорядокУчета.ОбъемНаработки                  КАК ОбъемНаработки,
	|
	|	МестоУчета.Организация                      КАК Организация,
	|	МестоУчета.Подразделение                    КАК Подразделение,
	|
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВРеглУчете,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВУпрУчете
	|	
	|ПОМЕСТИТЬ втТаблицаНМА
	|ИЗ
	|	Документ.ПеремещениеНМА2_4.НМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
	|				&Период,
	|				Регистратор <> &Ссылка 
	|				И Организация = &Организация
	|				И НематериальныйАктив В (ВЫБРАТЬ СписокНМА.НематериальныйАктив ИЗ втСписокНМА КАК СписокНМА)
	|		) КАК ПервоначальныеСведения
	|		ПО ТаблицаНМА.НематериальныйАктив = ПервоначальныеСведения.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМА.СрезПоследних(
	|				&Период,
	|				Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В (ВЫБРАТЬ СписокНМА.НематериальныйАктив ИЗ втСписокНМА КАК СписокНМА)
	|		) КАК ПорядокУчета
	|		ПО ТаблицаНМА.НематериальныйАктив = ПорядокУчета.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(
	|				&Период,
	|				Регистратор <> &Ссылка 
	|				И Организация = &Организация
	|				И НематериальныйАктив В (ВЫБРАТЬ СписокНМА.НематериальныйАктив ИЗ втСписокНМА КАК СписокНМА)
	|		) КАК МестоУчета
	|		ПО ТаблицаНМА.НематериальныйАктив = МестоУчета.НематериальныйАктив
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеНМА2_4", ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента) Экспорт
	
	ИмяТаблицы = "втСписокОС";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяДокумента = "Документ.РазукомплектацияОС" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втСписокОС
		|ИЗ
		|	Документ.РазукомплектацияОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втСписокОС
		|ИЗ
		|	Документ.ПеремещениеОС2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеОС2_4", ИмяДокумента);
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаПорядокУчетаНМА(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПорядокУчетаНМА";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ПорядокУчетаНМА.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ПорядокУчетаНМА.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПорядокУчетаНМА.ОбъемНаработки КАК ОбъемНаработки
	|ПОМЕСТИТЬ втПорядокУчетаНМА
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						втСписокНМА КАК СписокНМА)) КАК ПорядокУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПорядокУчетаНМА.НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаПорядокУчетаНМАУУ(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПорядокУчетаНМАУУ";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаНМАУУ.НематериальныйАктив КАК НематериальныйАктив,
	|	ПорядокУчетаНМАУУ.Состояние КАК Состояние,
	|	ПорядокУчетаНМАУУ.НачислятьАмортизациюУУ КАК НачислятьАмортизациюУУ,
	|	ПорядокУчетаНМАУУ.СтатьяРасходов КАК СтатьяРасходов,
	|	ПорядокУчетаНМАУУ.АналитикаРасходов КАК АналитикаРасходов,
	|	ПорядокУчетаНМАУУ.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ПорядокУчетаНМАУУ.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизацию,
	|	ПорядокУчетаНМАУУ.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходов
	|ПОМЕСТИТЬ втПорядокУчетаНМАУУ
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						втСписокНМА КАК СписокНМА)) КАК ПорядокУчетаНМАУУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаПараметрыАмортизацииНМАУУ(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПараметрыАмортизацииНМАУУ";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииНМАУУ.НематериальныйАктив КАК НематериальныйАктив,
	|	ПараметрыАмортизацииНМАУУ.СрокИспользования КАК СрокИспользования,
	|	ПараметрыАмортизацииНМАУУ.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииНМАУУ.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	|	ПараметрыАмортизацииНМАУУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизацииНМАУУ.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимостьРегл
	|ПОМЕСТИТЬ втПараметрыАмортизацииНМАУУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАУУ.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						втСписокНМА КАК СписокНМА)) КАК ПараметрыАмортизацииНМАУУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПараметрыАмортизацииНМАУУ.НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаВтТаблицаМестоУчетаНМА(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втМестоУчетаНМА";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестоУчетаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	МестоУчетаНМА.Организация КАК Организация,
	|	МестоУчетаНМА.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ втМестоУчетаНМА
	|ИЗ
	|	РегистрСведений.МестоУчетаНМА.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						втСписокНМА КАК СписокНМА)) КАК МестоУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МестоУчетаНМА.НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента) Экспорт
	
	ИмяТаблицы = "втСписокНМА";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ втСписокНМА
	|ИЗ
	|	Документ.ПеремещениеНМА2_4.НМА КАК ТаблицаНМА
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	Организация";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеНМА2_4", ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаВтНаработкиОбъектовЭксплуатации(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втНаработкиОбъектовЭксплуатации";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаВтТаблицаОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НаработкиОбъектовЭксплуатации.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|	НаработкиОбъектовЭксплуатации.Значение КАК Значение
	|ПОМЕСТИТЬ втНаработкиОбъектовЭксплуатации
	|ИЗ
	|	РегистрСведений.НаработкиОбъектовЭксплуатации.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Период, МЕСЯЦ),
	|			(ОбъектЭксплуатации, ПоказательНаработки) В
	|				(ВЫБРАТЬ
	|					втТаблицаОС.ОсновноеСредство,
	|					втТаблицаОС.ПоказательНаработки
	|				ИЗ
	|					втТаблицаОС КАК втТаблицаОС)) КАК НаработкиОбъектовЭксплуатации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектЭксплуатации";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗарегистрироватьПроблемуВыполненияРасчета(ЭтапРасчета, Период, Организация, ОписаниеПроблемы, ГруппаПроблем = "", Объект = Неопределено, Отказ = Ложь) Экспорт

	Отказ = Истина;
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
		ЭтапРасчета,
		Организация,
		Период);
		
	Если НЕ ЗначениеЗаполнено(ГруппаПроблем) Тогда
		ГруппаПроблем = НСтр("ru='При выполнении операции были диагностированы ошибки'");
	КонецЕсли;
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
		ПараметрыРегистрации,
		ГруппаПроблем,
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка,
		ОписаниеПроблемы,
		Объект);
	
КонецПроцедуры

Процедура ЗарегистрироватьПредупреждениеВыполненияРасчета(ЭтапРасчета, Период, Организация, ОписаниеПредупреждения, ГруппаПредупреждений = "", Объект = Неопределено, Отказ = Ложь) Экспорт

	Отказ = Истина;
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
		ЭтапРасчета,
		Организация,
		Период);
		
	Если НЕ ЗначениеЗаполнено(ГруппаПредупреждений) Тогда
		ГруппаПредупреждений = НСтр("ru='При выполнении операции возникли предупреждения'");
	КонецЕсли;
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
		ПараметрыРегистрации,
		ГруппаПредупреждений,
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет,
		ОписаниеПредупреждения,
		Объект);
	
КонецПроцедуры

Процедура ДобавитьОписаниеОшибки(ОписаниеПроблемы, Объект, Организация, СписокОшибок) Экспорт

	Если СписокОшибок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("ОписаниеПроблемы", ОписаниеПроблемы);
	ОписаниеОшибки.Вставить("Организация", Организация);
	ОписаниеОшибки.Вставить("Объект", Объект);
	
	СписокОшибок.Добавить(ОписаниеОшибки);
	
КонецПроцедуры
 
// Определяет возможность ведения раздельного учета ВНА.
//
// Возвращаемое значение:
//  Булево - Истина, если доступен раздельный учет ВНА.
//
Функция ВедетсяРегламентированныйУчетВНА() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("РегламентированныйУчетВНА");
	
КонецФункции
 
Функция МаксимальныйОбъемПакетаОС() Экспорт

	Возврат 500;

КонецФункции

Функция МаксимальноеКоличествоЗаданийДляРасчетаАмортизации() Экспорт

	ЗначенияПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().УстановленныеЗначенияПараметровОперации(
  							Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС);
							
	Возврат ЗначенияПараметров.МаксимальноеКоличествоЗаданийДляРасчетаАмортизации;

КонецФункции

Процедура ЗаполнитьИнформациюОДокументеВДругомУчете(Объект, Элементы) Экспорт

	ЗаголовокНадписи = ИнформацияОДокументеВДругомУчете(Объект);
	
	Если ЗаголовокНадписи.Количество() <> 0 Тогда
		Элементы.ИнформацияОДокументеВДругомУчете.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокНадписи);
		Элементы.ДекорацияИнформацияОДокументеВДругомУчете.Видимость = Истина;
		Элементы.ИнформацияОДокументеВДругомУчете.Видимость = Истина;
	Иначе
		Элементы.ДекорацияИнформацияОДокументеВДругомУчете.Видимость = Ложь;
		Элементы.ИнформацияОДокументеВДругомУчете.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

Функция ИнформацияОДокументеВДругомУчете(Объект, ПоказатьИнформациюЕслиНеСоздан = Истина) Экспорт

	ЗаголовокНадписи = Новый Массив;
	
	Если НЕ ВедетсяРегламентированныйУчетВНА()
		ИЛИ Объект.ОтражатьВУпрУчете 
			И Объект.ОтражатьВРеглУчете Тогда
		Возврат ЗаголовокНадписи;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ДокументВДругомУчете) Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									Объект.ДокументВДругомУчете, 
									"ОтражатьВРеглУчете,ОтражатьВУпрУчете,Проведен,ПометкаУдаления,Номер,Дата,Ссылка");
									
		Если НЕ РеквизитыДокумента.ПометкаУдаления Тогда
			ЗаголовокНадписи = ЗаголовокНадписиОДокументеВДругомУчете(РеквизитыДокумента);
		Иначе
			ЗаголовокНадписи = НайтиДокументВДругомУчетеИСформироватьЗаголовок(Объект, ПоказатьИнформациюЕслиНеСоздан);
		КонецЕсли; 
		
	Иначе
		
		ЗаголовокНадписи = НайтиДокументВДругомУчетеИСформироватьЗаголовок(Объект, ПоказатьИнформациюЕслиНеСоздан);
		
	КонецЕсли;
	
	Возврат ЗаголовокНадписи;
	
КонецФункции

Функция ПолучитьРегламентныйДокумент(СсылкаПроведен, СсылкаНеПроведен, СсылкаУдален, ДокументМенеджер) Экспорт

	Если НЕ ЗначениеЗаполнено(СсылкаПроведен)
		И НЕ ЗначениеЗаполнено(СсылкаНеПроведен)
		И НЕ ЗначениеЗаполнено(СсылкаУдален) Тогда
		
		ДокументОбъект = ДокументМенеджер.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		
	ИначеЕсли ЗначениеЗаполнено(СсылкаПроведен) Тогда
		
		ДокументОбъект = СсылкаПроведен.ПолучитьОбъект();
		
	ИначеЕсли ЗначениеЗаполнено(СсылкаНеПроведен) Тогда
		
		ДокументОбъект = СсылкаНеПроведен.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
		
	Иначе
		
		ДокументОбъект = СсылкаУдален.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
		
	КонецЕсли; 

	Возврат ДокументОбъект;
	
КонецФункции

// Заполняет признаки отражения в учете.
// Используется в документах, которые не содержат выбор отражения в учете.
//
// Параметры:
//  Объект			 - ДокументОбъект	 - Документ, в котором нужно заполнить признаки отражения в учете.
//  СписокАктивов	 - Массив			 - Список внеоборотных активов.
//
Процедура ЗаполнитьОтражениеВУчете(Объект, СписокАктивов) Экспорт
	
	Объект.ОтражатьВУпрУчете = Ложь;
	Объект.ОтражатьВРеглУчете = Ложь;
	
	Если СписокАктивов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаЗаполнитьОтражениеВУчете();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПринятоКУчету.ОтражатьВУпрУчете) > 0, ЛОЖЬ) КАК ОтражатьВУпрУчете,
		|	ЛОЖЬ КАК ОтражатьВРеглУчете
		|
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		1 КАК ОтражатьВУпрУчете
		|	ИЗ
		|		РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОС
		|	ГДЕ
		|		ПорядокУчетаОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|		И ПорядокУчетаОС.ОсновноеСредство В(&СписокАктивов)
		|		И ПорядокУчетаОС.Организация = &Организация
		|		И ПорядокУчетаОС.Регистратор <> &Регистратор
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		1 КАК ОтражатьВУпрУчете
		|	ИЗ
		|		РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчета
		|	ГДЕ
		|		ПорядокУчета.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
		|		И ПорядокУчета.НематериальныйАктив В(&СписокАктивов)
		|		И ПорядокУчета.Организация = &Организация
		|		И ПорядокУчета.Регистратор <> &Регистратор) КАК ПринятоКУчету";
		
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокАктивов", СписокАктивов);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеЦелевогоФинансирования(УсловноеОформление, Элементы) Экспорт
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто2.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто2.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто3.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто3.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

Функция ФиксированныйМассивВСписок(ФиксированныйМассив) Экспорт

	Список = Новый СписокЗначений;
	Для каждого ЗначениеМассива Из ФиксированныйМассив Цикл
		Список.Добавить(ЗначениеМассива);
	КонецЦикла; 
	
	Возврат Список;

КонецФункции

Функция ПредставлениеРезультатаПоискаПоСтроке(Наименование, СтрокаПоиска) Экспорт

	ПозНачало = СтрНайти(ВРег(Наименование), ВРег(СтрокаПоиска));
	Если ПозНачало <> 0 Тогда
		
		ДлинаТекста = СтрДлина(СтрокаПоиска);
		ДлинаПредставления = СтрДлина(Наименование);
		
		ПредставлениеСсылки = Новый ФорматированнаяСтрока(
										?(ПозНачало <> 1, Лев(Наименование, ПозНачало - 1), ""),
										Новый ФорматированнаяСтрока(Сред(Наименование, ПозНачало, ДлинаТекста), Новый Шрифт(,, Истина), ЦветаСтиля.ЦветТекстаЗаголовокОтчетаВТакси),
										?(ДлинаПредставления > (ПозНачало + ДлинаТекста - 1) , Сред(Наименование, ПозНачало + ДлинаТекста), ""));
									
									
	Иначе
		
		ПредставлениеСсылки = Наименование;
		
	КонецЕсли; 

	Возврат ПредставлениеСсылки;
	
КонецФункции

Функция РассчитатьНомераПакетовАмортизации(Выборка, ОбъемПакетов, НаборЗаписей) Экспорт
	
	СписокТекущихПакетов = Новый ТаблицаЗначений;
	СписокТекущихПакетов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СписокТекущихПакетов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СписокТекущихПакетов.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	СписокТекущихПакетов.Колонки.Добавить("ОбъемПакета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	МаксимальныйОбъемПакета = МаксимальныйОбъемПакетаОС();
	
	ИзмененныеПакеты = Новый ТаблицаЗначений;
	ИзмененныеПакеты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзмененныеПакеты.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	ТекущийПакет = Неопределено;
	ДанныеКЗаписи = 0;
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Организация,Период", Выборка.Организация, Выборка.Период);
		СписокСтрок = СписокТекущихПакетов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ТекущийПакет = СписокСтрок[0];
		Иначе
			ТекущийПакет = Неопределено;
		КонецЕсли;
		
		Если ТекущийПакет = Неопределено ИЛИ ТекущийПакет.ОбъемПакета >= МаксимальныйОбъемПакета Тогда
			
			ПодходящийПакет = НайтиПодходящийПакет(
									Выборка.Организация, 
									Выборка.Период,
									?(ТекущийПакет <> Неопределено, ТекущийПакет.НомерПакета, 0), 
									ОбъемПакетов, 
									МаксимальныйОбъемПакета);
			
			Если ТекущийПакет = Неопределено Тогда
				ТекущийПакет = СписокТекущихПакетов.Добавить();
				ТекущийПакет.Организация = Выборка.Организация;
				ТекущийПакет.Период      = Выборка.Период;
			КонецЕсли;
			ТекущийПакет.НомерПакета = ПодходящийПакет.НомерПакета;
			ТекущийПакет.ОбъемПакета = ПодходящийПакет.ОбъемПакета;
			
		КонецЕсли; 
		
		Если ДанныеКЗаписи > 5000 Тогда
			НаборЗаписей.Записать(Ложь);
			НаборЗаписей = РегистрыСведений.ПакетыАмортизацииОС.СоздатьНаборЗаписей();
			ДанныеКЗаписи = 0;
		КонецЕсли; 
		
		НовыйПакетЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПакетЗапись, Выборка);
		НовыйПакетЗапись.НомерПакета = ТекущийПакет.НомерПакета;
		
		ИзмененныйПакет = ИзмененныеПакеты.Добавить();
		ЗаполнитьЗначенияСвойств(ИзмененныйПакет, НовыйПакетЗапись);
		
		ДанныеКЗаписи = ДанныеКЗаписи + 1;
		
		ТекущийПакет.ОбъемПакета = ТекущийПакет.ОбъемПакета + 1;
		
	КонецЦикла;
	
	Если ДанныеКЗаписи > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	ИзмененныеПакеты.Свернуть("Организация,НомерПакета");
	
	Возврат ИзмененныеПакеты;

КонецФункции

Процедура ИнициализироватьХозяйственныеОперацииИДокументыВнеоборотныхАктивов(ХозяйственныеОперацииИДокументы) Экспорт

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВнутренниеПотребленияТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'внутренние потребления товаров'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПриобретениеУслугПрочихАктивов.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ЗакупкаУПоставщика";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'приобретение услуг и прочих активов'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РеализацияВнеоборотныхАктивов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'реализация услуг и прочих активов'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
КонецПроцедуры

Процедура ДобавитьРезультатПроверкиЗаполнения(Объект, ПредставлениеРеквизита, ИмяТЧ, НомерСтроки, ОбъектПроблемы) Экспорт

	Если НЕ Объект.ДополнительныеСвойства.Свойство("РезультатыПроверкиЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.РезультатыПроверкиЗаполнения = Неопределено Тогда
		Объект.ДополнительныеСвойства.РезультатыПроверкиЗаполнения = Новый Массив;
	КонецЕсли; 
	
	РезультатыПроверкиЗаполнения = Объект.ДополнительныеСвойства.РезультатыПроверкиЗаполнения;
	
	ПараметрыОшибки = Новый Структура;
	ПараметрыОшибки.Вставить("Объект", ОбъектПроблемы);
	ПараметрыОшибки.Вставить("ПредставлениеРеквизита", ПредставлениеРеквизита);
	ПараметрыОшибки.Вставить("ИмяТЧ", ИмяТЧ);
	ПараметрыОшибки.Вставить("НомерСтроки", НомерСтроки);
	
	РезультатыПроверкиЗаполнения.Добавить(ПараметрыОшибки);
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствВНА24() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьВнеоборотныеАктивы2_2 = Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить();
	ИспользоватьВнеоборотныеАктивы2_4 = Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить();
										
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ИспользоватьВнеоборотныеАктивы2_4;
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИзменениеПараметровНМА2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИзменениеПараметровОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_МодернизацияОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПеремещениеОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПодготовкаКПередачеОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПринятиеКУчетуНМА2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПринятиеКУчетуОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_СписаниеНМА2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_СписаниеОС2_4", ПараметрыНабора);
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = 
		ИспользоватьВнеоборотныеАктивы2_2
		ИЛИ ИспользоватьВнеоборотныеАктивы2_4;
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_НематериальныеАктивы", ПараметрыНабора);
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = 
		ИспользоватьВнеоборотныеАктивы2_2
		ИЛИ ИспользоватьВнеоборотныеАктивы2_4
		ИЛИ Константы.ИспользоватьУправлениеРемонтами.Получить();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ОбъектыЭксплуатации_Общие", ПараметрыНабора);
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствВНА22() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьВнеоборотныеАктивы2_2 = Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить();
	ИспользоватьВнеоборотныеАктивы2_4 = Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить();
										
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ИспользоватьВнеоборотныеАктивы2_2;
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИзменениеПараметровНМА", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИзменениеПараметровОС", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_МодернизацияОС", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПеремещениеОС", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПодготовкаКПередачеОС", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПринятиеКУчетуНМА", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПринятиеКУчетуОС", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_СписаниеНМА", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_СписаниеОС", ПараметрыНабора);
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = 
		ИспользоватьВнеоборотныеАктивы2_2
		ИЛИ ИспользоватьВнеоборотныеАктивы2_4;
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_НематериальныеАктивы", ПараметрыНабора);
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = 
		ИспользоватьВнеоборотныеАктивы2_2
		ИЛИ ИспользоватьВнеоборотныеАктивы2_4
		ИЛИ Константы.ИспользоватьУправлениеРемонтами.Получить();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ОбъектыЭксплуатации_Общие", ПараметрыНабора);
	
КонецПроцедуры

Процедура УстановитьЗначенияПараметровПроведенияПриПеремещении(Реквизиты, ЗначенияПараметровПроведения) Экспорт

	Если Реквизиты = Неопределено Тогда
		Возврат
	КонецЕсли; 
		
	// ИнформацияПоОтправителю
	ШаблонСтроки = НСтр("ru='Перемещение из ""%1""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс
		ИЛИ Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс Тогда
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.Подразделение)
			ИЛИ НЕ ЗначениеЗаполнено(Реквизиты.Организация) Тогда
			ИнформацияПоОтправителю = "";
		ИначеЕсли Реквизиты.Подразделение <> Реквизиты.ПодразделениеПолучатель Тогда
			ШаблонСтроки = НСтр("ru='Перемещение из организации ""%1"" и подразделения ""%2""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИнформацияПоОтправителю = СтрШаблон(ШаблонСтроки, Реквизиты.Организация, Реквизиты.Подразделение);
		Иначе
			ИнформацияПоОтправителю = СтрШаблон(ШаблонСтроки, Реквизиты.Организация);
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
		ИнформацияПоОтправителю = СтрШаблон(ШаблонСтроки, Реквизиты.Подразделение);
	Иначе
		ИнформацияПоОтправителю = "";
	КонецЕсли;
	ЗначенияПараметровПроведения.Вставить("ИнформацияПоОтправителю", ИнформацияПоОтправителю);
	
	// ИнформацияПоПолучателю
	ШаблонСтроки = НСтр("ru='Перемещение в ""%1""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс
		ИЛИ Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс Тогда
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.ПодразделениеПолучатель)
			ИЛИ НЕ ЗначениеЗаполнено(Реквизиты.ОрганизацияПолучатель) Тогда
			ИнформацияПоПолучателю = "";
		ИначеЕсли Реквизиты.Подразделение <> Реквизиты.ПодразделениеПолучатель Тогда
			ШаблонСтроки = НСтр("ru='Перемещение в организацию ""%1"" и подразделение ""%2""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИнформацияПоПолучателю = СтрШаблон(ШаблонСтроки, Реквизиты.ОрганизацияПолучатель, Реквизиты.ПодразделениеПолучатель);
		Иначе
			ИнформацияПоПолучателю = СтрШаблон(ШаблонСтроки, Реквизиты.ОрганизацияПолучатель);
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.ПодразделениеПолучатель) Тогда
		ИнформацияПоПолучателю = СтрШаблон(ШаблонСтроки, Реквизиты.ПодразделениеПолучатель);
	Иначе
		ИнформацияПоПолучателю = "";
	КонецЕсли;
	ЗначенияПараметровПроведения.Вставить("ИнформацияПоПолучателю", ИнформацияПоПолучателю);
	
КонецПроцедуры

// Возвращает список организаций, доступных пользователю.
// 
// Возвращаемое значение:
//  Массив - Список организаций, доступных пользователю.
//
Функция СписокРазрешенныхОрганизаций() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокОрганизаций;

КонецФункции

Функция ПредставлениеРеквизита(ИмяРеквизита, ИмяТЧ, ПредставлениеРеквизитов, МетаданныеОбъекта) Экспорт

	Если ПредставлениеРеквизитов = Неопределено Тогда
		ПредставлениеРеквизитов = Новый Соответствие;
		Для каждого МетаданныеРеквизита Из МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
			ПредставлениеРеквизитов.Вставить(МетаданныеРеквизита.Имя, МетаданныеРеквизита.Синоним);
		КонецЦикла;
	КонецЕсли;

	Возврат ПредставлениеРеквизитов.Получить(ИмяРеквизита);
	
КонецФункции

Процедура УстановитьВидимостьКомандыВводаНаОсновании(Элементы, ИмяДокумента, ТаблицаКоманд, ВидимостьКоманды) Экспорт

	ТекСтрока = ТаблицаКоманд.Найти("Документ." + ИмяДокумента, "Менеджер");
	Если ТекСтрока <> Неопределено Тогда
		Элементы[ТекСтрока.ИмяВФорме].Видимость = ВидимостьКоманды;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОчиститьРеквизит(Объект, ИмяРеквизита, Действие, Значение, ПустоеЗначение, ИзмененныеРеквизиты) Экспорт

	Если Действие = "Заполнить" 
		И (НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита])
			ИЛИ Объект[ИмяРеквизита] = Ложь И Значение = Истина) Тогда
		Объект[ИмяРеквизита] = Значение;
	ИначеЕсли Действие = "Очистить" Тогда
		Объект[ИмяРеквизита] = ПустоеЗначение;
	КонецЕсли;
	
	ИзмененныеРеквизиты.Добавить(ИмяРеквизита);
	
КонецПроцедуры

Процедура ДобавитьТипОбъектаМетаданных(ИмяДокумента, ПроверитьНаличиеПрав, СписокОбъектов) Экспорт

	Если НЕ ПроверитьНаличиеПрав ИЛИ ПравоДоступа("Проведение", Метаданные.Документы[ИмяДокумента]) Тогда
		СписокОбъектов.Добавить(Тип("ДокументСсылка." + ИмяДокумента));
	КонецЕсли; 
	
КонецПроцедуры

Функция ЕстьПраваНаЧтениеСостоянияОС() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) 
		И ВнеоборотныеАктивыЛокализация.ЕстьПраваНаЧтениеСостоянияОС();

КонецФункции

Функция ЕстьПраваНаЧтениеСостоянияНМА() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ) 
		И ВнеоборотныеАктивыЛокализация.ЕстьПраваНаЧтениеСостоянияНМА();

КонецФункции

Функция ПредставлениеСуммы(Сумма, ЗаголовокСуммы, Валюта) Экспорт

	СуммаСтрокой = Формат(Сумма, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
	
	ПредставлениеСуммы = Новый Массив;
	
	Если Сумма > 0 Тогда
		
		Текст = СтрШаблон("%1 %2 %3", ЗаголовокСуммы, СуммаСтрокой, Валюта);
		ПредставлениеСуммы.Добавить(Текст);
		
	ИначеЕсли Сумма < 0 Тогда
		
		ПредставлениеСуммы.Добавить(ЗаголовокСуммы);
		ПредставлениеСуммы.Добавить(" ");
		ПредставлениеСуммы.Добавить(Новый ФорматированнаяСтрока(СуммаСтрокой,, ЦветаСтиля.ЦветОтрицательногоЧисла));
		ПредставлениеСуммы.Добавить(" ");
		ПредставлениеСуммы.Добавить(Строка(Валюта));
		
	Иначе
		
		ПредставлениеСуммы.Добавить(ЗаголовокСуммы + " -");
		
	КонецЕсли; 

	Возврат Новый ФорматированнаяСтрока(ПредставлениеСуммы);
	
КонецФункции

Процедура УстановитьСвойствоСтруктуры(ИмяСвойства, ЗначениеСвойства, Приемник) Экспорт

	НовыеСвойства = Новый Структура(Приемник);
	НовыеСвойства.Вставить(ИмяСвойства, ЗначениеСвойства);
	Приемник = Новый ФиксированнаяСтруктура(НовыеСвойства);
	
КонецПроцедуры

Функция ДоступенВыборОбъектовЭксплуатации2_4(Параметры) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Контекст") 
		И СтрНайти(Параметры.Контекст, "УУ") = 0 Тогда
		
		// Если в параметрах выбора нет УУ то форма не поддерживает выбор 2.4
		ДоступенВыбор = Ложь;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
	
		ДатаНачалаУчета = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
		
		// Если в параметрах выбора есть МФУ, то форма поддерживает выбор 2.2 и 2.4
		// Нужно по дате сведений определить какая форма нужна. 
		// Если в параметрах выбора нет МФУ, то форма поддерживает только выбор 2.4.
		ДоступенВыбор = 
			Параметры.Свойство("Контекст") 
				И СтрНайти(Параметры.Контекст, "МФУ") = 0
			ИЛИ НЕ Параметры.Свойство("ДатаСведений")
				И ТекущаяДатаСеанса() >= ДатаНачалаУчета 
			ИЛИ Параметры.Свойство("ДатаСведений")
				И Параметры.ДатаСведений >= ДатаНачалаУчета;
	Иначе
		ДоступенВыбор = Истина;
	КонецЕсли;
			
	Если НЕ ДоступенВыбор Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("БУСостояние") Тогда
			Параметры.Отбор.Вставить("Состояние", Параметры.Отбор.БУСостояние);
		КонецЕсли; 
		Если Параметры.Отбор.Свойство("БУОрганизация") Тогда
			Параметры.Отбор.Вставить("Организация", Параметры.Отбор.БУОрганизация);
		КонецЕсли; 
		Если Параметры.Отбор.Свойство("БУПодразделение") Тогда
			Параметры.Отбор.Вставить("Подразделение", Параметры.Отбор.БУПодразделение);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетАмортизации

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                      КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|			ТОГДА ТаблицаРасходы.ОрганизацияПолучательРасходов
	|		ИНАЧЕ ТаблицаРасходы.Организация
	|	КОНЕЦ                                                       КАК Организация,
	|	ТаблицаРасходы.КорПодразделение                             КАК Подразделение,
	|	&Ссылка                                                     КАК ДокументПоступленияРасходов,
	|	ТаблицаРасходы.СтатьяРасходов                               КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов                            КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаАктивовПассивов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаРасходы.КорНаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                КАК ВидДеятельностиНДС,
	|
	|	СУММА(ТаблицаРасходы.СуммаУУ) КАК Стоимость,
	|	СУММА(ТаблицаРасходы.СуммаУУ) КАК СтоимостьБезНДС,
	|	0                             КАК НДСУпр,
	|	СУММА(ТаблицаРасходы.СуммаБУ + ТаблицаРасходы.СуммаЦФ)    КАК СтоимостьРегл,
	|	СУММА(ТаблицаРасходы.СуммаПР + ТаблицаРасходы.СуммаПРЦФ)  КАК ПостояннаяРазница,
	|	СУММА(ТаблицаРасходы.СуммаВР + ТаблицаРасходы.СуммаВРЦФ)  КАК ВременнаяРазница,
	|	0                             КАК НДСРегл,
	|
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|
	|ПОМЕСТИТЬ ВтИсходныеПартииПрочихРасходов
	|ИЗ
	|	ВТ_НачисленнаяАмортизация КАК ТаблицаРасходы
	|ГДЕ
	|	НЕ ТаблицаРасходы.НачислятьИзнос
	|	И ТаблицаРасходы.Организация = &Организация
	|	И ТаблицаРасходы.НомерПакета = &НомерПакета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|			ТОГДА ТаблицаРасходы.ОрганизацияПолучательРасходов
	|		ИНАЧЕ ТаблицаРасходы.Организация
	|	КОНЕЦ,
	|	ТаблицаРасходы.КорПодразделение,
	|	ТаблицаРасходы.СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов,
	|	ТаблицаРасходы.КорНаправлениеДеятельности
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция НайтиПодходящийПакет(Организация, Период, Знач НомерПакета, ОбъемПакетов, МаксимальныйОбъем)
	
	ОбъемПакета = МаксимальныйОбъем;
	Пока ОбъемПакета >= МаксимальныйОбъем Цикл
		НомерПакета = НомерПакета + 1;
		СтруктураПоиска = Новый Структура("Организация,Период,НомерПакета", Организация, Период, НомерПакета);
		СписокСтрок = ОбъемПакетов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ОбъемПакета = СписокСтрок[0].ОбъемПакета;
		Иначе
			ОбъемПакета = 0;
		КонецЕсли;
	КонецЦикла;

	Возврат Новый Структура("ОбъемПакета,НомерПакета", ОбъемПакета,НомерПакета);
	
КонецФункции

#КонецОбласти

#Область ПереоценкаОС_НМА

Процедура ТекстЗапросаТаблицаСтоимостьПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета)
	
	ИмяРегистра = ?(ВидОбъектовУчета = "ОС", "СтоимостьОС", "СтоимостьНМА");
	
	ТекстыТекущегоЗапроса = Новый Массив;
	
	#Область Дооценка_УвеличениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УвеличениеСтоимости КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                           КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                           КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                    КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                     КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0)";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УменьшениеВеличиныДооценкиСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеВеличиныДооценкиСтоимости КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                           КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                           КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                    КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                     КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеСтоимости КАК ХозяйственнаяОперация,
	|	&СтатьяРасходов                        КАК КорСтатьяРасходов,
	|	&АналитикаРасходов                     КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                    КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                     КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Уценка_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеВеличиныДооценкиСтоимости КАК ХозяйственнаяОперация,
	|	&СтатьяРасходов                        КАК КорСтатьяРасходов,
	|	&АналитикаРасходов                     КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                    КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                     КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаАмортизацияПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета)

	ИмяРегистра = ?(ВидОбъектовУчета = "ОС", "АмортизацияОС", "АмортизацияНМА");
	
	ТекстыТекущегоЗапроса = Новый Массив;
	
	#Область Дооценка_УвеличениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УвеличениеНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                           КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                           КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Дооценка_УменьшениеВеличиныДооценкиАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	&СтатьяРасходов                        КАК КорСтатьяРасходов,
	|	&АналитикаРасходов                     КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Уценка_УменьшениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеНакопленнойАмортизации      КАК ХозяйственнаяОперация,
	|	&СтатьяРасходов                        КАК КорСтатьяРасходов,
	|	&АналитикаРасходов                     КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0
	|				И НЕ ТаблицаПереоценки.НачислятьИзнос
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ > 0
	|				И НЕ ТаблицаПереоценки.НачислятьИзнос";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Уценка_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	&СтатьяРасходов                        КАК КорСтатьяРасходов,
	|	&АналитикаРасходов                     КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПрочиеДоходыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета)

	ИмяРегистра = "ПрочиеДоходы";
	
	ТекстыТекущегоЗапроса = Новый Массив;
	
	#Область ДооценкаВосстановительнойСтоимостиИзУценки
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)         КАК ВидДвижения,
	|	&Период                                        КАК Период,
	|	&Организация                                   КАК Организация,
	|	&Подразделение                                 КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеВеличиныДооценкиСтоимости           КАК ХозяйственнаяОперация,
	|	&СтатьяДоходов                                 КАК СтатьяДоходов,
	|	&АналитикаДоходов                              КАК АналитикаДоходов,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	
	|	ВЫБОР 
	|		КОГДА НЕ &УправленческийУчетОрганизаций
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	ВЫБОР 
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область УценкаНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)         КАК ВидДвижения,
	|	&Период                                        КАК Период,
	|	&Организация                                   КАК Организация,
	|	&Подразделение                                 КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеНакопленнойАмортизации              КАК ХозяйственнаяОперация,
	|	&СтатьяДоходов                                 КАК СтатьяДоходов,
	|	&АналитикаДоходов                              КАК АналитикаДоходов,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА НЕ &УправленческийУчетОрганизаций
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ + ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ) > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ 
	|					+ ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ
	|					- ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0
	|				И НЕ ТаблицаПереоценки.НачислятьИзнос";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаТаблицаПрочиеДоходыПриПереоценке(ТекстыТекущегоЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции
 
Функция ТекстЗапросаТаблицаПрочиеРасходыПриПереоценке(ТекстыЗапроса) 
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходыПриПереоценке(ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходыПриПереоценке(ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходыПриПереоценке(ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходыПриПереоценке(ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы();
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() +
	// Уценка восстановительной стоимости
	"ВЫБРАТЬ
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&СтатьяРасходов                             КАК СтатьяРасходов,
	|	&АналитикаРасходов                          КАК АналитикаРасходов,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                  КАК АналитикаУчетаНоменклатуры
	|
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|	ПО &СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0)
	|	И НЕ ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Дооценка накопленной амортизации из уценки
	|ВЫБРАТЬ
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&СтатьяРасходов                             КАК СтатьяРасходов,
	|	&АналитикаРасходов                          КАК АналитикаРасходов,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                  КАК АналитикаУчетаНоменклатуры
	|
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|	ПО &СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ НЕ ТаблицаПереоценки.НачислятьИзнос 
	|				И ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0)
	|	И НЕ ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходовПриПереоценке(ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходовПриПереоценке(ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходовПриПереоценке(ТекстыЗапроса)
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходовПриПереоценке(ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходовПриПереоценке(ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстОписаниеВтИсходныеПартииПрочихРасходов();
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() +
	"ВЫБРАТЬ
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&СтатьяРасходов                             КАК СтатьяРасходов,
	|	&АналитикаРасходов                          КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаАктивовПассивов,
	|	&Ссылка                                     КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьБезНДС,
	|	0 КАК НДСУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|	ПО &СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0)
	|	И ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&СтатьяРасходов                             КАК СтатьяРасходов,
	|	&АналитикаРасходов                          КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаАктивовПассивов,
	|	&Ссылка                                     КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьБезНДС,
	|	0 КАК НДСУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|	ПО &СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ НЕ ТаблицаПереоценки.НачислятьИзнос 
	|				И ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0)
	|	И ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаВтТаблицаПереоценки(ТекстыЗапроса, ВидОбъектовУчета)
	
	ИмяТаблицы = "ТаблицаПереоценки";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ОсновноеСредство                                   КАК ОсновноеСредство,
	|	ТаблицаПереоценки.СтоимостьУУ                       КАК СтоимостьУУ,
	|	ТаблицаПереоценки.СтоимостьБУ                       КАК СтоимостьБУ,
	|
	|	ПорядокУчета.ГруппаФинансовогоУчета                 КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|
	|	ЕСТЬNULL(АмортизацияОС.НачислятьИзнос, ЛОЖЬ)        КАК НачислятьИзнос,
	|
	|	ЕСТЬNULL(АмортизацияОС.Амортизация, 0)              КАК НакопленнаяАмортизацияУУ,
	|
	|	ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0)
	|		+ ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0)      КАК НакопленнаяАмортизацияБУ,
	|
	|	ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0)            КАК НакопленнаяАмортизацияЦФ,
	|	ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)               КАК ТекущаяСтоимостьЦФ,
	|
		// Дооценка стоимости УУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|			ТОГДА ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиСтоимостиУУ,
	|
		// Дооценка стоимости БУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|			ТОГДА ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиСтоимостиБУ,
	|	
		// Уценка стоимости УУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиСтоимостиУУ,
	|
		// Уценка стоимости БУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) - ТаблицаПереоценки.СтоимостьБУ >= 0
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) - ТаблицаПереоценки.СтоимостьБУ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиСтоимостиБУ,
	|	
		// Уценка стоимости ЦФ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|					И ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) > ТаблицаПереоценки.СтоимостьБУ
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) - ТаблицаПереоценки.СтоимостьБУ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиСтоимостиЦФ,
	|	
		// РезервПереоценкиСтоимости
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете
	|			ТОГДА 0
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) < -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) >= -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ) < ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ) >= ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|
		// РезервПереоценкиСтоимостиРегл
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете
	|			ТОГДА 0
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) < -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) >= -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ТаблицаПереоценки.СтоимостьБУ) < ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ТаблицаПереоценки.СтоимостьБУ
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ТаблицаПереоценки.СтоимостьБУ) >= ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
		// Дооценка амортизации УУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.Амортизация, 0) <> 0
	|			ТОГДА -АмортизацияОС.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиАмортизацииУУ,
	|
		// Дооценка амортизации БУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) <> 0
	|				И (ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0) + ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0)) <> 0
	|			ТОГДА -(АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ) 
	|					+ ВЫРАЗИТЬ((АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ)
	|									* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиАмортизацииБУ,
	|	
		// Уценка амортизации УУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|			ТОГДА АмортизацияОС.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииУУ,
	|
		// Уценка амортизации БУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) <> 0
	|			ТОГДА (АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ) 
	|					- ВЫРАЗИТЬ((АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ)
	|									* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииБУ,
	|
		// Уценка амортизации ЦФ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете
	|				ИЛИ (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) = 0
	|				ИЛИ ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|			ТОГДА 0
	|		КОГДА АмортизацияОС.АмортизацияЦФ > ВЫРАЗИТЬ((АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ)
	|												* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2))
	|			ТОГДА АмортизацияОС.АмортизацияЦФ 
	|					- ВЫРАЗИТЬ((АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ)
	|									* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииЦФ,
	|
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете
	|			ТОГДА 0
	|
			// Дооценка и резерв > дооценки: Резерв = Дооценка
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0) < 0
	|				И (-АмортизацияОС.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ 
	|						/ ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))) < -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА -АмортизацияОС.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))
	|
			// Дооценка и резерв <= дооценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0) < 0
	|				И (-АмортизацияОС.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))) >= -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|
			// Уценка и резерв > уценки: Резерв = Уценка
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0) > 0
	|				И (АмортизацияОС.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))) < ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА АмортизацияОС.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))
	|
			// Уценка и резерв <= уценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0) > 0
	|				И (АмортизацияОС.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))) >= ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете
	|			ТОГДА 0
	|
			// Дооценка и резерв > дооценки: Резерв = Дооценка
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0) < 0
	|				И (-АмортизацияОС.АмортизацияРегл
	|					+ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))) < -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА -АмортизацияОС.АмортизацияРегл
	|					+ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))
	|
			// Дооценка и резерв <= дооценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0) < 0
	|				И (-АмортизацияОС.АмортизацияРегл
	|					+ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))) >= -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|
			// Уценка и резерв > уценки: Резерв = Уценка
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0) > 0
	|				И (АмортизацияОС.АмортизацияРегл
	|					- ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))) < ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА АмортизацияОС.АмортизацияРегл
	|					- ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))
	|
			// Уценка и резерв <= уценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0) > 0
	|				И (АмортизацияОС.АмортизацияРегл
	|					- ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))) >= ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл
	|
	|ПОМЕСТИТЬ ТаблицаПереоценки
	|ИЗ
	|	Документ.ПереоценкаОС2_4.ОС КАК ТаблицаПереоценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьВНА
	|		ПО СтоимостьВНА.ОбъектУчета = &ОсновноеСредство
	|			И СтоимостьВНА.Ссылка = ТаблицаПереоценки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АмортизацияВНА КАК АмортизацияОС
	|		ПО АмортизацияОС.ОбъектУчета = &ОсновноеСредство
	|			И АмортизацияОС.Ссылка = ТаблицаПереоценки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(&Период) КАК ПорядокУчета
	|		ПО &ОсновноеСредство = ПорядокУчета.ОсновноеСредство
	|ГДЕ
	|	ТаблицаПереоценки.Ссылка = &Ссылка";
			
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета);
			
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	ТекстыТекущегоЗапроса = Новый Массив;

	#Область Дооценка_УвеличениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УвеличениеСтоимости                       КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0)";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УменьшениеВеличиныДооценкиСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеВеличиныДооценкиСтоимости       КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеСтоимости                       КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяРасходов                            КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	&АналитикаРасходов                         КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеВеличиныДооценкиСтоимости       КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УвеличениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УвеличениеНакопленнойАмортизации          КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УменьшениеВеличиныДооценкиНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеНакопленнойАмортизации          КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяДоходов                             КАК Статья,
	|	&АналитикаДоходов                          КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                               КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеВеличиныДооценкиНакопленнойАмортизации 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры
 
Процедура ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета)

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатьяАП_ПрибыльУбыток", "ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки)");
	Если ВидОбъектовУчета = "ОС" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОсновноеСредство", "ТаблицаПереоценки.ОсновноеСредство");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УвеличениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УвеличениеСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеСтоимостиОС)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УвеличениеНакопленнойАмортизации", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УвеличениеНакопленнойАмортизацииОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеНакопленнойАмортизации", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеНакопленнойАмортизацииОС)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеВеличиныДооценкиСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеВеличиныДооценкиНакопленнойАмортизации", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиНакопленнойАмортизацииОС)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатьяАП_ОС", "ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОсновныеСредства)");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОсновноеСредство", "ТаблицаПереоценки.НематериальныйАктив");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ОсновноеСредство", "КАК НематериальныйАктив");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПереоценкаОС2_4.ОС", "Документ.ПереоценкаНМА2_4.НМА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокУчетаОС", "РегистрСведений.ПорядокУчетаНМА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПорядокУчета.ОсновноеСредство", "ПорядокУчета.НематериальныйАктив");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УвеличениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УвеличениеСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеСтоимостиНМА)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УвеличениеНакопленнойАмортизации", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УвеличениеНакопленнойАмортизацииНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеНакопленнойАмортизации", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеНакопленнойАмортизацииНМА)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеВеличиныДооценкиСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеВеличиныДооценкиНакопленнойАмортизации", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиНакопленнойАмортизацииНМА)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатьяАП_ОС", "ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.НематериальныеАктивы)");
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ЗаголовокНадписиОДокументеВДругомУчете(РеквизитыДокумента)

	ЗаголовокНадписи = Новый Массив;
	Если РеквизитыДокумента.ПометкаУдаления 
		ИЛИ РеквизитыДокумента.ОтражатьВУпрУчете 
			И РеквизитыДокумента.ОтражатьВРеглУчете Тогда						
		// Гиперссылка о док-те  в другом учете не выводится, если другой документ отражается в обоих учетах.
		Возврат ЗаголовокНадписи;
	КонецЕсли; 
	
	МетаданныеДокумента = РеквизитыДокумента.Ссылка.Метаданные();
	ПредставлениеДокумента = ПредставлениеДокумента(МетаданныеДокумента.Синоним);
	ТекстПринятУУ = СтрШаблон(НСтр("ru = 'В управленческом учете создан документ %1'"), ПредставлениеДокумента);
	ТекстПринятБУ = СтрШаблон(НСтр("ru = 'В регламентированном учете создан документ %1'"), ПредставлениеДокумента);
		
	Если РеквизитыДокумента.ОтражатьВУпрУчете Тогда
		ЗаголовокНадписи.Добавить(ТекстПринятУУ);
	Иначе
		ЗаголовокНадписи.Добавить(ТекстПринятБУ);
	КонецЕсли;
	ЗаголовокНадписи.Добавить(" ");
	
	ПредставлениеЗаказа = СтрШаблон(НСтр("ru = '№%1 от %2'"), 
								ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
										РеквизитыДокумента.Номер, Ложь, Истина),
								Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
	
	ЗаголовокНадписи.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗаказа,,,, ПолучитьНавигационнуюСсылку(РеквизитыДокумента.Ссылка)));
	
	Если НЕ РеквизитыДокумента.Проведен Тогда
		ЗаголовокНадписи.Добавить(" ");
		ЗаголовокНадписи.Добавить(Новый ФорматированнаяСтрока(
									НСтр("ru = 'не проведен'"),, ЦветаСтиля.ЦветОсобогоТекста));
	КонецЕсли;
		
	Возврат ЗаголовокНадписи;
	
КонецФункции

Функция НайтиДокументВДругомУчетеИСформироватьЗаголовок(Объект, ПоказатьИнформациюЕслиНеСоздан)
	
	ЗаголовокНадписи = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЗаголовокНадписи;
	КонецЕсли;
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	ПредставлениеДокумента = ПредставлениеДокумента(МетаданныеДокумента.Синоним);
	ТекстНеПринятУУ = СтрШаблон(НСтр("ru = 'В управленческом учете не создан документ %1'"), ПредставлениеДокумента);
	ТекстНеПринятБУ = СтрШаблон(НСтр("ru = 'В регламентированном учете не создан документ %1'"), ПредставлениеДокумента);
	ТекстОформить = НСтр("ru = 'Создать'");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	1 КАК Приоритет,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.ПометкаУдаления,
	|	ДанныеДокумента.Проведен,
	|	ДанныеДокумента.ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|ИЗ
	|	ИмяДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументВДругомУчете = &Ссылка
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	2,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.ПометкаУдаления,
	|	ДанныеДокумента.Проведен,
	|	ДанныеДокумента.ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|ИЗ
	|	ИмяДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументВДругомУчете = &Ссылка
	|	И НЕ ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяДокумента", "Документ." + ИмяДокумента);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаголовокНадписи = ЗаголовокНадписиОДокументеВДругомУчете(Выборка);
		
	ИначеЕсли (НЕ Объект.ОтражатьВУпрУчете ИЛИ НЕ Объект.ОтражатьВРеглУчете) И ПоказатьИнформациюЕслиНеСоздан Тогда
		
		Если НЕ Объект.ОтражатьВУпрУчете Тогда
			ЗаголовокНадписи.Добавить(ТекстНеПринятУУ);
		Иначе
			ЗаголовокНадписи.Добавить(ТекстНеПринятБУ);
		КонецЕсли;
		
		Если ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы[ИмяДокумента]) Тогда
			ЗаголовокНадписи.Добавить(" ");
			ЗаголовокНадписи.Добавить(Новый ФорматированнаяСтрока(ТекстОформить,,,, "#СоздатьДокумент"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаголовокНадписи;

КонецФункции

Функция ПредставлениеДокумента(СинонимДокумента)

	ПредставлениеДокумента = СинонимДокумента;
	
	Если СтрЗаканчиваетсяНа(СинонимДокумента, НСтр("ru = 'ОС'")) Тогда
		ПредставлениеДокумента = СокрЛП(Лев(СинонимДокумента, СтрДлина(СинонимДокумента) - 2));
	ИначеЕсли СтрЗаканчиваетсяНа(СинонимДокумента, НСтр("ru = 'НМА'")) Тогда
		ПредставлениеДокумента = СокрЛП(Лев(СинонимДокумента, СтрДлина(СинонимДокумента) - 3));
	КонецЕсли; 

	Возврат ПредставлениеДокумента;
	
КонецФункции
 
#КонецОбласти

#КонецОбласти
