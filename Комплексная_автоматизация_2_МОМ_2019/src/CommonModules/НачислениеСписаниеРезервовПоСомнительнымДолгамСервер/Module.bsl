
#Область ПрограммныйИнтерфейс

#Область ЗакрытиеМесяца

//++ НЕ УТ
#Область ОбработкаЭтаповЗакрытияМесяца

// Добавляет этап закрытия месяца Формирование резервов по сомнительным долгам.
// 
// Параметры:
// 	ТаблицаЭтапов - таблица этапов, в которую требуется добавить новый этап
// 	ТекущийРодитель - группа. в которую нужно добавить новй этап
//
Процедура ДобавитьЭтап_ФормированиеРезервовПоСомнительнымДолгам(ТаблицаЭтапов, ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам,
		Ложь, Истина, Ложь);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Сформировать'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.Использование_ФормированиеРезервовПоСомнительнымДолгам");
	НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.Выполнить_ФормированиеРезервовПоСомнительнымДолгам");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.Формы.ФормаСписка.ПолноеИмя());
	
КонецПроцедуры

// Проверка необходимости использования этапа закрытия месяца.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Использование_ФормированиеРезервовПоСомнительнымДолгам(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Начало = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = ТекстЗапросаСостояниеФормированияРезервовПоСомнительнымДолгам();
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	Запрос.Выполнить();
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбщийМодуль.НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.СостояниеФормированияРезервовПоСомнительнымДолгам", Начало);
	
	Если РазмерыВременныхТаблиц.вт_ОрганизацииСРезервами = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет организаций, для которых в учетной политике используется формирование резервов в БУ или НУ'"));
		
	ИначеЕсли РазмерыВременныхТаблиц.вт_ОрганизацииСОстатками = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков по регистрам расчетов с клиентами, поставщиками, по регистрам финансовых инструментов и по резервов'"));
		
	Иначе
		ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина, "вт_ОрганизацииСРезервами");
	КонецЕсли;
	
	МассивОрганизаций = ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций;
	
	ВременнаяТаблицаОрганизаций = ПараметрыОбработчика.МенеджерВременныхТаблиц.Таблицы.Найти("вт_ОрганизацииКОтражению"); 
	Если Не ВременнаяТаблицаОрганизаций = Неопределено Тогда
		МассивОрганизаций = ВременнаяТаблицаОрганизаций.ПолучитьДанные().Выгрузить().ВыгрузитьКолонку("Организация");
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УстановитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, "МассивОрганизацийКОтражению", МассивОрганизаций);
	
КонецПроцедуры

// Выполнение этапа закрытия месяца.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Выполнить_ФормированиеРезервовПоСомнительнымДолгам(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	ДополнительныеСвойства = ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства;
	
	НачалоПериода = ЗакрытиеМесяцаСервер.НачалоРасчета(ПараметрыОбработчика.ДанныеЭтапа.Код, ПараметрыРасчета.КонецПериода,,
		ПараметрыРасчета.МассивОрганизаций);
	ВалютаУпрНеРавнаВалютеРегл = Константы.ВалютаРегламентированногоУчета.Получить() <> Константы.ВалютаУправленческогоУчета.Получить();
	
	Пока НачалоПериода <= ПараметрыРасчета.КонецПериода Цикл
		ОкончаниеПериода = КонецМесяца(НачалоПериода);
		НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		
		// Этап 1. Подготовка работы с заданиями.
		
		НачатьТранзакцию();
		
		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗаданияДоРасчета,
				ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru='При выполнении расчета за период %1 произошла ошибка:
					|%2'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций, НачалоПериода);
		КонецПопытки;
		
		// Этап 2. Собственно расчет по организациям и периоду.
		Попытка
			НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.УдалитьСтарыеРезервыПриЗакрытииМесяца(
				ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
			ОбновитьДвиженияСписанияЗадолженностиЗаСчетРезервов(ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
			СформироватьРезервыПриЗакрытииМесяца(ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
			
			// Переоценим остатки резервов в упр. валюте
			Если ВалютаУпрНеРавнаВалютеРегл Тогда
				Документы.РасчетКурсовыхРазниц.ПереоценитьРезервыПоСомнительнымДолгам(
					ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
			КонецЕсли;
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru='Формирование резервов по сомнительным долгам за период %1 завершилось с ошибкой:
					|%2'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
		КонецПопытки;
		
		// Этап 3. Завершение работы с заданиями.
		
		НачатьТранзакцию();
		
		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(Неопределено, НомерЗаданияДоРасчета, ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРасчетуЗаМесяц);
			
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
				ДанныеКРасчетуЗаМесяц.ВременныеТаблицы, ОкончаниеПериода + 1);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
					|%2'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций, НачалоПериода);
		КонецПопытки;
		
		НачалоПериода = ОкончаниеПериода + 1;
	КонецЦикла;
	
	// Теперь найдем организации, у которых не было заданий и отсутствуют документы формирования резервов.
	// Сформируем дополнительно документы для этих организаций в текущем периоде.
	
	МассивОрганизацийКОтражению = Новый Массив;
	Если ДополнительныеСвойства.Свойство("МассивОрганизацийКОтражению") Тогда
		МассивОрганизацийКОтражению = ДополнительныеСвойства.МассивОрганизацийКОтражению;
	КонецЕсли;
	
	Если Не МассивОрганизацийКОтражению.Количество() = 0 Тогда
		
		// Убираем из организаций к отражению те, по которым выше выполнились задания в текущем месяце.
		Если Не ДанныеКРасчетуЗаМесяц = Неопределено Тогда
			Для Каждого Организация Из ДанныеКРасчетуЗаМесяц.Организация Цикл
				ОтраженнаяОрганизация = МассивОрганизацийКОтражению.Найти(Организация);
				Если ОтраженнаяОрганизация = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МассивОрганизацийКОтражению.Удалить(ОтраженнаяОрганизация);
			КонецЦикла;
		КонецЕсли;
		
		// По остальным организациям формируем резервы.
		
		Если Не МассивОрганизацийКОтражению.Количество() = 0 Тогда
			НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.УдалитьСтарыеРезервыПриЗакрытииМесяца(
				МассивОрганизацийКОтражению, ПараметрыРасчета.КонецПериода);
			ОбновитьДвиженияСписанияЗадолженностиЗаСчетРезервов(МассивОрганизацийКОтражению, НачалоПериода);
			СформироватьРезервыПриЗакрытииМесяца(МассивОрганизацийКОтражению, ПараметрыРасчета.КонецПериода);
			
			// Переоценим остатки резервов в упр. валюте
			Если ВалютаУпрНеРавнаВалютеРегл Тогда
				Документы.РасчетКурсовыхРазниц.ПереоценитьРезервыПоСомнительнымДолгам(
					МассивОрганизацийКОтражению, ПараметрыРасчета.КонецПериода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Описание проверок этапа закрытия месяца.
//
// Параметры:
//	ТаблицаПроверок - ТаблицаЗначений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации().
//
Процедура ОписаниеПроверок_ФормированиеРезервовПоСомнительнымДолгам(ТаблицаПроверок) Экспорт
	
	// Проверка документов, которые необходимо создать.
	
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаНеобходимостиФормированияРезервовПоСомнительнымДолгам",
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ПроверкаНеобходимостиФормированияРезервовПоСомнительнымДолгам");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не отражена операция формирования резервов по сомнительным долгам'"),
		НСтр("ru='В каждом месяце должен быть создан документ ""Начисление и списание резервов по сомнительным долгам"".'"));
	
	// Проверка документов, которые необходимо скорректировать вручную.
	
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаИзмененияДебиторскойЗадолженностиРезервовПоСомнительнымДолгам",
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ПроверкаИзмененияДебиторскойЗадолженностиРезервовПоСомнительнымДолгам");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Изменилась дебиторская задолженность резервов по сомнительным долгам'"),
		НСтр("ru='Дебиторская задолженность по оперативным регистрам учета должна совпадать с документом ""Начисление и списание резервов по сомнительным долгам"".'"));
	
КонецПроцедуры

// Этап требуется, если в текущем месяце отсутствует документ формирования резервов по сомнительным долгам.
//
// Параметры:
//  ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки()
//
Процедура ПроверкаНеобходимостиФормированияРезервовПоСомнительнымДолгам(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"вт_ОрганизацииКОтражению",
		НСтр("ru='Не создан документ ""Начисление и списание резервов по сомнительным долгам"" по организации ""%1"" за период %2'"),
		СписокПолей);
	
	КоличествоДанных = РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(
		ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц,
		"вт_ОрганизацииКОтражению");
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДополнительныеПараметры) Тогда
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыПроверки.ДополнительныеПараметры,
			КоличествоДанных);
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

// Этап требуется, если дебиторская задолженность сохраненная в документе отличается от остатков дебиторской задолженности в учете.
// 
// Параметры:
//  ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки()
//
Процедура ПроверкаИзмененияДебиторскойЗадолженностиРезервовПоСомнительнымДолгам(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Документ", НСтр("ru = 'Документ ""Начисление и списание резервов по сомнительным долгам""'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"вт_ОрганизацииКПроверке",
		НСтр("ru = 'Для документа ""Начисление и списание резервов по сомнительным долгам"" по организации ""%1"" за период %2 есть изменения в дебиторской задолженности
		|Необходимо зайти в документ ""Начисление и списание резервов по сомнительным долгам"" и вручную поправить строки (поправить сумму резерва, оценку, удалить строку, ...), отмеченные флагом ""Нужна проверка"".
		|После исправления необходимо снять флаг ""Нужна проверка"" у данных строк.'"),
		СписокПолей,
		"Документ");
	
	КоличествоДанных = РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(
		ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц,
		"вт_ОрганизацииКПроверке");
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДополнительныеПараметры) Тогда
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыПроверки.ДополнительныеПараметры,
			КоличествоДанных);
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаданияКЗакрытиюМесяца

// Выбирает задания к закрытию месяца.
// Если по учетной политике резервы не формируются, то задания не регистрируются.
// 
// Параметры:
// 	Запрос - Запрос - запрос, содержащий временную таблицу изменений расчетов с колонками:
// 	* Период
// 	* Организация
// 	ИмяТаблицыИзменений - Строка - имя временной таблицы изменений расчетов.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка заданий к закрытию месяца:
//  * Месяц - Дата - период задания
//  * Организация - СправочникСсылка.Организации - организация, по которой сформируется задание
//  * Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - всегда ФормированиеРезервовПоСомнительнымДолгам
//  * Документ - Неопределено
//
Функция ВыборкаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(Запрос, ИмяТаблицыИзменений) Экспорт
	
	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики" + ИмяТаблицыИзменений;
	
	Запрос.Текст =
		ТекстЗапросаДействующихУчетныхПолитик(ИмяТаблицыИзменений, ИмяТаблицыДействующиеУчетныеПолитики) +
		ОбщегоНазначения.РазделительПакетаЗапросов() +
		ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики) +
		ОбщегоНазначения.РазделительПакетаЗапросов() +
		"УНИЧТОЖИТЬ " + ИмяТаблицыДействующиеУчетныеПолитики + "; ";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Текст запроса заданий к закрытию месяца резервов по сомнительным долгам.
// 
// Параметры:
// 	ИмяТаблицыДействующиеУчетныеПолитики - Строка - имя временной таблицы действующих учетных политик.
//   (См. ТекстЗапросаДействующихУчетныхПолитик).
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики) Экспорт
	
	// Порядок полей в запросе важен, т.к. используется в объединении с другими запросами.
	// В частности из процедуры модуля набора записей регистра накопления
	// (См. РегистрНакопления.ВыручкаИСебестоимостьПродаж) ПриЗаписи.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(вт_ДействующиеУчетныеПолитики.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам) КАК Операция,
	|	вт_ДействующиеУчетныеПолитики.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ИЗ
	|	#ДействующиеУчетныеПолитики КАК вт_ДействующиеУчетныеПолитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК УчетныеПолитикиОрганизаций
	|		ПО вт_ДействующиеУчетныеПолитики.УчетнаяПолитика = УчетныеПолитикиОрганизаций.Ссылка
	|ГДЕ
	|	(УчетныеПолитикиОрганизаций.ФормироватьРезервыПоСомнительнымДолгамБУ
	|			ИЛИ УчетныеПолитикиОрганизаций.ФормироватьРезервыПоСомнительнымДолгамНУ)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДействующиеУчетныеПолитики", ИмяТаблицыДействующиеУчетныеПолитики);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса действующих учетных политики резервов по сомнительным долгам.
//
// Параметры:
// 	ИмяТаблицыИзменений - Строка - имя временной таблицы изменений расчетов.
// 	ИмяПодготовленнойТаблицы - Строка - имя временной таблицы, в которую необходимо поместить действующие учетные политики.
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаДействующихУчетныхПолитик(ИмяТаблицыИзменений, ИмяПодготовленнойТаблицы) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	вт_ТаблицаИзменений.Период КАК Период,
	|	вт_ТаблицаИзменений.Организация КАК Организация,
	|	МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК ПериодУчетнойПолитики
	|ПОМЕСТИТЬ вт_ПериодыУчетнойПолитики
	|ИЗ
	|	#ТаблицаИзменений КАК вт_ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|		ПО вт_ТаблицаИзменений.Организация = УчетнаяПолитикаОрганизаций.Организация
	|			И вт_ТаблицаИзменений.Период >= УчетнаяПолитикаОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ТаблицаИзменений.Период,
	|	вт_ТаблицаИзменений.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетнаяПолитикаОрганизаций.УчетнаяПолитика КАК УчетнаяПолитика,
	|	вт_ПериодыУчетнойПолитики.Период КАК Период,
	|	вт_ПериодыУчетнойПолитики.Организация КАК Организация
	|ПОМЕСТИТЬ #ИмяПодготовленнойТаблицы
	|ИЗ
	|	вт_ПериодыУчетнойПолитики КАК вт_ПериодыУчетнойПолитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|		ПО вт_ПериодыУчетнойПолитики.Организация = УчетнаяПолитикаОрганизаций.Организация
	|			И вт_ПериодыУчетнойПолитики.ПериодУчетнойПолитики = УчетнаяПолитикаОрганизаций.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ПериодыУчетнойПолитики";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменений", ИмяТаблицыИзменений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяПодготовленнойТаблицы", ИмяПодготовленнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Создает временную таблицу регистрации заданий к закрытию месяца следующей структуры:
//  * Месяц - Дата - период задания
//  * Организация - СправочникСсылка.Организации - организация, по которой сформируется задание
//  * Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - всегда ФормированиеРезервовПоСомнительнымДолгам
//  * Документ - Неопределено
// 
// Если по учетной политике резервы не формируются, то задания не регистрируются.
// 
// Параметры:
// 	Запрос - Запрос - запрос, содержащий временную таблицу изменений расчетов с колонками:
// 	* Период
// 	* Организация
// 	ИмяТаблицыИзменений - Строка - имя временной таблицы изменений расчетов.
//
Процедура СформироватьЗаданияКЗакрытиюМесяцаПриИзмененииРасчетов(Запрос, ИмяТаблицыИзменений) Экспорт
	
	ИмяТаблицыЗаданий = "РезервыПоСомнительнымДолгамЗаданияКЗакрытиюМесяца";
	ИмяВспомогательнойТаблицыЗаданий = "_" + ИмяТаблицыЗаданий;
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	ТекстыЗапросовПакетЗаданий = Новый Массив;
	
	#Область ТекстЗапросаВспомогательнойТаблицыЗаданий
	
	// Если таблица заданий была создана ранее, то копируем её во вспомогательную таблицу заданий.
	// Ниже в запросе объединим эту вспомогательную таблицу с новой порцией заданий.
	
	Если Не Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицыЗаданий) = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Месяц КАК Месяц,
		|	Т.Операция КАК Операция,
		|	Т.Организация КАК Организация,
		|	Т.Документ КАК Документ
		|ПОМЕСТИТЬ #ИмяВспомогательнойТаблицыЗаданий
		|ИЗ
		|	#ИмяТаблицыЗаданий КАК Т
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ИмяТаблицыЗаданий";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Месяц,
		|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПустаяСсылка) КАК Операция,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Документ
		|ПОМЕСТИТЬ #ИмяВспомогательнойТаблицыЗаданий";
	КонецЕсли;
	
	ТекстыЗапросовПакетЗаданий.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ТекстЗапросаДействующиеУчетныеПолитики
	
	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики" + ИмяТаблицыИзменений;
	ТекстЗапроса = ТекстЗапросаДействующихУчетныхПолитик(ИмяТаблицыИзменений, ИмяТаблицыДействующиеУчетныеПолитики);
	
	ТекстыЗапросовПакетЗаданий.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ТекстЗапросаОбъединениеЗаданий
	
	ТекстыЗапросовОбъединениеЗаданий = Новый Массив;
	
	// Эта часть запроса либо пустая таблица, либо таблица сформированных ранее заданий.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Месяц КАК Месяц,
	|	Т.Операция КАК Операция,
	|	Т.Организация КАК Организация,
	|	Т.Документ КАК Документ
	|ПОМЕСТИТЬ #ИмяТаблицыЗаданий
	|ИЗ
	|	#ИмяВспомогательнойТаблицыЗаданий КАК Т";
	
	ТекстыЗапросовОбъединениеЗаданий.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики);
	ТекстыЗапросовОбъединениеЗаданий.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовОбъединениеЗаданий, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	ТекстыЗапросовПакетЗаданий.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ТекстЗапросаЧисткаМусора
	
	ТекстЗапроса = "УНИЧТОЖИТЬ " + ИмяТаблицыДействующиеУчетныеПолитики;
	ТекстыЗапросовПакетЗаданий.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "УНИЧТОЖИТЬ " + ИмяВспомогательнойТаблицыЗаданий;
	ТекстыЗапросовПакетЗаданий.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакетЗаданий, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыЗаданий", ИмяТаблицыЗаданий);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВспомогательнойТаблицыЗаданий", ИмяВспомогательнойТаблицыЗаданий);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

// Преобразует переданную таблицу изменений (обязательные колонки Период, АналитикаУчетаПоПартнерам) в новую
// (Период, Организация). Организация берется из аналитики учета по партнерам.
// Результат сохраняет в новую временную таблицу переданного запроса.
// 
// Возвращаемое значение:
//   Строка - имя новой подготовленной таблицы
//
Функция ПодготовитьТаблицуИзмененийПоАналитикеУчетаПоПартнерам(Запрос, ИмяТаблицыИзменений) Экспорт
	
	ИмяПодготовленнойТаблицыИзменений = "_" + ИмяТаблицыИзменений;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Период,
	|	ТаблицаИзменений.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|ПОМЕСТИТЬ #ПодготовленнаяТаблицаИзменений
	|ИЗ
	|	#ТаблицаИзменений КАК ТаблицаИзменений";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаИзменений", ИмяТаблицыИзменений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПодготовленнаяТаблицаИзменений", ИмяПодготовленнойТаблицыИзменений);
	Запрос.Выполнить();
	
	Возврат ИмяПодготовленнойТаблицыИзменений;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

#Область ФормированиеДвижений

// Процедура формирования движений по регистру "Резервы по сомнительным долгам".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьРезервыПоСомнительнымДолгам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРезервыПоСомнительнымДолгам = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРезервыПоСомнительнымДолгам;
	
	Если Отказ Или ТаблицаРезервыПоСомнительнымДолгам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРезервы = Движения.РезервыПоСомнительнымДолгам;
	ДвиженияРезервы.Записывать = Истина;
	ДвиженияРезервы.Загрузить(ТаблицаРезервыПоСомнительнымДолгам);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчет резервов по сомнительным долгам".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьРасчетРезервовПоСомнительнымДолгам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчетРезервовПоСомнительнымДолгам = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетРезервовПоСомнительнымДолгам;
	
	Если Отказ Или ТаблицаРасчетРезервовПоСомнительнымДолгам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРезервы = Движения.РасчетРезервовПоСомнительнымДолгам;
	ДвиженияРезервы.Записывать = Истина;
	ДвиженияРезервы.Загрузить(ТаблицаРасчетРезервовПоСомнительнымДолгам);
	
КонецПроцедуры

#КонецОбласти

// Проверяет совпадение указанного периода и периодичности формирования резервов.
//
// Параметры:
//	Периодичность - ПеречислениеСсылка.Периодичность - периодичность резервов
//	Период - Дата - период для формирования документа по данной операции
//
// Возвращаемое значение:
//	 Булево - признак необходимости формирования документа
//
Функция ТребуетсяФормированиеРезервовВУказанномПериоде(Периодичность, Период) Экспорт
	
	Результат = Ложь;
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Результат = Истина;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Результат = (Месяц(Период) % 3 = 0);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Результат = (Месяц(Период) = 12);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИнтервалыОценкиЗадолженностиПоУмолчанию() Экспорт
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("НаименованиеИнтервала");
	ТаблицаИнтервалов.Колонки.Добавить("НижняяГраницаИнтервала");
	ТаблицаИнтервалов.Колонки.Добавить("ВерхняяГраницаИнтервала");
	ТаблицаИнтервалов.Колонки.Добавить("Оценка");
	
	ИнтервалыОценки = Новый Массив;
	ИнтервалыОценки.Добавить(Новый Структура("Нижняя,Верхняя,Оценка", 1, 44, 0));
	ИнтервалыОценки.Добавить(Новый Структура("Нижняя,Верхняя,Оценка", 45, 90, 50));
	ИнтервалыОценки.Добавить(Новый Структура("Нижняя,Верхняя,Оценка", 91, 9999999999, 100));
	
	Наименования = Новый Массив;
	Наименования.Добавить("От 1 до 44 дней");
	Наименования.Добавить("От 45 до 90 дней");
	Наименования.Добавить("Свыше 91 дней");
	
	КолвоИнтервалов = ИнтервалыОценки.Количество();
	Для Индекс = 0 По КолвоИнтервалов - 1 Цикл
		Интервал = ИнтервалыОценки[Индекс];
		
		НоваяСтрока = ТаблицаИнтервалов.Добавить();
		НоваяСтрока.НаименованиеИнтервала = Наименования[Индекс];
		НоваяСтрока.НижняяГраницаИнтервала = Интервал.Нижняя;
		НоваяСтрока.ВерхняяГраницаИнтервала = Интервал.Верхняя;
		НоваяСтрока.Оценка = Интервал.Оценка;
	КонецЦикла;
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ
Функция ТекстЗапросаСостояниеФормированияРезервовПоСомнительнымДолгам()
	
	ТекстыЗапроса = Новый Массив;
	
	#Область ОрганизацииСРезервами
	
	// Организации, по которым возможно начисление резервов по сомнительным долгам согласно учетной политике.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ вт_ОрганизацииСРезервами
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|		&НачалоПериода,
	|		Организация В (&МассивОрганизаций)
	|	) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК УчетныеПолитикиОрганизаций
	|		ПО Т.УчетнаяПолитика = УчетныеПолитикиОрганизаций.Ссылка
	|		И (УчетныеПолитикиОрганизаций.ФормироватьРезервыПоСомнительнымДолгамБУ
	|			ИЛИ УчетныеПолитикиОрганизаций.ФормироватьРезервыПоСомнительнымДолгамНУ)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ОрганизацииСОстатками
	
	// Организации, по которым есть остатки по контролируемым регистрам.
	// Если остатков нет, то в этом периоде резервы формировать не нужно.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ вт_АналитикаУчета
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ОрганизацииСРезервами КАК Организации
	|		ПО АналитикаУчетаПоПартнерам.Организация = Организации.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|ПОМЕСТИТЬ вт_ОрганизацииСОстатками
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|ГДЕ
	|	НЕ &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|ГДЕ
	|	НЕ &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РезервыПоСомнительнымДолгам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_АналитикаУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ОрганизацииКПроверке
	
	// Организации, в расчете резервов которых есть ручные корректировки и условия задолженности изменились.
	// По таким организациям необходима ручная проверка пользователем.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Резервы.Ссылка КАК Документ
	|ПОМЕСТИТЬ вт_ОрганизацииКПроверке
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Резервы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.ДебиторскаяЗадолженность КАК Задолженность
	|		ПО Резервы.Ссылка = Задолженность.Ссылка
	|			И (Задолженность.НужнаПроверка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ОрганизацииСРезервами КАК Организации
	|		ПО Резервы.Организация = Организации.Ссылка
	|			И (Резервы.Дата = &КонецПериода)
	|			И (Резервы.Проведен)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ОрганизацииОтраженные
	
	ТекстыОбъединение = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Резервы.Организация КАК Организация
	|ПОМЕСТИТЬ вт_ОрганизацииОтраженные
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Резервы
	|ГДЕ
	|	Резервы.Организация В (&МассивОрганизаций)
	|	И Резервы.Дата = &КонецПериода
	|	И Резервы.Проведен";
	
	ТекстыОбъединение.Добавить(ТекстЗапроса);
	НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ТекстЗапросаРезервыСтарые(ТекстыОбъединение);
	
	ТекстыЗапроса.Добавить(СтрСоединить(ТекстыОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина)));
	
	#КонецОбласти
	
	#Область ОрганизацииКОтражению
	
	// Организации, по которым ещё не сформированы документы расчета резервов, но должны.
	// По таким документам выдается отдельное предупреждение.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Организация КАК Организация
	|ПОМЕСТИТЬ вт_ОрганизацииКОтражению
	|ИЗ
	|	вт_ОрганизацииСОстатками КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ОрганизацииОтраженные КАК ОрганизацииОтраженные
	|		ПО Организации.Организация = ОрганизацииОтраженные.Организация
	|ГДЕ
	|	ОрганизацииОтраженные.Организация ЕСТЬ NULL";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТ

Процедура ОбновитьДвиженияСписанияЗадолженностиЗаСчетРезервов(Организации, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеЗадолженности.Дата КАК Период,
	|	СписаниеЗадолженности.Ссылка КАК Документ,
	|	СписаниеЗадолженности.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(СписаниеЗадолженности.Дата, ДЕНЬ) КАК ДатаОтражения
	|ИЗ
	|	Документ.СписаниеЗадолженности КАК СписаниеЗадолженности
	|ГДЕ
	|	СписаниеЗадолженности.Организация В (&Организации)
	|	И СписаниеЗадолженности.Дата Между &НачалоПериода И &КонецПериода
	|	И СписаниеЗадолженности.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|	И СписаниеЗадолженности.Проведен";
	
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	
	ДокументКОтражению = Запрос.Выполнить().Выгрузить();
	Регистраторы = ДокументКОтражению.ВыгрузитьКолонку("Документ");
	
	СоставОбновления = Новый Структура;
	СоставОбновления.Вставить("ПрочиеРасходы", РегистрыНакопления.ПрочиеРасходы);
	СоставОбновления.Вставить("ДвиженияКонтрагентДоходыРасходы", РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы);
	СоставОбновления.Вставить("ДвиженияКонтрагентКонтрагент", РегистрыНакопления.ДвиженияКонтрагентКонтрагент);
	СоставОбновления.Вставить("РезервыПоСомнительнымДолгам", РегистрыНакопления.РезервыПоСомнительнымДолгам);
	
	Для Каждого Ссылка Из Регистраторы Цикл
		ОбновитьДвиженияДокумента(Ссылка, СоставОбновления);
	КонецЦикла;
	
	РеглУчетПроведениеСервер.ВернутьДокументыКОтражению(ДокументКОтражению);
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс") Тогда
		Обработки.ДвиженияАктивовПассивов.ОтразитьДокументыВУправленческомБалансе(Регистраторы);
	КонецЕсли; // Необходимо формировать упр. баланс
	
КонецПроцедуры

Процедура ОбновитьДвиженияДокумента(Ссылка, СоставОбновления)
	
	Перем Таблица;
	
	ДопСвойства = Новый Структура("ЭтоНовый, РежимЗаписи", Ложь, РежимЗаписиДокумента.Проведение);
	
	НачатьТранзакцию();
	Попытка
		ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДопСвойства, РежимПроведенияДокумента.Неоперативный);
		Документы[ДопСвойства.ДляПроведения.МетаданныеДокумента.Имя].ИнициализироватьДанныеДокумента(Ссылка, ДопСвойства, СоставОбновления);
		Таблицы = ДопСвойства.ТаблицыДляДвижений;
		
		ДопСвойства.Вставить("ДатаРегистратора", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Дата"));
		ДопСвойства.Вставить("ПартионныйУчетВключен",
			РасчетСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(ДопСвойства.ДатаРегистратора)));
		
		Для Каждого ОписаниеОбновления Из СоставОбновления Цикл
			Если Таблицы.Свойство("Таблица" + ОписаниеОбновления.Ключ, Таблица) Тогда
				ЗаписатьДвиженияВБазу(ОписаниеОбновления.Значение, Таблица, Ссылка, ДопСвойства);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураОбъект = Новый Структура;
		СтруктураОбъект.Вставить("Ссылка", Ссылка);
		СтруктураОбъект.Вставить("ДополнительныеСвойства", ДопСвойства);
		ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(СтруктураОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось записать движения %Обновление% по причине %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обновление%", ОписаниеОбновления.Ключ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(
			НСтр("ru= 'Частичное обновление движений документа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ЗаписатьДвиженияВБазу(МенеджерДвижений, Таблица, Ссылка, ДопСвойства)
	
	Набор = МенеджерДвижений.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Ссылка);
	
	Набор.ДополнительныеСвойства.Вставить("ЭтоНовый", ДопСвойства.ЭтоНовый);
	Набор.ДополнительныеСвойства.Вставить("РежимЗаписи", ДопСвойства.РежимЗаписи);
	Набор.ДополнительныеСвойства.Вставить("ДатаРегистратора", ДопСвойства.ДатаРегистратора);
	Набор.ДополнительныеСвойства.Вставить("ДляПроведения", 
		Новый Структура("СтруктураВременныеТаблицы, ПартионныйУчетВключен",
			// Структура для передачи данных в модули наборов записей.
			ДопСвойства.ДляПроведения.СтруктураВременныеТаблицы,
			ДопСвойства.ПартионныйУчетВключен));
	
	Если Таблица.Количество() > 0 Тогда
		Набор.Загрузить(Таблица);
		Набор.УстановитьАктивность(Истина);
		Набор.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Создает или перезаполняет документы Начисление и списание резервов по сомнительным долгам по переданным
// организациям за указанный период. Если согласно учетной политики резервы не формируются, то документ
// либо не создается, либо отменяется проведение.
// 
// Параметры:
// 	Организации - Массив - массив организаций для формирования документов
// 	Период - Дата - период формирования документов
//
Процедура СформироватьРезервыПриЗакрытииМесяца(Организации, Период)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	РегистрыСведений.УчетнаяПолитикаОрганизаций.СформироватьВТУчетныеПолитикиОрганизаций(Запрос, Организации, Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТУчетныеПолитикиОрганизаций.Организация,
	|	ВТУчетныеПолитикиОрганизаций.УчетнаяПолитикаСуществует,
	|	ВТУчетныеПолитикиОрганизаций.ФормироватьРезервыПоСомнительнымДолгамБУ КАК ФормироватьБУ,
	|	ВТУчетныеПолитикиОрганизаций.ФормироватьРезервыПоСомнительнымДолгамНУ КАК ФормироватьНУ,
	|	ВТУчетныеПолитикиОрганизаций.ПериодичностьРезервовПоСомнительнымДолгамБУ КАК ПериодичностьБУ,
	|	ВТУчетныеПолитикиОрганизаций.ПериодичностьРезервовПоСомнительнымДолгамНУ КАК ПериодичностьНУ,
	|	Документы.Ссылка КАК Документ,
	|	ЕСТЬNULL(Документы.Проведен, ЛОЖЬ) КАК ДокументПроведен,
	|	ВЫБОР
	|		КОГДА Документы.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДокументСуществует
	|ИЗ
	|	ВТУчетныеПолитикиОрганизаций КАК ВТУчетныеПолитикиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Документы
	|		ПО ВТУчетныеПолитикиОрганизаций.Организация = Документы.Организация
	|			И НЕ Документы.ПометкаУдаления
	|			И Документы.Дата = &КонецМесяца";
	
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДокументСуществует Тогда
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
			
			Если Выборка.ДокументПроведен И Не Выборка.ФормироватьБУ И Не Выборка.ФормироватьНУ Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Продолжить;
			КонецЕсли;
		ИначеЕсли Не Выборка.ФормироватьБУ И Не Выборка.ФормироватьНУ Тогда
			 Продолжить;
		Иначе
			ДокументОбъект = Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.СоздатьДокумент();
			ДокументОбъект.Дата = КонецМесяца(Период);
			ДокументОбъект.Организация = Выборка.Организация;
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Выборка.ФормироватьБУ И
				ТребуетсяФормированиеРезервовВУказанномПериоде(Выборка.ПериодичностьБУ, Период);
			ДокументОбъект.ОтражатьВНалоговомУчете = Выборка.ФормироватьНУ И
				ТребуетсяФормированиеРезервовВУказанномПериоде(Выборка.ПериодичностьНУ, Период);
			ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ДокументОбъект.Организация);
		ПараметрыЗаполнения.Вставить("Дата", ДокументОбъект.Дата);
		ПараметрыЗаполнения.Вставить("ПустойДокумент", ДокументОбъект.ДебиторскаяЗадолженность.Количество() = 0);
		
		Результат = Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПолучитьДанныеДляЗаполненияДебиторскойЗадолженности(ПараметрыЗаполнения);
		
		ДокументОбъект.ЗаполнитьДокумент(Результат.Выгрузить());
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
