
#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения) Экспорт

	//++ Локализация
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	//++ НЕ УТ
	Если ТипОснования = Тип("СправочникСсылка.ДоговорыЛизинга") Тогда
		
		ЗаполнитьПоДоговоруЛизинга(Объект, ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивВедомостей") Тогда
		
		ЗаполнитьПоВедомостям(Объект, ДанныеЗаполнения);
		
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

Процедура ЗаполнитьПоДоговоруЛизинга(Объект, Знач ДокументОснование, ДанныеЗаполнения)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Ссылка КАК Договор,
	|
	|	ЛОЖЬ КАК ФормаОплатыНаличная,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			И ДанныеДокумента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			И ДанныеДокумента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ФормаОплатыЗаявки,
	|
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК Валюта,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаЛизингодателю) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование,
	|	&Ссылка КАК ДоговорЛизинга,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС
	|	
	|ИЗ
	|	Справочник.ДоговорыЛизинга КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	ДанныеЗаполнения.Вставить("ЖелательнаяДатаПлатежа");
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплатыЗаявки) Тогда
		ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
		ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент,
			ДанныеЗаполнения.Валюта);
	Иначе
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент);
	КонецЕсли;

	РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
		Объект.БанковскийСчетКонтрагента);
		
	Объект.НазначениеПлатежа = РеквизитыСчета.ТекстНазначения;
	
	ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа.Добавить(), Выборка);
	
	СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоВедомостям(Объект, ДанныеЗаполнения)
	
	ДанныеЗаполнения.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ХозяйственнаяОперация = Неопределено;
	ДанныеЗаполнения.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Если Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивВедомостей", ДанныеЗаполнения.МассивВедомостей);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	Если ДанныеЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
		СтруктураПараметров.Вставить("Организация", ДанныеЗаполнения.Организация);
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПодготовитьДанныеОСостоянииВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	ДанныеВедомостей = ДенежныеСредстваСервер.ДанныеВедомостей(СтруктураПараметров, МенеджерВременныхТаблиц);
	РеквизитыШапки = ДанныеВедомостей.РеквизитыШапки;
	
	Если РеквизитыШапки = Неопределено Тогда
		Текст = НСтр("ru='Команда не может быть выполнена для указанного объекта'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ДанныеВедомостей.МассивОшибок.Количество() > 0 Тогда
		Текст = ДанныеВедомостей.МассивОшибок[0].Текст;
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ДанныеЗаполнения.Вставить("НДФЛПоВедомостям", Истина);
		ДанныеЗаполнения.Вставить("ТипНалога", Перечисления.ТипыНалогов.НДФЛ);
		ДанныеЗаполнения.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.НДФЛ);
		ДанныеЗаполнения.Вставить("Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		Если ДанныеЗаполнения.Свойство("РегистрацияВНалоговомОргане") Тогда
			ДанныеЗаполнения.Вставить("Субконто2", ДанныеЗаполнения.РегистрацияВНалоговомОргане);
		КонецЕсли;
	Иначе
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперацияПоЗарплате", РеквизитыШапки.ХозяйственнаяОперация);
		Если РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком Тогда
			ДанныеЗаполнения.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу;
		КонецЕсли;
	КонецЕсли;
	
	Если Не (ДанныеЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполнения.Организация)) Тогда
		ДанныеЗаполнения.Вставить("Организация", РеквизитыШапки.Организация);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ФормаОплатыЗаявки",      РеквизитыШапки.ФормаОплаты);
	ДанныеЗаполнения.Вставить("ФормаОплатыБезналичная", РеквизитыШапки.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная);
	ДанныеЗаполнения.Вставить("ФормаОплатыНаличная",    РеквизитыШапки.ФормаОплаты = Перечисления.ФормыОплаты.Наличная);
	
	Если ДанныеЗаполнения.ФормаОплатыБезналичная Тогда
		
		Если Не (ДанныеЗаполнения.Свойство("БанковскийСчет") И ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет)) Тогда
			
			БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
				ДанныеЗаполнения.Организация, ДанныеЗаполнения.Валюта);
			
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыШапки.ВидДохода) Тогда
			ДанныеЗаполнения.Вставить("КодВидаДохода", ДенежныеСредстваСервер.ПолучитьКодВидаДохода(РеквизитыШапки.ВидДохода));
		КонецЕсли;
		
	ИначеЕсли ДанныеЗаполнения.ФормаОплатыНаличная Тогда
		
		Если Не (ДанныеЗаполнения.Свойство("Касса") И ЗначениеЗаполнено(ДанныеЗаполнения.Касса)) Тогда
			
			Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
				ДанныеЗаполнения.Организация, ДанныеЗаполнения.Валюта);
			
			ДанныеЗаполнения.Вставить("Касса", Касса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
		РеквизитыШапки.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);
	
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
		|	СУММА(ДанныеВедомостей.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ДанныеВедомостей.Сумма) КАК Сумма,
		|	МАКСИМУМ(Заявки.Ссылка) КАК Заявка
		|ИЗ
		|	ВТСостояниеВыплатыПоВедомостям КАК ДанныеВедомостей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиВедомостей КАК Заявки
		|		ПО Заявки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
		|			И ДанныеВедомостей.Ведомость = Заявки.Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость";
		
	ИначеЕсли ДанныеЗаполнения.Свойство("РегистрацияВНалоговомОргане") Тогда
		
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", ДанныеЗаполнения.РегистрацияВНалоговомОргане);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
		|	СУММА(ВЫБОР
		|		КОГДА ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА ДанныеВедомостей.СуммаОплаты
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК СуммаОплаты,
		|	СУММА(ВЫБОР
		|		КОГДА ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА ДанныеВедомостей.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Сумма,
		|	МАКСИМУМ(Заявки.Ссылка) КАК Заявка
		|ИЗ
		|	ВТСостояниеНалоговПоВедомостям КАК ДанныеВедомостей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиВедомостей КАК Заявки
		|		ПО Заявки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
		|			И ДанныеВедомостей.РегистрацияВНалоговомОргане = Заявки.РегистрацияВНалоговомОргане
		|			И ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			И ДанныеВедомостей.Ведомость = Заявки.Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
		|	СУММА(ДанныеВедомостей.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ДанныеВедомостей.Сумма) КАК Сумма,
		|	МАКСИМУМ(Заявки.Ссылка) КАК Заявка
		|ИЗ
		|	ВТСостояниеНалоговПоВедомостям КАК ДанныеВедомостей
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиВедомостей КАК Заявки
		|		ПО Заявки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
		|			И ДанныеВедомостей.Ведомость = Заявки.Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Заявка) И Выборка.Заявка <> Объект.Ссылка Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 уже включена в заявку %2 и будет пропущена.'"), Выборка.Ведомость, Выборка.Заявка);
			ОбщегоНазначения.СообщитьПользователю(Текст);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.СуммаОплаты <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выплаты по ведомости %1 уже выполнялись.'"), Выборка.Ведомость);
			ОбщегоНазначения.СообщитьПользователю(Текст);
		КонецЕсли;
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", Объект.РасшифровкаПлатежа.Итог("Сумма"));
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти
