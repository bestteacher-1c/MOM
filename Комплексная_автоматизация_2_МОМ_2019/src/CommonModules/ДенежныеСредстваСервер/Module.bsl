
#Область ПрограммныйИнтерфейс

#Область УправлениеИнтерфейснымиЭлементами

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме.
//
Процедура УстановитьВидимостьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭлементовПоМассиву()

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме
//	ИмяТЧ - Строка - Имя табличной части, текущая строка которой выводится в виде отдельных реквизитов
//	ИмяЗаменыТЧ - Строка - Наименование подстроки замены наименования реквизитов табличной части.
//
Процедура УстановитьВидимостьЭлементовПоМассивуРасширенный(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов,
	Знач ИмяТЧ, Знач ИмяЗаменыТЧ) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(СтрЗаменить(ЭлементМассива, ИмяТЧ, ИмяЗаменыТЧ), ".", "");
		
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
			И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает доступность элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается доступность.
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть доступны на форме.
//
Процедура УстановитьДоступностьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ДоступностьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Доступность <> ДоступностьРеквизита Тогда
			Элементы[ИмяРеквизита].Доступность = ДоступностьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьДоступностьЭлементовПоМассиву()

// Процедура устанавливает видимость подбора по остаткам расчетов в форме.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Кнопка - КнопкаФормы - Кнопка формы для открытия подбора.
//
Процедура УстановитьВидимостьПодбораПоОстаткамРасчетов(ХозяйственнаяОперация, Кнопка) Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	
	Кнопка.Видимость = (МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено);
	
КонецПроцедуры // УстановитьВидимостьПодбораПоОстаткамРасчетов()

Функция ЗависимостиПолейФормы(НастройкиПолей) Экспорт
	
	ЗависимостиПолей = ИнициализироватьЗависимостиПолейФормы();
	
	Для каждого СтрокаНастройки Из НастройкиПолей Цикл
		
		Реквизиты = Новый Массив;
		ЗаполнитьРеквизитыПоОтбору(СтрокаНастройки.Условие, Реквизиты);
		
		Для каждого Реквизит Из Реквизиты Цикл
			ПозТочки = СтрНайти(Реквизит, ".");
			Если ПозТочки = 0 Тогда
				ИмяРеквизита = Реквизит;
			Иначе
				ИмяРеквизита = Сред(Реквизит, ПозТочки + 1);
			КонецЕсли;
			СтрокаТаблицы = ЗависимостиПолей.Найти(ИмяРеквизита, "ИмяРеквизита");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = ЗависимостиПолей.Добавить();
				СтрокаТаблицы.ИмяРеквизита = ИмяРеквизита;
			КонецЕсли;
			Для каждого Поле Из СтрокаНастройки.Поля Цикл
				СтрокаТаблицы.ЗависимыеПоля.Добавить(Поле);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗависимостиПолей;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПоОтбору(Отбор, Реквизиты)
	
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Реквизиты.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) = Неопределено Тогда
				Реквизиты.Добавить(Строка(ЭлементОтбора.ЛевоеЗначение));
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьРеквизитыПоОтбору(ЭлементОтбора, Реквизиты);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьПроверкуЗаполненияРеквизитовОбъекта(СвойстваЭлементов, МассивНепроверяемыхРеквизитов) Экспорт
	
	Для каждого СвойстваЭлемента Из СвойстваЭлементов Цикл
		Если ЗначениеЗаполнено(СвойстваЭлемента.ИмяЭлемента)
			И (СвойстваЭлемента.Свойство = "Видимость"
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотр"
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного"
				Или СвойстваЭлемента.Свойство = "ОтметкаНезаполненного"
				Или СвойстваЭлемента.Свойство = "АвтоОтметкаНезаполненного") Тогда
			
			Если (СвойстваЭлемента.Свойство = "Видимость"
				Или СвойстваЭлемента.Свойство = "ОтметкаНезаполненного"
				Или СвойстваЭлемента.Свойство = "АвтоОтметкаНезаполненного")
					И СвойстваЭлемента.Значение = Ложь
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного"
					И СвойстваЭлемента.Значение = Истина
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотр"
					И СвойстваЭлемента.Значение = Истина Тогда
					
				МассивНепроверяемыхРеквизитов.Добавить(СвойстваЭлемента.ИмяЭлемента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизитыОбъекта(Объект, СвойстваЭлементов, РеквизитыИсключения = Неопределено) Экспорт
	
	Реквизиты = Объект.Метаданные().Реквизиты;
	ТабличныеЧасти = Объект.Метаданные().ТабличныеЧасти;
	
	Для каждого СвойстваЭлемента Из СвойстваЭлементов Цикл
		
		Если РеквизитыИсключения <> Неопределено
			И РеквизитыИсключения.Найти(СвойстваЭлемента.ИмяЭлемента) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвойстваЭлемента.ИмяЭлемента)
			И СвойстваЭлемента.Свойство = "Видимость"
			И Не СвойстваЭлемента.Значение Тогда
		
			Если Реквизиты.Найти(СвойстваЭлемента.ИмяЭлемента) <> Неопределено
				И ЗначениеЗаполнено(Объект[СвойстваЭлемента.ИмяЭлемента]) Тогда
				
				Объект[СвойстваЭлемента.ИмяЭлемента] = Неопределено;
				
			ИначеЕсли ТабличныеЧасти.Найти(СвойстваЭлемента.ИмяЭлемента) <> Неопределено
				И Объект[СвойстваЭлемента.ИмяЭлемента].Количество() Тогда
				
				Объект[СвойстваЭлемента.ИмяЭлемента].Очистить();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьНастройкиПолейФормы() Экспорт
	
	НастройкиПолейФормы = Новый ТаблицаЗначений;
	НастройкиПолейФормы.Колонки.Добавить("Поля", Новый ОписаниеТипов("Массив"));
	НастройкиПолейФормы.Колонки.Добавить("Условие", Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
	НастройкиПолейФормы.Колонки.Добавить("Свойства", Новый ОписаниеТипов("Структура"));
	
	Возврат НастройкиПолейФормы;
	
КонецФункции

Функция ИнициализироватьЗависимостиПолейФормы()
	
	ЗависимостьПолейФормы = Новый ТаблицаЗначений;
	ЗависимостьПолейФормы.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ЗависимостьПолейФормы.Колонки.Добавить("ЗависимыеПоля", Новый ОписаниеТипов("Массив"));
	
	Возврат ЗависимостьПолейФормы;
	
КонецФункции

Процедура ИнициализироватьТабличнуюЧасть(Форма, ИмяТЧ, Переключатель) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		Элементы[ИмяТЧ].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Переключатель = 0;
	ИначеЕсли Объект[ИмяТЧ].Количество() = 1 Тогда
		Элементы[ИмяТЧ].ТекущаяСтрока = Объект[ИмяТЧ][0].ПолучитьИдентификатор();
		Переключатель = 0;
	Иначе
		Переключатель = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиЭлементовБанков(Настройки) Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	
	// Банк
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "РучноеИзменениеРеквизитовБанка", Ложь);
	Элемент.Свойства.Вставить("КнопкаВыбора");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "РучноеИзменениеРеквизитовБанкаДляРасчетов", Ложь);
	Элемент.Свойства.Вставить("КнопкаВыбора");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СВИФТБанка");
	Элемент.Поля.Добавить("КоррСчетБанка");
	Элемент.Поля.Добавить("НаименованиеБанка");
	Элемент.Поля.Добавить("СтранаБанка");
	Элемент.Поля.Добавить("ГородБанка");
	Элемент.Поля.Добавить("ГородБанкаМеждународный");
	Элемент.Поля.Добавить("АдресБанкаМеждународный");
	Финансы.НовыйОтбор(Элемент.Условие, "РучноеИзменениеРеквизитовБанка", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СВИФТБанкаДляРасчетов");
	Элемент.Поля.Добавить("КоррСчетБанкаДляРасчетов");
	Элемент.Поля.Добавить("НаименованиеБанкаДляРасчетов");
	Элемент.Поля.Добавить("СтранаБанкаДляРасчетов");
	Элемент.Поля.Добавить("ГородБанкаДляРасчетов");
	Элемент.Поля.Добавить("ГородБанкаДляРасчетовМеждународный");
	Элемент.Поля.Добавить("АдресБанкаДляРасчетовМеждународный");
	Финансы.НовыйОтбор(Элемент.Условие, "РучноеИзменениеРеквизитовБанкаДляРасчетов", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяБанкДляРасчетов", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	// НаименованиеБанкаМеждународное и НаименованиеБанкаДляРасчетовМеждународное пока не заполняются из классификатора
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НаименованиеБанкаДляРасчетовМеждународное");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяБанкДляРасчетов", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СчетВБанкеДляРасчетов");
	Элемент.Поля.Добавить("БИКБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяБанкДляРасчетов", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РучноеИзменениеРеквизитовБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяБанкДляРасчетов", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерСчета");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Маска", "!!!!!!!!!!!!!!!!!!!!");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерСчета");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Истина);
	Элемент.Свойства.Вставить("Маска", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'БИК'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Национальный код банка'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'БИК'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Национальный код банка'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РучноеИзменениеРеквизитовБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РучноеИзменениеРеквизитовБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КоррСчетБанка");
	Элемент.Поля.Добавить("КоррСчетБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СчетВБанкеДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтранаБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтранаБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НаименованиеБанка");
	Элемент.Поля.Добавить("ГородБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НаименованиеБанкаДляРасчетов");
	Элемент.Поля.Добавить("ГородБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НаименованиеБанкаМеждународное");
	Элемент.Поля.Добавить("ГородБанкаМеждународный");
	Элемент.Поля.Добавить("АдресБанкаМеждународный");
	Элемент.Поля.Добавить("НаименованиеБанкаДляРасчетовМеждународное");
	Элемент.Поля.Добавить("ГородБанкаДляРасчетовМеждународный");
	Элемент.Поля.Добавить("АдресБанкаДляРасчетовМеждународный");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

#Область ВидимостьОпераций

// Процедура устанавливает видимость выбора оплаты платежной картой в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора формы оплаты.
//
Процедура УстановитьВидимостьОплатыПлатежнойКартой(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПлатежнаяКарта);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению("ПлатежнаяКарта");
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции поступления из другой кассы
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПередачиМеждуКассами(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции перечисления на другой счет
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПеречисленияНаДругойСчет(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций с кассами ККМ в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийСКассамиККМ(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций оплаты ДС в другую организацию в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПередачиМеждуОрганизациями(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
		
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций внутренней передачи ДС в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийВнутреннейПередачи(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции оплаты таможенного платежа в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПеречислениеТаможне(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций оплаты ДС по договорам кредитов и депозитов.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаФинансовыхИнструментов);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
		
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииКонвертацияВалютыНаличные(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииКонвертацияВалютыБезналичные(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииКонвертацияВалюты(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций по зарплате в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПоЗарплате(Поле) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		
		МассивОперацийПоЗарплате = Новый Массив;
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
		
		Для Каждого Элемент Из МассивОперацийПоЗарплате Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Элемент);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций эквайринга в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийЭквайринга(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций выдачи и погашения займов сотрудникам в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийЗаймамСотрудникам(Поле) Экспорт
	
	ОперацииПоЗаймамНеДоступны = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	//++ НЕ УТ
	ОперацииПоЗаймамНеДоступны = Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаймыСотрудникам") И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	//-- НЕ УТ
	
	Если ОперацииПоЗаймамНеДоступны Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииОплатаЛизингодателю(Поле) Экспорт
	
	ИспользоватьЛизинг = Ложь;
	//++ НЕ УТ
	ИспользоватьЛизинг = ПолучитьФункциональнуюОпцию("ИспользоватьЛизинг");
	//-- НЕ УТ
	Если НЕ ИспользоватьЛизинг Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "ПрочееПоступлениеДенежныхСредств" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПрочееПоступлениеДенежныхСредств(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "ПрочаяВыдачаДенежныхСредств" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПрочаяВыдачаДенежныхСредств(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура устанавливает заголовок колонки "Сумма платежа".
//
// Параметры:
//    Валюта - СправочникСсылка.Валюты - Валюта документа
//    ЭлементыФормы - ВсеЭлементыФормы - Коллекция элементов управляемой формы
//    ЭлементыКИзменению - Массив - Имена элементов формы для изменения заголовка
//
Процедура УстановитьЗаголовокСуммыПлатежа(Валюта, Элементы, ЭлементыКИзменению = Неопределено) Экспорт
	
	Элементы.РасшифровкаПлатежаСумма.Заголовок = СтрШаблон(НСтр("ru = 'Сумма (%1)'"), Строка(Валюта));
	
	Если Элементы.Найти("РасшифровкаПлатежаСуммаНДС") <> Неопределено Тогда
		Элементы.РасшифровкаПлатежаСуммаНДС.Заголовок = СтрШаблон(НСтр("ru = 'Сумма НДС (%1)'"), Строка(Валюта));
	КонецЕсли;
	
	Если ЭлементыКИзменению <> Неопределено И ТипЗнч(ЭлементыКИзменению) = Тип("Массив") Тогда
		Для каждого ЭлементФормы Из ЭлементыКИзменению Цикл
			Элементы[ЭлементФормы].Заголовок = СтрШаблон(НСтр("ru = 'Сумма (%1)'"), Строка(Валюта));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Подмена префикса организации префиксом кассовой книги
//
// Параметры:
//    Источник - ДокументОбъект - ПКО, РКО, Кассовая книга
//    СтандартнаяОбработка - Булево - флаг стандартной обработки подписки
//    Префикс - Строка - префикс объекта, который нужно изменить.
//
Процедура УстановитьПрефиксИнформационнойБазыИКассовойКнигиНомеруДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс);
	
	РеквизитыПрефиксации = "";
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЛистКассовойКниги")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ИнвентаризацияНаличныхДенежныхСредств") Тогда
		РеквизитыПрефиксации = ПолучитьПрефиксациюКассыКассовойКниги(Источник.КассоваяКнига);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		РеквизитыПрефиксации = ПолучитьПрефиксациюКассыКассовойКниги(Источник.Касса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПрефиксации)
		И ЗначениеЗаполнено(РеквизитыПрефиксации.ИспользоватьПрефикс)
		И РеквизитыПрефиксации.ИспользоватьПрефикс Тогда
		
		ПрефиксКассовойКниги = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(РеквизитыПрефиксации.Префикс, 2, "0", "Слева");
		Префикс = ПрефиксКассовойКниги + Прав(Префикс, СтрДлина(Префикс) - 2);
	КонецЕсли;
	
КонецПроцедуры

// Сброс номера документа при необходимости его изменения
//
// Параметры:
//    Источник - ДокументОбъект - ПКО, РКО, Кассовая книга
//    Отказ - Булево - флаг отказа
//    РежимЗаписи - РежимЗаписиДокумента - Режим записи
//    РежимПроведения - РежимПроведенияДокумента - Режим проведения.
// 
Процедура ПроверитьНомерДокументаПоДатеОрганизацииКассовойКнигеПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	ИначеЕсли Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПрефиксацияОбъектовСобытия.ПроверитьНомерДокументаПоДатеИОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
	РеквизитыПрефиксацииДоИзменения = "";
	РеквизитыПрефиксацииПослеИзменения = "";
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЛистКассовойКниги")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ИнвентаризацияНаличныхДенежныхСредств") Тогда
		
		КассоваяКнигаСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "КассоваяКнига");
		РеквизитыПрефиксацииДоИзменения = ПолучитьПрефиксациюКассыКассовойКниги(КассоваяКнигаСсылка);
		
		РеквизитыПрефиксацииПослеИзменения = ПолучитьПрефиксациюКассыКассовойКниги(Источник.КассоваяКнига);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
		КассаСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Касса");
		РеквизитыПрефиксацииДоИзменения = ПолучитьПрефиксациюКассыКассовойКниги(КассаСсылка);
		
		РеквизитыПрефиксацииПослеИзменения = ПолучитьПрефиксациюКассыКассовойКниги(Источник.Касса);
	КонецЕсли;
	
	ПрефиксДоИзменения = ?(
		ЗначениеЗаполнено(РеквизитыПрефиксацииДоИзменения)
		И ЗначениеЗаполнено(РеквизитыПрефиксацииДоИзменения.ИспользоватьПрефикс)
		И РеквизитыПрефиксацииДоИзменения.ИспользоватьПрефикс,
		РеквизитыПрефиксацииДоИзменения.Префикс,
		"");
		
	ПрефиксПослеИзменения = ?(
		ЗначениеЗаполнено(РеквизитыПрефиксацииПослеИзменения)
		И ЗначениеЗаполнено(РеквизитыПрефиксацииПослеИзменения.ИспользоватьПрефикс)
		И РеквизитыПрефиксацииПослеИзменения.ИспользоватьПрефикс,
		РеквизитыПрефиксацииПослеИзменения.Префикс,
		"");
	
	Если ПрефиксДоИзменения <> ПрефиксПослеИзменения Тогда
		Источник.Номер = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокТиповДокумента(Объект, Элемент) Экспорт
	
	ТипыДокумента = Перечисления.ТипыПлатежныхДокументов;
	СписокВыбора = Элемент.СписокВыбора;
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ТипыДокумента.ПлатежноеПоручение);
	СписокВыбора.Добавить(ТипыДокумента.ИнкассовоеПоручение);
	СписокВыбора.Добавить(ТипыДокумента.ПлатежноеТребование);
	СписокВыбора.Добавить(ТипыДокумента.ПлатежныйОрдер);
	СписокВыбора.Добавить(ТипыДокумента.БанковскийОрдер);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
		И ПолучитьФункциональнуюОпцию("ИспользоватьВалютныеПлатежи") Тогда
		СписокВыбора.Добавить(ТипыДокумента.РаспоряжениеОбОбязательнойПродаже);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для кассы.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементКасса - ПолеФормы - Поле для ввода кассы.
//
Процедура УстановитьПараметрыВыбораКассы(Объект, ЭлементКасса) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.Касса)
		 ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
		 И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Иначе
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	КонецЕсли;
	
	ЭлементКасса.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораКассы()

// Процедура устанавливает параметры выбора для банковского счета.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчет - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчета(Объект, ЭлементБанковскийСчет) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет)
			ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
			И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Иначе
		ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Константы.ВалютаРегламентированногоУчета.Получить()));
	КонецЕсли;
	
	ЭлементБанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчета()

// Процедура устанавливает параметры выбора для банковского счета получателя.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчет - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элемент) Экспорт
	
	МассивСвязиПараметров = Новый Массив;
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаКонвертации"));
	Иначе
		Если Не Объект.Свойство("ПланированиеСуммы")
			Или Объект.Свойство("ПланированиеСуммы") И Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
		КонецЕсли;
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) Тогда
		
		Если Объект.Свойство("ОрганизацияПолучатель") И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ОрганизацияПолучатель"));
		Иначе
			СписокОрганизаций = Новый СписокЗначений;
			ПараметрыВыбораОрганизации = Новый Структура;
			ПараметрыВыбораОрганизации.Вставить("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные");
			ПараметрыВыбораОрганизации.Вставить("Организация", Объект.Организация);
			ПараметрыВыбораОрганизации.Вставить("СтрокаПоиска", Неопределено);
			СтандартнаяОбработка = Ложь;
			ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияДанныхВыбора(СписокОрганизаций, ПараметрыВыбораОрганизации, СтандартнаяОбработка);
			
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(СписокОрганизаций.ВыгрузитьЗначения())));
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация))));
	КонецЕсли;
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязиПараметров);
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаПолучателя()

// Процедура устанавливает параметры выбора для эквайрингового терминала.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЭквайринговыйТерминал - ПолеФормы - Поле для ввода эквайрингового терминала.
//
Процедура УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, ЭлементЭквайринговыйТерминал) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
			ИЛИ ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств)
			ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		Если НуженОтборПоОрганизации Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ДанныеСправочника.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчетаОрганизаций КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Владелец = &Организация
			|	И НЕ ДанныеСправочника.Закрыт
			|	И НЕ ДанныеСправочника.ПометкаУдаления
			|";
			
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			МассивБанковскихСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.БанковскийСчет", Новый ФиксированныйМассив(МассивБанковскихСчетов));
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(ПараметрВыбора);
			
			ЭлементЭквайринговыйТерминал.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для партнера.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементПартнер - ПолеФормы - Поле для ввода партнера.
//
Процедура УстановитьПараметрыВыбораПартнера(Объект, ЭлементПартнер) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
	Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		
	КонецЕсли;
	
	ЭлементПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораПартнера()

// Процедура устанавливает параметры выбора для банковского счета контрагента.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчетКонтрагента - ПолеФормы - Поле для ввода банковского счета контрагента.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элемент) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПодотчетноеЛицо"));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	КонецЕсли;
	
	МассивПараметровВыбора = Новый Массив;
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Закрыт", Ложь);
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для заявки на расходование денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЗаявка - ПолеФормы - Поле для ввода заявки на расходование денежных средств.
//
Процедура УстановитьПараметрыВыбораЗаявки(Объект, ЭлементЗаявка) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперацияПоЗарплате", "Объект.ХозяйственнаяОперация", РежимИзмененияСвязанногоЗначения.НеИзменять));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком
		Или  Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация", РежимИзмененияСвязанногоЗначения.НеИзменять));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
	КонецЕсли;
	
	ЭлементЗаявка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	ЭлементЗаявка.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораЗаявки()

// Процедура устанавливает параметры выбора для списания денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСписание - ПолеФормы - Поле для ввода списания денежных средств.
//
Процедура УстановитьПараметрыВыбораСписанияДенежныхСредств(Объект, ЭлементСписание) Экспорт
	
	МассивПараметров = Новый Массив;
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.БанковскийСчет", "Объект.БанковскийСчет"));
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.БанковскийСчет", "Объект.БанковскийСчет"));
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	Иначе
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаКонвертации", "Объект.Валюта"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ПодотчетноеЛицо", "Объект.ПодотчетноеЛицо"));
		
	КонецЕсли;
	
	ЭлементСписание.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	ЭлементСписание.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи движения денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСтатья - ПолеФормы - Поле для ввода статьи движения денежных средств.
//
Процедура УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, ЭлементСтатья) Экспорт
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		МассивПараметров.Добавить(
			Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперацияПоЗарплате",
				РежимИзмененияСвязанногоЗначения.НеИзменять));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
	КонецЕсли;
	ЭлементСтатья.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи расходов
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСтатья - ПолеФормы - Поле для ввода статьи расходов.
//
Процедура УстановитьПараметрыВыбораСтатьиРасходов(Объект, Элемент) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	
	Если (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"))
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	Иначе
		
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Функция возвращает параметры выбора для статьи движения денежных средств.
//
// Параметры:
//    Объект - ДанныеФормыСтруктура - Текущий объект
//    ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//    Параметры - ФиксированныйМассив - массив параметров выбора.
//
Функция ПолучитьПараметрыВыбораСтатьиДДС(Объект, ДополнительныеПараметры) Экспорт
	
	МассивПараметров = Новый Массив;
	
	ДоговорКредитаДепозита = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ДоговорКредитаДепозита", ДоговорКредитаДепозита);
	КонецЕсли;
	
	ОплатаПоКредитам = Новый Массив;
	ОплатаПоКредитам.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	ОплатаПоКредитам.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	ОплатаПоКредитам.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
	
	ПоступленияПоКредитамДепозитам = Новый Массив;
	ПоступленияПоКредитамДепозитам.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам);
	ПоступленияПоКредитамДепозитам.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам);
	ПоступленияПоКредитамДепозитам.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным);
	
	Если ОплатаПоКредитам.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		СтрокаРеквизитов = "ХарактерДоговора,СтатьяДДСОсновногоДолга,СтатьяДДСПроцентов,СтатьяДДСКомиссии,СтатьяДДСПоступленияВыдачи";
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКредитаДепозита, СтрокаРеквизитов);
		МассивСтатей = Новый Массив;
		Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм Тогда
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСОсновногоДолга);
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПроцентов);
			Если ЗначениеЗаполнено(Реквизиты.СтатьяДДСКомиссии) Тогда
				МассивСтатей.Добавить(Реквизиты.СтатьяДДСКомиссии);
			КонецЕсли;
		Иначе
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПоступленияВыдачи);
		КонецЕсли;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивСтатей));
		
	ИначеЕсли ПоступленияПоКредитамДепозитам.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		СтрокаРеквизитов = "ХарактерДоговора,СтатьяДДСОсновногоДолга,СтатьяДДСПроцентов,СтатьяДДСПоступленияВыдачи";
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКредитаДепозита, СтрокаРеквизитов);
		МассивСтатей = Новый Массив;
		Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм Тогда
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПоступленияВыдачи);
		Иначе
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСОсновногоДолга);
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПроцентов);
		КонецЕсли;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивСтатей)));
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

// Процедура устанавливает параметры выбора договора кредита(депозита, займа)
// и очищает договора кредита (депозита, займа) не соответствующие текущей хозяйственной операции, организации.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//  ЭлементРасшифровкаПлатежаДоговор - ПолеФормы - Поле для ввода договора кредита (депозита)
//  ОчиститьДоговора - Булево - Если истина тогда очищать в таб.части расшифровка платежа договора кредита (депозита) 
//								не соответствующие текущей хозяйственной операции.
//
Процедура УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, ЭлементРасшифровкаПлатежаДоговор, ОчиститьДоговора = Ложь) Экспорт
	
	ХарактерДоговора = Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация);
	Если ХарактерДоговора = Неопределено Тогда// это не кредитно\депозитная хоз.операция
		Возврат;
	КонецЕсли;
	
	// Определим параметры выбора
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора", ХарактерДоговора));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	// Определимся с отбором по организации
	Организация = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Если НЕ Объект.БанковскийСчет.Пустая() Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчет,"ВалютаДенежныхСредств,Владелец");
			Организация = Реквизиты.Владелец;
			Валюта = Реквизиты.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если НЕ Объект.Касса.Пустая() Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Касса,"ВалютаДенежныхСредств,Владелец");
			Организация = Реквизиты.Владелец;
			Валюта = Реквизиты.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Объект.Организация) Тогда
		Организация = Объект.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Организация));
	КонецЕсли;
	
	// Определимся с отбором по валюте
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДоговора.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
	|ГДЕ
	|	НЕ ДанныеДоговора.ПометкаУдаления
	|	И (ДанныеДоговора.Организация = &Организация ИЛИ &ЛюбаяОрганизация)
	|	И (ДанныеДоговора.Контрагент = &Контрагент ИЛИ &ЛюбойКонтрагент)
	|	И ДанныеДоговора.ХарактерДоговора = &ХарактерДоговора
	|	И ДанныеДоговора.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДанныеДоговора.ПорядокОплаты В (
	|		ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях),
	|		ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВВалюте))");
	Запрос.УстановитьПараметр("Организация"     , Организация);
	Запрос.УстановитьПараметр("ЛюбаяОрганизация", НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Контрагент"      , Объект.Контрагент);
	Запрос.УстановитьПараметр("ЛюбойКонтрагент" , НЕ ЗначениеЗаполнено(Объект.Контрагент));
	Запрос.УстановитьПараметр("ХарактерДоговора", ХарактерДоговора);
	
	ИмеютсяРасчетыВВалютеОплатаВРублях = Запрос.Выполнить().Выбрать().Следующий();
	Если НЕ ИмеютсяРасчетыВВалютеОплатаВРублях Тогда
		Если НЕ ЗначениеЗаполнено(Валюта) И ЗначениеЗаполнено(Объект.Валюта) Тогда
			Валюта = Объект.Валюта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Валюта) Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Валюта));
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора
	ЭлементРасшифровкаПлатежаДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Определим связей параметров выбора
	МассивСвязей = Новый Массив;
	ОчищатьДоговор = РежимИзмененияСвязанногоЗначения.Очищать;
	Если НЕ Объект.Организация.Пустая() Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", ОчищатьДоговор));
	КонецЕсли;
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент","Объект.Контрагент", ОчищатьДоговор));
		Партнеры = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("Партнер");
		Если Партнеры.Количество() > 0 И ЗначениеЗаполнено(Партнеры[0]) Тогда
			МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер","Элементы.РасшифровкаПлатежа.ТекущиеДанные.Партнер", ОчищатьДоговор));
		КонецЕсли;
	КонецЕсли;
	ЭлементРасшифровкаПлатежаДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);

	// Очистим договора не соответствующие текущей хозяйственной операции
	Если ОчиститьДоговора Тогда
		МассивДоговоров = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("ДоговорКредитаДепозита");
		РеквизитыДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДоговоров, "Организация,ХарактерДоговора");
		Если РеквизитыДоговоров.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКредитаДепозита) Тогда
					Продолжить;
				КонецЕсли;
				Если РеквизитыДоговоров[СтрокаТаблицы.ДоговорКредитаДепозита].Организация <> Организация
					ИЛИ РеквизитыДоговоров[СтрокаТаблицы.ДоговорКредитаДепозита].ХарактерДоговора <> ХарактерДоговора Тогда
					СтрокаТаблицы.ДоговорКредитаДепозита = Неопределено;
					СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;// есть что очищать
	КонецЕсли;// Необходимо очистить договора кредитов (депозитов)
	
КонецПроцедуры

// Процедура список выбора типов сумм текущей хозяйственной операции.
//
// Параметры:
//	Список - СписокЗначений - список выбора элемента формы
//  ХозОперация - Перечисления.ХозяйственныеОперации - текущая хозяйственная операция.
//
Процедура ЗаполнитьСписокТиповСуммКредитовДепозитов(Список, ХозОперация) Экспорт
	
	ТипыСумм = Перечисления.ТипыСуммГрафикаКредитовИДепозитов;
	Список.Очистить();
	Список.Добавить(ТипыСумм.ОсновнойДолг);
	Список.Добавить(ТипыСумм.Проценты);
	Если ХозОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		Список.Добавить(ТипыСумм.Комиссия);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список периодов возникновения расходов для платежей в бюджет
//
// Параметры:
//    Список - СписокЗначений - список выбора элемента формы
//    Дата - Дата - Дата, к которой относятся периоды.
//
Процедура ЗаполнитьСписокПериодовВозникновенияРасходов(Список, Знач Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Список.Очистить();
	Список.Добавить(НачалоДня(Дата), НСтр("ru = 'Текущий день'"));
	Список.Добавить(ДобавитьМесяц(НачалоМесяца(Дата), -1), НСтр("ru = 'Прошлый месяц'"));
	Список.Добавить(ДобавитьМесяц(НачалоКвартала(Дата), -1), НСтр("ru = 'Прошлый квартал'"));
	Список.Добавить(ДобавитьМесяц(НачалоГода(Дата), -1), НСтр("ru = 'Прошлый год'"));
	Список.Добавить(ДобавитьМесяц(НачалоМесяца(Дата), 1), НСтр("ru = 'Следующий месяц'"));
	Список.Добавить(ДобавитьМесяц(НачалоКвартала(Дата), 3), НСтр("ru = 'Следующий квартал'"));
	Список.Добавить(ДобавитьМесяц(НачалоГода(Дата), 12), НСтр("ru = 'Следующий год'"));
	
КонецПроцедуры

// Процедура заполняет организацию владельца объекта расчета в табличной части.
//
// Параметры:
//  Объект - ДокументОбъект - платежный документ/заявка или взаимозачет задолженности
//  ЭтоОрганизацияПоставщик - Булево - Это расчеты с собственной организацией-поставщиком,
//                                     в этом случае берем организацию-получатель из объекта расчетов
//  ИмяТаблицы - Строка - Имя табличной части как в метаданных
//                        В табличной части объект расчетов должен содержаться в поле "Заказ"
//                        Необходимо наличие поля "Организация".
//  Организация - СправочникСсылка.Организации - Организация по умолчанию, если не найдена в объекте расчетов
//
Процедура ЗаполнитьВладельцаОбъектаРасчета(Объект, ЭтоОрганизацияПоставщик = Ложь, ИмяТаблицы = "РасшифровкаПлатежа", Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоВзаимозачет = ТипЗнч(Объект) = Тип("ДокументОбъект.ВзаимозачетЗадолженности");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки-1 КАК ИндексСтроки,
	|	Таблица.Заказ КАК Заказ
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ИндексСтроки КАК ИндексСтроки,
	|	ЕСТЬNULL(Таблица.Заказ.ОрганизацияПолучатель, &Организация) КАК ОрганизацияПолучатель,
	|	ЕСТЬNULL(Таблица.Заказ.Организация, &Организация) КАК Организация
	|ИЗ
	|	вт КАК Таблица";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", Объект[ИмяТаблицы].Выгрузить());
	Запрос.УстановитьПараметр("Организация", ?(Организация = Неопределено, Объект.Организация, Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЭтоВзаимозачет Тогда
			Если ЭтоОрганизацияПоставщик
			 И Объект[ИмяТаблицы][Выборка.ИндексСтроки].ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
				Объект[ИмяТаблицы][Выборка.ИндексСтроки].Организация = Выборка.ОрганизацияПолучатель;
			Иначе
				Объект[ИмяТаблицы][Выборка.ИндексСтроки].Организация = Выборка.Организация;
			КонецЕсли;
		Иначе
			Объект[ИмяТаблицы][Выборка.ИндексСтроки].Организация = ?(ЭтоОрганизацияПоставщик, Выборка.ОрганизацияПолучатель, Выборка.Организация);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет организацию владельца объекта расчета в табличной части.
//
// Параметры:
//  ТабличнаяЧасть - ТабличнаяЧасть - Расшифровка платежа, должна содержать поля "Заказ" и "Организация"
//  Организация - СправочникСсылка.Организация - Организация документа
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа
//
Процедура ЗаполнитьОрганизациюВТабличнойЧасти(ТабличнаяЧасть, Организация, ХозяйственнаяОперация) Экспорт
	
	ПоляЗаказа = Новый Структура;
	ПоляЗаказа.Вставить("Ссылка", "Заказ");
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		ПоляЗаказа.Вставить("ОрганизацияПолучатель", "Организация");
	Иначе
		ПоляЗаказа.Вставить("Организация", "Организация");
	КонецЕсли;
	
	ЗапросыПоТипам = Новый Соответствие;
	ВыборкиПоТипам = Новый Соответствие;
	
	НеобрабатываемыеТипы = Новый Массив;
	НеобрабатываемыеТипы.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	НеобрабатываемыеТипы.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	НеобрабатываемыеТипы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	НеобрабатываемыеТипы.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	НеобрабатываемыеТипы.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"));
	НеобрабатываемыеТипы.Добавить(Тип("ДокументСсылка.ОперацияПоЯндексКассе"));
	
	Заказы = ТабличнаяЧасть.ВыгрузитьКолонку("Заказ");
	
	Для каждого Заказ Из Заказы Цикл
		
		Если Не ЗначениеЗаполнено(Заказ)
			Или НеобрабатываемыеТипы.Найти(ТипЗнч(Заказ)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипСсылки = ОбщегоНазначения.ИмяТаблицыПоСсылке(Заказ);
		Если ЗапросыПоТипам.Получить(ТипСсылки) = Неопределено Тогда
			ЗапросыПоТипам.Вставить(ТипСсылки,
				ДенежныеСредстваПовтИсп.ТекстЗапросаКэшРеквизитовПлатежа(ТипСсылки, ПоляЗаказа));
		КонецЕсли;
	КонецЦикла;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	Для каждого ЗапросПоТипу Из ЗапросыПоТипам Цикл
		НовыйЗапрос = СхемаЗапроса.ПакетЗапросов.Добавить();
		НовыйЗапрос.УстановитьТекстЗапроса(ЗапросПоТипу.Значение);
	КонецЦикла;
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Запрос.УстановитьПараметр("Ссылка", Заказы);
		Результат = Запрос.ВыполнитьПакет();
		инд = 0;
		Для каждого ЗапросПоТипу Из ЗапросыПоТипам Цикл
			ВыборкиПоТипам.Вставить(ЗапросПоТипу.Ключ, Результат[инд].Выбрать());
			инд = инд + 1;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Заказ Из Заказы Цикл
		
		Если Не ЗначениеЗаполнено(Заказ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Заказ", Заказ);
		
		ВыборкаРеквизитов = ВыборкиПоТипам.Получить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Заказ));
		
		Если ВыборкаРеквизитов <> Неопределено Тогда
			ВыборкаРеквизитов.Сбросить();
			
			ПоляЗаполнения = Новый Структура("Организация");
			
			Если ВыборкаРеквизитов.НайтиСледующий(СтруктураПоиска) Тогда
				Для каждого СтрокаТЧ Из ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска) Цикл
					ЗаполнитьЗначенияСвойств(ПоляЗаполнения, ВыборкаРеквизитов);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПоляЗаполнения);
				КонецЦикла;
			Иначе
				Для каждого СтрокаТЧ Из ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска) Цикл
					СтрокаТЧ.Организация = Организация;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для каждого СтрокаТЧ Из ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска) Цикл
				СтрокаТЧ.Организация = Организация;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТ
// Процедура устанавливает параметры выбора договора лизинга.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//  ЭлементРасшифровкаПлатежаДоговор - ПолеФормы - Поле для ввода договора лизинга.
//
Процедура УстановитьПараметрыВыбораДоговораЛизинга(Объект, ЭлементРасшифровкаПлатежаДоговор) Экспорт
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю Тогда
		Возврат;
	КонецЕсли;
	
	// Установим параметр выбора
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	Организация = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Если НЕ Объект.БанковскийСчет.Пустая() Тогда
			Организация = Объект.БанковскийСчет.Владелец;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если НЕ Объект.Касса.Пустая() Тогда
			Организация = Объект.Касса.Владелец;
		КонецЕсли;
	КонецЕсли;
	
	Если Организация = Неопределено И НЕ Объект.Организация.Пустая() Тогда
		Организация = Объект.Организация;
	КонецЕсли;
	
	Если Организация <> Неопределено Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Организация));
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Устанавливает параметры выбора договора с заказчиком в рамках кооперации ГОЗ
//
// Параметры:
//    Объект - ДанныеФормыСтруктура - Текущий объект
//    Элемент - ПолеФормы - Поле ввода договора.
//
Процедура УстановитьПараметрыВыбораДоговораСЗаказчиком(Элемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыВыбораДоговора = Новый Массив;
	
	ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ПлатежиПо275ФЗ", Истина));
	ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорСУчастникомГОЗ", Истина));
	ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ПодходитДляПодбораВДоговорЗаказчика", Истина));
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметры Цикл 
			ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор." + ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение));
		КонецЦикла;
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДоговора);
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#Область ФункцииЗаполненияДокументов

// Функция определяет партнера, соответствующего выбранному контрагенту.
//
// Возвращает ссылку на партнера или Неопределено, если заданный для контрагента партнер не удовлетворяет условиям отбора.
//
// Параметры:
//    Контрагент - СправочникСсылка.Контрагенты - контрагент, партнера которого нужно найти
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - необязательное ограничение по хозяйственной операции.
//
// Возвращаемое значение:
//    СправочникСсылка.Партнеры - Партнер.
//
Функция ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|	И (ВЫБОР КОГДА &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту))
	|	ТОГДА
	|		Контрагенты.Партнер.Клиент
	|	КОГДА &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов))
	|	ТОГДА
	|		Контрагенты.Партнер.ПрочиеОтношения
	|	ИНАЧЕ
	|		Контрагенты.Партнер.Поставщик
	|	КОНЕЦ
	|		ИЛИ &ХозяйственнаяОперация = НЕОПРЕДЕЛЕНО
	|		ИЛИ &ИспользоватьПартнеровКакКонтрагентов)
	|";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Партнер = Выборка.Партнер;
	Иначе
		Партнер = Неопределено;
	КонецЕсли;
	
	Возврат Партнер;

КонецФункции // ПолучитьПартнераПоКонтрагенту()

// Процедура заполняет значения полей "БИК" и "КоррСчет".
//
// Параметры:
//    Банк - СправочникСсылка.КлассификаторБанков - Банк
//    Бик - Строка - БИК банка
//    КоррСчет - Строка - Корреспондентский счет банка.
//
Процедура ЗаполнитьБИКиКоррСчет(Банк, Бик, Свифт, КоррСчет) Экспорт

	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Код КАК БИК,
	|	СВИФТБИК КАК Свифт,
	|	КоррСчет КАК КоррСчет
	|ИЗ
	|	Справочник.КлассификаторБанков КАК Банки
	|ГДЕ
	|	Банки.Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", Банк);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Бик = Выборка.БИК;
		Свифт = Выборка.Свифт;
		КоррСчет = Выборка.КоррСчет;
	КонецЕсли;

КонецПроцедуры

// Процедура получает банк по указанному БИК или корреспондентскому счету.
//
// Параметры:
//	Поле - Строка - Имя поля, в котором произведен выбор значения.
//	Значение - Строка - Значение, выбранное в поле.
//	Банк - СправочникСсылка.КлассификаторБанков - Значение поля для указания банка
//	БИК - Строка - БИК банка
//	КоррСчет - Строка - Корреспондентский счет банка.
//
// Возвращаемое значение:
//	СписокЗначений - Список банков для интерактивного выбора.
//
Функция ПолучитьСписокБанковПоРеквизитам(Поле, Значение, Банк, БИК, КоррСчет) Экспорт

	СписокБанков = Новый СписокЗначений;
	
	// Если значение не выбрано, очистим значение банка.
	Если ПустаяСтрока(Значение) Тогда
	
		Банк = Справочники.КлассификаторБанков.ПустаяСсылка();
		БИК = "";
		КоррСчет = "";
		
		Возврат СписокБанков;
		
	КонецЕсли;
		
	ТаблицаБанков = Новый ТаблицаЗначений;
	Колонки = ТаблицаБанков.Колонки;
	Колонки.Добавить("Ссылка");
	Колонки.Добавить("Код");
	Колонки.Добавить("КоррСчет");
	
	ЭтоБИК = Ложь;
	ЭтоКоррСчет = Ложь;
	Если СтрНайти(Поле, "БИК") <> 0 Тогда
		ЭтоБИК = Истина;
	ИначеЕсли СтрНайти(Поле, "КоррСчет") <> 0 Тогда
		ЭтоКоррСчет = Истина;
	КонецЕсли;
	
	Если (ЭтоБИК И СтрДлина(Значение) = 9)
	 ИЛИ (ЭтоКоррСчет И СтрДлина(Значение) = 20)
	Тогда
		
		Если ЭтоБИК Тогда
			СтруктураОтбора = Новый Структура("Код", Значение);
			
		ИначеЕсли ЭтоКоррСчет Тогда
			СтруктураОтбора = Новый Структура("КоррСчет", Значение);
			
		КонецЕсли;
		
		Выборка = Справочники.КлассификаторБанков.Выбрать(,, СтруктураОтбора, "Код Возр");
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаБанков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
				
	КонецЕсли;
	
	Если ТаблицаБанков.Количество() = 1 Тогда
		ДанныеБанка = ТаблицаБанков[0];
		
		Банк = ДанныеБанка.Ссылка;
		БИК = ДанныеБанка.Код;
		КоррСчет = ДанныеБанка.КоррСчет;
		СписокБанков.Добавить(Банк);
		
	ИначеЕсли ТаблицаБанков.Количество() > 1 Тогда
		МассивБанков = ТаблицаБанков.ВыгрузитьКолонку("Ссылка");
		СписокБанков.ЗагрузитьЗначения(МассивБанков);
		
	КонецЕсли;
	
	Возврат СписокБанков;
	
КонецФункции

// Функция получает валюту, соответствующую номеру банковского счета.
// 6-8 разряды номера банковского счета соответствуют коду валюты.
// Для рублей используется код 810.
//
// Параметры:
//	НомерСчета - Число - Номер банковского счета.
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - Валюта банковского счета.
//
Функция ПолучитьВалютуПоНомеруСчета(НомерСчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодВалюты = Сред(НомерСчета, 6, 3);
	Если КодВалюты = "810" Тогда
		КодВалюты = "643";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты
	|");
	Запрос.УстановитьПараметр("КодВалюты", КодВалюты);
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Валюта = Выборка.Валюта;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции // ПолучитьВалютуПоНомеруСчета()

// Функция помещает расшифровку платежа во временное хранилище и возвращает адрес.
//
// Параметры:
//    РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть расшифровки
//    УникальныйИдентификатор - Строка - Идентификатор.
//
// Возвращаемое значение:
//    Строка - Адрес временного хранилища.
//
Функция ПоместитьРасшифровкуПлатежаВХранилище(Знач РасшифровкаПлатежа, УникальныйИдентификатор) Экспорт

	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(
		РасшифровкаПлатежа.Выгрузить(),
		УникальныйИдентификатор);
		
	Возврат АдресПлатежейВХранилище;
	
КонецФункции // ПоместитьРасшифровкуПлатежаВХранилище()

// Процедура заполняет кассу, банковский счет или эквайринговый терминал в зависимости от формы оплаты документа.
//
// Параметры:
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты заявки
//	ДанныеЗаполнения - Структура - Данные для заполнения документа.
//
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, ВалютаПлатежа = Неопределено) Экспорт
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		
		СтруктураПараметров = ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты = ФормаОплаты;
		СтруктураПараметров.Касса       = ДанныеЗаполнения.Касса;
		СтруктураПараметров.Валюта      = ВалютаПлатежа;

		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		Если Не ЗначениеЗаполнено(Касса) Тогда
			ТекущаяКасса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.Кассы.ПолучитьРеквизитыКассы(ТекущаяКасса).Организация
				Тогда
					Касса = ТекущаяКасса;
				КонецЕсли;
			Иначе
				Касса = ТекущаяКасса;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Касса) Тогда
			ДанныеЗаполнения.Вставить("Касса", Касса);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса).Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		
		СтруктураПараметров = ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты    = ФормаОплаты;
		СтруктураПараметров.БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		СтруктураПараметров.Валюта         = ВалютаПлатежа;
		
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			ТекущийБанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ТекущийБанковскийСчет).Организация
				Тогда
					БанковскийСчет = ТекущийБанковскийСчет;
				КонецЕсли;
			Иначе
				БанковскийСчет = ТекущийБанковскийСчет;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
			РеквизитыБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = РеквизитыБанковскогоСчета.Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
			Если Не РеквизитыБанковскогоСчета.РазрешитьПлатежиБезУказанияЗаявок
				И ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств") Тогда
				ДанныеЗаполнения.Вставить("ОплатаПоЗаявкам", Истина);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
		
		ЭквайринговыйТерминал =
			Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(ДанныеЗаполнения.Организация);
		Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ТекущийЭквайринговыйТерминал = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийЭквайринговыйТерминал", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ТекущийЭквайринговыйТерминал).Организация
				Тогда
					ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
				КонецЕсли;
			Иначе
				ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Реквизиты = Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("Валюта", Реквизиты.Валюта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет документ на основании заявок на расходование денежных средств.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты (зависит от вводимого документа оплаты).
//
Процедура ЗаполнитьДокументПоЗаявкамНаРасходованиеДенежныхСредств(ДанныеЗаполнения, ТабличнаяЧасть, ФормаОплаты) Экспорт
	
	МассивСсылок = Новый Массив;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		МассивСсылок.Добавить(ДанныеЗаполнения);
		БанковскийСчетКасса = Неопределено;
		СуммаПлатежа = 0;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			МассивСсылок.Добавить(ДанныеЗаполнения.ДокументОснование);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
			МассивСсылок = ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
		БанковскийСчетКасса = ДанныеЗаполнения.БанковскийСчетКасса;
		СуммаПлатежа = ДанныеЗаполнения.Сумма;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Заявка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			Заявка.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ
	|			Заявка.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	Заявка.Валюта КАК Валюта,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	Заявка.БанковскийСчет КАК БанковскийСчет,
	|	Заявка.Касса КАК Касса,
	|	Заявка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Заявка.Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА НЕ Заявка.БанковскийСчетКонтрагента.Закрыт ТОГДА
	|		Заявка.БанковскийСчетКонтрагента
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	Заявка.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВЫБОР КОГДА НЕ Заявка.БанковскийСчетПолучатель.Закрыт ТОГДА
	|		Заявка.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	|	Заявка.КассаПолучатель КАК КассаПолучатель,
	|	Заявка.Подразделение КАК Подразделение,
	|	Заявка.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
	|	Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Заявка.ВалютаКонвертации КАК ВалютаКонвертации,
	|	Заявка.СуммаКонвертации КАК СуммаКонвертации,
	|	Заявка.КурсКонвертации КАК КурсКонвертации,
	|	Заявка.ПланированиеСуммы КАК ПланированиеСуммы,
	|	Заявка.НомерВедомостиНаВыплатуЗарплаты КАК НомерВедомостиНаВыплатуЗарплаты,
	|	Заявка.ДатаВедомостиНаВыплатуЗарплаты КАК ДатаВедомостиНаВыплатуЗарплаты,
	|	Заявка.СтатьяАктивовПассивов КАК СтатьяАктивовПассивов,
	|	Заявка.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	Заявка.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	Заявка.ДатаАвансовогоОтчета КАК ДатаАвансовогоОтчета,
	//++ НЕ УТ
	|	Заявка.ДоговорыСЗаказчиками КАК ДоговорыСЗаказчиками,
	|	Заявка.ДоговорСУчастникомГОЗ КАК ДоговорСУчастникомГОЗ,
	|	Заявка.ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ,
	|	Заявка.ТипПлатежаФЗ275 КАК ТипПлатежаФЗ275,
	|	Заявка.БанковскийСчет.ГосударственныйКонтракт КАК ГосКонтракт,
	//-- НЕ УТ
	|	Заявка.ПеречислениеВБюджет КАК ПеречислениеВБюджет,
	|	Заявка.ТипНалога КАК ТипНалога,
	|	Заявка.НДФЛПоВедомостям КАК НДФЛПоВедомостям,
	|	Заявка.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Заявка.ВидПеречисленияВБюджет КАК ВидПеречисленияВБюджет,
	|	Заявка.КодОКАТО КАК КодОКАТО,
	|	Заявка.ПоказательОснования КАК ПоказательОснования,
	|	Заявка.ПоказательПериода КАК ПоказательПериода,
	|	Заявка.ПоказательНомера КАК ПоказательНомера,
	|	Заявка.ПоказательДаты КАК ПоказательДаты,
	|	Заявка.ПоказательТипа КАК ПоказательТипа,
	|	Заявка.СтатусСоставителя КАК СтатусСоставителя,
	|	Заявка.КодБК КАК КодБК,
	|	Заявка.КодВидаДохода КАК КодВидаДохода,
	//++ НЕ УТ
	|	Заявка.СчетУчета КАК СчетУчета,
	|	Заявка.Субконто1 КАК Субконто1,
	|	Заявка.Субконто2 КАК Субконто2,
	|	Заявка.Субконто3 КАК Субконто3,
	//-- НЕ УТ
	|	Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) КАК ЭтоВыплатаЗарплаты,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику))
	|		ТОГДА
	|			Заявка.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА Заявка.Контрагент.НаименованиеПолное <> """" ТОГДА
	|					Заявка.Контрагент.НаименованиеПолное
	|				ИНАЧЕ
	|					Заявка.Контрагент.Наименование
	|			КОНЕЦ
	|	КОНЕЦ КАК Выдать,
	|	ИСТИНА КАК ОплатаПоЗаявкам,
	|	Заявка.ИННПлательщика КАК ИННПлательщика,
	|	Заявка.КПППлательщика КАК КПППлательщика,
	|	Заявка.ТекстПлательщика КАК ТекстПлательщика,
	|	Заявка.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Заявка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Заявка.Договор КАК Договор,
	|	Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			3
	|	КОНЕЦ КАК ОчередностьПлатежа,
	|	Заявка.ТипКомиссииЗаПеревод КАК ТипКомиссииЗаПеревод,
	|	Заявка.ИнформацияПолучателюПлатежа КАК ИнформацияПолучателюПлатежа,
	|	Заявка.УсловиеСделкиКонвертации КАК УсловиеСделкиКонвертации,
	|	Заявка.БанковскийСчетСписанияКомиссии КАК БанковскийСчетСписанияКомиссии,
	|	Заявка.ИнструкцииБанку.(Инструкция) КАК ИнструкцииБанку
	|
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	
	|ГДЕ
	|	Заявка.Ссылка В (&МассивСсылок)
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		ЗаявкаНаРасходованиеДенежныхСредств В (&МассивСсылок)
	|		И (БанковскийСчетКасса В (&БанковскиеСчетаКассы) ИЛИ &НеОграничиватьПоБанковскомуСчетуКассе)
	|	) КАК ДенежныеСредства
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	БанковскиеСчетаКассы = Новый Массив;
	Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		БанковскиеСчетаКассы.Добавить(БанковскийСчетКасса);
		БанковскиеСчетаКассы.Добавить(Неопределено);
		Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
		Запрос.УстановитьПараметр("НеОграничиватьПоБанковскомуСчетуКассе", Ложь);
	Иначе
		Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
		Запрос.УстановитьПараметр("НеОграничиватьПоБанковскомуСчетуКассе", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ФормаОплатыЗаявки)
		И ФормаОплаты <> Выборка.ФормаОплатыЗаявки Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Форма оплаты ""%1"" вводимого документа отличается от формы оплаты ""%2"" заявки.'"),
			ФормаОплаты,
			Выборка.ФормаОплатыЗаявки);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта
		И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Текст = НСтр("ru = 'Выбранная операция не соответствует операции возврата оплаты клиенту, для которой предусмотрен эквайринговый платеж.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчетКасса);
		ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ДанныеЗаполнения.Вставить("Касса", БанковскийСчетКасса);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ВалютаКонвертации);
		ДанныеЗаполнения.Вставить("БанковскийСчетПолучатель", БанковскийСчетПолучатель);
		КассаПолучатель = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ВалютаКонвертации);
		ДанныеЗаполнения.Вставить("КассаПолучатель", КассаПолучатель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СуммаПлатежа) Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаПлатежа);
	Иначе
		ДанныеЗаполнения.Вставить("СуммаДокумента", РезультатЗапроса[1].Выгрузить()[0].Сумма);
	КонецЕсли;
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(Выборка.ПодотчетноеЛицо).Представление;
		Если Не ЗначениеЗаполнено(ДокументФизическогоЛица) Тогда
			ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(
				Выборка.ПодотчетноеЛицо,
				Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ).Представление;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		ДанныеЗаполнения.Вставить("ПоДокументу", ДокументФизическогоЛица);
	КонецЕсли;
	
	Если Выборка.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов Тогда
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения);
	Иначе
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, Выборка.Валюта);
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ДанныеЗаполнения.КурсКонвертации <> 0
		И ДанныеЗаполнения.СуммаКонвертации = 0 Тогда
		ДанныеЗаполнения.Вставить("СуммаКонвертации", ДанныеЗаполнения.СуммаДокумента / ДанныеЗаполнения.КурсКонвертации);
	КонецЕсли;
	
	//++ НЕ УТ
	Если Выборка.ПлатежиПо275ФЗ И Выборка.ДоговорСУчастникомГОЗ
		И ЗначениеЗаполнено(Выборка.ГосКонтракт) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов
		|ГДЕ
		|	ГосударственныйКонтракт = &Госконтракт
		|	И ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
		|	И НЕ ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями
		|ГДЕ
		|	ГосударственныйКонтракт = &Госконтракт
		|	И НЕ ПометкаУдаления
		|";
		Запрос.УстановитьПараметр("Госконтракт", Выборка.ГосКонтракт);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 1 Тогда
			ДанныеЗаполнения.Вставить("ДоговорСЗаказчиком", Результат[0].Ссылка);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Выборка.ВалютаЗаявки, ДанныеЗаполнения.Валюта, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыПересчета.Кратность / (КурсВалюты.Кратность * КурсВалютыПересчета.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсВалютыПересчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыПересчета.Курс <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.Заказ,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ
	|			СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ КАК Сумма,
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорЛизинга,
	|	РасшифровкаПлатежа.ТипПлатежаПоЛизингу,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	РасшифровкаПлатежа.Ведомость,
	|	//ДанныеСубконто
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета *
	|			ВЫБОР
	|				КОГДА РасшифровкаПлатежа.СтавкаНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10),
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)) ТОГДА
	|					0.1
	|				КОГДА РасшифровкаПлатежа.СтавкаНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)) ТОГДА
	|					0.18
	|				КОГДА РасшифровкаПлатежа.СтавкаНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20),
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)) ТОГДА
	|					0.20
	|				ИНАЧЕ
	|					0
	|			КОНЕЦ /
	|			(ВЫБОР
	|				КОГДА РасшифровкаПлатежа.СтавкаНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10),
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)) ТОГДА
	|					0.1
	|				КОГДА РасшифровкаПлатежа.СтавкаНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)) ТОГДА
	|					0.18
	|				КОГДА РасшифровкаПлатежа.СтавкаНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20),
	|					ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)) ТОГДА
	|					0.20
	|				ИНАЧЕ
	|					0
	|			КОНЕЦ + 1)
	|	ИНАЧЕ
	|		СУММА(РасшифровкаПлатежа.СуммаНДС)
	|	КОНЕЦ КАК СуммаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.Заказ,
	|		ЕСТЬNULL(РасшифровкаДокумента.Сумма, Заявка.СуммаДокумента) КАК Сумма,
	|		ВЫБОР
	|			КОГДА Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорЛизинга,
	|		РасшифровкаДокумента.ТипПлатежаПоЛизингу,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ведомость,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		РасшифровкаДокумента.СуммаНДС КАК СуммаНДС,
	|		Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|		Заявка.ПланированиеСуммы КАК ПланированиеСуммы,
	|		Заявка.Валюта КАК Валюта
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		ПО
	|			РасшифровкаДокумента.Ссылка = Заявка.Ссылка
	|		
	|	ГДЕ
	|		Заявка.Ссылка В(&МассивСсылок)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.Заказ,
	|		-РасшифровкаДокумента.Сумма,
	|		ВЫБОР
	|			КОГДА РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				-РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорЛизинга,
	|		РасшифровкаДокумента.ТипПлатежаПоЛизингу,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ведомость,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		-РасшифровкаДокумента.СуммаНДС,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Валюта
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|		ПО
	|			ДенежныеСредства.Регистратор = РасшифровкаДокумента.Ссылка
	|			
	|	ГДЕ
	|		ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.Заказ,
	|		-РасшифровкаДокумента.Сумма,
	|		ВЫБОР
	|			КОГДА РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				-РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорЛизинга,
	|		РасшифровкаДокумента.ТипПлатежаПоЛизингу,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ссылка.Ведомость,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		-РасшифровкаДокумента.СуммаНДС,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Валюта
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|		ПО
	|			ДенежныеСредства.Регистратор = РасшифровкаДокумента.Ссылка
	|	ГДЕ
	|		ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В(&МассивСсылок)
	|	)
	|	КАК РасшифровкаПлатежа
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			КурсыВалют КАК КурсыВалют
	|		ПО
	|			РасшифровкаПлатежа.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.Заказ,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорЛизинга,
	|	РасшифровкаПлатежа.ТипПлатежаПоЛизингу,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	РасшифровкаПлатежа.Ведомость,
	|	//ГруппировкаСубконто
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств,
	|	РасшифровкаПлатежа.ПланированиеСуммы,
	|	КурсыВалют.КоэффициентПересчета
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов)
	|			ТОГДА СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ > 0
	|	
	|УПОРЯДОЧИТЬ ПО
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|";
	
	//++ НЕ УТ
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И (ДанныеЗаполнения.ТипНалога = Перечисления.ТипыНалогов.НДС_ВвозимыеТовары
			Или ДанныеЗаполнения.ТипНалога = Перечисления.ТипыНалогов.НДС_НалоговыйАгент)
		Или ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГруппировкаСубконто",
		"	РасшифровкаПлатежа.СчетУчета,
		|	РасшифровкаПлатежа.Субконто1,
		|	РасшифровкаПлатежа.Субконто2,
		|	РасшифровкаПлатежа.Субконто3,");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДанныеСубконто",
		"	РасшифровкаПлатежа.СчетУчета КАК СчетУчета,
		|	РасшифровкаПлатежа.Субконто1 КАК Субконто1,
		|	РасшифровкаПлатежа.Субконто2 КАК Субконто2,
		|	РасшифровкаПлатежа.Субконто3 КАК Субконто3,");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДанныеСубконто",
		"	МИНИМУМ(РасшифровкаПлатежа.СчетУчета) КАК СчетУчета,
		|	МИНИМУМ(РасшифровкаПлатежа.Субконто1) КАК Субконто1,
		|	МИНИМУМ(РасшифровкаПлатежа.Субконто2) КАК Субконто2,
		|	МИНИМУМ(РасшифровкаПлатежа.Субконто3) КАК Субконто3,");
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПоляСубконто",
	"	РасшифровкаДокумента.СчетУчета КАК СчетУчета,
	|	РасшифровкаДокумента.Субконто1 КАК Субконто1,
	|	РасшифровкаДокумента.Субконто2 КАК Субконто2,
	|	РасшифровкаДокумента.Субконто3 КАК Субконто3,");
	//-- НЕ УТ
	
	Запрос.УстановитьПараметр("Валюта", ДанныеЗаполнения.Валюта);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабличнаяЧасть.Очистить();
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
	Пока Выборка.Следующий() Цикл
		Сумма = Мин(Выборка.Сумма, СуммаДокумента);
		ПересчитатьНДС = (Сумма <> Выборка.Сумма);
		СуммаДокумента = СуммаДокумента - Сумма;
		Если Сумма > 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
			
			Если ПересчитатьНДС Тогда
				ПараметрыПересчетаНДС = Новый Структура("ЦенаВключаетНДС", Истина);
				СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", ПараметрыПересчетаНДС);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
			КонецЕсли;
			
			//++ НЕ УТ
			Если Константы.ИспользоватьНачислениеЗарплаты.Получить()
				И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
				И ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу Тогда
				
				Если ТабличнаяЧасть.Количество() Тогда
					ДанныеЗаполнения.Вставить("Ведомость", Выборка.Ведомость);
				КонецЕсли;
			КонецЕсли;
			//-- НЕ УТ
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.СуммаДокумента <> ТабличнаяЧасть.Итог("СуммаВзаиморасчетов") Тогда
		Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", ТабличнаяЧасть.Итог("Сумма"));
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ

// Процедура заполняет таблицу на основании ведомостей различных типов оплаты в соответствии с отборами.
//
// Параметры:
//	ТаблицаВедомостей - ТаблицаЗначений, ТабличнаяЧасть - Заполняемая таблица
//	СтруктураПараметров - Структура - Структура отборов
//	ТаблицаРаботников - ТаблицаЗначений, ТабличнаяЧасть - Таблица, в которую помещаются работники первой ведомости.
//
Процедура ЗаполнитьПоВедомостямКОплате(ТаблицаВедомостей, СтруктураПараметров, ТаблицаРаботников = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДанныеОбОплатеВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТВедомости.Ведомость КАК Ведомость,
	|	МАКСИМУМ(ВТВедомости.Сумма) КАК Сумма,
	|	МАКСИМУМ(ВТВедомости.СуммаПоДокументу) КАК СуммаПоДокументу
	|ИЗ
	|	ДанныеВедомостейНаОплату КАК ВТВедомости
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВедомости.Ведомость";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаВедомостей.Добавить();
		НоваяСтрока.Ведомость = Выборка.Ведомость;
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(СтруктураПараметров.ХозяйственнаяОперация);
		
		Если СтруктураПараметров.Свойство("ЗаполнятьСуммуПоДокументу") Тогда
			НоваяСтрока.Сумма = Выборка.СуммаПоДокументу;
		Иначе
			НоваяСтрока.Сумма = Выборка.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаВедомостей.Количество() > 0 И ТаблицаРаботников <> Неопределено Тогда
		СтруктураПараметров.Вставить(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаВедомостей[0].Ведомость));
		СуммыКОплате = ДанныеРаботниковПоВедомостям(СтруктураПараметров);
		
		Если ТипЗнч(СуммыКОплате) = Тип("ТаблицаЗначений") Тогда
			ТаблицаРаботников.Загрузить(СуммыКОплате);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу значений с данными о работниках и сумме выплаты по ведомости.
// Параметры:
//	СтруктураПараметров - Структура - Структура отборов;
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - для передачи таблицы в другой запрос.
//
// Возвращаемое значение:
//	ТаблицаЗначений - данные о работниках и суммах их начисления по ведомостям.
//
Функция ДанныеРаботниковПоВедомостям(СтруктураПараметров, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ДанныеОбОплатеВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеВедомостейНаОплату.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВедомостейНаОплату.Ведомость КАК Ведомость,
	|	СУММА(ДанныеВедомостейНаОплату.Сумма) КАК Сумма
	|ИЗ
	|	ДанныеВедомостейНаОплату КАК ДанныеВедомостейНаОплату
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВедомостейНаОплату.Ведомость,
	|	ДанныеВедомостейНаОплату.ФизическоеЛицо
	|";
	
	ТаблицаРаботников = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураПараметров.Свойство("Работник") Тогда
		
		Если ТаблицаРаботников.Количество() > 0 Тогда
			Возврат ТаблицаРаботников[0].Сумма;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	Иначе
		
		Возврат ТаблицаРаботников;
		
	КонецЕсли;
	
КонецФункции

// Процедура заполняет таблицу на основании ведомостей на основании заявок на расходование денежных средств.
//
// Параметры:
//	ТаблицаВедомостей - ТаблицаЗначений, ТабличнаяЧасть - Заполняемая таблица
//	СтруктураПараметров - Структура - Структура отборов.
//
Процедура ЗаполнитьПоВедомостямИЗаявкамКОплате(ТаблицаВедомостей, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	
	Если СтруктураПараметров.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаВедомости.Ведомость,
		|	ЗаявкаВедомости.СтатьяДвиженияДенежныхСредств,
		|	ЗаявкаВедомости.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ЗаявкаВедомости.Сумма
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаВедомости
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеВедомости
		|		ПО (ЗаявкаВедомости.Ведомость = СписаниеВедомости.Ведомость
		|		И СписаниеВедомости.Ссылка <> &Списание
		|		И СписаниеВедомости.Ссылка.Проведен)
		|ГДЕ
		|	ЗаявкаВедомости.Ссылка В(&Заявка)
		|	И ЗаявкаВедомости.Ссылка.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|	И СписаниеВедомости.Ведомость ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		Запрос.УстановитьПараметр("Заявка", СтруктураПараметров.Заявка);
		Запрос.УстановитьПараметр("Списание", СтруктураПараметров.Списание);
		
		
	ИначеЕсли СтруктураПараметров.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Ведомость,
		|	РасшифровкаПлатежаСписаниеБДС.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	СУММА(ОстаткиКВыплате.СуммаОстаток) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыПеречислением) КАК ОстаткиКВыплате
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Ведомости
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Оплата
		|			ПО Ведомости.Сотрудник.ФизическоеЛицо = Оплата.ФизическоеЛицо
		|				И Ведомости.Ссылка = Оплата.Ведомость
		|		ПО ОстаткиКВыплате.ЗаявкаНаРасходованиеДенежныхСредств = Ведомости.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежаСписаниеБДС
		|		ПО ОстаткиКВыплате.ЗаявкаНаРасходованиеДенежныхСредств = РасшифровкаПлатежаСписаниеБДС.Ведомость
		|ГДЕ
		|	Оплата.Ведомость ЕСТЬ NULL
		|	И Ведомости.БанковскийСчет = &ЛицевойСчет
		|	И Ведомости.Ссылка.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	РасшифровкаПлатежаСписаниеБДС.ЗаявкаНаРасходованиеДенежныхСредств,
		|	ОстаткиКВыплате.ЗаявкаНаРасходованиеДенежныхСредств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств,
		|	РасшифровкаПлатежаСписаниеБДС.ЗаявкаНаРасходованиеДенежныхСредств,
		|	СУММА(-ДенежныеСредстваКВыплате.Сумма)
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Ведомости
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		|			ПО Ведомости.Ссылка.Организация = СписаниеБезналичныхДенежныхСредств.Организация
		|				И Ведомости.БанковскийСчет = СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента
		|		ПО ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств = Ведомости.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежаСписаниеБДС
		|		ПО ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств = РасшифровкаПлатежаСписаниеБДС.Ведомость
		|ГДЕ
		|	ДенежныеСредстваКВыплате.Регистратор = &Списание
		|	И СписаниеБезналичныхДенежныхСредств.Ссылка = &Списание
		|
		|СГРУППИРОВАТЬ ПО
		|	РасшифровкаПлатежаСписаниеБДС.ЗаявкаНаРасходованиеДенежныхСредств,
		|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств";
		
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ЛицевойСчет", СтруктураПараметров.ЛицевойСчет);
		Запрос.УстановитьПараметр("Списание", СтруктураПараметров.Списание);
		
		
	ИначеЕсли СтруктураПараметров.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу
		Или СтруктураПараметров.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ведомость
		|ПОМЕСТИТЬ ВТ_Ведомости
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка В(&Заявка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаВедомости.Ведомость,
		|	ЗаявкаВедомости.СтатьяДвиженияДенежныхСредств,
		|	ЗаявкаВедомости.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	-КВыплатеОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаВедомости
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(
		|				,
		|				ЗаявкаНаРасходованиеДенежныхСредств В
		|					(ВЫБРАТЬ
		|						ВТ_Ведомости.Ведомость КАК Ведомость
		|					ИЗ
		|						ВТ_Ведомости КАК ВТ_Ведомости)) КАК КВыплатеОстатки
		|		ПО ЗаявкаВедомости.Ведомость = КВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаВедомости.Ссылка В(&Заявка)";
		
		Запрос.УстановитьПараметр("Заявка", СтруктураПараметров.Заявка);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаВедомостей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует временную таблицу физических лиц по ведомостям различных типов в соответствии с параметрами.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//	Параметры - Структура - Структура параметров.
//
Процедура ДанныеОбОплатеВедомостей(МенеджерВременныхТаблиц, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	МассивВедомостей = Неопределено;
	Параметры.Свойство("МассивВедомостей", МассивВедомостей);
	
	Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
	Запрос.УстановитьПараметр("БезОтбораПоВедомостям", МассивВедомостей = Неопределено Или МассивВедомостей.Количество() = 0);
	
	Работник = Неопределено;
	Параметры.Свойство("Работник", Работник);
	Запрос.УстановитьПараметр("Работник", Работник);
	Запрос.УстановитьПараметр("БезОтбораПоРаботнику", Не ЗначениеЗаполнено(Работник));
	
	ЛицевойСчет = Неопределено;
	Параметры.Свойство("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("БезОтбораПоЛицевомуСчету", Не ЗначениеЗаполнено(ЛицевойСчет));
	
	Если Параметры.Свойство("МассивОпераций") Тогда
		Запрос.УстановитьПараметр("МассивОпераций", Параметры.МассивОпераций);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
	ИначеЕсли Параметры.Свойство("ХозяйственнаяОперация") Тогда
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Параметры.ХозяйственнаяОперация);
		Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
	Иначе
		Запрос.УстановитьПараметр("МассивОпераций", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Истина);
	КонецЕсли;
	
	
	ИсключаемаяЗаявка = Неопределено;
	Параметры.Свойство("Заявка", ИсключаемаяЗаявка);
	Запрос.УстановитьПараметр("ИсключаемаяЗаявка", ИсключаемаяЗаявка);
	Запрос.УстановитьПараметр("БезИсключаемойЗаявки", Не ЗначениеЗаполнено(ИсключаемаяЗаявка));
	
	ИсключаемыйДокументОплаты = Неопределено;
	Параметры.Свойство("ИсключаемыйДокументОплаты", ИсключаемыйДокументОплаты);
	Запрос.УстановитьПараметр("ИсключаемыйДокументОплаты", ИсключаемыйДокументОплаты);
	Запрос.УстановитьПараметр("БезИсключаемогоДокументаОплаты", Не ЗначениеЗаполнено(ИсключаемыйДокументОплаты));
	
	Если Параметры.Свойство("ИсключатьОплаченные") Тогда
		Запрос.УстановитьПараметр("ИсключатьОплаченные", Истина);
	Иначе
		Запрос.УстановитьПараметр("ИсключатьОплаченные", Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтображатьДепонированные") Тогда
		Запрос.УстановитьПараметр("ОтображатьДепонированные", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтображатьДепонированные", Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("ИсключатьВключенныеВЗаявки") Тогда
		Запрос.УстановитьПараметр("ИсключатьВключенныеВЗаявки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ИсключатьВключенныеВЗаявки", Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ведомость,
	|	ДанныеДокумента.СуммаПоДокументу КАК СуммаПоДокументу
	|ПОМЕСТИТЬ ВТВедомости
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Работники.Ссылка КАК Ведомость,
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Работники.КВыплате КАК Сумма,
	|	Работники.НомерЛицевогоСчета КАК ЛицевойСчет
	|ПОМЕСТИТЬ ВТРаботники
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	""""
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	""""
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	Работники.БанковскийСчет
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	Работники.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	Работники.НомерЛицевогоСчета
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк.Выплаты КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	Работники.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	""""
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу.Выплаты КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	Работники.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	Работники.БанковскийСчет
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением.Выплаты КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.ФизическоеЛицо = &Работник)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Оплата.Ведомость КАК Ведомость,
	|	Оплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИСТИНА КАК Оплачена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Депоненты.Ссылка, ЗНАЧЕНИЕ(Документ.ДепонированиеЗарплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ДепонированиеЗарплаты.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Депонирована,
	|	Оплата.Регистратор КАК ДокументОплаты
	|ПОМЕСТИТЬ ВТСостоянияВедомостей
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Оплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДепонированиеЗарплаты.Депоненты КАК Депоненты
	|		ПО Оплата.Регистратор = Депоненты.Ссылка
	|			И Оплата.Ведомость = Депоненты.Ссылка.Ведомость
	|			И Оплата.ФизическоеЛицо = Депоненты.ФизическоеЛицо
	|ГДЕ
	|	Оплата.Ведомость В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Оплата.ФизическоеЛицо = &Работник)
	|	И Оплата.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРаботники.Ведомость,
	|	ВТРаботники.ФизическоеЛицо,
	|	СУММА(ВТРаботники.Сумма) КАК Сумма,
	|	ВТРаботники.ЛицевойСчет,
	|	ВТВедомости.СуммаПоДокументу,
	|	ЕСТЬNULL(ВТСостоянияВедомостей.Оплачена, ЛОЖЬ) КАК Оплачена,
	|	ЕСТЬNULL(ВедомостиЗаявки.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)) КАК Заявка
	|ПОМЕСТИТЬ ДанныеВедомостейНаОплату
	|ИЗ
	|	ВТРаботники КАК ВТРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВедомости КАК ВТВедомости
	|		ПО ВТРаботники.Ведомость = ВТВедомости.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ВедомостиЗаявки
	|		ПО ВТРаботники.Ведомость = ВедомостиЗаявки.Ведомость
	|			И (&БезОтбораПоОперациям
	|				ИЛИ ВедомостиЗаявки.Ссылка.ХозяйственнаяОперация В (&МассивОпераций)
	|				ИЛИ ВедомостиЗаявки.Ссылка.ХозяйственнаяОперацияПоЗарплате В (&МассивОпераций))
	|			И (ВедомостиЗаявки.Ссылка.Проведен)
	|			И (&БезИсключаемойЗаявки
	|				ИЛИ ВедомостиЗаявки.Ссылка <> &ИсключаемаяЗаявка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияВедомостей КАК ВТСостоянияВедомостей
	|		ПО ВТРаботники.Ведомость = ВТСостоянияВедомостей.Ведомость
	|			И ВТРаботники.ФизическоеЛицо = ВТСостоянияВедомостей.ФизическоеЛицо
	|ГДЕ
	|	(НЕ &ИсключатьОплаченные
	|			ИЛИ НЕ ЕСТЬNULL(ВТСостоянияВедомостей.Оплачена, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ВТСостоянияВедомостей.Оплачена, ЛОЖЬ)
	|				И НЕ &БезИсключаемогоДокументаОплаты
	|				И ВТСостоянияВедомостей.ДокументОплаты = &ИсключаемыйДокументОплаты
	|			ИЛИ &ОтображатьДепонированные
	|				И ЕСТЬNULL(ВТСостоянияВедомостей.Депонирована, ЛОЖЬ))
	|	И (НЕ &ИсключатьВключенныеВЗаявки
	|			ИЛИ ЕСТЬNULL(ВедомостиЗаявки.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка))
	|	И (&БезОтбораПоЛицевомуСчету
	|			ИЛИ ВТРаботники.ЛицевойСчет = &ЛицевойСчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРаботники.Ведомость,
	|	ВТРаботники.ФизическоеЛицо,
	|	ВТРаботники.ЛицевойСчет,
	|	ВТВедомости.СуммаПоДокументу,
	|	ВТСостоянияВедомостей.Оплачена,
	|	ВедомостиЗаявки.Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВедомости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРаботники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСостоянияВедомостей
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура формирует временные таблицы данных ведомостей различных типов в соответствии с параметрами.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//	Параметры - Структура - Структура параметров.
//
Процедура ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФормаОплатыНаличная",    Перечисления.ФормыОплаты.Наличная);
	Запрос.УстановитьПараметр("ФормаОплатыБезналичная", Перечисления.ФормыОплаты.Безналичная);
	
	Организация = Неопределено;
	Параметры.Свойство("Организация", Организация);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("БезОтбораПоОрганизации", Не ЗначениеЗаполнено(Организация));
	
	ПериодРегистрации = Неопределено;
	Параметры.Свойство("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("БезОтбораПоПериодуРегистрации", Не ЗначениеЗаполнено(ПериодРегистрации));
	
	МассивВедомостей = Неопределено;
	Параметры.Свойство("МассивВедомостей", МассивВедомостей);
	Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
	Запрос.УстановитьПараметр("БезОтбораПоВедомостям", МассивВедомостей = Неопределено Или МассивВедомостей.Количество() = 0);
	
	Если Параметры.Свойство("МассивОпераций") Тогда
		Запрос.УстановитьПараметр("МассивОпераций", Параметры.МассивОпераций);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
	ИначеЕсли Параметры.Свойство("ХозяйственнаяОперация") Тогда
		Запрос.УстановитьПараметр("МассивОпераций",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.ХозяйственнаяОперация));
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
	Иначе
		Запрос.УстановитьПараметр("МассивОпераций", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("ФизическиеЛица") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", Параметры.ФизическиеЛица);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	ИначеЕсли Параметры.Свойство("Работник") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Работник));
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Истина);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ведомость.Ссылка КАК Ведомость,
	|	Ведомость.Проведен КАК Проведен,
	|	Ведомость.Организация КАК Организация,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.СпособВыплаты КАК ОбъектВыплаты,
	|	Ведомость.ВидДоходаИсполнительногоПроизводства КАК ВидДохода,
	|	Ведомость.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	NULL КАК Банк,
	|	NULL КАК Касса,
	|	NULL КАК Раздатчик,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу
	|ПОМЕСТИТЬ ВТВедомости
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	Ведомость.ВидДоходаИсполнительногоПроизводства,
	|	NULL,
	|	Ведомость.Банк,
	|	NULL,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	Ведомость.ВидДоходаИсполнительногоПроизводства,
	|	Ведомость.ЗарплатныйПроект,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	Ведомость.ВидДоходаИсполнительногоПроизводства,
	|	NULL,
	|	Ведомость.Банк,
	|	NULL,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ведомость.Касса,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ведомость.Раздатчик,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Зарплата.Ссылка КАК Ведомость,
	|	&ФормаОплатыБезналичная КАК ФормаОплаты,
	|	Зарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Зарплата.КВыплате КАК Сумма,
	|	Зарплата.ДокументОснование КАК ДокументОснование,
	|	Зарплата.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТДанныеВедомостейКВыплате
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Зарплата.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.КВыплате,
	|	Зарплата.ДокументОснование,
	|	Зарплата.СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Выплаты.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Выплаты.ФизическоеЛицо,
	|	Выплаты.КВыплате,
	|	Выплаты.ДокументОснование,
	|	Выплаты.СтатьяФинансирования,
	|	Выплаты.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту)
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк.Выплаты КАК Выплаты
	|ГДЕ
	|	Выплаты.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Выплаты.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Выплаты.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Выплаты.ФизическоеЛицо,
	|	Выплаты.КВыплате,
	|	Выплаты.ДокументОснование,
	|	Выплаты.СтатьяФинансирования,
	|	Выплаты.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением.Выплаты КАК Выплаты
	|ГДЕ
	|	Выплаты.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Выплаты.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Зарплата.Ссылка,
	|	&ФормаОплатыНаличная,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.КВыплате,
	|	Зарплата.ДокументОснование,
	|	Зарплата.СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Зарплата.Ссылка,
	|	&ФормаОплатыНаличная,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.КВыплате,
	|	Зарплата.ДокументОснование,
	|	Зарплата.СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Выплаты.Ссылка,
	|	&ФормаОплатыНаличная,
	|	Выплаты.ФизическоеЛицо,
	|	Выплаты.КВыплате,
	|	Выплаты.ДокументОснование,
	|	Выплаты.СтатьяФинансирования,
	|	Выплаты.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу)
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу.Выплаты КАК Выплаты
	|ГДЕ
	|	Выплаты.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Выплаты.ФизическоеЛицо В (&ФизическиеЛица))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.Ссылка КАК Ведомость,
	|	&ФормаОплатыБезналичная КАК ФормаОплаты,
	|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Налоги.Подразделение КАК Подразделение,
	|	Налоги.КодДохода КАК КодДохода,
	|	Налоги.КатегорияДохода КАК КатегорияДохода,
	|	Налоги.ДокументОснование КАК ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация,
	|	Налоги.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТДанныеВедомостейНалоги
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК Налоги
	|ГДЕ
	|	Налоги.Сумма <> 0
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.НДФЛ КАК Налоги
	|ГДЕ
	|	Налоги.Сумма <> 0
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк.НДФЛ КАК Налоги
	|ГДЕ
	|	Налоги.Сумма <> 0
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением.НДФЛ КАК Налоги
	|ГДЕ
	|	Налоги.Сумма <> 0
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.НДФЛ КАК Налоги
	|ГДЕ
	|	Налоги.Сумма <> 0
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.НДФЛ КАК Налоги
	|ГДЕ
	|	Налоги.Сумма <> 0
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу.НДФЛ КАК Налоги
	|ГДЕ
	|	Налоги.Сумма <> 0
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура формирует временные таблицы состояния ведомостей различных типов в соответствии с параметрами.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//	Параметры - Структура - Структура параметров.
//
Процедура ПодготовитьДанныеОСостоянииВедомостей(МенеджерВременныхТаблиц, Параметры) Экспорт
	
	ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, Параметры);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПустаяРегистрацияВНалоговомОргане",
		Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	Если Параметры.Свойство("ДатаАктуальности") Тогда
		Запрос.УстановитьПараметр("ДатаАктуальности", Параметры.ДатаАктуальности);
	Иначе
		Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Параметры.Свойство("ФизическиеЛица") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", Параметры.ФизическиеЛица);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	ИначеЕсли Параметры.Свойство("Работник") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Работник));
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Истина);
	КонецЕсли;
	
	ИсключитьДокументОплаты = Неопределено;
	Параметры.Свойство("ИсключитьДокументОплаты", ИсключитьДокументОплаты);
	Запрос.УстановитьПараметр("ИсключаемыйДокументОплаты", ИсключитьДокументОплаты);
	Запрос.УстановитьПараметр("БезИсключенияДокументаОплаты", Не ЗначениеЗаполнено(ИсключитьДокументОплаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеВедомостей.Ведомость КАК Ведомость,
	|	ДанныеВедомостей.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВедомостей.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ОплатаВедомостей.Регистратор ЕСТЬ NULL ТОГДА ЛОЖЬ
	|		ИНАЧЕ ОплатаВедомостей.Регистратор ССЫЛКА Документ.ДепонированиеЗарплаты
	|	КОНЕЦ КАК Депонирована,
	|	ОплатаВедомостей.Регистратор КАК ДокументВыплаты,
	|	СУММА(ВЫБОР
	|		КОГДА ОплатаВедомостей.Регистратор ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеВедомостей.Сумма
	|	КОНЕЦ) КАК СуммаОплаты,
	|	СУММА(ДанныеВедомостей.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыПоВедомостям
	|ИЗ
	|	ВТДанныеВедомостейКВыплате КАК ДанныеВедомостей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|		ПО ДанныеВедомостей.Ведомость = ОплатаВедомостей.Ведомость
	|			И ДанныеВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо
	|			И (&БезИсключенияДокументаОплаты
	|				ИЛИ ОплатаВедомостей.Регистратор <> &ИсключаемыйДокументОплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВедомостей.Ведомость,
	|	ДанныеВедомостей.ФормаОплаты,
	|	ДанныеВедомостей.ФизическоеЛицо,
	|	ДанныеВедомостей.ХозяйственнаяОперация,
	|	ОплатаВедомостей.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведомости.Ведомость КАК Ведомость,
	|	Расшифровка.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИСТИНА КАК Ошибка
	|ПОМЕСТИТЬ ВТОшибкиПеречисления
	|ИЗ
	|	Документ.ПодтверждениеЗачисленияЗарплаты КАК Подтверждение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК Ведомости
	|		ПО Подтверждение.ПервичныйДокумент = Ведомости.Ведомость
	|			И Подтверждение.Проведен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК Расшифровка
	|		ПО Расшифровка.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)
	|			И Подтверждение.Ссылка = Расшифровка.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомости.Ведомость,
	|	Расшифровка.ФизическоеЛицо,
	|	ИСТИНА
	|ИЗ
	|	Документ.ПодтверждениеЗачисленияЗарплаты КАК Подтверждение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыплатыПоВедомостям КАК Ведомости
	|		ПО Подтверждение.ПервичныйДокумент = Ведомости.ДокументВыплаты
	|			И Подтверждение.Проведен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК Расшифровка
	|		ПО Расшифровка.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)
	|			И Расшифровка.ФизическоеЛицо = Ведомости.ФизическоеЛицо
	|			И Подтверждение.Ссылка = Расшифровка.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОшибкиПеречисления.Ошибка, ЛОЖЬ) КАК ОшибкаПеречисления,
	|	ВыплатыПоВедомостям.*
	|ПОМЕСТИТЬ ВТСостояниеВыплатыПоВедомостям
	|ИЗ
	|	ВТВыплатыПоВедомостям КАК ВыплатыПоВедомостям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиПеречисления КАК ОшибкиПеречисления
	|		ПО ВыплатыПоВедомостям.Ведомость = ОшибкиПеречисления.Ведомость
	|			И ВыплатыПоВедомостям.ФизическоеЛицо = ОшибкиПеречисления.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВыплатыПоВедомостям;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеВедомостей.Организация,
	|	Регистрации.РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТРегистрацииОрганизацийВНалоговыхОрганах
	|ИЗ
	|	ВТВедомости КАК ДанныеВедомостей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
	|			&ДатаАктуальности, СтруктурнаяЕдиница В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ ВТВедомости КАК Т)) КАК Регистрации
	|		ПО ДанныеВедомостей.Организация = Регистрации.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплаты.Ссылка КАК ДокументОплаты,
	|	Расшифровка.Ведомость КАК Ведомость
	|ПОМЕСТИТЬ ВТДокументыПеречисленияНалоговПоВедомостям
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК ДанныеВедомостей
	|		ПО Расшифровка.Ведомость = ДанныеВедомостей.Ведомость
	|			И (&БезИсключенияДокументаОплаты
	|				ИЛИ Расшифровка.Ссылка <> &ИсключаемыйДокументОплаты)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК ДокументыОплаты
	|		ПО ДокументыОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|			И Расшифровка.Ссылка = ДокументыОплаты.Ссылка
	|			И ДокументыОплаты.НДФЛПоВедомостям
	|			И ДокументыОплаты.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПеречисленияНалоговПоВедомостям.Ведомость КАК Ведомость,
	|	ПеречислениеНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ПеречислениеНалогов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(-ПеречислениеНалогов.СуммаОборот) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВТПеречислениеНалоговПоВедомостям
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Обороты(, ,
	|			Регистратор,
	|			Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ ВТВедомости КАК Т)
	|				И (&БезОтбораПоФизическимЛицам ИЛИ ФизическоеЛицо В (&ФизическиеЛица))) КАК ПеречислениеНалогов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыПеречисленияНалоговПоВедомостям КАК ДокументыПеречисленияНалоговПоВедомостям
	|		ПО ПеречислениеНалогов.Регистратор = ДокументыПеречисленияНалоговПоВедомостям.ДокументОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПеречисленияНалоговПоВедомостям.Ведомость,
	|	ПеречислениеНалогов.РегистрацияВНалоговомОргане,
	|	ПеречислениеНалогов.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.Ведомость,
	|	Налоги.ФормаОплаты,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Налоги.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ Налоги.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	СУММА(Налоги.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТНалогиКПеречислению
	|ИЗ
	|	ВТДанныеВедомостейНалоги КАК Налоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК Ведомости
	|		ПО Налоги.Ведомость = Ведомости.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииОрганизацийВНалоговыхОрганах КАК РегистрацииОрганизацийВНалоговыхОрганах
	|		ПО Ведомости.Организация = РегистрацииОрганизацийВНалоговыхОрганах.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Налоги.Ведомость,
	|	Налоги.ФормаОплаты,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Налоги.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ Налоги.РегистрацияВНалоговомОргане
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПеречислениеНалоговПоВедомостям.СуммаОплаты, 0) > НалогиКПеречислению.Сумма
	|			ТОГДА НалогиКПеречислению.Сумма
	|		ИНАЧЕ ЕСТЬNULL(ПеречислениеНалоговПоВедомостям.СуммаОплаты, 0)
	|	КОНЕЦ КАК СуммаОплаты,
	|	ЕСТЬNULL(ОшибкиПеречисления.Ошибка, ЛОЖЬ) КАК ОшибкаПеречисления,
	|	НалогиКПеречислению.*
	|ПОМЕСТИТЬ ВТСостояниеНалоговПоВедомостям
	|ИЗ
	|	ВТНалогиКПеречислению КАК НалогиКПеречислению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеречислениеНалоговПоВедомостям КАК ПеречислениеНалоговПоВедомостям
	|		ПО НалогиКПеречислению.Ведомость = ПеречислениеНалоговПоВедомостям.Ведомость
	|			И НалогиКПеречислению.РегистрацияВНалоговомОргане = ПеречислениеНалоговПоВедомостям.РегистрацияВНалоговомОргане
	|			И НалогиКПеречислению.ФизическоеЛицо = ПеречислениеНалоговПоВедомостям.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиПеречисления КАК ОшибкиПеречисления
	|		ПО НалогиКПеречислению.Ведомость = ОшибкиПеречисления.Ведомость
	|			И НалогиКПеречислению.ФизическоеЛицо = ОшибкиПеречисления.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДокументыПеречисленияНалоговПоВедомостям;
	|УНИЧТОЖИТЬ ВТПеречислениеНалоговПоВедомостям;
	|УНИЧТОЖИТЬ ВТНалогиКПеречислению;
	|УНИЧТОЖИТЬ ВТОшибкиПеречисления;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расшифровка.Ведомость,
	|	Заявка.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Заявка.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ Заявка.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	МАКСИМУМ(Заявка.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаявкиВедомостей
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК ДанныеВедомостей
	|		ПО Расшифровка.Ведомость = ДанныеВедомостей.Ведомость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|		ПО Расшифровка.Ссылка = Заявка.Ссылка
	|			И Заявка.Проведен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииОрганизацийВНалоговыхОрганах КАК РегистрацииОрганизацийВНалоговыхОрганах
	|		ПО Заявка.Организация = РегистрацииОрганизацийВНалоговыхОрганах.Организация
	|ГДЕ
	|	Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|	ИЛИ (Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|		И Заявка.НДФЛПоВедомостям)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расшифровка.Ведомость,
	|	Заявка.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Заявка.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ Заявка.РегистрацияВНалоговомОргане
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРегистрацииОрганизацийВНалоговыхОрганах";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура формирует данные для заполнения и расшифровку платежа платежного документа по договору займа сотруднику.
//
// Параметры:
//	Договор - ДокументСсылка.ДоговорЗаймаСотруднику - Договор займа, по которому формируется платежный документ.
//	ДанныеЗаполнения - Структура - Структура основания для заполнения документа.
//	РасшифровкаПлатежа - ТаблицаЗначений, ТабличнаяЧасть - Расшифровка платежа платежного документа.
//	ЭтоПоступление - Булево - Признак, определяющий направление движение денежных средств.
//	ТипДокумента - Строка - Тип формируемого документа. Применяется для поиска образца при заполнении расшифровки платежа.
//
Процедура ЗаполнитьПоДоговоруЗаймаСотруднику(Знач Договор, ДанныеЗаполнения, РасшифровкаПлатежа,
		ЭтоПоступление, ТипДокумента = "ПриходныйКассовыйОрдер") Экспорт
	
	ДанныеЗаполнения = ДанныеЗаполненияДокументаДДСПоДоговоруЗаймаСотруднику(Договор, ЭтоПоступление, ТипДокумента);
	РасшифровкаПлатежа.Загрузить(ДанныеЗаполнения.РасшифровкаПлатежа);
	ДанныеЗаполнения.Вставить("СуммаДокумента", РасшифровкаПлатежа.Итог("Сумма"));
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДоговорЗаймаСотруднику = Договор;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает данные заполнения платежного документа по договору займа сотруднику.
//
// Параметры:
//	Договор - ДокументСсылка.ДоговорЗаймаСотруднику - Договор займа, по которому формируется платежный документ.
//	ЭтоПоступление - Булево - Признак, определяющий направление движение денежных средств.
//	ТипДокумента - Строка - Тип формируемого документа. Применяется для поиска образца при заполнении расшифровки платежа.
//
// Возвращаемое значение:
//	Структура - Данные заполнения платежного документа.
Функция ДанныеЗаполненияДокументаДДСПоДоговоруЗаймаСотруднику(Договор, ЭтоПоступление = Ложь,
		ТипДокумента = "ПриходныйКассовыйОрдер") Экспорт
	
	ДанныеЗаполнения = ДанныеШапкиДокументаДДСПоДоговоруЗаймаСотруднику(Договор, ЭтоПоступление);
	РасшифровкаПлатежа = ДанныеРасшифровкиПлатежаДокументаДДСПоДоговоруЗаймаСотруднику(ДанныеЗаполнения, ЭтоПоступление, , ТипДокумента);
	ДанныеЗаполнения.Вставить("РасшифровкаПлатежа",РасшифровкаПлатежа);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Функция возвращает данные расшифровки платежа платежного документа по договору займа сотруднику.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Структура основания для заполнения документа.
//	ЭтоПоступление - Булево - Признак, определяющий направление движение денежных средств.
//	ДокументИсключение - ДокументСсылка.РасходныйКассовыйОрдер,
//                       ДокументСсылка.СписаниеБезналичныхДенежныхСредств,
//                       ДокументСсылка.ПриходныйКассовыйОрдер,
//                       ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств - Документ, движения которого следует исключить.
//	ТипДокумента - Строка - Тип формируемого документа. Применяется для поиска образца при заполнении расшифровки платежа.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Данные заполнения расшифровки платежа.
Функция ДанныеРасшифровкиПлатежаДокументаДДСПоДоговоруЗаймаСотруднику(ДанныеЗаполнения, ЭтоПоступление = Ложь, 
		ДокументИсключение = Неопределено, ТипДокумента = "ПриходныйКассовыйОрдер") Экспорт
	
	ДатаАктуальности = ?(ДанныеЗаполнения.Свойство("Дата"), ДанныеЗаполнения.Дата, КонецДня(ТекущаяДатаСеанса()));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДанныеЗаполнения.Свойство("ДоговорЗаймаСотруднику") Тогда
		ДействующиеДоговора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ДанныеЗаполнения.ДоговорЗаймаСотруднику);
	Иначе
		ДействующиеДоговора = ЗаймыСотрудникам.ДействующиеДоговорыЗаймаПоФизическомуЛицу(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ПодотчетноеЛицо,
			ДатаАктуальности,
			НЕ ЭтоПоступление);
	КонецЕсли;
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("ЗаявкаНаРасходованиеДенежныхСредств", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));
	РасшифровкаПлатежа.Колонки.Добавить("ДоговорЗаймаСотруднику", Новый ОписаниеТипов("ДокументСсылка.ДоговорЗаймаСотруднику"));
	РасшифровкаПлатежа.Колонки.Добавить("ТипСуммыКредитаДепозита", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСуммГрафикаКредитовИДепозитов"));
	РасшифровкаПлатежа.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДвиженияДенежныхСредств", Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	
	Если ДействующиеДоговора = Неопределено Тогда
		Возврат РасшифровкаПлатежа;
	КонецЕсли;
	
	Если ЭтоПоступление Тогда
		
		СтатьиДДС = СтатьиДДСЗаймовСотрудникуПоУмолчанию(ДатаАктуальности, ДокументИсключение, ТипДокумента);
		
		Для Каждого Договор Из ДействующиеДоговора Цикл
			
			Задолженность = ЗаймыСотрудникам.ОстатокЗадолженности(Договор, ДатаАктуальности, ДокументИсключение);
			
			Если Задолженность.СуммаЗайма > 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.ДоговорЗаймаСотруднику = Договор;
				НоваяСтрока.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг;
				НоваяСтрока.Сумма = Задолженность.СуммаЗайма;
				НоваяСтрока.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДвиженияОсновногоДолга;
			КонецЕсли;
			
			Если Задолженность.Проценты > 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.ДоговорЗаймаСотруднику = Договор;
				НоваяСтрока.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты;
				НоваяСтрока.Сумма = Задолженность.Проценты;
				НоваяСтрока.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДвиженияПроцентов;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ЗаявкиНаРасходованиеДС = Новый Соответствие;
		
		Если ДанныеЗаполнения.Свойство("ОплатаПоЗаявкам") И ДанныеЗаполнения.ОплатаПоЗаявкам Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств,
			|	ДенежныеСредстваКВыплате.ДоговорЗаймаСотруднику
			|ИЗ
			|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
			|ГДЕ
			|	ДенежныеСредстваКВыплате.ДоговорЗаймаСотруднику В (&СписокДоговоров)";
			
			Запрос.УстановитьПараметр("СписокДоговоров", ДействующиеДоговора);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ЗаявкиНаРасходованиеДС.Вставить(Выборка.ДоговорЗаймаСотруднику, Выборка.ЗаявкаНаРасходованиеДенежныхСредств);
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого Договор Из ДействующиеДоговора Цикл
			
			Остаток = ЗаймыСотрудникам.ОстатокНевыданныхСумм(Договор, ДатаАктуальности, ДокументИсключение);
			
			Если Остаток > 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.ЗаявкаНаРасходованиеДенежныхСредств = ЗаявкиНаРасходованиеДС[Договор];
				НоваяСтрока.ДоговорЗаймаСотруднику = Договор;
				НоваяСтрока.Сумма = Остаток;
				НоваяСтрока.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РасшифровкаПлатежа;
	
КонецФункции

// Функция возвращает структуру статей ДДС для заполнения платежного документа. Поиск статьи ДДС 
// выполняется по хозяйственной операции и типу документа.
//
// Параметры:
//    ДатаАктуальности - Дата - Дата, на которую требуется получить статьи ДДС.
//    ДокументИсключение - ДокументСсылка.РасходныйКассовыйОрдер,
//                       ДокументСсылка.СписаниеБезналичныхДенежныхСредств,
//                       ДокументСсылка.ПриходныйКассовыйОрдер,
//                       ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств - Документ, движения которого следует исключить.
//    ТипДокумента - Строка - Тип формируемого документа. Применяется для поиска образца при заполнении расшифровки платежа.
//
// Возвращаемое значение:
//    Структура - Структура статей ДДС.
Функция СтатьиДДСЗаймовСотрудникуПоУмолчанию(ДатаАктуальности, ДокументИсключение = Неопределено,
		ТипДокумента = "ПриходныйКассовыйОрдер") Экспорт
	
	СтатьяДвиженияОсновногоДолга = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	СтатьяДвиженияПроцентов = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументИсключение);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расшифровка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвижения,
	|	Документ.Дата КАК Дата
	|ИЗ
	|	Документ.%ТипДокумента%.РасшифровкаПлатежа КАК Расшифровка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%ТипДокумента% КАК Документ
	|		ПО Расшифровка.Ссылка = Документ.Ссылка
	|ГДЕ
	|	Документ.Ссылка <> &Ссылка
	|	И Документ.Проведен
	|	И Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗаймаСотрудником)
	|	И Документ.Дата <= &ДатаАктуальности
	|	И Расшифровка.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И Расшифровка.ТипСуммыКредитаДепозита = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТипДокумента%", ТипДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтатьяДвиженияОсновногоДолга = Выборка.СтатьяДвижения;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расшифровка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвижения,
	|	Документ.Дата КАК Дата
	|ИЗ
	|	Документ.%ТипДокумента%.РасшифровкаПлатежа КАК Расшифровка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%ТипДокумента% КАК Документ
	|		ПО Расшифровка.Ссылка = Документ.Ссылка
	|ГДЕ
	|	Документ.Ссылка <> &Ссылка
	|	И Документ.Проведен
	|	И Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗаймаСотрудником)
	|	И Документ.Дата <= &ДатаАктуальности
	|	И Расшифровка.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И Расшифровка.ТипСуммыКредитаДепозита = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТипДокумента%", ТипДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтатьяДвиженияПроцентов = Выборка.СтатьяДвижения;
	КонецЕсли;
	
	Возврат Новый Структура("СтатьяДвиженияОсновногоДолга, СтатьяДвиженияПроцентов", СтатьяДвиженияОсновногоДолга, СтатьяДвиженияПроцентов);
	
КонецФункции
//-- НЕ УТ

// Заполняет таблицу остатками денежных средств к выплате по заявкам
//
// Параметры:
//    ДанныеОтбора - Структура - содержит значения отбора заявок
//    ТабличнаяЧасть - ДанныеФормыКоллекция - заполняемая таблица.
//
Процедура ЗаполнитьПоОстаткамЗаявокНаРасходованиеДенежныхСредств(ДанныеОтбора, ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыПересчета.Кратность / (КурсВалюты.Кратность * КурсВалютыПересчета.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДатаСеанса, ) КАК КурсВалюты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДатаСеанса, Валюта = &Валюта) КАК КурсВалютыПересчета
	|	ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыПересчета.Курс <> 0
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	Заявка.Номер  КАК НомерЗаявки,
	|	Заявка.Дата   КАК ДатаЗаявки,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаВВалюте,
	|	ДенежныеСредства.СуммаОстаток * КурсыВалют.КоэффициентПересчета КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		Организация = &Организация
	|		И Получатель = &Получатель
	|		И БанковскийСчетКасса В (&БанковскиеСчетаКассы)) КАК ДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО Заявка.Ссылка = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|	ПО Заявка.Валюта = КурсыВалют.Валюта
	|	
	|ГДЕ
	|	Заявка.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И Заявка.ХозяйственнаяОперацияПоЗарплате <> &ХозяйственнаяОперация
	|	И (Заявка.ФормаОплатыЗаявки = &ФормаОплаты ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (Заявка.Валюта = &Валюта ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|	И Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	Заявка.Номер  КАК НомерЗаявки,
	|	Заявка.Дата   КАК ДатаЗаявки,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаВВалюте,
	|	ДенежныеСредства.СуммаОстаток * КурсыВалют.КоэффициентПересчета КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		Организация = &Организация
	|		И Получатель = &Получатель
	|		И БанковскийСчетКасса В (&БанковскиеСчетаКассы)) КАК ДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО Заявка.Ссылка = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|	ПО Заявка.Валюта = КурсыВалют.Валюта
	|	
	|ГДЕ
	|	Заявка.ХозяйственнаяОперацияПоЗарплате = &ХозяйственнаяОперация
	|	И Заявка.ХозяйственнаяОперация <> &ХозяйственнаяОперация
	|	И (Заявка.ФормаОплатыЗаявки = &ФормаОплаты ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (Заявка.Валюта = &Валюта ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|	И Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|";
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Валюта", ДанныеОтбора.Валюта);
	Запрос.УстановитьПараметр("Организация", ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("ФормаОплаты", ДанныеОтбора.ФормаОплаты);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ДанныеОтбора.ХозяйственнаяОперация);
	
	БанковскиеСчетаКассы = Новый Массив;
	БанковскиеСчетаКассы.Добавить(ДанныеОтбора.БанковскийСчетКасса);
	БанковскиеСчетаКассы.Добавить(Неопределено);
	Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
	
	Получатель = Неопределено;
	Если ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		Получатель = ДанныеОтбора.ПодотчетноеЛицо;
		
	ИначеЕсли ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		Если ДанныеОтбора.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтбора.БанковскийСчетПолучатель, "Владелец");
		ИначеЕсли ДанныеОтбора.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтбора.КассаПолучатель, "Владелец");
		КонецЕсли;
	Иначе
		Получатель = ДанныеОтбора.Контрагент;
	КонецЕсли;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	
	ТабличнаяЧасть.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ПредставлениеЗаявки = СтрШаблон(" %1 " + НСтр("ru='от %2'"), Выборка.НомерЗаявки, Формат(Выборка.ДатаЗаявки, "ДЛФ=D"));
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет документ на основании распоряжения на перемещение денежных средств.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств - Документ - основание
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличныеЧасти - Табличная часть "Расшифровка платежа" документа.
//
Процедура ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств(
	Знач ДокументОснование,
	ДокументОбъект,
	ДанныеЗаполнения,
	РасшифровкаПлатежа = Неопределено
	) Экспорт
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК РаспоряжениеНаПеремещениеДенежныхСредств,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Статус КАК Статус,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка)
	|		) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.Касса
	|	КОНЕЦ КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
	|		) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК КассаПолучатель,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк)
	|		) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	//++ НЕ УТ
	|	ДанныеДокумента.ПлатежиПо275ФЗ,
	|	ДанныеДокумента.ДоговорСЗаказчиком,
	|	ДанныеДокумента.ТипПлатежаФЗ275,
	//-- НЕ УТ
	|
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаДокумента
	|ИЗ
	|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|			ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|		) КАК ДенежныеСредства
	|	ПО
	|		ИСТИНА
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (&МассивОпераций)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	МассивОпераций = Новый Массив;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
		ПредставлениеДокумента = НСтр("ru = 'Приходный кассовый ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		ПредставлениеДокумента = НСтр("ru = 'Расходный кассовый ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
		ПредставлениеДокумента = НСтр("ru = 'Списание безналичных ДС'");
		
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить %1 на основании документа %2'"),
			ПредставлениеДокумента,
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Выборка.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
			Текст = НСтр("ru = 'Распоряжение на перемещение денежных средств не утверждено к оплате'");
			ВызватьИсключение Текст;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств()

// Процедура заполняет документ на основании уведомления о зачислении валюты
//
// Параметры:
//	ДокументОснование - ДокументСсылка.УведомлениеОЗачисленииВалюты - Документ - основание
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения.
//
Процедура ЗаполнитьДокументПоУведомлениюОЗачисленииВалюты(
	Знач ДокументОснование,
	ДокументОбъект,
	ДанныеЗаполнения
	) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже) КАК ТипПлатежногоДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.БанковскийСчет.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК УведомлениеОЗачисленииВалюты,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчет.ОсновнойБанковскийСчет КАК БанковскийСчетПолучатель,
	|
	|	ДенежныеСредства.СуммаОстаток КАК СуммаДокумента
	|ИЗ
	|	Документ.УведомлениеОЗачисленииВалюты КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|			ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|		) КАК ДенежныеСредства
	|	ПО
	|		ИСТИНА
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить ""Списание безналичных ДС"" на основании документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет статью ДДС в шапке документа по хозяйственной операции.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция.
//
Процедура ЗаполнитьСтатьюДвиженияДенежныхСредств(ДокументОбъект, ДанныеЗаполнения, ХозяйственнаяОперация) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	   И ДанныеЗаполнения.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
		СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
			
			Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты 
				И ДанныеЗаполнения.Свойство("ХозяйственнаяОперацияПоЗарплате") Тогда
				
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",
					ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперацияПоЗарплате));
					
			Иначе
					
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",
					ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация));
					
			КонецЕсли;
			
		Иначе
			ДокументОбъект.СтатьяДвиженияДенежныхСредств =
				ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтатьюДвиженияДенежныхСредств()

//++ НЕ УТ

// Помещает во временное хранилище таблицу подтверждающих документов
//
// Параметры:
//    ТипПлатежаФЗ275 - СправочникСсылка.ТипыПлатежейФЗ275 - Тип платежа ФЗ275
//    ИдентификаторВладельца - УникальнйИдентификатор - Идентификатор формы для помещения результата
//    Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями, СправочникСсылка.ДоговорыКредитовИДепозитов - Договор по госконтракту
//
Функция ПодтверждающиеДокументыФЗ275(ТипПлатежаФЗ275, ИдентификаторВладельца, Договор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеСправочника.ВидДокумента КАК ВидДокумента,
	|	ДанныеСправочника.Файл         КАК Файл,
	|	ДанныеСправочника.Номер        КАК Номер,
	|	ДанныеСправочника.Дата         КАК Дата,
	|	ДанныеСправочника.Сумма        КАК Сумма
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.ПодтверждающиеДокументы КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Договор
	|	И &УказанДоговор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСправочника.ВидДокумента КАК ВидДокумента,
	|	ДанныеСправочника.Файл         КАК Файл,
	|	ДанныеСправочника.Номер        КАК Номер,
	|	ДанныеСправочника.Дата         КАК Дата,
	|	ДанныеСправочника.Сумма        КАК Сумма
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями.ПодтверждающиеДокументы КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Договор
	|	И &УказанДоговор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСправочника.ВидДокумента КАК ВидДокумента,
	|	ДанныеСправочника.Файл         КАК Файл,
	|	ДанныеСправочника.Номер        КАК Номер,
	|	ДанныеСправочника.Дата         КАК Дата,
	|	ДанныеСправочника.Сумма        КАК Сумма
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов.ПодтверждающиеДокументы КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Договор
	|	И &УказанДоговор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСправочника.ВидДокумента КАК ВидДокумента,
	|	НЕОПРЕДЕЛЕНО                   КАК Файл,
	|	НЕОПРЕДЕЛЕНО                   КАК Номер,
	|	НЕОПРЕДЕЛЕНО                   КАК Дата,
	|	НЕОПРЕДЕЛЕНО                   КАК Сумма
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275.ПодтверждающиеДокументы КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &ТипПлатежаФЗ275
	|	И НЕ &УказанДоговор
	|";
	
	Запрос.УстановитьПараметр("ТипПлатежаФЗ275", ТипПлатежаФЗ275);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("УказанДоговор", ЗначениеЗаполнено(Договор));
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), ИдентификаторВладельца);;
	
КонецФункции
//-- НЕ УТ

// Функция формирует текст строки "В том числе НДС" платежа.
//
// Параметры:
//    ВалютаДокумента - Число - Валюта документа
//    РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть Расшифровка платежа
//    ДобавлятьТекстВТомЧисле - Булево - Добавлять строку "В т.ч." в текст платежа.
//
// Возвращаемое значение:
//    Строка - Текст суммы НДС платежа.
//
Функция ТекстСуммаНДСПлатежа(ВалютаДокумента, РасшифровкаПлатежа, ДобавлятьТекстВТомЧисле) Экспорт
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		ТаблицаНДС = РасшифровкаПлатежа.Скопировать(, "СтавкаНДС, СуммаНДС");
	Иначе
		ТаблицаНДС = РасшифровкаПлатежа.Выгрузить(, "СтавкаНДС, СуммаНДС");
	КонецЕсли;
	ТаблицаНДС.Свернуть("СтавкаНДС", "СуммаНДС");
	
	Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ПредставлениеВалюты = "руб.";
	Иначе
		ПредставлениеВалюты = СокрЛП(ВалютаДокумента);
	КонецЕсли;
	
	ТекстНазначениеПлатежаНДС = "";
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			Продолжить;
		КонецЕсли;
		ТекстНазначениеПлатежаНДС = ТекстНазначениеПлатежаНДС
			+ ?(ПустаяСтрока(ТекстНазначениеПлатежаНДС), "", ", ")
			+ НСтр("ru = 'НДС'") + " (" + СтрокаТаблицы.СтавкаНДС + ") "
			+ Формат(СтрокаТаблицы.СуммаНДС, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=") + " " + ПредставлениеВалюты;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТекстНазначениеПлатежаНДС) Тогда
		ТекстНазначениеПлатежаНДС = НСтр("ru = 'Без налога (НДС)'");
	Иначе
		Если ДобавлятьТекстВТомЧисле Тогда
			ТекстНазначениеПлатежаНДС = НСтр("ru = 'В т.ч.'") + " " + ТекстНазначениеПлатежаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНазначениеПлатежаНДС;
	
КонецФункции

// Процедура заполняет документ на основании договора кредита (депозита).
//
// Параметры:
//	ДоговорКредитаДепозита - СправочникСсылка.ДоговорыКредитовИДепозитов - Договор - основание
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//  ЭтоПоступление - Булево - вид движения денежных средств.
//
Процедура ЗаполнитьПоДоговоруКредитаДепозита(Знач ДоговорКредитаДепозита, ДанныеЗаполнения, РасшифровкаПлатежа, ЭтоПоступление) Экспорт
	
	ДанныеЗаполнения = Справочники.ДоговорыКредитовИДепозитов.ДанныеЗаполненияДокументаДДС(ДоговорКредитаДепозита, ЭтоПоступление);
	РасшифровкаПлатежа.Загрузить(ДанныеЗаполнения.РасшифровкаПлатежа);
	ДанныеЗаполнения.Вставить("СуммаДокумента", РасшифровкаПлатежа.Итог("Сумма"));
	
КонецПроцедуры

// Очищает банковский счет организации, если он принадлежит другой организации.
// Заполняет по умолчанию, если банковский счет не заполнен.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Проверяемый банковский счет
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
//
Процедура ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Знач Организация, БанковскийСчет, ФормаОплаты = Неопределено, НаправлениеДеятельности = Неопределено) Экспорт
	
	ВладелецСчета = Неопределено;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВладелецСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Организация <> ВладелецСчета Тогда
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ФормаОплаты = ФормаОплаты;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

// Очищает кассу организации, если она принадлежит другой организации.
// Заполняет по умолчанию, если касса не заполнена.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	Касса - СправочникСсылка.Кассы - Проверяемая касса
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
//
Процедура ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Знач Организация, Касса, ФормаОплаты = Неопределено, НаправлениеДеятельности = Неопределено) Экспорт
	
	ВладелецКассы = Неопределено;
	Если ЗначениеЗаполнено(Касса) Тогда
		ВладелецКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Организация <> ВладелецКассы Тогда
		Касса = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация 			= Организация;
	СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
	СтруктураПараметров.Касса 					= Касса;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

// Очищает реквизиты платежей в бюджет после проверки даты применения Приказа 107н 
//
// Параметры:
//	Объект - ДокументСсылка - Документ оплаты.
//	ПредыдущийПериод - Дата - исходный период (до изменения)
//	НовыйПериод - Дата - новый период.
//
Процедура ПриИзмененииПравилПлатежейВБюджет(Объект, ПредыдущийПериод, НовыйПериод) Экспорт
	ДатаНачалаПримененияПриказа107н = Константы.ДатаНачалаПримененияПриказа107н.Получить();
	
	ДействовалиНовыеПравила = ПредыдущийПериод >= ДатаНачалаПримененияПриказа107н;
	ДействуютНовыеПравила   = НовыйПериод >= ДатаНачалаПримененияПриказа107н;
	
	Если ДействовалиНовыеПравила <> ДействуютНовыеПравила Тогда
		Объект.КодОКАТО = "";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательНомера = "";
		Объект.ПоказательДаты = "";
		Объект.ПоказательТипа = "";
	КонецЕсли;
КонецПроцедуры

// Выбирает перечень КПП подразделений организации
//
// Параметры:
//    Организация - СправочникСсылка.Организации - Организация, для которой определяет перечень КПП.
//
// Возвращаемое значение:
//    Массив - список КПП
//
Функция СписокКППОрганизации(Организация) Экспорт
	
	СписокВыбораКПП = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Регистрации.РегистрацияВНалоговомОргане.КПП, """")  КАК КПП,
	|	ЕСТЬNULL(Регистрации.Подразделение.Наименование, """")       КАК Подразделение,
	|	Регистрации.РегистрацияВНалоговомОргане                      КАК Ссылка
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|ГДЕ
	|	Регистрации.Организация = &Организация
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Организации.РегистрацияВНалоговомОргане.КПП, ""0""),
	|	Организации.Наименование,
	|	Организации.РегистрацияВНалоговомОргане
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.ОбособленноеПодразделение
	|	И НЕ Организации.ПометкаУдаления
	|	И Организации.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Регистрации.РегистрацияВНалоговомОргане.КПП, """")  КАК КПП,
	|	ЕСТЬNULL(Регистрации.Подразделение.Наименование, """")       КАК Подразделение,
	|	Регистрации.РегистрацияВНалоговомОргане                      КАК Ссылка
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|ГДЕ
	|	Регистрации.Организация.ГоловнаяОрганизация = &Организация
	|	И Регистрации.Организация <> &Организация
	|
	|;
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.КПП КАК КПП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[1].Выбрать();
	Если Выборка.Следующий() Тогда
		КПП = Новый Структура("КПП, Подразделение, Ссылка");
		ЗаполнитьЗначенияСвойств(КПП, Выборка);
		СписокВыбораКПП.Добавить(КПП);
	КонецЕсли;
	
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.КПП) Тогда
			КПП = Новый Структура("КПП, Подразделение, Ссылка");
			ЗаполнитьЗначенияСвойств(КПП, Выборка);
			СписокВыбораКПП.Добавить(КПП);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбораКПП;
	
КонецФункции

// Возвращает валюту платежа по документу
//
// Параметры:
//  ФормаОплаты - Перечисление.ФормыОплаты - Форма оплаты документа.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизации - Банковский счет документа.
//  Касса - СправочникСсылка.Кассы - Касса документа.
//
// Возвращаемое значение:
//  Валюта - СправочникСсылка.Валюты - Валюта платежа.
Функция ПолучитьВалютуОплаты(ФормаОплаты = Неопределено, БанковскийСчет = Неопределено, Касса = Неопределено) Экспорт
	
	Если (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная ИЛИ НЕ ЗначениеЗаполнено(ФормаОплаты))
		И ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВалютаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
	ИначеЕсли (ФормаОплаты = Перечисления.ФормыОплаты.Наличная ИЛИ НЕ ЗначениеЗаполнено(ФормаОплаты))
		И ЗначениеЗаполнено(Касса) Тогда
		ВалютаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "ВалютаДенежныхСредств");
	Иначе
		ВалютаОплаты = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВалютаОплаты;
	
КонецФункции

// Создает платежные документы, либо формирует данные заполнения для создания одного платежного документа.
//
// Параметры:
//    СтрокиГрафика - Массив - Ключи записей графика платежей
//    ТипДокумента - Строка - Тип создаваемых документов. Если не задан, будет определен автоматически.
//
// Возвращаемое значение:
//    Структура:
//        ОткрыватьФормуПомощника - Булево - Признак необходимости открытия формы помощника создания документов
//        ДокументКСозданию - Структура - Данные заполнения единственного документа
//        ДлительнаяОперация - Структура - Длительная операция создания нескольких документов
//        АдресСтрокГрафика - Строка - Адрес временного хранилища, в котором содержатся оплачиваемые строки графика.
//
Функция ОплатитьСтрокиГрафика(СтрокиГрафика, ТипДокумента) Экспорт
	
	Результат = Новый Структура("ОткрыватьФормуПомощника, ДокументКСозданию, ДлительнаяОперация, АдресСтрокГрафика");
	
	//++ НЕ УТ
	Если ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейВСоответствииС275ФЗ") Тогда
		Если ТребуетсяКонтрольГОЗ(СтрокиГрафика) Тогда
			Результат.Вставить("ОткрыватьФормуПомощника", Истина);
			Результат.Вставить("ТребуетсяКонтрольГОЗ", Истина);
			Результат.Вставить("АдресСтрокГрафика", ПоместитьВоВременноеХранилище(СтрокиГрафика));
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	ДокументыКСозданию = ДокументыКСозданию(СтрокиГрафика, ТипДокумента);
	
	Если ДокументыКСозданию.Количество() = 1 Тогда
		Результат.Вставить("ОткрыватьФормуПомощника", Ложь);
		Результат.Вставить("ДокументКСозданию", ДокументыКСозданию[0]);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Формирование платежных документов'");
		ВыполняемыйМетод = "ДенежныеСредстваСервер.СоздатьПлатежи";
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументыКСозданию", ДокументыКСозданию);
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, СтруктураПараметров, ПараметрыВыполнения);
		Результат.Вставить("ДлительнаяОперация", ДлительнаяОперация);
		Результат.Вставить("ОткрыватьФормуПомощника", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТ
Функция ТребуетсяКонтрольГОЗ(СтрокиГрафика)
	
	СписокДляПроверкиГОЗ = Новый Массив;
	Для каждого СтрокаГрафика Из СтрокиГрафика Цикл
		ТипОбъектаОплаты = ТипЗнч(СтрокаГрафика.ОбъектОплаты);
		Если ТипОбъектаОплаты = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			СписокДляПроверкиГОЗ.Добавить(СтрокаГрафика.ОбъектОплаты);
		ИначеЕсли ТипОбъектаОплаты = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств") Тогда
			СписокДляПроверкиГОЗ.Добавить(СтрокаГрафика.ОбъектОплаты);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СписокДляПроверкиГОЗ.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокДляПроверкиГОЗ = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокДляПроверкиГОЗ);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&СписокДляПроверкиГОЗ)
		|	И ДанныеДокумента.ПлатежиПо275ФЗ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&СписокДляПроверкиГОЗ)
		|	И ДанныеДокумента.ПлатежиПо275ФЗ
		|");
		
	Запрос.УстановитьПараметр("СписокДляПроверкиГОЗ", СписокДляПроверкиГОЗ);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции
//-- НЕ УТ

// Формирует данные для создания документов на основании строк графика платежей
//
// Параметры:
//    СтрокиГрафика - Массив - Ключи записей графика платежей
//    ТипДокумента - Строка - Тип создаваемых документов. Если не задан, будет определен автоматически.
//    Группировать - Булево - Признак необходимости группировки строк графика.
//
// Возвращаемое значение:
//    Массив - Структуры с полями "Тип документа" и "Данные заполнения".
//
Функция ДокументыКСозданию(СтрокиГрафика, ТипДокумента, Группировать = Истина) Экспорт
	
	ДокументыКСозданию = Новый Массив;
	ТаблицаОплаты = РегистрыСведений.ГрафикПлатежей.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Для каждого СтрокаГрафика Из СтрокиГрафика Цикл
		НоваяСтрока = ТаблицаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГрафика);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ОбъектОплаты КАК ОбъектОплаты
	|ПОМЕСТИТЬ ТаблицаОплаты
	|ИЗ
	|	&ТаблицаОплаты КАК ТаблицаОплаты
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ОператорТаблицаОплаты = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	Для каждого Колонка Из ТаблицаОплаты.Колонки Цикл
		ОператорТаблицаОплаты.ВыбираемыеПоля.Добавить("ТаблицаОплаты." + Колонка.Имя);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("ТаблицаОплаты", ТаблицаОплаты);
	Запрос.Выполнить();
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить("
	|ВЫБРАТЬ
	|	ГрафикПлатежей.ОбъектОплаты КАК ОбъектОплаты,
	|	ГрафикПлатежей.ОбъектОплаты КАК ЗаказКлиента,
	|	ГрафикПлатежей.ОбъектОплаты КАК ЗаказПоставщику,
	|	ГрафикПлатежей.ОбъектОплаты КАК ОснованиеПлатежа,
	|	ГрафикПлатежей.ОбъектОплаты КАК ДоговорКредитаДепозита,
	|	ГрафикПлатежей.ОбъектОплаты КАК ДоговорЛизинга,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Справочник.ДоговорыКредитовИДепозитов ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).Партнер
	//++ НЕ УТ
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Справочник.ДоговорыЛизинга ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыЛизинга).Партнер
	//-- НЕ УТ
	|	КОНЕЦ КАК Партнер,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК БанковскийСчет,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК Касса,
	|	ГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	|	ГрафикПлатежей.ПлательщикПолучатель КАК ПлательщикПолучатель,
	|	ГрафикПлатежей.ПоступлениеСписание КАК ПоступлениеСписание,
	|	ГрафикПлатежей.ТипСуммы КАК ТипСуммы,
	|	ГрафикПлатежей.ТипСуммы КАК ТипСуммыКредитаДепозита,
	|	ГрафикПлатежей.ТипСуммы КАК ТипПлатежаПоЛизингу,
	|	ГрафикПлатежей.Организация КАК Организация,
	|	ГрафикПлатежей.Подразделение КАК Подразделение,
	|	ГрафикПлатежей.Валюта КАК Валюта,
	|	ГрафикПлатежей.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ХозяйственнаяОперацияПоЗарплате, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)) КАК ХозяйственнаяОперацияПоЗарплате,
	|	ЕСТЬNULL(ГрафикПлатежей.БанковскийСчетКасса.ВалютаДенежныхСредств, ГрафикПлатежей.Валюта) КАК ВалютаДенежныхСредств,
	|	ЕСТЬNULL(ГрафикПлатежей.БанковскийСчетКасса.ВалютаДенежныхСредств, ГрафикПлатежей.Валюта) КАК ВалютаДокумента,
	|	
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).БанковскийСчетКонтрагента
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Справочник.ДоговорыКредитовИДепозитов ТОГДА
	|			ВЫБОР ГрафикПлатежей.ТипСуммы
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг) ТОГДА
	|					ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчетКонтрагента
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты) ТОГДА
	|					ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчетПроцентов
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия) ТОГДА
	|					ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчетКомиссии
	|			КОНЕЦ
	//++ НЕ УТ
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Справочник.ДоговорыЛизинга ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыЛизинга).БанковскийСчетКонтрагента
	//-- НЕ УТ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	
	|	ГрафикПлатежей.Сумма КАК СуммаКОплате,
	|	ГрафикПлатежей.Сумма КАК Сумма,
	|	
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).СписокФизЛиц
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК СписокФизЛиц,
	|	
	|	ГрафикПлатежей.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|		ИНАЧЕ
	|			ГрафикПлатежей.ФормаОплаты
	|	КОНЕЦ КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|			) ТОГДА
	|			ЛОЖЬ
	|		КОГДА ГрафикПлатежей.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|			) И ЕСТЬNULL(ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ПеречислениеВБюджет, ЛОЖЬ) ТОГДА
	|			ЛОЖЬ
	|		КОГДА ГрафикПлатежей.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|			И ГрафикПлатежей.ОбъектОплаты ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			И ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).СписокФизЛиц ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК Группируется
	|
	|ПОМЕСТИТЬ ТаблицаОплатыПолная
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ГрафикПлатежей
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОплаты КАК ТаблицаОплаты
	|	ПО
	|		ТаблицаОплаты.ОбъектОплаты = ГрафикПлатежей.ОбъектОплаты
	|		И (ТаблицаОплаты.БанковскийСчетКасса = ГрафикПлатежей.БанковскийСчетКасса
	|			ИЛИ ГрафикПлатежей.БанковскийСчетКасса = НЕОПРЕДЕЛЕНО И ТаблицаОплаты.БанковскийСчетКасса = НЕОПРЕДЕЛЕНО)
	|		И ТаблицаОплаты.ДатаПлатежа = ГрафикПлатежей.ДатаПлатежа
	|		И ТаблицаОплаты.ПоступлениеСписание = ГрафикПлатежей.ПоступлениеСписание
	|		И ТаблицаОплаты.ПлательщикПолучатель = ГрафикПлатежей.ПлательщикПолучатель
	|		И ТаблицаОплаты.Организация = ГрафикПлатежей.Организация
	|		И ТаблицаОплаты.Валюта = ГрафикПлатежей.Валюта
	|		И ТаблицаОплаты.ТипСуммы = ГрафикПлатежей.ТипСуммы
	|;
	|////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ТаблицаОплатыПолная
	|ГДЕ
	|	ТаблицаОплатыПолная.ХозяйственнаяОперацияПоЗарплате <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|	И НЕ ТаблицаОплатыПолная.СписокФизЛиц
	|;
	|////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.ПлательщикПолучатель,
	|	ТаблицаОплаты.БанковскийСчетКонтрагента,
	|	ТаблицаОплаты.ХозяйственнаяОперация,
	|	ТаблицаОплаты.ПоступлениеСписание,
	|	ТаблицаОплаты.ФормаОплаты,
	|	ТаблицаОплаты.Валюта,
	|	ТаблицаОплаты.Группируется,
	|	СУММА(ТаблицаОплаты.СуммаКОплате) КАК СуммаКОплате
	|	
	|ИЗ
	|	ТаблицаОплатыПолная КАК ТаблицаОплаты
	|ГДЕ
	|	ТаблицаОплаты.Группируется
	|	И ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.ПлательщикПолучатель,
	|	ТаблицаОплаты.БанковскийСчетКонтрагента,
	|	ТаблицаОплаты.ХозяйственнаяОперация,
	|	ТаблицаОплаты.ПоступлениеСписание,
	|	ТаблицаОплаты.ФормаОплаты,
	|	ТаблицаОплаты.Валюта,
	|	ТаблицаОплаты.Группируется
	|;
	|////////////////////////////////////
	|");
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ");
	//++ НЕ УТ
	Если ИспользоватьНачислениеЗарплаты Тогда
		ЧастиЗапроса.Добавить("
		|ВЫБРАТЬ
		|	ТаблицаОплаты.ОбъектОплаты                                                  КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)  КАК ХозяйственнаяОперация,
		|	ТаблицаОплаты.Организация                                                   КАК Организация,
		|	ТаблицаОплаты.Подразделение                                                 КАК Подразделение,
		|	ТаблицаОплаты.БанковскийСчетКасса                                           КАК БанковскийСчет,
		|	Ведомости.Сотрудник.ФизическоеЛицо                                          КАК ПодотчетноеЛицо,
		|	Ведомости.БанковскийСчет                                                    КАК БанковскийСчетКонтрагента,
		|	Ведомости.Ссылка                                                            КАК Ведомость,
		|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств                                 КАК СтатьяДвиженияДенежныхСредств,
		|	ИСТИНА                                                                      КАК ОплатаПоЗаявкам,
		|	ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).НазначениеПлатежа КАК НазначениеПлатежа,
		|	НЕОПРЕДЕЛЕНО                                                                КАК ДатаАвансовогоОтчета,
		|	СУММА(Ведомости.КВыплате)                                                   КАК Сумма,
		|	СУММА(Ведомости.КВыплате)                                                   КАК СуммаДокумента,
		|	СУММА(Ведомости.КВыплате)                                                   КАК СуммаКОплате
		|ИЗ
		|	ТаблицаОплатыПолная КАК ТаблицаОплаты
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ВедомостиЗаявки
		|		ПО ВедомостиЗаявки.Ссылка = ТаблицаОплаты.ОбъектОплаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Ведомости
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ВедомостиСписания
		|				ПО Ведомости.Сотрудник.ФизическоеЛицо = ВедомостиСписания.Ссылка.ПодотчетноеЛицо
		|					И Ведомости.БанковскийСчет = ВедомостиСписания.Ссылка.БанковскийСчетКонтрагента
		|					И Ведомости.Ссылка = ВедомостиСписания.Ведомость
		|					И ВедомостиСписания.Ссылка.Проведен
		|			ПО ВедомостиЗаявки.Ведомость = Ведомости.Ссылка
		|ГДЕ
		|	ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
		|	И ВедомостиСписания.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплаты.ОбъектОплаты,
		|	ТаблицаОплаты.Организация,
		|	ТаблицаОплаты.Подразделение,
		|	ТаблицаОплаты.БанковскийСчетКасса,
		|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств,
		|	Ведомости.Сотрудник.ФизическоеЛицо,
		|	Ведомости.БанковскийСчет,
		|	Ведомости.Ссылка
		|");
		ЧастиЗапроса.Добавить("
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|");
		ЧастиЗапроса.Добавить("
		|ВЫБРАТЬ
		|	ТаблицаОплаты.ОбъектОплаты                                                  КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)  КАК ХозяйственнаяОперация,
		|	ТаблицаОплаты.Организация                                                   КАК Организация,
		|	ТаблицаОплаты.Подразделение                                                 КАК Подразделение,
		|	ТаблицаОплаты.БанковскийСчетКасса                                           КАК БанковскийСчет,
		|	Ведомости.ФизическоеЛицо                                                    КАК ПодотчетноеЛицо,
		|	Ведомости.БанковскийСчет                                                    КАК БанковскийСчетКонтрагента,
		|	Ведомости.Ссылка                                                            КАК Ведомость,
		|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств                                 КАК СтатьяДвиженияДенежныхСредств,
		|	ИСТИНА                                                                      КАК ОплатаПоЗаявкам,
		|	ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).НазначениеПлатежа КАК НазначениеПлатежа,
		|	НЕОПРЕДЕЛЕНО                                                                КАК ДатаАвансовогоОтчета,
		|	СУММА(Ведомости.КВыплате)                                                   КАК Сумма,
		|	СУММА(Ведомости.КВыплате)                                                   КАК СуммаДокумента,
		|	СУММА(Ведомости.КВыплате)                                                   КАК СуммаКОплате
		|ИЗ
		|	ТаблицаОплатыПолная КАК ТаблицаОплаты
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ВедомостиЗаявки
		|		ПО ВедомостиЗаявки.Ссылка = ТаблицаОплаты.ОбъектОплаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходовПеречислением.Выплаты КАК Ведомости
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ВедомостиСписания
		|				ПО Ведомости.ФизическоеЛицо = ВедомостиСписания.Ссылка.ПодотчетноеЛицо
		|					И Ведомости.БанковскийСчет = ВедомостиСписания.Ссылка.БанковскийСчетКонтрагента
		|					И Ведомости.Ссылка = ВедомостиСписания.Ведомость
		|					И ВедомостиСписания.Ссылка.Проведен
		|			ПО ВедомостиЗаявки.Ведомость = Ведомости.Ссылка
		|ГДЕ
		|	ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
		|	И ВедомостиСписания.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплаты.ОбъектОплаты,
		|	ТаблицаОплаты.Организация,
		|	ТаблицаОплаты.Подразделение,
		|	ТаблицаОплаты.БанковскийСчетКасса,
		|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств,
		|	Ведомости.ФизическоеЛицо,
		|	Ведомости.БанковскийСчет,
		|	Ведомости.Ссылка
		|");
		ЧастиЗапроса.Добавить("
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|");
	КонецЕсли;
	//-- НЕ УТ
	
	ЧастиЗапроса.Добавить("
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ОбъектОплаты                                                  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ
	|			ТаблицаОплаты.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаОплаты.Организация                                                   КАК Организация,
	|	ТаблицаОплаты.Подразделение                                                 КАК Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса                                           КАК БанковскийСчет,
	|	ЛицевыеСчета.ФизическоеЛицо                                                 КАК ПодотчетноеЛицо,
	|	ЛицевыеСчета.ЛицевойСчет                                                    КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО                                                                КАК Ведомость,
	|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств                                 КАК СтатьяДвиженияДенежныхСредств,
	|	ИСТИНА                                                                      КАК ОплатаПоЗаявкам,
	|	ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).НазначениеПлатежа КАК НазначениеПлатежа,
	|	ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты
	|		КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДатаАвансовогоОтчета  КАК ДатаАвансовогоОтчета,
	|	ЛицевыеСчета.Сумма                                                          КАК Сумма,
	|	ЛицевыеСчета.Сумма                                                          КАК СуммаДокумента,
	|	СУММА(ТаблицаОплаты.СуммаКОплате)                                           КАК СуммаКОплате
	|ИЗ
	|	ТаблицаОплатыПолная КАК ТаблицаОплаты
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ЛицевыеСчетаСотрудников КАК ЛицевыеСчета
	|		ПО ЛицевыеСчета.Ссылка = ТаблицаОплаты.ОбъектОплаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Списания
	|			ПО Списания.Ссылка.ПодотчетноеЛицо = ЛицевыеСчета.ФизическоеЛицо
	|				И Списания.Ссылка.БанковскийСчетКонтрагента = ЛицевыеСчета.ЛицевойСчет
	|				И Списания.ЗаявкаНаРасходованиеДенежныхСредств = ТаблицаОплаты.ОбъектОплаты
	|				И Списания.Ссылка.Проведен
	|ГДЕ
	|	(ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|		И НЕ &ИспользоватьНачислениеЗарплаты
	|	ИЛИ ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|		И ТаблицаОплаты.СписокФизЛиц)
	|	И Списания.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплаты.ОбъектОплаты,
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств,
	|	ЛицевыеСчета.ФизическоеЛицо,
	|	ЛицевыеСчета.ЛицевойСчет,
	|	ЛицевыеСчета.Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ
	|			ТаблицаОплаты.ХозяйственнаяОперация
	|	КОНЕЦ
	|ИТОГИ ПО
	|	ЗаявкаНаРасходованиеДенежныхСредств
	|");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса);
	Запрос.УстановитьПараметр("ИспользоватьНачислениеЗарплаты", ИспользоватьНачислениеЗарплаты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОплаты = Результат[1].Выгрузить();
	ВыборкаСтроки = Результат[1].Выбрать();
	ВыборкаГруппировки = Результат[2].Выбрать();
	ВыборкаВыплатыПоСписку = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОтборПлатежей = Новый Структура;
	Для Каждого Колонка Из Результат[2].Колонки Цикл
		ОтборПлатежей.Вставить(Колонка.Имя);
	КонецЦикла;
	ОтборПлатежей.Удалить("СуммаКОплате");
	
	Пока ВыборкаГруппировки.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборПлатежей, ВыборкаГруппировки);
		
		ОтобранныеПлатежи = ТаблицаОплаты.НайтиСтроки(ОтборПлатежей);
		
		Если Не ОтобранныеПлатежи.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
			ТипДокумента = ОпределитьТипСоздаваемогоДокумента(ВыборкаГруппировки);
		КонецЕсли;
		
		ДанныеЗаполнения = Неопределено;
		
		Если ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств")
			Или ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
			Или ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.УведомлениеОЗачисленииВалюты") Тогда
			
			МассивСсылок = Новый Массив;
			Для Каждого СтрокаПлатежа Из ОтобранныеПлатежи Цикл
				МассивСсылок.Добавить(СтрокаПлатежа.ОбъектОплаты);
			КонецЦикла;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДокументОснование", МассивСсылок);
			ДанныеЗаполнения.Вставить("БанковскийСчетКасса", ВыборкаГруппировки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("ПлательщикПолучатель", ВыборкаГруппировки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаГруппировки.ХозяйственнаяОперация);
			ДанныеЗаполнения.Вставить("Сумма", ВыборкаГруппировки.СуммаКОплате);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаГруппировки.Валюта);
			ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", МассивСсылок.Количество() > 1);
		Иначе
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаГруппировки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("Касса", ВыборкаГруппировки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("Контрагент", ВыборкаГруппировки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("Организация", ВыборкаГруппировки.Организация);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаГруппировки.Валюта);
			
			Если ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
				Если ТипДокумента = "ПриходныйКассовыйОрдер" Или ТипДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
					ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
				Иначе
					ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
				КонецЕсли;
			ИначеЕсли ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов
				//++ НЕ УТ
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю
				//-- НЕ УТ
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным Тогда
				
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаГруппировки.ХозяйственнаяОперация);
			КонецЕсли;
			ДанныеЗаполнения.Вставить("Основание", ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаОплаты.Скопировать(ОтобранныеПлатежи)));
		КонецЕсли;
		
		ДокументКСозданию = Новый Структура;
		ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
		ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ДокументыКСозданию.Добавить(ДокументКСозданию);
	КонецЦикла;
	
	Пока ВыборкаСтроки.НайтиСледующий(Новый Структура("Группируется", Ложь)) Цикл
		
		ДанныеЗаполнения = Неопределено;
		
		Если ТипЗнч(ВыборкаСтроки.ОбъектОплаты) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств")
			Или ТипЗнч(ВыборкаСтроки.ОбъектОплаты) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
			Или ТипЗнч(ВыборкаСтроки.ОбъектОплаты) = Тип("ДокументСсылка.УведомлениеОЗачисленииВалюты") Тогда
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(ВыборкаСтроки.ОбъектОплаты);
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДокументОснование", МассивСсылок);
			ДанныеЗаполнения.Вставить("БанковскийСчетКасса", ВыборкаСтроки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("ПлательщикПолучатель", ВыборкаСтроки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаСтроки.ХозяйственнаяОперация);
			ДанныеЗаполнения.Вставить("Сумма", ВыборкаСтроки.СуммаКОплате);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
			ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", Ложь);
			ДанныеЗаполнения.Вставить("ТипСуммы", ВыборкаСтроки.ТипСуммы);
			
		Иначе
			
			Если ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("Организация", ВыборкаСтроки.Организация);
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаСтроки.ХозяйственнаяОперация);
				ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
				ДанныеЗаполнения.Вставить("СуммаДокумента", ВыборкаСтроки.СуммаКОплате);
				
				ДанныеЗаполнения.Вставить("БанковскийСчетОтправитель", ВыборкаСтроки.ОбъектОплаты);
				ДанныеЗаполнения.Вставить("КассаОтправитель", ВыборкаСтроки.ОбъектОплаты);
				ДанныеЗаполнения.Вставить("Контрагент", ВыборкаСтроки.ОбъектОплаты);
				Если ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка Тогда
					ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаСтроки.ОбъектОплаты);
				Иначе
					ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаСтроки.БанковскийСчет);
				КонецЕсли;
				ДанныеЗаполнения.Вставить("Касса", ВыборкаСтроки.Касса);
				
			Иначе
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаСтроки.БанковскийСчетКасса);
				ДанныеЗаполнения.Вставить("Касса", ВыборкаСтроки.БанковскийСчетКасса);
				ДанныеЗаполнения.Вставить("Контрагент", ВыборкаСтроки.ПлательщикПолучатель);
				ДанныеЗаполнения.Вставить("Организация", ВыборкаСтроки.Организация);
				ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
				ДанныеЗаполнения.Вставить("Основание", ВыборкаСтроки.ОбъектОплаты);
			КонецЕсли;
		КонецЕсли;
		
		ДокументКСозданию = Новый Структура;
		ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
		ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ДокументыКСозданию.Добавить(ДокументКСозданию);
	КонецЦикла;
	
	Пока ВыборкаВыплатыПоСписку.Следующий() Цикл
		
		ПерваяСтрока = Истина;
		СуммаКОплате = ВыборкаВыплатыПоСписку.СуммаКОплате;
		Выборка = ВыборкаВыплатыПоСписку.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Сумма <= СуммаКОплате Тогда
				
				ДанныеЗаполнения = Новый Структура;
				Для каждого Колонка Из Результат[3].Колонки Цикл
					ДанныеЗаполнения.Вставить(Колонка.Имя);
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
				
				ДокументКСозданию = Новый Структура;
				ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
				ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
				ДокументыКСозданию.Добавить(ДокументКСозданию);
				
				СуммаКОплате = СуммаКОплате - Выборка.Сумма;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДокументыКСозданию;
	
КонецФункции

// Создает платежные документы
//
// Параметры:
//    Параметры - Структура - Содержит массив подготовленных данных для заполнения документов
//    АдресРезультата - Строка - Адрес временного хранилища, куда будет помещен массив ссылок на созданные документы.
//
Процедура СоздатьПлатежи(Параметры, АдресРезультата) Экспорт
	
	ДокументыКСозданию = Параметры.ДокументыКСозданию;
	КоличествоДокументов = ДокументыКСозданию.Количество();
	Инд = 1;
	
	СозданныеДокументы = Новый Массив;
	Для каждого ДанныеДокумента Из ДокументыКСозданию Цикл
		
		НовыйДокумент = Документы[ДанныеДокумента.ТипДокумента].СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДатаСеанса();
		НовыйДокумент.Заполнить(ДанныеДокумента.ДанныеЗаполнения);
		
		НовыйДокумент.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			Если НовыйДокумент.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения")
				И НовыйДокумент.ДополнительныеСвойства.ОшибкиЗаполнения <> "" Тогда
				Режим = РежимЗаписиДокумента.Запись;
			Иначе
				Режим = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
		Иначе
			Режим = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		НовыйДокумент.Записать(Режим);
		
		Если НовыйДокумент.Ссылка <> Неопределено Тогда
			СозданныеДокументы.Добавить(НовыйДокумент.Ссылка);
		КонецЕсли;
		
		Прогресс = Окр(Инд / КоличествоДокументов * 100);
		ДлительныеОперации.СообщитьПрогресс(Прогресс);
		
		Инд = Инд + 1;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СозданныеДокументы, АдресРезультата);
	
	КлючВременногоХранилища = "ПомощникФормированияПлатежныхДокументов";
	Если Параметры.Свойство("КлючВременногоХранилища") Тогда
		КлючВременногоХранилища = Параметры.КлючВременногоХранилища;
	КонецЕсли;
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, АдресРезультата, КлючВременногоХранилища);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет платежные документы
//
// Параметры:
//    СсылкиНаУдаление - Массив - Ссылки на удаляемые документы
//    АдресРезультата - Строка - Адрес временного хранилища, куда будут помещены ошибки при их наличии.
//
Процедура УдалитьПлатежи(СсылкиНаУдаление, АдресРезультата) Экспорт
	
	ДокументыКУдалению = Новый Массив;
	МассивПомеченныхНаУдаление = Новый Массив;
	СписокОшибок = Неопределено;
	ПрепятствующиеУдалению = Новый ТаблицаЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого СсылкаНаУдаление Из СсылкиНаУдаление Цикл
		ДокументОбъект = СсылкаНаУдаление.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок,
				"Объект.СозданныеДокументы",
				ОписаниеОшибки(),
				Неопределено);
			Продолжить;
		КонецПопытки;
		ДокументыКУдалению.Добавить(СсылкаНаУдаление);
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	ТабСсылок = НайтиПоСсылкам(ДокументыКУдалению);
	СтрСообщения = НСтр("ru='Имеются ссылки на объект %1 в %2. Документ не будет удален.'");
	Для каждого Ссылка Из ТабСсылок Цикл
		Если ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКРаспределениюРасчетовСКлиентами")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКРаспределениюРасчетовСПоставщиками")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКЗакрытиюМесяца")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.РеестрДокументов")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.СостоянияОбменСБанками")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ДокументыСОшибкамиПроверкиКонтрагентов")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ГрафикПлатежей")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ДанныеПервичныхДокументов")
			//++ НЕ УТ
			Или ТипЗнч(Ссылка[0]) = ТипЗнч(Ссылка[1])
			//-- НЕ УТ
			Тогда
				Продолжить;
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1]));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок,
			"Объект.СозданныеДокументы",
			ТекстОшибки,
			Неопределено);
		Индекс = ДокументыКУдалению.Найти(Ссылка[0]);
		Если Индекс <> Неопределено Тогда
			ДокументыКУдалению.Удалить(Индекс);
		КонецЕсли;
		МассивПомеченныхНаУдаление.Добавить(Ссылка[0]);
	КонецЦикла;
	
	Попытка
		УдалитьОбъекты(ДокументыКУдалению, Ложь);
	Исключение
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок,
			"Объект.СозданныеДокументы",
			ОписаниеОшибки(),
			Неопределено);
	КонецПопытки;
	
	Для каждого СсылкаНаУдаление Из МассивПомеченныхНаУдаление Цикл
		ДокументОбъект = СсылкаНаУдаление.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(СписокОшибок, АдресРезультата);
	
КонецПроцедуры

Функция ОпределитьТипСоздаваемогоДокумента(ДанныеОплаты)
	
	ТипДокумента = Неопределено;
	
	Если ДанныеОплаты.ПоступлениеСписание = Перечисления.ТипыДвиженияДенежныхСредств.Списание Тогда
		Если ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ТипДокумента = "СписаниеБезналичныхДенежныхСредств";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ТипДокумента = "РасходныйКассовыйОрдер";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			ТипДокумента = "ОперацияПоПлатежнойКарте";
		КонецЕсли;
	ИначеЕсли ДанныеОплаты.ПоступлениеСписание = Перечисления.ТипыДвиженияДенежныхСредств.Поступление Тогда
		Если ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ТипДокумента = "ПоступлениеБезналичныхДенежныхСредств";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ТипДокумента = "ПриходныйКассовыйОрдер";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			ТипДокумента = "ОперацияПоПлатежнойКарте";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

Процедура ЗаполнитьШапкуПоДаннымРасшифровки(Объект) Экспорт
	
	МассивПартнеры = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(
		Объект.РасшифровкаПлатежа.ВыгрузитьКолонку("Партнер"));
	Если МассивПартнеры.Количество() = 1 Тогда
		Объект.Партнер = МассивПартнеры[0];
	Иначе
		Объект.Партнер = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Определяет строки графика платежей, подлежащие оплате
//
// Параметры:
//    ОбъектыОплаты - Массив, ДокументСсылка - Оплачиваемые объекты
//
// Возвращаемое значение:
//    Массив - Ключи записей регистра График платежей
//
Функция СтрокиГрафикаКОплате(Знач ОбъектыОплаты) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектыОплаты) <> Тип("Массив") Тогда
		ОбъектОплаты = ОбъектыОплаты;
		ОбъектыОплаты = Новый Массив;
		ОбъектыОплаты.Добавить(ОбъектОплаты);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.ОбъектОплаты КАК ОбъектОплаты,
	|	ДанныеРегистра.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ДанныеРегистра.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеРегистра.ПлательщикПолучатель КАК ПлательщикПолучатель,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.ПоступлениеСписание КАК ПоступлениеСписание,
	|	ДанныеРегистра.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектОплаты В (&ОбъектыОплаты)
	|	И ДанныеРегистра.ДатаПлатежа <= &ТекущаяДата
	|;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеРегистра.ОбъектОплаты КАК ОбъектОплаты,
	|	ДанныеРегистра.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ДанныеРегистра.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеРегистра.ПлательщикПолучатель КАК ПлательщикПолучатель,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.ПоступлениеСписание КАК ПоступлениеСписание,
	|	ДанныеРегистра.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектОплаты В (&ОбъектыОплаты)
	|	И ДанныеРегистра.ДатаПлатежа > &ТекущаяДата
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|";
	
	Запрос.УстановитьПараметр("ОбъектыОплаты", ОбъектыОплаты);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		ИндексВыборки = 1;
	Иначе
		ИндексВыборки = 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[ИндексВыборки].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураКлюча = Новый Структура;
		Для каждого Колонка Из РезультатЗапроса[ИндексВыборки].Колонки Цикл
			СтруктураКлюча.Вставить(Колонка.Имя);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураКлюча, Выборка);
		
		КлючЗаписи = РегистрыСведений.ГрафикПлатежей.СоздатьКлючЗаписи(СтруктураКлюча);
		Результат.Добавить(КлючЗаписи);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбменСБанками

// Проверяет принадлежность хозяйственной операции к множеству операций по зарплате.
//
// Параметры:
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция.
//
// Возвращаемое значение:
//    Булево - Признак принадлежности.
//
Функция ОперацияПоЗарплате(ХозяйственнаяОперация) Экспорт
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
	
	Если МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выделяет в назначении платежа фиксированную часть без служебных символов, слов менее 2 символов, чисел.
//
// Параметры:
//    ВремСтрока - Строка - Преобразуемая строка.
//
// Возвращаемое значение:
//    Строка - Форматированная строка назначения.
//
Функция ФорматироватьНазначениеПлатежа(Знач ВремСтрока) Экспорт
	
	НедопустимыеСимволы = "0123456789""/\[]:;|=?*<>.,-_(){}+-=№@";
	
	Для Позиция = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		ВремСтрока = СтрЗаменить(ВремСтрока, Сред(НедопустимыеСимволы, Позиция, 1), " ");
	КонецЦикла;
	
	МассивСлов = РазложитьСтрокуНазначенияВМассивСлов(ВремСтрока);
	
	СтрокаРезультат = "";
	Для каждого Слово Из МассивСлов Цикл
		СтрокаРезультат = СтрокаРезультат + " " + Слово;
	КонецЦикла;
	
	Возврат СокрЛП(СтрокаРезультат);
	
КонецФункции

// Формирует назначение платежа для уплаты налогов
//
// Параметры:
//   КБК - Строка - КБК
//   ВидНалоговогоОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет - Вид налогового обязательства
//   Организация - СправочникСсылка.Организации - Организация
//   Период - Дата - Период
//   ПредставлениеНалоговогоПериода - Строка - Налоговый период строкой.
//
// Возвращаемое значение:
//  Строка - назначение платежа
//
Функция НазначениеПлатежаДляУплатыНалогов(КБК, ВидНалоговогоОбязательства, Организация = Неопределено, Знач Период = Неопределено, ПредставлениеНалоговогоПериода = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НазначениеПлатежа = "";
	Если ЗначениеЗаполнено(КБК) Тогда
		ВидНалога         = ДенежныеСредстваПовтИсп.ВидНалогаПоКБК(КБК);
		НазначениеПлатежа = ДенежныеСредстваПовтИсп.НазначениеПлатежаПоКБК(КБК);
		ДатаАктуальности  = Дата('20150101');
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставлениеНалоговогоПериода) И ВидНалоговогоОбязательства <> "Штраф" Тогда
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<Период>", ПредставлениеНалоговогоПериода);
	Иначе
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<Период>", "");
	КонецЕсли;
	
	// При уплате страховых взносов, как правило, требуется указывать регистрационный номер.
	КлючиРеквизитов = "РегистрационныйНомерПФР, ИПРегистрационныйНомерПФР, РегистрационныйНомерФСС, ИПРегистрационныйНомерФСС";
	РеквизитыОрганизации = ?(ЗначениеЗаполнено(Организация), ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, КлючиРеквизитов), Новый Структура(КлючиРеквизитов));
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ПФР>",    РеквизитыОрганизации.РегистрационныйНомерПФР);
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ПФР_ИП>", РеквизитыОрганизации.ИПРегистрационныйНомерПФР);
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ФСС>",    РеквизитыОрганизации.РегистрационныйНомерФСС);
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ФСС_ИП>", РеквизитыОрганизации.ИПРегистрационныйНомерФСС);
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "  ", " ");
	
	Возврат НазначениеПлатежа;
	
КонецФункции

Процедура РазобратьВыпискуБанка(ЭлектроннаяВыпискаБанка) Экспорт
	
	Перем ДеревоВыписки;
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаДеревоЗначений(ЭлектроннаяВыпискаБанка, ДеревоВыписки);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	КлиентБанк = Обработки.КлиентБанк.Создать();
	КлиентБанк.ЗаполнитьТаблицуСчетовЗагрузки();
	
	КлиентБанк.СоздаватьКонтрагентов = Истина;
	КлиентБанк.ПроводитьДокументы = Истина;
	
	СтрокаСчета = Неопределено;
	Если ДеревоВыписки.Строки.Количество() Тогда
		Выписки = ДеревоВыписки.Строки[0];
		
		Если Выписки.Строки.Количество() Тогда
			Выписка = Выписки.Строки[0];
			
			СтрокаНомерСчета = Выписка.Строки.Найти("Выписки.НомерСтроки.НомерСчета", "ПолныйПуть");
			Если СтрокаНомерСчета <> Неопределено Тогда
				
				СчетаВыписки = КлиентБанк.БанковскиеСчета.НайтиСтроки(Новый Структура("НомерСчета", СтрокаНомерСчета.Значение));
				Если СчетаВыписки.Количество() Тогда
					СтрокаСчета = СчетаВыписки[0];
					СтрокаСчета.АдресХранилищаФайла = ПоместитьВоВременноеХранилище(ДеревоВыписки, Новый УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаСчета <> Неопределено Тогда
		КлиентБанк.ЗагрузитьПлатежиПоСчету(СтрокаСчета, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиЗаполненияДокументов

// Функция формирует запрос по табличной части "Расшифровка платежа".
//
// Параметры:
//	РасшифровкаПлатежа - Табличная часть документа
//	Организация - СправочникСсылка.Организации - Организация документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
//	Запрос - запрос по табличной части.
//
Функция ЗапросПоТабличнойЧастиРасшифровкаПлатежа(РасшифровкаПлатежа, Организация, ХозяйственнаяОперация = Неопределено, ТипДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И &ИспользоватьСчетаНаОплатуКлиентам
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПроверкаСчетаНаОплату
	|
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ВЫБОР
	|	КОГДА ТаблицаДокумента.Заказ ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|		ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Справочник.ДоговорыМеждуОрганизациями) ТОГДА
	|		ТаблицаДокумента.Заказ.Организация НЕ В (&Организация) И ТаблицаДокумента.Заказ.ОрганизацияПолучатель НЕ В (&Организация)
	|	КОГДА ТаблицаДокумента.Заказ ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями ТОГДА
	|		ТаблицаДокумента.Заказ.Организация НЕ В (&Организация)
	|		 И ВЫРАЗИТЬ(ТаблицаДокумента.Заказ КАК Документ.ОтчетПоКомиссииМеждуОрганизациями).Комиссионер НЕ В (&Организация)
	|	КОГДА ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И &ИспользоватьСчетаНаОплатуКлиентам
	|	ТОГДА
	|		ВЫБОР КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СчетНаОплату КАК Документ.СчетНаОплатуКлиенту).Организация ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ТаблицаДокумента.СчетНаОплату КАК Документ.СчетНаОплатуКлиенту).Организация НЕ В(&Организация)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ТаблицаДокумента.Заказ.Организация ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ТаблицаДокумента.Заказ.Организация НЕ В(&Организация)
	|		КОНЕЦ
	|	КОНЕЦ
	|	//ОтборПоТипу
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	ТаблицаДокумента = РасшифровкаПлатежа.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	КолонкаЗаказИзДокумента = ТаблицаДокумента.Колонки.Найти("Заказ");
	КолонкаЗаказИзДокумента.Имя = "ЗаказИзДокумента";
	МассивДобавляемыхТипов = Новый Массив;
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"));
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	ТаблицаДокумента.Колонки.Добавить("Заказ", Новый ОписаниеТипов(КолонкаЗаказИзДокумента.ТипЗначения, МассивДобавляемыхТипов));
	ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку(КолонкаЗаказИзДокумента), "Заказ");
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьСчетаНаОплатуКлиентам", ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам"));
	
	Если ТипДокумента <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ОтборПоТипу","И НЕ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = &ТипДокумента");
		Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	КонецЕсли;
	
	ДоступныеОрганизации = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЗапросПоДоступнымОрганизациям = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		ЗапросПоДоступнымОрганизациям.УстановитьПараметр("Организация", Организация);
		
		ДоступныеОрганизации = ЗапросПоДоступнымОрганизациям.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ДоступныеОрганизации.Добавить(Организация);
	
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	
	Возврат Запрос;
	
КонецФункции // ЗапросПоТабличнойЧастиРасшифровкаПлатежа()

// Процедура проверяет заполнение табличной части "Расшифровка платежа".
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	СуммаДокумента - Число - Общая сумма документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Отказ - Булево - Признак отказа от продолжения работы
//	ФлагОбменСБанками - Булево - Признак использования при обмене с банками
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок.
//
Процедура ПроверитьЗаполнениеРасшифровкиПлатежа(
	ДокументОбъект,
	СуммаДокумента,
	ХозяйственнаяОперация,
	Отказ,
	ФлагОбменСБанками = Ложь,
	ОшибкиЗаполнения = ""
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	//++ НЕ УТ
	Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
	КонецЕсли; 
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДавальцу);
	//-- НЕ УТ
	
	Если МассивНепроверяемыхОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие сумм документа и табличной части.
	Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0
		И СуммаДокумента <> ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма")
	Тогда
		Текст = НСтр("ru = 'Сумма по строкам в табличной части должна равняться сумме документа'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст, ДокументОбъект, "РасшифровкаПлатежа[0].Сумма",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверки заявки на расходование денежных средств, указанной в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаявкуНаРасходованиеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
		И МассивНепроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) = Неопределено Тогда
		
		Если Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда
			
			Если Не ДокументОбъект.ОплатаПоЗаявкам Тогда
				Возврат;
			КонецЕсли;
		
			МассивЗаявок = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ЗаявкаНаРасходованиеДенежныхСредств");
			
			Если Не МассивЗаявок.Количество() Тогда
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Представление(ДанныеДокумента.Ссылка) КАК Заявка,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.Организация <> &Организация ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЕстьОтличияВОрганизации,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.ПланированиеСуммы В (
			|		ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ПустаяСсылка),
			|		ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа))
			|		И ДанныеДокумента.Валюта <> &Валюта ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЕстьОтличияВалюты,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЗаявкаНеУтвержденаКОплате
			|	
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В (&МассивЗаявок)
			|");
		
			Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
			Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
			Запрос.УстановитьПараметр("Валюта", ДокументОбъект.Валюта);
			Запрос.УстановитьПараметр("ДокументОплатыСсылка", ДокументОбъект.Ссылка);
			
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
				БанковскийСчетКасса = ДокументОбъект.Касса;
			ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
				БанковскийСчетКасса = ДокументОбъект.БанковскийСчет;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("БанковскийСчетКасса", БанковскийСчетКасса);
			
			ТаблицаПроверки = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаПроверки Из ТаблицаПроверки Цикл
				
				Если СтрокаПроверки.ЕстьОтличияВОрганизации Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Организация документа %1 не соответствует организации в %2'"),
						ДокументОбъект.Организация,
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
				Если СтрокаПроверки.ЕстьОтличияВалюты Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Валюта документа %1 не соответствует валюте в %2'"),
						ДокументОбъект.Валюта,
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
				Если СтрокаПроверки.ЗаявкаНеУтвержденаКОплате Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 не утверждена к оплате'"),
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаявкуНаРасходованиеДенежныхСредств()

// ВыборкаРеквизитыШапки - ВыборкаИзРезультатаЗапроса - Выборка
// Процедура проверки распоряжения на перемещение денежных средств, указанного в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивПроверяемыхОпераций = Новый Массив;
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
	   И МассивПроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств)
	Тогда
	
		Реквизиты = Документы.РаспоряжениеНаПеремещениеДенежныхСредств.РеквизитыДокумента(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств);
		Если Реквизиты.Организация <> ДокументОбъект.Организация Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Организация в распоряжении не соответствует организации документа %1'"),
				ДокументОбъект.Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Подразделение <> ДокументОбъект.Подразделение Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подразделение в распоряжении не соответствует подразделению документа %1'"),
				ДокументОбъект.Подразделение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
			
			Текст = НСтр("ru = 'Распоряжение на перемещение денежных средств не утверждено к оплате'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Валюта <> ДокументОбъект.Валюта Тогда
			
			Текст = НСтр("ru = 'Валюта распоряжения не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств()

// Процедура проверяет кассу получателя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьКассуПолучателя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.КассаПолучатель)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
			И ЗначениеЗаполнено(ДокументОбъект.Касса)
			И ДокументОбъект.Касса = ДокументОбъект.КассаПолучатель Тогда
			
			Текст = НСтр("ru = 'Одна и та же касса не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ);
		Иначе
			
			РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаПолучатель, "Владелец, ВалютаДенежныхСредств");
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И ДокументОбъект.Организация <> РеквизитыКассы.Владелец Тогда
				
				Текст = НСтр("ru = 'Организация кассы получателя не соответствует организации документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.ВалютаДенежныхСредств Тогда
				Текст = НСтр("ru = 'Валюта кассы получателя не соответствует валюте документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
				И ЗначениеЗаполнено(ДокументОбъект.Касса) И ТипЗнч(ДокументОбъект.КассаПолучатель) <> Тип("СправочникСсылка.КассыККМ") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ПолучателиПлатежейПриПеремещенииДС.ПолучательПлатежа КАК КассаПолучатель
					|ИЗ
					|	Справочник.Кассы.ПолучателиПлатежейПриПеремещенииДС КАК ПолучателиПлатежейПриПеремещенииДС
					|ГДЕ
					|	ПолучателиПлатежейПриПеремещенииДС.Ссылка = &Касса");
				Запрос.УстановитьПараметр("Касса", ДокументОбъект.Касса);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой()
					И РезультатЗапроса.Выгрузить().Найти(ДокументОбъект.КассаПолучатель) = Неопределено Тогда
					
					Текст = НСтр("ru = 'Касса получатель недоступна для перемещения денежных средств из кассы документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли;
			
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре.
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуПолучателя()

// Процедура проверяет кассу отправителя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьКассуОтправителя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.КассаОтправитель)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
			И ЗначениеЗаполнено(ДокументОбъект.Касса)
			И ДокументОбъект.Касса = ДокументОбъект.КассаОтправитель Тогда
			
			Текст = НСтр("ru = 'Одна и та же касса не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ);
		Иначе
			
			РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаОтправитель, "Владелец, ВалютаДенежныхСредств");
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И ДокументОбъект.Организация <> РеквизитыКассы.Владелец Тогда
				
					Текст = НСтр("ru = 'Организация кассы отправителя не соответствует организации документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаОтправитель",
						,
						Отказ);
			ИначеЕсли (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				Или ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
				И ДокументОбъект.Организация = РеквизитыКассы.Владелец Тогда
				
					Текст = НСтр("ru = 'Организация кассы отправителя должна отличаться от организации документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаОтправитель",
						,
						Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.ВалютаДенежныхСредств Тогда
				Текст = НСтр("ru = 'Валюта кассы отправителя не соответствует валюте документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре.
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуОтправителя()

// Процедура проверяет кассу ККМ, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьКассуККМ(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаККМ)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(ДокументОбъект.КассаККМ);
		Если ДокументОбъект.Организация <> РеквизитыКассыККМ.Организация Тогда
			Текст = НСтр("ru = 'Организация кассы ККМ не соответствует организации документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
		КонецЕсли;
		Если ДокументОбъект.Валюта <> РеквизитыКассыККМ.Валюта Тогда
			Текст = НСтр("ru = 'Валюта кассы ККМ не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуККМ()

// Процедура проверяет банковский счет получатель, указанный в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//	ФлагОбменСБанками - Булево - Признак использования при обмене с банками
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок.
//
Процедура ПроверитьБанковскийСчетПолучатель(ДокументОбъект, Отказ, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = "") Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетПолучатель)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)
		   И ДокументОбъект.БанковскийСчет = ДокументОбъект.БанковскийСчетПолучатель Тогда
		   
			Текст = НСтр("ru = 'Один и тот же банковский счет не может являться отправителем и получателем одновременно'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"БанковскийСчетПолучатель",
					,
					Отказ);
			КонецЕсли;
		Иначе
			
			РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчетПолучатель);
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			 И ДокументОбъект.Организация <> РеквизитыСчета.Организация Тогда
				Текст = НСтр("ru = 'Организация счета получателя не соответствует организации документа'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"БанковскийСчетПолучатель",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыСчета.Валюта Тогда
				Текст = НСтр("ru = 'Валюта счета получателя не соответствует валюте документа'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"БанковскийСчетПолучатель",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;
			
			// Проверка взаимосвязанности организации счета получателя с организацией кассы отправителя по организационной структуре.
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru='Организация счета получателя должна быть взаимосвязана с организацией счета отправителя по организационной структуре.'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли;
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru='Организация счета получателя не должна быть взаимосвязана с организацией счета отправителя по организационной структуре.'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьБанковскийСчетПолучатель()

// Процедура проверяет валюту конвертации, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//	ФлагОбменСБанками - Булево - Признак использования при обмене с банками
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок.
//
Процедура ПроверитьВалютуКонвертации(ДокументОбъект, Отказ, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = "") Экспорт
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
	   И ЗначениеЗаполнено(ДокументОбъект.Валюта)
	   И ЗначениеЗаполнено(ДокументОбъект.ВалютаКонвертации)
	Тогда
		
		Если ДокументОбъект.Валюта = ДокументОбъект.ВалютаКонвертации Тогда
			
			Текст = НСтр("ru = 'Валюта конвертации должна отличаться от валюты документа'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"ВалютаКонвертации",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Определяет, разрешены ли платежи без указания заявок на расходование денежных средств.
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - документ, для которого выполняется проверка.
//
// Возвращаемое значение:
//    Булево - Разрешены, или нет.
//
Функция РазрешеныПлатежиБезУказанияЗаявок(ДокументОбъект) Экспорт
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Реквизиты = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.Касса);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		Реквизиты =
			Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчет);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		
		Реквизиты =
			Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ДокументОбъект.ЭквайринговыйТерминал);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции // РазрешеныПлатежиБезУказанияЗаявок() 

// Процедура очищает неиспользуемые для хозяйственной операции реквизиты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	МассивВсехРеквизитов - Массив - Массив всех реквизитов документа, которые необходимо очищать
//	МассивРеквизитовОперации - Массив - Массив реквизитов документа, которые относятся к хозяйственной операции документа.
//
Процедура ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, Знач МассивВсехРеквизитов, Знач МассивРеквизитовОперации) Экспорт
	
	Для каждого ЭлементМассива Из МассивРеквизитовОперации Цикл
		Номер = МассивВсехРеквизитов.Найти(ЭлементМассива);
		Если Номер <> Неопределено Тогда
			МассивВсехРеквизитов.Удалить(Номер);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураТабличныхЧастей = Новый Структура;
	
	Для каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		Позиция = СтрНайти(ЭлементМассива, ".");
		Если Позиция <> 0 Тогда
			
			ИмяТабличнойЧасти = Лев(ЭлементМассива, Позиция - 1);
			РеквизитыТабличнойЧасти = Неопределено;
			Если Не СтруктураТабличныхЧастей.Свойство(ИмяТабличнойЧасти, РеквизитыТабличнойЧасти) Тогда
				СтруктураТабличныхЧастей.Вставить(ИмяТабличнойЧасти, Новый Массив);
				РеквизитыТабличнойЧасти = СтруктураТабличныхЧастей[ИмяТабличнойЧасти];
			КонецЕсли;
			РеквизитыТабличнойЧасти.Добавить(Сред(ЭлементМассива, Позиция + 1));
			
		ИначеЕсли ЭлементМассива = "РасшифровкаПлатежа" Тогда
			
			ДокументОбъект["РасшифровкаПлатежа"].Очистить();
			
		ИначеЕсли ЭлементМассива = "ЛицевыеСчетаСотрудников"
			Или ЭлементМассива = "ВыплатаЗаработнойПлаты"
			Или ЭлементМассива = "СтрокаФизическиеЛица" Тогда
			Продолжить;
		Иначе
			Если ЗначениеЗаполнено(ДокументОбъект[СокрЛП(ЭлементМассива)]) Тогда
				ДокументОбъект[СокрЛП(ЭлементМассива)] = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураТабличныхЧастей.Количество() > 0 Тогда
		Для каждого ТабличнаяЧасть Из СтруктураТабличныхЧастей Цикл
			Для каждого СтрокаТаблицы Из ДокументОбъект[ТабличнаяЧасть.Ключ] Цикл
				Для каждого ЭлементМассива Из ТабличнаяЧасть.Значение Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы[СокрЛП(ЭлементМассива)]) Тогда
						СтрокаТаблицы[СокрЛП(ЭлементМассива)] = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает неиспользуемые реквизиты для указанной в документе формы оплаты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	ОчищатьДляПустойФормыОплаты - Булево - очищать реквизиты, если форма оплаты не указана (при любой форме оплаты).
//
Процедура ОчиститьНеиспользуемыеРеквизитыФормыОплаты(ДокументОбъект, ФормаОплаты, ОчищатьДляПустойФормыОплаты = Ложь) Экспорт
	
	Если Не (ЗначениеЗаполнено(ФормаОплаты) Или ОчищатьДляПустойФормыОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Безналичная Тогда
		МассивРеквизитов.Добавить("БанковскийСчет");
	КонецЕсли;
	
	ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, МассивРеквизитов, Новый Массив);
	
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизитыФормыОплаты()

//++ НЕ УТ

// Процедура очищает неиспользуемые реквизиты оплаты за счет средств ГОЗ
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - Текущий документ.
//
Процедура ОчиститьНеиспользуемыеРеквизитыОплатыЗаСчетСредствГОЗ(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.ДоговорыСЗаказчиками.Количество() > 0 Тогда
		ДокументОбъект.ДоговорыСЗаказчиками.Очистить();
	КонецЕсли;
	Если ДокументОбъект.ПодтверждающиеДокументы.Количество() > 0 Тогда
		ДокументОбъект.ПодтверждающиеДокументы.Очистить();
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ДоговорСУчастникомГОЗ");
	МассивРеквизитов.Добавить("ТипПлатежаФЗ275");
	МассивРеквизитов.Добавить("ПредметОплаты");
	
	ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, МассивРеквизитов, Новый Массив);
	
КонецПроцедуры
//-- НЕ УТ

// В зависимости от хоз. операции, добавляет в массив реквизиты объекта не требующие проверки заполнения.
// Параметры:
//    ДокументОбъект                  - ДокументОбъект - документ, предназначенный для записи или проведения;
//    МассивНепроверяемыхРеквизитов   - Массив - массив реквизитов, не требующих проверки
//                                      при записи и проведении документа;
//    ХозяйственнаяОперацияПоЗарплате - Булево - признак того, что хозяйственная операция, указанная в документе,
//                                      отражает движения по заработной плате.
//
Процедура ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(ДокументОбъект, МассивНепроверяемыхРеквизитов, ХозяйственнаяОперацияПоЗарплате = Ложь) Экспорт
	
	Если ОперацияПоЗарплате(ДокументОбъект.ХозяйственнаяОперация) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("АналитикаАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходов");
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить()
			И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
		КонецЕсли;
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			
		КонецЕсли;
		
		Если ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
			
		ИначеЕсли ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда 
			
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			МассивНепроверяемыхРеквизитов.Добавить("ФизическоеЛицо");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевойСчет");
			
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			
		КонецЕсли;
		
		Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку к имеющимся
//
// Параметры:
//    ОшибкиЗаполнения - Строка - Накопленное описание ошибок
//    ТекстОшибки - Строка - Описание очередной ошибки.
//
Процедура ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки) Экспорт
	
	ОшибкиЗаполнения = ОшибкиЗаполнения + "
	|" + ТекстОшибки;
	
КонецПроцедуры

// Выполняет проверку заполнения реквизитов вместо платформы. Ошибки записываются, а не выводятся на экран.
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - Объект документа
//    ПроверяемыеРеквизиты - Массив - Реквизиты, требующие проверки заполненности
//    ОшибкиЗаполнения - Строка - Описание ошибок заполнения.
//
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(ДокументОбъект, ПроверяемыеРеквизиты, ОшибкиЗаполнения) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	РеквизитыДокумента = МетаданныеДокумента.Реквизиты;
	ТабличныеЧасти = МетаданныеДокумента.ТабличныеЧасти;
	
	Для каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		
		ПозТочки = СтрНайти(ИмяРеквизита, ".");
		Если ПозТочки = 0 Тогда
			Если ИмяРеквизита = "Дата" Тогда
				Реквизит = МетаданныеДокумента.СтандартныеРеквизиты.Дата;
			Иначе
				Реквизит = РеквизитыДокумента.Найти(ИмяРеквизита);
			КонецЕсли;
			
			Если Реквизит <> Неопределено Тогда
				Если Не ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Поле ""%1"" не заполнено.'"),
						Реквизит.Синоним);
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ТабЧастьДокумента = ТабличныеЧасти.Найти(ИмяРеквизита);
			Если ТабЧастьДокумента <> Неопределено Тогда
				Если Не ДокументОбъект[ИмяРеквизита].Количество() Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не введено ни одной строки в список ""%1"".'"),
						ТабЧастьДокумента.Синоним);
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ИмяТабЧасти = Лев(ИмяРеквизита, ПозТочки - 1);
			ИмяРеквизита = Сред(ИмяРеквизита, ПозТочки + 1);
			
			ТабЧастьДокумента = ТабличныеЧасти[ИмяТабЧасти];
			Если ТабЧастьДокумента <> Неопределено Тогда
				Реквизит = ТабЧастьДокумента.Реквизиты.Найти(ИмяРеквизита);
				Если Реквизит <> Неопределено Тогда
					Для каждого СтрокаТабЧасти Из ДокументОбъект[ИмяТабЧасти] Цикл
						Если Не ЗначениеЗаполнено(СтрокаТабЧасти[ИмяРеквизита]) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"".'"),
								Реквизит.Синоним,
								СтрокаТабЧасти.НомерСтроки,
								ТабЧастьДокумента.Синоним);
							ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку заполнения однострочной расшифровки платежа
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - Проверяемый документ
//    ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты документа
//    ИмяТЧ - Строка - Имя табличной части, текущая строка которой выводится в виде отдельных реквизитов
//    ИмяЗаменыТЧ - Строка - Наименование подстроки замены наименования реквизитов табличной части
//    Отказ - Булево - Признак отказа от операции.
//
Процедура ПроверитьЗаполнениеРасшифровкиБезРазбиения(ДокументОбъект, ПроверяемыеРеквизиты, ИмяТЧ, ИмяЗаменыТЧ, Отказ) Экспорт
	
	Если Не ДокументОбъект[ИмяТЧ].Количество() Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ТабличныеЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти;
	ТабЧастьДокумента = ТабличныеЧасти[ИмяТЧ];
	
	ШаблонОшибки = НСтр("ru = 'Поле ""%1"" не заполнено'");
	
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		
		Если СтрНайти(ПроверяемыйРеквизит, ИмяТЧ) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозТочки = СтрНайти(ПроверяемыйРеквизит, ".");
		Если ПозТочки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Сред(ПроверяемыйРеквизит, ПозТочки + 1);
		ИмяЭлемента = ИмяЗаменыТЧ + ИмяРеквизита;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект[ИмяТЧ][0][ИмяРеквизита]) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ШаблонОшибки, ТабЧастьДокумента.Реквизиты[ИмяРеквизита].Синоним),
				,
				"Элементы." + ИмяТЧ + ".ТекущиеДанные." + ИмяРеквизита,
				,
				Отказ);
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить(ПроверяемыйРеквизит);
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Проверяет корректность заполнения налоговых реквизитов
//
// Параметры:
//	Объект - ДокументСсылка - Документ оплаты.
//	Отказ - Булево - Признак отказа от продолжения работы
//	ПроверяемыеРеквизиты - Массив - Непроверяемые реквизиты документа
//	ФлагОбменСБанками - Булево - используется обмен с банком
//	ОшибкиЗаполнения - Строка - Накопленное описание ошибок.
//
Процедура ПроверитьЗаполнениеНалоговыхРеквизитов(Объект, Отказ, НепроверяемыеРеквизиты, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = Неопределено) Экспорт
	
	ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	ПеречислениеВБюджет = Объект.ПеречислениеВБюджет;
	ВидПеречисленияВБюджет = Объект.ВидПеречисленияВБюджет;
	СтатусСоставителя = Объект.СтатусСоставителя;
	Дата = Объект.Дата;
	
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	
	ПараметрыПроверкиЗаполнения = Новый Структура("ПрименениеПриказа107н, ПрименениеПриказа126н",
		Дата >= Константы.ДатаНачалаПримененияПриказа107н.Получить() Или Не ЗначениеЗаполнено(Дата),
		ДатаНачалаПримененияПриказа126н <> '00010101' И Дата >= ДатаНачалаПримененияПриказа126н Или Не ЗначениеЗаполнено(Дата));
	
	МассивОпераций = Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет();
	
	Если ПеречислениеВБюджет И МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
	
		// Проверки, общие для всех видов перечислений в бюджет
		Если ПлатежиВБюджетКлиентСервер.СтатусыПлательщика(
			ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н, Дата).НайтиПоЗначению(СтатусСоставителя) = Неопределено Тогда
			
			ТекстОшибки = НСтр("ru = 'Неверное значение поля ""Статус составителя""'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПроверкиЗаполнения.ПрименениеПриказа126н Тогда
			НепроверяемыеРеквизиты.Добавить("ПоказательТипа");
		КонецЕсли;
		
		Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения реквизитов платежа в бюджет согласно 148н
//
// Параметры:
//	Объект - ДокументОбъект - Документ оплаты.
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьИННиКППНаСоответствие148н(Объект, Отказ) Экспорт
	
	Если Объект.Дата < ПлатежиВБюджетКлиентСервер.НачалоДействияУказания3844У() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПлательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИНН, КПП");
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
		И ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		РеквизитыПлательщика.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВНалоговомОргане, "КПП");
	КонецЕсли;
	
	РеквизитыПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчетКонтрагента, "Владелец.ИНН, Владелец.КПП");
	
	Если Лев(РеквизитыПлательщика.ИНН, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры ИНН плательщика не могут быть ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект,,, Отказ);
	КонецЕсли;
	
	Если Лев(РеквизитыПлательщика.КПП, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры КПП плательщика не могут быть ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект,,, Отказ);
	КонецЕсли;
	
	Если Лев(РеквизитыПолучателя.ВладелецИНН, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры ИНН получателя не могут быть ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "Контрагент",, Отказ);
	КонецЕсли;
	
	Если Лев(РеквизитыПолучателя.ВладелецКПП, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры КПП получателя не могут быть ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "Контрагент",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнения реквизита Партнер в ТЧ РасшифровкаПлатежа
//
// Параметры:
//	Объект                - ДокументОбъект - Денежный документ.
//	ХозяйственнаяОперация - Справочник.ХозяйственныеОперация - хозяйственная операция объекта
//	МассивНепроверяемыхРеквизитов - Массив - Непроверяемые реквизиты документа
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаполнениеПартнера(Объект, ХозяйственнаяОперация, МассивНепроверяемыхРеквизитов, РасшифровкаБезРазбиения, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивНепроверяемыхРеквизитов.Найти("РасшифровкаПлатежа.Партнер") = Неопределено Тогда
		ПредставлениеРеквизитаПартнер = ПартнерыИКонтрагенты.ЗаголовокРеквизитаПартнерВЗависимостиОтХозяйственнойОперации( ХозяйственнаяОперация);
		СинонимРеквизитаПартнера      = Объект.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Партнер.Синоним;
		Если ПредставлениеРеквизитаПартнер <> СинонимРеквизитаПартнера Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Партнер");
			Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
				Если Не ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.Партнер) Тогда
					
					Если РасшифровкаБезРазбиения Тогда
						ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.Партнер";
						КлючДанных = Неопределено;
					Иначе
						ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", СтрокаРасшифровкаПлатежа.НомерСтроки, "Партнер");
						КлючДанных = Объект;
					КонецЕсли;
					
					ТекстОшибки = НСтр("ru = 'Поле ""%1"" не заполнено'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПредставлениеРеквизитаПартнер);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, КлючДанных, ИмяПоля, , Отказ);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ
#Область КонтрольПлатежейНаСоответствие275ФЗ

// Проверяет переданный документ на соответствие требованиям федеральных законов 275-ФЗ и 3729-У.
//
// Параметры:
//   Ссылка - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств, ДокументСсылка.СписаниеБезналичныхДенежныхСредств -
//            проверяемый документ
//   ДанныеДокументовДляКонтроля - Массив - массив результатов запросов для контроля документов за исключением временных
//                                          таблиц и удалений временных таблиц.
//
// Возвращаемое значение:
//   РезультатыПроверок - Структура - результаты проверок
//       ВсеКонтролиПройдены - Булево
//       ОписанияРезультатов - ТаблицаЗначений - результаты проверки каждого правила
//           ИмяОбработчикаКонтроля - Строка - имя процедуры, проверяющей условия одного пункта контроля
//           КонтрольПройден - Булево - результат проверки одного пункта контроля
//           Описание - Строка - развернутое описания причин прохождения или непрохождения одного пункта контроля.
//
Функция КонтрольДокумента(Ссылка, ДанныеДокументовДляКонтроля = Неопределено) Экспорт
	РезультатыПроверок = ИнициализацияСвойствРезультатовПроверок();
	ИндексыРезультатовЗапросов = ИнициализацияИндексовРезультатовЗапросов();
	
	// Контроль раздела I "В соответствии с 275-ФЗ от 29.12.2012г."
	РезультатКонтроля_Раздел1_275_83_1_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_83_1_2_б(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_83_1_2_в(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_83_1_2_г(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_83_1_2_е(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_83_1_2_з(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	
	РезультатКонтроля_Раздел1_275_84_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_84_10(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	
	РезультатКонтроля_Раздел1_275_85_1_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_85_1_3(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_85_2_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_85_2_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	
	// Контроль раздела II "Указание Банка России 3729-У от 15.07.2015г."
	РезультатКонтроля_Раздел2_3729У_2_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел2_3729У_2_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел2_3729У_2_3(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	
	Отбор = Новый Структура("КонтрольПройден", Ложь);
	НайденныеСтроки = РезультатыПроверок.ОписанияРезультатов.НайтиСтроки(Отбор);
	РезультатыПроверок.Вставить("ВсеКонтролиПройдены", НайденныеСтроки.Количество() = 0);
	
	Возврат РезультатыПроверок;
КонецФункции

// По имени обработчика контроля возвращает номер раздела контролей
//
// Параметры:
//   ИмяОбработчика - Строка - Имя обработчика.
//
// Возвращаемое значение:
//   Строка - Раздел
//
Функция РазделКонтроля(ИмяОбработчика) Экспорт
	РазделКонтроля = "";
	
	Для Сч = 1 По 9 Цикл 
		Если СтрНайти(ИмяОбработчика, "Раздел" + Сч + "_") > 0 Тогда
			РазделКонтроля = "Раздел" + Сч;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РазделКонтроля;
КонецФункции

// Формирует таблицу данных для пакетной проверки документов
//
// Параметры:
//   МассивСсылок - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств,
//                  ДокументСсылка.СписаниеБезналичныхДенежныхСредств - проверяемые документы.
//
// Возвращаемое значение:
//   ДанныеДокументовДляКонтроля - Массив - массив результатов запросов для контроля документов за исключением временных
//                                          таблиц и удалений временных таблиц.
//
Функция ДанныеДокументовДляКонтроля(МассивСсылок) Экспорт
	ОписаниеТекстаЗапроса = ОписаниеТекстаЗапроса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ОписаниеТекстаЗапроса.Текст;
	
	Запрос.УстановитьПараметр("ПроверяемыеДокументы", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ДанныеДокументовДляКонтроля = Запрос.ВыполнитьПакет();
	
	// Удалим результаты запросов временных таблиц и уничтожения временных таблиц
	Для Номер = 1 По ОписаниеТекстаЗапроса.КоличествоВременныхТаблиц Цикл 
		ДанныеДокументовДляКонтроля.Удалить(0);
	КонецЦикла;
	
	Возврат ДанныеДокументовДляКонтроля;
КонецФункции

// По имени поля возвращает шаблон замены для запросах, где используется контроль отдельного банковского счета.
//
// Параметры:
//   ИсточникБанковскогоСчета - Строка - название поля банковского счета в запросе.
//
// Возвращаемое значение:
//   Строка - Текст запроса
//
Функция ТекстЗапросаПроверкиОтдельногоСчета(ИсточникБанковскогоСчета) Экспорт
	ТекстЗапроса = "// Проверка состояния отдельного счета ГОЗ (автоматически сформированный текст)";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + Символы.Таб
		+ "ВЫБОР КОГДА (" + ИсточникБанковскогоСчета + ".ОтдельныйСчетГОЗ";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + Символы.Таб
		+ "И НЕ " + ИсточникБанковскогоСчета + ".ГосударственныйКонтракт.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияГосударственныхКонтрактов.Завершен)" + ")";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + Символы.Таб
		+ "ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ";
		
	Возврат ТекстЗапроса;
КонецФункции

// Проверяет корректность заполнения подтверждающих документов
//
// Параметры:
//	Объект - СправочникСсылка.ДоговорыКонтрагентов, ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - проверяемый объект
//	Отказ - Булево - Признак отказа от продолжения работы
//	ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты документа
//	Ошибки - Строка - Накопленное описание ошибок.
//
Процедура ОбработкаПроверкиЗаполненияПодтверждающиеДокументы(Объект, Отказ, ПроверяемыеРеквизиты, Ошибки) Экспорт
	
	ЕстьДокументПодтверждающийИсполнение = Ложь;
	
	Для Каждого ПодтверждающийДокумент Из Объект.ПодтверждающиеДокументы Цикл 
		ПодтверждаетИсполнениеКонтракта = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодтверждающийДокумент.ВидДокумента, "ПодтверждаетИсполнениеКонтракта");
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
			И ПодтверждаетИсполнениеКонтракта Тогда
			Если Не ЗначениеЗаполнено(ПодтверждающийДокумент.Номер) Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Номер"" в строке %1 списка ""Подтверждающие документы""'"),
					ПодтверждающийДокумент.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ПодтверждающиеДокументы[%1].Номер", СообщениеОбОшибке, Неопределено, ПодтверждающийДокумент.НомерСтроки-1);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодтверждающийДокумент.Дата) Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Дата"" в строке %1 списка ""Подтверждающие документы""'"),
					ПодтверждающийДокумент.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ПодтверждающиеДокументы[%1].Дата", СообщениеОбОшибке, Неопределено, ПодтверждающийДокумент.НомерСтроки-1);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодтверждающийДокумент.Сумма) Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Подтверждающие документы""'"),
					ПодтверждающийДокумент.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ПодтверждающиеДокументы[%1].Сумма", СообщениеОбОшибке, Неопределено, ПодтверждающийДокумент.НомерСтроки-1);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЕстьДокументПодтверждающийИсполнение Тогда
			ЕстьДокументПодтверждающийИсполнение = ПодтверждаетИсполнениеКонтракта;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ТипПлатежаФЗ275) Тогда
		ТребуютсяДокументыПодтвержденияИсполненияКонтракта = 
			Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипПлатежаФЗ275, "НеТребуютсяДокументыПодтвержденияИсполненияКонтракта");
			
		ОплатаПоКредитамДепозитам = 
			ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
			И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
					Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты)
			Или ТипЗнч(Объект) = Тип("СправочникОбъект.ДоговорыКредитовИДепозитов")
			И (Объект.ТипДоговора = Перечисления.ТипыДоговораКредитовИДепозитов.КредитВБанке
					Или Объект.ТипДоговора = Перечисления.ТипыДоговораКредитовИДепозитов.ДепозитВБанке
					Или Объект.ТипДоговора = Перечисления.ТипыДоговораКредитовИДепозитов.ДепозитВБанкеСКапитализацией);
		
		Если ТребуютсяДокументыПодтвержденияИсполненияКонтракта
			И Не ЕстьДокументПодтверждающийИсполнение
			И (ТипЗнч(Объект) = Тип("СправочникОбъект.ДоговорыКонтрагентов") 
				Или ТипЗнч(Объект) = Тип("СправочникОбъект.ДоговорыМеждуОрганизациями")
				Или ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") И Не ОплатаПоКредитамДепозитам) Тогда
				
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тип платежа ""%1"" требует указания видов документов, подтверждающих исполнение контракта.
					|В списке ""Подтверждающие документы"" не указано ни одного подтверждающего исполнение вида документа.'"),
				 Объект.ТипПлатежаФЗ275);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ПодтверждающиеДокументы", СообщениеОбОшибке, Неопределено);
		КонецЕсли;
			
		ВидыДокументовПоТипуПлатежа = Справочники.ТипыПлатежейФЗ275.ПодтверждающиеВидыДокументов(Объект.ТипПлатежаФЗ275);
		Для Каждого ВидДокумента Из ВидыДокументовПоТипуПлатежа Цикл 
			Если Объект.ПодтверждающиеДокументы.Найти(ВидДокумента, "ВидДокумента") = Неопределено Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Тип платежа ""%1"" требует указания вида документа %2.'"),
					 Объект.ТипПлатежаФЗ275,
					 ВидДокумента);
					
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ПодтверждающиеДокументы", СообщениеОбОшибке, Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения подтверждающих документов
//
// Параметры:
//    Объект - СправочникСсылка.ДоговорыКонтрагентов, ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - проверяемый объект
//    Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаполнениеРеквизитовПлатежаГОЗ(Объект, Отказ) Экспорт
	
	ЭтоДоговорСКонтрагентом = ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	ЭтоДоговорМеждуОрганизациями = ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями");
	
	БанковскийСчетКонтролировать = 
		Не (ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов")
			Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
			И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты));
	
	Если БанковскийСчетКонтролировать И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ОтдельныйСчетГОЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ОтдельныйСчетГОЗ");
		Если Не ОтдельныйСчетГОЗ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Должен быть выбран отдельный банковский счет ГОЗ'"),
				Объект,
				"БанковскийСчет",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		Или ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
		
		БанковскийСчетПолучателя = Объект.БанковскийСчетКонтрагента;
		БанковскийСчетПолучателяИмя = "БанковскийСчетКонтрагента";
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		
		БанковскийСчетПолучателя = Объект.БанковскийСчетПолучателя;
		БанковскийСчетПолучателяИмя = "БанковскийСчетПолучателя";
		
	КонецЕсли;
	
	Если Объект.ДоговорСУчастникомГОЗ И ЗначениеЗаполнено(БанковскийСчетПолучателя) Тогда
		ОтдельныйСчетГОЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетПолучателя, "ОтдельныйСчетГОЗ");
		Если Не ОтдельныйСчетГОЗ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Должен быть выбран отдельный банковский счет ГОЗ'"),
				Объект,
				БанковскийСчетПолучателяИмя,
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДоговорыСЗаказчиками.Количество() > 0 Тогда
		ЗначенияГосконтрактов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Объект.ДоговорыСЗаказчиками.ВыгрузитьКолонку("ДоговорСЗаказчиком"), "ГосударственныйКонтракт");
		
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Госконтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ГосударственныйКонтракт");
			Если ЗначениеЗаполнено(Госконтракт) Тогда
				Для каждого КлючИЗначение Из ЗначенияГосконтрактов Цикл
					Если КлючИЗначение.Значение <> Госконтракт Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru='Государственные контракты, указанные в договорах с заказчиками, не должны отличаться от госконтракта банковского счета.'"),
							,,,
							Отказ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если БанковскийСчетКонтролировать
		И Объект.ДоговорСУчастникомГОЗ Тогда
		
		Если
			ЭтоДоговорСКонтрагентом
			И ЗначениеЗаполнено(Объект.БанковскийСчет)
			И ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ГосударственныйКонтракт")
			<> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "ГосударственныйКонтракт")
			
			Или ЭтоДоговорМеждуОрганизациями
			И ЗначениеЗаполнено(Объект.БанковскийСчет)
			И ЗначениеЗаполнено(Объект.БанковскийСчетПолучателя)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ГосударственныйКонтракт")
			<> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетПолучателя, "ГосударственныйКонтракт") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Государственные контракты, указанные в банковских счетах, не должны отличаться.'"),
				,,,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

// Проверяет соответствие документов закупки авансовому отчету
//
// Параметры:
//    ДокументОбъект - ДокументОбъект.ПриобретениеТоваровУслуг, ДокументОбъект.ПоступлениеДенежныхДокументов - проверяемый объект
//    Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьДокументыЗакупкиАвансовогоОтчета(ДокументОбъект, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.АвансовыйОтчет) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Ссылка) КАК АвансовыйОтчет,
	|	ДанныеДокумента.Организация <> &Организация КАК ОтличаетсяОрганизация,
	|	ДанныеДокумента.ПодотчетноеЛицо <> &ПодотчетноеЛицо КАК ОтличаетсяПодотчетноеЛицо,
	|	ДанныеДокумента.Валюта <> &Валюта И НЕ ДанныеДокумента.Мультивалютный КАК ОтличаетсяВалюта
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.АвансовыйОтчет);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", ДокументОбъект.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", ДокументОбъект.Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОтличаетсяОрганизация Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Организация %1 не соответствует организации в документе %2'"),
				ДокументОбъект.Организация, Выборка.АвансовыйОтчет);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "",, Отказ);
		КонецЕсли;
		
		Если Выборка.ОтличаетсяПодотчетноеЛицо Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Подотчетное лицо %1 не соответствует подотчетному лицу в документе %2'"),
				ДокументОбъект.ПодотчетноеЛицо, Выборка.АвансовыйОтчет);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "",, Отказ);
		КонецЕсли;
		
		Если Выборка.ОтличаетсяВалюта Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Валюта %1 не соответствует валюте в документе %2'"),
				ДокументОбъект.Валюта, Выборка.АвансовыйОтчет);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "",, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСправочников

// Заполнение общих реквизитов справочников
//
// Параметры:
//    Объект - СправочникОбъект - объект.
Процедура ОбработкаЗаполненияСправочников(Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Владелец")
		И Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		Объект.Владелец = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Владелец);
		Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось определить принадлежность элемента к определенной ""Организации"". В информационной базе введено несколько организаций,
				                             |Включите функциональную опцию ""Использовать несколько организаций""!'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Не удалось определить принадлежность элемента к определенной ""Организации"". Возможно, в информационной базе не введено ни одной организации!'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвиженийПоДенежнымСредствам

// Процедура формирования движений по регистру "Денежные средства (наличные)".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваНаличные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваНаличные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваНаличные()

// Процедура формирования движений по регистру "Денежные средства (наличные)".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВКассахККМ;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваВКассахККМ;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваВКассахККМ()

// Процедура формирования движений по регистру "Денежные средства (безналичные)".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваБезналичные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваБезналичные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваБезналичные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваБезналичные()

// Процедура формирования движений по регистру "Денежные средства в пути"
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваВПути(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВПути;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваВПути;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваБезналичные()

// Процедура формирования движений по регистру "Денежные средства у подотчетных лиц".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваУПодотчетныхЛиц;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваУПодотчетныхЛиц;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваУПодотчетныхЛиц()

// Процедура формирования движений по регистру "Денежные средства к выплате".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКВыплате;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКВыплате;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваКВыплате()

// Процедура формирования движений по регистру "Расчеты по эквайрингу".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьРасчетыПоЭквайрингу(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасчетыПоЭквайрингу = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоЭквайрингу;
	
	Если Отказ ИЛИ ТаблицаРасчетыПоЭквайрингу.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.РасчетыПоЭквайрингу;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаРасчетыПоЭквайрингу);
	
КонецПроцедуры // ОтразитьРасчетыПоЭквайрингу()

// Процедура формирования движений по регистру "Лимиты расхода денежных средств".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьЛимитыРасходаДенежныхСредств(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЛимиты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЛимитыРасходаДенежныхСредств;
	
	Если Отказ ИЛИ ТаблицаЛимиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЛимитыРасходаДенежныхСредств = Движения.ЛимитыРасходаДенежныхСредств;
	ДвиженияЛимитыРасходаДенежныхСредств.Записывать = Истина;
	ДвиженияЛимитыРасходаДенежныхСредств.Загрузить(ТаблицаЛимиты);
	
КонецПроцедуры // ОтразитьЛимитыРасходаДенежныхСредств()

// Процедура формирования движений по регистру "Расчеты по договорам кредитов и депозитов".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Дополнительные свойства проведения
//	Движения - КоллекцияДвижений - Движения документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьРасчетыПоФинансовымИнструментам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчетыПоФинансовымИнструментам = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоФинансовымИнструментам;
	
	Если Отказ ИЛИ ТаблицаРасчетыПоФинансовымИнструментам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.РасчетыПоФинансовымИнструментам;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаРасчетыПоФинансовымИнструментам);
	
КонецПроцедуры

// Функция проверяет возможность формирования документа "Списание безналичных ДС"
// на основании нескольких документов. 
//
// Параметры:
//  МассивСсылок  - Массив - заказы поставщикам, по которым необходимо ввести реализацию.
//
// Возвращаемое значение:
//   Булево   - Истина, если формирование возможно.
//
Функция СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам(МассивСсылок) Экспорт

	Отказ = Ложь;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Контрагент) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Организация) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияОрганизация,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ТипДокумента) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияТип
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПриобретениеТоваровУслуг.Организация КАК Организация,
	|		ПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
	|		""А"" КАК ТипДокумента
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|	ГДЕ
	|		ПриобретениеТоваровУслуг.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриобретениеУслугПрочихАктивов.Организация,
	|		ПриобретениеУслугПрочихАктивов.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
	|	ГДЕ
	|		ПриобретениеУслугПрочихАктивов.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Организация,
	|		ЗаказПоставщику.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитенту.Организация,
	|		ОтчетКомитенту.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ГДЕ
	|		ОтчетКомитенту.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитентуОСписании.Организация,
	|		ОтчетКомитентуОСписании.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|	ГДЕ
	|		ОтчетКомитентуОСписании.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионера.Организация,
	|		ОтчетКомиссионера.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ГДЕ
	|		ОтчетКомиссионера.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаТоваровМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ГДЕ
	|		ПередачаТоваровМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетПоКомиссииМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ГДЕ
	|		ОтчетПоКомиссииМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаможеннаяДекларацияИмпорт.Организация,
	|		ТаможеннаяДекларацияИмпорт.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпорт.Ссылка В(&МассивСсылок)
	|	
	//++ НЕ УТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОператораСистемыПлатон.Организация,
	|		ОтчетОператораСистемыПлатон.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетОператораСистемыПлатон КАК ОтчетОператораСистемыПлатон
	|	ГДЕ
	|		ОтчетОператораСистемыПлатон.Ссылка В(&МассивСсылок)
	//-- НЕ УТ
	|	
	|	) КАК ВложенныйЗапрос
	|";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат Отказ;
	КонецЕсли;
		
	Если СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка) Тогда
	
		ТекстОшибки = НСтр("ru='Ввод одного документа Списание безналичных ДС на основании выделенных распоряжений невозможен'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
	КонецЕсли;

	Возврат НЕ Отказ;
	
КонецФункции // СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам()

// Процедура выполняет пересчет сумм документа в новую валюту.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта
//	НоваяВалюта - СправочникСсылка.Валюты - Новая валюта.
//
Процедура ПересчетСуммДокументаВВалюту(Объект, ТекущаяВалюта, НоваяВалюта) Экспорт
	
	КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		ТекущаяВалюта,
		НоваяВалюта,
		Объект.Дата);
	
	// Пересчитаем сумму документа в новую валюту.
	Объект.СуммаДокумента = Окр(КоэффициентПересчета * Объект.СуммаДокумента, 2, 1);
	
	МассивТабличныйЧастей = Новый Массив;
	МассивТабличныйЧастей.Добавить("РасшифровкаПлатежа");
	МассивТабличныйЧастей.Добавить("ДебиторскаяЗадолженность");
	МассивТабличныйЧастей.Добавить("КредиторскаяЗадолженность");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
		Если Объект.Свойство(ТабличнаяЧасть) Тогда
			
			ИтогСумма = Объект[ТабличнаяЧасть].Итог("Сумма");
			СуммаДокумента = Окр(КоэффициентПересчета * ИтогСумма, 2, 1);
			
			// Пересчитаем суммы в табличной части документа.
			Если ИтогСумма <> 0 Тогда
				Для Каждого СтрокаТаблицы Из Объект[ТабличнаяЧасть] Цикл
					
					Сумма = ?(ИтогСумма <> 0, Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1), 0);
					ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
					СуммаДокумента = СуммаДокумента - Сумма;
					СтрокаТаблицы.Сумма = Сумма;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//    ТекущийДоговор - СправочникСсылка.Договоры - Договор с контрагентом
//    Партнер - СправочникСсылка.Партнеры - Партнер
//    Контрагент - СправочникСсылка.Контрагенты - Контрагент
//    Организация - СправочникСсылка.Организации - Организация
//    ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция.
//
// Возвращаемое значение:
//   СправочникСсылка.Договоры - договор по умолчанию, являющийся объектом расчетов.
//
Функция ДоговорПоУмолчанию(
	ТекущийДоговор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственныеОперации
	) Экспорт
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДоговорыКонтрагентов.Ссылка = &ТекущийДоговор
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ЗначениеЗаполнено(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
	
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Формирует текст запроса для получения указанного реквизита объекта расчетов
//
// Параметры:
//    ИмяДокумента - Строка - Имя документа
//    ТаблицаИсточник - Строка - Таблица источник данных
//    ИмяОбъектаРасчетов - Строка - Имя объекта расчетов
//    ИмяРеквизитаОбъектаРасчетов - Строка - Имя реквизита объекта расчетов.
//
// Возвращаемое значение:
//    Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитаОбъектаРасчетов(ИмяДокумента, ТаблицаИсточник, ИмяОбъектаРасчетов, ИмяРеквизитаОбъектаРасчетов) Экспорт
	
	Возврат ДенежныеСредстваПовтИсп.ТекстЗапросаРеквизитаОбъектаРасчетов(
				ТаблицаИсточник+"."+ИмяОбъектаРасчетов,
				ИмяРеквизитаОбъектаРасчетов,
				"Документы."+ИмяДокумента+".ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты."+ИмяОбъектаРасчетов);
	
КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область ОбслуживаниеМеханизмовБЗКР

// Процедура выполняет регистрацию оплаты страховых взносов и НДФЛ в контуре учета зарплаты.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, содержащий таблицу ДокументыКОтражению.
//	ДокументОбъект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств - Документ, если регистрация выполняется при проведении документа.
//	Отказ - Булево - Признак отказа от записи движений.
//
Процедура ЗарегистрироватьПеречислениеНалоговИВзносов(МенеджерВременныхТаблиц = Неопределено, Объект = Неопределено, Отказ = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ Т.Ссылка ПОМЕСТИТЬ ДокументыКОтражению ИЗ Документ.СписаниеБезналичныхДенежныхСредств КАК Т ГДЕ Т.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ) КАК СчетУчета,
	|	""НДФЛ"" КАК ВидОперации
	|ПОМЕСТИТЬ ВтСчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_нак),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_доп),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииЛетчикам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_доп_шахтеры),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииШахтерам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФФОМС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТФОМС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_НСиПЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Реквизиты.ТипНалога КАК ТипНалога,
	|	Реквизиты.Субконто1 КАК ВидПлатежа,
	|	Реквизиты.Субконто2 КАК НалоговыйОрган,
	|	ПорядокОтражения.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Реквизиты.НомерВходящегоДокумента <> """"
	|			ТОГДА Реквизиты.НомерВходящегоДокумента
	|		ИНАЧЕ
	|			Реквизиты.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДатаВходящегоДокумента <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Реквизиты.ДатаВходящегоДокумента
	|		ИНАЧЕ
	|			Реквизиты.ДатаПроведенияБанком
	|	КОНЕЦ КАК Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.ХозяйственнаяОперация,
	|	Реквизиты.ПоказательОснования,
	|	Реквизиты.ПоказательПериода,
	|	ВтСчета.ВидОперации
	|ПОМЕСТИТЬ ТаблицаОтражения
	|ИЗ
	|	ДокументыКОтражению КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК Реквизиты
	|		ПО Документы.Ссылка = Реквизиты.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПорядокОтражения
	|		ПО Документы.Ссылка = ПорядокОтражения.Ссылка
	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчета КАК ВтСчета
	|		ПО Реквизиты.СчетУчета = ВтСчета.СчетУчета
	|ГДЕ
	|	Реквизиты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И Реквизиты.Субконто1 В(&МассивНазначенийПлатежа)
	|	И Реквизиты.ПроведеноБанком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	ТаблицаОтражения.Ссылка КАК Ссылка,
	|	ТаблицаОтражения.Сумма КАК Сумма,
	|	ТаблицаОтражения.Номер КАК ПлатежноеПоручениеНомер,
	|	ТаблицаОтражения.Дата КАК ПлатежноеПоручениеДата,
	|	ТаблицаОтражения.ВидПлатежа КАК ВидПлатежа,
	|	ТаблицаОтражения.НалоговыйОрган КАК НалоговыйОрган,
	|	ТаблицаОтражения.ПоказательОснования,
	|	ТаблицаОтражения.ПоказательПериода
	|ИЗ
	|	ТаблицаОтражения КАК ТаблицаОтражения
	|ГДЕ
	|	ТаблицаОтражения.ВидОперации = ""НДФЛ""
	|	И НЕ ТаблицаОтражения.ТипНалога В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛДивидендыСотрудникам),
	|										ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛДивиденды))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	0 КАК Сумма,
	|	""ХХХХХХХХХХХ"" КАК ПлатежноеПоручениеНомер,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПлатежноеПоручениеДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтражения.Дата КАК Период,
	|	ТаблицаОтражения.ВидОперации КАК ВидОбязательногоСтрахованияСотрудников,
	|	ТаблицаОтражения.Ссылка КАК Ссылка,
	|	ТаблицаОтражения.Сумма КАК Сумма,
	|	ТаблицаОтражения.Номер КАК ПлатежноеПоручениеНомер,
	|	ТаблицаОтражения.Дата КАК ПлатежноеПоручениеДата,
	|	ИСТИНА КАК ЭтоСтраховыеВзносы,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ГодЗадолженностиПоЕСН,
	|	ТаблицаОтражения.ВидПлатежа КАК ВидПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаОтражения.ПоказательОснования,
	|	ТаблицаОтражения.ПоказательПериода
	|ИЗ
	|	ТаблицаОтражения КАК ТаблицаОтражения
	|ГДЕ
	|	ТаблицаОтражения.ВидОперации <> ""НДФЛ""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПустаяСсылка) КАК ВидОбязательногоСтрахованияСотрудников,
	|	0 КАК Сумма,
	|	""ХХХХХХХХХХХ"" КАК ПлатежноеПоручениеНомер,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПлатежноеПоручениеДата,
	|	ИСТИНА КАК ЭтоСтраховыеВзносы,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ГодЗадолженностиПоЕСН,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|;
	|
	|УНИЧТОЖИТЬ
	|	ВтСчета
	|;
	|
	|УНИЧТОЖИТЬ
	|	ТаблицаОтражения";
	
	МассивНазначенийПлатежа = Новый Массив;
	МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
	
	Запрос.УстановитьПараметр("МассивНазначенийПлатежа",МассивНазначенийПлатежа);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаНалог = Результат[2].Выбрать();
	ПеречисленныйНалог = Результат[3].Выгрузить().СкопироватьКолонки();
	
	Пока ВыборкаНалог.Следующий() Цикл
		
		МесяцНалоговогоПериода = МесяцНалоговогоПериода(ВыборкаНалог.ПоказательОснования, ВыборкаНалог.ПоказательПериода);
		
		Если ЗначениеЗаполнено(МесяцНалоговогоПериода) Тогда
			
			Если Объект = Неопределено Тогда
				ДокОбъект = ВыборкаНалог.Ссылка.ПолучитьОбъект();
			Иначе
				ДокОбъект = Объект;
			КонецЕсли;
		
			НалоговыйОрган = ВыборкаНалог.НалоговыйОрган;
			
			НоваяСтрока = ПеречисленныйНалог.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНалог);
			НоваяСтрока.МесяцНалоговогоПериода = МесяцНалоговогоПериода;
			НоваяСтрока.ПлатежноеПоручениеНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				ВыборкаНалог.ПлатежноеПоручениеНомер,
				Истина,
				Истина);
			
			УчетНДФЛ.СформироватьПеречисленныйНалог(
				ДокОбъект.Ссылка,
				ДокОбъект.Движения,
				Отказ,
				ДокОбъект.Организация,
				ДокОбъект.ДатаПроведенияБанком,
				ПеречисленныйНалог,
				,
				НалоговыйОрган,
				Истина);
			
			ПеречисленныйНалог.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаРасчетыСФондом = Результат[4].Выбрать();
	РасчетыСФондом = Результат[5].Выгрузить().СкопироватьКолонки();
	
	Пока ВыборкаРасчетыСФондом.Следующий() Цикл
		
		Если Объект = Неопределено Тогда
			ДокОбъект = ВыборкаРасчетыСФондом.Ссылка.ПолучитьОбъект();
		Иначе
			ДокОбъект = Объект;
		КонецЕсли;
		
		НоваяСтрока = РасчетыСФондом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасчетыСФондом);
		
		НоваяСтрока.ПлатежноеПоручениеНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			ВыборкаРасчетыСФондом.ПлатежноеПоручениеНомер,
			Истина,
			Истина);
			
		УчетСтраховыхВзносов.СформироватьРасчетыСФондом(
			ДокОбъект.Движения,
			Отказ,
			ДокОбъект.Организация,
			РасчетыСФондом,
			Истина);
			
		РасчетыСФондом.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура регистрирует факт оплаты ведомостей.
//
// Параметры:
//    Объект - ДокументОбъект -платежный документ (документ-объект);
//    ДополнительныеСвойства - Структура - коллекция дополнительных свойств объекта;
//    Отказ - Булево - признак отказа выполнения операции.
//
// Обработка ошибочных ситуаций
// выдается сообщение, признак «Отказ» выставляется в Истина.
//
Процедура ЗарегистрироватьОплатуВедомостей(Объект, ДополнительныеСвойства, Отказ) Экспорт
	
	МассивВедомостей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОплатаВедомостей.ВыгрузитьКолонку("Ведомость");
	
	Если МассивВедомостей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивФизическихЛиц = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОплатаВедомостей.ВыгрузитьКолонку("ФизическоеЛицо");
	
	МассивВедомостей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВедомостей);
	МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивФизическихЛиц);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") 
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ДепонированиеЗарплаты") Тогда 
		ДатаПлатежа = Объект.Дата;
	Иначе
		ДатаПлатежа = Объект.ДатаПроведенияБанком;
	КонецЕсли;
	
	ЗарплатаКадры.ЗарегистрироватьОплатуВедомостей(Объект, Объект.Организация, МассивВедомостей, МассивФизическихЛиц, ДатаПлатежа, Отказ);
	ЗарегистрироватьОплатуВедомостейПрочихДоходовВУчетеНДФЛ(Объект, Объект.Организация, МассивВедомостей, МассивФизическихЛиц, ДатаПлатежа, Отказ);
	
КонецПроцедуры

// Регистрация удержания НДФЛ при оплате ведомостей прочих доходов.
//
// Параметры:
//		ПлатежныйДокумент - ДокументОбъект - платежный документ.
//		Организация       - СправочникСсылка.Организации - организация, выплачивающая зарплату.
//		Ведомости         - Массив - оплачиваемые ведомости прочих доходов на выплату
//                          (ДокументСсылка.ВедомостьПрочихДоходовВБанк,
//                          ДокументСсылка.ВедомостьПрочихДоходовВКассу и т.д.)
//		ФизическиеЛица    - Массив - физические лица (СправочникСсылка.ФизическиеЛица), получившие выплаты по ведомостям 
//		ДатаОперации      - Дата   - дата фактического выполнения оплаты.
//		Отказ             - Булево - признак отказа от выполнения операции.
//
Процедура ЗарегистрироватьОплатуВедомостейПрочихДоходовВУчетеНДФЛ(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, ДатаПлатежа, Отказ) Экспорт
	
	ВедомостиПрочихДоходов = Новый Массив; 
	
	ПериодРегистрации = '00010101';
	
	МетаданныеВзаиморасчетыСКонтрагентами = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиАкционерами;
	Для Каждого Ведомость Из Ведомости Цикл
		МетаданныеВедомости = Ведомость.Метаданные();
		Если МетаданныеВедомости.Движения.Содержит(МетаданныеВзаиморасчетыСКонтрагентами) Тогда
			ПериодРегистрации = Макс(ПериодРегистрации, Ведомость.ПериодРегистрации);
			ВедомостиПрочихДоходов.Добавить(Ведомость);
		КонецЕсли;
	КонецЦикла;
	
	Если ВедомостиПрочихДоходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("МассивВедомостей", ВедомостиПрочихДоходов);
	Структурапараметров.Вставить("ФизическиеЛица", ФизическиеЛица);
	
	ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеВедомостей.ФизическоеЛицо,
	|	ДанныеВедомостей.ДокументОснование,
	|	ДанныеВедомостей.СтатьяФинансирования,
	|	ДанныеВедомостей.СтатьяРасходов,
	|	СУММА(ДанныеВедомостей.Сумма) КАК СуммаВыплаты
	|ИЗ
	|	ВТДанныеВедомостейКВыплате КАК ДанныеВедомостей
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВедомостей.ФизическоеЛицо,
	|	ДанныеВедомостей.ДокументОснование,
	|	ДанныеВедомостей.СтатьяФинансирования,
	|	ДанныеВедомостей.СтатьяРасходов";
	
	СписокСотрудников = Запрос.Выполнить().Выгрузить();
	
	ОписательВТ = 
		ВзаиморасчетыССотрудниками.ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(
			МенеджерВременныхТаблиц, СписокСотрудников);
	ВзаиморасчетыССотрудниками.СоздатьВТСостояниеВыплат(
		ОписательВТ, Истина, Организация, ПериодРегистрации,
		ВедомостиПрочихДоходов, "ВТСписокСотрудников");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеВедомостей.ФизическоеЛицо,
	|	ДанныеВедомостей.СтавкаНалогообложенияРезидента,
	|	ДанныеВедомостей.МесяцНалоговогоПериода,
	|	ДанныеВедомостей.Подразделение,
	|	ДанныеВедомостей.КодДохода,
	|	ДанныеВедомостей.РегистрацияВНалоговомОргане,
	|	ДанныеВедомостей.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ДанныеВедомостей.ДокументОснование,
	|	ДанныеВедомостей.КатегорияДохода,
	|	ДанныеВедомостей.Сумма
	|ИЗ
	|	ВТДанныеВедомостейНалоги КАК ДанныеВедомостей";
	
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, Запрос, ДатаПлатежа);
	
	УчетФактическиПолученныхДоходов.ЗарегистрироватьНовуюДатуПолученияДохода(ПлатежныйДокумент.Ссылка, ПлатежныйДокумент.Движения, МенеджерВременныхТаблиц, ДатаПлатежа, ДатаПлатежа, Отказ, Истина);
	УчетНДФЛ.ВписатьСуммыВыплаченногоДоходаВУдержанныеНалоги(МенеджерВременныхТаблиц, ПлатежныйДокумент.Ссылка, ДатаПлатежа);
	УчетНДФЛ.СформироватьУдержанныйНалогПоВременнойТаблице(ПлатежныйДокумент.Движения, Отказ, Организация, ДатаПлатежа, МенеджерВременныхТаблиц, , Истина);
	
КонецПроцедуры

// Процедура регистрирует факт неудачи при попытке выплаты зарплаты документом.
// При этом ранее удержанные при выплате налоги "сторнируются".
//
// Параметры:
//      Объект - ДокументОбъект - объект на документ-регистратор;
//      ДополнительныеСвойства - коллекция дополнительных свойств объекта;
//      Отказ - признак отказа от заполнения движений.
//
// Обработка ошибочных ситуаций
// выдается сообщение, признак «Отказ» выставляется в Истина.
//
Процедура ЗарегистрироватьВозвратПоВедомостям(Объект, ДополнительныеСвойства, Отказ) Экспорт
	
	МассивФизЛиц = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФизическихЛиц.ВыгрузитьКолонку("ФизическоеЛицо");
	
	ТаблицаОплатаВедомостей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОплатаВедомостей;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаОплатаВедомостей Цикл
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНевыплатуПоВедомости(Объект.Движения, Отказ, СтрокаТаблицы.Ведомость, МассивФизЛиц);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплатаВедомостей Цикл
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНевыплатуПоВедомости(Объект.Движения, Отказ, Объект.ДокументВыдачи, МассивФизЛиц);
	КонецЦикла;
	
	УчетНДФЛ.ЗарегистрироватьНевыплатуДокументом(Объект.Движения, Отказ, Объект.ДокументВыдачи, МассивФизЛиц);
	
КонецПроцедуры

// Предназначена для расчета НДФЛ удержанного по переданным ведомостям
//
// Параметры:
//      МассивВедомостей - Массив - Ведомости из табличной части РасшифровкаПлатежа платежных документов
//      	для РКО ведомость берется из шапки документа.
//      Отказ - признак отказа от заполнения движений.
//      МассивФизЛиц - Массив - Физические лица.
//
// Возвращаемое значение:
//      ТаблицаЗначений - таблица удержанных сумм налогов в разрезе месяцев налогового периода и ставок.
//
Функция ПолучитьНДФЛУдержанныйПоВедомостям(МассивВедомостей, Отказ = Ложь, МассивФизическихЛиц = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ведомости.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Ведомости.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	Ведомости.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Ведомости.Подразделение КАК Подразделение,
	|	Ведомости.КодДохода КАК КодДохода,
	|	Ведомости.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Ведомости.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Ведомости.ДокументОснование КАК ДокументОснование,
	|	Ведомости.Сумма КАК Сумма,
	|	Ведомости.Ссылка.ПериодРегистрации КАК ПериодРегистрации
	|ПОМЕСТИТЬ ВТ_ДанныеВедомостей
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК Ведомости
	|ГДЕ
	|	Ведомости.Ссылка В(&МассивВедомостей)
	|	И (Ведомости.ФизическоеЛицо В (&МассивФизическихЛиц) ИЛИ &ПоВсемФизическимЛицам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомости.ФизическоеЛицо,
	|	Ведомости.СтавкаНалогообложенияРезидента,
	|	Ведомости.МесяцНалоговогоПериода,
	|	Ведомости.Подразделение,
	|	Ведомости.КодДохода,
	|	Ведомости.РегистрацияВНалоговомОргане,
	|	Ведомости.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Ведомости.ДокументОснование,
	|	Ведомости.Сумма,
	|	Ведомости.Ссылка.ПериодРегистрации
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.НДФЛ КАК Ведомости
	|ГДЕ
	|	Ведомости.Ссылка В(&МассивВедомостей)
	|	И (Ведомости.ФизическоеЛицо В (&МассивФизическихЛиц) ИЛИ &ПоВсемФизическимЛицам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомости.ФизическоеЛицо,
	|	Ведомости.СтавкаНалогообложенияРезидента,
	|	Ведомости.МесяцНалоговогоПериода,
	|	Ведомости.Подразделение,
	|	Ведомости.КодДохода,
	|	Ведомости.РегистрацияВНалоговомОргане,
	|	Ведомости.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Ведомости.ДокументОснование,
	|	Ведомости.Сумма,
	|	Ведомости.Ссылка.ПериодРегистрации
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.НДФЛ КАК Ведомости
	|ГДЕ
	|	Ведомости.Ссылка В(&МассивВедомостей)
	|	И (Ведомости.ФизическоеЛицо В (&МассивФизическихЛиц) ИЛИ &ПоВсемФизическимЛицам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомости.ФизическоеЛицо,
	|	Ведомости.СтавкаНалогообложенияРезидента,
	|	Ведомости.МесяцНалоговогоПериода,
	|	Ведомости.Подразделение,
	|	Ведомости.КодДохода,
	|	Ведомости.РегистрацияВНалоговомОргане,
	|	Ведомости.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Ведомости.ДокументОснование,
	|	Ведомости.Сумма,
	|	Ведомости.Ссылка.ПериодРегистрации
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.НДФЛ КАК Ведомости
	|ГДЕ
	|	Ведомости.Ссылка В(&МассивВедомостей)
	|	И (Ведомости.ФизическоеЛицо В (&МассивФизическихЛиц) ИЛИ &ПоВсемФизическимЛицам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_ДанныеВедомостей.ПериодРегистрации КАК Период,
	|	ВТ_ДанныеВедомостей.КодДохода КАК КодДохода,
	|	ВТ_ДанныеВедомостей.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента
	|ПОМЕСТИТЬ ВТСтавкаРезидента
	|ИЗ
	|	ВТ_ДанныеВедомостей КАК ВТ_ДанныеВедомостей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК Ставка,
	|	ВТ_ДанныеВедомостей.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ВТ_ДанныеВедомостей.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВТ_ДанныеВедомостей.Подразделение КАК Подразделение,
	|	ВТ_ДанныеВедомостей.КодДохода КАК КодДохода,
	|	ВТ_ДанныеВедомостей.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ДанныеВедомостей.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВТ_ДанныеВедомостей.ДокументОснование КАК ДокументОснование,
	|	СУММА(ВТ_ДанныеВедомостей.Сумма) КАК Сумма,
	|	ВТ_ДанныеВедомостей.ПериодРегистрации КАК Период
	|ИЗ
	|	ВТ_ДанныеВедомостей КАК ВТ_ДанныеВедомостей
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеВедомостей.ПериодРегистрации,
	|	ВТ_ДанныеВедомостей.ФизическоеЛицо,
	|	ВТ_ДанныеВедомостей.СтавкаНалогообложенияРезидента,
	|	ВТ_ДанныеВедомостей.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВТ_ДанныеВедомостей.МесяцНалоговогоПериода,
	|	ВТ_ДанныеВедомостей.КодДохода,
	|	ВТ_ДанныеВедомостей.Подразделение,
	|	ВТ_ДанныеВедомостей.ДокументОснование,
	|	ВТ_ДанныеВедомостей.РегистрацияВНалоговомОргане";
	
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("ПоВсемФизическимЛицам", МассивФизическихЛиц = Неопределено);
	Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
	
	УдержанныйНалог = Запрос.Выполнить().Выгрузить();
	УчетНДФЛ.СоздатьВТСтавкаНДФЛПоСтавкеРезидента(МенеджерВременныхТаблиц, "ВТСтавкаРезидента");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкаНДФЛПоСтавкеРезидента.Период,
	|	СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо,
	|	СтавкаНДФЛПоСтавкеРезидента.КодДохода,
	|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента,
	|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ
	|ИЗ
	|	ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента";
	
	ВыборкаСтавок = Запрос.Выполнить().Выбрать();
	
	ОтборСтавок = Новый Структура("ФизическоеЛицо, КодДохода, СтавкаНалогообложенияРезидента, Период");
	Для Каждого СтрокаНалога Из УдержанныйНалог Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтавок, СтрокаНалога);
		ВыборкаСтавок.Сбросить();
		Если ВыборкаСтавок.НайтиСледующий(ОтборСтавок) Тогда
			СтрокаНалога.Ставка = ВыборкаСтавок.СтавкаНДФЛ
		КонецЕсли;
	КонецЦикла;
	
	Возврат УдержанныйНалог;
	
КонецФункции

// Предназначена для расчета НДФЛ перечисленного по переданным ведомостям
//
// Параметры:
//      Объект - ДокументОбъект - документ-регистратор;
//      МассивВедомостей - Ведомости из табличной части РасшифровкаПлатежа платежных документов
//      Отказ - признак отказа от заполнения движений.
//
// Возвращаемое значение:
//      МенеджерВременныхТаблиц - данные перечисленных сумм налогов в разрезе физлиц, месяцев налогового периода и ставок.
//
Функция ПолучитьНДФЛПеречисленныйПоВедомостям(Объект, Ведомости, Отказ = Ложь)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("МассивВедомостей", Ведомости);
	
	ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеВедомостей.Ведомость КАК Ведомость,
	|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОплатаВедомостей.Регистратор КАК ДокументОплаты
	|ПОМЕСТИТЬ ВТОплатаВедомостей
	|ИЗ
	|	ВТДанныеВедомостейКВыплате КАК ДанныеВедомостей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|		ПО ДанныеВедомостей.Ведомость = ОплатаВедомостей.Ведомость
	|			И ДанныеВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведомости.Ведомость КАК Ведомость,
	|	Расшифровка.ФизическоеЛицо КАК ФизическоеЛицо,
	|	0 КАК СуммаЗачисления
	|ПОМЕСТИТЬ ВТОшибкиПеречисления
	|ИЗ
	|	Документ.ПодтверждениеЗачисленияЗарплаты КАК Подтверждение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК Ведомости
	|		ПО Подтверждение.ПервичныйДокумент = Ведомости.Ведомость
	|			И Подтверждение.Проведен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК Расшифровка
	|		ПО Расшифровка.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)
	|			И Подтверждение.Ссылка = Расшифровка.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаВедомостей.Ведомость,
	|	Расшифровка.ФизическоеЛицо,
	|	0
	|ИЗ
	|	Документ.ПодтверждениеЗачисленияЗарплаты КАК Подтверждение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОплатаВедомостей КАК ОплатаВедомостей
	|		ПО Подтверждение.ПервичныйДокумент = ОплатаВедомостей.ДокументОплаты
	|			И Подтверждение.Проведен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК Расшифровка
	|		ПО Расшифровка.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)
	|			И Расшифровка.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо
	|			И Подтверждение.Ссылка = Расшифровка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(УдержаниеНДФЛ.Период) КАК ДатаВыплаты
	|ИЗ
	|	ВТОплатаВедомостей КАК ОплатаВедомостей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК УдержаниеНДФЛ
	|		ПО ОплатаВедомостей.ДокументОплаты = УдержаниеНДФЛ.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаВыплаты) Тогда
		ДатаВыплаты = Выборка.ДатаВыплаты;
	Иначе
		ДатаВыплаты = '00010101';
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	НалоговыйОрганОрганизации = ЗарплатаКадры.РегистрацияВНалоговомОргане(
		Объект.Организация, Объект.ДатаПроведенияБанком);
	
	Запрос.УстановитьПараметр("РегистрацияОрганизацииВНалоговомОргане", НалоговыйОрганОрганизации);
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		Запрос.УстановитьПараметр("НалоговыйОрганПлатежа", Объект.РегистрацияВНалоговомОргане);
	Иначе
		Запрос.УстановитьПараметр("НалоговыйОрганПлатежа", НалоговыйОрганОрганизации);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомости.Организация КАК Организация,
	|	Ведомости.ПериодРегистрации КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА Ведомости.ОбъектВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПрочихДоходов.Дивиденды)
	|			ТОГДА ИСТИНА
	|		КОГДА Ведомости.ОбъектВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПрочихДоходов.ДивидендыСотрудникам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсчисленоПоДивидендам,
	|	ВЫБОР
	|		КОГДА Налоги.РегистрацияВНалоговомОргане = &НалоговыйОрганПлатежа
	|			ТОГДА Налоги.Сумма
	|		КОГДА Налоги.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			И &РегистрацияОрганизацииВНалоговомОргане = &НалоговыйОрганПлатежа
	|			ТОГДА Налоги.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВНалоговыйОрган,
	|	Налоги.Сумма КАК СуммаВсего,
	|	Налоги.*
	|ИЗ ВТДанныеВедомостейНалоги КАК Налоги
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК Ведомости
	|	ПО Налоги.Ведомость = Ведомости.Ведомость";
	
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, Запрос, ДатаВыплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Налоги.ПериодРегистрации КАК Период,
	|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Налоги.КодДохода КАК КодДохода,
	|	Налоги.КатегорияДохода КАК КатегорияДохода,
	|	Налоги.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента
	|ПОМЕСТИТЬ ВТСтавкаРезидента
	|ИЗ
	|	ВТНалогУдержанный КАК Налоги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалогУдержанный.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК Ставка,
	|	НалогУдержанный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НалогУдержанный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НалогУдержанный.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НалогУдержанный.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НалогУдержанный.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НалогУдержанный.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	НалогУдержанный.ПериодРегистрации КАК Период,
	|	СУММА(НалогУдержанный.СуммаВсего) КАК СуммаВсего,
	|	СУММА(НалогУдержанный.СуммаВНалоговыйОрган) КАК СуммаВНалоговыйОрган,
	|	СУММА(ЕСТЬNULL(ОшибкиПеречисления.СуммаЗачисления,
	|			НалогУдержанный.СуммаВсего)) КАК СуммаВсегоПоЗачисленным,
	|	СУММА(ЕСТЬNULL(ОшибкиПеречисления.СуммаЗачисления,
	|			НалогУдержанный.СуммаВНалоговыйОрган)) КАК СуммаВНалоговыйОрганПоЗачисленным,
	|	0 КАК Сумма
	|ИЗ
	|	ВТНалогУдержанный КАК НалогУдержанный
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиПеречисления КАК ОшибкиПеречисления
	|	ПО НалогУдержанный.Ведомость = ОшибкиПеречисления.Ведомость
	|		И НалогУдержанный.ФизическоеЛицо = ОшибкиПеречисления.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	НалогУдержанный.Организация,
	|	НалогУдержанный.ПериодРегистрации,
	|	НалогУдержанный.РегистрацияВНалоговомОргане,
	|	НалогУдержанный.МесяцНалоговогоПериода,
	|	НалогУдержанный.ФизическоеЛицо,
	|	НалогУдержанный.ИсчисленоПоДивидендам,
	|	НалогУдержанный.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НалогУдержанный.СтавкаНалогообложенияРезидента";
	
	НалогУдержанный = Запрос.Выполнить().Выгрузить();
	
	УчетНДФЛ.СоздатьВТСтавкаНДФЛПоСтавкеРезидента(МенеджерВременныхТаблиц, "ВТСтавкаРезидента");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкаНДФЛПоСтавкеРезидента.Период,
	|	СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо,
	|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента,
	|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ
	|ИЗ
	|	ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента";
	ВыборкаСтавок = Запрос.Выполнить().Выбрать();
	
	ОтборСтавок = Новый Структура("ФизическоеЛицо, СтавкаНалогообложенияРезидента, Период");
	Для Каждого СтрокаНалога Из НалогУдержанный Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтавок, СтрокаНалога);
		ВыборкаСтавок.Сбросить();
		Если ВыборкаСтавок.НайтиСледующий(ОтборСтавок) Тогда
			СтрокаНалога.Ставка = ВыборкаСтавок.СтавкаНДФЛ;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогУдержанный.Организация КАК Организация,
	|	НалогУдержанный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НалогУдержанный.Ставка КАК Ставка,
	|	НалогУдержанный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НалогУдержанный.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НалогУдержанный.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НалогУдержанный.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	НалогУдержанный.Сумма КАК Сумма,
	|	&РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	НалогУдержанный.Период КАК Период
	|ПОМЕСТИТЬ ВТНалогПеречисленный
	|ИЗ
	|	&НалогУдержанный КАК НалогУдержанный";
	
	Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.НомерВходящегоДокумента);
	Иначе
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер);
	КонецЕсли;
	Запрос.УстановитьПараметр("НалогУдержанный", НалогУдержанный);
	Запрос.УстановитьПараметр("РеквизитыПлатежногоПоручения",
		ДенежныеСредстваСервер.РеквизитыПлатежногоПорученияПоДатеНомеру(
			Объект.ДатаПроведенияБанком,
			НомерНаПечать));
	
	Если Объект.СуммаДокумента = НалогУдержанный.Итог("СуммаВНалоговыйОрган") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НалогУдержанный.Сумма", "НалогУдержанный.СуммаВНалоговыйОрган");
	ИначеЕсли Объект.СуммаДокумента = НалогУдержанный.Итог("СуммаВсего") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НалогУдержанный.Сумма", "НалогУдержанный.СуммаВсего");
	ИначеЕсли Объект.СуммаДокумента = НалогУдержанный.Итог("СуммаВНалоговыйОрганПоЗачисленным") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НалогУдержанный.Сумма", "НалогУдержанный.СуммаВНалоговыйОрганПоЗачисленным");
	ИначеЕсли Объект.СуммаДокумента = НалогУдержанный.Итог("СуммаВсегоПоЗачисленным") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НалогУдержанный.Сумма", "НалогУдержанный.СуммаВсегоПоЗачисленным");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Предназначена для расчета и регистрации НДФЛ удержанного 
// по записанным в учете данным и по переданным данным о выплатах.
//
// Параметры:
//      Объект - ДокументОбъект - документ-регистратор;
//      Отказ - признак отказа от заполнения движений.
//
Процедура РассчитатьИЗарегистрироватьПеречисленныйНДФЛ(Объект, Отказ) Экспорт

	МассивВедомостей = Объект.РасшифровкаПлатежа.ВыгрузитьКолонку("Ведомость");

	ПеречисленныйНалог = ПолучитьНДФЛПеречисленныйПоВедомостям(Объект, МассивВедомостей, Отказ);
	
	УчетНДФЛ.СформироватьПеречисленныйНалогПоВременнойТаблице(Объект.Движения, Отказ, Объект.Организация, Объект.ДатаПроведенияБанком, ПеречисленныйНалог, Истина);
	
КонецПроцедуры

// Возвращает дату, соответствующую налоговому периоду, за который произведен платеж.
//
// Параметры:
//    ПоказательОснования - Строка - Условное обозначение основания налогового платежа
//    ПоказательПериода - Строка - Условное обозначение периода, за который перечисляется налог
// Возвращаемое значение:
//    Дата - Месяц.
//
Функция МесяцНалоговогоПериода(ПоказательОснования, ПоказательПериода) Экспорт
	
	ПозицияПериода = СтрНайти(СокрЛП(ПоказательПериода),".");
	ПозицияГода = СтрНайти(Сред(СокрЛП(ПоказательПериода), ПозицияПериода + 1), ".") + ПозицияПериода;
	
	ПериодичностьНалога = Лев(СокрЛП(ПоказательПериода), ПозицияПериода - 1);
	СтрокаНомерПериода = Сред(СокрЛП(ПоказательПериода), ПозицияПериода + 1, ПозицияГода - ПозицияПериода - 1);
	СтрокаГодПериода = Сред(СокрЛП(ПоказательПериода), ПозицияГода + 1);
	
	Если СтрНайти("ТП, ЗД", ПоказательОснования) > 0 Тогда
		Если СтрДлина(ПериодичностьНалога) = 2
			И СтрДлина(СтрокаНомерПериода) = 2 
			И СтрДлина(СтрокаГодПериода) = 4
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПериодичностьНалога)
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаНомерПериода)
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаГодПериода) Тогда
			Возврат Дата(Число(СтрокаГодПериода), Число(СтрокаНомерПериода), Число(ПериодичностьНалога));
		КонецЕсли;
	КонецЕсли;
	
	Если ПериодичностьНалога = "ГД" Тогда
		Возврат НачалоМесяца(Дата(Число(СтрокаГодПериода), 1, 1));
	КонецЕсли;
	
	Если ПериодичностьНалога = "ПЛ" Тогда
		Возврат НачалоМесяца(Дата(Число(СтрокаГодПериода), Число(СтрокаНомерПериода)*6, 1));
	КонецЕсли;
	
	Если ПериодичностьНалога = "КВ" Тогда
		Возврат НачалоМесяца(Дата(Число(СтрокаГодПериода), Число(СтрокаНомерПериода)*3, 1));
	КонецЕсли;
	
	Если ПериодичностьНалога = "МС" Тогда
		Возврат НачалоМесяца(Дата(Число(СтрокаГодПериода), Число(СтрокаНомерПериода), 1));
	КонецЕсли;
	
	Возврат Дата(1,1,1);
	
КонецФункции

// Функция возвращает итоговую сумму незачисленных платежей по подтверждению банка.
//
// Параметры:
//   Подтверждение - ДокументСсылка.ПодтверждениеЗачисленияЗарплаты - ссылка на подтверждение банка.
//
// Возвращаемое значение:
//   Число   - сумма незачисленных платежей.
//
Функция СуммаНезачисленныхПлатежейПоПодтверждениюБанка(Подтверждение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(Подтверждение.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК Подтверждение
	|ГДЕ
	|	Подтверждение.Ссылка = &Ссылка
	|	И Подтверждение.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)";
	
	Запрос.УстановитьПараметр("Ссылка", Подтверждение);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Функция данные ведомостей для заполнения платежных документов.
//
// Параметры:
//   ПараметрыОтбора - Структура - структура с параметрами отбора ведомостей.
//   МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
//
// Возвращаемое значение:
//   Структура   - структура со значениями РеквизитыШапки и МассивОшибок.
//
Функция ДанныеВедомостей(ПараметрыОтбора, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Результат = Новый Структура("РеквизитыШапки, МассивОшибок", Неопределено, Новый Массив);
	
	ЭтоПеречислениеВБюджет = ПараметрыОтбора.Свойство("ХозяйственнаяОперация")
		И ПараметрыОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, ПараметрыОтбора);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеВедомостей.Ведомость,
	|	ДанныеВедомостей.ХозяйственнаяОперация,
	|	ДанныеВедомостей.ФормаОплаты
	|ПОМЕСТИТЬ ВТВедомостиПодробно
	|ИЗ ВТДанныеВедомостейКВыплате КАК ДанныеВедомостей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеВедомостей.Ведомость,
	|	ДанныеВедомостей.ХозяйственнаяОперация,
	|	ДанныеВедомостей.ФормаОплаты
	|ИЗ ВТДанныеВедомостейНалоги КАК ДанныеВедомостей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеВедомостей.Организация)         КАК Организация,
	|	МАКСИМУМ(ДанныеВедомостей.ВидДохода)           КАК ВидДохода,
	|	МАКСИМУМ(ДанныеВедомостей.ЗарплатныйПроект)    КАК ЗарплатныйПроект,
	|	МАКСИМУМ(ДанныеВедомостей.Банк)                КАК Банк,
	|	МАКСИМУМ(ДанныеВедомостейПодробно.ФормаОплаты) КАК ФормаОплаты,
	|	МАКСИМУМ(ДанныеВедомостей.Раздатчик)           КАК Раздатчик,
	|	МАКСИМУМ(ДанныеВедомостей.Касса)               КАК Касса,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.Организация)      КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.ВидДохода)        КАК КоличествоВидовДоходов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.ЗарплатныйПроект) КАК КоличествоЗарплатныхПроектов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.Банк)             КАК КоличествоБанков,
	|	МАКСИМУМ(ДанныеВедомостейПодробно.ХозяйственнаяОперация)             КАК ХозяйственнаяОперация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостейПодробно.ХозяйственнаяОперация) КАК КоличествоХозяйственныхОпераций,
	|	МИНИМУМ(ДанныеВедомостей.Проведен) КАК Проведен
	|ИЗ ВТВедомости КАК ДанныеВедомостей
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВедомостиПодробно КАК ДанныеВедомостейПодробно
	|		ПО ДанныеВедомостей.Ведомость = ДанныеВедомостейПодробно.Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВедомостиПодробно";
	
	РеквизитыШапки = Запрос.Выполнить().Выбрать();
	Если Не РеквизитыШапки.Следующий() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.РеквизитыШапки = РеквизитыШапки;
	
	Если Не РеквизитыШапки.Проведен Тогда
		ТекстОшибки = НСтр("ru='Ввод документа на основании не проведенных ведомостей невозможен.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаВедомость", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru='Различаются организации. Ввод одного документа на основании выбранных ведомостей невозможен.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаФормаОплаты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если ЭтоПеречислениеВБюджет Тогда
		// Прочие проверки при перечислении НДФЛ не требуются
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоХозяйственныхОпераций > 1 Тогда
		ТекстОшибки = НСтр("ru='Различается форма оплаты. Ввод одного документа на основании выбранных ведомостей невозможен.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаФормаОплаты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоХозяйственныхОпераций = 1 И РеквизитыШапки.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная
		И РеквизитыШапки.КоличествоВидовДоходов > 1 Тогда
		ТекстОшибки = НСтр("ru='Различается поле ""Вид дохода"". Ввод одного документа на основании выбранных ведомостей невозможен.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаФормаОплаты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоЗарплатныхПроектов > 1 Тогда
		ТекстОшибки = НСтр("ru='Различается поле ""Зарплатный проект"". Ввод одного документа на основании выбранных ведомостей невозможен.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаЗарплатныеПроекты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоБанков > 1 Тогда
		ТекстОшибки = НСтр("ru='Различается поле ""Банк"". Ввод одного документа на основании выбранных ведомостей невозможен.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаБанки", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция данные ведомостей для заполнения платежных документов на перечисление НДФЛ.
//
// Параметры:
//   МассивВедомостей - Массив - массив ведомостей на выплату зарплаты.
//
// Возвращаемое значение:
//   Структура   - структура со значениями РеквизитыШапки и МассивОшибок.
//
Функция ДанныеВедомостейНаПеречислениеНДФЛ(МассивВедомостей) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Налоги.Ссылка КАК Ведомость,
	|	Налоги.Ссылка.Организация КАК Организация,
	|	НЕ Налоги.Ссылка.Проведен КАК ЕстьОшибкиПроведен,
	|	Налоги.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Налоги.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТДанныеЗаполнения
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК Налоги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	Налоги.Ссылка.Организация,
	|	НЕ Налоги.Ссылка.Проведен,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.НДФЛ КАК Налоги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	Налоги.Ссылка.Организация,
	|	НЕ Налоги.Ссылка.Проведен,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.НДФЛ КАК Налоги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	Налоги.Ссылка.Организация,
	|	НЕ Налоги.Ссылка.Проведен,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.НДФЛ КАК Налоги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	Налоги.Ссылка.Организация,
	|	НЕ Налоги.Ссылка.Проведен,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк.НДФЛ КАК Налоги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	Налоги.Ссылка.Организация,
	|	НЕ Налоги.Ссылка.Проведен,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением.НДФЛ КАК Налоги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	Налоги.Ссылка.Организация,
	|	НЕ Налоги.Ссылка.Проведен,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.Сумма
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу.НДФЛ КАК Налоги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТДанныеЗаполнения.Организация) КАК Организация,
	|	СУММА(ВТДанныеЗаполнения.Сумма) КАК СуммаДокумента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТДанныеЗаполнения.ЕстьОшибкиПроведен
	|				ТОГДА ВТДанныеЗаполнения.Ведомость
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка)
	|		КОНЕЦ) КАК ВедомостьНеПроведена,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТДанныеЗаполнения.Организация) КАК КоличествоОрганизаций
	|ИЗ
	|	ВТДанныеЗаполнения КАК ВТДанныеЗаполнения";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивВедомостей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыШапки = РезультатЗапроса.Выбрать();
	
	Результат = Новый Структура("РеквизитыШапки, МассивОшибок", Неопределено, Новый Массив);
	
	Если Не РеквизитыШапки.Следующий() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.РеквизитыШапки = РеквизитыШапки;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ВедомостьНеПроведена) Тогда
		Текст = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
		Текст = СтрЗаменить(Текст, "%Документ%", РеквизитыШапки.ВедомостьНеПроведена);
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаПроведен", Текст);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоОрганизаций > 1 Тогда
		Текст = НСтр("ru='У выделенных ведомостей отличается поле ""Организация"". Ввод одного документа на основании выделенных ведомостей невозможен.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаОрганизации", Текст);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура выполняет регистрацию возмещения из ФСС расходов на пособия.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, содержащий таблицу ДокументыКОтражению.
//	ДокументОбъект - ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - Документ, если регистрация выполняется при проведении документа.
//	Отказ - Булево - Признак отказа от записи движений.
//
Процедура СформироватьВозмещениеРасходовПоСоциальномуСтрахованию(МенеджерВременныхТаблиц = Неопределено, Объект = Неопределено, Отказ = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Ссылка
		|ПОМЕСТИТЬ ДокументыКОтражению
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК Т
		|ГДЕ
		|	Т.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС) КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС) КАК ВидОперации
	|ПОМЕСТИТЬ ВтСчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_НСиПЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Субконто1 КАК ВидПлатежа,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Субконто2 КАК НалоговыйОрган,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ПоступлениеБезналичныхДенежныхСредств.Номер,
	|	ПоступлениеБезналичныхДенежныхСредств.ДатаПроведенияБанком КАК Дата,
	|	ПоступлениеБезналичныхДенежныхСредств.Организация,
	|	ПоступлениеБезналичныхДенежныхСредств.ХозяйственнаяОперация,
	|	ВтСчета.ВидОперации
	|ПОМЕСТИТЬ ТаблицаОтражения
	|ИЗ
	|	ДокументыКОтражению КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|		ПО Документы.Ссылка = ПоступлениеБезналичныхДенежныхСредств.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|		ПО Документы.Ссылка = ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчета КАК ВтСчета
	|		ПО (ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.СчетУчета = ВтСчета.СчетУчета)
	|ГДЕ
	|	ПоступлениеБезналичныхДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств)
	|	И ПоступлениеБезналичныхДенежныхСредств.ПроведеноБанком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтражения.Ссылка КАК Ссылка,
	|	ТаблицаОтражения.Дата КАК Период,
	|	ТаблицаОтражения.Организация КАК Организация,
	|	СУММА(ТаблицаОтражения.Сумма) КАК Сумма,
	|	ИСТИНА КАК ЭтоСтраховыеВзносы,
	|	ТаблицаОтражения.ВидОперации КАК ВидОбязательногоСтрахованияСотрудников
	|ИЗ
	|	ТаблицаОтражения КАК ТаблицаОтражения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтражения.Ссылка,
	|	ТаблицаОтражения.Дата,
	|	ТаблицаОтражения.Организация,
	|	ТаблицаОтражения.ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|	0 КАК Сумма,
	|	ЛОЖЬ КАК ЭтоСтраховыеВзносы,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС) КАК ВидОбязательногоСтрахованияСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОтражения";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаРасчетыСФондом = Результат[2].Выбрать();
	
	РасчетыСФондом = Результат[3].Выгрузить();
	
	Пока ВыборкаРасчетыСФондом.Следующий() Цикл
		
		Если ВыборкаРасчетыСФондом.Период >= ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(ВыборкаРасчетыСФондом.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект = Неопределено Тогда
			ДокОбъект = ВыборкаРасчетыСФондом.Ссылка.ПолучитьОбъект();
		Иначе
			ДокОбъект = Объект;
		КонецЕсли;
		
		НоваяСтрока = РасчетыСФондом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасчетыСФондом);
		
		УчетСтраховыхВзносов.СформироватьВозмещениеРасходовПоСоциальномуСтрахованию(
			ДокОбъект.Движения,
			Отказ,
			ВыборкаРасчетыСФондом.Организация,
			РасчетыСФондом,
			Истина);
		
		РасчетыСФондом.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строковое представление реквизитов платежного документа.
//
// Параметры:
//   ДатаПП - Дата - дата платежного поручения
//   НомерПП - Строка - номер платежного поручения.
//
// Возвращаемое значение:
//   Строка
//
Функция РеквизитыПлатежногоПорученияПоДатеНомеру(ДатаПП, НомерПП) Экспорт

	Возврат СтрШаблон(НСтр("ru='№ %1 от %2'"), НомерПП, Формат(ДатаПП, "ДЛФ=D"));

КонецФункции

Процедура ПроверитьПеречислениеНДФЛпоВедомостям(Объект, РасшифровкаБезРазбиения, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДД.Сумма,
	|	ДД.НомерСтроки,
	|	ДД.Ведомость
	|ПОМЕСТИТЬ Расшифровка
	|ИЗ
	|	&Расшифровка КАК ДД
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Ведомость
	|ПОМЕСТИТЬ Ведомости
	|ИЗ
	|	Расшифровка КАК ДД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ведомость,
	|	СУММА(ДД.Сумма) КАК Сумма
	|ПОМЕСТИТЬ Суммы
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК Реквизиты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК ДД
	|		ПО Реквизиты.Ссылка = ДД.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Ведомости КАК Ведомости
	|		ПО Реквизиты.Ссылка = Ведомости.Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ведомость,
	|	СУММА(ДД.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК Реквизиты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВКассу.НДФЛ КАК ДД
	|		ПО Реквизиты.Ссылка = ДД.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Ведомости КАК Ведомости
	|		ПО Реквизиты.Ссылка = Ведомости.Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ведомость,
	|	СУММА(ДД.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК Реквизиты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.НДФЛ КАК ДД
	|		ПО Реквизиты.Ссылка = ДД.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Ведомости КАК Ведомости
	|		ПО Реквизиты.Ссылка = Ведомости.Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ведомость,
	|	СУММА(ДД.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК Реквизиты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.НДФЛ КАК ДД
	|		ПО Реквизиты.Ссылка = ДД.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Ведомости КАК Ведомости
	|		ПО Реквизиты.Ссылка = Ведомости.Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДД.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Расшифровка КАК ДД
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДД.Ведомость) <> КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДД.Ведомость)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДД.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Расшифровка КАК ДД
	|	ЛЕВОЕ СОЕДИНЕНИЕ Суммы КАК Суммы
	|		ПО ДД.Ведомость = Суммы.Ведомость
	|
	|ГДЕ
	|	ДД.СУММА <> ЕСТЬNULL(Суммы.Сумма, 0)";
	
	Запрос.УстановитьПараметр("Расшифровка", Объект.РасшифровкаПлатежа.Выгрузить(, "Ведомость, НомерСтроки, Сумма"));
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ПроверкаДублей = МассивРезультатов[3];
	
	Если Не ПроверкаДублей.Пустой() Тогда
		
		Выборка = ПроверкаДублей.Выбрать();
		Выборка.Следующий();
		
		ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", Выборка.НомерСтроки, "Ведомость");
		КлючДанных = Объект;
		
		ТекстОшибки = НСтр("ru = 'Ведомость в строке %1 выбрана дважды. Повторяющиеся ведомости нужно удалить из табличной части.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Выборка.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, КлючДанных, ИмяПоля, , Отказ);
		
	КонецЕсли;
	
	ПроверкаСумм = МассивРезультатов[4];
	
	Если Не ПроверкаСумм.Пустой() Тогда
		
		Выборка = ПроверкаСумм.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если РасшифровкаБезРазбиения Тогда
				ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.Ведомость";
				КлючДанных = Неопределено;
				ТекстОшибки = НСтр("ru = 'Сумма налога к перечислению не соответствует ведомости. При перечислении налога по ведомостям суммы должны соответствовать.'");
			Иначе
				ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", Выборка.НомерСтроки, "Ведомость");
				КлючДанных = Объект;
				ТекстОшибки = НСтр("ru = 'В строке %1 сумма налога к перечислению не соответствует ведомости. При перечислении налога по ведомостям суммы должны быть равны.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Выборка.НомерСтроки);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, КлючДанных, ИмяПоля, , Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает код вида дохода исполнительного производства
//
// Параметры:
//   ВидДоходаИсполнительногоПроизводства - ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства - 
//
// Возвращаемое значение:
//   Строка - строковое значение вида доходов
//
Функция ПолучитьКодВидаДохода(ВидДоходаИсполнительногоПроизводства) Экспорт
	
	КодВидаДохода = "";
	
	Если ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения Тогда
		КодВидаДохода = "1";
	ИначеЕсли ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииНеоблагаемые Тогда
		КодВидаДохода = "2";
	ИначеЕсли ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииОблагаемые Тогда
		КодВидаДохода = "3";
	КонецЕсли;
	
	Возврат КодВидаДохода;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

//++ НЕ УТ
#Область ДенежныеДокументы

// Процедура заполняет таблицу остатками денежных документов
//
// Параметры:
//	Отбор - Структура - Параметры отбора остатков ДД
//		* Организация		- СправочникСсылка.Организации 				- Организация, в которой хранятся ДД
//		* Подразделение		- СправочникСсылка.СтруктураПредприятия 	- Подразделение, в котором хранятся ДД
//		* МОЛ 				- СправочникСсылка.ФизическиеЛица 			- МОЛ, у которого хранятся ДД
//		* Ссылка			- ДокументСсылка.ВыбытиеДенежныхДокументов 	- Документ, движения которого должны быть исключены из расчета остатков
//		* ДенежныеДокументы	- Массив 									- отбор по денежным документам
//	Таблица - ТаблицаЗначений - таблица, в которую будет помещен результат получения остатков ДД.
//
Процедура ЗаполнитьПоОстаткамДД(Отбор, Таблица) Экспорт
	
	ПараметрыОтбора = Новый Структура("ДенежныеДокументы, Организация, Подразделение, МОЛ, Ссылка, Валюта");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Отбор);
	
	МассивДД = ?(ПараметрыОтбора.ДенежныеДокументы = Неопределено, Новый Массив, ПараметрыОтбора.ДенежныеДокументы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтборПоДД",			МассивДД.Количество() > 0);
	Запрос.УстановитьПараметр("ДенежныеДокументы",	МассивДД);
	Запрос.УстановитьПараметр("Организация",		ПараметрыОтбора.Организация);
	Запрос.УстановитьПараметр("Подразделение",		ПараметрыОтбора.Подразделение);
	Запрос.УстановитьПараметр("МОЛОтправитель",		ПараметрыОтбора.МОЛ);
	Запрос.УстановитьПараметр("Ссылка",				ПараметрыОтбора.Ссылка);
	Запрос.УстановитьПараметр("ОтборПоВалюте",		ПараметрыОтбора.Валюта <> Неопределено);
	Запрос.УстановитьПараметр("Валюта",				ПараметрыОтбора.Валюта);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.ДенежныйДокумент	КАК ДенежныйДокумент,
	|	СУММА(Остатки.Количество)	КАК Количество,
	|	СУММА(Остатки.Сумма)		КАК Сумма
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.ДенежныйДокумент	КАК ДенежныйДокумент,
	|		Остатки.КоличествоОстаток	КАК Количество,
	|		Остатки.СуммаОстаток		КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ДенежныеДокументы.Остатки(
	|				,
	|				МОЛ = &МОЛОтправитель
	|					И Организация = &Организация
	|					И Подразделение = &Подразделение
	|					И (НЕ &ОтборПоВалюте ИЛИ ДенежныйДокумент.Валюта = &Валюта)
	|					И (НЕ &ОтборПоДД ИЛИ ДенежныйДокумент В (&ДенежныеДокументы))) КАК Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Движения.ДенежныйДокумент КАК ДенежныйДокумент,
	|		ВЫБОР КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			Движения.Количество
	|		ИНАЧЕ
	|			-Движения.Количество
	|		КОНЕЦ КАК Количество,
	|		ВЫБОР КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			Движения.Сумма
	|		ИНАЧЕ
	|			-Движения.Сумма
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ДенежныеДокументы КАК Движения
	|	ГДЕ
	|		Движения.Регистратор = &Ссылка
	|		И Движения.МОЛ = &МОЛОтправитель
	|		И Движения.Организация = &Организация
	|		И Движения.Подразделение = &Подразделение
	|		И (НЕ &ОтборПоВалюте ИЛИ Движения.ДенежныйДокумент.Валюта = &Валюта)
	|		И (НЕ &ОтборПоДД ИЛИ Движения.ДенежныйДокумент В (&ДенежныеДокументы))) КАК Остатки
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДенежныйДокумент
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДенежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ДенежныйДокумент	КАК ДенежныйДокумент,
	|	Остатки.Количество			КАК Количество,
	|	Остатки.Сумма				КАК Сумма,
	|	Остатки.Сумма				КАК СуммаВозврата,
	|	СправочникДД.Цена			КАК Цена,
	|	СправочникДД.Цена			КАК ЦенаВозврата,
	|	СправочникДД.Валюта			КАК Валюта,
	|	СправочникДД.Наименование	КАК НаименованиеДенежногоДокумента,
	|	СправочникДД.Родитель		КАК ГруппаДокумента
	|ИЗ
	|	ВтОстатки КАК Остатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДенежныеДокументы КАК СправочникДД
	|		ПО Остатки.ДенежныйДокумент = СправочникДД.Ссылка
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирования движений по регистру "Денежные документы".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Дополнительные свойства проведения
//	Движения - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьДвижениеДенежныхДокументов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеДокументы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеДокументы;
	
	Если Отказ ИЛИ ТаблицаДенежныеДокументы.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеДокументы = Движения.ДенежныеДокументы;
	ДвиженияДенежныеДокументы.Записывать = Истина;
	ДвиженияДенежныеДокументы.Загрузить(ТаблицаДенежныеДокументы);
	
КонецПроцедуры // ОтразитьДенежныеСредстваУПодотчетныхЛиц()

#КонецОбласти
//-- НЕ УТ

#Область НаименованиеОрганизации

// Формирует варианты наименования юридического лица в соответствии с его организационно-правовой формой.
//
// Параметры:
//    Наименование - Строка - Наименование юр. лица.
//
// Возвращаемое значение:
//    Структура - Наименование, РабочееНаименование, ПолноеНаименование.
//
Функция НаименованиеОрганизации(Знач Наименование) Экспорт
	
	Наименование = СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ООО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ОАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ЗАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ИП'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Общество с ограниченной ответственностью'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Открытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Закрытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Индивидуальный предприниматель'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки = СтрНайти(Наименование, """");
			ПозицияПоследнейКавычки = 0;
			
			ВремНаименование = Наименование;
			
			ПозицияКавычки = ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки = ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование = Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки = СтрНайти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование = Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование = Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизационноПравоваяФорма) Тогда
		ПолноеНаименование = Наименование;
	Иначе
		ПолноеНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
			ОрганизационноПравоваяФорма, Наименование);
	КонецЕсли;
	
	СокращенноеНаименование = Наименование + ?(ПустаяСтрока(ОрганизационноПравоваяФормаСокращенно), "", " ")
		+ ОрганизационноПравоваяФормаСокращенно;
	
	СтруктураНаименования = Новый Структура("Наименование, СокращенноеНаименование, ПолноеНаименование",
		Наименование, СокращенноеНаименование, ПолноеНаименование);
	
	Возврат СтруктураНаименования;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументов

// Возвращает параметры вызова функции ПолучитьБанковскийСчетОрганизацииПоУмолчанию
//	
// Возвращаемое значение
//    Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* БанковскийСчет 		  - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, который нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета.
//
Функция ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("БанковскийСчет");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	
	Возврат Структура;
	
КонецФункции

// Возвращает параметры вызова функции ПолучитьКассуОрганизацииПоУмолчанию
//	
// Возвращаемое значение
//    Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* Касса					  - СправочникСсылка.Кассы - Касса, которую нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета.
//
Функция ПараметрыЗаполненияКассыОрганизацииПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("Касса");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет наличие заказа в табличной части "Расшифровка платежа" документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект.
//
// Возвращаемое значение:
//	Булево - Истина - заказ указан в строке табличной части.
//
Функция УказанЗаказВРасшифровкеПлатежа(Объект)
	
	ЗаказУказан = Ложь;
	Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			ЗаказУказан = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗаказУказан;
	
КонецФункции // УказанЗаказВРасшифровкеПлатежа()

Функция ПолучитьПрефиксациюКассыКассовойКниги(Ссылка)
	
	РеквизитыПрефиксации = Новый Структура("ИспользоватьПрефикс, Префикс");
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.КассовыеКниги") Тогда
		РеквизитыПрефиксации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ИспользоватьПрефикс, Префикс");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Кассы") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "КассоваяКнига.ИспользоватьПрефикс, КассоваяКнига.Префикс");
		РеквизитыПрефиксации.Вставить("ИспользоватьПрефикс", Реквизиты.КассоваяКнигаИспользоватьПрефикс);
		РеквизитыПрефиксации.Вставить("Префикс", Реквизиты.КассоваяКнигаПрефикс);
	КонецЕсли;
	
	Возврат РеквизитыПрефиксации;
	
КонецФункции

Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат = Ложь;
	
	Наименование = СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
//++ НЕ УТ
#Область КонтрольПлатежейНаСоответствие275ФЗ

Функция ИнициализацияСвойствРезультатовПроверок()
	СвойстваРезультатовПроверок = Новый Структура("ВсеКонтролиПройдены, ОписанияРезультатов", Истина);
	
	ОписанияОшибок = Новый ТаблицаЗначений;
	ОписанияОшибок.Колонки.Добавить("ИмяОбработчикаКонтроля");
	ОписанияОшибок.Колонки.Добавить("КонтрольПройден");
	ОписанияОшибок.Колонки.Добавить("Описание");
	ОписанияОшибок.Колонки.Добавить("Раздел");
	
	СвойстваРезультатовПроверок.Вставить("ОписанияРезультатов", ОписанияОшибок);
	
	Возврат СвойстваРезультатовПроверок;
КонецФункции

Функция ТипДокумента(Ссылка)
	Результат = Новый Структура;
	
	ТипЗначения = ТипЗнч(Ссылка);
	Контролируется = ТипЗначения = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		ИЛИ ТипЗначения = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
	
	Результат.Вставить("ТипЗначения", ТипЗначения);
	Результат.Вставить("Контролируется", Контролируется);
	
	Возврат Результат;
КонецФункции

Функция ОписаниеТекстаЗапроса()
	ОписаниеТекстаЗапроса = Новый Структура("Текст, КоличествоВременныхТаблиц");
	
	ОбъединяемыеЗапросы = Новый Массив;
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_1());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_б());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_в());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_г());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_е());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_з());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_84_2());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_84_10());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_85_1_1());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_85_1_3());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_1());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_2());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_1());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_2());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_3());
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ВременныеТаблицы = Новый Массив;
	РезультирующиеВыборки = Новый Массив;
	УничтожениеОбщихВременныхТаблиц = Новый Массив;
	
	ШаблонПрефиксаТаблиц = "ЗапросКонтроля%1_";
	ИндексОбъединяемогоЗапроса = 0;
	Для Каждого ОбъединяемыйЗапрос Из ОбъединяемыеЗапросы Цикл 
		ПрефиксТаблиц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПрефиксаТаблиц, ИндексОбъединяемогоЗапроса);
		СхемаЗапроса.УстановитьТекстЗапроса(ОбъединяемыйЗапрос);
		
		ИменаВременныхТаблиц = Новый Соответствие;
		
		Для Каждого ПодзапросОбъединяемогоЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл 
			Если Не ПустаяСтрока(ПодзапросОбъединяемогоЗапроса.ТаблицаДляПомещения) Тогда // Временная таблица подзапроса
				УточнитьИменаВременныхТаблицВЗапросе(ПодзапросОбъединяемогоЗапроса, ИменаВременныхТаблиц, ПрефиксТаблиц);
				
				ИменаВременныхТаблиц.Вставить(ПодзапросОбъединяемогоЗапроса.ТаблицаДляПомещения, ПрефиксТаблиц + ПодзапросОбъединяемогоЗапроса.ТаблицаДляПомещения);
				ПодзапросОбъединяемогоЗапроса.ТаблицаДляПомещения = ИменаВременныхТаблиц[ПодзапросОбъединяемогоЗапроса.ТаблицаДляПомещения];
				ВременныеТаблицы.Добавить(ПодзапросОбъединяемогоЗапроса.ПолучитьТекстЗапроса());
			Иначе // Результирующая таблица подзапроса
				УточнитьИменаВременныхТаблицВЗапросе(ПодзапросОбъединяемогоЗапроса, ИменаВременныхТаблиц, ПрефиксТаблиц);
				
				РезультирующиеВыборки.Добавить(ПодзапросОбъединяемогоЗапроса.ПолучитьТекстЗапроса());
			КонецЕсли;
		КонецЦикла;
		
		ИндексОбъединяемогоЗапроса = ИндексОбъединяемогоЗапроса + 1; 
	КонецЦикла;
	
	РазделительЗапросов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////" + Символы.ПС;
	
	ТекстЗапросаВременныеТаблицы = СтрСоединить(ВременныеТаблицы, РазделительЗапросов);
	ТекстЗапросаРезультирующиеВыборки = СтрСоединить(РезультирующиеВыборки, РазделительЗапросов);
	
	ОписаниеТекстаЗапроса.Вставить("Текст", ТекстЗапросаВременныеТаблицы + РазделительЗапросов + ТекстЗапросаРезультирующиеВыборки);
	ОписаниеТекстаЗапроса.Вставить("КоличествоВременныхТаблиц", ВременныеТаблицы.Количество());
	
	Возврат ОписаниеТекстаЗапроса;
КонецФункции

Процедура УточнитьИменаВременныхТаблицВЗапросе(ЗапросСхемыЗапроса, ИменаВременныхТаблиц, ПрефиксТаблиц)
	ЗапросУточняемыйПоИменамВременныхТаблиц = ЗапросСхемыЗапроса.ПолучитьТекстЗапроса();
	Для Каждого ИмяВременнойТаблицы Из ИменаВременныхТаблиц Цикл 
		ЗапросУточняемыйПоИменамВременныхТаблиц = СтрЗаменить(ЗапросУточняемыйПоИменамВременныхТаблиц, ИмяВременнойТаблицы.Ключ, ИмяВременнойТаблицы.Значение); 
		ЗапросУточняемыйПоИменамВременныхТаблиц = СтрЗаменить(ЗапросУточняемыйПоИменамВременныхТаблиц, ПрефиксТаблиц + ИмяВременнойТаблицы.Значение, ИмяВременнойТаблицы.Значение); 
	КонецЦикла;
	ЗапросСхемыЗапроса.УстановитьТекстЗапроса(ЗапросУточняемыйПоИменамВременныхТаблиц);
КонецПроцедуры

Функция ИнициализацияИндексовРезультатовЗапросов()
	ИндексыРезультатовЗапроса = Новый Соответствие;
	
	// Контроль раздела I "В соответствии с 275-ФЗ от 29.12.2012г."
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_1", 0);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_2_б", 1);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_2_в", 2);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_2_г", 3);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_2_е", 4);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_2_з", 5);
	
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_84_2", 6);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_84_10", 7);
	
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_85_1_1", 8);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_85_1_3", 9);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_85_2_1", 10);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_85_2_2", 11);
	
	// Контроль раздела II "Указание Банка России 3729-У от 15.07.2015г."
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел2_3729У_2_1", 12);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел2_3729У_2_2", 13);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел2_3729У_2_3", 14);
	
	Возврат ИндексыРезультатовЗапроса;
КонецФункции

Функция ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)
	Возврат ИндексыРезультатовЗапросов[ИмяОбработчикаКонтроля];
КонецФункции

Процедура ДобавитьОписаниеРезультатаКонтроля(Знач ИмяОбработчикаКонтроля, Знач КонтрольПройден, Знач ОписаниеМассивСтрок, Знач ОписанияРезультатов)
	НовоеОписание = ОписанияРезультатов.Добавить();
	НовоеОписание.ИмяОбработчикаКонтроля = ИмяОбработчикаКонтроля;
	НовоеОписание.КонтрольПройден = КонтрольПройден;
	НовоеОписание.Описание = СтрСоединить(ОписаниеМассивСтрок, Символы.ПС + Символы.ПС);
	НовоеОписание.Раздел = РазделКонтроля(ИмяОбработчикаКонтроля);
КонецПроцедуры

#Область КонтрольРаздела1
// Контроль раздела I "В соответствии с 275-ФЗ"

#Область Пункт83

Процедура РезультатКонтроля_Раздел1_275_83_1_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_1";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
		И ДенежныеСредстваПовтИсп.ПрочаяОперацияСписанияДСПо275ФЗ(Ссылка.ХозяйственнаяОперация)
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		
		Описание = НСтр("ru= 'Контроль не требуется для операции ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_1();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.ТребуетсяПроверка И НайденнаяСтрока.УИП <> НайденнаяСтрока.ИГК Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'В поле УИП (%1) не указан ИГК отдельного счета (%2).'");
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						?(ЗначениеЗаполнено(НайденнаяСтрока.УИП), НайденнаяСтрока.УИП, "-"), 
						?(ЗначениеЗаполнено(НайденнаяСтрока.ИГК), НайденнаяСтрока.ИГК, "-"),);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_83_1_2_б(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_2_б";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		Описание = НСтр("ru= 'Контроль не требуется для операции ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	ИначеЕсли Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ОплатаТоваровРаботУслугПоРегулируемымЦенам Тогда
		Описание = НСтр("ru= 'Контроль не требуется для типа платежа ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_б();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				Если СтрЧислоВхождений(НайденнаяСтрока.НазначениеПлатежа, НайденнаяСтрока.ПредметОплаты) = 0 Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Товар, работа или услуга ""%1"", по которому применяются тарифы, не указан в назначении платежа.'");
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, НайденнаяСтрока.ПредметОплаты);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_83_1_2_в(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_2_в";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю Тогда
		Описание = НСтр("ru= 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_в();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль состояния
				Если НайденнаяСтрока.Состояние <> Перечисления.СостоянияГосударственныхКонтрактов.Завершен Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Контракт ""%1"" не завершен и имеет статус ""%2"".'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.КонтрактСЗаказчиком, НайденнаяСтрока.Состояние);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания контракта
				Если Не НайденнаяСтрока.КонтрактУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Не указан подтверждающий документ вида ""Контракт"".'"); 
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания документов, подтверждающих исполнение контракта
				Если Не НайденнаяСтрока.ДокументИсполненияУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Не указан ни один документ, подтверждающий исполнение контракта.'");
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				
				// Контроль накопленных по контракту сумм перечисления прибыли
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаФакт > НайденнаяСтрока.СуммаПлан Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма платежа'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма заявки'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru= '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышает размер прибыли %3 руб., указанный в контрактах.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаФакт, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаПлан, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_83_1_2_г(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_2_г";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю Тогда
		Описание = НСтр("ru= 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_г();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль состояния
				Если НайденнаяСтрока.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Договор ""%1"" закрыт.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.КонтрактСЗаказчиком, 
						НайденнаяСтрока.Состояние);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль головного исполнителя
				Если Не НайденнаяСтрока.ОрганизацияЭтоГоловнойИсполнитель Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Организация ""%1"" не является головным исполнителем.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.Организация);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания контракта
				Если Не НайденнаяСтрока.КонтрактУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Не указан подтверждающий документ вида ""Контракт"".'"); 
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания документов, подтверждающих исполнение контракта
				Если Не НайденнаяСтрока.ДокументИсполненияУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Не указан ни один документ, подтверждающий исполнение контракта.'");
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				
				// Контроль накопленных по контракту сумм перечисления прибыли
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаФакт > НайденнаяСтрока.СуммаПлан Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма платежа'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма заявки'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru= '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышает размер прибыли %3 руб., указанный в контрактах.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаФакт, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаПлан, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_83_1_2_е(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_2_е";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств Тогда
		Описание = НСтр("ru= 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_е();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль состояния
				Если НайденнаяСтрока.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Договор ""%1"" закрыт.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.КонтрактСЗаказчиком, 
						НайденнаяСтрока.Состояние);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания контракта
				Если Не НайденнаяСтрока.КонтрактУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Не указан подтверждающий документ вида ""Контракт"".'"); 
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания документов, подтверждающих исполнение контракта
				Если Не НайденнаяСтрока.ДокументИсполненияУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Не указан ни один документ, подтверждающий исполнение контракта.'");
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				
				// Контроль накопленных по контракту сумм возмещения
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаФакт > НайденнаяСтрока.СуммаПлан Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма платежа'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма заявки'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru= '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышает размер возмещения %3 руб., указанный в контрактах.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаФакт, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаПлан, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_83_1_2_з(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_2_з";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ОплатаИныхРасходовВПределахУстановленнойСуммыВМесяц Тогда
		Описание = НСтр("ru= 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_з();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль лимита 3 млн. руб.
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаРасходовВТекущемМесяце > 3000000 Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма платежа'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма заявки'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru= '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышает лимит 3 млн.руб. в месяц.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаРасходовВТекущемМесяце, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль, что счет-получатель не принадлежит организации
				Если НайденнаяСтрока.ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации Тогда
					Описание = НСтр("ru= 'Счет-получатель %1 принадлежит организации.'");
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, НайденнаяСтрока.БанковскийСчет);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_1()
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов).ГосударственныйКонтракт
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка)
	|	КОНЕЦ КАК ГосударственныйКонтракт,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов).ДоговорСУчастникомГОЗ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПроверка
	|ПОМЕСТИТЬ РасшифровкаЗаявок
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В(&ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов).ГосударственныйКонтракт
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка)
	|	КОНЕЦ КАК ГосударственныйКонтракт,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов).ПлатежиПо275ФЗ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПроверка
	|ПОМЕСТИТЬ РасшифровкаСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В(&ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.УИП,
	|	ПроверяемыеДокументы.ИГК,
	|	ПроверяемыеДокументы.ТребуетсяПроверка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.ИдентификаторПлатежа КАК УИП,
	|		ЕСТЬNULL(Расшифровка.ГосударственныйКонтракт.Код, """") КАК ИГК,
	|		ЕСТЬNULL(Расшифровка.ТребуетсяПроверка, ЛОЖЬ) КАК ТребуетсяПроверка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|			ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаЗаявок КАК Расшифровка
	|			ПО ЗаявкаНаРасходованиеДенежныхСредств.Ссылка = Расшифровка.Ссылка
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ИдентификаторПлатежа,
	|		ЕСТЬNULL(Расшифровка.ГосударственныйКонтракт.Код, """"),
	|		ЕСТЬNULL(Расшифровка.ТребуетсяПроверка, ЛОЖЬ)
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаСписаний КАК Расшифровка
	|			ПО СписаниеСРасчетногоСчета.Ссылка = Расшифровка.Ссылка
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ) КАК ПроверяемыеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.УИП,
	|	ПроверяемыеДокументы.ИГК,
	|	ПроверяемыеДокументы.ТребуетсяПроверка";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_б()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПроверяемыеДокументы.ПредметОплаты КАК ПредметОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.НазначениеПлатежа КАК НазначениеПлатежа,
	|		ВЫРАЗИТЬ(ЗаявкаНаРасходованиеДенежныхСредств.ПредметОплаты КАК СТРОКА(210)) КАК ПредметОплаты
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.НазначениеПлатежа,
	|		ВЫРАЗИТЬ(СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПредметОплаты КАК СТРОКА(210))
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.НазначениеПлатежа,
	|	ПроверяемыеДокументы.ПредметОплаты";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_в()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПодтверждаетИсполнениеКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В
	|			(ВЫБРАТЬ
	|				ПроверяемыеДокументы.Ссылка
	|			ИЗ
	|				ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК КонтрактСЗаказчиком,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка)) КАК Состояние,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ДоговорыСписаний.Договор.СуммаПрибыли, 0)) КАК СуммаПлан,
	|	СУММА(ЕСТЬNULL(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыОборот, 0)) КАК СуммаФакт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактФайлЗаполнен,
	|	МАКСИМУМ(ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта) КАК ДокументИсполненияУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Файл < Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияФайлЗаполнен
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|		ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|			И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|				(ВЫБРАТЬ
	|					ПроверяемыеВидыДокументов.Ссылка
	|				ИЗ
	|					ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ДоговорыСЗаказчиками КАК ДоговорыЗаявок
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|			И ПроверяемыеДокументы.Заявка = ДоговорыЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСписаний КАК ДоговорыСписаний
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|			И ПроверяемыеДокументы.Ссылка = ДоговорыСписаний.Ссылка
	|			И (ДоговорыСписаний.Договор = ДоговорыЗаявок.ДоговорСЗаказчиком)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|				,
	|				&ТекущаяДата,
	|				Регистратор,
	|				ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|		ПО (ДоговорыСписаний.Ссылка = ДвиженияДенежныеСредстваКонтрагентОбороты.Договор)
	|			И (ДвиженияДенежныеСредстваКонтрагентОбороты.Регистратор <> ПроверяемыеДокументы.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента,
	|	ДоговорыСписаний.Договор,
	|	ПроверяемыеДокументы.Заявка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка))";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_г()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПодтверждаетИсполнениеКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В
	|			(ВЫБРАТЬ
	|				ПроверяемыеДокументы.Ссылка
	|			ИЗ
	|				ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ВЫБОР
	|		КОГДА НЕ ДоговорыСписаний.Договор ЕСТЬ NULL 
	|				И ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			ТОГДА ДоговорыСписаний.Договор.Организация = ВЫРАЗИТЬ(ПроверяемыеДокументы.Ссылка КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Организация
	|		КОГДА НЕ ДоговорыСписаний.Договор ЕСТЬ NULL 
	|				И ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|			ТОГДА ДоговорыСписаний.Договор.Организация = ВЫРАЗИТЬ(ПроверяемыеДокументы.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств).Организация
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЭтоГоловнойИсполнитель,
	|	ПроверяемыеДокументы.Ссылка.Организация КАК Организация,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка)) КАК Статус,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ДоговорыСписаний.Договор.СуммаПрибыли, 0)) КАК СуммаПлан,
	|	СУММА(ЕСТЬNULL(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыОборот, 0)) КАК СуммаФакт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактФайлЗаполнен,
	|	МАКСИМУМ(ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта) КАК ДокументИсполненияУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияФайлЗаполнен
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|		ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|			И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|				(ВЫБРАТЬ
	|					ПроверяемыеВидыДокументов.Ссылка
	|				ИЗ
	|					ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ДоговорыСЗаказчиками КАК ДоговорыЗаявок
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|			И ПроверяемыеДокументы.Заявка = ДоговорыЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСписаний КАК ДоговорыСписаний
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|			И ПроверяемыеДокументы.Ссылка = ДоговорыСписаний.Ссылка
	|			И (ДоговорыСписаний.Договор = ДоговорыЗаявок.ДоговорСЗаказчиком)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|				,
	|				&ТекущаяДата,
	|				Регистратор,
	|				ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|		ПО (ДоговорыСписаний.Ссылка = ДвиженияДенежныеСредстваКонтрагентОбороты.Договор)
	|			И (ДвиженияДенежныеСредстваКонтрагентОбороты.Регистратор <> ПроверяемыеДокументы.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ ДоговорыСписаний.Договор ЕСТЬ NULL 
	|				И ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			ТОГДА ДоговорыСписаний.Договор.Организация = ВЫРАЗИТЬ(ПроверяемыеДокументы.Ссылка КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Организация
	|		КОГДА НЕ ДоговорыСписаний.Договор ЕСТЬ NULL 
	|				И ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|			ТОГДА ДоговорыСписаний.Договор.Организация = ВЫРАЗИТЬ(ПроверяемыеДокументы.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств).Организация
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ПроверяемыеДокументы.Заявка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка))";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_е()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПодтверждаетИсполнениеКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыСписаний.Ссылка,
	|	ДоговорыСписаний.Договор,
	|	0 КАК СуммаКВозмещению
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов)
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК Договор
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ГДЕ
	|		РасшифровкаПлатежа.Ссылка В
	|				(ВЫБРАТЬ
	|					ПроверяемыеДокументы.Ссылка
	|				ИЗ
	|					ПроверяемыеДокументы КАК ПроверяемыеДокументы)) КАК ДоговорыСписаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК КонтрактСЗаказчиком,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка)) КАК Статус,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ДоговорыСписаний.СуммаКВозмещению, 0)) КАК СуммаПлан,
	|	СУММА(ЕСТЬNULL(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыОборот, 0)) КАК СуммаФакт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактФайлЗаполнен,
	|	МАКСИМУМ(ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта) КАК ДокументИсполненияУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияФайлЗаполнен
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|		ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|			И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|				(ВЫБРАТЬ
	|					ПроверяемыеВидыДокументов.Ссылка
	|				ИЗ
	|					ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ДоговорыСЗаказчиками КАК ДоговорыЗаявок
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|			И ПроверяемыеДокументы.Заявка = ДоговорыЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСписаний КАК ДоговорыСписаний
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|			И ПроверяемыеДокументы.Ссылка = ДоговорыСписаний.Ссылка
	|			И (ДоговорыСписаний.Договор = ДоговорыЗаявок.ДоговорСЗаказчиком)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|				,
	|				&ТекущаяДата,
	|				Регистратор,
	|				ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|		ПО (ДоговорыСписаний.Ссылка = ДвиженияДенежныеСредстваКонтрагентОбороты.Договор)
	|			И (ДвиженияДенежныеСредстваКонтрагентОбороты.Регистратор <> ПроверяемыеДокументы.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента,
	|	ДоговорыСписаний.Договор,
	|	ПроверяемыеДокументы.Заявка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка))";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_з()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ОплатаИныхРасходовВПределахУстановленнойСуммыВМесяц))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчет КАК БанковскийСчет,
	|	ПроверяемыеДокументыГруппировка.ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации КАК ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.БанковскийСчетКасса КАК БанковскийСчет,
	|		ЛОЖЬ КАК ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.Ссылка.ПлатежиПо275ФЗ
	|		И ЗаявкаНаРасходованиеДенежныхСредств.Ссылка.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств,
	|		СписаниеСРасчетногоСчета.БанковскийСчет,
	|		СписаниеСРасчетногоСчета.БанковскийСчетПолучатель <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчет,
	|	ПроверяемыеДокументыГруппировка.ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК Ссылка
	|ПОМЕСТИТЬ ХозяйственныеОперацииРасходов
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|ГДЕ
	|	НастройкиХозяйственныхОпераций.Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ДенежныеСредства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.ДенежныеСредства КАК БанковскийСчет,
	|	СУММА(ДвиженияДенежныеСредстваДоходыРасходыОбороты.СуммаРеглОборот) КАК СуммаОплат
	|ПОМЕСТИТЬ ОплатыПоБанковскимСчетам
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей)
	|				И ДенежныеСредства В
	|					(ВЫБРАТЬ
	|						ПроверяемыеДокументы.БанковскийСчет
	|					ИЗ
	|						ПроверяемыеДокументы)
	|				И ХозяйственнаяОперация В
	|					(ВЫБРАТЬ
	|						ХозяйственныеОперацииРасходов.Ссылка
	|					ИЗ
	|						ХозяйственныеОперацииРасходов)) КАК ДвиженияДенежныеСредстваДоходыРасходыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.ДенежныеСредства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.ДенежныеСредства,
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыРеглОборот
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей)
	|				И ДенежныеСредства В
	|					(ВЫБРАТЬ
	|						ПроверяемыеДокументы.БанковскийСчет
	|					ИЗ
	|						ПроверяемыеДокументы)
	|				И ХозяйственнаяОперация В
	|					(ВЫБРАТЬ
	|						ХозяйственныеОперацииРасходов.Ссылка
	|					ИЗ
	|						ХозяйственныеОперацииРасходов)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныхСредствОбороты.ДенежныеСредства,
	|	ДвиженияДенежныхСредствОбороты.СуммаРеглОборот
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей)
	|				И ДенежныеСредства В
	|					(ВЫБРАТЬ
	|						ПроверяемыеДокументы.БанковскийСчет
	|					ИЗ
	|						ПроверяемыеДокументы)
	|				И ХозяйственнаяОперация В
	|					(ВЫБРАТЬ
	|						ХозяйственныеОперацииРасходов.Ссылка
	|					ИЗ
	|						ХозяйственныеОперацииРасходов)) КАК ДвиженияДенежныхСредствОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ПроверяемыеДокументы.БанковскийСчет КАК БанковскийСчет,
	|	ПроверяемыеДокументы.ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации КАК ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	ЕСТЬNULL(СУММА(ОплатыПоБанковскимСчетам.СуммаОплат), 0) КАК СуммаРасходовВТекущемМесяце
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоБанковскимСчетам КАК ОплатыПоБанковскимСчетам
	|		ПО ПроверяемыеДокументы.БанковскийСчет = ОплатыПоБанковскимСчетам.БанковскийСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка,
	|	ПроверяемыеДокументы.БанковскийСчет,
	|	ПроверяемыеДокументы.ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента";
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область Пункт84

Процедура РезультатКонтроля_Раздел1_275_84_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_84_2";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.СписаниеСуммКредитовПеречисленныхУполномоченнымБанком Тогда
		Описание = НСтр("ru= 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_84_2();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				// Проверка непревышения суммы платежей нарастающим итогом над остатком кредита
				Если НайденнаяСтрока.СуммаДокумента > НайденнаяСтрока.ОстатокКредита Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма платежа'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма заявки'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru= '%1 руб. превышает сумму остатка по кредиту %2 руб..'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.ОстатокКредита, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Проверка банковских реквизитов счета-отправителя и счета-получателя
				Если НайденнаяСтрока.БанкОтправитель <> НайденнаяСтрока.БанкПолучатель Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Банковский счет %1 должен быть открыт в банке %2 счета-получателя %3.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.БанковскийСчетОтправитель, 
						НайденнаяСтрока.БанкПолучатель, 
						НайденнаяСтрока.БанковскийСчетПолучатель);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_84_10(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_84_10";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.СписаниеСвязанноеСРазмещениемНаДепозитеУполномоченногоБанка Тогда
		Описание = НСтр("ru= 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_84_10();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Проверка банковских реквизитов счета-отправителя и счета-получателя
				Если НайденнаяСтрока.БанкОтправитель <> НайденнаяСтрока.БанкПолучатель Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Банковский счет-получатель %1 должен быть открыт в уполномоченном банке %2.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.БанковскийСчетПолучатель, 
						НайденнаяСтрока.БанкОтправитель);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_84_2()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.СписаниеСуммКредитовПеречисленныхУполномоченнымБанком))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель КАК БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправитель КАК БанкОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель КАК БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкПолучатель КАК БанкПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправительЭтоБанкПолучатель КАК БанкОтправительЭтоБанкПолучатель
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаспределениеПоСчетам.Ссылка КАК Ссылка,
	|		РаспределениеПоСчетам.Ссылка КАК Заявка,
	|		РаспределениеПоСчетам.БанковскийСчетКасса КАК БанковскийСчетОтправитель,
	|		ВЫРАЗИТЬ(РаспределениеПоСчетам.БанковскийСчетКасса КАК Справочник.БанковскиеСчетаОрганизаций).Банк КАК БанкОтправитель,
	|		РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента КАК БанковскийСчетПолучатель,
	|		РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.Банк КАК БанкПолучатель,
	|		ВЫРАЗИТЬ(РаспределениеПоСчетам.БанковскийСчетКасса КАК Справочник.БанковскиеСчетаОрганизаций).Банк = РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.Банк КАК БанкОтправительЭтоБанкПолучатель
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК РаспределениеПоСчетам
	|	ГДЕ
	|		РаспределениеПоСчетам.Ссылка В(&ПроверяемыеДокументы)
	|		И РаспределениеПоСчетам.Ссылка.ПлатежиПо275ФЗ
	|		И РаспределениеПоСчетам.Ссылка.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств,
	|		СписаниеСРасчетногоСчета.БанковскийСчет,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.Банк,
	|		СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента,
	|		СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.Банк,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.Банк = СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.Банк
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправительЭтоБанкПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ПроверяемыеДокументы.БанковскийСчетОтправитель КАК БанковскийСчетОтправитель,
	|	ПроверяемыеДокументы.БанкОтправитель КАК БанкОтправитель,
	|	ПроверяемыеДокументы.БанковскийСчетПолучатель КАК БанковскийСчетПолучатель,
	|	ПроверяемыеДокументы.БанкПолучатель КАК БанкПолучатель,
	|	ПроверяемыеДокументы.БанкОтправительЭтоБанкПолучатель КАК БанкОтправительЭтоБанкПолучатель,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	ЕСТЬNULL(СУММА(ПоступленияКредитныхСредств.СуммаОплатыОборот), 0) КАК ОстатокКредита
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|				,
	|				,
	|				,
	|				ДенежныеСредства В
	|						(ВЫБРАТЬ
	|							ПроверяемыеДокументы.БанковскийСчетОтправитель
	|						ИЗ
	|							ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|					И ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам)) КАК ПоступленияКредитныхСредств
	|		ПО ПроверяемыеДокументы.БанковскийСчетОтправитель = ПоступленияКредитныхСредств.ДенежныеСредства
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента,
	|	ПроверяемыеДокументы.БанковскийСчетОтправитель,
	|	ПроверяемыеДокументы.БанкОтправитель,
	|	ПроверяемыеДокументы.БанковскийСчетПолучатель,
	|	ПроверяемыеДокументы.БанкПолучатель,
	|	ПроверяемыеДокументы.БанкОтправительЭтоБанкПолучатель";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_84_10()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.СписаниеСвязанноеСРазмещениемНаДепозитеУполномоченногоБанка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель КАК БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправитель КАК БанкОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель КАК БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкПолучатель КАК БанкПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправительЭтоБанкПолучатель КАК БанкОтправительЭтоБанкПолучатель
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаспределениеПоСчетам.Ссылка КАК Ссылка,
	|		РаспределениеПоСчетам.Ссылка КАК Заявка,
	|		РаспределениеПоСчетам.БанковскийСчетКасса КАК БанковскийСчетОтправитель,
	|		ВЫРАЗИТЬ(РаспределениеПоСчетам.БанковскийСчетКасса КАК Справочник.БанковскиеСчетаОрганизаций).Банк КАК БанкОтправитель,
	|		РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента КАК БанковскийСчетПолучатель,
	|		РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.Банк КАК БанкПолучатель,
	|		ВЫРАЗИТЬ(РаспределениеПоСчетам.БанковскийСчетКасса КАК Справочник.БанковскиеСчетаОрганизаций).Банк = РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.Банк КАК БанкОтправительЭтоБанкПолучатель
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК РаспределениеПоСчетам
	|	ГДЕ
	|		РаспределениеПоСчетам.Ссылка В(&ПроверяемыеДокументы)
	|		И РаспределениеПоСчетам.Ссылка.ПлатежиПо275ФЗ
	|		И РаспределениеПоСчетам.Ссылка.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств,
	|		СписаниеСРасчетногоСчета.БанковскийСчет,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.Банк,
	|		СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента,
	|		СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.Банк,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.Банк = СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.Банк
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправительЭтоБанкПолучатель";
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область Пункт85

Процедура РезультатКонтроля_Раздел1_275_85_1_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_85_1_1";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту 
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
		И ДенежныеСредстваПовтИсп.ПрочаяОперацияСписанияДСПо275ФЗ(Ссылка.ХозяйственнаяОперация)
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		Описание = НСтр("ru= 'Контроль не требуется для операции ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	ИначеЕсли Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.СписаниеНаОтдельныйСчет Тогда
		Описание = НСтр("ru= 'Контроль не требуется для типа платежа ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_85_1_1();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль совпадения УИП и ИГК
				Если НайденнаяСтрока.ИГКСчетаОтправителя <> НайденнаяСтрока.УИП Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'ИГК %1 банковского счета-отправителя ""%2"" не совпадает с УИП %3.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.ИГКСчетаОтправителя, 
						НайденнаяСтрока.БанковскийСчетОтправитель, 
						НайденнаяСтрока.УИП);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль совпадения ИГК отдельных счетов
				Если НайденнаяСтрока.ИГКСчетаОтправителя <> НайденнаяСтрока.ИГКСчетаПолучателя Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'ИГК %1 банковского счета-отправителя ""%2"" не совпадает с ИГК %3 банковского счета-получателя ""%4"".'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.ИГКСчетаОтправителя, 
						НайденнаяСтрока.БанковскийСчетОтправитель, 
						НайденнаяСтрока.ИГКСчетаПолучателя, 
						НайденнаяСтрока.БанковскийСчетПолучатель);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_85_1_3(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_85_1_3";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если ДанныеДокументовДляКонтроля = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_85_1_3();
		ПроверяемыеДокументы = Новый Массив;
		ПроверяемыеДокументы.Добавить(Ссылка);
		Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
	Иначе
		ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
	КонецЕсли;
	
	Отбор = Новый Структура("Ссылка", Ссылка);
	НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
	
	КонтролируемыеВидыДокументы = ДанныеДокументовДляКонтроляТаблица.Скопировать(НайденныеСтроки, "ВидДокумента");
	СоответствиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(КонтролируемыеВидыДокументы.ВыгрузитьКолонку(0), "КраткоеНаименование, Наименование");
	
	Если НайденныеСтроки.Количество() >= 1 Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
			// Контроль указания всех подтверждающих документов в назначении платежа
			НазначениеПлатежа = НайденнаяСтрока.НазначениеПлатежа;
			ПредставлениеДокумента = ПредставлениеПодтверждающегоДокумента(
				ПредставлениеВидаДокумента(НайденнаяСтрока.ВидДокумента, СоответствиеРеквизитов),
				НайденнаяСтрока.Номер, 
				НайденнаяСтрока.Дата);
				
			Если СтрЧислоВхождений(НазначениеПлатежа, ПредставлениеДокумента) = 0 Тогда
				КонтрольПройден = Ложь;
				
				Описание = НСтр("ru= 'Подтверждающий документ ""%1"" не указан в назначении платежа.'"); 
				Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ПредставлениеДокумента);
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЦикла;
		
		// Контроль непревышения суммы контракта
		СуммаДокумента = НайденныеСтроки[0].СуммаДокумента;
		
		СуммыКонтрактовВременная = ДанныеДокументовДляКонтроляТаблица.Скопировать(НайденныеСтроки, "КонтрактСЗаказчиком, СуммаКонтракта");
		СуммыКонтрактовВременная.Свернуть("КонтрактСЗаказчиком, СуммаКонтракта");
		СуммаКонтрактов = СуммыКонтрактовВременная.Итог("СуммаКонтракта");
		
		СуммыФактаВременная = ДанныеДокументовДляКонтроляТаблица.Скопировать(НайденныеСтроки, "КонтрактСЗаказчиком, СуммаФакт");
		СуммыФактаВременная.Свернуть("КонтрактСЗаказчиком, СуммаФакт");
		СуммаФакт = СуммыФактаВременная.Итог("СуммаФакт");
		
		Если СуммаДокумента + СуммаФакт > СуммаКонтрактов Тогда
			КонтрольПройден = Ложь;
			
			Описание = НСтр("ru= 'Сумма документа %1 руб. с учетом ранее выставленных распоряжений на сумму %2 руб. превышает сумму контракта %3 руб..'"); 
			Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
				Формат(СуммаДокумента, "ЧДЦ=2; ЧН="), 
				Формат(СуммаФакт, "ЧДЦ=2; ЧН="), 
				Формат(СуммаКонтрактов, "ЧДЦ=2; ЧН="));
			ОписаниеМассивСтрок.Добавить(Описание);
		КонецЕсли;
		
		Если КонтрольПройден Тогда
			Описание = НСтр("ru= 'Контроль пройден.'");
			ОписаниеМассивСтрок.Добавить(Описание);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_85_2_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_85_2_1";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту 
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		Описание = НСтр("ru= 'Контроль не требуется для операции ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_1();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль указания контракта
				Если Не НайденнаяСтрока.КонтрактУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Не указан подтверждающий документ вида ""Контракт"".'"); 
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_85_2_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_85_2_2";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту 
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И Ссылка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		Описание = НСтр("ru= 'Контроль не требуется для операции ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_2();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль указания документов, подтверждающих исполнение контракта
				Если Не НайденнаяСтрока.ДокументИсполненияУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru= 'Не указан ни один документ, подтверждающий исполнение контракта.'");
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_85_1_1()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка,
	|	ПроверяемыеДокументыГруппировка.УИП КАК УИП,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель КАК БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетОтправитель КАК ЭтоОСБанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.ИГКСчетаОтправителя КАК ИГКСчетаОтправителя,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель КАК БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетПолучатель КАК ЭтоОСБанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.ИГКСчетаПолучателя КАК ИГКСчетаПолучателя,
	|	МАКСИМУМ(ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетОтправитель) = МАКСИМУМ(ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетПолучатель) КАК ВыбраныОтдельныеСчета,
	|	МАКСИМУМ(ПроверяемыеДокументыГруппировка.ИГКСчетаОтправителя) = МАКСИМУМ(ПроверяемыеДокументыГруппировка.ИГКСчетаПолучателя) КАК ИГКВыбранныхОтдельныхСчетовСовпадает
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаспределениеПоСчетам.Ссылка КАК Ссылка,
	|		РаспределениеПоСчетам.Ссылка КАК Заявка,
	|		РаспределениеПоСчетам.Ссылка.ИдентификаторПлатежа КАК УИП,
	|		РаспределениеПоСчетам.БанковскийСчетКасса КАК БанковскийСчетОтправитель,
	|		РаспределениеПоСчетам.БанковскийСчетКасса.ОтдельныйСчетГОЗ КАК ЭтоОСБанковскийСчетОтправитель,
	|		РаспределениеПоСчетам.БанковскийСчетКасса.ГосударственныйКонтракт.Код КАК ИГКСчетаОтправителя,
	|		ВЫБОР
	|			КОГДА РаспределениеПоСчетам.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА РаспределениеПоСчетам.Ссылка.БанковскийСчетПолучатель
	|			ИНАЧЕ РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента
	|		КОНЕЦ КАК БанковскийСчетПолучатель,
	|		ВЫБОР
	|			КОГДА РаспределениеПоСчетам.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА РаспределениеПоСчетам.Ссылка.БанковскийСчетПолучатель.ОтдельныйСчетГОЗ
	|			ИНАЧЕ РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.ОтдельныйСчетГОЗ
	|		КОНЕЦ КАК ЭтоОСБанковскийСчетПолучатель,
	|		ВЫБОР
	|			КОГДА РаспределениеПоСчетам.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА РаспределениеПоСчетам.Ссылка.БанковскийСчетПолучатель.ГосударственныйКонтракт.Код
	|			ИНАЧЕ РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.ГосударственныйКонтракт.Код
	|		КОНЕЦ КАК ИГКСчетаПолучателя
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК РаспределениеПоСчетам
	|	ГДЕ
	|		РаспределениеПоСчетам.Ссылка В (&ПроверяемыеДокументы)
	|		И РаспределениеПоСчетам.Ссылка.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств,
	|		СписаниеСРасчетногоСчета.ИдентификаторПлатежа,
	|		СписаниеСРасчетногоСчета.БанковскийСчет,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.ОтдельныйСчетГОЗ,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.ГосударственныйКонтракт.Код,
	|		ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчета.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА СписаниеСРасчетногоСчета.БанковскийСчетПолучатель
	|			ИНАЧЕ СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчета.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА СписаниеСРасчетногоСчета.БанковскийСчетПолучатель.ОтдельныйСчетГОЗ
	|			ИНАЧЕ СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.ОтдельныйСчетГОЗ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчета.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА СписаниеСРасчетногоСчета.БанковскийСчетПолучатель.ГосударственныйКонтракт.Код
	|			ИНАЧЕ СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.ГосударственныйКонтракт.Код
	|		КОНЕЦ
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В (&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка,
	|	ПроверяемыеДокументыГруппировка.УИП,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.ИГКСчетаОтправителя,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.ИГКСчетаПолучателя";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_85_1_3()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.Ссылка.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов)
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыМеждуОрганизациями
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыМеждуОрганизациями)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В
	|			(ВЫБРАТЬ
	|				ПроверяемыеДокументы.Ссылка
	|			ИЗ
	|				ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДоговорыВЗаявке.ДоговорСЗаказчиком, НЕОПРЕДЕЛЕНО) КАК КонтрактСЗаказчиком,
	|	СУММА(ЕСТЬNULL(ДоговорыВЗаявке.ДоговорСЗаказчиком.Сумма, 0)) КАК СуммаКонтракта
	|ПОМЕСТИТЬ КонтрактыСЗаказчиками
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ДоговорыСЗаказчиками КАК ДоговорыВЗаявке
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|			И ПроверяемыеДокументы.Заявка = ДоговорыВЗаявке.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ЕСТЬNULL(ДоговорыВЗаявке.ДоговорСЗаказчиком, НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК Ссылка
	|ПОМЕСТИТЬ ХозяйственныеОперацииРасходов
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|ГДЕ
	|	НастройкиХозяйственныхОпераций.Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ДенежныеСредства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.Договор КАК Договор,
	|	СУММА(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыРеглОборот) КАК СуммаОплат
	|ПОМЕСТИТЬ ОплатыПоДоговорам
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И Договор В
	|					(ВЫБРАТЬ
	|						КонтрактыСЗаказчиками.КонтрактСЗаказчиком
	|					ИЗ
	|						КонтрактыСЗаказчиками)
	|				И ХозяйственнаяОперация В
	|					(ВЫБРАТЬ
	|						ХозяйственныеОперацииРасходов.Ссылка
	|					ИЗ
	|						ХозяйственныеОперацииРасходов)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ПроверяемыеДокументы.Ссылка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	ПодтверждающиеДокументыЗаявки.ВидДокумента КАК ВидДокумента,
	|	ПодтверждающиеДокументыЗаявки.Номер КАК Номер,
	|	ПодтверждающиеДокументыЗаявки.Дата КАК Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПодтверждающиеДокументыЗаявки.ВидДокумента) КАК КоличествоПодтверждающихДокументов,
	|	КонтрактыСЗаказчиками.Ссылка КАК КонтрактСЗаказчиком,
	|	КонтрактыСЗаказчиками.СуммаКонтракта КАК СуммаКонтракта,
	|	СУММА(ЕСТЬNULL(ОплатыПоДоговорам.СуммаОплат, 0)) КАК СуммаФакт
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ПодтверждающиеДокументыЗаявки
	|		ПО ПроверяемыеДокументы.Заявка = ПодтверждающиеДокументыЗаявки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
	|		ПО ПроверяемыеДокументы.Ссылка = КонтрактыСЗаказчиками.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоДоговорам КАК ОплатыПоДоговорам
	|		ПО (КонтрактыСЗаказчиками.КонтрактСЗаказчиком = ОплатыПоДоговорам.Договор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка,
	|	ПодтверждающиеДокументыЗаявки.ВидДокумента,
	|	ПодтверждающиеДокументыЗаявки.Номер,
	|	ПодтверждающиеДокументыЗаявки.Дата,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента,
	|	КонтрактыСЗаказчиками.Ссылка,
	|	КонтрактыСЗаказчиками.СуммаКонтракта,
	|	ПроверяемыеДокументы.Ссылка.НазначениеПлатежа";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_1()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактФайлЗаполнен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|		ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|		ИЗ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|		ГДЕ
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В (&ПроверяемыеДокументы)
	|			И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СписаниеСРасчетногоСчета.Ссылка,
	|			СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|		ИЗ
	|			Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|		ГДЕ
	|			СписаниеСРасчетногоСчета.Ссылка В (&ПроверяемыеДокументы)
	|			И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеДокументыГруппировка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПроверяемыеДокументыГруппировка.Ссылка,
	|		ПроверяемыеДокументыГруппировка.Заявка) КАК ПроверяемыеДокументы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|			ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|				И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|					(ВЫБРАТЬ
	|						ПроверяемыеВидыДокументов.Ссылка
	|					ИЗ
	|						ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_2()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПодтверждаетИсполнениеКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	МАКСИМУМ(ЕстьNull(ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта, ЛОЖЬ)) КАК ДокументИсполненияУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияФайлЗаполнен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|		ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|		ИЗ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|		ГДЕ
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В (&ПроверяемыеДокументы)
	|			И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СписаниеСРасчетногоСчета.Ссылка,
	|			СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|		ИЗ
	|			Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|		ГДЕ
	|			СписаниеСРасчетногоСчета.Ссылка В (&ПроверяемыеДокументы)
	|			И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеДокументыГруппировка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПроверяемыеДокументыГруппировка.Ссылка,
	|		ПроверяемыеДокументыГруппировка.Заявка) КАК ПроверяемыеДокументы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|			ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|				И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|					(ВЫБРАТЬ
	|						ПроверяемыеВидыДокументов.Ссылка
	|					ИЗ
	|						ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка";
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КонтрольРаздела2
// Контроль раздела II "Дополнительные критерии контроля"

Процедура РезультатКонтроля_Раздел2_3729У_2_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел2_3729У_2_1";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов Тогда
		Описание = НСтр("ru= 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_1();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаФакт > 0.5 * НайденнаяСтрока.СуммаКонтракта Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма платежа'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма заявки'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru= '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышают 50% от цены контракта %3 руб..'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаФакт, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаКонтракта, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел2_3729У_2_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел2_3729У_2_2";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю
		И Ссылка.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю Тогда
		Описание = НСтр("ru= 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Ссылка.ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_2();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаФакт > 0.2 * НайденнаяСтрока.СуммаКонтракта Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма платежа'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru= 'Сумма заявки'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru= '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышают 50% от цены контракта %3 руб..'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаФакт, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаКонтракта, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru= 'Контроль пройден.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел2_3729У_2_3(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел2_3729У_2_3";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	Если ДанныеДокументовДляКонтроля = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_3();
		ПроверяемыеДокументы = Новый Массив;
		ПроверяемыеДокументы.Добавить(Ссылка);
		Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
		
		ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
	Иначе
		ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
	КонецЕсли;
	
	Отбор = Новый Структура("Ссылка", Ссылка);
	НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() >= 1 Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
			Если Макс(НайденнаяСтрока.СуммаЗаявок, НайденнаяСтрока.СуммаОплат) > НайденнаяСтрока.ПодтверждающийДокументСумма Тогда
				КонтрольПройден = Ложь;
				
				ЧастиПредставления = Новый Массив;
				ЧастиПредставления.Добавить(НайденнаяСтрока.ПодтверждающийДокументВид);
				Если ЗначениеЗаполнено(НайденнаяСтрока.ПодтверждающийДокументНомер) Тогда
					ЧастиПредставления.Добавить(НСтр("ru= '№'"));
					ЧастиПредставления.Добавить(НайденнаяСтрока.ПодтверждающийДокументНомер);
				КонецЕсли;
				Если ЗначениеЗаполнено(НайденнаяСтрока.ПодтверждающийДокументДата) Тогда
					ЧастиПредставления.Добавить(НСтр("ru= 'от'") );
					ЧастиПредставления.Добавить(Формат(НайденнаяСтрока.ПодтверждающийДокументДата, "ДЛФ=D"));
				КонецЕсли;
				ПредставлениеДокумента = СтрСоединить(ЧастиПредставления, Символы.НПП);
				
				ЧастиОписания = Новый Массив;
				Если НайденнаяСтрока.ЭтоСписание Тогда
					ЧастиОписания.Добавить(НСтр("ru= 'Сумма платежа'")); 
				ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
					ЧастиОписания.Добавить(НСтр("ru= 'Сумма заявки'")); 
				КонецЕсли;
				
				ЧастиОписания.Добавить(НСтр("ru= '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. и оплат на сумму %3 руб. превышают сумму %4 руб. подтверждающего документа ""%5"".'"));
				
				Описание = СтрСоединить(ЧастиОписания, " ");
					
				Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
					Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
					Формат(НайденнаяСтрока.СуммаЗаявок, "ЧДЦ=2; ЧН="), 
					Формат(НайденнаяСтрока.СуммаОплат, "ЧДЦ=2; ЧН="), 
					Формат(НайденнаяСтрока.ПодтверждающийДокументСумма, "ЧДЦ=2; ЧН="), 
					ПредставлениеДокумента);
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЦикла;
		
		Если КонтрольПройден Тогда
			Описание = НСтр("ru= 'Контроль пройден.'");
			ОписаниеМассивСтрок.Добавить(Описание);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Функция ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_1()
	ТекстЗапроса =  "ВЫБРАТЬ
	|	ПроверяемыеЗаявкиГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеЗаявкиГруппировка
	|ГДЕ
	|	ПроверяемыеЗаявкиГруппировка.Заявка.ТипПлатежаФЗ275 = ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеЗаявкиГруппировка.Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В
	|			(ВЫБРАТЬ
	|				ПроверяемыеДокументы.Ссылка
	|			ИЗ
	|				ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК КонтрактСЗаказчиком,
	|	СУММА(ЕСТЬNULL(ДоговорыСписаний.Договор.Сумма, 0)) КАК СуммаКонтракта
	|ПОМЕСТИТЬ КонтрактыСЗаказчиками
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ДоговорыСЗаказчиками КАК ДоговорыВЗаявке
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|			И ПроверяемыеДокументы.Заявка = ДоговорыВЗаявке.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСКонтрагентами
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|			И (ДоговорыВЗаявке.ДоговорСЗаказчиком = ДоговорыСКонтрагентами.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСписаний КАК ДоговорыСписаний
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|			И ПроверяемыеДокументы.Ссылка = ДоговорыСписаний.Ссылка
	|			И (ДоговорыСписаний.Договор = ДоговорыВЗаявке.ДоговорСЗаказчиком)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.Договор КАК Договор,
	|	СУММА(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыРеглОборот) КАК СуммаОплат
	|ПОМЕСТИТЬ ОплатыПоДоговорам
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И ТипПлатежаФЗ275 = ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов)
	|				И Договор В
	|					(ВЫБРАТЬ
	|						КонтрактыСЗаказчиками.КонтрактСЗаказчиком
	|					ИЗ
	|						КонтрактыСЗаказчиками)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(КонтрактыСЗаказчиками.СуммаКонтракта) КАК СуммаКонтракта,
	|	СУММА(ЕСТЬNULL(ОплатыПоДоговорам.СуммаОплат, 0)) КАК СуммаФакт
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
	|		ПО ПроверяемыеДокументы.Ссылка = КонтрактыСЗаказчиками.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоДоговорам КАК ОплатыПоДоговорам
	|		ПО (КонтрактыСЗаказчиками.КонтрактСЗаказчиком = ОплатыПоДоговорам.Договор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_2()
	ТекстЗапроса =  "ВЫБРАТЬ
	|	ПроверяемыеЗаявкиГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеЗаявкиГруппировка
	|ГДЕ
	|	ПроверяемыеЗаявкиГруппировка.Заявка.ТипПлатежаФЗ275 В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю), ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеЗаявкиГруппировка.Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В
	|			(ВЫБРАТЬ
	|				ПроверяемыеДокументы.Ссылка
	|			ИЗ
	|				ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК КонтрактСЗаказчиком,
	|	СУММА(ЕСТЬNULL(ДоговорыСписаний.Договор.Сумма, 0)) КАК СуммаКонтракта
	|ПОМЕСТИТЬ КонтрактыСЗаказчиками
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ДоговорыСЗаказчиками КАК ДоговорыВЗаявке
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|			И ПроверяемыеДокументы.Заявка = ДоговорыВЗаявке.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСКонтрагентами
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|			И (ДоговорыВЗаявке.ДоговорСЗаказчиком = ДоговорыСКонтрагентами.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСписаний КАК ДоговорыСписаний
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|			И ПроверяемыеДокументы.Ссылка = ДоговорыСписаний.Ссылка
	|			И (ДоговорыСписаний.Договор = ДоговорыВЗаявке.ДоговорСЗаказчиком)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.Договор КАК Договор,
	|	СУММА(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыРеглОборот) КАК СуммаОплат
	|ПОМЕСТИТЬ ОплатыПоДоговорам
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И ТипПлатежаФЗ275 В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю), ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю))
	|				И Договор В
	|					(ВЫБРАТЬ
	|						КонтрактыСЗаказчиками.КонтрактСЗаказчиком
	|					ИЗ
	|						КонтрактыСЗаказчиками)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(КонтрактыСЗаказчиками.СуммаКонтракта) КАК СуммаКонтракта,
	|	СУММА(ЕСТЬNULL(ОплатыПоДоговорам.СуммаОплат, 0)) КАК СуммаФакт
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
	|		ПО ПроверяемыеДокументы.Ссылка = КонтрактыСЗаказчиками.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоДоговорам КАК ОплатыПоДоговорам
	|		ПО (КонтрактыСЗаказчиками.КонтрактСЗаказчиком = ОплатыПоДоговорам.Договор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_3()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПодтверждаетИсполнениеКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеЗаявкиГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеЗаявкиГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеЗаявкиГруппировка.Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Заявка КАК ПроверяемаяЗаявка,
	|	ЕСТЬNULL(ПроверяемыеДокументы.Ссылка.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ЗаявкаПодтверждающиеДокументы.ВидДокумента, Неопределено) КАК ПодтверждающийДокументВид,
	|	ЕСТЬNULL(ЗаявкаПодтверждающиеДокументы.Номер, Неопределено) КАК ПодтверждающийДокументНомер,
	|	ЕСТЬNULL(ЗаявкаПодтверждающиеДокументы.Дата, Неопределено) КАК ПодтверждающийДокументДата,
	|	ЕСТЬNULL(ЗаявкаПодтверждающиеДокументы.Сумма, 0) КАК ПодтверждающийДокументСумма,
	|	ЗаявкаНаРасходованиеДенежныхСредствПодтверждающиеДокументы.Ссылка КАК Заявка
	|ПОМЕСТИТЬ ЗаявкиИспользующиеПодтверждающиеДокументы
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаНаРасходованиеДенежныхСредствПодтверждающиеДокументы
	|			ПО ЗаявкаПодтверждающиеДокументы.Файл = ЗаявкаНаРасходованиеДенежныхСредствПодтверждающиеДокументы.Файл
	|		ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|			И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|				(ВЫБРАТЬ
	|					ПроверяемыеВидыДокументов.Ссылка
	|				ИЗ
	|					ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявки.Заявка КАК Заявка,
	|	СУММА(ЕСТЬNULL(СписаниеСРасчетногоСчета.СуммаДокумента, 0)) КАК Сумма
	|ПОМЕСТИТЬ ОплатыПоЗаявкам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкиИспользующиеПодтверждающиеДокументы.Заявка КАК Заявка
	|	ИЗ
	|		ЗаявкиИспользующиеПодтверждающиеДокументы КАК ЗаявкиИспользующиеПодтверждающиеДокументы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаявкиИспользующиеПодтверждающиеДокументы.Заявка) КАК Заявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|		ПО Заявки.Заявка = СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|			И (СписаниеСРасчетногоСчета.Проведен)
	|			И (СписаниеСРасчетногоСчета.БанковскийСчет.ОтдельныйСчетГОЗ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заявки.Заявка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.Ссылка КАК Ссылка,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ЗаявкиИспользующиеПодтверждающиеДокументы.СуммаДокумента) КАК СуммаЗаявок,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументВид КАК ПодтверждающийДокументВид,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументНомер КАК ПодтверждающийДокументНомер,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументДата КАК ПодтверждающийДокументДата,
	|	МАКСИМУМ(ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументСумма) КАК ПодтверждающийДокументСумма,
	|	СУММА(ЕстьNull(ОплатыПоЗаявкам.Сумма, 0)) КАК СуммаОплат
	|ИЗ
	|	ЗаявкиИспользующиеПодтверждающиеДокументы КАК ЗаявкиИспользующиеПодтверждающиеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоЗаявкам КАК ОплатыПоЗаявкам
	|		ПО ЗаявкиИспользующиеПодтверждающиеДокументы.Заявка = ОплатыПоЗаявкам.Заявка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.Ссылка,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументВид,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументНомер,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументДата,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.СуммаДокумента";
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#КонецОбласти
//-- НЕ УТ

// Процедура устанавливает параметры выбора для контрагента, если не включено раздельное ведение партнеров и контрагентов.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Элемент - ПолеФормы - Поле для ввода контрагента.
//
Процедура УстановитьПараметрыВыбораКонтрагента(Объект, Элемент) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Формирует таблицу НДС по переданным объектам расчетов
// 
// Параметры
//    ДатаДокумента - Дата - Дата платежного документа
//    ВалютаДокумента - СправочникСсылка.Валюты - Валюта платежного документа
//    ОбъектыРасчетов - Массив - Объекты расчетов, данные НДС которых выбираются
//    ОплатаОтКлиента - Булево - Признак оплаты от клиента или платежа поставщику.
//
Функция РасшифровкаПлатежаНДС(ДатаДокумента, ВалютаДокумента, ОбъектыРасчетов, ОплатаОтКлиента = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактуры.ДокументОснование КАК ДокументОснование
	|
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетаФактуры
	|
	|ГДЕ
	|	СчетаФактуры.Ссылка В (&МассивДокументов)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                 КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС              КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента  КАК СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаСуммНДС
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                 КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС              КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента  КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ТаблицаДокумента.СтавкаНДС
	|	КОНЕЦ                          КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ТаблицаДокумента.СтавкаНДС
	|	КОНЕЦ                          КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ЕСТЬNULL(ТаблицаУслуги.СтавкаНДС, ТаблицаДокумента.СтавкаНДС)     КАК СтавкаНДС,
	|	ЕСТЬNULL(ТаблицаУслуги.СуммаСНДС, ТаблицаДокумента.СуммаСНДС)     КАК СуммаСНДС,
	|	ЕСТЬNULL(ТаблицаУслуги.СуммаНДС, ТаблицаДокумента.СуммаНДС)       КАК СуммаНДС,
	|	ТаблицаДокумента.Валюта        КАК Валюта,
	|	ТаблицаДокумента.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
	|	ПО
	|		ТаблицаУслуги.Ссылка = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВыкупПринятыхНаХранениеТоваров.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВыкупТоваровХранителем.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВыкупТоваровХранителем.Товары КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|		ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	И НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка           КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС        КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаПродажи     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаПродажиНДС  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта    КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка           КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС        КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаПродажи     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаПродажиНДС  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта    КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ТаблицаДокумента.СтавкаНДС
	|	КОНЕЦ                          КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ТаблицаДокумента.СтавкаНДС
	|	КОНЕЦ                          КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ТаблицаДокумента.СтавкаНДС
	|	КОНЕЦ                          КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реализация.Ссылка              КАК Ссылка,
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ТаблицаДокумента.СтавкаНДС
	|	КОНЕЦ                          КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРеализации.Товары КАК ТаблицаДокумента
	|	ПО
	|		ТаблицаДокумента.Ссылка.ДокументОснование = Реализация.Ссылка
	|	
	|ГДЕ
	|	Реализация.Ссылка В (&МассивДокументов)
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И ТаблицаДокумента.Ссылка В (
	|		ВЫБРАТЬ
	|			МАКСИМУМ(КорректировкаРеализации.Ссылка) КАК Ссылка
	|		ИЗ
	|			Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ГДЕ
	|			КорректировкаРеализации.ДокументОснование = Реализация.Ссылка
	|			И КорректировкаРеализации.Проведен
	|		СГРУППИРОВАТЬ ПО
	|			КорректировкаРеализации.ДокументОснование)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ТаблицаДокумента.СтавкаНДС
	|	КОНЕЦ                          КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|	ПО
	|		КорректировкаРеализации.ДокументОснование = ТаблицаДокумента.Ссылка
	|		И КорректировкаРеализации.Проведен
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И КорректировкаРеализации.Ссылка ЕСТЬ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ТаблицаДокумента.СтавкаНДС
	|	КОНЕЦ                          КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|	ПО
	|		КорректировкаРеализации.ДокументОснование = ТаблицаДокумента.Ссылка
	|		И КорректировкаРеализации.Проведен
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И КорректировкаРеализации.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|	ПО
	|		КорректировкаРеализации.ДокументОснование = ТаблицаДокумента.Ссылка
	|		И КорректировкаРеализации.Проведен
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	И КорректировкаРеализации.Ссылка ЕСТЬ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|	ПО
	|		КорректировкаРеализации.ДокументОснование = ТаблицаДокумента.Ссылка
	|		И КорректировкаРеализации.Проведен
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|	И КорректировкаРеализации.Ссылка ЕСТЬ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаДокумента
	|
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	0                              КАК СуммаСНДС,
	|	0                              КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО                   КАК Валюта,
	|	0
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК Ссылка,
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	0                              КАК СуммаСНДС,
	|	0                              КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО                   КАК Валюта,
	|	0
	|
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыДокумента.Кратность / (КурсВалюты.Кратность * КурсВалютыДокумента.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыДокумента.Курс <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммНДС.Ссылка                                                            КАК Ссылка,
	|	ТаблицаСуммНДС.СуммаДокумента * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1)     КАК СуммаДокумента,
	|	ВЫБОР КОГДА ТаблицаСуммНДС.СтавкаНДС В (&СтавкаНДС20) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|	КОГДА ТаблицаСуммНДС.СтавкаНДС В (&СтавкаНДС18) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|	КОГДА ТаблицаСуммНДС.СтавкаНДС В (&СтавкаНДС10) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|	ИНАЧЕ
	|		ТаблицаСуммНДС.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	СУММА(ТаблицаСуммНДС.СуммаСНДС) * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1)   КАК СуммаСНДС,
	|	СУММА(ТаблицаСуммНДС.СуммаНДС) * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1)    КАК СуммаНДС
	|
	|ИЗ
	|	ТаблицаСуммНДС КАК ТаблицаСуммНДС
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют
	|	ПО
	|		ТаблицаСуммНДС.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСуммНДС.Ссылка,
	|	ТаблицаСуммНДС.СуммаДокумента,
	|	КурсыВалют.КоэффициентПересчета,
	|	ВЫБОР КОГДА ТаблицаСуммНДС.СтавкаНДС В (&СтавкаНДС20) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|	КОГДА ТаблицаСуммНДС.СтавкаНДС В (&СтавкаНДС18) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|	КОГДА ТаблицаСуммНДС.СтавкаНДС В (&СтавкаНДС10) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|	ИНАЧЕ
	|		ТаблицаСуммНДС.СтавкаНДС
	|	КОНЕЦ
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаСуммНДС.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаСуммНДС.СуммаНДС) <> 0)
	|	ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаСуммНДС.Ссылка) В (
	|		ТИП(Справочник.ДоговорыКонтрагентов),
	|		ТИП(Справочник.ДоговорыМеждуОрганизациями)
	|	)
	|";
	
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивДокументов", ОбъектыРасчетов);
	Запрос.УстановитьПараметр("ОплатаОтКлиента", ОплатаОтКлиента);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	СтавкаНДС20 = Новый Массив;
	СтавкаНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкаНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	СтавкаНДС18 = Новый Массив;
	СтавкаНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкаНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	СтавкаНДС10 = Новый Массив;
	СтавкаНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкаНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	Запрос.УстановитьПараметр("СтавкаНДС20", СтавкаНДС20);
	Запрос.УстановитьПараметр("СтавкаНДС18", СтавкаНДС18);
	Запрос.УстановитьПараметр("СтавкаНДС10", СтавкаНДС10);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет ставки и суммы НДС в расшифровке платежа
//
// Параметры:
//    РасшифровкаПлатежа - ТабличнаяЧасть, ТаблицаЗначений - Табличная часть "Расшифровка платежа" или таблица значений
//                                                           с соответствующими колонками
//    ТаблицаНДС - ТаблицаЗначений - Таблица со значениями ставок и сумм НДС.
//
Процедура ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа, ТаблицаНДС) Экспорт
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		Платежи = РасшифровкаПлатежа.Скопировать();
	Иначе
		Платежи = РасшифровкаПлатежа.Выгрузить();
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	Платежи.Колонки.Добавить("ИндСтроки", Новый ОписаниеТипов(МассивТипов));
	Инд = 0;
	Для каждого СтрокаТаблицы Из Платежи Цикл
		СтрокаТаблицы.ИндСтроки = Инд;
		Инд = Инд + 1;
	КонецЦикла;
	
	Если Платежи.Колонки.Найти("СтавкаНДС") = Неопределено Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтавкиНДС"));
		Платежи.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов(МассивТипов));
	КонецЕсли;
	Если Платежи.Колонки.Найти("СуммаНДС") = Неопределено Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		Платежи.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов(МассивТипов));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Платежи.Заказ КАК Заказ
	|ПОМЕСТИТЬ Платежи
	|ИЗ
	|	&Платежи КАК Платежи
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаНДС.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаНДС
	|ИЗ
	|	&ТаблицаНДС КАК ТаблицаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ОператорПлатежи = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	Для каждого Колонка Из Платежи.Колонки Цикл
		ОператорПлатежи.ВыбираемыеПоля.Добавить("Платежи." + Колонка.Имя);
	КонецЦикла;
	
	ОператорТаблицаНДС = СхемаЗапроса.ПакетЗапросов[1].Операторы[0];
	Для каждого Колонка Из ТаблицаНДС.Колонки Цикл
		ОператорТаблицаНДС.ВыбираемыеПоля.Добавить("ТаблицаНДС." + Колонка.Имя);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Платежи", Платежи);
	Запрос.УстановитьПараметр("ТаблицаНДС", ТаблицаНДС);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаНДС.СтавкаНДС, Платежи.СтавкаНДС) КАК СтавкаНДС,
	|	ЕСТЬNULL(ТаблицаНДС.СуммаНДС, Платежи.СуммаНДС) КАК СуммаНДС,
	|	НЕ ТаблицаНДС.Ссылка ЕСТЬ NULL КАК ПересчитатьНДС,
	|	*
	|ИЗ
	|	Платежи КАК Платежи
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаНДС КАК ТаблицаНДС
	|	ПО
	|		Платежи.Заказ = ТаблицаНДС.Ссылка
	|			ИЛИ &УсловиеОснованияПлатежа
	|		И (Платежи.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ИЛИ Платежи.СтавкаНДС = НЕОПРЕДЕЛЕНО
	|			ИЛИ Платежи.СтавкаНДС ЕСТЬ NULL)
	|УПОРЯДОЧИТЬ ПО
	|	Платежи.ИндСтроки
	|";
	
	Если Платежи.Колонки.Найти("ОснованиеПлатежа") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОснованияПлатежа", "
		|((Платежи.ОснованиеПлатежа.ДокументОснование = ТаблицаНДС.Ссылка
		|ИЛИ Платежи.ОснованиеПлатежа = ТаблицаНДС.Ссылка)
		|И Платежи.Заказ НЕ В(&Ссылки))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОснованияПлатежа", "ЛОЖЬ");
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылки", ТаблицаНДС.ВыгрузитьКолонку("Ссылка"));
	
	Платежи = Запрос.Выполнить().Выгрузить();
	
	РассчитыватьСуммуВзаиморасчетов = (Платежи.Колонки.Найти("СуммаВзаиморасчетов") <> Неопределено);
	РассчитыватьНашДолг = (Платежи.Колонки.Найти("НашДолг") <> Неопределено);
	РассчитыватьДолгПартнера = (Платежи.Колонки.Найти("ДолгПартнера") <> Неопределено);
	
	СписаноВсего = 0;
	СписаноВсегоВзаиморасчетов = 0;
	
	Для каждого Платеж Из Платежи Цикл
		
		Если Не Платеж.ПересчитатьНДС Или Не ЗначениеЗаполнено(Платеж.СтавкаНДС) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Платеж.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			Или ТипЗнч(Платеж.Ссылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			
			Если Платеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				Платеж.СуммаНДС = Платеж.Сумма * 20 / 120;
			ИначеЕсли Платеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				Платеж.СуммаНДС = Платеж.Сумма * 18 / 118;
			ИначеЕсли Платеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
				Платеж.СуммаНДС = Платеж.Сумма * 10 / 110;
			КонецЕсли;
		Иначе
			
			Если Платежи.Индекс(Платеж) = 0 Тогда
				НовыйЗаказ = Истина;
			Иначе
				НовыйЗаказ = (Платеж.ИндСтроки <> Платежи[Платежи.Индекс(Платеж) - 1].ИндСтроки);
			КонецЕсли;
			
			Если НовыйЗаказ Тогда
				СписаноВсего = 0;
				СписаноВсегоВзаиморасчетов = 0;
				СписаноВсегоНашДолг = 0;
				СписаноВсегоДолгПартнера = 0;
			КонецЕсли;
			
			Платеж.СуммаНДС = Платеж.СуммаНДС * ?(Платеж.СуммаДокумента <> 0, Платеж.Сумма / Платеж.СуммаДокумента, 0);
			
			ПоследняяСтрокаЗаказа = (Платежи.Индекс(Платеж) = Платежи.Количество() - 1)
				Или (Платеж.ИндСтроки <> Платежи[Платежи.Индекс(Платеж) + 1].ИндСтроки);
			
			Платеж.Сумма = Окр(ВзаиморасчетыСервер.СписатьСумму(
				Платеж.Сумма - СписаноВсего,
				Платеж.Сумма * ?(Платеж.СуммаДокумента <> 0, Платеж.СуммаСНДС / Платеж.СуммаДокумента, 0),
				ПоследняяСтрокаЗаказа), 2);
			
			СписаноВсего = СписаноВсего + Платеж.Сумма;
			
			Если РассчитыватьСуммуВзаиморасчетов Тогда
				Платеж.СуммаВзаиморасчетов = Окр(ВзаиморасчетыСервер.СписатьСумму(
					Платеж.СуммаВзаиморасчетов - СписаноВсегоВзаиморасчетов,
					Платеж.СуммаВзаиморасчетов * ?(Платеж.СуммаДокумента <> 0, Платеж.СуммаСНДС / Платеж.СуммаДокумента, 0),
					ПоследняяСтрокаЗаказа), 2);
					
				СписаноВсегоВзаиморасчетов = СписаноВсегоВзаиморасчетов + Платеж.СуммаВзаиморасчетов;
			КонецЕсли;
			Если РассчитыватьНашДолг Тогда
				Платеж.НашДолг = Окр(ВзаиморасчетыСервер.СписатьСумму(
					Платеж.НашДолг - СписаноВсегоНашДолг,
					Платеж.НашДолг * ?(Платеж.СуммаДокумента <> 0, Платеж.СуммаСНДС / Платеж.СуммаДокумента, 0),
					ПоследняяСтрокаЗаказа), 2);
					
				СписаноВсегоНашДолг = СписаноВсегоНашДолг + Платеж.НашДолг;
			КонецЕсли;
			Если РассчитыватьДолгПартнера Тогда
				Платеж.ДолгПартнера = Окр(ВзаиморасчетыСервер.СписатьСумму(
					Платеж.ДолгПартнера - СписаноВсегоДолгПартнера,
					Платеж.ДолгПартнера * ?(Платеж.СуммаДокумента <> 0, Платеж.СуммаСНДС / Платеж.СуммаДокумента, 0),
					ПоследняяСтрокаЗаказа), 2);
					
				СписаноВсегоДолгПартнера = СписаноВсегоДолгПартнера + Платеж.ДолгПартнера;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Платежи.Колонки.Найти("Сумма") <> Неопределено
		И Платежи.Колонки.Найти("СуммаВзаиморасчетов") <> Неопределено
		И Платежи.Итог("Сумма") <> Платежи.Итог("СуммаВзаиморасчетов") Тогда
		
		СтруктураПересчетаСуммы = Новый Структура;
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Платежи, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		РасшифровкаПлатежа = Платежи.Скопировать();
	Иначе
		РасшифровкаПлатежа.Загрузить(Платежи);
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует текст назначения платежа для документа оплаты
//
// Параметры:
//    Объект - ДокументСсылка - Документ оплаты.
//
Процедура ЗаполнитьТекстНазначенияПлатежа(Объект) Экспорт
	
	ТекстНазначение = "";
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		ТекстНазначение = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента).ТекстНазначения;
	КонецЕсли;
	
	Если ТекстНазначение = "" Тогда
		//++ НЕ УТ
		Если Объект.ПлатежиПо275ФЗ И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			ТекстНазначение = НазначениеПлатежаФЗ275(Объект);
		Иначе
		//-- НЕ УТ
			ТекстНазначение = НазначениеПлатежа(Объект);
		//++ НЕ УТ
		КонецЕсли;
		//-- НЕ УТ
	Иначе
		ТекстСумма = "Сумма " + Формат(Объект.СуммаДокумента, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		ТекстСуммаНДС = ТекстСуммаНДСПлатежа(Объект.Валюта, Объект.РасшифровкаПлатежа, Истина);
		ТекстНазначение = ТекстНазначение + Символы.ПС + ТекстСумма + Символы.ПС + ТекстСуммаНДС;
	КонецЕсли;
	
	Объект.НазначениеПлатежа = ТекстНазначение;
	
КонецПроцедуры

// Получает ставку НДС для объекта расчетов, если она единственная
//
// Параметры:
//    ОбъектыРасчетов - Массив, ДокументСсылка - Объекты расчетов
//    ЭтоРасчетыСКлиентами - Булево - Признак расчетов с клиентами.
//
Функция СтавкаНДСОбъектаРасчетов(ОбъектыРасчетов, ЭтоРасчетыСКлиентами = Истина) Экспорт
	
	ТаблицаНДС = ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Неопределено, Неопределено, ОбъектыРасчетов, ЭтоРасчетыСКлиентами);
	Если ТаблицаНДС.Количество() = 1 Тогда
		Возврат ТаблицаНДС[0].СтавкаНДС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает статью ДДС для объекта расчетов
//
// Параметры:
//    ОбъектРасчетов - ДокументСсылка - Объект расчетов
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - операция для подбора статьи ДДС по умолчанию.
//
Функция СтатьяДвиженияДенежныхСредствОбъектаРасчетов(ОбъектРасчетов, ХозяйственнаяОперация) Экспорт
	
	СтатьяДвиженияДенежныхСредств = Неопределено;
	
	ВыбираемыеПоля = Новый Массив;
	ТипОбъекта = ОбщегоНазначения.ИмяТаблицыПоСсылке(ОбъектРасчетов);
	
	ДоступныеРеквизиты = ОбъектРасчетов.Метаданные().Реквизиты;
	Если ДоступныеРеквизиты.Найти("Соглашение") <> Неопределено Тогда
		ВыбираемыеПоля.Добавить("Соглашение.СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		Если ДоступныеРеквизиты.Найти("Договор") <> Неопределено Тогда
			ВыбираемыеПоля.Добавить("Договор.СтатьяДвиженияДенежныхСредствПолучателя");
		КонецЕсли;
		Если ДоступныеРеквизиты.Найти("СтатьяДвиженияДенежныхСредствПолучателя") <> Неопределено Тогда
			ВыбираемыеПоля.Добавить("СтатьяДвиженияДенежныхСредствПолучателя");
		КонецЕсли;
	Иначе
		Если ДоступныеРеквизиты.Найти("Договор") <> Неопределено Тогда
			ВыбираемыеПоля.Добавить("Договор.СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		Если ДоступныеРеквизиты.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
			ВыбираемыеПоля.Добавить("СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбираемыеПоля.Количество() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, ВыбираемыеПоля);
		УстановитьПривилегированныйРежим(Ложь);
		Если ЗначенияРеквизитов.Свойство("СоглашениеСтатьяДвиженияДенежныхСредств")
			И ЗначениеЗаполнено(ЗначенияРеквизитов.СоглашениеСтатьяДвиженияДенежныхСредств) Тогда
			СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СоглашениеСтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		Если ЗначенияРеквизитов.Свойство("ДоговорСтатьяДвиженияДенежныхСредств")
			И ЗначениеЗаполнено(ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредств) Тогда
			СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		Если ЗначенияРеквизитов.Свойство("ДоговорСтатьяДвиженияДенежныхСредствПолучателя")
			И ЗначениеЗаполнено(ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредствПолучателя) Тогда
			СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредствПолучателя;
		КонецЕсли;
		Если ЗначенияРеквизитов.Свойство("СтатьяДвиженияДенежныхСредств")
			И ЗначениеЗаполнено(ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредств) Тогда
			СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		Если ЗначенияРеквизитов.Свойство("СтатьяДвиженияДенежныхСредствПолучателя")
			И ЗначениеЗаполнено(ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредствПолучателя) Тогда
			СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредствПолучателя;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) И ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Возврат СтатьяДвиженияДенежныхСредств;
	
КонецФункции

// Возвращает строку с перечислением документов из расшифровки платежа.
//
// Параметры: Объект - ДокументСсылка - Документ, содержащий расшифровку платежа.
//
// Возвращаемое значение: Строка.
//
Функция НазначениеПлатежа(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить(, "Заказ, Сумма, СтавкаНДС, СуммаНДС");
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", Новый ОписаниеТипов(Документы.ТипВсеСсылки(), "СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДокументов.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	Для Сч = 1 По РасшифровкаПлатежа.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла;
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"), "Документ");
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("Сумма"), "Сумма");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Документ    КАК Документ,
	|	ИсходнаяТаблица.Сумма       КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерПоДаннымПоставщика       КАК Номер,
	|	ДанныеДокумента.ДатаПоДаннымПоставщика        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерДекларации               КАК Номер,
	|	НЕОПРЕДЕЛЕНО                                  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер
	|	
	//++ НЕ УТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетОператораСистемыПлатон КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерПоДаннымПартнера         КАК Номер,
	|	ДанныеДокумента.ДатаПоДаннымПартнера          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	//-- НЕ УТ
	|	
	|");
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаКРаспределению = Объект.РасшифровкаПлатежа.Итог("Сумма");
	ТекстНазначенияПлатежа = "";
	ПредставленияДокументов = ПолучитьПредставленияДокументов();
	
	РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Валюта, "Код, Наименование");
	Если РеквизитыВалюты.Код = "643" Тогда
		ВалютаДляПечати = НСтр("ru = 'руб.'");
	Иначе
		ВалютаДляПечати = СокрЛП(РеквизитыВалюты.Наименование);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", "
			+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Документ, "НаименованиеДляПечати")
			+ " " + Формат(Выборка.Сумма, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")
			+ " " + ВалютаДляПечати;
		Иначе
			ВидДокумента = "";
			ПредставленияДокументов.Свойство(Выборка.Документ.Метаданные().Имя, ВидДокумента);
			Если ЗначениеЗаполнено(ВидДокумента) Тогда
				ПредставлениеДляПечати = НСтр("ru = '%Вид% №%Номер% от %Дата% %Сумма% %Валюта%'");
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Вид%", ВидДокумента);
				Если Выборка.НомерВходящегоДокумента Тогда
					ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Номер%", СокрЛП(Выборка.Номер));
				Иначе
					ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Номер%",
						ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Ложь, Истина));
				КонецЕсли;
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Дата%", Формат(Выборка.Дата, "ДЛФ=D"));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Сумма%",
					Формат(Выборка.Сумма, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Валюта%", ВалютаДляПечати);
				ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", " + ПредставлениеДляПечати;
			КонецЕсли;
		КонецЕсли;
		СуммаКРаспределению = СуммаКРаспределению - Выборка.Сумма;
	КонецЦикла;
	
	Если СуммаКРаспределению > 0 Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", "
			+ НСтр("ru = 'без указания назначения'")
			+ " " + Формат(СуммаКРаспределению, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")
			+ " " + ВалютаДляПечати;
	КонецЕсли;
	Если СуммаКРаспределению <= 0 Тогда
		ТекстНазначенияПлатежа = НСтр("ru = 'Оплата по'") + Сред(ТекстНазначенияПлатежа, 2);
	Иначе
		ТекстНазначенияПлатежа = НСтр("ru = 'Оплата'") + Сред(ТекстНазначенияПлатежа, 2);
	КонецЕсли;
	
	Если Прав(ТекстНазначенияПлатежа, 1) <> "." Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ".";
	КонецЕсли;
	ДлинаТекстаДокументов = СтрДлина(ТекстНазначенияПлатежа);
	
	ТекстСуммаНДС = ТекстСуммаНДСПлатежа(
		Объект.Валюта,
		РасшифровкаПлатежа,
		Истина);
	ДлинаТекстаНДС = СтрДлина(ТекстСуммаНДС);
	
	Если ДлинаТекстаДокументов + ДлинаТекстаНДС > 210 Тогда
		ДлинаТекстаДокументов = 207 - ДлинаТекстаНДС;
		ТекстНазначенияПлатежа = Лев(ТекстНазначенияПлатежа, ДлинаТекстаДокументов);
		ТекстПоискаПоследнегоДокумента = ТекстНазначенияПлатежа;
		ПозицияПоследнейЗапятой = 0;
		ПозицияЗапятой = СтрНайти(ТекстПоискаПоследнегоДокумента, ",");
		Пока НЕ ПозицияЗапятой = 0 Цикл
			ПозицияПоследнейЗапятой = ПозицияПоследнейЗапятой + ПозицияЗапятой;
			ТекстПоискаПоследнегоДокумента = Сред(ТекстПоискаПоследнегоДокумента, ПозицияЗапятой + 1);
			ПозицияЗапятой = СтрНайти(ТекстПоискаПоследнегоДокумента, ",");
		КонецЦикла;
		ТекстНазначенияПлатежа = Лев(ТекстНазначенияПлатежа, ПозицияПоследнейЗапятой - 1) + "...";
	КонецЕсли;
	ТекстНазначенияПлатежа = СокрЛП(ТекстНазначенияПлатежа) + Символы.ПС + СокрЛП(ТекстСуммаНДС);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТекстНазначенияПлатежа;
	
КонецФункции

// Выводит сообщения об ошибках при вводе списания безналичных ДС на основании 
// нескольких документов.
//
// Параметры
//  Выборка  - Выборка из результата запроса.
//
// Возвращаемое значение:
//   Булево   - Истина, если отказ от ввода на основании.
//
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка)

	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных документов отличается %ПредставлениеПоля%'");
	
	Если Выборка.ЕстьОтличияКонтрагент Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='поле ""Контрагент""'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если Выборка.ЕстьОтличияОрганизация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='поле ""Организация""'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если Выборка.ЕстьОтличияТип Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='тип документов'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
    Возврат Отказ;
	
КонецФункции // СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС()

Процедура ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	ВидПеречисленияВБюджет = Объект.ВидПеречисленияВБюджет;
	ПоказательОснования = Объект.ПоказательОснования;
	ПоказательПериода = Объект.ПоказательПериода;
	ПоказательТипа = Объект.ПоказательТипа;
	ПоказательНомера = Объект.ПоказательНомера;
	ПоказательДаты = Объект.ПоказательДаты;
	
	ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеПоказателяПериода(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	
	Если ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(
		ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н, Объект.Дата).НайтиПоЗначению(ПоказательОснования) = Неопределено
		И ПоказательТипа <> "0" Тогда
		ТекстОшибки = НСтр("ru = 'Неверное значение поля ""Основание""'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыПроверкиЗаполнения.ПрименениеПриказа126н Тогда
		Если ПлатежиВБюджетКлиентСервер.ТипыПлатежа(ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н).НайтиПоЗначению(ПоказательТипа) = Неопределено
			И ПоказательТипа <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'Неверно указано значение в поле ""Тип платежа""'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти("АП,АР", ПоказательОснования) > 0 Тогда
		Если ЗначениеЗаполнено(ПоказательПериода)
			И ПоказательПериода <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Период""'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрНайти("ТП,ЗД", ПоказательОснования) > 0	Тогда
		Если ЗначениеЗаполнено(ПоказательНомера) 
			И ПоказательНомера <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер""'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ПоказательДатыСтрокой = ПоказательДаты;
		Если Лев(ПоказательДатыСтрокой, 1) = "0"
			И Сред(ПоказательДатыСтрокой, 2, 2) = " ." Тогда
			ПоказательДатыСтрокой = "0";
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(ПоказательДатыСтрокой, ".", "")) Тогда
			ПоказательДатыСтрокой = "";
		КонецЕсли;
		
		Если ПоказательОснования = "ЗД" Тогда
			Если ЗначениеЗаполнено(ПоказательДатыСтрокой)
				И ПоказательДатыСтрокой <> "0" Тогда
				ТекстОшибки = НСтр("ru = 'При основании платежа ""ЗД"" следует указать ""0"" в поле ""Дата""'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	ВидПеречисленияВБюджет = Объект.ВидПеречисленияВБюджет;
	ПоказательОснования = Объект.ПоказательОснования;
	ПоказательПериода = Объект.ПоказательПериода;
	ПоказательТипа = Объект.ПоказательТипа;
	
	ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	
	Если ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(
		ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н, Объект.Дата).НайтиПоЗначению(ПоказательОснования) = Неопределено
		И ПоказательТипа <> "0" Тогда
		ТекстОшибки = НСтр("ru = 'Неверное значение поля ""Основание""'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоказательПериода) Тогда
		ТекстОшибки = НСтр("ru = 'Необходимо заполнить значение поля ""Код таможенного органа""'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыПроверкиЗаполнения.ПрименениеПриказа126н Тогда
		Если ПлатежиВБюджетКлиентСервер.ТипыПлатежа(ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н).НайтиПоЗначению(ПоказательТипа) = Неопределено
			И ПоказательТипа <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'Неверно указано значение в поле ""Тип платежа""'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ПоказательПериода", "Период");
	СтруктураПолей.Вставить("ПоказательНомера", НСтр("ru='Номер документа'"));
	СтруктураПолей.Вставить("ПоказательДаты", НСтр("ru='Дата документа'"));
	
	ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	
	Если Объект.СтатусСоставителя = "08" Тогда
		Для каждого ЭлементСтруктуры Из СтруктураПолей Цикл
			Если Объект[ЭлементСтруктуры.Ключ] <> "0" Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""%1""'"),
					ЭлементСтруктуры.Значение);
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПоказателяПериода(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	ПоказательПериода = Объект.ПоказательПериода;
	ПоказательОснования = Объект.ПоказательОснования;
	
	ОшибкаЗаполненияПериода = Ложь;
	
	Если ЗначениеЗаполнено(ПоказательПериода) Тогда
		Если СтрНайти("ТП,ЗД", ПоказательОснования) > 0 И ПоказательПериода <> "0" Тогда
			ПериодичностьНалога = Сред((ПоказательПериода), 1, 2);
			
			НомерПериода = Сред((ПоказательПериода), 4, 2);
			НомерПериода = ?(ПустаяСтрока(НомерПериода), 0, Число(НомерПериода));
			
			ГодПериода = Сред((ПоказательПериода), 7, 4);
			ГодПериода = ?(ПустаяСтрока(ГодПериода), 0, Число(ГодПериода));
			
			Если СтрНайти("МС,КВ,ПЛ,ГД", ПериодичностьНалога) > 0 Тогда
				Если СтрДлина(ПоказательПериода) - СтрДлина(СтрЗаменить(ПоказательПериода, ".", "")) <> 2
				 ИЛИ ГодПериода < 2000 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПериодичностьНалога = "МС" Тогда
				Если НомерПериода < 1
				 ИЛИ НомерПериода > 12 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
				
			ИначеЕсли ПериодичностьНалога = "КВ" Тогда
				Если НомерПериода < 1
				 ИЛИ НомерПериода > 4 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
				
			ИначеЕсли ПериодичностьНалога = "ПЛ" > 0 Тогда
				Если НомерПериода < 1
				 ИЛИ НомерПериода > 2 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
				
			ИначеЕсли ПериодичностьНалога = "ГД" Тогда
				Если НомерПериода <> 0 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
				
			Иначе
				ПроверитьДатуПериода(Объект, ОшибкаЗаполненияПериода);
			КонецЕсли;
			
		ИначеЕсли СтрНайти("ТР,РС,ОТ,РТ,ВУ,ПБ,ПР", ПоказательОснования) > 0
			И ПоказательПериода <> "0" Тогда
			
			ПериодичностьНалога = Сред((ПоказательПериода), 1, 2);
			
			Если СтрНайти("МС,КВ,ПЛ,ГД", ПериодичностьНалога) > 0 Тогда
				ОшибкаЗаполненияПериода = Истина;
			Иначе
				ПроверитьДатуПериода(Объект, ОшибкаЗаполненияПериода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОшибкаЗаполненияПериода Тогда
		ТекстОшибки = НСтр("ru = 'Неверно указано значение в поле ""Период""'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	КБК = Объект.КодБК;
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж И СокрЛП(КБК) = "0" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	// Проверим валидность введенного кода
	Если СтрДлина(СокрП(КБК)) <> 20 Тогда
		
		ТекстОшибки =  НСтр("ru = 'КБК должен состоять из 20 знаков'");
		
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КБК) Тогда
		
		ТекстОшибки = НСтр("ru = 'КБК должен содержать только цифры'");
		
	ИначеЕсли ПустаяСтрока(СокрЛП(СтрЗаменить(КБК, "0", ""))) Тогда
		
		ТекстОшибки = НСтр("ru = 'Все знаки КБК не могут одновременно принимать значение ""0""'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	КодОКАТО = Объект.КодОКАТО;
	
	ТекстОшибки = "";
	
	// Проверим валидность введенного кода
	Если СтрДлина(СокрЛП(КодОКАТО)) > 1 И ПустаяСтрока(СокрЛП(СтрЗаменить(КодОКАТО, "0", ""))) Тогда
		ТекстОшибки = НСтр("ru = 'Все знаки ОКТМО не могут одновременно принимать значение ""0""'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	УИН = Объект.ИдентификаторПлатежа;
	
	ТекстОшибки = "";
	
	// Проверим валидность введенного кода
	Если СтрДлина(СокрП(УИН)) <> 20 И СтрДлина(СокрП(УИН)) <> 25 И СтрДлина(СокрП(УИН)) <> 1 И СтрДлина(СокрП(УИН)) <> 0 Тогда
		
		ТекстОшибки =  НСтр("ru = 'УИН должен состоять из 20 или 25 знаков.
			|В случае отсутствия Уникального идентификатора начисления указывается значение ""0"".'");
		
	ИначеЕсли ПустаяСтрока(СокрЛП(СтрЗаменить(УИН, "0", ""))) И СтрДлина(СокрП(УИН)) <> 0 И СокрП(УИН) <> "0" Тогда
		
		ТекстОшибки = НСтр("ru = 'Все знаки УИН не могут одновременно принимать значение ""0""'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				"ИдентификаторПлатежа",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатуПериода(Объект, ОшибкаЗаполненияПериода)
	
	ПоказательПериода = Объект.ПоказательПериода;
	
	ПозицияПериода = СтрНайти(СокрЛП(ПоказательПериода),".");
	ПозицияГода = СтрНайти(Сред(СокрЛП(ПоказательПериода), ПозицияПериода + 1), ".") + ПозицияПериода;

	ДатаПериода = Лев(СокрЛП(ПоказательПериода), ПозицияПериода - 1);
	НомерПериода = Сред(СокрЛП(ПоказательПериода), ПозицияПериода + 1, ПозицияГода - ПозицияПериода - 1);
	ГодПериода = Сред(СокрЛП(ПоказательПериода), ПозицияГода + 1);
	
	Попытка
		ДатаПоказателя = Дата(Число(ГодПериода), Число(НомерПериода), Число(ДатаПериода));
	Исключение
		ОшибкаЗаполненияПериода = Истина;
	КонецПопытки
	
КонецПроцедуры

Функция РеквизитыПлательщика(Объект) Экспорт
	
	Результат = Новый Структура("ИННПлательщика, КПППлательщика, ТекстПлательщика");
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		СписокРеквизитов = Новый Структура;
		СписокРеквизитов.Вставить("ИННПлательщика", "ИНН");
		СписокРеквизитов.Вставить("КПППлательщика", "КПП");
		
		ТекстКорреспондента = "";
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			ТекстКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ТекстКорреспондента");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстКорреспондента) Тогда
			Результат.ТекстПлательщика = ТекстКорреспондента;
		Иначе
			СписокРеквизитов.Вставить("ТекстПлательщика", "НаименованиеСокращенное");
		КонецЕсли;
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, РеквизитыОрганизации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НадписьРеквизитыПлательщика(ИНН, КПП, ТекстКорреспондента, ЮрФизЛицо, ХозяйственнаяОперация) Экспорт
	
	ШаблонНадписи = НСтр("ru = 'ИНН %1%2, %3'");
	
	СтрокаИНН = ?(ПустаяСтрока(ИНН), НСтр("ru = '<не указан>'"), СокрЛП(ИНН));
	
	ТребуетсяУказаниеКПП = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	КППОтсутствует = (ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
	
	СтрокаКПП = ", " + НСтр("ru = 'КПП'");
	Если Не ЗначениеЗаполнено(КПП) Тогда
		Если ТребуетсяУказаниеКПП И КППОтсутствует Тогда
			СтрокаКПП = СтрокаКПП + " 0";
		ИначеЕсли Не ТребуетсяУказаниеКПП И КППОтсутствует Тогда
			СтрокаКПП = "";
		ИначеЕсли ТребуетсяУказаниеКПП И Не КППОтсутствует Тогда
			СтрокаКПП = СтрокаКПП + " " + НСтр("ru = '<не указан>'");
		ИначеЕсли Не ТребуетсяУказаниеКПП И Не КППОтсутствует Тогда
			СтрокаКПП = СтрокаКПП + " 0";
		КонецЕсли;
	Иначе
		СтрокаКПП = СтрокаКПП + " " + КПП;
	КонецЕсли;
	
	СтрокаТекстКорреспондента = СокрЛП(ТекстКорреспондента);
	
	Возврат СтрШаблон(ШаблонНадписи,
		СтрокаИНН,
		СтрокаКПП,
		СтрокаТекстКорреспондента);
		
КонецФункции
//++ НЕ УТ

// Формирование текста назначения платежа для операций с использованием отдельных счетов
// Назначение платежа состоит из 4 частей:
//		1. Аванс / Оплата (необязательный) - Контроль необходимости указания подтверждающих исполнение документов
//		2. Предмет платежа - Контроль платежа по параметрам контракта (перечень товаров и услуг по тарифным ценам)
//		3. Блок автоматической обработки (необязательный) - Контроль состава приложенных обосновывающих документов
//		4. НДС (необязательный) - Указание в сумме платежа ставки и суммы платежа.
//
Функция НазначениеПлатежаФЗ275(Объект, Действие = "")
	
	НазначениеПлатежа = "";
	НазначениеПлатежаМассивСтрок = Новый Массив;
	
	Если Объект.Свойство("ТипПлатежаФЗ275") Тогда
		ТипПлатежа = Объект.ТипПлатежаФЗ275;
	Иначе
		ТипПлатежа = Неопределено;
	КонецЕсли;
	
	ТипыПлатежей = Справочники.ТипыПлатежейФЗ275;
	
	ТипыПлатежейАвансаОплаты = Новый Массив;
	ТипыПлатежейАвансаОплаты.Добавить(2);
	ТипыПлатежейАвансаОплаты.Добавить(3);
	ТипыПлатежейАвансаОплаты.Добавить(9);
	ТипыПлатежейАвансаОплаты.Добавить(99);
	
	ТипыПлатежейНДС = Новый Массив;
	ТипыПлатежейНДС.Добавить(2);
	ТипыПлатежейНДС.Добавить(3);
	ТипыПлатежейНДС.Добавить(99);
	
	Если ЗначениеЗаполнено(ТипПлатежа) Тогда
		РеквизитыТипаПлатежа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТипПлатежа, "Код, НомерПунктаЗакона");
	КонецЕсли;
	
	РеквизитыЭтапа = Новый Структура("
		|ПредметОплаты, 
		|ПунктКонтрактаПредмета, 
		|ПунктКонтрактаОплаты, 
		|ВариантОплаты"); 
		
	РеквизитыЭтапа.Вставить("ПредметОплаты",			Объект.ПредметОплаты);
	РеквизитыЭтапа.Вставить("ПунктКонтрактаПредмета",	Объект.ПунктКонтрактаПредмета);
	РеквизитыЭтапа.Вставить("ПунктКонтрактаОплаты",		Объект.ПунктКонтрактаОплаты);
	РеквизитыЭтапа.Вставить("ВариантОплаты",			Объект.ВариантОплаты);
	
	#Область АвансОплата
	Если ТипыПлатежейАвансаОплаты.Найти(РеквизитыТипаПлатежа.Код) <> Неопределено Тогда
		Если РеквизитыЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения
			Или РеквизитыЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Тогда
			НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= 'Авансовый платеж'"));
		Иначе
			НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= 'Оплата'"));
		КонецЕсли;
		
		НазначениеПлатежаМассивСтрок.Добавить("(" + РеквизитыЭтапа.ПунктКонтрактаОплаты + ")");
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= 'за'"));
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПредметПлатежа
	Если ТипПлатежа = ТипыПлатежей.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов Тогда // Тип платежа 1
		КБК = СокрЛП(Объект.КодБК);
		
		ПредметПлатежаНалог = НазначениеПлатежаДляУплатыНалогов(
			КБК,
			ДенежныеСредстваПовтИсп.ВидНалоговогоОбязательстваПоКБК(КБК),
			Объект.Организация,
			Объект.Дата,
			ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(Объект.ПоказательПериода));
		
		НазначениеПлатежаМассивСтрок.Добавить(ПредметПлатежаНалог);
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= 'ИГК'"));
		НазначениеПлатежаМассивСтрок.Добавить("<ИГК>");
	ИначеЕсли ТипПлатежа = ТипыПлатежей.ОплатаТоваровРаботУслугПоРегулируемымЦенам // Тип платежа 2
		Или ТипПлатежа = ТипыПлатежей.ОплатаИныхРасходовВПределахУстановленнойСуммыВМесяц // Тип платежа 3
		Или ТипПлатежа = ТипыПлатежей.РасчетыСИностраннымиИсполнителями // Тип платежа 9
		Или ТипПлатежа = ТипыПлатежей.СписаниеНаОтдельныйСчет Тогда // Тип платежа 99
		
		НазначениеПлатежаМассивСтрок.Добавить(РеквизитыЭтапа.ПредметОплаты); // Предмет оплаты
		НазначениеПлатежаМассивСтрок.Добавить("(" + РеквизитыЭтапа.ПунктКонтрактаПредмета + ")");
	ИначеЕсли ТипПлатежа = ТипыПлатежей.ОплатаТруда Тогда // Тип платежа 5
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= 'Заработная плата'"));
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= 'за'"));
	ИначеЕсли ТипПлатежа = ТипыПлатежей.СписаниеСвязанноеСРазмещениемНаДепозитеУполномоченногоБанка Тогда // Тип платежа 7
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= 'Перечисление денежных средств на депозит'"));
	ИначеЕсли ТипПлатежа = ТипыПлатежей.СписаниеСуммКредитовПеречисленныхУполномоченнымБанком Тогда // Тип платежа 8
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= 'Возврат суммы основного долга по кредиту'"));
	ИначеЕсли ТипПлатежа = ТипыПлатежей.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств Тогда // Тип платежа 10
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= 'Возмещение расходов на опережающее приобретение материалов'"));
	ИначеЕсли ТипПлатежа = ТипыПлатежей.ПеречислениеПрибылиГоловномуИсполнителю Тогда // Тип платежа 11
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= 'Перечисление прибыли по выполненным контрактным обязательствам'"));
	КонецЕсли;
	#КонецОбласти
	
	#Область БлокАвтоматическойОбработки
	МассивПодтверждающихДокументов = Новый Массив;
	Если ТипЗнч(Объект.ПодтверждающиеДокументы) = Тип("ТаблицаЗначений") Тогда
		МассивСсылокВидов = Объект.ПодтверждающиеДокументы.ВыгрузитьКолонку("ВидДокумента");
	Иначе
		МассивСсылокВидов = Объект.ПодтверждающиеДокументы.Выгрузить(,"ВидДокумента").ВыгрузитьКолонку("ВидДокумента");
	КонецЕсли;
	СоответствиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылокВидов, "КраткоеНаименование, Наименование");
	
	Для Каждого СтрокаПодтверждающихДокументов Из Объект.ПодтверждающиеДокументы Цикл
		ПредставлениеВидаДокумента = ПредставлениеВидаДокумента(СтрокаПодтверждающихДокументов.ВидДокумента, СоответствиеРеквизитов);
		
		Представление = ПредставлениеПодтверждающегоДокумента(ПредставлениеВидаДокумента, СтрокаПодтверждающихДокументов.Номер, СтрокаПодтверждающихДокументов.Дата);
		
		МассивПодтверждающихДокументов.Добавить(Представление);
	КонецЦикла;
	Если МассивПодтверждающихДокументов.Количество() Тогда
		ПредставлениеВсехДокументов = СтрСоединить(МассивПодтверждающихДокументов, "; ");
		
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru= '275-ФЗ'"));
		НазначениеПлатежаМассивСтрок.Добавить("{" + РеквизитыТипаПлатежа.Код);
		НазначениеПлатежаМассивСтрок.Добавить(ПредставлениеВсехДокументов + "}");
	КонецЕсли;
	#КонецОбласти
	
	#Область НДС
	Если ТипыПлатежейНДС.Найти(РеквизитыТипаПлатежа.Код) <> Неопределено Тогда
		Если ТипЗнч(Объект) <> Тип("Структура") Тогда
			ТекстСуммаНДС = ТекстСуммаНДСПлатежа(Объект.Валюта, Объект.РасшифровкаПлатежа, Истина);
			НазначениеПлатежаМассивСтрок.Добавить(ТекстСуммаНДС);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	Возврат СтрСоединить(НазначениеПлатежаМассивСтрок, " ");
	
КонецФункции

Функция ПредставлениеВидаДокумента(ВидДокумента, СоответствиеРеквизитов = Неопределено)
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат "";
	КонецЕсли;
	
	Если СоответствиеРеквизитов = Неопределено Тогда
		РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента, "КраткоеНаименование, Наименование");
	Иначе
		РеквизитыВидаДокумента = СоответствиеРеквизитов[ВидДокумента];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыВидаДокумента.КраткоеНаименование) Тогда
		ПредставлениеВидДокумента = РеквизитыВидаДокумента.КраткоеНаименование;
	Иначе
		ПредставлениеВидДокумента = РеквизитыВидаДокумента.Наименование;
	КонецЕсли;
	
	Возврат ПредставлениеВидДокумента;
КонецФункции

Функция ПредставлениеПодтверждающегоДокумента(Знач ПредставлениеВидаДокумента, Знач НомерДокумента, Знач ДатаДокумента)
	МассивСтрокПодтверждающийДокумент = Новый Массив;
	
	МассивСтрокПодтверждающийДокумент.Добавить(ПредставлениеВидаДокумента);
	МассивСтрокПодтверждающийДокумент.Добавить("№" + НомерДокумента);
	МассивСтрокПодтверждающийДокумент.Добавить(НСтр("ru= 'от'"));
	МассивСтрокПодтверждающийДокумент.Добавить(Формат(ДатаДокумента, "ДФ=ddMMyyyy"));
	
	Представление = СтрСоединить(МассивСтрокПодтверждающийДокумент, " ");
	
	Возврат Представление;
КонецФункции

// Функция возвращает данные заполнения шапки платежного документа по договору займа сотруднику.
//
// Параметры:
//	Договор - ДокументСсылка.ДоговорЗаймаСотруднику - Договор займа, по которому формируется платежный документ.
//	ЭтоПоступление - Булево - Признак, определяющий направление движение денежных средств.
//
// Возвращаемое значение
//	Структура - Данные заполнения шапки платежного документа.
Функция ДанныеШапкиДокументаДДСПоДоговоруЗаймаСотруднику(Договор, ЭтоПоступление = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Договор КАК ДоговорЗаймаСотруднику,
	|	&Договор КАК ДокументОснование,
	|	ДоговорЗаймаСотруднику.Организация КАК Организация,
	|	ДоговорЗаймаСотруднику.ФизическоеЛицо КАК ПодотчетноеЛицо,
	|	ДоговорЗаймаСотруднику.ФизическоеЛицо.Наименование КАК Выдать,
	|	ДоговорЗаймаСотруднику.ФизическоеЛицо.Наименование КАК ПринятоОт,
	|	ВЫБОР
	|		КОГДА &ЭтоПоступление
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗаймаСотрудником)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	НЕ ДоговорЗаймаСотруднику.Проведен КАК ЕстьОшибкиПроведен,
	|	&Валюта КАК Валюта,
	|	Неопределено КАК Касса,
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику
	|ГДЕ
	|	ДоговорЗаймаСотруднику.Ссылка = &Договор";
	
	Запрос.УстановитьПараметр("Договор",        Договор);
	Запрос.УстановитьПараметр("ЭтоПоступление", ЭтоПоступление);
	Запрос.УстановитьПараметр("Валюта",         Константы.ВалютаРегламентированногоУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ЕстьОшибкиПроведен Тогда
		Текст = НСтр("ru = 'Договор займа сотруднику не проведен. Ввод на основании непроведенного документа запрещен'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ДанныеШапки = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеШапки.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ДанныеШапки, Выборка);
	
	ДанныеШапки.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(ДанныеШапки.Организация, ДанныеШапки.Валюта);
	ДанныеШапки.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеШапки.Организация, ДанныеШапки.Валюта);
	ДанныеШапки.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			Выборка.ПодотчетноеЛицо,
			Выборка.Валюта);
	
	Возврат ДанныеШапки;
	
КонецФункции
//-- НЕ УТ

Функция РазложитьСтрокуНазначенияВМассивСлов(Знач Строка)
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		ОчСимвол = Сред(Строка, Позиция, 1);
		Если ОчСимвол = " " Тогда
			Если Позиция <> НачалоСлова И Позиция - НачалоСлова > 2 Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова И Позиция - НачалоСлова > 2 Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

// Возвращает перечень документов с их синонимами для назначения платежа
//
// Возвращаемое значение: Структура, в ключах которой - имена документов, в значениях - синонимы.
//
Функция ПолучитьПредставленияДокументов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента",                         НСтр("ru='заказу'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику",                      НСтр("ru='заказу'"));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента",      НСтр("ru='заявке на возврат товаров'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",                    НСтр("ru='отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",                       НСтр("ru='отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",              НСтр("ru='отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",    НСтр("ru='отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",    НСтр("ru='накладной'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",             НСтр("ru='накладной'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов",       НСтр("ru='акту'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг",               НСтр("ru='накладной'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт",           НСтр("ru='декларации на товары'"));
	//++ НЕ УТ
	ВидыДокументовКонтрагента.Вставить("ОтчетОператораСистемыПлатон",          НСтр("ru='акту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПереработчика",                   НСтр("ru='отчету переработчика'"));
	//-- НЕ УТ
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции // ПолучитьПредставленияДокументов()

Процедура ЗаписатьДатуВыгрузкиПлатежей(Платежи, Блокировать = Истина, Перезаписывать = Истина) Экспорт
	
	Для каждого Платеж Из Платежи Цикл
		
		Если Не (ТипЗнч(Платеж) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			Или ТипЗнч(Платеж) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаВыгрузкиДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Платеж, "ДатаВыгрузки");
		
		Если Не Перезаписывать И ЗначениеЗаполнено(ДатаВыгрузкиДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
		
		Если ДатаВыгрузкиДокумента = ТекущаяДатаСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Платеж.ПолучитьОбъект();
		
		Если Блокировать Тогда
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать дату выгрузки в банк документа: %1'"), ДокументОбъект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		ДокументОбъект.ДатаВыгрузки = ТекущаяДатаСеанса;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Выполняет переоценку денежных средств у подотчетного лица
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация в которой необходимо переоценить денежные средства
//  Дата - Дата - на которую необходимо выполнить переоценку
//  ПодотчетноеЛицу - СправочникСсылка.ФизическиеЛица - подотчетное лицо.
//
Процедура ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Организация, Дата, ПодотчетноеЛицо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Документы.РасчетКурсовыхРазниц.ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Организация, Дата, ПодотчетноеЛицо);
	
КонецПроцедуры

Процедура ПриСозданииФормыСпискаПрисоединенныхФайлов(Форма) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Форма.Список.ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("Файлы.ДляПередачиВБанк");
	Форма.Список.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	НовыйЭлемент = Форма.Элементы.Добавить("СписокДляПередачиВБанк", Тип("ПолеФормы"), Форма.Элементы.Список);
	НовыйЭлемент.ПутьКДанным = "Список.ДляПередачиВБанк";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	Форма.Элементы.Переместить(НовыйЭлемент, Форма.Элементы.Список, Форма.Элементы.СписокНомерКартинкиПодписанЗашифрован);
	
КонецПроцедуры

Процедура ПриСозданииФормыЭлементаПрисоединенныхФайлов(Форма) Экспорт
	
	НовыйЭлемент = Форма.Элементы.Добавить("ДляПередачиВБанк", Тип("ПолеФормы"), Форма.Элементы.ГруппаОбщиеДанные);
	НовыйЭлемент.ПутьКДанным = "Объект.ДляПередачиВБанк";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Форма.Элементы.Переместить(НовыйЭлемент, Форма.Элементы.ГруппаОбщиеДанные, Форма.Элементы.Наименование0);
	
КонецПроцедуры

Функция НадписьФайлыДляПередачиВБанк(Ссылка) Экспорт
	
	ТекстНадписи = НСтр("ru='Файлы для передачи в банк'");
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	%ИмяТаблицы%
		|ГДЕ
		|	ВладелецФайла = &Ссылка
		|	И ДляПередачиВБанк
		|	И НЕ ПометкаУдаления
		|";
		
		ИмяТаблицы = "Справочник." + Ссылка.Метаданные().Имя + "ПрисоединенныеФайлы";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицы%", ИмяТаблицы);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ТекстНадписи = ТекстНадписи + " (" + Запрос.Выполнить().Выгрузить()[0].Количество + ")";
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции

Функция ИнициализироватьПараметрыКонвертации() Экспорт
	
	ПараметрыКонвертации = Новый Структура;
	ПараметрыКонвертации.Вставить("Валюта");
	ПараметрыКонвертации.Вставить("ВалютаКонвертации");
	ПараметрыКонвертации.Вставить("ВалютаРеглУчета");
	ПараметрыКонвертации.Вставить("СуммаДокумента");
	ПараметрыКонвертации.Вставить("СуммаКонвертации");
	ПараметрыКонвертации.Вставить("КурсКонвертации");
	ПараметрыКонвертации.Вставить("КратностьКурсаКонвертации");
	ПараметрыКонвертации.Вставить("Дата");
	
	Возврат ПараметрыКонвертации;
	
КонецФункции

Процедура РассчитатьПараметрыКонвертации(ПараметрыКонвертации, РеквизитИзменение) Экспорт
	
	Если РеквизитИзменение = "ВалютаКонвертации" Тогда
	
		Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
			
			КурсВалютыКонвертации = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыКонвертации.ВалютаКонвертации, ПараметрыКонвертации.Дата);
			ПараметрыКонвертации.КурсКонвертации = КурсВалютыКонвертации.Курс;
			ПараметрыКонвертации.КратностьКурсаКонвертации = КурсВалютыКонвертации.Кратность;
			ПараметрыКонвертации.СуммаКонвертации = ?(ПараметрыКонвертации.КратностьКурсаКонвертации <> 0,
				ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.КурсКонвертации, 0);
			
		Иначе
			Если ПараметрыКонвертации.ВалютаКонвертации = ПараметрыКонвертации.ВалютаРеглУчета Тогда
				КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыКонвертации.Валюта, ПараметрыКонвертации.Дата);
				ПараметрыКонвертации.КурсКонвертации = КурсВалюты.Курс;
				ПараметрыКонвертации.КратностьКурсаКонвертации = КурсВалюты.Кратность;
			Иначе
				Если ЗначениеЗаполнено(ПараметрыКонвертации.Валюта) И ЗначениеЗаполнено(ПараметрыКонвертации.ВалютаКонвертации) Тогда
					КроссКурс = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(
						РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыКонвертации.Валюта, ПараметрыКонвертации.Дата),
						РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыКонвертации.ВалютаКонвертации, ПараметрыКонвертации.Дата));
				Иначе
					КроссКурс = Новый Структура("Курс, Кратность", 0, 0);
				КонецЕсли;
				
				ПараметрыКонвертации.КурсКонвертации = КроссКурс.Курс;
				ПараметрыКонвертации.КратностьКурсаКонвертации = КроссКурс.Кратность;
			КонецЕсли;
			
			ПараметрыКонвертации.СуммаКонвертации = ?(ПараметрыКонвертации.КратностьКурсаКонвертации <> 0,
				ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КурсКонвертации / ПараметрыКонвертации.КратностьКурсаКонвертации, 0);
			КонецЕсли;
			
	ИначеЕсли РеквизитИзменение = "КурсКонвертации" Тогда
		
		Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
			Если ПараметрыКонвертации.КурсКонвертации <> 0 Тогда
				ПараметрыКонвертации.СуммаКонвертации =
					ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.КурсКонвертации;
			Иначе
				ПараметрыКонвертации.СуммаКонвертации = 0;
			КонецЕсли;
		Иначе
			Если ПараметрыКонвертации.КратностьКурсаКонвертации <> 0 Тогда
				ПараметрыКонвертации.СуммаКонвертации =
					ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КурсКонвертации / ПараметрыКонвертации.КратностьКурсаКонвертации;
			Иначе
				ПараметрыКонвертации.СуммаКонвертации = 0;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РеквизитИзменение = "СуммаКонвертации" Тогда
		
		Если ПараметрыКонвертации.СуммаДокумента = 0 Тогда
			
			Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
				Если ПараметрыКонвертации.КратностьКурсаКонвертации <> 0 Тогда
					ПараметрыКонвертации.СуммаДокумента =
						ПараметрыКонвертации.СуммаКонвертации * ПараметрыКонвертации.КурсКонвертации / ПараметрыКонвертации.КратностьКурсаКонвертации;
				КонецЕсли;
			Иначе
				Если ПараметрыКонвертации.КурсКонвертации <> 0 Тогда
					ПараметрыКонвертации.СуммаДокумента =
						ПараметрыКонвертации.СуммаКонвертации * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.КурсКонвертации;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
				Если ПараметрыКонвертации.СуммаКонвертации <> 0 Тогда
					ПараметрыКонвертации.КурсКонвертации =
						ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.СуммаКонвертации;
				Иначе
					ПараметрыКонвертации.КурсКонвертации = 0;
				КонецЕсли;
			Иначе
				Если ПараметрыКонвертации.СуммаДокумента <> 0 Тогда
					ПараметрыКонвертации.КурсКонвертации =
						ПараметрыКонвертации.СуммаКонвертации * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.СуммаДокумента;
				Иначе
					ПараметрыКонвертации.КурсКонвертации = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокСуммыКонвертации(ПараметрыКонвертации) Экспорт
	
	Если ПараметрыКонвертации.КратностьКурсаКонвертации > 1 Тогда
		ШаблонКурса = "%1 за %2 %3";
		Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
			КратностьКурсаКонвертацииТекстом = СтрШаблон(
				ШаблонКурса, ПараметрыКонвертации.Валюта, ПараметрыКонвертации.КратностьКурсаКонвертации, ПараметрыКонвертации.ВалютаКонвертации);
		Иначе
			КратностьКурсаКонвертацииТекстом = СтрШаблон(
				ШаблонКурса, ПараметрыКонвертации.ВалютаКонвертации, ПараметрыКонвертации.КратностьКурсаКонвертации, ПараметрыКонвертации.Валюта);
		КонецЕсли;
		Возврат КратностьКурсаКонвертацииТекстом;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#Область ПечатьЧека

// Возвращает предварительные параметры фискализации чека для документа.
//
// Параметры:
//   ДокументСсылка - ДокументСсылка.ПриходныйКассовыйОрдер - Документ.
//   ВерсияФФД - Строка - Версия ФФД.
//
// ВозвращаемоеЗначение:
//  Неопределено, Массив - массив позиций чека
//	* см. функцию МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека().
Функция ПараметрыОперацииФискализацииЧекаДокументоваПоставкиСВидамиЗапасов(ДокументСсылка, СуммаПредоплатыКорректировка, ВерсияФФД = Неопределено)
	
	СуммаПредоплаты = ?(ТипЗнч(СуммаПредоплатыКорректировка) = Тип("Число"), СуммаПредоплатыКорректировка, 0);
	
	ПараметрыДокументовПоставки = Новый Структура;
	ПараметрыДокументовПоставки.Вставить("ПозицииЧека", Новый Массив);
	ПараметрыДокументовПоставки.Вставить("СуммаПостоплаты", 0);
	
	Если НЕ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")) Тогда
		
		Возврат ПараметрыДокументовПоставки;
	КонецЕсли;
	
	РеквизитыДокументаОплаты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, РасшифровкаПлатежа");
	
	РасшифровкаПлатежа = РеквизитыДокументаОплаты.РасшифровкаПлатежа.Выгрузить();
	Если РасшифровкаПлатежа.Колонки.Найти("ОснованиеПлатежа") <> Неопределено Тогда
		РасшифровкаПлатежа.Свернуть("ОснованиеПлатежа, Заказ", "Сумма");
	Иначе
		РасшифровкаПлатежа.Свернуть("Заказ", "Сумма");
	КонецЕсли;
	
	ТаблицаДокументовПоставки = РасшифровкаПлатежа.СкопироватьКолонки();
	Если ТаблицаДокументовПоставки.Колонки.Найти("ОснованиеПлатежа") <> Неопределено Тогда
		ТаблицаДокументовПоставки.Колонки.Удалить("ОснованиеПлатежа");
	КонецЕсли;
	
	// Определение документов поставки
	Для Каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаРасшифровкиПлатежа, "ОснованиеПлатежа") Тогда
			ДокументПоставки = СтрокаРасшифровкиПлатежа.ОснованиеПлатежа;
			Если НЕ ЗначениеЗаполнено(ДокументПоставки) Тогда
				ДокументПоставки = СтрокаРасшифровкиПлатежа.Заказ;
			КонецЕсли;
		Иначе
			ДокументПоставки = СтрокаРасшифровкиПлатежа.Заказ;
		КонецЕсли;
		
		Если НЕ (ТипЗнч(ДокументПоставки) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнч(ДокументПоставки) = Тип("ДокументСсылка.КорректировкаРеализации")
			ИЛИ ТипЗнч(ДокументПоставки) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
			ИЛИ ТипЗнч(ДокументПоставки) = Тип("ДокументСсылка.АктВыполненныхРабот")) Тогда
			
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицаДокументовПоставки = ТаблицаДокументовПоставки.Добавить();
		СтрокаТаблицаДокументовПоставки.Заказ = ДокументПоставки;
		СтрокаТаблицаДокументовПоставки.Сумма = СтрокаРасшифровкиПлатежа.Сумма;
	КонецЦикла;
	ТаблицаДокументовПоставки.Свернуть("Заказ", "Сумма");
	
	Для Каждого СтрокаТаблицаДокументовПоставки Из ТаблицаДокументовПоставки Цикл
		
		ДокументПоставки = СтрокаТаблицаДокументовПоставки.Заказ;
		
		Если ТипЗнч(ДокументПоставки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КорректировкаРеализации.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|ГДЕ
			|	КорректировкаРеализации.Проведен
			|	И КорректировкаРеализации.ДокументОснование = &ДокументОснование";
			Запрос.УстановитьПараметр("ДокументОснование", ДокументПоставки);
			
			ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаЗапроса.Следующий() Тогда
				ДокументПоставки = ВыборкаЗапроса.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		РеквизитыДокументаПоставки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоставки, "Дата, СуммаДокумента");
		ДокументПоставкиДата  = РеквизитыДокументаПоставки.Дата;
		ДокументПоставкиСумма = РеквизитыДокументаПоставки.СуммаДокумента;
		
		ДокументОплатыДата = РеквизитыДокументаОплаты.Дата;
		ДокументОплатыСуммаОплатыПоставки = СтрокаТаблицаДокументовПоставки.Сумма;
		
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
		Если НачалоДня(ДокументПоставкиДата) = НачалоДня(ДокументОплатыДата) Тогда
			
			ДельтаПредоплатыТекущегоДокумента = ДокументПоставкиСумма - ДокументОплатыСуммаОплатыПоставки;
			Если ДельтаПредоплатыТекущегоДокумента < 0 Тогда
				ДельтаПредоплатыТекущегоДокумента = 0;
			КонецЕсли;
			
			СуммаПредоплаты = СуммаПредоплаты - ДельтаПредоплатыТекущегоДокумента;
			
			Если СуммаПредоплаты >= 0 И ДельтаПредоплатыТекущегоДокумента > 0 Тогда
				ДельтаПредоплатыТекущегоДокумента = 0;
			КонецЕсли;
			
			Если ДельтаПредоплатыТекущегоДокумента = 0 Тогда
			//Если ДокументПоставкиСумма <= ДокументОплатыСуммаОплатыПоставки + СуммаПредоплаты Тогда
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
			Иначе
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
			КонецЕсли;
		ИначеЕсли НачалоДня(ДокументПоставкиДата) > НачалоДня(ДокументОплатыДата) Тогда
			Если ДокументПоставкиСумма = ДокументОплатыСуммаОплатыПоставки Тогда
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
			Иначе
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
			КонецЕсли;
		КонецЕсли;
		
		ПолноеИмя = ДокументПоставки.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПараметрыОперацииФискализацииЧекаПоОбъектуРасчетов = МенеджерОбъекта.ПараметрыОперацииФискализацииЧека(ДокументПоставки, , ВерсияФФД);
		
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Сумма"    , ДокументОплатыСуммаОплатыПоставки);
		
		МассивОплат = Новый Массив();
		МассивОплат.Добавить(СтрокаОплаты);
		
		Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой Тогда
			СуммаКредита = ДокументПоставкиСумма - ДокументОплатыСуммаОплатыПоставки;
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
			СтрокаОплаты.Вставить("Сумма"    , СуммаКредита);
			
			МассивОплат.Добавить(СтрокаОплаты);
			
			ПараметрыДокументовПоставки.СуммаПостОплаты = ПараметрыДокументовПоставки.СуммаПостОплаты + СуммаКредита;
		КонецЕсли;
		
		ПараметрыОперацииФискализацииЧекаПоОбъектуРасчетов.ТаблицаОплат = МассивОплат;
		
		Для Каждого СтрокаПозицииЧека Из ПараметрыОперацииФискализацииЧекаПоОбъектуРасчетов.ПозицииЧека Цикл
			СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		КонецЦикла;
		
		Отказ = Ложь;
		ПараметрыОперацииФискализацииЧекаПоОбъектуРасчетов.Вставить("СпособФорматноЛогическогоКонтроля", Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки);
		МенеджерОборудованияВызовСервера.ПривестиДанныеКТребуемомуФормату(ПараметрыОперацииФискализацииЧекаПоОбъектуРасчетов, Отказ, "", Ложь);
		
		Для Каждого СтрокаПозицииЧека Из ПараметрыОперацииФискализацииЧекаПоОбъектуРасчетов.ПозицииЧека Цикл
			// Если это оплата, то не нужно выводить данные по штрихкоду и маркировке в позициях чека
			Если НЕ (СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
				ИЛИ СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой) Тогда
				
				СтрокаПозицииЧека.Штрихкод = Неопределено;
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = Неопределено;
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак       = Неопределено;
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = Неопределено;
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = Неопределено;
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаПозицииЧека, "КодВидаНоменклатурнойКлассификации") Тогда
					СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации = "";
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыДокументовПоставки.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПараметрыДокументовПоставки;
	
КонецФункции

Функция ПараметрыОперацииФискализацииЧека(ДокументСсылка, СуммаПредоплатыКорректировка = Неопределено, ВерсияФФД = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР ДанныеДокумента.ХозяйственнаяОперация
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств)
	|	КОНЕЦ КАК ТипРасчета,
	|	ЕСТЬNULL(ДанныеДокумента.Кассир.ФизическоеЛицо.Наименование, """") КАК Кассир,
	|	ЕСТЬNULL(ДанныеДокумента.Кассир.ФизическоеЛицо.ИНН, """") КАК КассирИНН,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		 ИЛИ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеДокумента.КассаККМ = ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.КассаККМ
	|		ИНАЧЕ ДанныеДокумента.Касса
	|	КОНЕЦ КАК ТорговыйОбъект,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ПринятоОт КАК ПринятоОт,
	|	ДанныеДокумента.Основание КАК Основание,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные) КАК ТипОплаты,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДанныеДокумента.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР ДанныеДокумента.ХозяйственнаяОперация
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДанныеДокумента.Кассир.ФизическоеЛицо.Наименование, """"),
	|	ЕСТЬNULL(ДанныеДокумента.Кассир.ФизическоеЛицо.ИНН, """"),
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		 ИЛИ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеДокумента.КассаККМ = ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.КассаККМ
	|		ИНАЧЕ ДанныеДокумента.Касса
	|	КОНЕЦ КАК ТорговыйОбъект,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.Выдать,
	|	ДанныеДокумента.Основание,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные),
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДанныеДокумента.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР ДанныеДокумента.ХозяйственнаяОперация
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДанныеДокумента.Ответственный.ФизическоеЛицо.Наименование, """"),
	|	ЕСТЬNULL(ДанныеДокумента.Ответственный.ФизическоеЛицо.ИНН, """"),
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		 ИЛИ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.Валюта,
	|	ЕСТЬNULL(ДанныеДокумента.Контрагент.НаименованиеПолное, """"),
	|	"""",
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно),
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДанныеДокумента.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР ДанныеДокумента.ХозяйственнаяОперация
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДанныеДокумента.Ответственный.ФизическоеЛицо.Наименование, """"),
	|	ЕСТЬNULL(ДанныеДокумента.Ответственный.ФизическоеЛицо.ИНН, """"),
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		 ИЛИ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.Валюта,
	|	ЕСТЬNULL(ДанныеДокумента.Контрагент.НаименованиеПолное, """"),
	|	"""",
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно),
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДанныеДокумента.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР ДанныеДокумента.ХозяйственнаяОперация
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств)
	|	КОНЕЦ,
	|	ЕСТЬNULL(NULL, """"),
	|	ЕСТЬNULL(NULL, """"),
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		 ИЛИ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	ДанныеДокумента.КассаОтправитель,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.Валюта,
	|	ЕСТЬNULL(ДанныеДокумента.Контрагент.НаименованиеПолное, """"),
	|	"""",
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно),
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДанныеДокумента.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР ДанныеДокумента.ХозяйственнаяОперация
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств)
	|	КОНЕЦ,
	|	ЕСТЬNULL(NULL, """"),
	|	ЕСТЬNULL(NULL, """"),
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		 ИЛИ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	ДанныеДокумента.КассаПолучатель,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.Валюта,
	|	ЕСТЬNULL(ДанныеДокумента.Контрагент.НаименованиеПолное, """"),
	|	"""",
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно),
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДанныеДокумента.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	Если Не Выборка.Следующий() Тогда
		Возврат ПараметрыФискализацииЧека;
	КонецЕсли;
	
	ПараметрыФискализацииЧека.ДокументОснование    = ДокументСсылка;
	ПараметрыФискализацииЧека.ТипРасчета           = Выборка.ТипРасчета;
	
	СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Контрагент, ТекущаяДатаСеанса());
	ПараметрыФискализацииЧека.Получатель		   = СведенияОЮрФизЛице.ПолноеНаименование;
	ПараметрыФискализацииЧека.ПолучательИНН		   = СведенияОЮрФизЛице.ИНН;
	
	ПараметрыФискализацииЧека.ТорговыйОбъект	   = Выборка.ТорговыйОбъект;
	
	ПараметрыФискализацииЧека.Кассир    		   = Выборка.Кассир;
	ПараметрыФискализацииЧека.КассирИНН 		   = Выборка.КассирИНН;
	
	// Для принтера чеков (ЕНВД)
	СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, ТекущаяДатаСеанса());
	ПараметрыФискализацииЧека.Организация		   = Выборка.Организация;
	ПараметрыФискализацииЧека.ОрганизацияНазвание  = СведенияОЮрФизЛице.ПолноеНаименование;
	ПараметрыФискализацииЧека.ОрганизацияИНН       = СведенияОЮрФизЛице.ИНН;
	ПараметрыФискализацииЧека.ОрганизацияКПП       = СведенияОЮрФизЛице.КПП;
	
	Если СведенияОЮрФизЛице.Свойство("ФактическийАдрес") Тогда
		ПараметрыФискализацииЧека.АдресМагазина = СведенияОЮрФизЛице.ФактическийАдрес;
	КонецЕсли;
	Если СведенияОЮрФизЛице.Свойство("СокращенноеНаименование") Тогда
		ПараметрыФискализацииЧека.НаименованиеМагазина = СведенияОЮрФизЛице.СокращенноеНаименование;
	КонецЕсли;
	
	Если ВерсияФФД = "1.0" Тогда
		ЗаполнитьПозицииИТаблицуОплатЧека10(ПараметрыФискализацииЧека, Выборка, СуммаПредоплатыКорректировка);
	Иначе
		ЗаполнитьПозицииИТаблицуОплатЧека(ПараметрыФискализацииЧека, Выборка, СуммаПредоплатыКорректировка, ВерсияФФД);
	КонецЕсли;
	
	Возврат ПараметрыФискализацииЧека;
	
КонецФункции

Процедура ЗаполнитьПозицииИТаблицуОплатЧека(ПараметрыФискализацииЧека, ДанныеДокумента, СуммаПредоплатыКорректировка, ВерсияФФД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|ПОМЕСТИТЬ РасшифровкаПлатежногоДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|			ПО КорректировкаРеализации.ДокументОснование = РеализацияТоваровУслуг.Ссылка
	|		ПО РеализацияТоваровУслуг.Ссылка = ДанныеДокумента.ОснованиеПлатежа
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека)
	|	И (ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) В (&ТипыНакладная)
	|		ИЛИ
	|		ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыНакладная)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДоговор)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДополнительно)
	|		И НЕ ДанныеДокумента.ОснованиеПлатежа.Валюта ЕСТЬ NULL
	|		И ДанныеДокумента.ОснованиеПлатежа = ДанныеДокумента.Заказ)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) В (&ТипыДополнительно)
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) В (&ТипыНакладная)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека)
	|	И (ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) В (&ТипыНакладная)
	|		ИЛИ
	|		ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыНакладная)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДоговор)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДополнительно)
	|		И НЕ ДанныеДокумента.ОснованиеПлатежа.Валюта ЕСТЬ NULL
	|		И ДанныеДокумента.ОснованиеПлатежа = ДанныеДокумента.Заказ)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) В (&ТипыДополнительно)
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) В (&ТипыНакладная)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека)
	|	И (ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		ИЛИ ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту))
	|	И (ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) В (&ТипыНакладная)
	|		ИЛИ
	|		ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыНакладная)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДоговор)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) НЕ В (&ТипыДополнительно)
	|		И НЕ ДанныеДокумента.ОснованиеПлатежа.Валюта ЕСТЬ NULL
	|		И ДанныеДокумента.ОснованиеПлатежа = ДанныеДокумента.Заказ)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.Заказ.Валюта,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов,
	|	ДанныеДокумента.Ссылка.Валюта,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС),
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта
	|			ТОГДА ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов)
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) НЕ В (&ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека)
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	И ДанныеДокумента.Заказ ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	И НЕ ДанныеДокумента.Заказ.Валюта ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта
	|			ТОГДА ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ДанныеДокумента.Заказ.Валюта,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов,
	|	ДанныеДокумента.Ссылка.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты ,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		ИЛИ ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту))
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) В (&ТипыДополнительно)
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) В (&ТипыНакладная)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) НЕ В (&ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека)
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) НЕ В (&ТипыДоговор)
	|	И ДанныеДокумента.Заказ <> НЕОПРЕДЕЛЕНО
	|	И ДанныеДокумента.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) НЕ В (&ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека)
	|	И (ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) В (&ТипыНакладная)
	|		ИЛИ
	|		ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) НЕ В (&ТипыНакладная)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) НЕ В (&ТипыДоговор)
	|		И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) НЕ В (&ТипыДополнительно)
	|		И НЕ ДанныеДокумента.Заказ.Валюта ЕСТЬ NULL
	|		И ДанныеДокумента.Заказ = ДанныеДокумента.Заказ)	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	МАКСИМУМ(ДанныеДокумента.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДокумента,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) В (&ТипыДополнительно)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Заказ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Заказ.Валюта = &Валюта ТОГДА
	|			ДанныеДокумента.Заказ.СуммаДокумента
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетНаОплатуКлиенту
	|			ТОГДА ДанныеДокумента.ОснованиеПлатежа.ДокументОснование
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.ОперацияПоЯндексКассе
	|			ТОГДА ДанныеДокумента.ОснованиеПлатежа.ОснованиеПлатежа
	|		ИНАЧЕ ДанныеДокумента.ОснованиеПлатежа
	|	КОНЕЦ КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СуммаНДС20 > 0 ТОГДА
	|			&СтавкаНДСПоУмолчанию
	|		КОГДА ДанныеДокумента.СуммаНДС10 > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа.Валюта = &Валюта
	|			ТОГДА ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаОплаты,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаВзаиморасчетовОплаты
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Основание,
	|	ДанныеДокумента.ВалютаОснования,
	|	ДанныеДокумента.СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.ВалютаОплаты,
	|	ДанныеДокумента.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ВалютаОснования = &Валюта
	|			ТОГДА ВЫБОР
	|				КОГДА КорректировкаРеализации.Ссылка ЕСТЬ NULL
	|					ТОГДА ДанныеДокумента.СуммаДокумента
	|				ИНАЧЕ КорректировкаРеализации.СуммаДокумента
	|			КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаОплаты,
	|	ДанныеДокумента.СуммаВзаиморасчетовОплаты
	|ПОМЕСТИТЬ Расшифровка
	|ИЗ
	|	РасшифровкаПлатежногоДокумента КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|	ПО ДанныеДокумента.Основание = КорректировкаРеализации.ДокументОснование
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Основание КАК Основание,
	|	ДанныеДокумента.Основание.Дата КАК Дата
	|ПОМЕСТИТЬ ДатыДокументовОснований
	|ИЗ
	|	Расшифровка КАК ДанныеДокумента
	|ГДЕ
	|	НЕ ДанныеДокумента.Основание.Дата ЕСТЬ NULL
	|	
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расшифровка.Основание,
	|	Расшифровка.СтавкаНДС,
	|	Расшифровка.СуммаДокумента,
	|	Расшифровка.СуммаОплаты,
	|	ВЫБОР
	|		КОГДА Расшифровка.ВалютаОснования = &Валюта ТОГДА
	|			ВЫБОР
	|				КОГДА Расшифровка.СуммаДокумента - Расшифровка.СуммаОплаты > 0
	|					ТОГДА Расшифровка.СуммаДокумента - Расшифровка.СуммаОплаты
	|				ИНАЧЕ
	|					0
	|			КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредита
	|	
	|ПОМЕСТИТЬ РасшифровкаОснования
	|ИЗ
	|	Расшифровка
	|
	|СГРУППИРОВАТЬ ПО
	|	Расшифровка.Основание,
	|	Расшифровка.ВалютаОснования,
	|	Расшифровка.СтавкаНДС,
	|	Расшифровка.СуммаДокумента,
	|	Расшифровка.СуммаОплаты
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаПереплаты
	|
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОснованиеПлатежа) = ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг)
	|	И (ДанныеДокумента.Ссылка НЕ В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.Заказ = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма)
	|
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.Ссылка НЕ В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.Заказ = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма)
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	И (ДанныеДокумента.Ссылка НЕ В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.Заказ = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма)
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	И (ДанныеДокумента.Ссылка НЕ В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.Заказ = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма)
	|
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.Ссылка НЕ В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.Заказ = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма)
	|
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.Ссылка НЕ В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.Заказ = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	&СтавкаНДСПоУмолчанию,
	|	ДанныеДокумента.СуммаДокументаСНДС20
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаДокументаСНДС20 > 0
	|	И (НЕ ДанныеДокумента.Ссылка В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.ОбъектРасчетов = &Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10),
	|	ДанныеДокумента.СуммаДокументаСНДС10
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаДокументаСНДС10 > 0
	|	И (НЕ ДанныеДокумента.Ссылка В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.ОбъектРасчетов = &Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	ДанныеДокумента.СуммаДокумента - (ДанныеДокумента.СуммаДокументаСНДС20 + ДанныеДокумента.СуммаДокументаСНДС10)
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.СуммаДокумента - (ДанныеДокумента.СуммаДокументаСНДС20 + ДанныеДокумента.СуммаДокументаСНДС10)) > 0
	|	И (НЕ ДанныеДокумента.Ссылка В (ВЫБРАТЬ Расшифровка.Ссылка ИЗ Расшифровка)
	|		ИЛИ ДанныеДокумента.ОбъектРасчетов = &Ссылка)
	|
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасшифровкаОснования.СуммаКредита), 0) КАК СуммаКредита
	|ИЗ
	|	РасшифровкаОснования
	|
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расшифровка.Основание КАК Основание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫБОР
	|				КОГДА Расшифровка.ВалютаОснования = Расшифровка.ВалютаОплаты ТОГДА
	|					ЕСТЬNULL(Расшифровка.СуммаДокумента, 0) = Расшифровка.СуммаОплаты
	|				ИНАЧЕ
	|					ЕСТЬNULL(Расшифровка.СуммаВзаиморасчетовОснования, Расшифровка.СуммаДокумента) = Расшифровка.СуммаВзаиморасчетовОплаты
	|			КОНЕЦ, ЛОЖЬ) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная)
	|	КОНЕЦ КАК ПризнакСпособаРасчетаПредоплата,
	|	ВЫБОР
	|		КОГДА ФискальныеОперации.ДокументОснование ЕСТЬ NULL ТОГДА
	|			ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(ДатыДокументовОснований.Дата, ДЕНЬ) = &ДатаОплаты И ЕСТЬNULL(ВЫБОР
	|						КОГДА Расшифровка.ВалютаОснования = Расшифровка.ВалютаОплаты ТОГДА
	|							ЕСТЬNULL(Расшифровка.СуммаДокумента, 0) = Расшифровка.СуммаОплаты
	|						ИНАЧЕ
	|							ЕСТЬNULL(Расшифровка.СуммаВзаиморасчетовОснования, Расшифровка.СуммаДокумента) = Расшифровка.СуммаВзаиморасчетовОплаты
	|					КОНЕЦ, ЛОЖЬ) ТОГДА
	|					ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой)
	|				КОГДА НАЧАЛОПЕРИОДА(ДатыДокументовОснований.Дата, ДЕНЬ) < &ДатаОплаты ТОГДА
	|					ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ОплатаКредита)
	|				ИНАЧЕ
	|					ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой)
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ОплатаКредита)
	|	КОНЕЦ КАК ПризнакСпособаРасчета
	|	
	|ПОМЕСТИТЬ ОснованияПлатежа
	|ИЗ
	|	Расшифровка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|	ПО
	|		ФискальныеОперации.ДокументОснование = Расшифровка.Основание
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(ДатыДокументовОснований.Дата, ДЕНЬ)) КАК КоличествоРазличныхДатОснований
	|		 ИЗ
	|			ДатыДокументовОснований КАК ДатыДокументовОснований) АнализДатОснований
	|	ПО
	|		ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДатыДокументовОснований КАК ДатыДокументовОснований
	|	ПО
	|		Расшифровка.Основание = ДатыДокументовОснований.Основание
	|
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокумента.ОснованиеПлатежа.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокумента.Заказ.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокумента.ОснованиеПлатежа.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокумента.Заказ.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокумента.Заказ.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокумента.Заказ.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокумента.ОснованиеПлатежа.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокумента.Заказ.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|;
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеДокумента.Ссылка);
	Запрос.УстановитьПараметр("Валюта", ДанныеДокумента.Валюта);
	Запрос.УстановитьПараметр("ДатаОплаты", НачалоДня(ДанныеДокумента.Дата));
	Запрос.УстановитьПараметр("СуммаПредоплатыКорректировка",
		?(ЗначениеЗаполнено(СуммаПредоплатыКорректировка), СуммаПредоплатыКорректировка, 0));
	Запрос.УстановитьПараметр("ЗаданаСуммаПредоплаты", ЗначениеЗаполнено(СуммаПредоплатыКорректировка));
	
	Запрос.УстановитьПараметр("ТипыНакладная", Метаданные.ОпределяемыеТипы.ОбъектРасчетовНакладная.Тип.Типы());
	
	ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека = Новый Массив;
	ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	Запрос.УстановитьПараметр("ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека", ТипыДокументыПоставкиСДопДаннымиДляПозицийЧека);
	
	ТипыДоговор = Новый Массив;
	ТипыДоговор.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ТипыДоговор.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	Запрос.УстановитьПараметр("ТипыДоговор", ТипыДоговор);
	
	ТипыДополнительно = Новый Массив;
	ТипыДополнительно.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
	ТипыДополнительно.Добавить(Тип("ДокументСсылка.СчетНаОплатуКлиенту"));
	ТипыДополнительно.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	Запрос.УстановитьПараметр("ТипыДополнительно", ТипыДополнительно);
	
	Запрос.УстановитьПараметр("ТипРасчетаВозврат", ПараметрыФискализацииЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
	
	Запрос.УстановитьПараметр("СтавкаНДСПоУмолчанию", УчетНДСУП.СтавкаНДСПоУмолчанию());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	НалогообложениеНДС = Неопределено;
	ВыборкаНалогообложения = РезультатЗапроса[7].Выбрать();
	Пока ВыборкаНалогообложения.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаНалогообложения.НалогообложениеНДС) Тогда
			Если ЗначениеЗаполнено(НалогообложениеНДС) И 
				НалогообложениеНДС <> ВыборкаНалогообложения.НалогообложениеНДС Тогда
				ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
				Возврат;
			Иначе
				НалогообложениеНДС = ВыборкаНалогообложения.НалогообложениеНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		ПараметрыФискализацииЧека.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	Иначе
		ПараметрыФискализацииЧека.СистемаНалогообложения =
			РозничныеПродажи.СистемаНалогообложенияФискальнойОперации(ДанныеДокумента.Организация);
	КонецЕсли;
	
	СтрокаОплаты = Новый Структура;
	СтрокаОплаты.Вставить("ТипОплаты", ДанныеДокумента.ТипОплаты);
	СтрокаОплаты.Вставить("Сумма",     ДанныеДокумента.СуммаДокумента);
	ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	ИтогоСуммаОплаты = ДанныеДокумента.СуммаДокумента;
	Если Не РезультатЗапроса[5].Пустой() Тогда
		
		ВыборкаОплат = РезультатЗапроса[5].Выбрать();
		ВыборкаОплат.Следующий();
		
		Если ВыборкаОплат.СуммаКредита > 0 Тогда
			СтрокаОплаты = Новый Структура;
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
			СтрокаОплаты.Вставить("Сумма",     ВыборкаОплат.СуммаКредита);
			ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
			
			ИтогоСуммаОплаты = ИтогоСуммаОплаты + ВыборкаОплат.СуммаКредита;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СуммаПредоплатыКорректировка) = Тип("Число")
		И СуммаПредоплатыКорректировка > 0 Тогда
		
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
		СтрокаОплаты.Вставить("Сумма",     СуммаПредоплатыКорректировка);
		ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ПараметрыФискализацииЧека.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход
		ИЛИ ПараметрыФискализацииЧека.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход Тогда
		
		СтавкаНДСПоДокументу = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		СтавкаНДСПоДокументу = Перечисления.СтавкиНДС.НДС20_120;
	КонецЕсли;
	
	ВыборкаСтавкиНДС = РезультатЗапроса[4].Выбрать();
	Если ВыборкаСтавкиНДС.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаСтавкиНДС.СтавкаНДС) Тогда
			СтавкаНДСПоДокументу = ВыборкаСтавкиНДС.СтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДокументовПоставки = ПараметрыОперацииФискализацииЧекаДокументоваПоставкиСВидамиЗапасов(ДанныеДокумента.Ссылка, СуммаПредоплатыКорректировка, ВерсияФФД);
	ПозицииЧека = ПараметрыДокументовПоставки.ПозицииЧека;
	СуммаПостоплаты = ПараметрыДокументовПоставки.СуммаПостоплаты;
	
	ИтогоСуммаЧека = 0;
	Для Каждого СтрокаПозицииЧека Из ПозицииЧека Цикл
		ИтогоСуммаЧека = ИтогоСуммаЧека + СтрокаПозицииЧека.Сумма;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаОплаченныеПозицииНоменклатуры();
	
	Запрос.УстановитьПараметр("ДатаДокумента",    ДанныеДокумента.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента",  ДанныеДокумента.Валюта);
	Запрос.УстановитьПараметр("ОплатаОтКлиента",  ДанныеДокумента.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, Выборка);
		
		Если СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
			ИЛИ СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой Тогда
			
			СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиКлиентСервер.ПризнакПредметаРасчетаФискальнойОперации(
				Выборка.ТипНоменклатуры,
				Ложь);
		Иначе
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
			СтрокаПозицииЧека.СуммаНДС = Неопределено;
		КонецЕсли;
		
		СтрокаПозицииЧека.Сумма = Окр(СтрокаПозицииЧека.Сумма, 2);
		
		СтрокаПозицииЧека.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Выборка.НоменклатураНаименование,
			Выборка.ХарактеристикаНаименование);
			
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Выборка, "УпаковкаНаименование")
			И ЗначениеЗаполнено(Выборка.УпаковкаНаименование) Тогда
			
			СтрокаПозицииЧека.ЕдиницаИзмерения = СокрЛП(Выборка.УпаковкаНаименование);
		КонецЕсли;
		
		СтрокаПозицииЧека.СтавкаНДС = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(Выборка.СтавкаНДС);
		СтрокаПозицииЧека.НомерСекции = 1;
		
		Если СтрокаПозицииЧека.Количество <> 0 Тогда
			СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2);
		КонецЕсли;
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		ИтогоСуммаЧека = ИтогоСуммаЧека + СтрокаПозицииЧека.Сумма;
		
	КонецЦикла;
	
	// Аванс
	Если ИтогоСуммаОплаты > ИтогоСуммаЧека Тогда
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.Аванс;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		Если ДанныеДокумента.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Оплата от:'") + " " + ДанныеДокумента.ПринятоОт;
		Иначе
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Выдано:'") + " " + ДанныеДокумента.ПринятоОт;
		КонецЕсли;
		
		СтрокаПозицииЧека.Количество   = 1;
		СтрокаПозицииЧека.Цена         = ИтогоСуммаОплаты - ИтогоСуммаЧека;
		СтрокаПозицииЧека.Сумма        = ИтогоСуммаОплаты - ИтогоСуммаЧека;
		СтрокаПозицииЧека.СтавкаНДС    = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(СтавкаНДСПоДокументу);
		СтрокаПозицииЧека.НомерСекции  = 2;
		
		СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Сумма;
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		ИтогоСуммаЧека = ИтогоСуммаЧека + СтрокаПозицииЧека.Сумма;
	КонецЕсли;
	
	ПараметрыФискализацииЧека.ПозицииЧека = ПозицииЧека;
	
	Если СуммаПостоплаты > 0 Тогда
		ТаблицаОплат = ПараметрыФискализацииЧека.ТаблицаОплат;
		
		ЕстьСуммаПостоплатыВТаблицеОплат = Ложь;
		Для Каждого СтрокаТаблицыОплат Из ТаблицаОплат Цикл
			Если СтрокаТаблицыОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
				СтрокаТаблицыОплат.Сумма = СтрокаТаблицыОплат.Сумма + СуммаПостоплаты;
				
				ДанныеПостоплаты = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьСуммаПостоплатыВТаблицеОплат Тогда
			СтрокаОплаты = Новый Структура;
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
			СтрокаОплаты.Вставить("Сумма",     СуммаПостоплаты);
			ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
	КонецЕсли;
	
	// Замена ставок НДС по признакам способа расчета: аванс, предоплата, оплата кредита
	Отказ = Ложь;
	ПараметрыФискализацииЧека.Вставить("СпособФорматноЛогическогоКонтроля", Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки);
	МенеджерОборудованияВызовСервера.ПривестиДанныеКТребуемомуФормату(ПараметрыФискализацииЧека, Отказ, "", Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьПозицииИТаблицуОплатЧека10(ПараметрыФискализацииЧека, ДанныеДокумента, СуммаПредоплатыКорректировка)
	
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", ДанныеДокумента.ТипОплаты);
	СтрокаОплаты.Вставить("Сумма", ДанныеДокумента.СуммаДокумента);
	
	ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	ПозицииЧека = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|ПОМЕСТИТЬ Расшифровка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОснованиеПлатежа КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетФактураВыданный
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОснованиеПлатежа,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ КАК Основание,
	|	ДанныеДокумента.Заказ.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.Заказ.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.Заказ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовОплаты
	|
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.СчетНаОплатуКлиенту
	|			ТОГДА ДанныеДокумента.ОснованиеПлатежа.ДокументОснование
	|		КОГДА ДанныеДокумента.ОснованиеПлатежа ССЫЛКА Документ.ОперацияПоЯндексКассе
	|			ТОГДА ДанныеДокумента.ОснованиеПлатежа.ОснованиеПлатежа
	|		ИНАЧЕ ДанныеДокумента.ОснованиеПлатежа
	|	КОНЕЦ КАК Основание,
	|	ДанныеДокумента.ОснованиеПлатежа.Валюта КАК ВалютаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаОснования,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаВзаиморасчетовОснования,
	|	ДанныеДокумента.Ссылка.Валюта КАК ВалютаОплаты,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаОплаты,
	|	ДанныеДокумента.ОснованиеПлатежа.СуммаДокумента КАК СуммаВзаиморасчетовОплаты
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	Расшифровка.Основание,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА Расшифровка.ВалютаОснования = Расшифровка.ВалютаОплаты ТОГДА
	|			ЕСТЬNULL(Расшифровка.СуммаОснования, 0) = Расшифровка.СуммаОплаты
	|		ИНАЧЕ
	|			ЕСТЬNULL(Расшифровка.СуммаВзаиморасчетовОснования, Расшифровка.СуммаОснования) = Расшифровка.СуммаВзаиморасчетовОплаты
	|	КОНЕЦ, ЛОЖЬ) И (Расшифровка.Основание <> &Ссылка) КАК ПолнаяОплатаОснования
	|ПОМЕСТИТЬ РасшифровкаОснования
	|ИЗ
	|	Расшифровка
	|;
	|
	|ВЫБРАТЬ
	|	Расшифровка.Основание
	|ИЗ
	|	РасшифровкаОснования КАК Расшифровка
	|ГДЕ
	|	Расшифровка.ПолнаяОплатаОснования
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО Расшифровка.Основание = ДанныеДокумента.Заказ
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО Расшифровка.Основание = ДанныеДокумента.Заказ
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО (Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа
	|		ИЛИ Расшифровка.Основание = ДанныеДокумента.Заказ)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СтавкаНДСПоУмолчанию КАК СтавкаНДС,
	|	ДанныеДокумента.СуммаДокументаСНДС20 КАК Сумма
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО (Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа 
	|		ИЛИ Расшифровка.Основание = ДанныеДокумента.ОбъектРасчетов)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаДокументаСНДС20 > 0
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10) КАК СтавкаНДС,
	|	ДанныеДокумента.СуммаДокументаСНДС10 КАК Сумма
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО (Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа
	|		ИЛИ Расшифровка.Основание = ДанныеДокумента.ОбъектРасчетов)	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаДокументаСНДС10 > 0
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
	|	ДанныеДокумента.СуммаДокумента - (ДанныеДокумента.СуммаДокументаСНДС20 + ДанныеДокумента.СуммаДокументаСНДС10) КАК Сумма
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаОснования КАК Расшифровка
	|	ПО (Расшифровка.Основание = ДанныеДокумента.ОснованиеПлатежа
	|		ИЛИ Расшифровка.Основание = ДанныеДокумента.ОбъектРасчетов)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.СуммаДокумента - (ДанныеДокумента.СуммаДокументаСНДС20 + ДанныеДокумента.СуммаДокументаСНДС10)) > 0
	|	И НЕ Расшифровка.ПолнаяОплатаОснования
	|///////////////////////////////////////////////
	|
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Расшифровка.Основание.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	Расшифровка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеДокумента.Ссылка);
	Запрос.УстановитьПараметр("СтавкаНДСПоУмолчанию", УчетНДСУП.СтавкаНДСПоУмолчанию());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	УстановитьПривилегированныйРежим(Ложь);
	
	НалогообложениеНДС = Неопределено;
	ВыборкаНалогообложения = РезультатЗапроса[4].Выбрать();
	Пока ВыборкаНалогообложения.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаНалогообложения.НалогообложениеНДС) Тогда
			Если ЗначениеЗаполнено(НалогообложениеНДС) И 
				НалогообложениеНДС <> ВыборкаНалогообложения.НалогообложениеНДС Тогда
				ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
				Возврат;
			Иначе
				НалогообложениеНДС = ВыборкаНалогообложения.НалогообложениеНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		ПараметрыФискализацииЧека.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	Иначе
		ПараметрыФискализацииЧека.СистемаНалогообложения =
			РозничныеПродажи.СистемаНалогообложенияФискальнойОперации(ДанныеДокумента.Организация);
	КонецЕсли;
	
	ИтогоСуммаЧека = 0;
	
	ВыборкаСтрокБезТоваров = РезультатЗапроса[3].Выбрать();
	Пока ВыборкаСтрокБезТоваров.Следующий() Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		Если ДанныеДокумента.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Оплата от:'")
				+ " " + ДанныеДокумента.ПринятоОт;
		Иначе
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Выдано:'")
				+ " " + ДанныеДокумента.ПринятоОт;
		КонецЕсли;
		СтрокаПозицииЧека.Количество   = 1;
		СтрокаПозицииЧека.Цена         = ВыборкаСтрокБезТоваров.Сумма;
		СтрокаПозицииЧека.Сумма        = ВыборкаСтрокБезТоваров.Сумма;
		СтрокаПозицииЧека.СтавкаНДС    = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(ВыборкаСтрокБезТоваров.СтавкаНДС);
		СтрокаПозицииЧека.НомерСекции  = 2;
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		ИтогоСуммаЧека = ИтогоСуммаЧека + СтрокаПозицииЧека.Сумма;
	КонецЦикла;
	
	ДокументыОснования = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Основание");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОплаченныеПозицииНоменклатуры10();
	Запрос.УстановитьПараметр("МассивДокументов", ДокументыОснования);
	Запрос.УстановитьПараметр("ДатаДокумента", ДанныеДокумента.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДанныеДокумента.Валюта);
	Запрос.УстановитьПараметр("ОплатаОтКлиента", ДанныеДокумента.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, Выборка);
		
		СтрокаПозицииЧека.Сумма = Окр(СтрокаПозицииЧека.Сумма, 2);
		
		СтрокаПозицииЧека.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Выборка.НоменклатураНаименование,
			Выборка.ХарактеристикаНаименование,
			Выборка.УпаковкаНаименование);
		
		СтрокаПозицииЧека.СтавкаНДС = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(Выборка.СтавкаНДС);
		СтрокаПозицииЧека.НомерСекции = 1;
		
		// Данные по алкогольной продукции
		ПараметрыАлкогольнойПродукции = Новый Массив;
		Если ЗначениеЗаполнено(Выборка.АлкогольнаяПродукция) И Выборка.АлкогольнаяПродукция Тогда
			ПараметрыАлкогольнойПродукции.Добавить(Выборка.МаркируемаяАлкогольнаяПродукция); // Признак наличия штрихкода PDF417
			ПараметрыАлкогольнойПродукции.Добавить("");                                      // Штрихкод марки в формате PDF417
			ПараметрыАлкогольнойПродукции.Добавить(Выборка.Объем);                           // Объем номенклатуры в литрах
			ПараметрыАлкогольнойПродукции.Добавить(Выборка.Крепость);                        // Процент содержания алкоголя
			ПараметрыАлкогольнойПродукции.Добавить(Выборка.КодВидаАлкогольнойПродукции);     // Код вида алкогольной продукции
		КонецЕсли;
		
		// Дополнительные параметры
		СтрокаПозицииЧека.Вставить("ПараметрыАлкогольнойПродукции", ПараметрыАлкогольнойПродукции);
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		ИтогоСуммаЧека = ИтогоСуммаЧека + СтрокаПозицииЧека.Сумма;
	КонецЦикла;
	
	Если ИтогоСуммаЧека <> ДанныеДокумента.СуммаДокумента И ПозицииЧека.Количество() Тогда
		ПозицииЧека[ПозицииЧека.ВГраница()].Сумма =
			ПозицииЧека[ПозицииЧека.ВГраница()].Сумма + ДанныеДокумента.СуммаДокумента - ИтогоСуммаЧека;
	КонецЕсли;
	
	ПараметрыФискализацииЧека.ПозицииЧека = ПозицииЧека;
	
КонецПроцедуры

Функция ТекстЗапросаОплаченныеПозицииНоменклатуры()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОснованияПлатежа.Основание
	|ИЗ
	|	ОснованияПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС              	КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) ТОГДА
	|			ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата
	|		ИНАЧЕ
	|			ОснованияПлатежа.ПризнакСпособаРасчета
	|	КОНЕЦ КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|	ПО КорректировкаРеализации.ДокументОснование = ТаблицаДокумента.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	(ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|	И КорректировкаРеализации.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	&ОплатаОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	&ОплатаОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	(ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Содержание             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                            КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Содержание             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                            КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	1                                       КАК Количество,
	|	ТаблицаДокумента.СуммаСНДС              КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ИСТИНА                                  КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|	
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	НЕ &ОплатаОтКлиента
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОснованияПлатежа.ПризнакСпособаРасчетаПредоплата КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	&ОплатаОтКлиента
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыДокумента.Кратность / (КурсВалюты.Кратность * КурсВалютыДокумента.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыДокумента.Курс <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Количество             КАК Количество,
	|	ТаблицаНоменклатуры.Сумма * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК Сумма,
	|	ТаблицаНоменклатуры.СтавкаНДС              КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Валюта = &ВалютаДокумента
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДС * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1)
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Сумма * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) 
	|				/ (100 + ВЫРАЗИТЬ(ТаблицаНоменклатуры.СуммаНДС / (ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС) * 100 КАК ЧИСЛО(15, 0)))
	|				* ВЫРАЗИТЬ(ТаблицаНоменклатуры.СуммаНДС / (ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС) * 100 КАК ЧИСЛО(15, 0))
	|	КОНЕЦ КАК ЧИСЛО(15,2)) КАК СуммаНДС,
	|	ТаблицаНоменклатуры.Валюта                 КАК Валюта,
	|	ТаблицаНоменклатуры.ПризнакСпособаРасчета  КАК ПризнакСпособаРасчета,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Номенклатура) = ТИП(Строка) ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Номенклатура.ТипНоменклатуры
	|	КОНЕЦ КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЦенаВключаетНДС ТОГДА
	|			ТаблицаНоменклатуры.Цена
	|		КОГДА ТаблицаНоменклатуры.Количество = 0 ТОГДА
	|			ТаблицаНоменклатуры.Сумма
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Сумма / ТаблицаНоменклатуры.Количество
	|	КОНЕЦ * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК ЧИСЛО(31,2)) КАК Цена,
	|	
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Номенклатура) = ТИП(Строка) ТОГДА
	|			ТаблицаНоменклатуры.Номенклатура
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ЕСТЬNULL(ТаблицаНоменклатуры.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаНаименование,
	|	ТаблицаНоменклатуры.Упаковка               КАК УпаковкаНаименование
	|
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют
	|		ПО ТаблицаНоменклатуры.Валюта = КурсыВалют.Валюта
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОплаченныеПозицииНоменклатуры10()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактуры.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетаФактуры
	|ГДЕ
	|	СчетаФактуры.Ссылка В (&МассивДокументов)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаНаОплатуКлиенту.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ СчетаНаОплатуКлиенту
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетаНаОплатуКлиенту
	|ГДЕ
	|	СчетаНаОплатуКлиенту.Ссылка В (&МассивДокументов)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|		ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаНаОплатуКлиенту КАК СчетаНаОплатуКлиенту
	|		ПО ТаблицаДокумента.Ссылка = СчетаНаОплатуКлиенту.ДокументОснование
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	ИЛИ СчетаНаОплатуКлиенту.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|		ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаНаОплатуКлиенту КАК СчетаНаОплатуКлиенту
	|		ПО ТаблицаДокумента.Ссылка = СчетаНаОплатуКлиенту.ДокументОснование
	|
	|ГДЕ
	|	(ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|		ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|		ИЛИ СчетаНаОплатуКлиенту.ДокументОснование ЕСТЬ НЕ NULL)
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|		ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаНаОплатуКлиенту КАК СчетаНаОплатуКлиенту
	|		ПО ТаблицаДокумента.Ссылка = СчетаНаОплатуКлиенту.ДокументОснование
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|	ИЛИ СчетаНаОплатуКлиенту.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаНаОплатуКлиенту КАК СчетаНаОплатуКлиенту
	|		ПО ТаблицаДокумента.Ссылка = СчетаНаОплатуКлиенту.ДокументОснование
	|
	|ГДЕ
	|	(ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|		ИЛИ СчетаНаОплатуКлиенту.ДокументОснование ЕСТЬ НЕ NULL)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	1                                       КАК Количество,
	|	ТаблицаДокумента.СуммаСНДС              КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ИСТИНА                                  КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|	ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	(ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL)
	|	И &ОплатаОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|	ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	(ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL)
	|	И &ОплатаОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
	|	ПО ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Содержание             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                            КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Содержание             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                            КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактуры КАК СчетаФактуры
	|	ПО
	|		ТаблицаДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	ИЛИ СчетаФактуры.ДокументОснование ЕСТЬ НЕ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ТаблицаТовары.Номенклатура = Штрихкоды.Номенклатура
	|			И ТаблицаТовары.Характеристика = Штрихкоды.Характеристика
	|			И (ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|				ИЛИ &ТекстЗапросаКоэффициентУпаковки1 = 1
	|					И ТаблицаТовары.Номенклатура.ЕдиницаИзмерения = ТаблицаТовары.Упаковка.ЕдиницаИзмерения
	|					И Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка,
	|	МАКСИМУМ(Штрихкоды.ПриоритетШтрихКода) КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ ПриоритетыШтрихКода
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриоритетыШтрихКода КАК ПриоритетыШтрихКода
	|		ПО Штрихкоды.Номенклатура = ПриоритетыШтрихКода.Номенклатура
	|			И Штрихкоды.Характеристика = ПриоритетыШтрихКода.Характеристика
	|			И Штрихкоды.Упаковка = ПриоритетыШтрихКода.Упаковка
	|			И Штрихкоды.ПриоритетШтрихКода = ПриоритетыШтрихКода.ПриоритетШтрихКода
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Характеристика,
	|	Упаковка
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыДокумента.Кратность / (КурсВалюты.Кратность * КурсВалютыДокумента.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыДокумента.Курс <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Количество             КАК Количество,
	|	ТаблицаНоменклатуры.Сумма * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК Сумма,
	|	ТаблицаНоменклатуры.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаНоменклатуры.Валюта                 КАК Валюта,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЦенаВключаетНДС ТОГДА
	|			ТаблицаНоменклатуры.Цена
	|		КОГДА ТаблицаНоменклатуры.Количество = 0 ТОГДА
	|			ТаблицаНоменклатуры.Сумма
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Сумма / ТаблицаНоменклатуры.Количество
	|	КОНЕЦ * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК ЧИСЛО(31,2)) КАК Цена,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Номенклатура) = ТИП(Строка) ТОГДА
	|			ТаблицаНоменклатуры.Номенклатура
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ЕСТЬNULL(ТаблицаНоменклатуры.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаНаименование,
	|	ТаблицаНоменклатуры.Упаковка               КАК УпаковкаНаименование,
	|	
	|	ТаблицаНоменклатуры.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаНоменклатуры.Номенклатура.ВидАлкогольнойПродукции.Маркируемый КАК МаркируемаяАлкогольнаяПродукция,
	|	ТаблицаНоменклатуры.Номенклатура.ОбъемДАЛ * 10 КАК Объем,
	|	ТаблицаНоменклатуры.Номенклатура.Крепость КАК Крепость,
	|	ТаблицаНоменклатуры.Номенклатура.ВидАлкогольнойПродукции.Код КАК КодВидаАлкогольнойПродукции,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод
	|
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют
	|		ПО ТаблицаНоменклатуры.Валюта = КурсыВалют.Валюта
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = ТаблицаНоменклатуры.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика = ТаблицаНоменклатуры.Характеристика
	|			И ШтрихкодыНоменклатуры.Упаковка = ТаблицаНоменклатуры.Упаковка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
