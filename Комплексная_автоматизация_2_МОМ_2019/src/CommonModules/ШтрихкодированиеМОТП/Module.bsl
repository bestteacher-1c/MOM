#Область СлужебныйПрограммныйИнтерфейс

// Формирует структуру вложенных штрихкодов по ссылке на документ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП - Детализация, с которой
//                           требуется сформировать вложенные штрихкоды.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  (См. ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, Детализация, ПараметрыСканирования) Экспорт
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ШтрихкодыУпаковок") = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'У документа %1 отсутствует табличная часть ШтрихкодыУпаковок.'");
		ВызватьИсключение СтрШаблон(ТекстОшибки, ДокументСсылка);
	КонецЕсли;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДанныеШапки);
	КонецЕсли;
	
	ЕстьКолонкаЗначениеШтрихкода = МетаданныеДокумента.ТабличныеЧасти.ШтрихкодыУпаковок.Реквизиты.Найти("ЗначениеШтрихкода") <> Неопределено;
	
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	Если ЕстьКолонкаЗначениеШтрихкода Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки  КАК ШтрихкодУпаковки,
		|	ДокументШтрихкодыУпаковок.ЗначениеШтрихкода КАК Штрихкод
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК ДокументШтрихкодыУпаковок
		|ГДЕ
		|	ДокументШтрихкодыУпаковок.Ссылка = &ДокументСсылка";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки                                   КАК ШтрихкодУпаковки,
		|	ЕСТЬNULL(ДокументШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода, """") КАК Штрихкод
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК ДокументШтрихкодыУпаковок
		|ГДЕ
		|	ДокументШтрихкодыУпаковок.Ссылка = &ДокументСсылка";
	КонецЕсли;
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяДокумента);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить();
	ИзвестныеУпаковки   = Новый Массив;
	НеизвестныеУпаковки = Новый Массив;
	
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		
		Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
			ИзвестныеУпаковки.Добавить(Строка.ШтрихкодУпаковки);
		Иначе
			НеизвестныеУпаковки.Добавить(Новый Структура("Штрихкод, Количество", Строка.Штрихкод, 1));
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	Если ИзвестныеУпаковки.Количество() > 0 Тогда
		
		ВложенныеШтрихкодыИзвестныхУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(
			ИзвестныеУпаковки, ПараметрыСканирования);
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок,, ПараметрыСканирования);
		ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымМОТП();
		
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			Результат.ЕстьОшибки  = Истина;
			Результат.ТекстОшибки = ДанныеПоШтрихкодам.ТекстОшибки;
			Результат.ТребуетсяОбновлениеКлючаСессии = ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
		Иначе
			Результат.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если НеизвестныеУпаковки.Количество() > 0 Тогда
		
		Возврат ВложенныеШтрихкодыПоДаннымМОТП(НеизвестныеУпаковки, ПараметрыСканирования);
		
	КонецЕсли;
	
	ПустаяКоллекция = ИнициализацияВложенныхШтрихкодов();
	Результат       = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымМОТП();
	Результат.ВложенныеШтрихкоды = ПустаяКоллекция;
	
	Возврат Результат;
	
КонецФункции

// Формирует данные по неизвестным кодам табачных пачек и заполняет данные по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	Если ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		ЗаполнитьДанныеНеизвестныхТабачныхПачекСЗапросомСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Иначе
		ЗаполнитьДанныеНеизвестныхТабачныхПачекБезЗапросаСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет базовую таблицу "ДанныеКодовМаркировки" необходимыми колонками для табачной продукции.
// 
// Параметры:
//  ДанныеКодовМаркировки - ТаблицаЗначений - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки):
//   * Владелец - ОпределяемыйТип.Организация - Владелец кода маркировки.
//   * ИННВладельца - Строка - ИНН владельца кода маркировки.
//   * Статус - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Текущий статус кода маркировки.
//   * ПредставлениеСтатуса - Строка - Представление текущего статуса кода маркировки.
//   * КоличествоПачек - Число - Количество пачек.
//   * КоличествоБлоков - Число - Количество блоков.
//   * МРЦ - Число - Максимальная розничная цена.
//   * ТребуетсяВыборСерии - Булево - Истина, если требуется указать серию
Процедура ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеКодовМаркировки) Экспорт
	
	ОбазательныеКолонки = Новый Структура;
	ОбазательныеКолонки.Вставить("Владелец",                  Неопределено);
	ОбазательныеКолонки.Вставить("ИННВладельца",              Новый ОписаниеТипов("Строка"));
	ОбазательныеКолонки.Вставить("Статус",                    Неопределено);
	ОбазательныеКолонки.Вставить("ПредставлениеСтатуса",      Новый ОписаниеТипов("Строка"));
	ОбазательныеКолонки.Вставить("КоличествоПачек",           Новый ОписаниеТипов("Число"));
	ОбазательныеКолонки.Вставить("КоличествоБлоков",          Новый ОписаниеТипов("Число"));
	ОбазательныеКолонки.Вставить("МРЦ",                       Новый ОписаниеТипов("Число"));
	ОбазательныеКолонки.Вставить("GTIN",                      Новый ОписаниеТипов("Строка"));
	ОбазательныеКолонки.Вставить("ТребуетсяВыборСерии",       Новый ОписаниеТипов("Булево"));
	
	Для Каждого КлючЗначение Из ОбазательныеКолонки Цикл
		
		ИмяКолонки    = КлючЗначение.Ключ;
		ОписаниеТипов = КлючЗначение.Значение;
		Если ДанныеКодовМаркировки.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			ДанныеКодовМаркировки.Колонки.Добавить(ИмяКолонки, ОписаниеТипов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку выбора пользователем уточняющей информации.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой требуется обработка штрихкодов.
//  ИмяЭлементаВыбора - Строка - Идентификатор операции.
//  РезультатВыбора - Структура - Результат выбора данных пользователем.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - закэшированные данные формы.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВыбор(Форма, ИмяЭлементаВыбора, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт

	Если ИмяЭлементаВыбора = "Номенклатура" Тогда
		РезультатДобавления = ОбработатьВыборНоменклатуры(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	КонецЕсли;

	Возврат РезультатДобавления;

КонецФункции

// Выполняет поиск ошибок в данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	ПравилаПроверкиНаОшибки = ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам);
	ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
	
КонецПроцедуры

// Приводит дерево упаковок и таблицу маркированные товары к детализации, которая указана в параметрах сканирования.
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	Детализация = ПараметрыСканирования.Детализация;
	
	Если Не ЗначениеЗаполнено(Детализация) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок       = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары  = ВложенныеШтрихкоды.МаркированныеТовары;
	МассивУдаляемыхСтрок = Новый Массив;
	
	ПравилаДетализацииДереваУпаковок = ПравилаДетализацииДереваУпаковок();
	ПравилоДетализации = ПравилаДетализацииДереваУпаковок[Детализация];
	ОпределитьУдаляемыеСтрокиДереваПоДетализации(ДеревоУпаковок.Строки, ПравилоДетализации, МассивУдаляемыхСтрок);
	УдалитьСтрокиДереваУпаковокПоДетализации(ДеревоУпаковок, МассивУдаляемыхСтрок, МаркированныеТовары);
	
	ВложенныеШтрихкоды.МаркированныеТовары = МаркированныеТовары;
	ВложенныеШтрихкоды.ДеревоУпаковок      = ДеревоУпаковок;
	
КонецПроцедуры

// Дополнение полученных данных штрихкодов данными, которые актуальны для табачной продукции.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДеревоУпаковок      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(ДеревоУпаковок.Строки, МаркированныеТовары);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Иначе
		ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет представления статусов, владельцев и прочую дополнительную информацию
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	МассивИНН = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.ВыгрузитьКолонку("ИННВладельца");
	МассивИНН = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИНН);
	Если МассивИНН.Количество() > 0 Тогда
		
		КонтрагентыПоИНН = ИнтеграцияИСМП.КонтрагентыПоСпискуИНН(МассивИНН);
		ОрганизацииПоИНН = ИнтеграцияИСМП.ОрганизацииПоСпискуИНН(МассивИНН);
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Владелец)
				И ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				СтрокаДанных.Владелец = КонтрагентыПоИНН.Получить(СтрокаДанных.ИННВладельца);
				Если Не ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
					СтрокаДанных.Владелец = ОрганизацииПоИНН.Получить(СтрокаДанных.ИННВладельца);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки перед формированием данных по штрихкодам. 
// 
// Параметры:
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - В случае удачного прохождения проверок - возвращает пустое соответствие,
//    В случае выявления ошибок или необходимого уточнения информации - возвращает заполненное соответствие с указанием причины.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеКодовМаркировки, ПараметрыСканирования) Экспорт
	
	РезультатыПроверок = Новый Соответствие;
	
	ВидПродукцииТабачная     = Перечисления.ВидыПродукцииИС.Табак;
	ТребуетсяАвторизацияМОТП = ТребуетсяАвторизацияПользователя(ПараметрыСканирования);
	
	Если Не ТребуетсяАвторизацияМОТП Тогда
		Возврат РезультатыПроверок;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 1 // Проверка на упаковку с 1 видом продукции.
			И СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(ВидПродукцииТабачная) <> Неопределено Тогда
			РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
			РезультатОбработкиШтрихкода.ВидыПродукции.Очистить();
			РезультатОбработкиШтрихкода.ВидыПродукции.Добавить(ВидПродукцииТабачная);
			РезультатОбработкиШтрихкода.ТребуетсяАвторизацияМОТП = Истина;
			РезультатыПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатОбработкиШтрихкода);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроверок;
	
КонецФункции

// Формирует структуру, описывающую результат обработки кода маркировки.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода)
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище которой
//  надо поместить данные.
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка штрихкода.
// Возвращаемое значение:
//  Структура - содержит в себе информацию по результату обработки штрихкодов табачной продукции.
Функция РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор, Форма = Неопределено) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Если ДанныеШтрихкода.ТребуетсяВыборСерии Тогда
		
		РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
		
	КонецЕсли;
	
	Если Не РезультатОбработки.ТребуетсяУточнениеДанных И Форма <> Неопределено Тогда
		
		РезультатОбработки = ШтрихкодированиеИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращает результат обработки штрихкода с описанием ошибки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИСМП.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатДобавления.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатДобавления, ДанныеШтрихкода);
	РезультатДобавления.ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
	
	Возврат РезультатДобавления;
	
КонецФункции

// Инициализирует структуру, которая описывает результат обработки штрихкодов. Состоит из базовых свойств
// (См.ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода), дополненных специфичными свойствами
// (См.ШтрихкодированиеМОТП.ДополнитьСвойстваРезультатаОбработкиШтрихкода).
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода = Неопределено) Экспорт

	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода();
	ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);

	Возврат РезультатОбработкиШтрихкода;

КонецФункции

// Дополняет базовую коллекцию РезультатОбработкиШтрихкода специфичными данными табачной продукции.
//
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
Процедура ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияМОТП", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораСерии",     Новый Структура);

КонецПроцедуры

// Реализует обработку действий пользователя. Возвращает результат обработки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Действие - Строка - Идентификатор действия.
//  Параметры - (См. ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт

	Если Действие = "ОбработатьВыборСерии" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ШтрихкодированиеИСМПСлужебный.ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру "ВложенныеШтрихкоды" по коллекции кодов марок. Для марок табачных пачек так же формируется дерево
// упаковок. Неизвестные марки будут созданы в базе.
// 
// Параметры:
//  ДанныеШтрихкодовСписок - Массив из Структура - Структура("Штрихкод, Количество").
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеМОТП.ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымМОТП);
Функция ВложенныеШтрихкоды(ДанныеШтрихкодовСписок, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП Тогда
		
		Возврат ВложенныеШтрихкодыПоДаннымМОТП(ДанныеШтрихкодовСписок, ПараметрыСканирования);
		
	Иначе
		
		Результат = ИнициализацияРезультатаФормированияВложенныхШтрихкодов();
		
		Для Каждого СтрокаШтрихкода Из ДанныеШтрихкодовСписок Цикл
			
			ДанныеРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(СтрокаШтрихкода.Штрихкод, Перечисления.ВидыПродукцииИС.Табак);
			Если ДанныеРазбора.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
				И ДанныеРазбора.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Групповая Тогда
				
				Результат.ЕстьОшибки  = Истина;
				Результат.ТекстОшибки = ТекстОшибкиЗапрещеноЗапрашиватьДанныеВМОТП();
				
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
		ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеШтрихкодовСписок, ПараметрыСканирования);
		ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		ЗаполнитьДанныеНеизвестныхТабачныхПачекБезЗапросаСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок);
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары);
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			НоваяСтрокаДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДанных);
			
			НоваяСтрокаТаблицы = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаДанных);
			НоваяСтрокаТаблицы.СтрокаДерева = НоваяСтрокаДерева;
			
		КонецЦикла;
		
		Результат.ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Выполняет запрос в МОТП, на основании которого формирует "ВложенныеШтрихкоды".
//
// Параметры:
//  МассивСтрокТаблицы - Массив - Список строк таблицы "ДанныеКодовМаркировки" См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
// * ТекстОшибки - Строка - Текст ошибки получения данных из МОТП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка при попытке получения данных из МОТП.
// * ВложенныеШтрихкоды - Неопределено, Структура - Включает в себя дерево упаковок и маркированные товары.
Функция ДеревоУпаковокПоДаннымМОТП(МассивСтрокТаблицы, ПараметрыСканирования) Экспорт
	
	Детализация = ПараметрыСканирования.Детализация;
	
	ПравилаДетализацииДереваУпаковок = ПравилаДетализацииДереваУпаковок();
	ПравилоДетализации = ПравилаДетализацииДереваУпаковок[Детализация];
	
	Если ЗначениеЗаполнено(ПравилоДетализации) И ПравилоДетализации.РазрешеныПачки Тогда
		Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная;
	КонецЕсли;
	
	РезультатПолученияДерева = ИнтерфейсМОТП.ДеревоУпаковок(МассивСтрокТаблицы, Детализация, ПараметрыСканирования.ВариантПолученияМРЦ);
	Если РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии Тогда
		РезультатПолученияДерева.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МОТП.
		                                                  |По причине: Требуется обновление ключа сессии.'");
	КонецЕсли;
	
	Возврат РезультатПолученияДерева;
	
КонецФункции

// Получает данные из государтсвенных информационных систем и заполняет данные для упаковок, о которых нет никакой 
// информации в справочнике Штрихкоды упаковок.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	МассивСтрокТаблицы = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки)
			И Не СтрокаДанных.Идентифицирован
			И ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(СтрокаДанных.ВидыПродукцииКодаМаркировки)  Тогда
			МассивСтрокТаблицы.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = ТекстОшибкиЗапрещеноЗапрашиватьДанныеВМОТП();
		
		Возврат;
	КонецЕсли;
	
	Результат = ДеревоУпаковокПоДаннымМОТП(МассивСтрокТаблицы, ПараметрыСканирования);
	Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
		
		Возврат;
	КонецЕсли;
	
	ОбработатьДеревоПолученноеИзМОТП(Результат, ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ДанныеПоШтрихкодам.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табак);
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоШтрихкодам.ВидыПродукции);
	
КонецПроцедуры

// Заполняет результат обработки штрихкодов данными, необходимыми для открытия окна авторизации.
// 
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработкиШтрихкода, ПараметрыСканирования) Экспорт
	
	ВидПродукцииТабак = Перечисления.ВидыПродукцииИС.Табак;
	Если РезультатОбработкиШтрихкода.ВидыПродукции.Найти(ВидПродукцииТабак) = Неопределено Тогда
		РезультатОбработкиШтрихкода.ВидыПродукции.Добавить(ВидПродукцииТабак);
	КонецЕсли;
	РезультатОбработкиШтрихкода.ТребуетсяАвторизацияМОТП = Истина;
	
КонецПроцедуры

// Формирует вложенные штрихкоды по данным, полученным в системе МОТП.
// 
// Параметры:
//  ДанныеШтрихкодовСписок - Массив из Структура - Описание:
// * Штрихкод - Строка - Код маркировки.
// * Количество - Число - Количество.
//  ПараметрыСканирования - Структура - Описание:
// Возвращаемое значение:
//  Структура - (См. ИнициализацияФормированияПолученияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыПоДаннымМОТП(ДанныеШтрихкодовСписок, ПараметрыСканирования)
	
	РезультатФормированияВложенныхШтрихкодов = ИнициализацияРезультатаФормированияВложенныхШтрихкодов();
	
	РезультатФормированияВложенныхШтрихкодов.Вставить("ВложенныеШтрихкоды",             Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ЕстьОшибки",                     Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТекстОшибки",                    "");
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеШтрихкодовСписок, ПараметрыСканирования);
	
	РезультатПолученияДерева = ДеревоУпаковокПоДаннымМОТП(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	РезультатФормированияВложенныхШтрихкодов.ТекстОшибки                    = РезультатПолученияДерева.ТекстОшибки;
	РезультатФормированияВложенныхШтрихкодов.ТребуетсяОбновлениеКлючаСессии = РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии;
	РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки                     = Не ПустаяСтрока(РезультатПолученияДерева.ТекстОшибки);
	
	Если РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки Тогда
		Возврат РезультатФормированияВложенныхШтрихкодов;
	КонецЕсли;
	
	ОбработатьДеревоПолученноеИзМОТП(РезультатПолученияДерева, ДанныеПоШтрихкодам, ПараметрыСканирования);
	РезультатФормированияВложенныхШтрихкодов.ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	
	Возврат РезультатФормированияВложенныхШтрихкодов;
	
КонецФункции

// Инициализирует результат формирования вложенных штрихкодов по кодам маркировки МОТП.
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ВложенныеШтрихкоды - Структура - Описание:
// * ЕстьОшибки - Булево - Истина, если есть ошибки.
// * ТекстОшибки - Строка - Описание ошибки.
// * ТребуетсяОбновлениеКлючаСессии - Булево - Истина, если требуется авторизация.
Функция ИнициализацияРезультатаФормированияВложенныхШтрихкодов()
	
	РезультатФормированияВложенныхШтрихкодов = Новый Структура;
	
	РезультатФормированияВложенныхШтрихкодов.Вставить("ВложенныеШтрихкоды",             Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ЕстьОшибки",                     Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТекстОшибки",                    "");
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	Возврат РезультатФормированияВложенныхШтрихкодов;
	
КонецФункции

// Инициализирует структуру правил для проверки на ошибки данных по кодам маркировки.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Структура - Описание:
// * КонтрольВладельца - Массив - коллекция, куда требуется поместить строки с ошибками при контроле владельца.
// * КонтрольСоставаУпаковокИСМП - Массив - коллекция, куда требуется поместить строки с ошибками при контроле состава упаковок.
// * КонтрольСпособаВводаВОборот - Массив - коллекция, куда требуется поместить строки с ошибками при контроле способа ввода в оборот.
// * КонтрольСерий - Массив - коллекция, куда требуется поместить строки с ошибками при контроле серий.
// * КонтрольСтатусов - Массив - коллекция, куда требуется поместить строки с ошибками при контроле допустимых статусов.
Функция ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам, ПроверенныеШтрихкоды = Неопределено)
	
	ПравилаПроверкиНаОшибки = Новый Структура;
	ПравилаПроверкиНаОшибки.Вставить("ПроверенныеШтрихкоды", Новый Соответствие);
	
	Если ПараметрыСканирования.ДопустимыеСтатусыМОТП.Количество() > 0
		И ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		
		ПравилоКонтроляСтатусов = Новый Структура;
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусыМОТП",         ПараметрыСканирования.ДопустимыеСтатусыМОТП);
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусыУпаковокМОТП", ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП);
		ПравилоКонтроляСтатусов.Вставить("СтрокиСОшибками",               Новый Массив);
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСтатусов", ПравилоКонтроляСтатусов);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСерий", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольПустыхУпаковок Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПустыхБлоков", Новый Массив);
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольОстатков", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольСоставаУпаковокМОТП
		И ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса <> Неопределено Тогда
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСоставаУпаковокМОТП", Новый Массив);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.Владелец)
		И ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольВладельца", Новый Массив);
	КонецЕсли;
	
	Возврат ПравилаПроверкиНаОшибки;
	
КонецФункции

// Дополняет данные по штрихкодам информацией по табачным пачкам без запроса сведений из МОТП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхТабачныхПачекБезЗапросаСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	НоменклатураПоДаннымУПД = ДанныеМаркируемойНоменклатурыПоДаннымУПД(ПараметрыСканирования.СсылкаНаОбъект);
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				
				ДанныеУПДПоШтрихкоду = НоменклатураПоДаннымУПД.Получить(СтрокаТаблицы.Штрихкод);
				Если ДанныеУПДПоШтрихкоду = Неопределено Тогда
					
					СтрокаТаблицы.ТребуетсяСопоставление = Истина;
					Продолжить;
					
				Иначе
					
					СтрокаТаблицы.Номенклатура   = ДанныеУПДПоШтрихкоду.Номенклатура;
					СтрокаТаблицы.Характеристика = ДанныеУПДПоШтрихкоду.Характеристика;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТаблицы.КоличествоПачек  = 1;
			СтрокаТаблицы.ШтрихкодУпаковки = ШтрихкодированиеИС.СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаТаблицы, ПараметрыСканирования);
			СтрокаТаблицы.Идентифицирован  = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Запрашивает сведения из МОТП по кодам марировки табачных пачек. Дополняет данные по штрихкодам полученными сведениями.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхТабачныхПачекСЗапросомСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	МассивСтрокТаблицы = Новый Массив;
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не СтрокаТаблицы.Идентифицирован
			И СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
			И Не СтрокаТаблицы.ЭтоШтрихкодНоменклатуры
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			МассивСтрокТаблицы.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ДеревоУпаковокПоДаннымМОТП(МассивСтрокТаблицы, ПараметрыСканирования);
	
	Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
		
		Возврат;
	КонецЕсли;
	
	ОбработатьДеревоПолученноеИзМОТП(Результат, ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ДанныеПоШтрихкодам.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табак);
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоШтрихкодам.ВидыПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает текст ошибки о запрещении запрашивать данные по неизвестным кодам в МОТП.
// 
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиЗапрещеноЗапрашиватьДанныеВМОТП()
	
	Возврат НСтр("ru = 'Запрещено запрашивать данные по неизвестным штрихкодам в МОТП.'");
	
КонецФункции

// Дополняет данные по штрихкодам спецификой, исключая информацию МОТП.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	СтрокиТаблицыДанныхДляПолученияСпецифики = СтрокиТаблицыДанныхДляПолученияСпецифики(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	
	Если СтрокиТаблицыДанныхДляПолученияСпецифики.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	ДеревоУпаковок = Неопределено;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ВложенныеШтрихкоды) Тогда
		
		ДеревоУпаковок      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары);
		НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		Для Каждого Строка Из МаркированныеТовары Цикл
			Строка.КоличествоПачек = Строка.СтрокаДерева.КоличествоПачек;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанныхДляПолученияСпецифики Цикл
		
		Если ДеревоУпаковок <> Неопределено Тогда
			ДанныеСтроки = ДеревоУпаковок.Строки.Найти(СтрокаДанных.Штрихкод, "Штрихкод");
		Иначе
			ДанныеСтроки = Неопределено;
		КонецЕсли;
			
		Если ДанныеСтроки <> Неопределено Тогда
			СтрокаДанных.КоличествоПачек  = ДанныеСтроки.КоличествоПачек;
			СтрокаДанных.КоличествоБлоков = ДанныеСтроки.КоличествоБлоков;
		Иначе
			СтрокаДанных.КоличествоПачек  = 1;
			СтрокаДанных.КоличествоБлоков = 0;
			Если СтрокаДанных.СоставКодаМаркировки <> Неопределено Тогда
				СтрокаДанных.СоставКодаМаркировки.Свойство("МРЦ", СтрокаДанных.МРЦ);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДанных.СоставКодаМаркировки <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных.СоставКодаМаркировки, "GTIN") Тогда
			СтрокаДанных.СоставКодаМаркировки.Свойство("GTIN", СтрокаДанных.GTIN);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получение специфичных данных, используемых только для табачной продукции
// 
// Параметры:
//  ШтрихкодыДляПолученияСпецифики - Массив - Коды маркировок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
//   * СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из МОТП.
//   * ЕстьОшибки - Булево - Истина, если при попытке получения данных из МОТП возникла ошибка.
//   * ТекстОшибки - Строка - Описание ошибки.
Функция СпецификаДляДополненияДанныхПоШтрихкодам(СтрокиТаблицыДанныхДляПолученияСпецифики, ПараметрыСканирования)
	
	Результат = Новый Структура;
	Результат.Вставить("СпецификаШтрихкодов",            Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ДанныеПоШтрихкодамМОТП = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
		СтрокиТаблицыДанныхДляПолученияСпецифики, Неопределено, ПараметрыСканирования.Организация);
	
	Если ДанныеПоШтрихкодамМОТП.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МП.
		                                   |По причине: Требуется обновление ключа сессии.'");
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат Результат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеПоШтрихкодамМОТП.ТекстОшибки) Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить данные из ИС МОТП.
			           |По причине: %1'"), ДанныеПоШтрихкодамМОТП.ТекстОшибки);
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.СпецификаШтрихкодов = ДанныеПоШтрихкодамМОТП.СтатусыКодовМаркировки;
	
	Возврат Результат;
	
КонецФункции

// Удаляет строки дерева упаковок по массиву удаляемых строк. Удаление происходит путем копирования структуры дерева и
// его заполнения, исключая удаляемые строки.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
//  МассивУдаляемыхСтрок - Массив - Строки, дерева упаковок, которые нужно удалить.
//  МаркированныеТовары - ТаблицаЗначений - Таблица, которая включает только конечную маркируемая продукцию, исключая
//  упаковки. Исключение может составлять упаковка - табачный блок.
Процедура УдалитьСтрокиДереваУпаковокПоДетализации(ДеревоУпаковок, МассивУдаляемыхСтрок, МаркированныеТовары)
	
	Если МассивУдаляемыхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковокПриемник = Новый ДеревоЗначений;
	Для Каждого Колонка ИЗ ДеревоУпаковок.Колонки Цикл
		ДеревоУпаковокПриемник.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	МаркированныеТоварыПриемник = МаркированныеТовары.СкопироватьКолонки();
	СоответствиеСтрокИсточникаПриемника = Новый Соответствие;
	СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
		ДеревоУпаковокПриемник.Строки, ДеревоУпаковок.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, Неопределено);
	
	Для Каждого Строка Из МаркированныеТовары Цикл
		
		СсылкаНаСтрокуДерева = СоответствиеСтрокИсточникаПриемника.Получить(Строка.СтрокаДерева);
		Если СсылкаНаСтрокуДерева <> Неопределено Тогда
			НоваяСтрокаПриемник = МаркированныеТоварыПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, Строка);
			НоваяСтрокаПриемник.СтрокаДерева = СсылкаНаСтрокуДерева;
			НоваяСтрокаПриемник.УпаковкаВерхнегоУровня = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоУпаковок      = ДеревоУпаковокПриемник;
	МаркированныеТовары = МаркированныеТоварыПриемник;
	
КонецПроцедуры

// Производит копирование значений строк дерева источника в строки дерева приемника, исключая строки, входящие в
// массив удаляемых строк.
//
// Параметры:
//  СтрокиПриемника - КоллекцияСтрокДереваЗначений - Строки дерева значений приемника.
//  СтрокиИсточника - КоллекцияСтрокДереваЗначений - Строки дерева значений источника.
//  МассивУдаляемыхСтрок - Массив из СтрокаДереваЗначений - Строки дерева, которые должны быть удалены.
//  СоответствиеСтрокИсточникаПриемника - Соответствие - Строки дерева значений источника.
//  ВерхнийУровень - СтрокаДереваЗначений - Верхняя строка иерархии.
Процедура СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(СтрокиПриемника, СтрокиИсточника, МассивУдаляемыхСтрок,
														СоответствиеСтрокИсточникаПриемника, ВерхнийУровень)
	
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		Если МассивУдаляемыхСтрок.Найти(СтрокаИсточника) = Неопределено Тогда
			СтрокаПриемника = СтрокиПриемника.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
			СоответствиеСтрокИсточникаПриемника.Вставить(СтрокаИсточника, СтрокаПриемника);
			
			Если Не ЗначениеЗаполнено(ВерхнийУровень) Тогда
				ВерхнийУровень = СтрокаИсточника;
			КонецЕсли;
			
			СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
				СтрокаПриемника.Строки, СтрокаИсточника.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, ВерхнийУровень);
				
		Иначе
			
			СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
				СтрокиПриемника, СтрокаИсточника.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, ВерхнийУровень);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет строки дерева, которые необходимо удалить с соответствие с детализацией.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПравилоДетализации - Структура - правило, в соответствие которому требуется удалить строки.
//  МассивУдаляемыхСтрок - Массив - Коллекция строк дерева, которые должны быть удалены.
Процедура ОпределитьУдаляемыеСтрокиДереваПоДетализации(СтрокиДерева, ПравилоДетализации, МассивУдаляемыхСтрок)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			Если ПравилоДетализации.РазрешеныКоробки И Не ПравилоДетализации.РазрешеныБлоки Тогда
				СтрокаДерева.Строки.Очистить();
				Продолжить;
			ИначеЕсли Не ПравилоДетализации.РазрешеныКоробки Тогда 
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			Если ПравилоДетализации.РазрешеныБлоки И Не ПравилоДетализации.РазрешеныПачки Тогда
				СтрокаДерева.Строки.Очистить();
				Продолжить;
			ИначеЕсли Не ПравилоДетализации.РазрешеныБлоки Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
		ОпределитьУдаляемыеСтрокиДереваПоДетализации(СтрокаДерева.Строки, ПравилоДетализации, МассивУдаляемыхСтрок);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует правила детализации.
//
// Параметры:
// Возвращаемое значение:
//  Соответствие - Ключ - ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП, значение - свойство
//      правила. (См. ШтрихкодированиеМОТП.СвойствоПравилаДетализации).
Функция ПравилаДетализацииДереваУпаковок()
	
	ПравилаДетализации = Новый Соответствие;
	
	ДетализацияБлокиСПачками = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками;
	ДетализацияКоробки       = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Коробки;
	ДетализацияКоробкиИБлоки = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками;
	ДетализацияПолная        = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная;
	ДетализацияПачки         = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки;
	
	ПравилаДетализации.Вставить(ДетализацияПолная,        СвойствоПравилаДетализации(Истина, Истина, Истина));
	ПравилаДетализации.Вставить(ДетализацияКоробки,       СвойствоПравилаДетализации(Истина, Ложь,   Ложь));
	ПравилаДетализации.Вставить(ДетализацияКоробкиИБлоки, СвойствоПравилаДетализации(Истина, Истина, Ложь));
	ПравилаДетализации.Вставить(ДетализацияБлокиСПачками, СвойствоПравилаДетализации(Ложь,   Истина, Истина));
	ПравилаДетализации.Вставить(ДетализацияПачки,         СвойствоПравилаДетализации(Ложь,   Ложь,   Истина));
	
	Возврат ПравилаДетализации;
	
КонецФункции

// Формирует свойство правила детализации.
//
// Параметры:
//  РазрешеныКоробки - Булево - Истина, в дереве разрешено показывать упаковки.
//  РазрешеныБлоки - Булево - Истина, в дереве разрешено показывать табачные блоки.
//  РазрешеныПачки - Булево - Истина, в дереве разрешено показывать пачки.
// Возвращаемое значение:
//  Структура - Описание:
// * РазрешеныКоробки - Булево - Истина, в дереве разрешено показывать упаковки.
// * РазрешеныБлоки - Булево - Истина, в дереве разрешено показывать табачные блоки.
// * РазрешеныПачки - Булево - Истина, в дереве разрешено показывать пачки.
Функция СвойствоПравилаДетализации(РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки)
	
	Возврат Новый Структура("РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки",
							РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки);
	
КонецФункции

// Выполняет дополнение дерева упаковок и маркированных товаров, информация по которым была получена из МОТП.
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Описание:
// * ШтрихкодыПродукцииДляСопоставления - Массив - коллекция штрихкодов EAN, которые необходимо идентифицировать.
// * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции, присутствующие в дереве упаковок.
// * МаркированныеТовары - ТаблицаЗначений - Таблица с маркированной продукцией.
// * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ТаблицаEAN - Неопределено, ТаблицаЗначений - Описание:
// * GTIN - Строка - штрихкод GTIN.
// * МРЦ - Число - максимальная розничная цена.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ОбработатьДеревоПолученноеИзМОТП(Результат, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ТаблицаGTIN = Результат.GTIN;
	ТаблицаGTIN.Свернуть("GTIN");
	
	ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	ВложенныеШтрихкоды.ДеревоУпаковок = Результат.ДеревоУпаковок;
	НормализоватьДанныеДереваУпаковок(ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
	НормализоватьДанныеТаблицыМаркированныеТовары(ВложенныеШтрихкоды.ДеревоУпаковок, ВложенныеШтрихкоды.МаркированныеТовары);
	
	ДобавленныеСтроки = Новый Массив;
	ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ВложенныеШтрихкоды.ДеревоУпаковок,
		ДобавленныеСтроки, ПараметрыСканирования);
	// Если форма проверки и подбора загружается по данным сервиса из
	// документа приемки или поступления товаров - то нужно поискать сопоставленные товары в штрихкодах упаковок
	ШтрихкодированиеИС.ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ДобавленныеСтроки, ПараметрыСканирования);
	ШтрихкодированиеИС.ЗаполнитьСведенияПоШтрихкодамEAN(ДобавленныеСтроки, ПараметрыСканирования);
	
	ТребуетсяСопоставление       = Ложь;
	МассивНеизвестныхEAN         = Новый Массив;
	СтрокиДанныхДляСопоставления = Новый Массив;
	Для Каждого СтрокаДанных Из ДобавленныеСтроки Цикл
		Если СтрокаДанных.ТребуетсяСопоставление Тогда
			ТребуетсяСопоставление = Истина;
			МассивНеизвестныхEAN.Добавить(СтрокаДанных.EAN);
			СтрокиДанныхДляСопоставления.Добавить(СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	МассивНеизвестныхEAN = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНеизвестныхEAN);
	
	Если ТребуетсяСопоставление И ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяСопоставление Тогда
		
		Если ЗначениеЗаполнено(ПараметрыСканирования.СсылкаНаОбъект) Тогда
			
			ШтрихкодированиеИСМПСлужебный.СопоставитьКодыМаркировкиНоменклатуреПоДаннымУПД(СтрокиДанныхДляСопоставления, ПараметрыСканирования);
			
		Иначе
			
			СведенияМОТППоШтрихкодамEAN = ИнформацияНеизвестныхEANПоДаннымМОТП(МассивНеизвестныхEAN);
			
			Для Каждого СтрокаДанных Из СтрокиДанныхДляСопоставления Цикл
				
				СведенияПоEAN = СведенияМОТППоШтрихкодамEAN.Получить(СтрокаДанных.EAN);
				Если СведенияПоEAN = Неопределено Тогда
					СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
				Иначе
					СтрокаДанных.ПредставлениеНоменклатуры = СведенияПоEAN.Наименование;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	СоздатьЭлементыШтрихкодовУпаковокПоДереву(ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
	
	Для Каждого МаркированныйТовар Из ВложенныеШтрихкоды.МаркированныеТовары Цикл
		Если МаркированныйТовар.СтрокаДерева <> Неопределено Тогда
			МаркированныйТовар.ШтрихкодУпаковки = МаркированныйТовар.СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеКодаМаркировки Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если ДанныеКодаМаркировки.СтрокаДерева <> Неопределено Тогда
			ДанныеКодаМаркировки.ШтрихкодУпаковки = ДанныеКодаМаркировки.СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
	КонецЦикла;
	
	ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, ВложенныеШтрихкоды);
	
КонецПроцедуры

// Формирует дерево упаковок на основании данных полученных из МОТП.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СоздатьЭлементыШтрихкодовУпаковокПоДереву(ДеревоУпаковок, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоУпаковок.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен
			Или СтрокаДерева.КоличествоПачек = 0 Тогда
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ДеревоУпаковок.Колонки.Добавить("СтатусПроверки");
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненнойПродукции");
	
	ТаблицаШтрихкодовВерхнегоУровня = Новый ТаблицаЗначений;
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("ШтрихкодУпаковки");
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("Штрихкод");
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ШтрихкодыУпаковокТоваров.РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(
			ДеревоУпаковок, ТаблицаШтрихкодовВерхнегоУровня,
			Неопределено, Неопределено,
			Перечисления.ВидыПродукцииИС.Табак);
		
		ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Создание элементов справочника штрихкоды упаковок.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет во всех строках дерева упаковку верхнего уровня.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - верхний уровень дерева.
Процедура ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьУпаковкуВерхнегоУровняДерева(СтрокаДерева, УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует представление для перечисления СтатусыКодовМаркировкиМОТП.
//
// Параметры:
// Возвращаемое значение:
//  Соответствие - Ключ - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, значение - представление статуса.
Функция ПредставленияСтатусов()
	
	ПредставленияСтатусов = Новый Соответствие();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыКодовМаркировкиМОТП.Ссылка                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыКодовМаркировкиМОТП.Ссылка) КАК ПредставлениеСтатуса
	|ИЗ
	|	Перечисление.СтатусыКодовМаркировкиМОТП КАК СтатусыКодовМаркировкиМОТП");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставленияСтатусов.Вставить(Выборка.Статус, Выборка.ПредставлениеСтатуса);
	КонецЦикла;
	
	Возврат ПредставленияСтатусов;
	
КонецФункции

// Получает информацию по коллекции EAN из сервиса МОТП.
//
// Параметры:
//  ШтрихкодыEANДляСопоставления - Массив - Штрихкоды EAN.
// Возвращаемое значение:
//  (См. ИнтерфейсМОТП.ДанныеПродукцииПоШтрихкодуEAN).
Функция ИнформацияНеизвестныхEANПоДаннымМОТП(ШтрихкодыEANДляСопоставления)
	
	ИнформацияНеизвестныхEAN = Новый Соответствие;
	Если ШтрихкодыEANДляСопоставления.Количество() = 0 Тогда
		Возврат ИнформацияНеизвестныхEAN;
	КонецЕсли;
	
	ДанныеМОТП = ИнтерфейсМОТП.ДанныеПродукцииПоШтрихкодуEAN(ШтрихкодыEANДляСопоставления);
	
	Если ДанныеМОТП.ТребуетсяОбновлениеКлючаСессии Тогда
		ВызватьИсключение НСтр("ru = 'Требуется обновление ключа сессии.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеМОТП.ТекстОшибки) Тогда
		ВызватьИсключение ДанныеМОТП.ТекстОшибки;
	КонецЕсли;
	
	Возврат ДанныеМОТП.ДанныеПродукцииПоШтрихкодуEAN;
	
КонецФункции

//Проверяет необходимость авторизации пользователя на сервере МОТП.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если пользователю требуется пройти авторизацию.
Функция ТребуетсяАвторизацияПользователя(ПараметрыСканирования)
	
	ТребуетсяАвторизация = Ложь;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыМОТП
		Или ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП Тогда
		
		Организация = ПараметрыСканирования.Организация;
		Если ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
			ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация)) Тогда
			ТребуетсяАвторизация = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТребуетсяАвторизация;
	
КонецФункции

#Область ПроверкаНаОшибки

// Выполняет проверку на ошибки по заданным правилам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив - Массив из Структура:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	ПредставленияСтатусов = Неопределено;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		
		ПроверитьНаОшибкиСтрокиДерева(ДеревоУпаковок.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда
			
			Если ПредставленияСтатусов = Неопределено Тогда
				ПредставленияСтатусов = ПредставленияСтатусов();
			КонецЕсли;
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДерева.Статус);
				Если ПредставлениеСтатуса = Неопределено Тогда
					ПредставлениеСтатуса = НСтр("ru='<Неопределен>'");
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставлениеСтатуса);
				СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхБлоков")
			И ПравилаПроверкиНаОшибки.КонтрольПустыхБлоков.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольПустыхБлоков Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Пустая упаковка'");
				СтрокаДерева.ЕстьОшибки = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДерева.ИННВладельца) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'ИНН владельца: %1'"),
						СтрокаДерева.ИННВладельца);
				Иначе
					ТекстОшибки = НСтр("ru = 'Владелец неопределен'");
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСоставаУпаковокМОТП") Тогда
			
			ЕстьРасхождения = Ложь;
			ШтрихкодированиеИС.ВыявитьРасхожденияВСоставахДеревьев(
				ДеревоУпаковок, ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса, ЕстьРасхождения);
			
			Если ЕстьРасхождения Тогда
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПравилаПроверкиНаОшибки,
		ПараметрыСканирования, ЕстьОшибки);
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
		И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда
		
		Если ПредставленияСтатусов = Неопределено Тогда
			ПредставленияСтатусов = ПредставленияСтатусов();
		КонецЕсли;
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДанных.Статус);
			Если ПредставлениеСтатуса = Неопределено Тогда
				ПредставлениеСтатуса = НСтр("ru='<Неопределен>'");
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставлениеСтатуса);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
		И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Владелец: %1 (%2)'"),
					СтрокаДанных.Владелец,
					СтрокаДанных.ИННВладельца);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'ИНН владельца: %1'"),
					СтрокаДанных.ИННВладельца);
			Иначе
				ТекстОшибки = НСтр("ru = 'Владелец неопределен'");
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ШтрихкодированиеИС.ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(
		ПравилаПроверкиНаОшибки, ПараметрыСканирования);
	
	Если Не ЕстьОшибки И ПравилаПроверкиНаОшибки.Свойство("КонтрольОстатков")Тогда
		
		ПроконтролироватьДоступныеОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует таблицу значений для контроля остатков табачной продукции.
//
// Параметры:
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Табачная марка.
// * Доступно - Число - Остаток маркируемой продукции.
// * БылиПродажи - Булево - Истина, если марка уже была хотя бы раз ранее продана.
// * БылиВозвраты - Булево - Истина, если марка уже была хотя бы раз ранее возвращена.
Функция ИнициализацияТаблицыПроверкиОстатков()

	КвалификаторыЧисла  = Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой);

	ОстаткиМаркируемойПродукции = Новый ТаблицаЗначений;
	ОстаткиМаркируемойПродукции.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ОстаткиМаркируемойПродукции.Колонки.Добавить("Доступно",         Новый ОписаниеТипов("Число", КвалификаторыЧисла));

	Возврат ОстаткиМаркируемойПродукции;

КонецФункции

// Выполняет инициализацию и заполнение таблицы остатков, необходимых для контроля.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена хоть одна ошибка.
Процедура ПроконтролироватьДоступныеОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)

	Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок <> "Продажа"
		И ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок <> "Возврат" Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиМаркируемойПродукции = ОпределитьОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ТекстОшибки = НСтр("ru='Отсутствует'");
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ОстаткиМаркируемойПродукции.Найти(СтрокаДанных.ШтрихкодУпаковки, "ШтрихкодУпаковки");
			
			Если Не ВыполненоУсловиеКонтроляОстатков(ПараметрыСканирования, НайденнаяСтрока.Доступно) Тогда
				
				СтрокаДанных.ТекстОшибки = ТекстОшибки;
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаМарки Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			
			НайденнаяСтрока = ОстаткиМаркируемойПродукции.Найти(СтрокаМарки.ШтрихкодУпаковки, "ШтрихкодУпаковки");
			
			Если Не ВыполненоУсловиеКонтроляОстатков(ПараметрыСканирования, НайденнаяСтрока.Доступно) Тогда
				
				СтрокаМарки.СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаМарки.СтрокаДерева.ЕстьОшибки  = Истина;
				
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Выполняет инициализацию и заполнение таблицы остатков, необходимых для контроля.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  ТаблицаЗначений - (См. ШтрихкодированиеМОТП.ИнициализацияТаблицыПроверкиОстатков)
Функция ОпределитьОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ОстаткиМаркируемойПродукции = ИнициализацияТаблицыПроверкиОстатков();
	
	ОстаткиПоУмолчанию = Новый Структура("Продажа, Возврат", 1, -1);
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			СтрокаОстатки = ОстаткиМаркируемойПродукции.Добавить();
			СтрокаОстатки.ШтрихкодУпаковки = СтрокаДанных.ШтрихкодУпаковки;
			СтрокаОстатки.Доступно = ОстаткиПоУмолчанию[ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок];
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТовары Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			СтрокаОстатки = ОстаткиМаркируемойПродукции.Добавить();
			СтрокаОстатки.ШтрихкодУпаковки = СтрокаТовары.ШтрихкодУпаковки;
			СтрокаОстатки.Доступно = ОстаткиПоУмолчанию[ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок];
		КонецЦикла;
		
	КонецЕсли;
	
	ШтрихкодированиеМОТППереопределяемый.ПриОпределенииОстатковМаркируемойПродукции(
		ОстаткиМаркируемойПродукции, ПараметрыСканирования);
	
	ОстаткиМаркируемойПродукции.Индексы.Добавить("ШтрихкодУпаковки");
	
	Возврат ОстаткиМаркируемойПродукции;
	
КонецФункции

Функция ВыполненоУсловиеКонтроляОстатков(ПараметрыСканирования, Доступно)

	УсловиеВыполнено = Ложь;

	Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа" Тогда
		УсловиеВыполнено = Доступно >= 1;
	ИначеЕсли ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат" Тогда
		УсловиеВыполнено = Доступно <= 0;
	КонецЕсли;

	Возврат УсловиеВыполнено;

КонецФункции

// Определяет необходимость указания серии для маркируемой продукции.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется указать серию.
Функция ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования)
	
	ТребуетсяВыбор = Ложь;
	
	Если (ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая)
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		
		ТребуетсяВыбор = ИнтеграцияИС.ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат ТребуетсяВыбор;
	
КонецФункции

// Выполняет проверку на ошибки по заданным правилам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив - Массив структур:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Коллекция строк, где были выявлены
//                          ошибки по контролю статусов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(ДанныеКодовМаркировки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	ВладелецМожетБытьПустым = Ложь;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
		ВладелецМожетБытьПустым = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий") Тогда
			Если ТребуетсяВыборСерии(СтрокаДанных, ПараметрыСканирования) Тогда
				ПравилаПроверкиНаОшибки.КонтрольСерий.Добавить(СтрокаДанных);
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Получить(СтрокаДанных.Штрихкод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
			
			СведенияОбОрганизации = Новый Структура();
			СведенияОбОрганизации.Вставить("ИНН", "");
		
			ИнтеграцияИСПереопределяемый.ЗаполнитьСведенияОбОрганизации(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
			ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
			
			Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
			ИначеЕсли СтрокаДанных.ИННВладельца <> ОжидаемыйИННВладельца Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов") Тогда
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыМОТП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыУпаковокМОТП;
			Иначе
				ДопустимыеСтатусыМОТП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыМОТП;
			КонецЕсли;
			
			Если ДопустимыеСтатусыМОТП.Найти(СтрокаДанных.Статус) = Неопределено Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку строк дерева на ошибки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПравилаПроверкиНаОшибки - Структура - правила, по которым выполняется проверка.
// * КонтрольПустыхБлоков - Массив из СтрокаДереваЗначений - Коллекция строк дерева с ошибками.
// * КонтрольСерий - для дерева заполнение серий не контролируется.
// * КонтрольВладельца - Массив - Коллекция строк дерева, в которых ИНН владельца не соответствует ожидаемому.
// * КонтрольСтатусов - Массив - Коллекция строк дерева, в которых статус не соответствует ожидаемому.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если при проверке выявлены ошибки.
Процедура ПроверитьНаОшибкиСтрокиДерева(СтрокиДерева, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	ВладелецМожетБытьПустым = Ложь;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
		
		СведенияОбОрганизации = Новый Структура();
		СведенияОбОрганизации.Вставить("ИНН", "");
		
		ИнтеграцияИСПереопределяемый.ЗаполнитьСведенияОбОрганизации(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
		ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
		
		ВладелецМожетБытьПустым = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхБлоков") Тогда
			
			Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) И СтрокаДерева.Строки.Количество() = 0 Тогда
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольПустыхБлоков.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов") Тогда
			
			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыМОТП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыУпаковокМОТП;
			Иначе
				ДопустимыеСтатусыМОТП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыМОТП;
			КонецЕсли;
			
			Если ДопустимыеСтатусыМОТП.Найти(СтрокаДерева.Статус) = Неопределено Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен
				И СтрокаДерева.Статус <> Неопределено
				И СтрокаДерева.ИННВладельца <> ОжидаемыйИННВладельца Тогда
				
				Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДерева.ИННВладельца) Тогда
				Иначе
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДерева);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Вставить(СтрокаДерева.Штрихкод, Истина);
		ПроверитьНаОшибкиСтрокиДерева(СтрокаДерева.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнениеДанныхШтрихкодовСпецификой

// Дополняет свойства таблицы значений - "МаркированныеТовары" или дерево значение - "ДеревоУпаковок" колонками,
// специфичными для табачной продукции.
//
// Параметры:
//  Коллекция - ТаблицаЗначений, ДеревоЗначений - "МаркированныеТовары" или "ДеревоУпаковок".
Процедура НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(Коллекция) Экспорт
	
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиДереваУпаковок();
		КоллекцияОбязательныхКолонок.Вставить("КоличествоБлоков", Новый ОписаниеТипов("Число"));
		КоллекцияОбязательныхКолонок.Вставить("МРЦ",              Новый ОписаниеТипов("Число"));
		
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда 
		
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары();
		
	КонецЕсли;
	
	КоллекцияОбязательныхКолонок.Вставить("ИННВладельца",              Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("Контрагент",                Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("GTIN",                      Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("EAN",                       Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("Статус",                    Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеСтатуса",      Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоПачек",           Новый ОписаниеТипов("Число"));
	
	КоллекцияОбязательныхКолонок.Вставить("НоменклатураСопоставленаПоУПД", Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("РодительскаяУпаковка",          Новый ОписаниеТипов("Строка"));
	
	Для Каждого КлючЗначение Из КоллекцияОбязательныхКолонок Цикл
		
		Если Коллекция.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Коллекция.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область НормализацияДанныхВложенныхШтрихкодов

// Дополняет входящие в состав "Вложенных штрихкодов" коллекции - "Дерево упаковок" и "Маркированные товары" свойствами
// специфичными для табачной продукции и заполняет на основании данных - "Специфика штрихкодов".
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки);
	НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары);
	
КонецПроцедуры

// Дополняет таблицу значений "Маркированные товары" свойствами специфичными для табачной продукции и заполняет
// на основании данных - "Дерева упаковок".
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
Процедура НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары)
	
	МаркированныеТовары.Очистить();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары);
	ШтрихкодированиеИС.ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, МаркированныеТовары);
	
КонецПроцедуры

#Область НормализацияДанныхДереваУпаковок

// Дополняет дерево упаковок колонками, специфичными для табачной продукции. Заполняет значения специфичных колонок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
Процедура НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено)
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	КэшНоменклатуры = Новый Соответствие;
	ЗаполнитьСтрокиДерева(ДеревоУпаковок.Строки, ДанныеКодовМаркировки, ПараметрыСканирования, КэшНоменклатуры);
	
КонецПроцедуры

// Заполняет строки дерева упаковок данными специфичными для табачной продукции.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  КэшНоменклатуры - Соответствие - 
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка иерархии дерева упаковок.
//  ЭтоПервыйУровень - Булево - Истина, если это верхний уровень дерева.
Процедура ЗаполнитьСтрокиДерева(СтрокиДерева, ДанныеКодовМаркировки, ПараметрыСканирования,
	КэшНоменклатуры, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВидПродукции)
			И СтрокаДерева.ВидПродукции <> Перечисления.ВидыПродукцииИС.Табак Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьСтрокиДерева(
			СтрокаДерева.Строки, ДанныеКодовМаркировки, ПараметрыСканирования, КэшНоменклатуры, УпаковкаВерхнегоУровня);
			
		ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, ДанныеКодовМаркировки);
		ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева);
		РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева);
		ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаДерева, ПараметрыСканирования);
		ЗаполнитьМРЦСтрокиДерева(СтрокаДерева, ПараметрыСканирования, КэшНоменклатуры);
		//ЗаполнитьСпецификуСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов);
		
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет вид упаковки строки дерева, вычисляет принадлежность упаковки к монотоварной и мультитоварной.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева)
	
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		
		СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		
		Если СтрокаДерева.Номенклатура = Неопределено Тогда
			СтрокаДерева.Номенклатура = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
		КонецЕсли;
		
		Если СтрокаДерева.Характеристика = Неопределено Тогда
			СтрокаДерева.Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		КонецЕсли;
		
		Если СтрокаДерева.Серия = Неопределено Тогда
			СтрокаДерева.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		КонецЕсли;
		
	Иначе
		
		ПроверятьНоменклатуру   = Истина;
		ПроверятьХарактеристику = Истина;
		ПроверятьСерию          = Истина;
		
		СтрокаДерева.Номенклатура   = Неопределено;
		СтрокаДерева.Характеристика = Неопределено;
		СтрокаДерева.Серия          = Неопределено;
		
		СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		
		Для Каждого Строка Из СтрокаДерева.Строки Цикл
			
			Если ПроверятьНоменклатуру Тогда
				Если СтрокаДерева.Номенклатура = Неопределено Тогда
					СтрокаДерева.Номенклатура = Строка.Номенклатура;
				ИначеЕсли СтрокаДерева.Номенклатура <> Строка.Номенклатура Тогда
					СтрокаДерева.Номенклатура = Неопределено;
					ПроверятьНоменклатуру = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьХарактеристику Тогда
				Если СтрокаДерева.Характеристика = Неопределено Тогда
					СтрокаДерева.Характеристика = Строка.Характеристика;
				ИначеЕсли СтрокаДерева.Характеристика <> Строка.Характеристика Тогда
					СтрокаДерева.Характеристика = Неопределено;
					ПроверятьХарактеристику = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьСерию Тогда
				Если СтрокаДерева.Серия = Неопределено Тогда
					СтрокаДерева.Серия = Строка.Серия;
				ИначеЕсли СтрокаДерева.Серия <> Строка.Серия Тогда
					СтрокаДерева.Серия = Неопределено;
					ПроверятьСерию = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПроверятьНоменклатуру Или Не ПроверятьХарактеристику Или Не ПроверятьСерию Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
			
			Если Не ПроверятьНоменклатуру И Не ПроверятьХарактеристику И Не ПроверятьСерию Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строка дерева упаковок данными таблицы кодов маркировки.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка Дерева упаковок.
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
Процедура ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, ДанныеКодовМаркировки)
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ДанныеКодовМаркировки.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Колонка Из ДанныеКодовМаркировки.Колонки Цикл
		
		Если Не ЗначениеЗаполнено(НайденнаяСтрока[Колонка.Имя]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Владелец().Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева[Колонка.Имя] = НайденнаяСтрока[Колонка.Имя];
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет вычисление МРЦ по коду маркировки, в случае неудачи - запрашивает МРЦ в ИС МОТП.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьМРЦСтрокиДерева(СтрокаДерева, ПараметрыСканирования, КэшНоменклатуры)
	
	Если ЗначениеЗаполнено(СтрокаДерева.МРЦ)
		Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Возврат;
	КонецЕсли;
	
	СоставКодаМаркировки = СтрокаДерева.СоставКодаМаркировки;
	
	Если СоставКодаМаркировки <> Неопределено
		И СоставКодаМаркировки.Свойство("МРЦ")
		И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦ) Тогда
		
		СтрокаДерева.МРЦ = СоставКодаМаркировки.МРЦ;
		
	Иначе
		
		СтрокаДерева.МРЦ = МРЦПоДаннымМОТП(СтрокаДерева, ПараметрыСканирования, КэшНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает МРЦ из сервиса МОТП.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева значений.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  КэшНоменклатуры - Соответствие - 
// Возвращаемое значение:
//  Число - МРЦ.
Функция МРЦПоДаннымМОТП(СтрокаДерева, ПараметрыСканирования, КэшНоменклатуры)
	
	МРЦКодаМаркировки = 0;
	
	Если ПараметрыСканирования.ВариантПолученияМРЦ = "Вычисление" Тогда
		Возврат МРЦКодаМаркировки;
	КонецЕсли;

	Если ПараметрыСканирования.ВариантПолученияМРЦ = "ВычислениеИЗапрос" Тогда
	
		Результат = ИнтерфейсМОТП.ЗапроситьМРЦДляКодаМаркировки(СтрокаДерева);
		Если Результат.ДанныеПродукции <> Неопределено Тогда
			ДанныеСтроки = Результат.ДанныеПродукции.Получить(СтрокаДерева);
			Если ДанныеСтроки <> Неопределено Тогда
				МРЦКодаМаркировки = ДанныеСтроки.МРЦ;
			КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МРЦКодаМаркировки;
	
КонецФункции

// Выполняет расчет количественных показателей строки дерева, таких как: КоличествоПачек, КоличествоБлоков.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		СтрокаДерева.КоличествоПачек = 1;
	ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		СтрокаДерева.КоличествоБлоков = 1;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		СтрокаДерева.Родитель.КоличествоПачек = СтрокаДерева.Родитель.КоличествоПачек
			+ СтрокаДерева.КоличествоПачек;
		
		СтрокаДерева.Родитель.КоличествоБлоков = СтрокаДерева.Родитель.КоличествоБлоков
			+ СтрокаДерева.КоличествоБлоков;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет замену значений строки дерева со значениями Неопределено на пустые ссылки.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Описание
Процедура ЗаменитьЗначенияНеопределеноНаПустыеСсылкиВСтрокеДерева(СтрокаДерева) Экспорт
	
	ПустаяНоменклатура   = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	ПустаяХарактеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	ПустаяСерия          = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	
	Если СтрокаДерева.Номенклатура = Неопределено Тогда
		СтрокаДерева.Номенклатура = ПустаяНоменклатура;
	КонецЕсли;
	
	Если СтрокаДерева.Характеристика = Неопределено Тогда
		СтрокаДерева.Характеристика = ПустаяХарактеристика;
	КонецЕсли;
	
	Если СтрокаДерева.Серия = Неопределено Тогда
		СтрокаДерева.Серия = ПустаяСерия;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Выполняет обработку выбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  РезультатВыбора - Структура - результат выбора номенклатуры пользователем.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - закэшированные данные формы.
// Возвращаемое значение:
//  Неопределено, Структура - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВыборНоменклатуры(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   УПД учетного документа.
// 
// Параметры:
//  УчетныйДокумент - ЛюбаяСсылка - Документ, формируемый на основании УПД.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымУПД(УчетныйДокумент)
	
	Если Не ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	// Получаем электронный документ и присоединенный файл титула продавца
	ЭлектронныйДокумент = ОбменСКонтрагентами.СтатусДокументооборота(УчетныйДокумент).ЭлектронныйДокумент;
	
	Если ЭлектронныйДокумент = Неопределено Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	СсылкаНаФайл = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭлектронныйДокумент);
	
	// Сохраняем файл на диск
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	//Формируем дерево документа
	ОписаниеЭД = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяВременногоФайла);
	ДеревоДокумента = ОписаниеЭД.СтрокаОбъекта.ЗначениеРеквизита;
	
	// Заполняем номенклатуру информационной базы в дереве.
	ДанныеЭлектронногоДокумента = Новый Структура("Контрагент", УчетныйДокумент.Контрагент);
	
	ОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВДеревеДокумента(
		ДанныеЭлектронногоДокумента, ДеревоДокумента);
	
	ИмяСобытия = НСтр("ru = 'Формирование дерева разбора ЭДО.Удаление временного файла.'");
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента);
	
КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по УПД.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным УПД.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента)
	
	СоответствиеКодаМаркировкиНоменклатуре = Новый Соответствие;
	СведенияОТоварах = ДеревоДокумента.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат СоответствиеКодаМаркировкиНоменклатуре;
	КонецЕсли;
	
	ПутьКИндивидуальнымУпаковкам155 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок";
	ПутьКИндивидуальнымУпаковкам820 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки";
	ПутьКНоменклатуре               = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике             = "СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам820, "ПолныйПуть", Истина);
		Если ИндивидуальныеУпаковки = Неопределено Тогда
			
			ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам155, "ПолныйПуть", Истина);
			Если ИндивидуальныеУпаковки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ИндивидУпаковка Из ИндивидуальныеУпаковки.Строки Цикл
			
			Если ИндивидУпаковка.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КодМаркировки = ИндивидУпаковка.Строки[0].Значение;
			
			Если ПустаяСтрока(КодМаркировки) Тогда //Товар без маркировки.
				Продолжить;
			КонецЕсли;
			
			ДанныеНоменклатуры = Новый Структура;
			ДанныеНоменклатуры.Вставить("Номенклатура",              Номенклатура);
			ДанныеНоменклатуры.Вставить("Характеристика",            Характеристика);
			ДанныеНоменклатуры.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
			
			СоответствиеКодаМаркировкиНоменклатуре.Вставить(КодМаркировки, ДанныеНоменклатуры);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СоответствиеКодаМаркировкиНоменклатуре;
	
КонецФункции

// Определяет тип кода маркировки по его значению.
//
// Параметры:
//  Штрихкод - Строка - Штрихкод маркируемой продукции.
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// Формирует вложенные штрихкоды путем получения базовых коллекций "ДеревоУпаковок" и "МаркированныеТовары" и дополнения
// их колонками специфичными для табачной продукции.
//
// Параметры:
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ИнициализацияВложенныхШтрихкодов()
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.ДеревоУпаковок);
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.МаркированныеТовары);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Инициализирует структуру, описывающую результат получения вложенных штрихкодов по данным МОТП.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка - Ошибка, возникшая в результате запроса данных из МОТП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка.
// * ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
Функция ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымМОТП()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВложенныеШтрихкоды",             Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	Результат.Вставить("GTIN",                           Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Инициализирует дерево упаковок для табачной продукции.
//
// Возвращаемое значение:
//  ДеревоЗначений - Иерархия упаковок.
Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Дополняет таблицу "Маркированные товары" табачными блоками, которые присутствуют в "Дереве упаковок".
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки "Дерева упаковок".
//  МаркированныеТовары - ТаблицаЗначений - таблица с маркированными товарами.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка в иерархии.
Процедура ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(СтрокиДерева, МаркированныеТовары, УпаковкаВерхнегоУровня = Неопределено)

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл

		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;

		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		КонецЕсли;

		ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(СтрокаДерева.Строки, МаркированныеТовары, УпаковкаВерхнегоУровня);

	КонецЦикла;

КонецПроцедуры

// Дополняет данные по штрихкодам спецификой табачной продукции, полученной из МОТП.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	СтрокиТаблицыДанныхДляПолученияСпецифики = СтрокиТаблицыДанныхДляПолученияСпецифики(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	
	Если СтрокиТаблицыДанныхДляПолученияСпецифики.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДеревоУпаковокПоДаннымСервиса(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	Результат = СпецификаДляДополненияДанныхПоШтрихкодам(СтрокиТаблицыДанныхДляПолученияСпецифики, ПараметрыСканирования);
	Если Результат.ЕстьОшибки Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
		
		Возврат;
		
	КонецЕсли;
	
	ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(Результат.СпецификаШтрихкодов, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строки таблицы Данные кодов маркировки спецификой, полученной из МОТП.
// 
// Параметры:
//  СпецификаШтрихкодов - Соответствие - Ключ - строка таблицы Данные кодов маркировки, значение - специфика, полученная
//    из сервиса МОТП.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(СпецификаШтрихкодов, ПараметрыСканирования)
	
	ПредставленияСтатусов = ПредставленияСтатусов();
	НаличиеКолонокВДанных = Новый Соответствие;
	
	Для Каждого КлючЗначение Из СпецификаШтрихкодов Цикл
		
		СтрокаТаблицыДанных = КлючЗначение.Ключ;
		СпецификаСтроки     = КлючЗначение.Значение;
		
		Если ЗначениеЗаполнено(СпецификаСтроки) Тогда
			
			ПоляДляЗаполнения = Новый Массив;
			Для Каждого КлючИЗначение Из СпецификаСтроки Цикл
				
				ИмяСвойства  = КлючИЗначение.Ключ;
				ЕстьСвойство = НаличиеКолонокВДанных.Получить(ИмяСвойства);
				Если ЕстьСвойство = Неопределено Тогда
					ЕстьСвойство = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыДанных, ИмяСвойства);
					НаличиеКолонокВДанных.Вставить(ИмяСвойства, ЕстьСвойство);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КлючИЗначение.Значение)
					И ЕстьСвойство Тогда
					ПоляДляЗаполнения.Добавить(КлючИЗначение.Ключ);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПоляДляЗаполнения.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанных, СпецификаСтроки, СтрСоединить(ПоляДляЗаполнения, ","));
			КонецЕсли;
			
			СтрокаТаблицыДанных.КоличествоПачек      = 1;
			СтрокаТаблицыДанных.ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус);
			
			ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаТаблицыДанных, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает все коды маркировки, находящиеся в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Массив из Строка - Коды маркировки.
Функция СтрокиТаблицыДанныхДляПолученияСпецифики(ДанныеКодовМаркировки, ПараметрыСканирования)
	
	СтрокиТаблицыДанных = Новый Массив;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
			И Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки) Тогда
				СтрокиТаблицыДанных.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокиТаблицыДанных;
	
КонецФункции

// Получает дерево упаковок из системы МОТП для контроля расхождений состава с данными ИБ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СформироватьДеревоУпаковокПоДаннымСервиса(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.КонтрольСоставаУпаковокМОТП Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицыДляЗапроса = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки)
			И ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(СтрокаДанных.ВидыПродукцииКодаМаркировки)
			И СтрокаДанных.Входящий Тогда
			
			СтрокиТаблицыДляЗапроса.Добавить(СтрокаДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиТаблицыДляЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПолученияДанных = ДеревоУпаковокПоДаннымМОТП(СтрокиТаблицыДляЗапроса, ПараметрыСканирования); 
	Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = РезультатПолученияДанных.ТекстОшибки;
	Иначе
		ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса = РезультатПолученияДанных.ДеревоУпаковок;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
