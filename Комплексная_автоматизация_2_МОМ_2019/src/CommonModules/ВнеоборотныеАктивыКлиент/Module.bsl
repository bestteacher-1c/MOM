////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет проведение документов с помощью фонового задания.
//
// Параметры:
//  Список	 - ДинамическийСписок	 - Список документов.
//  ИмяФормы - Строка				 - Форма в которой реализовано фоновое проведение документов.
//
Процедура ПровестиДокументыВФономЗадании(Список, ИмяФормы) Экспорт

	ОчиститьСообщения();
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	ЕстьПомеченныеНаУдаление = Ложь;
	МожноПровести = ВнеоборотныеАктивыВызовСервера.ПроверитьВозможностьПроведения(МассивСсылок, ЕстьПомеченныеНаУдаление);
	Если ЕстьПомеченныеНаУдаление И МассивСсылок.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Помеченный на удаление документ не может быть проведен'");
		ПоказатьПредупреждение(,ТекстСообщения);
	ИначеЕсли МожноПровести Тогда
		ПараметрыФормы = Новый Структура("СписокДокументов", МассивСсылок);
		ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик расшифровки табличного документа формы отчета.
// См. "Расширение поля формы для поля табличного документа.ОбработкаРасшифровки" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//   Элемент     - ПолеФормы        - Табличный документ.
//   Расшифровка - Произвольный     - Значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево  - Признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт

	ВнеоборотныеАктивыКлиентЛокализация.ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

// Получает данные для печати и открывает форму Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации.
//
// Параметры:
//	ОписаниеКоманды - Структура - структура с описанием команды.
//
// Возвращаемое значение:
//	Неопределено
//
Функция ПечатьЭтикетокОбъектовЭксплуатации(ОписаниеКоманды) Экспорт
	
	ОткрытьФорму(
		"Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации",
		Новый Структура("ОбъектыЭксплуатации", ОписаниеКоманды.ОбъектыПечати),
		ОписаниеКоманды.Форма,
		Новый УникальныйИдентификатор);
	
КонецФункции

// Получает данные для печати и открывает форму Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации.
//
// Параметры:
//	ОписаниеКоманды - Структура - структура с описанием команды.
//
// Возвращаемое значение:
//	Неопределено
//
Функция ПечатьЭтикетокОбъектовЭксплуатацииИзДокумента(ОписаниеКоманды) Экспорт
	
	ДополнительныеПараметры = Новый Структура("МенеджерПечати", ОписаниеКоманды.МенеджерПечати);
	
	ДанныеДляПечати =
		УправлениеПечатьюУТВызовСервера.ДанныеДляПечатиЦенниковИЭтикеток(
			ОписаниеКоманды.Идентификатор,
			ОписаниеКоманды.ОбъектыПечати,
			ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации",
		Новый Структура("ОбъектыЭксплуатации", ДанныеДляПечати),
		ОписаниеКоманды.Форма,
		Новый УникальныйИдентификатор);
	
КонецФункции

// Открывает форму ввода адреса с заполненными из параметра значениями полей адреса.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - форма, в которой расположен ввода адреса;
//  Элемент				 - ПолеФормы		 - элемент формы для ввода адреса;
//  Объект				 - ДанныеФормыКоллекция	 - объект, для которого выполняется событие;
//  ИмяРеквизитаАдреса	 - Строка				 - имя реквизита;
//  СтандартнаяОбработка - Булево, Истина		 - признак выполнения стандартной обработки события начало выбора.
//
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультат(Форма, Элемент, Объект, ИмяРеквизитаАдреса = "АдресМестонахождения", СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПриИзмененииПредставленияАдреса(Элемент, Объект[ИмяРеквизитаАдреса], Объект[ИмяРеквизитаАдреса + "Значение"]);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаАдреса", ИмяРеквизитаАдреса);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуВыбораАдресаИОбработатьРезультатЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
		
	ВидКонтактнойИнформации = Новый Структура;
	ВидКонтактнойИнформации.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	ВидКонтактнойИнформации.Вставить("ТолькоНациональныйАдрес", Ложь);
	ВидКонтактнойИнформации.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформации.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
		
	ПараметрыФормыКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ВидКонтактнойИнформации,
			Объект[ИмяРеквизитаАдреса + "Значение"],
			Объект[ИмяРеквизитаАдреса]);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормыКонтактнойИнформации,, Оповещение);
		
КонецПроцедуры

// Актуализирует КИ из текста редактирования поля ввода.
//
// Параметры:
//  Элемент				 - ПолеФормы - элемент формы для ввода адреса;
//  АдресПредставление	 - Строка	 - представление адреса;
//  АдресЗначение	 - XMLСтрока - служебная информация, значения полей адреса.
//
Процедура ПриИзмененииПредставленияАдреса(Элемент, АдресПредставление, АдресЗначение) Экспорт
	
	АдресПредставление = Элемент.ТекстРедактирования;
	ОбщегоНазначенияУТВызовСервера.ЗаполнитьЗначенияПолейКИПоПредставлению(АдресПредставление, АдресЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОповеститьОРасчетеАмортизации(ВыполненоСОшибками, Период = Неопределено) Экспорт
	
	Если ВыполненоСОшибками = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполненоСОшибками Тогда
		ТекстПояснения = НСтр("ru = 'При расчете возникли ошибки'");
		КартинкаОповещения = БиблиотекаКартинок.АмортизацияСОшибкой;
	Иначе
		ТекстПояснения = НСтр("ru = 'Амортизация рассчитана'");
		КартинкаОповещения = БиблиотекаКартинок.АмортизацияРассчитана;
	КонецЕсли; 
	
	ПоказатьОповещениеПользователя(,, ТекстПояснения, КартинкаОповещения);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультатЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = ДополнительныеПараметры.Объект;
	ИмяРеквизитаАдреса= ДополнительныеПараметры.ИмяРеквизитаАдреса;
		
	// Перенесем данные в форму
	Объект[ИмяРеквизитаАдреса + "Значение"] = Результат.Значение;
	Объект[ИмяРеквизитаАдреса] = Результат.Представление;
	
	Форма.Модифицированность = Истина;
	Форма.ОбновитьОтображениеДанных();

КонецПроцедуры

#КонецОбласти
