
#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//  ПараметрыВыбора - Массив - параметры выбора элемента формы "Номенклатура".
//  ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//
Процедура ЗаполнитьПараметрыВыбораНоменклатурыПоВидуПродукции(ПараметрыВыбора, ВидПродукцииИС) Экспорт
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")));
	
	ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС);
	
	Если ОсобенностьУчета <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОсобенностьУчета", ОсобенностьУчета));
	КонецЕсли;
		
КонецПроцедуры

#Область Серии

//Подготовливает структуру, массив которых в дальнейшем будет передан в процедуру генерации серий.
//   Дополняется необходимыми полями, специфичными конкретному виду продукции.
//
//Параметры:
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции генерации серии
//Возвращаемое значение:
//   Структура - источник данных генерации серий с обязательными полями:
//    * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура, для которой будет генерироваться серия.
//    * Серия        - ОпределяемыйТип.СерияНоменклатуры   - В данное значение будет записана сгенерированная серия.
//    * ЕстьОшибка   - Булево - Будет установлено в Истина, если по каким то причинам серия сгенерирована не будет.
//    * ТекстОшибки  - Строка - причина, по которой серия не генерировалась.
//
Функция СтруктураДанныхДляГенерацииСерии(ВидМаркируемойПродукции) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Номенклатура", Неопределено);
	СтруктураДанных.Вставить("Серия",        Неопределено);
	СтруктураДанных.Вставить("ЕстьОшибка",   Ложь);
	СтруктураДанных.Вставить("ТекстОшибки",  "");
	
	ДополнитьДанныеДляГенерацииСерииПоВидуПродукции(СтруктураДанных, ВидМаркируемойПродукции);
	
	Возврат СтруктураДанных;

КонецФункции

#КонецОбласти

#Область ПодключаемыеКомандыИС

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыМаркировкиТоваровИСМП(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ОприходованиеИзлишковТоваров", НСтр("ru = 'Оприходование излишков товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды,"СборкаТоваров",                НСтр("ru = 'Сборку товаров'"),               "ИспользоватьСборкуРазборку");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПрочееОприходованиеТоваров",   НСтр("ru = 'Прочее оприходование товаров'"), "ИспользоватьПрочееОприходованиеТоваров");
	//++ НЕ УТ
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПроизводствоБезЗаказа",        НСтр("ru = 'Производство без заказа'"),      "ИспользоватьУправлениеПроизводством2_2");
	//-- НЕ УТ

	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПриобретениеТоваровУслуг",     НСтр("ru = 'Приобретение товаров и услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ОприходованиеИзлишковТоваров", НСтр("ru = 'Оприходование излишков товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПрочееОприходованиеТоваров",   НСтр("ru = 'Прочее оприходование товаров'"), "ИспользоватьПрочееОприходованиеТоваров");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"СборкаТоваров",                НСтр("ru = 'Сборку товаров'"),               "ИспользоватьСборкуРазборку");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПересчетТоваров",              НСтр("ru = 'Пересчет товаров'"));
	//++ НЕ УТ
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПроизводствоБезЗаказа",        НСтр("ru = 'Производство без заказа'"),      "ИспользоватьУправлениеПроизводством2_2");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПоступлениеОтПереработчика",   НСтр("ru = 'Поступление от переработчика'"), "ИспользоватьПроизводствоНаСтороне");
	//-- НЕ УТ
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПроизводственнаяОперацияВЕТИС", НСтр("ru = 'Производственная операция ВетИС'"), "ВестиУчетПодконтрольныхТоваровВЕТИС");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВходящаяТранспортнаяОперацияВЕТИС", НСтр("ru = 'Входящая транспортная операция ВетИС'"), "ВестиУчетПодконтрольныхТоваровВЕТИС");
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыЗаказНаЭмиссиюКодовМаркировкиСУЗ(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(
		Команды, "МаркировкаТоваровИСМП", НСтр("ru = 'Маркировка товаров ИС МП'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(
		Команды, "ПеремаркировкаТоваровИСМП", НСтр("ru = 'Перемаркировка товаров ИС МП'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(
		Команды, "ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), "ИспользоватьЗаказыПоставщикам");
	//++ НЕ УТ
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(
		Команды, "ЗаказПереработчику", НСтр("ru = 'Заказ переработчику'"), "ИспользоватьПроизводствоНаСтороне");
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыВыводаИзОборотаИСМП(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "СписаниеНедостачТоваров",      НСтр("ru = 'Списание недостач товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "СборкаТоваров",                НСтр("ru = 'Разборку товаров'"),               "ИспользоватьСборкуРазборку");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВнутреннееПотреблениеТоваров", НСтр("ru = 'Внутреннее потребление товаров'"), "ИспользоватьВнутреннееПотребление");
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг",       НСтр("ru = 'Реализацию товаров и услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетОРозничныхПродажах",      НСтр("ru = 'Отчет о розничных продажах'"),     "ИспользоватьРозничныеПродажи");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ЧекККМ",                       НСтр("ru = 'Чек ККМ'"),                        "ИспользоватьРозничныеПродажи");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровПоставщику",     НСтр("ru = 'Возврат товаров поставщику'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотреблениеТоваров", НСтр("ru = 'Внутреннее потребление товаров'"), "ИспользоватьВнутреннееПотребление");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СписаниеНедостачТоваров",      НСтр("ru = 'Списание недостач товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СборкаТоваров",                НСтр("ru = 'Разборку товаров'"),               "ИспользоватьСборкуРазборку");
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыОтгрузкиТоваровИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг",            НСтр("ru = 'Реализацию товаров и услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "КорректировкаРеализации",           НСтр("ru = 'Корректировку реализации'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровПоставщику",          НСтр("ru = 'Возврат товаров поставщику'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров'"),                  "ИспользоватьПеремещениеТоваров");
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыПриемкиТоваровИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВозвратТоваровОтКлиента",  НСтр("ru = 'Возврат товаров от клиента'"));
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровОтКлиента",           НСтр("ru = 'Возврат товаров от клиента'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров'"),                  "ИспользоватьПеремещениеТоваров");
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыСписанияКодовМаркировкиИСМП(Команды) Экспорт 
	
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыВозвратаВОборотИСМП(Команды) Экспорт 
	
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыПеремаркировкиТоваровИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровОтКлиента", НСтр("ru = 'Возврат товаров от клиента'"));
	Возврат;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандЗаказаНаЭмиссию(Форма, Команды) Экспорт
	
	Если ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюПоУмолчанию(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	СпособВводаВОборот = Форма.Объект.СпособВводаВОборот;
	
	Для Каждого КлючИЗначение Из Форма.ВидимостьПодключаемыхКоманд Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		
		Если ИмяМетаданных = "МаркировкаТоваровИСМП"
			Или ИмяМетаданных = "ПеремаркировкаТоваровИСМП" Тогда
			Элемент.Видимость = Истина;
		ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков") Тогда
			Элемент.Видимость = Ложь;
		ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт") Тогда
			Элемент.Видимость = (ИмяМетаданных = "ЗаказПоставщику");
		ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство") Тогда
			Элемент.Видимость = (ИмяМетаданных = "ЗаказНаПроизводство2_2"
					Или ИмяМетаданных = "ЗаказПереработчику");
		ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля") Тогда
			Элемент.Видимость = (ИмяМетаданных = "ЗаказПоставщику");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандМаркировкиТоваров(Форма, Команды) Экспорт
	
	Если ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюПоУмолчанию(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Операция     = Форма.Объект.Операция;
	ВидПродукции = Форма.Объект.ВидПродукции;
	
	Для Каждого КлючИЗначение Из Форма.ВидимостьПодключаемыхКоманд Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.Агрегация") Тогда
			Элемент.Видимость = Ложь;
		ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция") Тогда
			Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
				Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
				Элемент.Видимость = ИмяМетаданных = "ВходящаяТранспортнаяОперацияВЕТИС";
			Иначе
				Элемент.Видимость = ИмяМетаданных = "ПроизводственнаяОперацияВЕТИС";
			КонецЕсли;
		ИначеЕсли ИмяМетаданных = "ПроизводственнаяОперацияВЕТИС"
			Или ИмяМетаданных = "ВходящаяТранспортнаяОперацияВЕТИС" Тогда
			Элемент.Видимость = Ложь;
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
			Элемент.Видимость = ИмяМетаданных = "ПриобретениеТоваровУслуг";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика") Тогда
			Если ИмяМетаданных = "СборкаТоваров" Тогда
				Элемент.Видимость = Форма.Объект.Товары.Количество() = 1;
			Иначе
				Элемент.Видимость = (ИмяМетаданных = "ПроизводствоБезЗаказа"
					Или ИмяМетаданных = "ПрочееОприходованиеТоваров"
					Или ИмяМетаданных = "ПоступлениеОтПереработчика"
					Или ИмяМетаданных = "ПроизводствоБезЗаказа"
					Или ИмяМетаданных = "ЭтапПроизводства2_2");
			КонецЕсли;
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
			Элемент.Видимость = ИмяМетаданных = "ПересчетТоваров";
		Иначе
			Элемент.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандВыводаВОборота(Форма, Команды) Экспорт
	
	Если ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюПоУмолчанию(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = Форма.Объект.Операция;
	
	Для Каждого КлючИЗначение Из Форма.ВидимостьПодключаемыхКоманд Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		
		Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу") Тогда
			Элемент.Видимость = ИмяМетаданных = "ВозвратТоваровПоставщику";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача") Тогда
			Элемент.Видимость = ИмяМетаданных = "ВнутреннееПотреблениеТоваров";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия") Тогда
			Если ИмяМетаданных = "СборкаТоваров" Тогда
				Элемент.Видимость = Форма.Объект.Товары.Количество() = 1;
			Иначе
				Элемент.Видимость = ИмяМетаданных = "ВнутреннееПотреблениеТоваров";
			КонецЕсли;
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС") Тогда
			Элемент.Видимость = ИмяМетаданных = "РеализацияТоваровУслуг";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара") Тогда
			Элемент.Видимость = ИмяМетаданных = "СписаниеНедостачТоваров";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа") Тогда
			Элемент.Видимость = (ИмяМетаданных = "РеализацияТоваровУслуг"
				Или ИмяМетаданных = "ОтчетОРозничныхПродажах"
				Или ИмяМетаданных = "ЧекККМ");
		Иначе
			Элемент.Видимость = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандСписанияКодовМаркировки(Форма, Команды) Экспорт
	
	Если ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюПоУмолчанию(Форма) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандВозвратаВОборот(Форма, Команды) Экспорт
	
	Если ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюПоУмолчанию(Форма) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандПеремаркировкиТоваров(Форма, Команды) Экспорт
	
	Если ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюПоУмолчанию(Форма) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандОтгрузкиТоваров(Форма, Команды) Экспорт
	
	Если ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюПоУмолчанию(Форма) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандПриемкиТоваров(Форма, Команды) Экспорт
	
	Если ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюПоУмолчанию(Форма) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Серии

Процедура ДополнитьДанныеДляГенерацииСерииПоВидуПродукции(СтруктураДанных, ВидМаркируемойПродукции)

	Если ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		СтруктураДанных.Вставить("МРЦ", 0);
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция") Тогда
		СтруктураДанных.Вставить("ГоденДо", '00010101');
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
