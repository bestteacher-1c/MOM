
#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfab-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf56-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf43-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПерерасчетНДФЛ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf32-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПрекращениеСтандартныхВычетовНДФЛ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf16-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "2670afb7-d277-4562-842b-d218d1538054", Метаданные.Документы.СправкаНДФЛ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "b270fe17-95dd-4c2d-889e-8aa23b39b573", Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган);
	
КонецПроцедуры

// Создает новую структуру параметров для работы со справками НДФЛ.
//
// Возвращаемое значение:
//   Структура - параметры для работы со справками НДФЛ:
//    * СведенияОДоходах 					- ТаблицаЗначений или ДанныеФормыКоллекция - м.б. из ТЧ, регистра сведений, новой ТЗ.
//    * СведенияОВычетах 					- ТаблицаЗначений или ДанныеФормыКоллекция - м.б. из ТЧ, регистра сведений, новой ТЗ.
//    * НалоговыйПериод 					- Число	- год, за который формируется справка.									 
//    * ДатаДокумента 						- Дата.
//    * Организация 						- СправочникСсылка.Организация. 
//    * РегистрацияВНалоговомОргане 		- СправочникСсылка.РегистрацииВНалоговомОргане, значение по умолчанию Неопределено.
//    * ИспользоватьНомераСправок 			- Булево, значение по умолчанию Истина.
//    * УведомленияНОоПравеНаВычеты 		- ТаблицаЗначений или ДанныеФормыКоллекция, значение по умолчанию Неопределено -
//																						м.б. из ТЧ, регистра сведений, новой ТЗ.
//    * ЗаполнятьБезДоходовПоЦеннымБумагам	- Булево, значение по умолчанию Ложь.
//    * КППОтправки 						- Строка, значение по умолчанию "". 
//
Функция ПараметрыСправокНДФЛ() Экспорт
	
	ПараметрыСправокНДФЛ = Новый Структура;
	ПараметрыСправокНДФЛ.Вставить("СведенияОДоходах");
	ПараметрыСправокНДФЛ.Вставить("СведенияОВычетах");
	ПараметрыСправокНДФЛ.Вставить("НалоговыйПериод");
	ПараметрыСправокНДФЛ.Вставить("ДатаДокумента");
	ПараметрыСправокНДФЛ.Вставить("Организация");
	ПараметрыСправокНДФЛ.Вставить("РегистрацияВНалоговомОргане", Неопределено);
	ПараметрыСправокНДФЛ.Вставить("ИспользоватьНомераСправок", Истина);
	ПараметрыСправокНДФЛ.Вставить("УведомленияНОоПравеНаВычеты", Неопределено);
	ПараметрыСправокНДФЛ.Вставить("ЗаполнятьБезДоходовПоЦеннымБумагам", Ложь);
	ПараметрыСправокНДФЛ.Вставить("КППОтправки", "");
	
	Возврат ПараметрыСправокНДФЛ;
	
КонецФункции

Процедура СправкиНДФЛПрочитатьДанные(ДанныеСправок, ПараметрыСправокНДФЛ, ОбновлятьНеФиксированныеДанные = Истина, 
	НомерКорректировки = 0) Экспорт
	
	СправкиНДФЛПрочитатьДанныеСотрудников(ДанныеСправок, ПараметрыСправокНДФЛ.НалоговыйПериод, 
	ПараметрыСправокНДФЛ.ДатаДокумента, ОбновлятьНеФиксированныеДанные);
	
	Если НомерКорректировки = 99 Тогда
		Возврат
	КонецЕсли;
	
	СправкиСНефиксированнымиСведениямиОНалогах = Новый Массив;
	Для Каждого ДанныеСправкиПоСотруднику Из ДанныеСправок Цикл
		Если Не ДанныеСправкиПоСотруднику.ФиксНалоги Тогда
			СправкиСНефиксированнымиСведениямиОНалогах.Добавить(ДанныеСправкиПоСотруднику);
		КонецЕсли;	
	КонецЦикла;	
	
	СправкиНДФЛПрочитатьДанныеОДоходахИНалогах(СправкиСНефиксированнымиСведениямиОНалогах, ПараметрыСправокНДФЛ);
											
	СправкиСНефиксированнымиСведениямиУведомлений = Новый Массив;
	Для Каждого ДанныеСправкиПоСотруднику Из ДанныеСправок Цикл
		Если Не ДанныеСправкиПоСотруднику.ФиксУведомление Тогда
			Для каждого ИмяПоля Из УчетНДФЛ.ПоляЗачтеноАвансовыхПлатежей() Цикл
				Если ЗначениеЗаполнено(ДанныеСправкиПоСотруднику[ИмяПоля]) Тогда
					СправкиСНефиксированнымиСведениямиУведомлений.Добавить(ДанныеСправкиПоСотруднику);
					Прервать;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;	
	
	СправкиНДФЛПрочитатьДанныеУведомлений(СправкиСНефиксированнымиСведениямиУведомлений, ПараметрыСправокНДФЛ.Организация, 
	ПараметрыСправокНДФЛ.НалоговыйПериод);
	
	УточнитьСтатусРаботающегоПоПатенту(СправкиСНефиксированнымиСведениямиУведомлений, ПараметрыСправокНДФЛ.НалоговыйПериод);
	
КонецПроцедуры		

Процедура СправкиНДФЛПрочитатьДанныеСотрудников(ДанныеСправок, НалоговыйПериод, ДатаДокумента, 
	ОбновлятьНеФиксированныеДанные = Истина) Экспорт
	ЗаполняемыеПоля = УчетНДФЛКлиентСервер.СправкиНДФЛИменаФиксируемыхПолей();	
	
	СотрудникиДляЗаполнения = Новый Массив;
	ДанныеСправокПоСотрудникам = Новый Соответствие;
	
	Для Каждого ДанныеСправкиПоСотруднику Из ДанныеСправок Цикл
		
		Если СотрудникиДляЗаполнения.Найти(ДанныеСправкиПоСотруднику.Сотрудник) = Неопределено Тогда
		
			ПолучатьКадровыеДанныеСотрудника = Ложь;
			Если ОбновлятьНеФиксированныеДанные Тогда
				Для Каждого ИмяПоля Из ЗаполняемыеПоля Цикл
					Если Не ДанныеСправкиПоСотруднику["Фикс" + ИмяПоля] Тогда 
						ПолучатьКадровыеДанныеСотрудника = Истина;	
					КонецЕсли;			
				КонецЦикла;	
			КонецЕсли;
			
			Если ПолучатьКадровыеДанныеСотрудника Тогда
				СотрудникиДляЗаполнения.Добавить(ДанныеСправкиПоСотруднику.Сотрудник);			
				ДанныеСправокПоСотрудникам.Вставить(ДанныеСправкиПоСотруднику.Сотрудник, 
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСправкиПоСотруднику));
			КонецЕсли;
		
		Иначе
			ДанныеСправокПоСотрудникам[ДанныеСправкиПоСотруднику.Сотрудник].Добавить(ДанныеСправкиПоСотруднику)
		КонецЕсли;
		
	КонецЦикла;	
	
	Если СотрудникиДляЗаполнения.Количество() > 0 Тогда
				
		НеобходимыеКадровыеДанные = Новый Массив();
		
		НеобходимыеКадровыеДанные.Добавить("ФизическоеЛицо");
		НеобходимыеКадровыеДанные.Добавить("Фамилия");
		НеобходимыеКадровыеДанные.Добавить("Наименование");
		НеобходимыеКадровыеДанные.Добавить("Имя");
		НеобходимыеКадровыеДанные.Добавить("Отчество");
		НеобходимыеКадровыеДанные.Добавить("ДокументВид");
		НеобходимыеКадровыеДанные.Добавить("ДокументСерия");
		НеобходимыеКадровыеДанные.Добавить("ДокументНомер");
		НеобходимыеКадровыеДанные.Добавить("ДокументСтранаВыдачи");
		НеобходимыеКадровыеДанные.Добавить("ДатаРождения");	
		НеобходимыеКадровыеДанные.Добавить("Страна");
		НеобходимыеКадровыеДанные.Добавить("ИНН");
		НеобходимыеКадровыеДанные.Добавить("АдресЗаПределамиРФ");
		НеобходимыеКадровыеДанные.Добавить("АдресЗаПределамиРФПредставление");
		НеобходимыеКадровыеДанные.Добавить("АдресПоПрописке");
		НеобходимыеКадровыеДанные.Добавить("АдресПоПропискеПредставление");
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(МенеджерВТ, Истина, СотрудникиДляЗаполнения, 
		НеобходимыеКадровыеДанные, ДатаДокумента);
		ПрочитатьИННвСтранеГражданства(МенеджерВТ, СотрудникиДляЗаполнения, ДатаДокумента);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанныеФизЛиц.АдресПоПропискеПредставление КАК АдресПредставление,
		|	КадровыеДанныеФизЛиц.АдресЗаПределамиРФПредставление КАК АдресЗарубежомПредставление,
		|	КадровыеДанныеФизЛиц.АдресПоПрописке КАК Адрес,
		|	КадровыеДанныеФизЛиц.АдресЗаПределамиРФ КАК АдресЗарубежом,
		|	КадровыеДанныеФизЛиц.Фамилия КАК Фамилия,
		|	КадровыеДанныеФизЛиц.Имя КАК Имя,
		|	КадровыеДанныеФизЛиц.Отчество КАК Отчество,
		|	КадровыеДанныеФизЛиц.ДатаРождения КАК ДатаРождения,
		|	ЕСТЬNULL(КадровыеДанныеФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)) КАК Гражданство,
		|	КадровыеДанныеФизЛиц.ДокументВид КАК ВидДокумента,
		|	КадровыеДанныеФизЛиц.ДокументСерия КАК СерияДокумента,
		|	КадровыеДанныеФизЛиц.ДокументНомер КАК НомерДокумента,
		|	КадровыеДанныеФизЛиц.ДокументСтранаВыдачи КАК СтранаВыдачиДокумента,
		|	КадровыеДанныеФизЛиц.ИНН КАК ИНН,
		|	КадровыеДанныеФизЛиц.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТекущиеДанныеФизЛиц
		|ИЗ
		|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадровыеДанныеФизическихЛиц
		|";	
		
		Запрос.Выполнить();
		
		КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(МенеджерВТ, Истина, СотрудникиДляЗаполнения, 
		"СтатусНалогоплательщика", КонецГода(Дата(НалоговыйПериод, 1, 1)));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеДанныеФизЛиц.Адрес КАК Адрес,
		|	ТекущиеДанныеФизЛиц.АдресЗарубежом КАК АдресЗарубежом,
		|	ТекущиеДанныеФизЛиц.Фамилия КАК Фамилия,
		|	ТекущиеДанныеФизЛиц.Имя КАК Имя,
		|	ТекущиеДанныеФизЛиц.Отчество КАК Отчество,
		|	ТекущиеДанныеФизЛиц.ДатаРождения КАК ДатаРождения,
		|	ТекущиеДанныеФизЛиц.Гражданство КАК Гражданство,
		|	ЕСТЬNULL(ИННывСтранеГражданства.ИННвСтранеГражданства, """") КАК ИННвСтранеГражданства,
		|	ТекущиеДанныеФизЛиц.ВидДокумента КАК ВидДокумента,
		|	ТекущиеДанныеФизЛиц.СерияДокумента КАК СерияДокумента,
		|	ТекущиеДанныеФизЛиц.НомерДокумента КАК НомерДокумента,
		|	ТекущиеДанныеФизЛиц.СтранаВыдачиДокумента КАК СтранаВыдачиДокумента,
		|	ТекущиеДанныеФизЛиц.ИНН КАК ИНН,
		|	СтатусыФизЛицНаКонецГода.СтатусНалогоплательщика КАК СтатусНалогоплательщика,
		|	ТекущиеДанныеФизЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТТекущиеДанныеФизЛиц КАК ТекущиеДанныеФизЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК СтатусыФизЛицНаКонецГода
		|		ПО ТекущиеДанныеФизЛиц.ФизическоеЛицо = СтатусыФизЛицНаКонецГода.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИННвСтранеГражданства КАК ИННывСтранеГражданства
		|		ПО ТекущиеДанныеФизЛиц.ФизическоеЛицо = ИННывСтранеГражданства.ФизическоеЛицо";

		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеСправокПоСотруднику = ДанныеСправокПоСотрудникам[Выборка.ФизическоеЛицо];
			Для каждого ДанныеСправкиПоСотруднику Из ДанныеСправокПоСотруднику Цикл
				ЕстьКолонкаИННвСтранеГражданства = ЗарплатаКадры.ЕстьПолеВСтрокеКоллекции(ДанныеСправкиПоСотруднику, 
				"ИННвСтранеГражданства");
				Для Каждого ИмяПоля Из ЗаполняемыеПоля Цикл
					Если НЕ ДанныеСправкиПоСотруднику["Фикс" + ИмяПоля] Тогда 
						ДанныеСправкиПоСотруднику[ИмяПоля] = Выборка[ИмяПоля];
						Если ИмяПоля = "Гражданство" И ЕстьКолонкаИННвСтранеГражданства Тогда
							ДанныеСправкиПоСотруднику.ИННвСтранеГражданства = Выборка.ИННвСтранеГражданства;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура СправкиНДФЛПрочитатьДанныеОДоходахИНалогах(ДанныеСправок, ПараметрыСправокНДФЛ) Экспорт
	
	Сотрудники = Новый Массив;
	СправкиПоСотрудникам = Новый Соответствие;
	
	Для Каждого ДанныеСправкиПоСотруднику Из ДанныеСправок Цикл
		Сотрудники.Добавить(ДанныеСправкиПоСотруднику.Сотрудник);
		
		СправкиПоСотрудникам.Вставить(ДанныеСправкиПоСотруднику.Сотрудник, ДанныеСправкиПоСотруднику);
		
		Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл 
			СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "ОбщаяСуммаДохода", 0);
			СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "ОблагаемаяСуммаДохода", 0);
			СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "Исчислено", 0);
			СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "Удержано", 0);
			СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "Перечислено", 0);
			СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "Задолженность", 0);
			СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "ИзлишнеУдержано", 0);
		КонецЦикла;	

	КонецЦикла;	

	ДанныеДоходахНалогахВычетах = УчетНДФЛ.ДанныеОДоходахНалогахВычетах(Сотрудники, 
	ПараметрыСправокНДФЛ.НалоговыйПериод, 
	ПараметрыСправокНДФЛ.Организация, 
	ПараметрыСправокНДФЛ.РегистрацияВНалоговомОргане, 
	ПараметрыСправокНДФЛ.ДатаДокумента, 
	ПараметрыСправокНДФЛ.КППОтправки);
	
	Если ПараметрыСправокНДФЛ.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) 
		И ПараметрыСправокНДФЛ.ЗаполнятьБезДоходовПоЦеннымБумагам Тогда
		СтруктураПоиска = Новый Структура("ВключатьВДекларациюПоНалогуНаПрибыль", Ложь);
		ДанныеДоходахНалогахВычетах.Доходы = ДанныеДоходахНалогахВычетах.Доходы.Скопировать(
		ДанныеДоходахНалогахВычетах.Доходы.НайтиСтроки(СтруктураПоиска));
		ДанныеДоходахНалогахВычетах.Вычеты = ДанныеДоходахНалогахВычетах.Вычеты.Скопировать(
		ДанныеДоходахНалогахВычетах.Вычеты.НайтиСтроки(СтруктураПоиска));
		ДанныеДоходахНалогахВычетах.Налоги = ДанныеДоходахНалогахВычетах.Налоги.Скопировать(
		ДанныеДоходахНалогахВычетах.Налоги.НайтиСтроки(СтруктураПоиска));
	КонецЕсли;
	ДанныеДоходахНалогахВычетах.Доходы.Свернуть(
	"МесяцНалоговогоПериода,Ставка,КодДохода,КодДоходаКодДляОтчетности,КодВычета,Сотрудник","СуммаДохода, СуммаВычета"); 
	ПримененныеВычетыПоГруппам = ДанныеДоходахНалогахВычетах.Вычеты.Скопировать(,"ГруппаВычета,Сотрудник");
	ДанныеДоходахНалогахВычетах.Вычеты.Свернуть("КодВычета,Сотрудник","СуммаВычета"); 
	Если ПараметрыСправокНДФЛ.НалоговыйПериод < Год(УчетНДФЛ.ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев()) Тогда
		ДанныеДоходахНалогахВычетах.Налоги.Свернуть(
		"Ставка,Сотрудник","ОбщаяСуммаДохода, ОблагаемаяСуммаДохода, Исчислено, Удержано, Перечислено, Задолженность, 
		|ИзлишнеУдержано"); 
	Иначе
		ДанныеДоходахНалогахВычетах.Налоги.Свернуть(
		"Ставка,Сотрудник","ОбщаяСуммаДохода, ОблагаемаяСуммаДохода, Исчислено, ЗачтеноАвансовыхПлатежей, Удержано, 
		|Перечислено, Задолженность, ИзлишнеУдержано"); 
	КонецЕсли;
	
	Если ПараметрыСправокНДФЛ.ИспользоватьНомераСправок Тогда
		Для Каждого СтрокаДанныхОДоходах Из ДанныеДоходахНалогахВычетах.Доходы Цикл
			Если СтрокаДанныхОДоходах.СуммаДохода = 0 И СтрокаДанныхОДоходах.СуммаВычета = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДоходовСправки = ПараметрыСправокНДФЛ.СведенияОДоходах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоходовСправки, СтрокаДанныхОДоходах);
			СтрокаДоходовСправки.НомерСправки = СправкиПоСотрудникам[СтрокаДанныхОДоходах.Сотрудник].НомерСправки;
			СтрокаДоходовСправки.МесяцНалоговогоПериодаСтрокой = УчетНДФЛКлиентСервер.МесяцНалоговогоПериодаСтрокой(
			СтрокаДоходовСправки.МесяцНалоговогоПериода);
		КонецЦикла;
		Для Каждого СтрокаДанныхОВычетах Из ДанныеДоходахНалогахВычетах.Вычеты Цикл
			Если СтрокаДанныхОВычетах.СуммаВычета = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаВычетовСправки = ПараметрыСправокНДФЛ.СведенияОВычетах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВычетовСправки, СтрокаДанныхОВычетах);
			СтрокаВычетовСправки.НомерСправки = СправкиПоСотрудникам[СтрокаВычетовСправки.Сотрудник].НомерСправки;
		КонецЦикла;	
	Иначе
		Для Каждого СтрокаДанныхОДоходах Из ДанныеДоходахНалогахВычетах.Доходы Цикл
			Если СтрокаДанныхОДоходах.СуммаДохода = 0 И СтрокаДанныхОДоходах.СуммаВычета = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДоходовСправки = ПараметрыСправокНДФЛ.СведенияОДоходах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоходовСправки, СтрокаДанныхОДоходах);
			СтрокаДоходовСправки.МесяцНалоговогоПериодаСтрокой = УчетНДФЛКлиентСервер.МесяцНалоговогоПериодаСтрокой(
			СтрокаДоходовСправки.МесяцНалоговогоПериода);
		КонецЦикла;
		ПараметрыСправокНДФЛ.СведенияОВычетах.Загрузить(ДанныеДоходахНалогахВычетах.Вычеты);
	КонецЕсли;	
	
	Для Каждого СтрокаИтогов Из ДанныеДоходахНалогахВычетах.Налоги Цикл
		ДанныеСправки = СправкиПоСотрудникам[СтрокаИтогов.Сотрудник];
		СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "ОбщаяСуммаДохода");
		СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "ОблагаемаяСуммаДохода");
		СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "Исчислено");
		Если ПараметрыСправокНДФЛ.НалоговыйПериод >= Год(УчетНДФЛ.ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев()) Тогда
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "ЗачтеноАвансовыхПлатежей");
		КонецЕсли;
		СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "Удержано");
		СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "Перечислено");
		СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "Задолженность");
		СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "ИзлишнеУдержано");
	КонецЦикла;	
	
	СотрудникиСвычетамиПоУведомлениям = Новый Соответствие;
	Для Каждого СтрокаДанныхОВычетах Из ПримененныеВычетыПоГруппам Цикл
		Если СтрокаДанныхОВычетах.ГруппаВычета = Перечисления.ГруппыВычетовПоНДФЛ.Имущественные 
			Или СтрокаДанныхОВычетах.ГруппаВычета = Перечисления.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО Тогда
			СотрудникиСвычетамиПоУведомлениям.Вставить(СтрокаДанныхОВычетах.Сотрудник, Истина);
		КонецЕсли;	
	КонецЦикла;	
	Если ПараметрыСправокНДФЛ.УведомленияНОоПравеНаВычеты <> Неопределено 
		И СотрудникиСвычетамиПоУведомлениям.Количество() > 0 Тогда
		Сотрудники = Новый Массив;	
		Для каждого Элемент Из СотрудникиСвычетамиПоУведомлениям Цикл
			Сотрудники.Добавить(Элемент.Ключ)
		КонецЦикла; 
		ДанныеУведомлений = УчетНДФЛ.ДанныеУведомленийНаВычеты(Сотрудники, ПараметрыСправокНДФЛ.НалоговыйПериод, 
		ПараметрыСправокНДФЛ.Организация);
		Для каждого СтрокаУведомлений Из ДанныеУведомлений Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыСправокНДФЛ.УведомленияНОоПравеНаВычеты.Добавить(), СтрокаУведомлений);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ДанныеИтоговПоСтавке, ИмяПоля) Экспорт
	СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, ДанныеИтоговПоСтавке.Ставка, ИмяПоля, 
	ДанныеИтоговПоСтавке[ИмяПоля])
КонецПроцедуры

Процедура СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, Ставка, ИмяПоля, Значение) Экспорт
	ИмяПоляСправки = УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке(ИмяПоля, Ставка);
	Если ИмяПоляСправки <> Неопределено И ДанныеСправки <> Неопределено 
		И ЗарплатаКадры.ЕстьПолеВСтрокеКоллекции(ДанныеСправки, ИмяПоляСправки) <> Неопределено Тогда 
		ДанныеСправки[ИмяПоляСправки] = Значение;
	КонецЕсли;
КонецПроцедуры

Процедура СправкиНДФЛПрочитатьДанныеУведомлений(ДанныеСправок, Организация, НалоговыйПериод) Экспорт
	
	Сотрудники = Новый Массив;	
	СправкиПоСотрудникам = Новый Соответствие;
	
	Для Каждого ДанныеСправкиПоСотруднику Из ДанныеСправок Цикл
		
		Сотрудники.Добавить(ДанныеСправкиПоСотруднику.Сотрудник);
		
		СправкиПоСотрудникам.Вставить(ДанныеСправкиПоСотруднику.Сотрудник, ДанныеСправкиПоСотруднику);
		ДанныеСправкиПоСотруднику.ДатаУведомленияАвансовыеПлатежи = '00010101';
		ДанныеСправкиПоСотруднику.НомерУведомленияАвансовыеПлатежи = "";
		ДанныеСправкиПоСотруднику.КодНалоговогоОрганаУведомленияАвансовыеПлатежи = "";
		
	КонецЦикла;
	
	ДанныеУведомлений = УчетНДФЛ.ДанныеУведомленийНаЗачетАвансовыхПлатежей(Сотрудники, НалоговыйПериод, Организация);
	Для Каждого Уведомление Из ДанныеУведомлений Цикл
		ДанныеСправки = СправкиПоСотрудникам[Уведомление.ФизическоеЛицо]; 
		ДанныеСправки.ДатаУведомленияАвансовыеПлатежи = Уведомление.ДатаУведомления;
		ДанныеСправки.НомерУведомленияАвансовыеПлатежи = Уведомление.НомерУведомления;
		ДанныеСправки.КодНалоговогоОрганаУведомленияАвансовыеПлатежи = Уведомление.КодНалоговогоОрганаУведомления;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УточнитьСтатусРаботающегоПоПатенту(ДанныеСправок, НалоговыйПериод) Экспорт
	
	Если НалоговыйПериод >= Год(УчетНДФЛ.ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев()) Тогда
		Для каждого ОписаниеСправки Из ДанныеСправок Цикл
			Если ЗначениеЗаполнено(ОписаниеСправки.ДатаУведомленияАвансовыеПлатежи) 
				И ЗначениеЗаполнено(ОписаниеСправки.КодНалоговогоОрганаУведомленияАвансовыеПлатежи) 
				И ЗначениеЗаполнено(ОписаниеСправки.НомерУведомленияАвансовыеПлатежи) 
				И ОписаниеСправки.СтатусНалогоплательщика = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент Тогда
				
				ОписаниеСправки.СтатусНалогоплательщика 
				= Справочники.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ, Истина);
	Списки.Вставить(Метаданные.Документы.ПерерасчетНДФЛ, Истина);
	Списки.Вставить(Метаданные.Справочники.ПерерасчетНДФЛПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПрекращениеСтандартныхВычетовНДФЛ, Истина);
	Списки.Вставить(Метаданные.Справочники.ПрекращениеСтандартныхВычетовНДФЛПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.СправкаНДФЛ, Истина);
	Списки.Вставить(Метаданные.Справочники.СправкаНДФЛПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган, Истина);
	Списки.Вставить(Метаданные.Документы.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ, Истина);
	Списки.Вставить(Метаданные.Справочники.УведомлениеОПравеНаИмущественныйВычетДляНДФЛПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

#КонецОбласти

// Проверяет заполнение кодов вычета НДФЛ документа.
// Параметры:
//		ДокументОбъект - объект проверяемого документа.
//		Отказ - устанавливается в Истина при непрохождении проверки.
Процедура ПроверитьЗаполненияКодовВычетаДокумента(ДокументОбъект, Отказ) Экспорт
	
	Если Не ВыполнятьПроверкуЗаполненияКодовВычета(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ДокументОбъект.НДФЛ.Выгрузить(), "ВТДокументНДФЛ");
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, 
	ДокументОбъект.ПримененныеВычетыНаДетейИИмущественные.Выгрузить(), "ВТДокументПримененныеВычетыНаДетейИИмущественные");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументНДФЛ.ФизическоеЛицо,
		|	ДокументНДФЛ.ИдентификаторСтрокиНДФЛ,
		|	ДокументНДФЛ.НомерСтроки,
		|	""ПредставлениеВычетовНаДетейИИмущественных"" КАК ПолеВычета
		|ИЗ
		|	ВТДокументНДФЛ КАК ДокументНДФЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументПримененныеВычетыНаДетейИИмущественные КАК ДокументПримененныеВычетыНаДетейИИмущественные
		|		ПО ДокументНДФЛ.ИдентификаторСтрокиНДФЛ = ДокументПримененныеВычетыНаДетейИИмущественные.ИдентификаторСтрокиНДФЛ
		|ГДЕ
		|	ДокументПримененныеВычетыНаДетейИИмущественные.КодВычета = &ПустойКодВычета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументНДФЛ.ФизическоеЛицо,
		|	ДокументНДФЛ.ИдентификаторСтрокиНДФЛ,
		|	ДокументНДФЛ.НомерСтроки,
		|	""ПредставлениеВычетовЛичных""
		|ИЗ
		|	ВТДокументНДФЛ КАК ДокументНДФЛ
		|ГДЕ
		|	(ДокументНДФЛ.ПримененныйВычетЛичный <> 0
		|				И ДокументНДФЛ.ПримененныйВычетЛичныйКодВычета = &ПустойКодВычета
		|			ИЛИ ДокументНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату <> 0
		|				И ДокументНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета = &ПустойКодВычета)";
		
	Запрос.УстановитьПараметр("ПустойКодВычета", Справочники.ВидыВычетовНДФЛ.ПустаяСсылка());
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	МаксимальноСообщений = 10;
	ВыводимыхСообщений = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Отказ = Истина;
		Если ВыводимыхСообщений < МаксимальноСообщений Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %1 сотрудника %2 обнаружены незаполненные коды вычетов НДФЛ'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.НомерСтроки,
				Выборка.ФизическоеЛицо);
			
			ПолеСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.НДФЛ[%1].%2", Выборка.НомерСтроки-1, Выборка.ПолеВычета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ПолеСообщения, , Отказ);
			ВыводимыхСообщений = ВыводимыхСообщений + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнятьПроверкуЗаполненияКодовВычета(ДокументОбъект)
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("НДФЛ") = Неопределено
		Или МетаданныеДокумента.ТабличныеЧасти.Найти("ПримененныеВычетыНаДетейИИмущественные") = Неопределено  Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ДокументОбъект.НДФЛ.Количество() > 0;
	
КонецФункции

Процедура ПрочитатьИННвСтранеГражданства(МенеджерВременныхТаблиц, Сотрудники, Дата)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГражданствоФизическихЛицСрезПоследних.ИНН КАК ИННвСтранеГражданства,
	|	ГражданствоФизическихЛицСрезПоследних.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТИННвСтранеГражданства
	|ИЗ
	|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&Дата, ) КАК ГражданствоФизическихЛицСрезПоследних
	|ГДЕ
	|	ГражданствоФизическихЛицСрезПоследних.ФизическоеЛицо В(&Сотрудники)";
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти