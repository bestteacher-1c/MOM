
#Область ПрограммныйИнтерфейс

// Выполняет открытие формы настройки счетов учета, для случая, когда счета учета задаются для строк табличной части
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма, из которой открывается настройка
// 	ИмяТЧ - Строка - Имя табличной части с счетами учета
// 	ИдентификаторСтроки - Число - Идентификатор строки таблицы формы
// 	ПараметрыФормы - Структура, Неопределено - Значения параметров открытия формы настройки (счета учета)
//  СоответствиеИменРеквизитов - Соответствие, Неопределено - переопределение стандартных имен реквизитов (см. метод НастройкаОтраженияВРеглУчете),
//		где ключем выступает стандартное имя, а значением - имя реквизита, как оно задано в строке).
//
Процедура ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(Форма, ИмяТЧ, ИдентификаторСтроки, ПараметрыФормы = Неопределено, СоответствиеИменРеквизитов = Неопределено) Экспорт
	
	Если Не ТипЗнч(СоответствиеИменРеквизитов) = Тип("Соответствие") Тогда
		СоответствиеИменРеквизитов = Новый Соответствие;
	КонецЕсли;
	Если СоответствиеИменРеквизитов.Получить("ПредставлениеОтраженияВРеглУчете") = Неопределено Тогда
		// Если не задано представление отражения в регл. учете, задаем его по умолчанию.
		СоответствиеИменРеквизитов.Вставить("ПредставлениеОтраженияВРеглУчете", "ПредставлениеОтраженияВРеглУчете");
	КонецЕсли;
	
	СтрокаТЧ = Форма.Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НастройкаОтраженияВРеглУчете", НастройкаОтраженияВРеглУчете(СтрокаТЧ, СоответствиеИменРеквизитов));
		ПараметрыФормы.НастройкаОтраженияВРеглУчете.Организация = Форма.Объект.Организация;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма",               Форма);
	ДопПараметры.Вставить("ИмяТЧ",               ИмяТЧ);
	ДопПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ДопПараметры.Вставить("СоответствиеИменРеквизитов", СоответствиеИменРеквизитов);
	
	Если ПараметрыФормы.Свойство("ПодбираемыеАналитики") Тогда
		ДопПараметры.Вставить("ПодбираемыеАналитики", ПараметрыФормы.ПодбираемыеАналитики);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаОтраженияВРеглУчетеАктиваПассиваСтрокиТЧЗавершение", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаОтраженияВРеглУчетеПрочегоАктиваПассива", 
		ПараметрыФормы, Форма, , , , ОписаниеОповещения); 

КонецПроцедуры

// Выполняет открытие формы настройки счетов учета, для случая, когда счет учета задается в целом для документа
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма, из которой открывается настройка
// 	ОписаниеОповещения - ОписаниеОповещения, Неопределено - Описание оповещения закрытия формы настройки
// 	ПараметрыФормы - Структура, Неопределено - Значения параметров открытия формы настройки (счета учета)
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки:
//		СоответствиеИменРеквизитов - Соответствие, Неопределено - переопределение стандартных имен реквизитов (см. метод НастройкаОтраженияВРеглУчете),
//				где ключем выступает стандартное имя, а значением - имя реквизита, как оно задано в объекте).
//		ИмяЭлементаКоманды - имя элемента команды, заголовок которого необходимо переопределить. Если не задано будет использован "НастроитьОтражениеВРеглУчете".
//
Процедура ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассива(Форма, ОписаниеОповещения = Неопределено, ПараметрыФормы = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("СоответствиеИменРеквизитов", Новый Соответствие);
	Параметры.Вставить("ИмяЭлементаКоманды", "НастроитьОтражениеВРеглУчете");
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НастройкаОтраженияВРеглУчете", НастройкаОтраженияВРеглУчете(Форма.Объект, Параметры.СоответствиеИменРеквизитов));
	КонецЕсли;
	
	Если ОписаниеОповещения = Неопределено Тогда 
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма", Форма);
		ДопПараметры.Вставить("СоответствиеИменРеквизитов", Параметры.СоответствиеИменРеквизитов);
		ДопПараметры.Вставить("ИмяЭлементаКоманды", Параметры.ИмяЭлементаКоманды);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаОтраженияВРеглУчетеАктиваПассиваЗавершение", ЭтотОбъект, ДопПараметры);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.НастройкаОтраженияВРеглУчетеПрочегоАктиваПассива", 
		ПараметрыФормы, Форма, , , , ОписаниеОповещения); 
	
КонецПроцедуры

// Выполняет проверку вида деятельности НДС, выбранного в документе, отражению в регл. учете номенклатуры, статей
// расходов, статей прочих активов. В случае, если поступают компоненты ОС, ОС или НМА предлагает установить
// соответствующий вид деятельности НДС.
//
// Параметры:
// 	Объект - ДокументОбъект - Документ, вид деятельности НДС в котором необходимо проверить
// 	ОписаниеОповещения - ОписаниеОповещения - Описание оповещения, обработку которого по окончании необходимо выполнить
// 	ИмяРеквизитаДеятельностьНДС - Строка - Имя реквизита, определяющего вид деятельности НДС.
//
Процедура ПроверитьВыборОСиНМА(Объект, ОписаниеОповещения, ИмяРеквизитаДеятельностьНДС) Экспорт
	
	Результат = РеглУчетВызовСервера.ЗадаватьВопросПоИзменениюДеятельности(Объект);
	
	Если Результат.Задавать Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ДополнительныеПараметры.Вставить("Объект", Объект);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаДеятельностьНДС", ИмяРеквизитаДеятельностьНДС);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru = 'Установить'")); 
		Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru = 'Не устанавливать'")); 
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'")); 
		
		НовоеОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаПоИзменениюДеятельностиЗакупки", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(НовоеОписаниеОповещения, 
			Результат.ТекстВопроса,
			Кнопки);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура отрабатывает событие ОбработкаВыбора для отбора настроек компоновщика настроек, расположенного на форме.
//
// Параметры:
//		КомпоновщикНастроек - Компоновщик настроек
//		Форма - Форма - форма, в которой расположен элемент, событие которого обрабатывается
//		Элемент - ЭлементФормы - параметр события ОбработкаВыбора
//		ДанныеВыбора -  СписокЗначений - параметр события ОбработкаВыбора
//		СтандартнаяОбработка - Булево - параметр события ОбработкаВыбора
//		СписокПараметров - Структура с ключами Номенклатура, Склад, Организация, Контрагент, ДоговорКонтрагента.
Процедура ОтборыПравоеЗначениеНачалоВыбора(КомпоновщикНастроек, Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров) Экспорт
	
	Элементы = Форма.Элементы;
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;
	
	Если Элементы.Отборы.ТекущиеДанные <> Неопределено Тогда
		Поле         = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение;
		Значение     = Элементы.Отборы.ТекущиеДанные.ПравоеЗначение;
		
		ВидСравненияСтрока = Элементы.Отборы.ТекущиеДанные.ВидСравнения;
		
		ТипПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, Поле, "Тип");
		
		// Принятая в конфигурации обработка работает только для равенства/неравенства
		Если Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.Равно)
			ИЛИ Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеРавно) Тогда
			
			Для Каждого СтрокаОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
						ЗначениеОтбора = ?(ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("СписокЗначений"), СтрокаОтбора.ПравоеЗначение, 
												?(СтрокаОтбора.ПравоеЗначение.Количество() > 0, СтрокаОтбора.ПравоеЗначение[0].Значение, Неопределено));
						ТипЗначенияПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, СтрокаОтбора.ЛевоеЗначение, "Тип");
						
						Если ТипЗначенияПоля = ОписанияТиповВидовСубконто.Номенклатура Тогда
							СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.Склад Тогда
							СписокПараметров.Вставить("Склад", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.Контрагент Тогда
							СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.ДоговорКонтрагента Тогда
							СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НастройкаОтраженияВРеглУчете(Объект, СоответствиеИменРеквизитов) Экспорт
		
	Результат = Новый Структура;
	Результат.Вставить("СчетУчета");
	Результат.Вставить("Субконто1");
	Результат.Вставить("Субконто2");
	Результат.Вставить("Субконто3");
	Результат.Вставить("АналитикаАктивовПассивов");
	Результат.Вставить("Организация");
	
	ЗаполнитьЗначенияСвойств(Результат, Объект);
	
	Для каждого СоответствиеИмениРеквизита Из СоответствиеИменРеквизитов Цикл
		Если Результат.Свойство(СоответствиеИмениРеквизита.Ключ) Тогда
			Результат.Вставить(СоответствиеИмениРеквизита.Ключ, Объект[СоответствиеИмениРеквизита.Значение]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура НастройкаОтраженияВРеглУчетеАктиваПассиваСтрокиТЧЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ДопПараметры.Форма.Объект;
	ИмяТЧ = ДопПараметры.ИмяТЧ;
	ИдентификаторСтроки = ДопПараметры.ИдентификаторСтроки;
	
	Если ДопПараметры.Свойство("ПодбираемыеАналитики") Тогда
		ПодбираемыеАналитики = ДопПараметры.ПодбираемыеАналитики;
	Иначе
		ПодбираемыеАналитики = Неопределено;
	КонецЕсли;

	Строка = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
	ЗаполнитьЗначенияСвойств(Строка, Результат);
	
	Для каждого СоответствиеИмениРеквизита Из ДопПараметры.СоответствиеИменРеквизитов Цикл
		Если Результат.Свойство(СоответствиеИмениРеквизита.Ключ) Тогда
			Строка[СоответствиеИмениРеквизита.Значение] = Результат[СоответствиеИмениРеквизита.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	НастройкаОтраженияВРеглУчете = НастройкаОтраженияВРеглУчете(Строка, ДопПараметры.СоответствиеИменРеквизитов);
	ИмяПредставления = ДопПараметры.СоответствиеИменРеквизитов.Получить("ПредставлениеОтраженияВРеглУчете"); 
	Строка[ИмяПредставления] = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(НастройкаОтраженияВРеглУчете, ПодбираемыеАналитики);
	
	ДопПараметры.Форма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

Процедура НастройкаОтраженияВРеглУчетеАктиваПассиваЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
		
	ЗаполнитьЗначенияСвойств(Форма.Объект, Результат);
	
	Для каждого СоответствиеИмениРеквизита Из ДопПараметры.СоответствиеИменРеквизитов Цикл
		Если Результат.Свойство(СоответствиеИмениРеквизита.Ключ) Тогда
			Форма.Объект[СоответствиеИмениРеквизита.Значение] = Результат[СоответствиеИмениРеквизита.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	НастройкаОтраженияВРеглУчете = НастройкаОтраженияВРеглУчете(Форма.Объект, ДопПараметры.СоответствиеИменРеквизитов);
	ПредставлениеОтраженияВРеглУчете = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(НастройкаОтраженияВРеглУчете);
	
	Форма.Элементы[ДопПараметры.ИмяЭлементаКоманды].Заголовок = ПредставлениеОтраженияВРеглУчете;
	
КонецПроцедуры

Процедура ОбработкаВопросаПоИзменениюДеятельностиЗакупки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Объект[ДополнительныеПараметры.ИмяРеквизитаДеятельностьНДС] = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, КодВозвратаДиалога.Да);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля)
	
	Перем ОписанияТиповВидовСубконто;
	
	ОписанияТиповВидовСубконто = Форма .ОписанияТиповВидовСубконто;
	
	Если ТипЗнч(ТипПоля) <> Тип("ОписаниеТипов") Тогда
		
		Возврат;
		
	ИначеЕсли ТипПоля.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(Значение);
		Если ?(ТипЭлемента = Неопределено, Истина, НЕ ТипПоля.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ТипПоля.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
			ЗначенияОтборов.Вставить("Владелец", СписокПараметров.Организация);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент);
	ИначеЕсли ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
				ЗначенияОтборов.Вставить(ИмяРеквизитаОрганизации, СписокПараметров.Организация);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
			ЗначенияОтборов.Вставить("Организация", СписокПараметров.Организация);
		КонецЕсли;
		ИмяРеквизитаКонтрагента = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
		Если ЗначениеЗаполнено(СписокПараметров.Контрагент) Тогда
			ЗначенияОтборов.Вставить(ИмяРеквизитаКонтрагента, СписокПараметров.Контрагент);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
		
	ИначеЕсли ТипПоля = ОписанияТиповВидовСубконто.ДокументРасчетовСКонтрагентами 
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОбъекта  = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
			ПараметрыОбъекта.Вставить("Организация", СписокПараметров.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.Контрагент) Тогда
			ПараметрыОбъекта.Вставить("Контрагент", СписокПараметров.Контрагент);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.ДоговорКонтрагента) Тогда
			ПараметрыОбъекта.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.Дата) Тогда
			ПараметрыОбъекта.Вставить("Дата", СписокПараметров.Дата);
		КонецЕсли;
		ПараметрыОбъекта.Вставить("ТипыДокументов", ТипПоля);
		
		ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
		
		ОткрытьФорму("Документ.ПервичныйДокумент.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
