
#Область ПрограммныйИнтерфейс


// Дополнительный обработчик для документов, в печатных формах которых используются проводки.
// Проверяет, сформированы ли проводки по документам и предлагает отразить документы в регл. учете, если это не так.
// Затем документы выводятся на печать.
//
// Параметры:
//	ОписаниеКоманды - Структура - структура с описанием команды.
//
// Возвращаемое значение:
//	Истина
//
Функция ПроверкаОтраженияВРеглУчете(ОписаниеКоманды) Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	ПараметрыПечати.Вставить("ОбъектыПечати", ОписаниеКоманды.ОбъектыПечати);
	
	ДокументыДляПроверки = ПараметрыПечати.ОбъектыПечати;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьПечать", ЭтотОбъект, ПараметрыПечати);
	
	ДокументыБезПроводок = РеглУчетВызовСервера.ПроверитьПраваДоступаОтражениеДокументовВРеглУчете(ДокументыДляПроверки);
	ПараметрыПечати.Вставить("ДокументыБезПроводок", ДокументыБезПроводок);
	Если ДокументыБезПроводок.Количество() > 0 Тогда
		ПроверкаОтраженияВРеглУчетеДиалогОтражения(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Дополнительный обработчик для документов, в печатных формах которых используются проводки.
// Проверяет, сформированы ли проводки по документам и предлагает отразить документы в регл. учете, если это не так.
// Затем документы выводятся на печать.
//
// Параметры:
//	ОписаниеКоманды - Структура - структура с описанием команды.
//
// Возвращаемое значение:
//	Истина
//
Функция ПроверкаОтраженияВРеглУчетеРасширенный(ОписаниеКоманды) Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	ПараметрыПечати.Вставить("ОбъектыПечати", ОписаниеКоманды.ОбъектыПечати);
	
	ДокументыДляПроверки = ПараметрыПечати.ОбъектыПечати;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьПечать", ЭтотОбъект, ПараметрыПечати);
	
	ДокументыБезПроводок = РеглУчетВызовСервера.ПроверитьПраваДоступаОтражениеДокументовВРеглУчетеРасширенный(ДокументыДляПроверки);
	ПараметрыПечати.Вставить("ДокументыБезПроводок", ДокументыБезПроводок);
	Если ДокументыБезПроводок.Количество() > 0 Тогда
		ПроверкаОтраженияВРеглУчетеДиалогОтражения(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Продолжение функции УправлениеПечатьюУТКлиент.ПроверкаОтраженияВРеглУчете
Процедура ПроверкаОтраженияВРеглУчетеДиалогОтражения(ОписаниеПроцедурыЗавершения)
	
	ПараметрыПечати = ОписаниеПроцедурыЗавершения.ДополнительныеПараметры;
	
	Если ПараметрыПечати.ДокументыБезПроводок.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Для заполнения в печатной форме счетов учета необходимо, чтобы документ был отражен в регл. учете.
		|Отразить документ в регл. учете перед продолжением печати?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Для заполнения в печатной форме счетов учета необходимо, чтобы документы были отражены в регл. учете.
		|Отразить документы в регл. учете перед продолжением печати?'");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаОтраженияВРеглУчетеФормированиеПроводок", ЭтотОбъект, ОписаниеПроцедурыЗавершения);
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

// Продолжение функции УправлениеПечатьюУТКлиент.ПроверкаОтраженияВРеглУчете
Процедура ПроверкаОтраженияВРеглУчетеФормированиеПроводок(РезультатВопроса, ОписаниеПроцедурыЗавершения) Экспорт
	
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПечати = ОписаниеПроцедурыЗавершения.ДополнительныеПараметры;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДокументыБезПроводок = РеглУчетВызовСервера.ОтразитьДокументыВРеглУчете(ПараметрыПечати.ДокументыБезПроводок, Истина);
		ПараметрыПечати.Вставить("ДокументыБезПроводок", ДокументыБезПроводок);
	Иначе
		ПараметрыПечати.Вставить("ДокументыБезПроводок", Новый Массив);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеПроцедурыЗавершения);
	
КонецПроцедуры

// Продолжение функции УправлениеПечатьюУТКлиент.ПроверкаОтраженияВРеглУчете
Процедура ПродолжитьПечать(Результат, ПараметрыПечати) Экспорт
	
	ОписаниеКоманды = ПараметрыПечати.ОписаниеКоманды;
	ОбъектыПечати = ПараметрыПечати.ОбъектыПечати;
	
	ПередаваемыеПараметрыПечати = Новый Структура;
	ПередаваемыеПараметрыПечати.Вставить("ДокументыБезПроводок", ПараметрыПечати.ДокументыБезПроводок);
	
	Если ОписаниеКоманды.Идентификатор = "КомплектДокументов" Тогда
		УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов(ОписаниеКоманды);
	ИначеЕсли ОписаниеКоманды.Идентификатор = "КомплектДокументовСНастройкой" Тогда
		УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой(ОписаниеКоманды);
	Иначе
		Если ОписаниеКоманды.СразуНаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(ОписаниеКоманды.МенеджерПечати, ОписаниеКоманды.Идентификатор,
				ОбъектыПечати, ПередаваемыеПараметрыПечати);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ОписаниеКоманды.МенеджерПечати, ОписаниеКоманды.Идентификатор,
				ОбъектыПечати, ОписаниеКоманды.Форма, ПередаваемыеПараметрыПечати);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
