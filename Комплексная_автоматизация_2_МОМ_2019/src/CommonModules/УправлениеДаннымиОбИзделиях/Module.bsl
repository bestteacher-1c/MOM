////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Заполняет спецификацию в строках
//
// Параметры:
//  МассивСтрок					 - ДанныеФормыСтруктура, СтрокаТабличнойЧасти - строки в которых нужно заполнить спецификацию
//  МассивДанныхПоНоменклатуре	 - Массив									 - содержит структуру данных о номенклатуре
//  ПараметрыВыбораСпецификаций	 - Структура								 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций()
//  ТолькоНезаполненные			 - Булево									 - Истина, если нужно заполнить спецификацию только если она не указана.
//
Процедура ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанныхПоНоменклатуре, ПараметрыВыбораСпецификаций, ИмяПоляСпецификация = "Спецификация", ТолькоНезаполненные = Ложь) Экспорт

	СпецификацииИзделий = СпецификацииИзделий(МассивДанныхПоНоменклатуре, ПараметрыВыбораСпецификаций);
	
	ИмяПоля = ИмяПоляСпецификация;
	ИндексДанных = 0;
	Для каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяПоля]) ИЛИ НЕ ТолькоНезаполненные Тогда
			
			ДанныеСпецификации = СпецификацииИзделий[ИндексДанных];
			
			Если ДанныеСпецификации <> Неопределено Тогда
				ТекущаяСтрока[ИмяПоля] = ДанныеСпецификации.Спецификация;
			Иначе
				ТекущаяСтрока[ИмяПоля] = Неопределено;
			КонецЕсли;
			
			ЗначенияЗаполнения = Новый Структура;
			Если ДанныеСпецификации <> Неопределено Тогда
				ЗначенияЗаполнения.Вставить("ОсновнаяСпецификация", ДанныеСпецификации.ОсновнаяСпецификация);
				ЗначенияЗаполнения.Вставить("ВыбранаОсновнаяСпецификация", ДанныеСпецификации.ВыбранаОсновнаяСпецификация);
				ЗначенияЗаполнения.Вставить("МногоэтапныйПроизводственныйПроцесс", ДанныеСпецификации.МногоэтапныйПроизводственныйПроцесс);
				ЗначенияЗаполнения.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", ДанныеСпецификации.ОптимальноеКоличествоПередачиМеждуЭтапами);
			Иначе
				ЗначенияЗаполнения.Вставить("ОсновнаяСпецификация", Ложь);
				ЗначенияЗаполнения.Вставить("ВыбранаОсновнаяСпецификация", Ложь);
				ЗначенияЗаполнения.Вставить("МногоэтапныйПроизводственныйПроцесс", Ложь);
				ЗначенияЗаполнения.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", 1);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначенияЗаполнения);
			
		КонецЕсли;
		
		МассивДанныхПоНоменклатуре[ИндексДанных].Вставить("Спецификация", ТекущаяСтрока[ИмяПоля]);
		ИндексДанных = ИндексДанных + 1;
		
	КонецЦикла; 

КонецПроцедуры

// Заполняет основную спецификацию в коллекции данных, содержащую подразделения, номенклатуру и дату начала производства.
//
// Параметры:
//  Запрос			- Запрос - содержит текст запроса к данным
//  КоллекцияДанных	- ТаблицаЗначений - содержит подразделения, номенклатуру и дату начала производства
//	СтруктураКлючаПоискаСтроки - Структура - структура для поиска данных.
//	ПолеСпецификация - Строка - имя поля спецификации коллекции данных.
//	ТолькоНезаполненные - Булево - признак необходимости заполнять только незаполненные.
//
Процедура ЗаполнитьОсновныеСпецификацииВКоллекции(Запрос,
												КоллекцияДанных,
												СтруктураКлючаПоискаСтроки,
												ПолеСпецификация = "ОсновнаяСпецификация",
												ТолькоНезаполненные = Ложь) Экспорт

	Если КоллекцияДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("ДляСпискаНоменклатуры");
	Запрос.Текст = Запрос.Текст + "
								|;
								|
								|////////////////////////////////////////////////////////////////////////////////
								|"
								+ ПолучитьТекстЗапросаОсновнойСпецификации(ПараметрыЗапроса);
								
	ОсновныеСпецификации = Запрос.Выполнить().Выгрузить();
	ОсновныеСпецификации.Индексы.Добавить("Номенклатура,Характеристика,НачалоПроизводства");
	
	Для каждого СтрокаДанных Из КоллекцияДанных Цикл
		
		Если ТолькоНезаполненные
			И ЗначениеЗаполнено(СтрокаДанных[ПолеСпецификация]) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		Для каждого КлючПоиска Из СтруктураКлючаПоискаСтроки Цикл
			СтруктураПоиска.Вставить(КлючПоиска.Ключ, СтрокаДанных[КлючПоиска.Значение]);
		КонецЦикла;
		
		СписокОсновныхСпецификаций = ОсновныеСпецификации.НайтиСтроки(СтруктураПоиска);
		
		ОсновнаяСпецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка();
		Приоритет = 100;
		
		// Найдем спецификацию с минимальным приоритетом
		Для каждого СтрокаСпецификация Из СписокОсновныхСпецификаций Цикл
			Если СтрокаСпецификация.Приоритет < Приоритет Тогда
				ОсновнаяСпецификация = СтрокаСпецификация.Спецификация;
				Приоритет = СтрокаСпецификация.Приоритет;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаДанных[ПолеСпецификация] = ОсновнаяСпецификация;
	КонецЦикла;

КонецПроцедуры

// Заполняет служебные реквизиты по номенклатуре в коллекции
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция - Таблица, в которой необходимо заполнить реквизиты
// 		Поля - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
// 		МассивСтрок - Массив - массив строк, которые нужно обработать.
//
Процедура ЗаполнитьСлужебныеРеквизитыПоСпецификации(КоллекцияДанных, Поля, МассивСтрок = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Спецификация КАК Спецификация,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.Ссылка КАК Спецификация,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПолуфабрикаты,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПустыеСтатьиКалькуляции,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУточняемаяНоменклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУточняемаяХарактеристика
	|ПОМЕСТИТЬ СпецификацииСПолуфабрикатами
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
	|ГДЕ
	|	МатериалыИУслуги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИУслуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика КАК Характеристика,
	|	ВыходныеИзделия.Ссылка КАК Ссылка,
	|	ВыходныеИзделия.Ссылка.Статус КАК Статус,
	|	ВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
	|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТВыходныеИзделия
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	РесурсныеСпецификацииВозвратныеОтходы.Номенклатура,
	|	РесурсныеСпецификацииВозвратныеОтходы.Характеристика,
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка,
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка.Статус,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная),
	|	РесурсныеСпецификацииВозвратныеОтходы.КоличествоУпаковок
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК РесурсныеСпецификацииВозвратныеОтходы
	|ГДЕ
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.НомерСтроки ЕСТЬ NULL 
	|				ИЛИ ВыходныеИзделия.НомерСтроки = 1
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПобочныйВыход,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.Ссылка ЕСТЬ NULL 
	|				И ТаблицаДокумента.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ВыходныеИзделия.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ТОГДА 2
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьПустыеСтатьиКалькуляции
	|			ТОГДА 4
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьУточняемаяНоменклатура
	|			ТОГДА 5
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьУточняемаяХарактеристика
	|			ТОГДА 6
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодОшибки,
	|	НЕОПРЕДЕЛЕНО КАК Распоряжение,
	|	0 КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.ДоляСтоимости ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ ВыходныеИзделия.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВыходныеИзделия.КоличествоУпаковок,0) > 0 И (ВЫРАЗИТЬ(ТаблицаДокумента.КоличествоУпаковок / ВыходныеИзделия.КоличествоУпаковок - 0.5 КАК ЧИСЛО(15, 0))) < (ВЫРАЗИТЬ(ТаблицаДокумента.КоличествоУпаковок / ВыходныеИзделия.КоличествоУпаковок КАК ЧИСЛО(15, 3)))
	|				И ВыходныеИзделия.НомерСтроки = 1
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодПредупреждения,
	|	ЕСТЬNULL(ВыходныеИзделия.ТипСтоимости, ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается)) КАК ТипСтоимости
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыходныеИзделия КАК ВыходныеИзделия
	|		ПО ТаблицаДокумента.Спецификация = ВыходныеИзделия.Ссылка
	|			И ТаблицаДокумента.Номенклатура = ВыходныеИзделия.Номенклатура
	|			И (ТаблицаДокумента.Характеристика = ВыходныеИзделия.Характеристика
	|				ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииСПолуфабрикатами КАК СпецификацииСПолуфабрикатами
	|		ПО ТаблицаДокумента.Спецификация = СпецификацииСПолуфабрикатами.Спецификация";
	
	Если МассивСтрок = Неопределено Тогда
		ТаблицаДокумента = КоллекцияДанных.Выгрузить(, "Номенклатура, Характеристика, Спецификация, КоличествоУпаковок, НомерСтроки");
	Иначе
		ТаблицаДокумента = КоллекцияДанных.Выгрузить(МассивСтрок, "Номенклатура, Характеристика, Спецификация, КоличествоУпаковок, НомерСтроки");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ОтборНомерСтроки = Новый Структура("НомерСтроки");
	
	Для Каждого Строка Из КоллекцияДанных Цикл
		ОтборНомерСтроки.НомерСтроки = Строка.НомерСтроки;
		Если Выборка.НайтиСледующий(ОтборНомерСтроки) Тогда
			ЗаполнитьЗначенияСвойств(Строка, Выборка, Поля);
			Выборка.Сбросить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет корректность заполнения полуфабрикатов производимых в процессе
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция - Таблица, в которой необходимо заполнить реквизиты
// 		ПараметрыПроверки - Структура - Параметры проверок, которые требуется выполнить
// 		Отказ - Булево - признак наличия ошибок заполнения
// 		Объект - СправочникОбъект.РесурсныеСпецификации,
//				ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа,
//				ДокументСсылка.ЗаказНаПроизводство - объект, связанный с проверкой.
//
Процедура ПроверитьСпецификацииПолуфабрикатов(КоллекцияДанных, ПараметрыПроверки, Отказ, Объект = Неопределено) Экспорт
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	ПутьКДанным = "";
	ИмяРеквизита = "ИсточникПолученияПолуфабриката";
	
	СтруктураПроверок = ПараметрыПроверки.СтруктураПроверок;
	ВыводитьСообщения = Истина;
	
	Если ПараметрыПроверки.Свойство("ПутьКДанным") Тогда
		ПутьКДанным = ПараметрыПроверки.ПутьКДанным;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ИмяРеквизита") Тогда
		ИмяРеквизита = ПараметрыПроверки.ИмяРеквизита;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ВыводитьСообщения") Тогда
		ВыводитьСообщения = ПараметрыПроверки.ВыводитьСообщения;
	КонецЕсли;
	
	ШаблонСообщенияНетИзделия              = НСтр("ru='В выходных изделиях спецификации полуфабриката должен быть полуфабрикат, который потребляется в текущей спецификации (список ""Материалы и работы"", строка %1)'");
	ШаблонСообщенияПереработкаНаСтороне    = НСтр("ru='По спецификации полуфабриката производственный процесс выполняется силами переработчика. Полуфабрикаты должны производиться собственными силами (список ""Материалы и работы"", строка %1)'");
	ШаблонСообщенияСпецификацияНеДействует = НСтр("ru='Спецификация полуфабриката должна быть действующей (список ""Материалы и работы"", строка %1)'");
	ШаблонСообщенияНекратноеКоличество     = НСтр("ru='В спецификации полуфабриката выход полуфабриката должен быть кратен количеству потребляемого полуфабриката текущей спецификации (список ""Материалы и работы"", строка %1)'");
	
	СписокСпецификаций = Новый Массив;
	СписокСтрокПромежуточныхПолуфабрикатов = Новый Массив;
	
	Для каждого Строка Из КоллекцияДанных Цикл
		
		Если Строка.ПроизводитсяВПроцессе Тогда
		
			Если ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
				
				Если ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
					
					СписокСпецификаций.Добавить(Строка.ИсточникПолученияПолуфабриката);
					
				ИначеЕсли СтруктураПроверок.Свойство("ЗаполнениеВнутреннихПолуфабрикатов") Тогда
					
					СписокСтрокПромежуточныхПолуфабрикатов.Добавить(Строка);
					
				КонецЕсли;
			
			ИначеЕсли СтруктураПроверок.Свойство("ЗаполнениеСпецификации") Тогда // только 2.1
				
				Если Не ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
					
					Если ВыводитьСообщения Тогда
						Если ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
							Шаблон = НСтр("ru='Не заполнена колонка ""Спецификация полуфабриката"" в строке %1 списка ""Материалы и работы""'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						Иначе
							Шаблон = НСтр("ru='Не заполнена колонка ""Этап выпуска полуфабриката"" в строке %1 списка ""Материалы и работы""'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						КонецЕсли;
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, ИмяРеквизита);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
					Иначе
						Отказ = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
					
					Если ВыводитьСообщения Тогда
						Шаблон = НСтр("ru='Не заполнена колонка ""Номенклатура"" в строке %1 списка ""Материалы и работы"". Колонка обязательна для заполнения для производимых полуфабрикатов.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, "Номенклатура");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения,
							Объект,
							Поле,
							ПутьКДанным,
							Отказ);
					Иначе
						Отказ = Истина;
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыПроизводства.Владелец КАК Ссылка
		|ПОМЕСТИТЬ ВТСпецификацииПолуфабрикатов
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (&СпецификацииПолуфабрикатов)
		|	И ЭтапыПроизводства.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РесурсныеСпецификации.Ссылка КАК Ссылка,
		|	РесурсныеСпецификации.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА СпецификацииСЭтапамиНаСтороне.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПереработкаНаСтороне
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпецификацииПолуфабрикатов КАК СпецификацииСЭтапамиНаСтороне
		|		ПО РесурсныеСпецификации.Ссылка = СпецификацииСЭтапамиНаСтороне.Ссылка
		|ГДЕ
		|	РесурсныеСпецификации.Ссылка В(&СпецификацииПолуфабрикатов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РесурсныеСпецификацииВыходныеИзделия.Ссылка КАК Ссылка,
		|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура КАК Номенклатура,
		|	РесурсныеСпецификацииВыходныеИзделия.Характеристика КАК Характеристика,
		|	РесурсныеСпецификацииВыходныеИзделия.Количество КАК Количество
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
		|ГДЕ
		|	РесурсныеСпецификацииВыходныеИзделия.Ссылка В(&СпецификацииПолуфабрикатов)");
	
	Запрос.УстановитьПараметр("СпецификацииПолуфабрикатов", СписокСпецификаций);
	
	Результат = Запрос.ВыполнитьПакет();
	
	РеквизитыСпецификаций = Результат[1].Выгрузить();
	ДанныеСпецификаций    = Результат[2].Выгрузить();
	
	РеквизитыСпецификаций.Индексы.Добавить("Ссылка");
	
	Для Каждого СтрокаМатериал Из КоллекцияДанных Цикл
	
		Если НЕ СтрокаМатериал.ПроизводитсяВПроцессе 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаМатериал.ИсточникПолученияПолуфабриката)
			ИЛИ ТипЗнч(СтрокаМатериал.ИсточникПолученияПолуфабриката) <> Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", СтрокаМатериал.ИсточникПолученияПолуфабриката);
		СпецификацияПолуфабриката = ДанныеСпецификаций.НайтиСтроки(СтруктураПоиска);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, ИмяРеквизита);
		
		Реквизиты = РеквизитыСпецификаций.Найти(СтрокаМатериал.ИсточникПолученияПолуфабриката, "Ссылка");
		Если Реквизиты <> Неопределено И Реквизиты.Статус <> Перечисления.СтатусыСпецификаций.Действует И СтруктураПроверок.Свойство("СтатусСпецификации") Тогда
			
			// Спецификация не действует
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияСпецификацияНеДействует, 
					СтрокаМатериал.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
		Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21 И СтруктураПроверок.Свойство("ПроизводствоНаСтороне")
			И Реквизиты <> Неопределено И Реквизиты.ЕстьПереработкаНаСтороне Тогда
			
			// Производство на стороне
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияПереработкаНаСтороне, 
					СтрокаМатериал.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьВыходПолуфабриката = Ложь;
		Для каждого СтрокаИзделиеСпецификацииПолуфабриката Из СпецификацияПолуфабриката Цикл
			Если СтрокаМатериал.Номенклатура = СтрокаИзделиеСпецификацииПолуфабриката.Номенклатура
				И (НЕ ЗначениеЗаполнено(СтрокаИзделиеСпецификацииПолуфабриката.Характеристика)
				ИЛИ СтрокаМатериал.Характеристика = СтрокаИзделиеСпецификацииПолуфабриката.Характеристика) Тогда
				
				ЕстьВыходПолуфабриката = Истина;
				
				Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21 И СтруктураПроверок.Свойство("КратностьПроизводимогоКоличества") Тогда
					Если СтрокаМатериал.Количество <> 0
						И СтрокаИзделиеСпецификацииПолуфабриката.Количество <> 0
						И Цел(СтрокаМатериал.Количество / СтрокаИзделиеСпецификацииПолуфабриката.Количество) <> СтрокаМатериал.Количество / СтрокаИзделиеСпецификацииПолуфабриката.Количество Тогда
						
						Если ВыводитьСообщения Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщенияНекратноеКоличество,
								СтрокаМатериал.НомерСтроки);
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
						Иначе
							Отказ = Истина;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураПроверок.Свойство("СоответствиеСпецификации") Тогда
			Если НЕ ЕстьВыходПолуфабриката Тогда
				// Нет выхода полуфабриката
				Если ВыводитьСообщения Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщенияНетИзделия,
						СтрокаМатериал.НомерСтроки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПроверок.Свойство("ЗаполнениеВнутреннихПолуфабрикатов")
		И СписокСтрокПромежуточныхПолуфабрикатов.Количество() > 0 Тогда
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов = ПараметрыПроверки.ПараметрыПроверкиВнутреннихПолуфабрикатов;
		ТекстЗапроса = ТекстЗапросаПроверкиВнутреннихПолуфабрикатов(ПараметрыПроверкиВнутреннихПолуфабрикатов);
		ТаблицаПотребностиВПолуфабрикатах = ПотребностьВоВнутреннихПолуфабрикатах(ПараметрыПроверкиВнутреннихПолуфабрикатов, СписокСтрокПромежуточныхПолуфабрикатов);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ИспользуетсяПроизводство22", НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство22);
		
		Запрос.УстановитьПараметр("ТаблицаПотребностиВПолуфабрикатах", ТаблицаПотребностиВПолуфабрикатах);
		
		Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "СпецификацияЗаказа" Тогда
			
			Запрос.УстановитьПараметр("ТаблицаЭтаповЗаказа", ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаЭтапов);
		
		КонецЕсли;
		
		Результат = Запрос.ВыполнитьПакет();
		КоличествоПакетов = Результат.Количество();
		
		Если Не Результат[КоличествоПакетов - 4].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 4].Выбрать();
			
			Шаблон = НСтр("ru='Этап выпуска полуфабриката выполняется позже этапа, на котором этот полуфабрикат потребляется (список ""Материалы и работы"", строка %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
					
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 3].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 3].Выбрать();
			
			Шаблон = НСтр("ru='Не допускается указание работ в качестве полуфабрикатов, производимых на этапах (список ""Материалы и работы"", строка %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
						
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 2].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 2].Выбрать();
			
			Шаблон = НСтр("ru='Этап выпуска полуфабриката выполняется переработчиком. Полуфабрикаты должны производиться собственными силами (список ""Материалы и работы"", строка %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
						
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 1].Пустой() Тогда
			
			Шаблон  = НСтр("ru='В выходных изделиях не описан выпуск полуфабриката ""%НоменклатураХарактеристика%"" на этапе ""%ЭтапВыпуска%"" в%Достаточном% количестве%НеХватает% %Количество% %Упаковка%, см. список ""%ТаблицаПолуфабрикатов%"" (список ""Материалы и работы"", строка %НомерСтроки%)'");
			ТекстДостаточном = " " + НСтр("ru='достаточном'");
			ТекстНеХватает   = ", " + НСтр("ru='не хватает'");
			
			СтруктураПоиска = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
				ПараметрыПроверкиВнутреннихПолуфабрикатов.СтруктураПоиска);
			
			ТаблицаПолуфабрикатовОстаток = ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов;
			ТаблицаПолуфабрикатовОстаток.Колонки.Добавить("КоличествоДоступно");
			
			Выборка = Результат[КоличествоПакетов - 1].Выбрать();
			
			Пока Выборка.Следующий() Цикл
			
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				
				НайденныеСтроки = ТаблицаПолуфабрикатовОстаток.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.ВГраница() <> -1 Тогда
					СтрокаПолуфабрикат = НайденныеСтроки[0];
				Иначе
					СтрокаПолуфабрикат = Неопределено;
				КонецЕсли;
				
				Если СтрокаПолуфабрикат = Неопределено Тогда
					КоличествоДоступно = 0;
				ИначеЕсли СтрокаПолуфабрикат.КоличествоДоступно <> Неопределено Тогда
					КоличествоДоступно = СтрокаПолуфабрикат.КоличествоДоступно;
				Иначе
					КоличествоДоступно = СтрокаПолуфабрикат.Количество;
				КонецЕсли;
				
				Если КоличествоДоступно = -1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.Количество > КоличествоДоступно Тогда
					
					Если ВыводитьСообщения Тогда
						
						ТекстСообщения = СтрЗаменить(Шаблон, "%НоменклатураХарактеристика%", 
											НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление, Выборка.ХарактеристикаПредставление));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапВыпуска%", Выборка.ЭтапВыпускаПредставление);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", (Выборка.Количество - КоличествоДоступно)/Выборка.КоэффициентУпаковки);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%", Выборка.УпаковкаПредставление);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаПолуфабрикатов%", ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
						
						Если СтрокаПолуфабрикат <> Неопределено Тогда
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Достаточном%", ТекстДостаточном);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеХватает%", ТекстНеХватает);
						Иначе
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Достаточном%", "");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеХватает%", "");
						КонецЕсли;
						
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
							Выборка.НомерСтроки, 
							ИмяРеквизита);
							
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, 
							Объект, 
							Поле, 
							ПутьКДанным, 
							Отказ);
							
					Иначе
						
						Отказ = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаПолуфабрикат <> Неопределено Тогда
					СтрокаПолуфабрикат.КоличествоДоступно = Макс(КоличествоДоступно - Выборка.Количество, 0);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Проверяет последовательность этапов спецификации или операций маршрутных карт
//
// Параметры:
//  ВладелецОпераций	 - СправочникСсылка	 - ссылка на владельца операций
//  СтруктураПараметров	 - Структура		 - обязательные поля: 
//  											ИмяСправочникаОпераций, ПолеНомерОперации, ПолеНомерСледующейОперации
//  СтруктураПроверок	 - Структура		 - состав проверок и тексты сообщений об ошибках
//  Отказ				 - Булево			 - признак отмены текущего действия.
// 
// Возвращаемое значение:
//  Булево - истина, если последовательность операций правильная.
//
Функция ПоследовательностьОперацийПравильная(ВладелецОпераций, СтруктураПараметров, СтруктураПроверок, Отказ = Ложь) Экспорт
	
	ИмяСправочникаОпераций     = СтруктураПараметров.ИмяСправочникаОпераций;
	ПолеНомерОперации          = СтруктураПараметров.ПолеНомерОперации;
	ПолеНомерСледующейОперации = СтруктураПараметров.ПолеНомерСледующейОперации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпрОперации.Ссылка КАК Операция,
	               |	СпрОперации.Представление КАК Представление,
	               |	СпрОперации." + ПолеНомерОперации + " КАК НомерОперации,
	               |	СпрОперации." + ПолеНомерСледующейОперации + " КАК НомерСледующейОперации,
	               |	МАКСИМУМ(ВЫБОР
	               |		КОГДА СпрСледующиеОперации.Ссылка ЕСТЬ NULL 
	               |				И СпрОперации." + ПолеНомерСледующейОперации + " <> 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ) КАК НетСледующейОперации
	               |ИЗ
	               |	Справочник." + ИмяСправочникаОпераций + " КАК СпрОперации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочникаОпераций + " КАК СпрСледующиеОперации
	               |		ПО СпрОперации." + ПолеНомерСледующейОперации + " = СпрСледующиеОперации." + ПолеНомерОперации + "
	               |			И (СпрСледующиеОперации.Владелец = &Владелец)
	               |			И (НЕ СпрСледующиеОперации.ПометкаУдаления)
	               |ГДЕ
	               |	СпрОперации.Владелец = &Владелец
	               |	И НЕ СпрОперации.ПометкаУдаления
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СпрОперации.Ссылка,
				   |	СпрОперации.Представление,
	               |	СпрОперации." + ПолеНомерОперации + ",
	               |	СпрОперации." + ПолеНомерСледующейОперации;
	
	Запрос.УстановитьПараметр("Владелец", ВладелецОпераций);
	
	СписокОпераций = Запрос.Выполнить().Выгрузить();
	
	СписокОпераций.Колонки.Добавить("ПолеНомерСледующейОперации", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки));
	СписокОпераций.ЗаполнитьЗначения(ПолеНомерСледующейОперации, "ПолеНомерСледующейОперации");
	
	ЕстьОшибки = НЕ ПоследовательностьСпискаОперацийПравильная(СписокОпераций, СтруктураПроверок, ВладелецОпераций);
	
	Отказ = Отказ ИЛИ ЕстьОшибки;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Проверяет заданный список операций/этапов на корректность по следующим критериям:
// - имеется первая операция и она одна;
// - имеется последняя операция;
// - имеются все последующие операции.
//
// Параметры:
//	СписокОпераций - ТаблицаЗначений - операции/этапы для проверки, колонки:
//		* Операция - СправочникСсылка - ссылка на этап/операцию.
//		* Представление - Строка - представление этапа/операции.
//		* НомерОперации - Число - номер операции.
//		* НомерСледующейОперации - Число - номер следующей операции.
//		* НетСледующейОперации - Булево - флаг того, что в списке отсутствует операция,
//			номер которой указан в качестве номера следующей операции.
//		* ПолеНомерСледующейОперации - Строка - наименование реквизита формы, с которым необходимо
//			связать сообщение об отсутствии следующей операции.
//  СтруктураПроверок - Структура - состав проверок и тексты сообщений об ошибках
//  ВладелецОпераций - СправочникСсылка - ссылка на владельца операций.
//
// Возвращаемое значение:
//   Булево   - истина, если последовательность операций правильная.
//
Функция ПоследовательностьСпискаОперацийПравильная(СписокОпераций, СтруктураПроверок, ВладелецОпераций = Неопределено) Экспорт
	
	ЕстьОшибки = Ложь;
	
	#Область НетПервойОперации_НесколькоПервыхОпераций
	
	СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НомерОперации", 1));
	Если СтруктураПроверок.Свойство("НетПервойОперации")
		И СписокСтрок.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НетПервойОперации,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	ИначеЕсли СтруктураПроверок.Свойство("НесколькоПервыхОпераций")
		И СписокСтрок.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НесколькоПервыхОпераций,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НетПоследнейОперации_НесколькоПоследнихОпераций
	
	СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НомерСледующейОперации", 0));
	Если СтруктураПроверок.Свойство("НетПоследнейОперации")
		И СписокСтрок.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НетПоследнейОперации,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	ИначеЕсли СтруктураПроверок.Свойство("НесколькоПоследнихОпераций")
		И СписокСтрок.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НесколькоПоследнихОпераций,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки); 
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НетСледующейОперации
	
	Если СтруктураПроверок.Свойство("НетСледующейОперации") Тогда
		
		СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НетСледующейОперации", Истина));
		Для каждого ЭлементКоллекции Из СписокСтрок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтруктураПроверок.НетСледующейОперации,
				ЭлементКоллекции.Представление);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭлементКоллекции.Операция,
				ЭлементКоллекции.ПолеНомерСледующейОперации,
				,
				ЕстьОшибки);
			
		КонецЦикла;
		
	КонецЕсли;

	#КонецОбласти
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Возвращает параметры выбора спецификаций для номенклатуры.
//
// Параметры:
//  Объект			 - СправочникОбъект, ДокументОбъект, ДанныеФормыСтруктура	 - объект, для которого нужно сформировать параметры.
//  МенеджерОбъекта	 - СправочникМенеджер, ДокументМенеджер						 - менеджер объекта, для которого нужно сформировать параметры.
// 
// Возвращаемое значение:
//  Структура - параметры выбора спецификаций.
//
Функция ПараметрыВыбораСпецификаций(Объект, МенеджерОбъекта) Экспорт
	
	ИменаРеквизитов = МенеджерОбъекта.ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций();
	
	ЗначенияРеквизитов = Неопределено;
	Если ЗначениеЗаполнено(ИменаРеквизитов) Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект))
			ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ИменаРеквизитов);
		Иначе
			ЗначенияРеквизитов = Новый Структура(ИменаРеквизитов);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Объект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(МенеджерОбъекта.ПараметрыВыбораСпецификаций(ЗначенияРеквизитов));
	
КонецФункции

#КонецОбласти

#Область ЭтапыПроизводства

// Заполняет единицу измерения буфера в списке
//
// Параметры:
//  ИнтервалПланирования - ПеречисленияСсылка.ТочностьГрафикаПроизводства	 - интервал планирования
//  СписокВыбора		 - СписокЗначений									 - Список для заполнения.
//
Процедура ЗаполнитьВыборЕдиницыИзмеренияБуфера(ИнтервалПланирования, СписокВыбора) Экспорт

	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.ЕдиницыИзмеренияВремени.День);
	
КонецПроцедуры

// Проверяет соответствуют ли значения реквизитов выбранному подразделению
//  Если не соответствуют то значения очищаются.
//
// Параметры:
//  Объект			 - ДанныеФормы	 - Объект содержащий данные этапа.
//  СписокРеквизитов - Строка		 - Список реквизитов к проверке.
//
Процедура ПроверитьСоответствиеРеквизитовПодразделению(Объект, СписокРеквизитов = "") Экспорт

	Если Объект.Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры


#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

// Проверяет возможность описания партии выпуска по спецификации
// 
// Возвращаемое значение:
//  Булево - Истина, если описание партии выпуска по спецификации доступно
//
Функция ДоступноОписаниеПартииВыпуска() Экспорт
	
	Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
	
КонецФункции

// Проверяет возможность описания типа производственного процесса (сборка, разборка, ремонт).
// 
// Возвращаемое значение:
//  Булево - Истина, если тип производственного процесса доступен.
//
Функция ДоступноОписаниеТипаПроизводственногоПроцесса() Экспорт
	
	Результат = Ложь;
	Возврат Результат;
	
КонецФункции

// Проверяет возможность описания вероятности применения материалов.
// 
// Возвращаемое значение:
//  Булево - Истина, если тип производственного процесса доступен.
//
Функция ДоступноОписаниеВероятностиПримененияМатериалов() Экспорт
	
	Результат = Ложь;
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Спецификации

#Область СпецификацииНоменклатуры

Функция СпецификацииИзделия(Номенклатура, Характеристика, НачалоПроизводства = '00010101', Подразделение = Неопределено, ПараметрыВыбораСпецификаций = Неопределено) Экспорт
	
	СписокСпецификаций = Новый Массив;
	
	ТекстЗапроса = ТекстЗапросаВыбораСпецификацийПоНоменклатуре();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|
	|	СписокСпецификаций.Ссылка КАК Спецификация,
	|	СписокСпецификаций.Представление КАК СпецификацияПредставление,
	|	СписокСпецификаций.Основная КАК ОсновнаяСпецификация,
	|	СписокСпецификаций.ПриоритетОсновная КАК ПриоритетОсновная,
	|
	|	СписокСпецификаций.Ссылка.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	СписокСпецификаций.Ссылка.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	СписокСпецификаций.Ссылка.ОптимальноеКоличествоПередачиМеждуЭтапами КАК ОптимальноеКоличествоПередачиМеждуЭтапами
	|
	|	ИЗ (" + ТекстЗапроса + ") КАК СписокСпецификаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетОсновная, Представление");

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	Запрос.УстановитьПараметр("Подразделение", ?(Подразделение <> Неопределено, Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка()));
	
	ВыполнитьПодстановкуПараметровВЗапросСпецификаций(Запрос, ПараметрыВыбораСпецификаций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеСпецификации = Новый Структура("Спецификация,ОсновнаяСпецификация,МногоэтапныйПроизводственныйПроцесс,ОптимальноеКоличествоПередачиМеждуЭтапами");
			ЗаполнитьЗначенияСвойств(ДанныеСпецификации, Выборка);
			СписокСпецификаций.Добавить(ДанныеСпецификации);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокСпецификаций;
	
КонецФункции

Функция СпецификацииИзделий(ДанныеОбИзделиях, ПараметрыВыбораСпецификаций)
	
	СписокНоменклатуры = Новый ТаблицаЗначений;
	СписокНоменклатуры.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокНоменклатуры.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СписокНоменклатуры.Колонки.Добавить("НачалоПроизводства", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	СписокНоменклатуры.Колонки.Добавить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	СписокНоменклатуры.Колонки.Добавить("ИндексДанных",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	
	Для ИндексДанных = 0 По ДанныеОбИзделиях.ВГраница() Цикл
		СтруктураДанных = ДанныеОбИзделиях[ИндексДанных];
		НоваяСтрока = СписокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
		НоваяСтрока.ИндексДанных = ИндексДанных;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапросаВыбораСпецификацийПоСпискуНоменклатуры();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СписокНоменклатуры.ИндексДанных       КАК Индекс,
	|	СписокНоменклатуры.Номенклатура       КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика     КАК Характеристика,
	|	СписокНоменклатуры.НачалоПроизводства КАК НачалоПроизводства,
	|	СписокНоменклатуры.Подразделение      КАК Подразделение
	|ПОМЕСТИТЬ ВтСписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|
	|	СписокСпецификаций.Индекс КАК ИндексДанных,
	|	
	|	СписокСпецификаций.Ссылка КАК Спецификация,
	|	СписокСпецификаций.Представление КАК СпецификацияПредставление,
	|	СписокСпецификаций.Основная КАК ОсновнаяСпецификация,
	|	СписокСпецификаций.ПриоритетОсновная КАК ПриоритетОсновная,
	|
	|	СписокСпецификаций.Ссылка.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	СписокСпецификаций.Ссылка.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	СписокСпецификаций.Ссылка.ОптимальноеКоличествоПередачиМеждуЭтапами КАК ОптимальноеКоличествоПередачиМеждуЭтапами
	|
	|	ИЗ (" + ТекстЗапроса + ") КАК СписокСпецификаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетОсновная, Представление");
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	ВыполнитьПодстановкуПараметровВЗапросСпецификаций(Запрос, ПараметрыВыбораСпецификаций, Истина);
	
	СписокСпецификаций = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Массив;
	
	Для ИндексДанных = 0 По ДанныеОбИзделиях.ВГраница() Цикл
		
		СтруктураДанных = ДанныеОбИзделиях[ИндексДанных];
		
		ДанныеСпецификации = Неопределено;
		СтрокаТекущаяСпецификация = Неопределено;

		СтруктураПоиска = Новый Структура("ИндексДанных", ИндексДанных);
		СписокСпецификацийИзделия = СписокСпецификаций.НайтиСтроки(СтруктураПоиска);
		
		Если СписокСпецификацийИзделия.Количество() <> 0 Тогда
			
			СпецификацияПоУмолчанию = СписокСпецификацийИзделия[0];
			
			// Если выбрана текущая спецификация, то вернем ее, в случае если она есть в списке доступных.
			Если СтруктураДанных.Свойство("ТекущаяСпецификация") 
				И ЗначениеЗаполнено(СтруктураДанных.ТекущаяСпецификация) Тогда
				Для каждого СтрокаСпецификация Из СписокСпецификацийИзделия Цикл
					Если СтрокаСпецификация.Спецификация = СтруктураДанных.ТекущаяСпецификация Тогда
						СтрокаТекущаяСпецификация = СтрокаСпецификация;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаТекущаяСпецификация <> Неопределено Тогда
				
				ДанныеСпецификации = Новый Структура("Спецификация,ОсновнаяСпецификация,МногоэтапныйПроизводственныйПроцесс,ОптимальноеКоличествоПередачиМеждуЭтапами");
				ЗаполнитьЗначенияСвойств(ДанныеСпецификации, СтрокаТекущаяСпецификация);
				
				ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация", (СпецификацияПоУмолчанию.ОсновнаяСпецификация И СпецификацияПоУмолчанию.Спецификация = СтруктураДанных.ТекущаяСпецификация));
				
			ИначеЕсли СпецификацияПоУмолчанию.ОсновнаяСпецификация ИЛИ СписокСпецификацийИзделия.Количество() = 1 Тогда
				
				ДанныеСпецификации = Новый Структура("Спецификация,ОсновнаяСпецификация,МногоэтапныйПроизводственныйПроцесс,ОптимальноеКоличествоПередачиМеждуЭтапами");
				ЗаполнитьЗначенияСвойств(ДанныеСпецификации, СпецификацияПоУмолчанию);
				
				ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация", СпецификацияПоУмолчанию.ОсновнаяСпецификация);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Добавить(ДанныеСпецификации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокСпецификацийПоНоменклатуре(Номенклатура, Характеристика, НачалоПроизводства, Подразделение, Параметры) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВыбораСпецификацийПоНоменклатуре();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ?(Параметры.Свойство("СтрокаПоиска"), " ПЕРВЫЕ 51 ", "") + "
	|
	|" + Сред(ТекстЗапроса, СтрНайти(ТекстЗапроса, "ВЫБРАТЬ") + 7) + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетОсновная, Представление");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	ВыполнитьПодстановкуПараметровВЗапросСпецификаций(Запрос, Параметры);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
	
КонецФункции

Функция СписокСпецификацийПоСпискуНоменклатуры(СписокНоменклатуры, Параметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	0                                                          КАК Индекс,
	|	СписокНоменклатуры.Номенклатура                            КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика                          КАК Характеристика,
	|	НАЧАЛОПЕРИОДА(СписокНоменклатуры.НачалоПроизводства, ДЕНЬ) КАК НачалоПроизводства,
	|	СписокНоменклатуры.Подразделение                           КАК Подразделение
	|ПОМЕСТИТЬ ВтСписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|
	|	Спецификации.Ссылка         КАК Ссылка,
	|	Спецификации.Номенклатура   КАК Номенклатура,
	|	Спецификации.Характеристика КАК Характеристика
	|
	|ПОМЕСТИТЬ ВтСпецификацииНоменклатуры
	|
	|ИЗ (" + ТекстЗапросаВыбораСпецификацийПоСпискуНоменклатуры() + ") КАК Спецификации
	|
	|;" + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спецификации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтСпецификации
	|ИЗ
	|	ВтСпецификацииНоменклатуры КАК Спецификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииНоменклатуры.Номенклатура   КАК Номенклатура,
	|	СпецификацииНоменклатуры.Характеристика КАК Характеристика,
	|	Спецификации.Ссылка                     КАК Ссылка
	|ПОМЕСТИТЬ ВтКомбинации
	|ИЗ
	|	ВтСпецификацииНоменклатуры КАК СпецификацииНоменклатуры,
	|	ВтСпецификации             КАК Спецификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комбинации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтИсключения
	|ИЗ
	|	ВтКомбинации КАК Комбинации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	|		ПО Комбинации.Номенклатура = СпецификацииНоменклатуры.Номенклатура
	|			И Комбинации.Характеристика = СпецификацииНоменклатуры.Характеристика
	|			И Комбинации.Ссылка = СпецификацииНоменклатуры.Ссылка
	|ГДЕ
	|	СпецификацииНоменклатуры.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спецификации.Ссылка КАК Ссылка
	|ИЗ
	|	ВтСпецификации КАК Спецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИсключения КАК Исключения
	|		ПО Спецификации.Ссылка = Исключения.Ссылка
	|ГДЕ
	|	Исключения.Ссылка ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	ВыполнитьПодстановкуПараметровВЗапросСпецификаций(Запрос, Параметры, Истина);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВыбораСпецификацийПоНоменклатуре()
	
	// Изготовление, сборка
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление КАК Представление,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураПодразделение.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатура.Спецификация, 
	|					ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))))) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Основная,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация ЕСТЬ NULL
	|				ТОГДА 1
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураПодразделение.Спецификация ЕСТЬ NULL
	|				ТОГДА 2
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатура.Спецификация ЕСТЬ NULL
	|				ТОГДА 3
	|			ИНАЧЕ 100
	|		КОНЕЦ) КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение
	|		ПО (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Номенклатура = &Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Характеристика = &Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Подразделение = &Подразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристика
	|		ПО (ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Номенклатура = &Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Характеристика = &Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураПодразделение
	|		ПО ((ОсновныеСпецификацииНоменклатураПодразделение.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И ОсновныеСпецификацииНоменклатураПодразделение.Номенклатура = &Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Подразделение = &Подразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатура
	|		ПО (ОсновныеСпецификацииНоменклатура.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатура.Номенклатура = &Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатура.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	
	|	И ТабличнаяЧасть.Номенклатура = &Номенклатура
	|	И (ТабличнаяЧасть.Характеристика = &Характеристика
	|			ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипСборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%ОтборПоискПоСтроке
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Изготовление, сборка (по фикс. стоимости)
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление КАК Представление,
	|	ЛОЖЬ КАК Основная,
	|	100 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	
	|	И ТабличнаяЧасть.Номенклатура = &Номенклатура
	|	И (ТабличнаяЧасть.Характеристика = &Характеристика
	|			ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипСборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%ОтборПоискПоСтроке
	|
	|	//%СпецификацииПоФиксированнойСтоимости
	|	
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Ремонт
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление КАК Представление,
	|	ЛОЖЬ КАК Основная,
	|	1000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)
	|	
	|	И ТабличнаяЧасть.Номенклатура = &Номенклатура
	|	И (ТабличнаяЧасть.Характеристика = &Характеристика
	|			ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРемонт
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%ОтборПоискПоСтроке
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Ремонт (по фикс. стоимости)
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление КАК Представление,
	|	ЛОЖЬ КАК Основная,
	|	1000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)
	|	
	|	И ТабличнаяЧасть.Номенклатура = &Номенклатура
	|	И (ТабличнаяЧасть.Характеристика = &Характеристика
	|			ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРемонт
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%ОтборПоискПоСтроке
	|
	|	//%СпецификацииПоФиксированнойСтоимости
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Разборка
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Представление КАК Представление,
	|	ЛОЖЬ КАК Основная,
	|	2000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	
	|	И ТабличнаяЧасть.НоменклатураВходящегоИзделия = &Номенклатура
	|	И (ТабличнаяЧасть.ХарактеристикаВходящегоИзделия = &Характеристика
	|			ИЛИ ТабличнаяЧасть.ХарактеристикаВходящегоИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРазборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%ОтборПоискПоСтроке
	|
	|	И НЕ ТабличнаяЧасть.ПометкаУдаления
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыбораСпецификацийПоСпискуНоменклатуры()
	
	ТекстЗапроса =
	// Изготовление, сборка
	"ВЫБРАТЬ
	|	СписокНоменклатуры.Индекс           КАК Индекс,
	|	СписокНоменклатуры.Номенклатура     КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика   КАК Характеристика,
	|	ТабличнаяЧасть.Ссылка               КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление КАК Представление,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация,
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация,
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураПодразделение.Спецификация,
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатура.Спецификация, 
	|					ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))))) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Основная,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация ЕСТЬ NULL
	|				ТОГДА 1
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураПодразделение.Спецификация ЕСТЬ NULL
	|				ТОГДА 2
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатура.Спецификация ЕСТЬ NULL
	|				ТОГДА 3
	|			ИНАЧЕ 100
	|		КОНЕЦ) КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
	|		 ПО ТабличнаяЧасть.Номенклатура = СписокНоменклатуры.Номенклатура
	|			И (ТабличнаяЧасть.Характеристика = СписокНоменклатуры.Характеристика
	|				ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение
	|		 ПО (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Характеристика = СписокНоменклатуры.Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Подразделение = СписокНоменклатуры.Подразделение)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристика
	|		 ПО (ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Характеристика = СписокНоменклатуры.Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураПодразделение
	|		 ПО ((ОсновныеСпецификацииНоменклатураПодразделение.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И ОсновныеСпецификацииНоменклатураПодразделение.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Подразделение = СписокНоменклатуры.Подразделение)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатура
	|		 ПО (ОсновныеСпецификацииНоменклатура.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатура.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатура.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипСборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНоменклатуры.Индекс, СписокНоменклатуры.Номенклатура, СписокНоменклатуры.Характеристика, ТабличнаяЧасть.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Изготовление, сборка (по фикс. стоимости)
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Индекс,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Характеристика,
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление,
	|	ЛОЖЬ КАК Основная,
	|	1000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = СписокНоменклатуры.Номенклатура
	|			И (ТабличнаяЧасть.Характеристика = СписокНоменклатуры.Характеристика
	|				ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипСборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%СпецификацииПоФиксированнойСтоимости
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Ремонт
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Индекс,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Характеристика,
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление,
	|	ЛОЖЬ КАК Основная,
	|	1000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = СписокНоменклатуры.Номенклатура
	|			И (ТабличнаяЧасть.Характеристика = СписокНоменклатуры.Характеристика
	|				ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРемонт
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Ремонт (по фикс. стоимости)
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Индекс,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Характеристика,
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление,
	|	ЛОЖЬ КАК Основная,
	|	1000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = СписокНоменклатуры.Номенклатура
	|			И (ТабличнаяЧасть.Характеристика = СписокНоменклатуры.Характеристика
	|				ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРемонт
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%СпецификацииПоФиксированнойСтоимости
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Разборка
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Индекс,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Характеристика,
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление,
	|	ЛОЖЬ КАК Основная,
	|	2000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
	|		ПО ТабличнаяЧасть.НоменклатураВходящегоИзделия = СписокНоменклатуры.Номенклатура
	|			И (ТабличнаяЧасть.ХарактеристикаВходящегоИзделия = СписокНоменклатуры.Характеристика
	|				ИЛИ ТабличнаяЧасть.ХарактеристикаВходящегоИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (ТабличнаяЧасть.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|ГДЕ
	|	ТабличнаяЧасть.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРазборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	И НЕ ТабличнаяЧасть.ПометкаУдаления
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ВыполнитьПодстановкуПараметровВЗапросСпецификаций(Запрос, ПараметрыВыбора, ДляСпискаНоменклатуры = Ложь)
	
	ТекстЗапроса = Запрос.Текст;
	
	Если ПараметрыВыбора.Свойство("ДоступныеТипы") Тогда
		
		Если ПараметрыВыбора.ДоступныеТипы.Найти(Перечисления.ТипыПроизводственныхПроцессов.Сборка) <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипСборка", "И ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипСборка", "И ЛОЖЬ");
		КонецЕсли;
		
		Если ПараметрыВыбора.ДоступныеТипы.Найти(Перечисления.ТипыПроизводственныхПроцессов.Ремонт) <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипРемонт", "И ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипРемонт", "И ЛОЖЬ");
		КонецЕсли;
		
		Если ПараметрыВыбора.ДоступныеТипы.Найти(Перечисления.ТипыПроизводственныхПроцессов.Разборка) <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипРазборка", "И ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипРазборка", "И ЛОЖЬ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ДоступныеСтатусы") Тогда
		
		Если ДляСпискаНоменклатуры Тогда
			Подстановка = "
			|И (ТабличнаяЧасть.Ссылка.Статус В (&ДоступныеСтатусы)
			
			|		ИЛИ &ВсеСпецификации)";
		Иначе
			Подстановка = "
			|И ((ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
			|		И (&НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1) 
			|				ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= &НачалоПроизводства)
			|		И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= НачалоПериода(&НачалоПроизводства, День))
			|		) ИЛИ ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует))
			|И (ТабличнаяЧасть.Ссылка.Статус В (&ДоступныеСтатусы)
			|		ИЛИ &ВсеСпецификации)";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборСтатус", Подстановка);
		
		Запрос.УстановитьПараметр("ДоступныеСтатусы", ПараметрыВыбора.ДоступныеСтатусы);
		Запрос.УстановитьПараметр("ВсеСпецификации", ПараметрыВыбора.ДоступныеСтатусы.ВГраница() = -1);
		
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ИсключитьСпецификацию") Тогда
		
		Подстановка = " И (ТабличнаяЧасть.Ссылка <> &ИсключитьСпецификацию)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ИсключитьСпецификацию", Подстановка);
		
		Запрос.УстановитьПараметр("ИсключитьСпецификацию", ПараметрыВыбора.ИсключитьСпецификацию);
		
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ИсключитьПроизводствоНаСтороне") И ПараметрыВыбора.ИсключитьПроизводствоНаСтороне Тогда
		
		Подстановка = "
		|	И НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Справочник.ЭтапыПроизводства КАК Т
		|		ГДЕ
		|			Т.Владелец = ТабличнаяЧасть.Ссылка
		|			И Т.ПроизводствоНаСтороне
		|			И НЕ Т.ПометкаУдаления
		|		)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ИсключитьПроизводствоНаСтороне", Подстановка);
		
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("СтрокаПоиска") Тогда
		
		Подстановка = " И (ТабличнаяЧасть.Ссылка.Наименование ПОДОБНО &СтрокаПоиска)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборПоискПоСтроке", Подстановка);
		
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СокрЛП(ПараметрыВыбора.СтрокаПоиска) + "%");
		
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("СпецификацииПоФиксированнойСтоимости") Тогда
		Если ПараметрыВыбора.СпецификацииПоФиксированнойСтоимости = "Показывать" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%СпецификацииПоФиксированнойСтоимости", "И ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%СпецификацииПоФиксированнойСтоимости", "И ЛОЖЬ");
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПеренумероватьЭтапыСпецификации(ТаблицаЭтапы)

	ТаблицаЭтапы.Колонки.Добавить("УровеньЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0, ДопустимыйЗнак.Неотрицательный)));
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиЭтапы", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(СтруктураПоиска);
	КоличествоУровней = 1;
	ЗаполнитьУровеньЭтапов(ТаблицаЭтапы, НайденныеСтроки, 1, КоличествоУровней);
	
	ПредыдущийНомер = 0;
	СмещениеНомера = 0;
	ТекущийУровень = КоличествоУровней;
	
	ТаблицаЭтапы.Сортировать("УровеньЭтапа Убыв");
	
	КлючиСвязейЭтапов = Новый Соответствие;
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		Если ТекущийУровень <> Строка.УровеньЭтапа Тогда
			СмещениеНомера = СмещениеНомера + ПредыдущийНомер;
			ТекущийУровень = Строка.УровеньЭтапа;
		КонецЕсли;
		
		Строка.НомерЭтапа = Строка.НомерЭтапа + СмещениеНомера;
		
		КлючиСвязейЭтапов.Вставить(Строка.КлючСвязи, Строка.НомерЭтапа);
		
		Если ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапа = Строка.НомерСледующегоЭтапа + СмещениеНомера;
		КонецЕсли;
		
		ПредыдущийНомер = Строка.НомерЭтапа;
		
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапа = КлючиСвязейЭтапов.Получить(Строка.КлючСвязиЭтапы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, УровеньЭтапа, КоличествоУровней)
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", Строка.КлючСвязи));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			КоличествоУровней = Макс(УровеньЭтапа, КоличествоУровней);
			
			Если Строка.НомерЭтапа = 1 Тогда
				Строка.УровеньЭтапа = КоличествоУровней;
			Иначе
				Строка.УровеньЭтапа = УровеньЭтапа;
			КонецЕсли;
			
		Иначе
			Строка.УровеньЭтапа = УровеньЭтапа;
			ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, УровеньЭтапа + 1, КоличествоУровней);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает спецификацию на основании спецификации заказа
//
// Параметры:
//  Объект					 - ДанныеФормыСтруктура - содержит данные спецификации заказа
//  ДанныеПродукции			 - ДанныеФормыСтруктура - содержит данные текущей продукции заказа
//  ПараметрыСпецификации	 - Структура - содержит параметры новой спецификации.
//
// Возвращаемое значение:
//	Структура - содержит данные новой спецификации
//  				* Ссылка - СправочникСсылка.РесурсныеСпецификации - новая спецификация
//					* Наименование - Строка - наименование спецификации.
//    
Функция СоздатьСпецификациюНаОснованииСпецификацииЗаказа(Объект, ДанныеПродукции, ПараметрыСпецификации) Экспорт

	ПустойКлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	НачатьТранзакцию();
	
	Попытка
	
		СсылкаНового = Справочники.РесурсныеСпецификации.ПолучитьСсылку();
		
		Если ЗначениеЗаполнено(ДанныеПродукции.Спецификация) Тогда
			// Чтобы скопировать реквизиты спецификации, которых нет в заказе
			НоваяСпецификация = ДанныеПродукции.Спецификация.Скопировать();
			НоваяСпецификация.ВыходныеИзделия.Очистить();
			НоваяСпецификация.ВозвратныеОтходы.Очистить();
			НоваяСпецификация.МатериалыИУслуги.Очистить();
			НоваяСпецификация.Трудозатраты.Очистить();
			НоваяСпецификация.СоответствиеСвойств.Очистить();
			НоваяСпецификация.ДополнительныеРеквизиты.Очистить();
		Иначе
			НоваяСпецификация = Справочники.РесурсныеСпецификации.СоздатьЭлемент();
			НоваяСпецификация.Заполнить(Неопределено);
		КонецЕсли; 
		
		НоваяСпецификация.Наименование = ПараметрыСпецификации.НаименованиеСпецификации;
		НоваяСпецификация.Описание = ПараметрыСпецификации.Описание;
		
		// Копирование Этапы
		СозданныеЭтапы = Новый Соответствие;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаЭтапы = Объект.Этапы.Выгрузить(СтруктураПоиска);
		
		ПеренумероватьЭтапыСпецификации(ТаблицаЭтапы);
		
		Для каждого ЭтапЗаказа Из ТаблицаЭтапы Цикл
			
			Если ЗначениеЗаполнено(ЭтапЗаказа.Этап) Тогда
				// Чтобы скопировать реквизиты этапа, которых нет в заказе
				НовыйЭтап = ЭтапЗаказа.Этап.Скопировать();
				НовыйЭтап.ВидыРабочихЦентров.Очистить();
				НовыйЭтап.АльтернативныеВидыРабочихЦентров.Очистить();
				НовыйЭтап.ДополнительныеРеквизиты.Очистить();
			Иначе
				НовыйЭтап = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
				НовыйЭтап.Заполнить(Неопределено);
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НовыйЭтап, ЭтапЗаказа);
			НовыйЭтап.Владелец = СсылкаНового;
			
			СтруктураПоискаПоЭтапу = Новый Структура("КлючСвязиЭтапы", ЭтапЗаказа.КлючСвязи);
			ТаблицаВидыРЦ = Объект.ВидыРабочихЦентров.Выгрузить(СтруктураПоискаПоЭтапу);
			ТаблицаВидыРЦ.Сортировать("НомерСтроки");
			Для каждого ВидРЦЗаказа Из ТаблицаВидыРЦ Цикл
				СтрокаВидРЦ = НовыйЭтап.ВидыРабочихЦентров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВидРЦ, ВидРЦЗаказа);
			КонецЦикла;
			
			ТаблицаАльтернативныеВидыРЦ = Объект.АльтернативныеВидыРабочихЦентров.Выгрузить(СтруктураПоискаПоЭтапу);
			ТаблицаАльтернативныеВидыРЦ.Сортировать("НомерСтроки");
			Для каждого АльтернативныйВидРЦ Из ТаблицаАльтернативныеВидыРЦ Цикл
				СтрокаАльтернативныйВидРЦ = НовыйЭтап.АльтернативныеВидыРабочихЦентров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАльтернативныйВидРЦ, АльтернативныйВидРЦ);
			КонецЦикла;
			
			НовыйЭтап.ОбменДанными.Загрузка = Истина;
			НовыйЭтап.Записать();
			
			СозданныеЭтапы.Вставить(ЭтапЗаказа.КлючСвязи, НовыйЭтап.Ссылка);
			
		КонецЦикла;
		
		// Копирование ВыходныеИзделия
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		СтруктураПоиска.Вставить("ПроизводитсяВПроцессе", Ложь);
		ТаблицаВыходныеИзделия = Объект.ВыходныеИзделия.Выгрузить(СтруктураПоиска);
		ТаблицаВыходныеИзделия.Сортировать("НомерСтроки");
		Для каждого ИзделиеЗаказа Из ТаблицаВыходныеИзделия Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ИзделиеЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИзделие = НоваяСпецификация.ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзделие, ИзделиеЗаказа);
			
			СтрокаИзделие.Количество = СтрокаИзделие.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			СтрокаИзделие.КоличествоУпаковок = СтрокаИзделие.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			СтрокаИзделие.Этап = НовыйЭтап;
			СтрокаИзделие.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		// Копирование ВозвратныеОтходы
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаВозвратныеОтходы = Объект.ВозвратныеОтходы.Выгрузить(СтруктураПоиска);
		ТаблицаВозвратныеОтходы.Сортировать("НомерСтроки");
		Для каждого ОтходЗаказа Из ТаблицаВозвратныеОтходы Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ОтходЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтход = НоваяСпецификация.ВозвратныеОтходы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтход, ОтходЗаказа);
			
			СтрокаОтход.Количество = СтрокаОтход.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			СтрокаОтход.КоличествоУпаковок = СтрокаОтход.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаОтход);
			
			СтрокаОтход.Этап = НовыйЭтап;
			СтрокаОтход.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		// Копирование МатериалыИУслуги
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаМатериалы = Объект.МатериалыИУслуги.Выгрузить(СтруктураПоиска);
		ТаблицаМатериалы.Сортировать("НомерСтроки");
		Для каждого МатериалЗаказа Из ТаблицаМатериалы Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(МатериалЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаМатериал = НоваяСпецификация.МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМатериал, МатериалЗаказа);
			
			СтрокаМатериал.Количество = СтрокаМатериал.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			СтрокаМатериал.КоличествоУпаковок = СтрокаМатериал.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			Если СтрокаМатериал.ПроизводитсяВПроцессе Тогда
				СтрокаМатериал.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
			Иначе
				СтрокаМатериал.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
			КонецЕсли;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаМатериал);
			
			СтрокаМатериал.Этап = НовыйЭтап;
			СтрокаМатериал.ЭтапРедактирование = НовыйЭтап;
			
		КонецЦикла;
		
		// Копирование Трудозатраты
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаТрудозатраты = Объект.Трудозатраты.Выгрузить(СтруктураПоиска);
		ТаблицаТрудозатраты.Сортировать("НомерСтроки");
		Для каждого ТрудозатратыЗаказа Из ТаблицаТрудозатраты Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ТрудозатратыЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТрудозатраты = НоваяСпецификация.Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТрудозатраты, ТрудозатратыЗаказа);
			
			СтрокаТрудозатраты.Количество = СтрокаТрудозатраты.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			СтрокаТрудозатраты.Этап = НовыйЭтап;
			СтрокаТрудозатраты.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		НоваяСпецификация.МногоэтапныйПроизводственныйПроцесс = (СозданныеЭтапы.Количество() <> 1);
		
		НоваяСпецификация.УстановитьСсылкуНового(СсылкаНового);
		НоваяСпецификация.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ПроизводствоСервер.СобытиеСозданиеСпецификации(), 
			УровеньЖурналаРегистрации.Ошибка,,Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Новый Структура("Ссылка,Наименование", НоваяСпецификация.Ссылка, НоваяСпецификация.Наименование);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область РасчетНормативнойДлительности

// Запускает расчет длительности производства, при записи объектов от которых зависит расчет.
//
// Параметры:
//  ОбъектРасчета	 - СправочникСсылка.РесурсныеСпецификации, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Календари - объект расчета
//  ПараметрыЗапуска - Структура																								 - см. РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ПараметрыЗапуска()
//  Отказ			 - Булево																									 - признак наличия ошибок.
//
Процедура РассчитатьДлительностьПроизводства(ОбъектРасчета, ПараметрыЗапуска = Неопределено, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ДобавитьЗадание(ОбъектРасчета, ПараметрыЗапуска, Отказ);
	
КонецПроцедуры

// Запускает пересчет длительности производства при назначении основной спецификаций.
//
// Параметры:
//  Спецификация - СправочникСсылка.РесурсныеСпецификация, Массив - спецификация или список спецификаций.
//
Процедура ПересчитатьДлительностьПриНазначенииОсновнойСпецификации(Спецификация) Экспорт
	
	МассивСсылок = ПроизводствоСервер.МассивЗначений(Спецификация);
	ОчередьКРасчету = Новый Массив;
	
	Для каждого Ссылка Из МассивСсылок Цикл
		ЗависимыеСпецификации = Справочники.РесурсныеСпецификации.ЗависимыеСпецификации(Ссылка);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОчередьКРасчету, ЗависимыеСпецификации);
	КонецЦикла;
	
	Если ОчередьКРасчету.ВГраница() <> -1 Тогда
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОчередьКРасчету);
		ПараметрыЗапуска = РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ПараметрыЗапуска(Ложь);
		РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ДобавитьЗадание(ОчередьКРасчету, ПараметрыЗапуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура СредняяНормаЧасовПоГрафикуРаботыПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Отказ ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикРаботы = ГрафикРаботыИзИсточникаСобытия(Источник);
	Если ГрафикРаботы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СредняяНормаЧасов = 0;
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		МассивГрафиков = ПроизводствоСервер.МассивЗначений(ГрафикРаботы);
		СредняяНормаЧасов = СредняяНормаЧасовПоГрафикамРаботы(МассивГрафиков)[ГрафикРаботы];
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить("СредняяНормаЧасовДоИзменения", СредняяНормаЧасов);
	
КонецПроцедуры

Процедура СредняяНормаЧасовПоГрафикуРаботыПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СредняяНормаЧасовДоИзменения = 0;
	Если НЕ Источник.ДополнительныеСвойства.Свойство("СредняяНормаЧасовДоИзменения", СредняяНормаЧасовДоИзменения)
		ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикРаботы = ГрафикРаботыИзИсточникаСобытия(Источник);
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивГрафиков = ПроизводствоСервер.МассивЗначений(ГрафикРаботы);
	СредняяНормаЧасов = СредняяНормаЧасовПоГрафикамРаботы(МассивГрафиков)[ГрафикРаботы];

	Если СредняяНормаЧасовДоИзменения <> СредняяНормаЧасов Тогда
		
		РассчитатьДлительностьПроизводства(ГрафикРаботы,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ГрафикРаботыИзИсточникаСобытия(Источник)
	
	Перем ГрафикРаботы;
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("КонстантаМенеджерЗначения.ОсновнойКалендарьПредприятия") Тогда
		
		ГрафикРаботы = Константы.ОсновнойКалендарьПредприятия.Получить(); 
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Календари") Тогда
		
		ГрафикРаботы = Источник.Ссылка;
		
	КонецЕсли;
	
	Возврат ГрафикРаботы;
	
КонецФункции

Функция СредняяНормаЧасовПоГрафикамРаботы(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Календари.Ссылка                                          КАК Ссылка,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(Календари.Длительность) КАК ЧИСЛО(10,3)) КАК НормаЧасов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ШаблонЗаполнения.Ссылка                                                          КАК Ссылка,
	|		СУММА(РАЗНОСТЬДАТ(Расписание.ВремяНачала, Расписание.ВремяОкончания, МИНУТА)/60) КАК Длительность
	|	ИЗ
	|		Справочник.Календари.ШаблонЗаполнения КАК ШаблонЗаполнения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК Расписание
	|			ПО ШаблонЗаполнения.Ссылка = Расписание.Ссылка
	|				И ШаблонЗаполнения.НомерСтроки = Расписание.НомерДня
	|	ГДЕ
	|		ШаблонЗаполнения.Ссылка В (&ГрафикиРаботы)
	|		И ШаблонЗаполнения.ДеньВключенВГрафик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ШаблонЗаполнения.Ссылка,
	|		ШаблонЗаполнения.НомерСтроки) КАК Календари
	|
	|СГРУППИРОВАТЬ ПО
	|	Календари.Ссылка");
	
	Запрос.УстановитьПараметр("ГрафикиРаботы", МассивСсылок);
	
	СредняяНормаЧасов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СредняяНормаЧасов.Вставить(Выборка.Ссылка, Выборка.НормаЧасов);
	КонецЦикла;
	Для каждого Ссылка Из МассивСсылок Цикл
		Если Не ЗначениеЗаполнено(СредняяНормаЧасов[Ссылка]) Тогда
			СредняяНормаЧасов[Ссылка] = 24.000;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СредняяНормаЧасов;
	
КонецФункции

Функция СвернутаяСредняяНормаЧасовПоГрафикамРаботы(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(Календари.Длительность) КАК ЧИСЛО(10,3)) КАК НормаЧасов
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(РАЗНОСТЬДАТ(Расписание.ВремяНачала, Расписание.ВремяОкончания, МИНУТА)/60) КАК Длительность
	|	ИЗ
	|		Справочник.Календари.ШаблонЗаполнения КАК ШаблонЗаполнения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК Расписание
	|			ПО ШаблонЗаполнения.Ссылка = Расписание.Ссылка
	|				И ШаблонЗаполнения.НомерСтроки = Расписание.НомерДня
	|	ГДЕ
	|		ШаблонЗаполнения.Ссылка В (&ГрафикиРаботы)
	|		И ШаблонЗаполнения.ДеньВключенВГрафик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ШаблонЗаполнения.НомерСтроки) КАК Календари");
	
	Запрос.УстановитьПараметр("ГрафикиРаботы", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.НормаЧасов) Тогда
		Результат = Выборка.НормаЧасов;
	Иначе
		Результат = 24.000;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область Прочее

Функция ТекстЗапросаСоздатьВТСпецификацииНоменклатурыПоУмолчанию(ИмяТаблицыНоменклатура = "", ТолькоОсновные = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокНоменклатуры.Номенклатура       КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика     КАК Характеристика,
	|	СписокНоменклатуры.Подразделение      КАК Подразделение,
	|	СписокНоменклатуры.НачалоПроизводства КАК НачалоПроизводства,
	|
	|	ВЫБОР
	|		КОГДА РесурсныеСпецификацииВыходныеИзделия.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|		ИНАЧЕ РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|
	|	КОНЕЦ                                 КАК Спецификация,
	|
	|	ВЫБОР
	|		КОГДА РесурсныеСпецификацииВыходныеИзделия.Ссылка ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ РесурсныеСпецификацииВыходныеИзделия.Ссылка.Представление
	|
	|	КОНЕЦ                                 КАК СпецификацияПредставление,
	|
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация, 
	|						ЕСТЬNULL(ОсновныеСпецификацииНоменклатураПодразделение.Спецификация,
	|							ЕСТЬNULL(ОсновныеСпецификацииНоменклатура.Спецификация, 
	|								ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))))) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|
	|		КОНЕЦ)                            КАК Основная,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация ЕСТЬ NULL 
	|				ТОГДА 0
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация ЕСТЬ NULL 
	|				ТОГДА 1
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураПодразделение.Спецификация ЕСТЬ NULL 
	|				ТОГДА 2
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатура.Спецификация ЕСТЬ NULL 
	|				ТОГДА 3
	|			ИНАЧЕ 100
	|
	|		КОНЕЦ)                            КАК ПриоритетОсновная
	|
	|ПОМЕСТИТЬ ВТСписокДействующихСпецификаций
	|ИЗ
	|	ВТСписокНоменклатуры КАК СписокНоменклатуры
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|		 ПО (РесурсныеСпецификацииВыходныеИзделия.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (РесурсныеСпецификацииВыходныеИзделия.Характеристика = СписокНоменклатуры.Характеристика
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Ссылка.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (РесурсныеСпецификацииВыходныеИзделия.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Ссылка.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|			И (РесурсныеСпецификацииВыходныеИзделия.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует))
	|			И (РесурсныеСпецификацииВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение
	|		 ПО (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Характеристика = СписокНоменклатуры.Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Подразделение = СписокНоменклатуры.Подразделение)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристика
	|		 ПО (ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Характеристика = СписокНоменклатуры.Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураПодразделение
	|		 ПО (ОсновныеСпецификацииНоменклатураПодразделение.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Подразделение = СписокНоменклатуры.Подразделение)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатура
	|		 ПО (ОсновныеСпецификацииНоменклатура.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатура.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатура.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Характеристика,
	|	СписокНоменклатуры.Подразделение,
	|	СписокНоменклатуры.НачалоПроизводства,
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|
	| //ИМЕЮЩИЕ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Подразделение,
	|	НачалоПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Спецификации.Номенклатура       КАК Номенклатура,
	|	Спецификации.Характеристика     КАК Характеристика,
	|	Спецификации.Подразделение      КАК Подразделение,
	|	Спецификации.НачалоПроизводства КАК НачалоПроизводства,
	|	Спецификации.Спецификация       КАК Спецификация,
	|	Спецификации.Основная           КАК Основная
	|ПОМЕСТИТЬ ВТСпецификацииНоменклатурыПоУмолчанию
	|ИЗ
	|	ВТСписокДействующихСпецификаций КАК Спецификации
	|ГДЕ
	|	Спецификации.Спецификация В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				Т.Спецификация КАК Спецификация
	|			ИЗ
	|				ВТСписокДействующихСпецификаций КАК Т
	|			ГДЕ
	|				Т.Номенклатура         = Спецификации.Номенклатура
	|				И Т.Характеристика     = Спецификации.Характеристика
	|				И Т.Подразделение      = Спецификации.Подразделение
	|				И Т.НачалоПроизводства = Спецификации.НачалоПроизводства
	|			УПОРЯДОЧИТЬ ПО
	|				Т.ПриоритетОсновная,
	|				Т.СпецификацияПредставление)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Подразделение,
	|	НачалоПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСписокДействующихСпецификаций
	|;
	|
	|////////////////////////////////////////////////////////////
	|";
	Если ИмяТаблицыНоменклатура <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСписокНоменклатуры", ИмяТаблицыНоменклатура);
	КонецЕсли;
	СтрокаПодстановки = "";
	Если ТолькоОсновные Тогда
		СтрокаПодстановки = "
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация, 
		|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация, 
		|						ЕСТЬNULL(ОсновныеСпецификацииНоменклатураПодразделение.Спецификация,
		|							ЕСТЬNULL(ОсновныеСпецификацииНоменклатура.Спецификация, 
		|								ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))))) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	) = ИСТИНА
		|";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ИМЕЮЩИЕ", СтрокаПодстановки);
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса, который получает список действующих спецификаций
// Спецификация является действующей, если
//  - у нее статус Действует
//  - период ее действия включает начало производства.
//
// Параметры
//  ПараметрыЗапроса - Структура - структура, которая может содержать свойства:
//						- ДляСпискаНоменклатуры - указывает, что требуется получить спецификации для списка номенклатуры,
//													хранящейся во временной таблице СписокНоменклатуры.
//
Функция ПолучитьТекстЗапросаОсновнойСпецификации(ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ОсновныеСпецификации.Спецификация,
		|	ОсновныеСпецификации.Спецификация.Представление КАК СпецификацияПредставление,
		|	ВЫБОР
		// Все совпадает
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = &Характеристика
		|				И ОсновныеСпецификации.Подразделение = &Подразделение
		|			ТОГДА 1
		
		// Для любого подразделения
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = &Характеристика
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 2
		
		// Для любой характеристики
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = &Подразделение
		|			ТОГДА 3
		
		// Для любой характеристики и любого подразделения
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
		|ГДЕ
		|	ЕСТЬNULL(Спецификация.Статус,
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.ПустаяСсылка)) = 
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
		|	И (&НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ Спецификация.НачалоДействия <= &НачалоПроизводства)
		|	И (Спецификация.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ Спецификация.КонецДействия >= НачалоПериода(&НачалоПроизводства, День))
		|	И Номенклатура = &Номенклатура
		|	И (Характеристика = &Характеристика
		|		ИЛИ Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|	И (Подразделение = &Подразделение
		|		ИЛИ Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	ИначеЕсли ПараметрыЗапроса.Свойство("ДляСпискаНоменклатуры") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СписокНоменклатуры.Подразделение КАК Подразделение,
		|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
		|	СписокНоменклатуры.Характеристика КАК Характеристика,
		|	СписокНоменклатуры.НачалоПроизводства КАК НачалоПроизводства
		|ПОМЕСТИТЬ ВТСписокНоменклатуры
		|ИЗ
		|	СписокНоменклатуры КАК СписокНоменклатуры
		|СГРУППИРОВАТЬ ПО
		|	СписокНоменклатуры.Подразделение,
		|	СписокНоменклатуры.Номенклатура,
		|	СписокНоменклатуры.Характеристика,
		|	СписокНоменклатуры.НачалоПроизводства
		|;
		|
		|ВЫБРАТЬ
		|	ОсновныеСпецификации.Спецификация,
		|	ОсновныеСпецификации.Спецификация.Представление КАК СпецификацияПредставление,
		|	ВТСписокНоменклатуры.Подразделение КАК Подразделение,
		|	ВТСписокНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВТСписокНоменклатуры.Характеристика КАК Характеристика,
		|	ВТСписокНоменклатуры.НачалоПроизводства КАК НачалоПроизводства,
		|	ВЫБОР
		// Все совпадает
		|		КОГДА ОсновныеСпецификации.Характеристика = ВТСписокНоменклатуры.Характеристика
		|				И ОсновныеСпецификации.Подразделение = ВТСписокНоменклатуры.Подразделение
		|			ТОГДА 1
		
		// Для любого подразделения
		|		КОГДА ОсновныеСпецификации.Характеристика = ВТСписокНоменклатуры.Характеристика
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 2
		
		// Для любой характеристики
		|		КОГДА ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = ВТСписокНоменклатуры.Подразделение
		|			ТОГДА 3
		
		// Для любой характеристики и любого подразделения
		|		КОГДА ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	ВТСписокНоменклатуры КАК ВТСписокНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
		|		ПО (ОсновныеСпецификации.Номенклатура = ВТСписокНоменклатуры.Номенклатура)
		|			И (ОсновныеСпецификации.Характеристика = ВТСписокНоменклатуры.Характеристика
		|				ИЛИ ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (ОсновныеСпецификации.Подразделение = ВТСписокНоменклатуры.Подразделение
		|				ИЛИ ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И (ЕСТЬNULL(ОсновныеСпецификации.Спецификация.Статус,
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.ПустаяСсылка)) =
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует))
		|			И (ВТСписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОсновныеСпецификации.Спецификация.НачалоДействия <= ВТСписокНоменклатуры.НачалоПроизводства)
		|			И (ОсновныеСпецификации.Спецификация.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОсновныеСпецификации.Спецификация.КонецДействия >= НачалоПериода(ВТСписокНоменклатуры.НачалоПроизводства, День))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не удалось определить запрос.'");
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Проверяет соответствие полуфабриката и спецификации, которая назначена для его производства.
//
// Параметры:
//  Объект                  - СправочникОбъект.РесурсныеСпецификации,
//                              ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа,
//                              ДокументСсылка.ЗаказНаПроизводство - объект, связанный с проверкой
//  КоллекцияПолуфабрикатов - Массив - коллекция строк, содержащая данные о полуфабрикатах
//  КоллекцияЭтапов         - Массив - коллекция строк, содержащая данные о последовательности этапов
// Возвращаемое значение:
//   - Структура - Структура параметров проверки заполнения внутренних полуфабрикатов
//                  в ресурсной спецификации и спецификации заказа на производство.
//
Функция ПолучитьПараметрыПроверкиВнутреннихПолуфабрикатов(Объект, Знач КоллекцияПолуфабрикатов = Неопределено, Знач КоллекцияЭтапов = Неопределено) Экспорт
	
	ПараметрыПроверкиВнутреннихПолуфабрикатов = Новый Структура("
		|Режим,
		|СтруктураПоиска,
		|ТаблицаПолуфабрикатов,
		|ТаблицаЭтапов,
		|ПредставлениеТаблицыПолуфабрикатов");
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.РесурсныеСпецификации") Тогда
		
		// режим
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация";
		
		// структура поиска в таблице полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.СтруктураПоиска = Новый Структура("
			|ИсточникПолученияПолуфабриката,
			|Номенклатура,
			|Характеристика");
		
		// таблица полуфабрикатов
		
		ТаблицаПолуфабрикатов = Новый ТаблицаЗначений;
		ТаблицаПолуфабрикатов.Колонки.Добавить("ИсточникПолученияПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
		
		Если КоллекцияПолуфабрикатов = Неопределено Тогда
			КоллекцияПолуфабрикатов = Объект.ВозвратныеОтходы;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из КоллекцияПолуфабрикатов Цикл
			
			НоваяСтрока = ТаблицаПолуфабрикатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
			НоваяСтрока.ИсточникПолученияПолуфабриката = ЭлементКоллекции.ЭтапРедактирование;
			
			Если ЗначениеЗаполнено(ЭлементКоллекции.АлгоритмРасчетаКоличества) Тогда
				НоваяСтрока.Количество = -1;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаПолуфабрикатов.Свернуть("
			|ИсточникПолученияПолуфабриката, 
			|Номенклатура, 
			|Характеристика", 
			"Количество");
		
		ТаблицаПолуфабрикатов.Индексы.Добавить("
			|ИсточникПолученияПолуфабриката, 
			|Номенклатура, 
			|Характеристика");
	
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
		
		// представление таблицы полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов = НСтр("ru = 'Побочный и промежуточный выпуск'");
		
	Иначе
		
		// режим
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "СпецификацияЗаказа";
		
		// структура поиска в таблице полуфабрикатов
		
		СтруктураПоиска = Новый Структура("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура,
			|Характеристика");
			
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Вставить("СтруктураПоиска", СтруктураПоиска);
		
		// таблица полуфабрикатов
		
		ТаблицаПолуфабрикатов = Новый ТаблицаЗначений;
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиМатериалыИУслугиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиЭтапыСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
		
		Если КоллекцияПолуфабрикатов = Неопределено Тогда
			КоллекцияПолуфабрикатов = Объект.ВозвратныеОтходы;
		КонецЕсли;
			
		Для Каждого ЭлементКоллекции Из КоллекцияПолуфабрикатов Цикл
			
			НоваяСтрока = ТаблицаПолуфабрикатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
			НоваяСтрока.КлючСвязиМатериалыИУслугиСтрока = Строка(ЭлементКоллекции.КлючСвязиМатериалыИУслуги);
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			
		КонецЦикла;
		
		ТаблицаПолуфабрикатов.Свернуть("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура, 
			|Характеристика", 
			"Количество");
		
		ТаблицаПолуфабрикатов.Индексы.Добавить("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура, 
			|Характеристика");
			
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
		
		// таблица полуфабрикатов
	
		ТаблицаЭтапов = Новый ТаблицаЗначений;
		ТаблицаЭтапов.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаЭтапов.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЭтапов.Колонки.Добавить("НаименованиеЭтапа", Новый ОписаниеТипов("Строка"));
		ТаблицаЭтапов.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
		
		Если КоллекцияЭтапов = Неопределено Тогда
			КоллекцияЭтапов = Объект.Этапы;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из КоллекцияЭтапов Цикл
			
			НоваяСтрока = ТаблицаЭтапов.Добавить();
			
			НоваяСтрока.КлючСвязиСтрока       = Строка(ЭлементКоллекции.КлючСвязи);
			НоваяСтрока.НомерЭтапа            = ЭлементКоллекции.НомерЭтапа;
			НоваяСтрока.НаименованиеЭтапа     = ЭлементКоллекции.НаименованиеЭтапа;
			НоваяСтрока.ПроизводствоНаСтороне = ЭлементКоллекции.ПроизводствоНаСтороне;
			
		КонецЦикла;
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаЭтапов = ТаблицаЭтапов;
		
		// представление таблицы полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов = НСтр("ru = 'Побочный и промежуточный выпуск'");
		
	КонецЕсли;
	
	Возврат ПараметрыПроверкиВнутреннихПолуфабрикатов;
	
КонецФункции

Функция ПотребностьВоВнутреннихПолуфабрикатах(ПараметрыПроверкиВнутреннихПолуфабрикатов, МассивСтрок)
	
	ТаблицаПотребностиВПолуфабрикатах = Новый ТаблицаЗначений;
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("ИсточникПолученияПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	
	Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
		
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		
	Иначе
		
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиЭтапыСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиЭтапВыпускаСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из МассивСтрок Цикл
		
		НоваяСтрока = ТаблицаПотребностиВПолуфабрикатах.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		
		Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
			
			НоваяСтрока.Этап = ЭлементКоллекции.ЭтапРедактирование;
			
		Иначе
			
			НоваяСтрока.КлючСвязиСтрока = Строка(ЭлементКоллекции.КлючСвязи);
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			НоваяСтрока.КлючСвязиЭтапВыпускаСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапВыпуска);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПотребностиВПолуфабрикатах;
	
КонецФункции

Функция ТекстЗапросаПроверкиВнутреннихПолуфабрикатов(ПараметрыПроверкиВнутреннихПолуфабрикатов)
	
	Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Этап КАК Справочник.ЭтапыПроизводства) КАК Этап,
		|	ВЫРАЗИТЬ(Т.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства) КАК ИсточникПолученияПолуфабриката,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	Т.Количество КАК Количество
		|ПОМЕСТИТЬ ВТПотребностиВПолуфабрикатах
		|ИЗ
		|	&ТаблицаПотребностиВПолуфабрикатах КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоследовательности
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.ИсточникПолученияПолуфабриката.НомерЭтапа >= ВЫБОР
		|			КОГДА Т.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|				ТОГДА 1
		|			ИНАЧЕ Т.Этап.НомерЭтапа
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиРабота
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПроизводствоНаСтороне
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.ИсточникПолученияПолуфабриката.ПроизводствоНаСтороне
		|	И НЕ &ИспользуетсяПроизводство22
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПоследовательности КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиРабота КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПроизводствоНаСтороне КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	Т.Номенклатура КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|	Т.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	Т.Количество КАК Количество,
		|	Т.Номенклатура.Представление КАК НоменклатураПредставление,
		|	Т.Характеристика.Представление КАК ХарактеристикаПредставление,
		|	Т.ИсточникПолученияПолуфабриката.Представление КАК ЭтапВыпускаПредставление,
		|	ВЫБОР
		|		КОГДА Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА Т.Упаковка.Представление
		|		ИНАЧЕ Т.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	НЕ Т.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ОшибкиПоследовательности.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПоследовательности КАК ОшибкиПоследовательности
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиРабота.НомерСтроки
		|				ИЗ
		|					ВТОшибкиРабота КАК ОшибкиРабота
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиПроизводствоНаСтороне.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПроизводствоНаСтороне КАК ОшибкиПроизводствоНаСтороне)";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Т.Упаковка",
			"Т.Номенклатура"));
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	Т.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	Т.КлючСвязиЭтапыСтрока КАК КлючСвязиЭтапыСтрока,
		|	Т.КлючСвязиЭтапВыпускаСтрока КАК КлючСвязиЭтапВыпускаСтрока,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	Т.Количество КАК Количество
		|ПОМЕСТИТЬ ВТПотребностиВПолуфабрикатах
		|ИЗ
		|	&ТаблицаПотребностиВПолуфабрикатах КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭтаповЗаказа.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	ТаблицаЭтаповЗаказа.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ТаблицаЭтаповЗаказа.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	ТаблицаЭтаповЗаказа.НомерЭтапа КАК НомерЭтапа
		|ПОМЕСТИТЬ ВТТаблицаЭтаповЗаказа
		|ИЗ
		|	&ТаблицаЭтаповЗаказа КАК ТаблицаЭтаповЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПотребностиВПолуфабрикатах.НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоследовательности
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ПотребностиВПолуфабрикатах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповПотребления
		|		ПО ПотребностиВПолуфабрикатах.КлючСвязиЭтапыСтрока = ТаблицаЭтаповПотребления.КлючСвязиСтрока
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповВыпуска
		|		ПО ПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТаблицаЭтаповВыпуска.КлючСвязиСтрока
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТаблицаЭтаповВыпуска.НомерЭтапа ЕСТЬ NULL 
		|					ИЛИ ТаблицаЭтаповПотребления.НомерЭтапа ЕСТЬ NULL 
		|					ИЛИ ТаблицаЭтаповВыпуска.НомерЭтапа >= ТаблицаЭтаповПотребления.НомерЭтапа
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиРабота
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПотребностиВПолуфабрикатах.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПроизводствоНаСтороне
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ТПотребностиВПолуфабрикатах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповЗаказа
		|		ПО ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТаблицаЭтаповЗаказа.КлючСвязиСтрока
		|ГДЕ
		|	ТаблицаЭтаповЗаказа.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПоследовательности КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиРабота КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПроизводствоНаСтороне КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПотребностиВПолуфабрикатах.НомерСтроки КАК НомерСтроки,
		|	ТПотребностиВПолуфабрикатах.Номенклатура КАК Номенклатура,
		|	ТПотребностиВПолуфабрикатах.Характеристика КАК Характеристика,
		|	ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока КАК КлючСвязиЭтапыСтрока,
		|	ТПотребностиВПолуфабрикатах.КлючСвязиСтрока КАК КлючСвязиМатериалыИУслугиСтрока,
		|	ТПотребностиВПолуфабрикатах.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ТПотребностиВПолуфабрикатах.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	ТПотребностиВПолуфабрикатах.Количество КАК Количество,
		|	ТПотребностиВПолуфабрикатах.Номенклатура.Представление КАК НоменклатураПредставление,
		|	ТПотребностиВПолуфабрикатах.Характеристика.Представление КАК ХарактеристикаПредставление,
		|	ТТаблицаЭтаповЗаказа.НаименованиеЭтапа КАК ЭтапВыпускаПредставление,
		|	ВЫБОР
		|		КОГДА ТПотребностиВПолуфабрикатах.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТПотребностиВПолуфабрикатах.Упаковка.Представление
		|		ИНАЧЕ ТПотребностиВПолуфабрикатах.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ТПотребностиВПолуфабрикатах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТТаблицаЭтаповЗаказа
		|		ПО ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТТаблицаЭтаповЗаказа.КлючСвязиСтрока
		|ГДЕ
		|	НЕ ТПотребностиВПолуфабрикатах.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ОшибкиПоследовательности.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПоследовательности КАК ОшибкиПоследовательности
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиРабота.НомерСтроки
		|				ИЗ
		|					ВТОшибкиРабота КАК ОшибкиРабота
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиПроизводствоНаСтороне.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПроизводствоНаСтороне КАК ОшибкиПроизводствоНаСтороне)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТПотребностиВПолуфабрикатах.Упаковка",
			"ТПотребностиВПолуфабрикатах.Номенклатура"));
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОтборНоменклатурыПоСвойствам(ИмяТаблицыНастроек) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючСвязи КАК КлючСвязи,
	|	МИНИМУМ(ВложенныйЗапрос.Используется) КАК Используется
	|ПОМЕСТИТЬ ВТОтборПоСвойствам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТОтборПоСвойствамНастройки.КлючСвязи КАК КлючСвязи,
	|		ВЫБОР ВТОтборПоСвойствамНастройки.Условие
	|			КОГДА ""Равно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства = ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""НеРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <> ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Больше""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства > ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""БольшеИлиРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства >= ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Меньше""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства < ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""МеньшеИлиРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <= ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""ВСписке""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства В
	|						(ВЫБРАТЬ
	|							Т.ЗначениеОтбор КАК ЗначениеОтбор
	|						ИЗ
	|							ВТОтборПоСвойствамНастройки КАК Т
	|						ГДЕ
	|							Т.Условие = ""ВСписке""
	|							И Т.Свойство = ВТОтборПоСвойствамНастройки.Свойство
	|							И Т.КлючСвязи = ВТОтборПоСвойствамНастройки.КлючСвязи)
	|			КОГДА ""НеВСписке""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <> ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Заполнено""
	|				ТОГДА НЕ ВТОтборПоСвойствамНастройки.ЗначениеСвойства В (НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0)
	|			КОГДА ""НеЗаполнено""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства В (НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Используется
	|	ИЗ
	|		&ВТОтборПоСвойствамНастройки КАК ВТОтборПоСвойствамНастройки) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КлючСвязи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязи";
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ВТОтборПоСвойствамНастройки", ИмяТаблицыНастроек);
	
КонецФункции

#КонецОбласти

#КонецОбласти
