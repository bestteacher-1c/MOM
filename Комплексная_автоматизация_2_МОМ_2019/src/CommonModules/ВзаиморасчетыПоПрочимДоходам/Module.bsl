#Область ПрограммныйИнтерфейс

// Регистрирует начисления и удержания по прочим доходам в учете.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений расчетного документа.
//  	Отказ             - Булево - признак отказа выполнения операции.
//		Организация       - СправочникСсылка.Организации
//		ПериодРегистрации - Дата  - первое число месяца периода регистрации.
//		СпособРасчетов    - ПеречисленияСсылка.СпособыРасчетовСФизическимиЛицами
//		Начисления        - ТаблицаЗначений - соответствует структуре регистра накопления НачисленияУдержанияПоКонтрагентамАкционерам.
//		Удержания         - ТаблицаЗначений - соответствует структуре регистра накопления НачисленияУдержанияПоКонтрагентамАкционерам.
//		ЗаписыватьДвижения- Булево - признак необходимости записи движений.
//
Процедура ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, СпособРасчетов, Начисления = Неопределено, Удержания = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	КолонкиГруппировок  = "ФизическоеЛицо, СтатьяФинансирования, СтатьяРасходов, Сотрудник";
	КолонкиСуммирования = "СуммаВзаиморасчетов";
	
	УточнятьСпособРасчетов = (СпособРасчетов = Перечисления.СпособыРасчетовСФизическимиЛицами.Дивиденды);
	
	Если Начисления <> Неопределено Тогда
		
		ТаблицаНачислений = Начисления.Скопировать();
		ТаблицаНачислений.Колонки.Сумма.Имя = "СуммаВзаиморасчетов";
		ТаблицаНачислений.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
		Для каждого СтрокаТЗ Из ТаблицаНачислений Цикл
			НоваяСтрока = Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			Если УточнятьСпособРасчетов И ЗначениеЗаполнено(НоваяСтрока.Сотрудник) Тогда
				НоваяСтрока.СпособРасчетов = Перечисления.СпособыРасчетовСФизическимиЛицами.ДивидендыСотрудникам;
			Иначе
				НоваяСтрока.СпособРасчетов = СпособРасчетов;
			КонецЕсли;
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ДокументОснование 	= Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Отбор.Регистратор.Значение;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
		КонецЦикла;
		
		Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Записывать = Истина;
		
	КонецЕсли;
	 
	Если Удержания <> Неопределено Тогда
		
		ТаблицаУдержаний = Удержания.Скопировать();
		ТаблицаУдержаний.Колонки.Сумма.Имя = "СуммаВзаиморасчетов";
		ТаблицаУдержаний.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
		Для каждого СтрокаТЗ Из ТаблицаУдержаний Цикл
			НоваяСтрока = Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			Если УточнятьСпособРасчетов И ЗначениеЗаполнено(НоваяСтрока.Сотрудник) Тогда
				НоваяСтрока.СпособРасчетов = Перечисления.СпособыРасчетовСФизическимиЛицами.ДивидендыСотрудникам;
			Иначе
				НоваяСтрока.СпособРасчетов = СпособРасчетов;
			КонецЕсли;
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.СуммаВзаиморасчетов = - НоваяСтрока.СуммаВзаиморасчетов;
			НоваяСтрока.ДокументОснование 	= Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Отбор.Регистратор.Значение;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		КонецЦикла;
		
		Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Записывать = Истина;
		
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Записать();
		Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf9b-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВедомостьПрочихДоходовВБанк);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4f2-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВедомостьПрочихДоходовВКассу);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfc3-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВедомостьПрочихДоходовПеречислением);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт

	Списки.Вставить(Метаданные.Документы.ВедомостьПрочихДоходовВБанк,                              Истина);
	Списки.Вставить(Метаданные.Справочники.ВедомостьПрочихДоходовВБанкПрисоединенныеФайлы,         Истина);
	Списки.Вставить(Метаданные.Документы.ВедомостьПрочихДоходовВКассу,                             Истина);
	Списки.Вставить(Метаданные.Справочники.ВедомостьПрочихДоходовВКассуПрисоединенныеФайлы,        Истина);
	Списки.Вставить(Метаданные.Документы.ВедомостьПрочихДоходовПеречислением,                      Истина);
	Списки.Вставить(Метаданные.Справочники.ВедомостьПрочихДоходовПеречислениемПрисоединенныеФайлы, Истина);
	
	Списки.Вставить(Метаданные.ЖурналыДокументов.ВедомостиПрочихДоходов, Истина);
	
	Списки.Вставить(Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиАкционерами, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт

	Описание = Описание + "
	|Документ.ВедомостьПрочихДоходовВБанк.Чтение.ГруппыФизическихЛиц
	|Документ.ВедомостьПрочихДоходовВБанк.Чтение.Организации
	|Документ.ВедомостьПрочихДоходовВБанк.Изменение.ГруппыФизическихЛиц
	|Документ.ВедомостьПрочихДоходовВБанк.Изменение.Организации
	|Справочник.ВедомостьПрочихДоходовВБанкПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВедомостьПрочихДоходовВБанкПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВедомостьПрочихДоходовВБанкПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВедомостьПрочихДоходовВБанкПрисоединенныеФайлы.Изменение.Организации";
	
	Описание = Описание + "
	|Документ.ВедомостьПрочихДоходовВКассу.Чтение.ГруппыФизическихЛиц
	|Документ.ВедомостьПрочихДоходовВКассу.Чтение.Организации
	|Документ.ВедомостьПрочихДоходовВКассу.Изменение.ГруппыФизическихЛиц
	|Документ.ВедомостьПрочихДоходовВКассу.Изменение.Организации
	|Справочник.ВедомостьПрочихДоходовВКассуПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВедомостьПрочихДоходовВКассуПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВедомостьПрочихДоходовВКассуПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВедомостьПрочихДоходовВКассуПрисоединенныеФайлы.Изменение.Организации";
	
	Описание = Описание + "
	|Документ.ВедомостьПрочихДоходовПеречислением.Чтение.ГруппыФизическихЛиц
	|Документ.ВедомостьПрочихДоходовПеречислением.Чтение.Организации
	|Документ.ВедомостьПрочихДоходовПеречислением.Изменение.ГруппыФизическихЛиц
	|Документ.ВедомостьПрочихДоходовПеречислением.Изменение.Организации
	|Справочник.ВедомостьПрочихДоходовПеречислениемПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВедомостьПрочихДоходовПеречислениемПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВедомостьПрочихДоходовПеречислениемПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВедомостьПрочихДоходовПеречислениемПрисоединенныеФайлы.Изменение.Организации";
	
	Описание = Описание + "
	|ЖурналДокументов.ВедомостиПрочихДоходов.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ВедомостиПрочихДоходов.Чтение.Организации";
	
	Описание = Описание + "
	|РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами.Чтение.Организации";
	
КонецПроцедуры

#КонецОбласти
	
// Возвращает структуру с настройками подсистемы
//
Функция НастройкиВзаиморасчетовПоПрочимДоходам() Экспорт

	Настройки = РегистрыСведений.НастройкиВзаиморасчетовПоПрочимДоходам.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							Настройки, Метаданные.РегистрыСведений.НастройкиВзаиморасчетовПоПрочимДоходам);
							
	Возврат СтруктураНастроек;  

КонецФункции

Функция ИспользуютсяВзаиморасчетыПоПрочимДоходам() Экспорт

	Возврат НастройкиВзаиморасчетовПоПрочимДоходам().ИспользоватьВзаиморасчетыПоПрочимДоходам;	

КонецФункции 

// Создает новую пустую таблицу значений для данных о выплаченных доходах.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица значений с колонками:
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата
//			* ДокументОснование - ОпределяемыйТип.ДокументОснованиеВыплатыПрочихДоходов
//			* Сумма - Число 	
//
Функция НоваяТаблицаВыплаченногоДохода() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ФизическоеЛицо",       Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов",       Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("ДокументОснование",    Метаданные.ОпределяемыеТипы.ДокументОснованиеВыплатыПрочихДоходов.Тип);
	Таблица.Колонки.Добавить("Сумма",                Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип);
	
	Возврат Таблица
	
КонецФункции

// Регистрирует выплату прочих доходов в учете взаиморасчетов.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений ведомости.
//		Отказ             - Булево - признак отказа в проведении.
//		Организация       - СправочникСсылка.Организации
//		ПериодРегистрации - Дата  - первое число месяца периода регистрации.
//		Выплаты          - ТаблицаЗначений - см. НоваяТаблицаВыплаченнойЗарплаты
//		СпособРасчетов   - ПеречислениеСсылка.СпособыРасчетовСФизическимиЛицами
//
Процедура ЗарегистрироватьВыплаченныйДоход(Движения, Отказ, Организация, ПериодРегистрации, Выплаты, СпособРасчетов) Экспорт
	
	Если Выплаты.Количество() = 0	 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаВыплаты Из Выплаты Цикл
		НоваяЗапись = Движения.ВзаиморасчетыСКонтрагентамиАкционерами.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаВыплаты);
		НоваяЗапись.Организация 	= Организация;
		НоваяЗапись.СпособРасчетов 	= СпособРасчетов;
		НоваяЗапись.Период      	= ПериодРегистрации;
		НоваяЗапись.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;
		НоваяЗапись.СуммаВзаиморасчетов	= СтрокаВыплаты.Сумма;
	КонецЦикла;
	
КонецПроцедуры

Функция МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	
	МенеджерДокументаПоМестуВыплаты = Неопределено;
	
	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьПрочихДоходовВКассу
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьПрочихДоходовПеречислением
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьПрочихДоходовВБанк
	КонецЕсли;
		
	Возврат МенеджерДокументаПоМестуВыплаты
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживание обработки ПлатежиПоРезультатамРасчетаЗарплаты.

// Получает суммы выплат в пользу контрагентов еще не включенные в ведомости.
//
// Параметры:
//		Организации - Массив - содержит ссылки на организации(СправочникСсылка.Организации),
//								по которым рассчитываются остатки.
//		ДатаАктуальности - дата, определяет месяц на конец которого получаются остатки.
//
// Возвращаемое значение:
//		ТаблицаЗначений:
//			* Организация 			- СправочникСсылка.Организации
//			* ПериодВзаиморасчетов 	- Дата, дата возникновения обязательств
//			* СтатьяФинансирования 	- СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов 		- СправочникСсылка.СтатьиРасходовЗарплата
//			* ДокументОснование 	- ОпределяемыйТип.ДокументОснованиеВыплатыПрочихДоходов
//			* Сумма 				- Число.
//
Функция ПрочиеДоходыКВыплатеДляПлатежейПоРезультатамРасчета(Организации, ДатаАктуальности) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ДатаОстатков", КонецМесяца(ДатаАктуальности));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаиморасчеты.Организация КАК Организация,
	|	Взаиморасчеты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Взаиморасчеты.СтатьяРасходов КАК СтатьяРасходов,
	|	Взаиморасчеты.ДокументОснование КАК ДокументОснование,
	|	Взаиморасчеты.СуммаВзаиморасчетовОстаток КАК Сумма
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами.Остатки(&ДатаОстатков, Организация В (&Организации)) КАК Взаиморасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.СтатьяФинансирования,
	|	Взаиморасчеты.Организация,
	|	Взаиморасчеты.СтатьяРасходов,
	|	Взаиморасчеты.ДокументОснование,
	|	Взаиморасчеты.СуммаВзаиморасчетовОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Взаиморасчеты.Период КАК Период,
	|	Взаиморасчеты.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТДата
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстатки КАК Остатки
	|		ПО Взаиморасчеты.ДокументОснование = Остатки.ДокументОснование
	|			И (Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Дата.Период КАК ПериодВзаиморасчетов,
	|	Остатки.Организация КАК Организация,
	|	Остатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Остатки.СтатьяРасходов КАК СтатьяРасходов,
	|	Остатки.ДокументОснование КАК ДокументОснование,
	|	Остатки.Сумма КАК Сумма
	|ИЗ
	|	ВТОстатки КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДата КАК Дата
	|		ПО Остатки.ДокументОснование = Дата.ДокументОснование";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтборЗапросаОстаткиВзаиморасчетовСКонтрагентамиАкционерам() Экспорт
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Основания");
	Отбор.Вставить("ФизическиеЛица");
	Отбор.Вставить("СтатьяФинансирования");
	Отбор.Вставить("СтатьяРасходов");
	
	Возврат Отбор
	
КонецФункции	
	
Функция ЗапросОстаткиВзаиморасчетовСКонтрагентамиАкционерами(Регистратор, МоментВремени, Организация, СпособРасчетов, Отбор, ТолькоРазрешенные = Истина) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор",    Регистратор);
	Запрос.УстановитьПараметр("МоментВремени",  МоментВремени);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("СпособРасчетов", СпособРасчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Остатки.ДокументОснование КАК ДокументОснование,
	|	Остатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Остатки.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Остатки.КВыплате) КАК КВыплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Взаиморасчеты.ДокументОснование КАК ДокументОснование,
	|		Взаиморасчеты.СтатьяФинансирования КАК СтатьяФинансирования,
	|		Взаиморасчеты.СтатьяРасходов КАК СтатьяРасходов,
	|		ВЫБОР
	|			КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Взаиморасчеты.СуммаВзаиморасчетов
	|			ИНАЧЕ Взаиморасчеты.СуммаВзаиморасчетов
	|		КОНЕЦ КАК КВыплате
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами КАК Взаиморасчеты
	|	ГДЕ
	|		Взаиморасчеты.Регистратор = &Регистратор
	|		И Взаиморасчеты.Организация = &Организация
	|		И Взаиморасчеты.СпособРасчетов = &СпособРасчетов
	|		И &ОтборПоФизлицам
	|		И &ОтборПоОснованиям
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВзаиморасчетыОстатки.ФизическоеЛицо,
	|		ВзаиморасчетыОстатки.ДокументОснование,
	|		ВзаиморасчетыОстатки.СтатьяФинансирования,
	|		ВзаиморасчетыОстатки.СтатьяРасходов,
	|		ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами.Остатки(
	|				&МоментВремени,
	|				Организация = &Организация
	|					И СпособРасчетов = &СпособРасчетов
	|					И &ОтборПоФизлицам
	|					И &ОтборПоОснованиям) КАК ВзаиморасчетыОстатки) КАК Остатки
	|ГДЕ
	|	&ОтборПоСтатьям
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ФизическоеЛицо,
	|	Остатки.ДокументОснование,
	|	Остатки.СтатьяФинансирования,
	|	Остатки.СтатьяРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.КВыплате) <> 0";
	
	Если Не ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	ЗапросОстаткиВзаиморасчетовСКонтрагентамиАкционерамиУстановитьОтборПоФизлицам(Запрос, Отбор);
	ЗапросОстаткиВзаиморасчетовСКонтрагентамиАкционерамиУстановитьОтборПоОснованиям(Запрос, Отбор);
	ЗапросОстаткиВзаиморасчетовСКонтрагентамиАкционерамиУстановитьОтборПоСтатьям(Запрос, Отбор);
	
	Возврат Запрос;

КонецФункции

Функция ЗапросОстаткиВзаиморасчетовСКонтрагентамиАкционерамиУстановитьОтборПоФизлицам(Запрос, Отбор)
	
	ТекстОтбора = "ИСТИНА";
	
	Если ТипЗнч(Отбор.ФизическиеЛица) = Тип("Массив") Тогда
		ТекстОтбора = "ФизическоеЛицо В (&ФизическиеЛица)";
		Запрос.УстановитьПараметр("ФизическиеЛица", Отбор.ФизическиеЛица);
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоФизлицам", ТекстОтбора);
	
КонецФункции

Функция ЗапросОстаткиВзаиморасчетовСКонтрагентамиАкционерамиУстановитьОтборПоОснованиям(Запрос, Отбор)
	
	ТекстОтбора = "ИСТИНА";
	
	Если Отбор.Основания = Неопределено Тогда
		ТекстОтбора = "ИСТИНА";
	ИначеЕсли ТипЗнч(Отбор.Основания) = Тип("Массив") И Отбор.Основания.Количество() > 0 Тогда
		ТекстОтбора = "ДокументОснование В (&Основания)";
		Запрос.УстановитьПараметр("Основания", Отбор.Основания);
	ИначеЕсли ТипЗнч(Отбор.Основания) = Тип("ОбъектМетаданных") Тогда
		ТекстОтбора = СтрШаблон("ДокументОснование ССЫЛКА %1", Отбор.Основания.ПолноеИмя());
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОснованиям", ТекстОтбора);
	
КонецФункции

Функция ЗапросОстаткиВзаиморасчетовСКонтрагентамиАкционерамиУстановитьОтборПоСтатьям(Запрос, Отбор)
	
	ТекстОтбора = "ИСТИНА";
	
	ОтборПоСтатьям = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.СтатьяФинансирования) Тогда
		ОтборПоСтатьям.Добавить("СтатьяФинансирования = &СтатьяФинансирования");
		Запрос.УстановитьПараметр("СтатьяФинансирования", Отбор.СтатьяФинансирования);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Отбор.СтатьяРасходов) Тогда
		ОтборПоСтатьям.Добавить("СтатьяРасходов = &СтатьяРасходов");
		Запрос.УстановитьПараметр("СтатьяРасходов", Отбор.СтатьяРасходов);
	КонецЕсли;	
	Если ОтборПоСтатьям.Количество() > 0 Тогда
		ТекстОтбора = СтрСоединить(ОтборПоСтатьям, " И ");
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСтатьям", ТекстОтбора);
	
КонецФункции

#КонецОбласти