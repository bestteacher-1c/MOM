////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РасчетАмортизации

// Формирует параметры необходимые для расчета амортизации
// 
// Возвращаемое значение:
//  Структура - Содержит поля:
//  * Период		- Дата - Период в котором требуется рассчитать амортизацию (обязательный).
//	* ОбъектыУчета	- Строка - "ОС" или "НМА".
//  * ПакетыАмортизации - ТаблицаЗначение - Содержит список организаций и номера пакетов (может быть не заполнен).
//  * Ответственный	- СправочникСсылка.Пользователи - Ответственный за документ (может быть не заполнен).
//
Функция НовыеПараметрыРасчетаАмортизации() Экспорт

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Период", '000101010000');
	ПараметрыРасчета.Вставить("СписокОрганизаций", Новый Массив);
	ПараметрыРасчета.Вставить("ОбъектыУчета", "ОС");
	ПараметрыРасчета.Вставить("ЕстьОшибки", Ложь);
	ПараметрыРасчета.Вставить("ВернутьПараметрыРасчета", Ложь);
	ПараметрыРасчета.Вставить("АдресПараметровРасчета", Неопределено);
	ПараметрыРасчета.Вставить("ЗаписатьДанные", Истина);
	ПараметрыРасчета.Вставить("ЭтапРасчета", Неопределено);
	ПараметрыРасчета.Вставить("НомерЗадания", Неопределено);
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Неопределено);
	
	// Значения, используемые при расчете из формы документа.
	ПараметрыРасчета.Вставить("НомерПакета", Неопределено);
	ПараметрыРасчета.Вставить("Ссылка", Неопределено);
	ПараметрыРасчета.Вставить("Ответственный", Неопределено);
	ПараметрыРасчета.Вставить("Комментарий", Неопределено);
	
	// Описывает по каким пакетам нужно выполнить расчет.
	// Если у организации есть филиалы, то для корректного расчета они должны быть включены в список.
	ПакетыАмортизации = Новый ТаблицаЗначений;
	ПакетыАмортизации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПакетыАмортизации.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ПараметрыРасчета.Вставить("ПакетыАмортизации", ПакетыАмортизации);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Выполняет расчет амортизации в заданном месяце и записывает результат с помощью проведения документов "Амортизация ОС".
// При необходимости расчет может выполняться параллельно несколькими заданиями.
//
// Параметры:
//  ПараметрыРасчета	 - Структура - Список параметров (см. ВнеоборотныеАктивы.НовыеПараметрыРасчетаАмортизации()).
//  АдресХранилища		 - Строка - Используется для возможности выполнения в фоновом задании.
//
Процедура РассчитатьАмортизацию(ПараметрыРасчета, АдресХранилища) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.Период) Тогда
		Возврат;
	КонецЕсли; 
	
	ПакетыАмортизации = ПараметрыРасчета.ПакетыАмортизации;
	СписокОрганизаций = ПакетыАмортизации.ВыгрузитьКолонку("Организация");
	
	Попытка
		
		Если ПараметрыРасчета.ОбъектыУчета = "ОС" Тогда
			ОперацияЗакрытияМесяца = Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС;
			ИзмененныеПакеты = РегистрыСведений.ПакетыАмортизацииОС.СоздатьПакетыАмортизации(СписокОрганизаций, ПараметрыРасчета.НомерЗадания);
		Иначе
			ОперацияЗакрытияМесяца = Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииНМА;
			ИзмененныеПакеты = РегистрыСведений.ПакетыАмортизацииНМА.СоздатьПакетыАмортизации(СписокОрганизаций, ПараметрыРасчета.НомерЗадания);
		КонецЕсли;
		
		ОчередьЗаданийКРасчету = СоздатьОчередьЗаданий(ПараметрыРасчета, ИзмененныеПакеты);
		ПараметрыРасчета.ЕстьОшибки = ВыполнитьОчередьЗаданий(ОчередьЗаданийКРасчету);
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета.ЭтапРасчета,
			ПараметрыРасчета.Период,
			ПараметрыРасчета.СписокОрганизаций, 
			ТекстОшибки,,,
			ПараметрыРасчета.ЕстьОшибки);
			
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ПараметрыРасчета.ЕстьОшибки, АдресХранилища);
	
КонецПроцедуры

// Используется для расчета амортизации ОС в фоне.
//  Допускается расчет по нескольким организациям.
//
// Параметры:
//  ПараметрыРасчета		 - Структура				 - см. НовыеПараметрыРасчетаАмортизации()
//  УникальныйИдентификатор	 - УникальныйИдентификатор	 - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьРасчетАмортизацииВФоне(ПараметрыРасчета, УникальныйИдентификатор) Экспорт

	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"ВнеоборотныеАктивы.РассчитатьАмортизацию",
						ПараметрыРасчета,
						НСтр("ru = 'Расчет амортизации'"));
	
	Возврат РезультатРасчета;

КонецФункции

// Вызывается при выполнении операции закрытия месяца "Расчет амортизации ОС".
//
//  Перед расчетом всегда выполняется создание пакетов.
//  После создания пакетов добавляются задания на новые номера пакетов, а задания с нулевым номером пакета удаляются.
//  
//  При необходимости расчет может выполняется несколькими фоновыми заданиями.
//  Количество заданий определяется в ВнеоборотныеАктивыПереопределяемый.МаксимальноеКоличествоЗаданийДляРасчетаАмортизации().
//  В каждое задание передаются свои номера пакетов.
//  На каждый пакет создается отдельный документ.
//  Максимальное количество ОС в одном пакете определяется в ВнеоборотныеАктивыПереопределяемый.МаксимальныйОбъемПакетаОС().
//
Процедура ВыполнитьОперациюЗакрытияМесяцаРасчетАмортизацииОС(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	
	НачалоРасчета = РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.НачалоРасчета(ПараметрыРасчета.МассивОрганизаций);
										
	Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > КонецРасчета Тогда
		Возврат;
	КонецЕсли;
	
	НомерЗадания = РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.УвеличитьНомерЗадания();
	
	ИспользоватьВнеоборотныеАктивы2_4 = ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4");
	НачалоРасчетаАмортизацииОС2_4 = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4(); 
	
	Отказ = Ложь;
	
	Если ИспользоватьВнеоборотныеАктивы2_4 Тогда
		РегистрыНакопления.АмортизацияОС.УстановитьИспользованиеТекущихИтогов(Ложь);
		РегистрыНакопления.СтоимостьОС.УстановитьИспользованиеТекущихИтогов(Ложь);
	КонецЕсли; 
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		ЗаданияКРасчету = РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.ЗаданияКРасчетуЗаМесяц(
								НачалоРасчета, ОкончаниеПериода, НомерЗадания, ПараметрыРасчета.МассивОрганизаций);
		
		Попытка
			
			Если ИспользоватьВнеоборотныеАктивы2_4 И НачалоРасчета >= НачалоРасчетаАмортизацииОС2_4 Тогда
				
				ПараметрыРасчетаАмортизации = НовыеПараметрыРасчетаАмортизации();
				ПараметрыРасчетаАмортизации.Период = НачалоРасчета;
				ПараметрыРасчетаАмортизации.СписокОрганизаций = ПараметрыРасчета.МассивОрганизаций;
				ПараметрыРасчетаАмортизации.ОбъектыУчета = "ОС";
				ПараметрыРасчетаАмортизации.ЭтапРасчета = ПараметрыОбработчика.ДанныеЭтапа.Код;
				ПараметрыРасчетаАмортизации.ПакетыАмортизации = ЗаданияКРасчету.ПакетыАмортизации.Скопировать();
				ПараметрыРасчетаАмортизации.НомерЗадания = НомерЗадания;
				
				РассчитатьАмортизацию(ПараметрыРасчетаАмортизации, Неопределено);
				
				Если ПараметрыРасчетаАмортизации.ЕстьОшибки Тогда
					Отказ = Истина;
				КонецЕсли;
				
			Иначе
				
				ВнеоборотныеАктивыЛокализация.СоздатьДокументыАмортизацииОС(НачалоРасчета, ПараметрыРасчета, Отказ);
				
			КонецЕсли;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.ЗафиксироватьРасчет(
				ПараметрыРасчета.МассивОрганизаций, 
				НачалоРасчета, 
				НомерЗадания, 
				ЗаданияКРасчету);
					
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				НачалоРасчета,
				ПараметрыРасчета.МассивОрганизаций, 
				ТекстОшибки,,,
				Отказ);
			
			Возврат;
				
		КонецПопытки;
		
		НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
		
	КонецЦикла;
	
	Если ИспользоватьВнеоборотныеАктивы2_4 Тогда
		РегистрыНакопления.АмортизацияОС.УстановитьИспользованиеТекущихИтогов(Истина);
		РегистрыНакопления.СтоимостьОС.УстановитьИспользованиеТекущихИтогов(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при выполнении операции закрытия месяца "Расчет амортизации НМА".
//
//  Перед расчетом всегда выполняется создание пакетов.
//  После создания пакетов добавляются задания на новые номера пакетов, а задания с нулевым номером пакета удаляются.
//  
//  При необходимости расчет может выполняется несколькими фоновыми заданиями.
//  Количество заданий определяется в ВнеоборотныеАктивыПереопределяемый.МаксимальноеКоличествоЗаданийДляРасчетаАмортизации().
//  В каждое задание передаются свои номера пакетов.
//  На каждый пакет создается отдельный документ.
//  Максимальное количество ОС в одном пакете определяется в ВнеоборотныеАктивыПереопределяемый.МаксимальныйОбъемПакетаОС().
//
Процедура ВыполнитьОперациюЗакрытияМесяцаРасчетАмортизацииНМА(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	
	НачалоРасчета = РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.НачалоРасчета(ПараметрыРасчета.МассивОрганизаций);
										
	Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > КонецРасчета Тогда
		Возврат;
	КонецЕсли;
	
	НомерЗадания = РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.УвеличитьНомерЗадания();
	
	ИспользоватьВнеоборотныеАктивы2_4 = ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4");
	НачалоРасчетаАмортизацииНМА2_4 = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4(); 
	
	Отказ = Ложь;
	
	РегистрыНакопления.АмортизацияНМА.УстановитьИспользованиеТекущихИтогов(Ложь);
	РегистрыНакопления.СтоимостьНМА.УстановитьИспользованиеТекущихИтогов(Ложь);
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		ЗаданияКРасчету = РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.ЗаданияКРасчетуЗаМесяц(
								НачалоРасчета, ОкончаниеПериода, НомерЗадания, ПараметрыРасчета.МассивОрганизаций);
		
		Попытка
			
			Если ИспользоватьВнеоборотныеАктивы2_4 И НачалоРасчета >= НачалоРасчетаАмортизацииНМА2_4 Тогда
				
				ПараметрыРасчетаАмортизации = НовыеПараметрыРасчетаАмортизации();
				ПараметрыРасчетаАмортизации.Период = НачалоРасчета;
				ПараметрыРасчетаАмортизации.СписокОрганизаций = ПараметрыРасчета.МассивОрганизаций;
				ПараметрыРасчетаАмортизации.ОбъектыУчета = "НМА";
				ПараметрыРасчетаАмортизации.ЭтапРасчета = ПараметрыОбработчика.ДанныеЭтапа.Код;
				ПараметрыРасчетаАмортизации.ПакетыАмортизации = ЗаданияКРасчету.ПакетыАмортизации.Скопировать();
				ПараметрыРасчетаАмортизации.НомерЗадания = НомерЗадания;
				
				РассчитатьАмортизацию(ПараметрыРасчетаАмортизации, Неопределено);
				
				Если ПараметрыРасчетаАмортизации.ЕстьОшибки Тогда
					Отказ = Истина;
				КонецЕсли; 
				
			Иначе
				
				ВнеоборотныеАктивыЛокализация.СоздатьДокументыАмортизацииНМА(НачалоРасчета, ПараметрыРасчета, Отказ);
				
			КонецЕсли;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.ЗафиксироватьРасчет(
				ПараметрыРасчета.МассивОрганизаций, 
				НачалоРасчета, 
				НомерЗадания, 
				ЗаданияКРасчету);
					
			НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
		
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				НачалоРасчета,
				ПараметрыРасчета.МассивОрганизаций, 
				ТекстОшибки,,,
				Отказ);
			
			Возврат;
				
		КонецПопытки;
		
	КонецЦикла;
	
	РегистрыНакопления.АмортизацияНМА.УстановитьИспользованиеТекущихИтогов(Истина);
	РегистрыНакопления.СтоимостьНМА.УстановитьИспользованиеТекущихИтогов(Истина);
	
КонецПроцедуры

// Отменяет запущенные фоновые задания в которых выполняется расчет амортизации.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор основного задания.
//  АдресХранилища		 - Строка - Адрес хранилища, в котором содержится список заданий.
// 
// Возвращаемое значение:
//  Булево - Истина, если задания успешно отменены.
//
Функция ОтменитьФоновыйРасчетАмортизации(ИдентификаторЗадания, АдресХранилища) Экспорт

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ОчередьЗаданийКРасчету = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ОчередьЗаданийКРасчету = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого ОписаниеЗадания Из ОчередьЗаданийКРасчету Цикл
		Если ОписаниеЗадания.Статус = "Выполняется" Тогда
			ДлительныеОперации.ОтменитьВыполнениеЗадания(ОписаниеЗадания.ИдентификаторЗадания);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
 
#КонецОбласти

#Область РасчетСтоимостиВнеоборотныхАктивов

// Вызывается при выполнении операции закрытия месяца "Расчет стоимости ОС и НМА".
//
Процедура ВыполнитьОперациюЗакрытияМесяцаРасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	
	Если НЕ ИспользуетсяУправлениеВНА_2_4(КонецРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоРасчета = РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.НачалоРасчета(ПараметрыРасчета.МассивОрганизаций);
	
	Если Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить() Тогда
		НачалоРасчета = Макс(НачалоРасчета, ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > КонецРасчета Тогда
		Возврат;
	КонецЕсли;
	
	НомерЗадания = РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.УвеличитьНомерЗадания();
	
	Отказ = Ложь;
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ЗакрытиеМесяца.РасчетСтоимостиВнеоборотныхАктивов");
		
		ЗаданияКРасчету = РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.ЗаданияКРасчетуЗаМесяц(
								НачалоРасчета, ОкончаниеПериода, НомерЗадания, ПараметрыРасчета.МассивОрганизаций);
		
		Попытка
			
			КоличествоДанных = РассчитатьСтоимостьВнеоборотныхАктивов(
									НачалоРасчета, 
									ЗаданияКРасчету.ВременныеТаблицы, 
									ПараметрыОбработчика, 
									Неопределено,
									Отказ);
			
			АктуализироватьДвиженияПослеРасчетаСтоимости(
				НачалоРасчета, 
				ЗаданияКРасчету.ВременныеТаблицы, 
				ПараметрыОбработчика, 
				Отказ);
				
			ВнеоборотныеАктивыЛокализация.ПриВыполненииОперацииЗакрытияМесяцаРасчетСтоимостиВнеоборотныхАктивов(
				НачалоРасчета, 
				ЗаданияКРасчету.ВременныеТаблицы, 
				ПараметрыОбработчика, 
				Отказ);
				
			ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ЗаданияКРасчету.ВременныеТаблицы,, "КэшГраниц");
				
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.ЗафиксироватьРасчет(
				ПараметрыРасчета.МассивОрганизаций, НачалоРасчета, НомерЗадания, ЗаданияКРасчету);
				
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				НачалоРасчета,
				ПараметрыРасчета.МассивОрганизаций,
				ТекстОшибки,,,
				Отказ);
			
			Возврат;
			
		КонецПопытки;
		
		НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет стоимости ОС и НМА перед формированием проводок.
//  Используется для того чтобы сформировать проводки на основании стоимости ОС и НМА.
//
// Параметры:
//  МассивСсылок - Массив	 - Список документов, по которым будут сформированы проводки.
//
Процедура РассчитатьСтоимостьВнеоборотныхАктивовПриФормированииПроводок(МассивСсылок) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДанныеДляПредварительногоРасчета = ДанныеДляПредварительногоРасчетаСтоимостиВнеоборотныхАктивов(МассивСсылок, МенеджерВременныхТаблиц);
	
	Выборка = ДанныеДляПредварительногоРасчета.Результат.Выбрать();
	
	Отказ = Ложь;
	Пока Выборка.Следующий() Цикл
	
		РассчитатьСтоимостьВнеоборотныхАктивов(
			Выборка.Период, 
			МенеджерВременныхТаблиц, 
			Неопределено, 
			МассивСсылок, 
			Отказ);
			
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, "КэшГраниц");
		
	КонецЦикла; 	
	
КонецПроцедуры

// Используется для предварительного расчета стоимости.
//
// Параметры:
//  МассивСсылок			 - Массив - Список документов.
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - Менеджер временных таблиц.
// 
// Возвращаемое значение:
//  Структура - Содержит данные для начала предварительного расчета стоимости.
//
Функция ДанныеДляПредварительногоРасчетаСтоимостиВнеоборотныхАктивов(МассивСсылок, МенеджерВременныхТаблиц = Неопределено) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьОС.Период    КАК Период,
	|	Задания.ОбъектУчета   КАК ОбъектУчета,
	|	Задания.Организация   КАК Организация
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|		ПО (Задания.Организация = СтоимостьОС.Организация)
	|			И (Задания.ОбъектУчета = СтоимостьОС.АналитикаКапитализацииРасходов)
	|			И (Задания.Месяц <= СтоимостьОС.Период)
	|ГДЕ
	|	СтоимостьОС.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьОС.Период                          КАК Период,
	|	СтоимостьОС.АналитикаКапитализацииРасходов  КАК ОбъектУчета,
	|	СтоимостьОС.Организация                     КАК Организация
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС_РасчетСтоимости
	|		ПО СтоимостьОС_РасчетСтоимости.Регистратор = СтоимостьОС.Регистратор
	|			И СтоимостьОС_РасчетСтоимости.РасчетСтоимости
	|ГДЕ
	|	СтоимостьОС.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И СтоимостьОС_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|	И НЕ &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьНМА.Период   КАК Период,
	|	Задания.ОбъектУчета   КАК ОбъектУчета,
	|	Задания.Организация   КАК Организация
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|		ПО (Задания.Организация = СтоимостьНМА.Организация)
	|			И (Задания.ОбъектУчета = СтоимостьНМА.НематериальныйАктив)
	|			И (Задания.Месяц <= СтоимостьНМА.Период)
	|ГДЕ
	|	СтоимостьНМА.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьНМА.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьНМА.Период               КАК Период,
	|	СтоимостьНМА.НематериальныйАктив  КАК ОбъектУчета,
	|	СтоимостьНМА.Организация          КАК Организация
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА_РасчетСтоимости
	|		ПО СтоимостьНМА_РасчетСтоимости.Регистратор = СтоимостьНМА.Регистратор
	|			И СтоимостьНМА_РасчетСтоимости.РасчетСтоимости
	|ГДЕ
	|	СтоимостьНМА.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьНМА.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И СтоимостьНМА_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|	И НЕ &ГлавныйУзел
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Период
	|ИЗ
	|	КэшГраниц КАК КэшГраниц";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	Запрос.УстановитьПараметр("ТипыДокументовПоКоторымРассчитываетсяСтоимость", ТипыДокументовПоКоторымРассчитываетсяСтоимость(Истина));
	
	Результат = Запрос.ВыполнитьПакет();

	ОбъектыДляКоторыхСведенияНеАктуальны = Результат[Результат.ВГраница()-1].Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	
	Возврат Новый Структура(
			"Результат, ОбъектыДляКоторыхСведенияНеАктуальны", 
			Результат[Результат.ВГраница()],
			ОбъектыДляКоторыхСведенияНеАктуальны);
	
КонецФункции
 
// Возвращает таблицы движений, которые формируются отложенно, при расчете стоимости.
// Используется в обработчиках обновления.
//
// Параметры:
//  Регистратор	 - ДокументСсылка	 - Документ, для которого нужно получить таблицы движений.
//  Отказ		 - Булево			 - Истина, если при выполнении возникли ошибки.
// 
// Возвращаемое значение:
//  Структура, Неопределено - Содержит таблицы движений (ключ - имя регистра, значение - данные регистра).
//
Функция ТаблицыДвиженийРасчетаСтоимости(Регистратор, Отказ = Ложь) Экспорт

	ТаблицыДляДвижений = Неопределено;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьОС.Период                           КАК Период,
	|	СтоимостьОС.АналитикаКапитализацииРасходов   КАК ОбъектУчета,
	|	СтоимостьОС.Организация                      КАК Организация
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|ГДЕ
	|	СтоимостьОС.Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьНМА.Период                КАК Период,
	|	СтоимостьНМА.НематериальныйАктив   КАК ОбъектУчета,
	|	СтоимостьНМА.Организация           КАК Организация
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|ГДЕ
	|	СтоимостьНМА.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Период
	|ИЗ
	|	КэшГраниц КАК КэшГраниц";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ТекстЗапроса = ТекстЗапросаРасчетСтоимости();
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Выборка.Период));
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Выборка.Период));
		Запрос.УстановитьПараметр("ТекущийДокумент", Неопределено);
		Запрос.УстановитьПараметр("МассивСсылок", Новый Массив);
		Запрос.УстановитьПараметр("ОтборПоДокументам", Ложь);
		
		Запрос.УстановитьПараметр(
			"ТипыДокументовПоКоторымРассчитываетсяСтоимость", 
			ТипыДокументовПоКоторымРассчитываетсяСтоимость());
			
		Запрос.УстановитьПараметр(
			"ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость", 
			ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость());
		
		УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос);
		
		Результат = Запрос.Выполнить();
		ВыборкаДокумент = Результат.Выбрать();
		Если ВыборкаДокумент.Следующий() Тогда
			ТаблицыДляДвижений = СформироватьТаблицыДвиженийРасчетаСтоимости(ВыборкаДокумент, Неопределено, МенеджерВременныхТаблиц, Отказ);
			Для каждого КлючИЗначение Из ТаблицыДляДвижений Цикл
				Если СтрНачинаетсяС(КлючИЗначение.Ключ, "Таблица") Тогда
					ТаблицыДляДвижений.Вставить(Сред(КлючИЗначение.Ключ, 8), КлючИЗначение.Значение);
					ТаблицыДляДвижений.Удалить(КлючИЗначение.Ключ);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ТаблицыДляДвижений;

КонецФункции

// Рассчитывает суммы расходов по объектам учета, указанных в документе
//
// Параметры:
//  РасходыПоДокументам	- ТаблицаЗначений	- Таблица, которая содержит расходы, в ней обязательно должны присутствовать колонки:
//  										АналитикаРасходов, СуммаУпр, СуммаРегл, ПостояннаяРазница, ВременнаяРазница.
//											Расходы можно получить при помощи ТекстЗапросаРасходыПоДокументам().
//  ПараметрыРасчета	- Структура	- Содержит параметры расчета (см. функцию ПараметрыРасчетаСтоимости()).
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит суммы расходов. Содержит колонки из таблицы РасходыПоДокументам и колонку ОбъектУчета.
//
Функция РассчитатьРасходыПоДокументу(РасходыПоДокументам, ПараметрыРасчета) Экспорт

	ТипОбъектаУчета = Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации,СправочникСсылка.НематериальныеАктивы");
	
	Если ПараметрыРасчета.ФактическаяСтоимость Тогда
		
		РезультатРасчета = РасходыПоДокументам.СкопироватьКолонки();
		РезультатРасчета.Колонки.Добавить("ОбъектУчета", ТипОбъектаУчета);
			
		// Нужно фактическую стоимость каждого ОС распределить пропорционально суммам расходов.
		//
		// Например, в документе ОС1: СтоимостьУУ=1000, СтоимостьБУ=1000
		// Расходы: Статья1: СуммаУпр=500,  СуммаРегл=5000;
		//          Статья2: СуммаУпр=1500, СуммаРегл=15000;
		// Расчет: СтоимостьУУ на Статья1=1000*500/2000 =250
		//                     на Статья2=1000*1500/2000=750
		//         СтоимостьБУ на Статья1=1000*5000/2000 =2500
		//                     на Статья2=1000*15000/2000=7500.
		
		СведенияОРасходах = Новый Соответствие;
		Для Каждого СтрокаРасходы Из РасходыПоДокументам Цикл
			
			Если ПараметрыРасчета.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства Тогда
				АналитикаРасходов = Справочники.ОбъектыЭксплуатации.ПустаяСсылка();
			Иначе
				АналитикаРасходов = СтрокаРасходы.АналитикаРасходов;
			КонецЕсли;
			
			ДанныеПоАналитке = СведенияОРасходах.Получить(АналитикаРасходов);
			Если ДанныеПоАналитке = Неопределено Тогда
				ДанныеПоАналитке = Новый Структура;
				
				ДанныеПоАналитке.Вставить("РасходыПоОбъектуУчета", РасходыПоДокументам.СкопироватьКолонки());

				ДанныеПоАналитке.Вставить("МассивКоэффициентовСумма", Новый Массив);
				ДанныеПоАналитке.Вставить("МассивКоэффициентовСуммаБезНДС", Новый Массив);
				ДанныеПоАналитке.Вставить("МассивКоэффициентовСуммаУпр", Новый Массив);
				ДанныеПоАналитке.Вставить("МассивКоэффициентовСуммаРегл", Новый Массив);
				
				ДанныеПоАналитке.Вставить("СуммаОстаток", 0);
				ДанныеПоАналитке.Вставить("СуммаБезНДСОстаток", 0);
				ДанныеПоАналитке.Вставить("СуммаУпрОстаток", 0);
				ДанныеПоАналитке.Вставить("СуммаРеглОстаток", 0);
			КонецЕсли;
			
			РасходыПоОбъектуУчета = ДанныеПоАналитке.РасходыПоОбъектуУчета.Добавить();
			ЗаполнитьЗначенияСвойств(РасходыПоОбъектуУчета, СтрокаРасходы);
			
			ДанныеПоАналитке.МассивКоэффициентовСумма.Добавить(СтрокаРасходы.Сумма);
			ДанныеПоАналитке.МассивКоэффициентовСуммаБезНДС.Добавить(СтрокаРасходы.СуммаБезНДС);
			ДанныеПоАналитке.МассивКоэффициентовСуммаУпр.Добавить(СтрокаРасходы.СуммаУпр);
			ДанныеПоАналитке.МассивКоэффициентовСуммаРегл.Добавить(СтрокаРасходы.СуммаРегл);
			
			ДанныеПоАналитке.СуммаОстаток = ДанныеПоАналитке.СуммаОстаток + СтрокаРасходы.Сумма;
			ДанныеПоАналитке.СуммаБезНДСОстаток = ДанныеПоАналитке.СуммаБезНДСОстаток + СтрокаРасходы.СуммаБезНДС;
			ДанныеПоАналитке.СуммаУпрОстаток = ДанныеПоАналитке.СуммаУпрОстаток + СтрокаРасходы.СуммаУпр;
			ДанныеПоАналитке.СуммаРеглОстаток = ДанныеПоАналитке.СуммаРеглОстаток + СтрокаРасходы.СуммаРегл;
			
			СведенияОРасходах.Вставить(АналитикаРасходов, ДанныеПоАналитке);
			
		КонецЦикла;
		
		Для каждого СтрокаДокумента Из ПараметрыРасчета.ТаблицаОбъектовУчета Цикл			
			
			Если ПараметрыРасчета.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства Тогда
				ДанныеПоАналитке = СведенияОРасходах.Получить(Справочники.ОбъектыЭксплуатации.ПустаяСсылка());
			Иначе
				ДанныеПоАналитке = СведенияОРасходах.Получить(СтрокаДокумента.ОбъектУчета);
			КонецЕсли;
			
			Если ДанныеПоАналитке = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДокумента.ОтражатьВУпрУчете Тогда

				РаспределениеСумма = ПолучитьРаспределениеСтоимости(
										СтрокаДокумента.СтоимостьУУ,
										ДанныеПоАналитке.СуммаОстаток,
										ДанныеПоАналитке.МассивКоэффициентовСумма);
				
				РаспределениеСуммаБезНДС = ПолучитьРаспределениеСтоимости(
										СтрокаДокумента.СтоимостьУУ,
										ДанныеПоАналитке.СуммаБезНДСОстаток,
										ДанныеПоАналитке.МассивКоэффициентовСуммаБезНДС);
										
				РаспределениеСуммаУпр = ПолучитьРаспределениеСтоимости(
										СтрокаДокумента.СтоимостьУУ,
										ДанныеПоАналитке.СуммаУпрОстаток,
										ДанныеПоАналитке.МассивКоэффициентовСуммаУпр);
										
			Иначе
				РаспределениеСумма = Неопределено;
				РаспределениеСуммаБезНДС = Неопределено;
				РаспределениеСуммаУпр = Неопределено;
			КонецЕсли;
			
			Если СтрокаДокумента.ОтражатьВРеглУчете 
				ИЛИ ПараметрыРасчета.ВедетсяРегламентированныйУчетВНА Тогда
				
				РаспределениеСуммаРегл = ПолучитьРаспределениеСтоимости(
										СтрокаДокумента.СтоимостьБУ,
										ДанныеПоАналитке.СуммаРеглОстаток,
										ДанныеПоАналитке.МассивКоэффициентовСуммаРегл);
				
			Иначе
				РаспределениеСуммаРегл = Неопределено;
			КонецЕсли;
			
			Для Сч = 0 По ДанныеПоАналитке.РасходыПоОбъектуУчета.Количество()-1 Цикл
				
				РасходыПоОбъектуУчета = ДанныеПоАналитке.РасходыПоОбъектуУчета[Сч];
				
				НоваяСтрока = РезультатРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, РасходыПоОбъектуУчета);
				НоваяСтрока.ОбъектУчета = СтрокаДокумента.ОбъектУчета;
				
				НоваяСтрока.Сумма = ?(РаспределениеСумма <> Неопределено, РаспределениеСумма[Сч], 0);
				НоваяСтрока.СуммаБезНДС = ?(РаспределениеСуммаБезНДС <> Неопределено, РаспределениеСуммаБезНДС[Сч], 0);
				НоваяСтрока.СуммаУпр = ?(РаспределениеСуммаУпр <> Неопределено, РаспределениеСуммаУпр[Сч], 0);
				НоваяСтрока.СуммаРегл = ?(РаспределениеСуммаРегл <> Неопределено, РаспределениеСуммаРегл[Сч], 0);
				
				// ПР и ВР рассчитываются исходя из полученной доли СуммаРегл
				Если РаспределениеСуммаРегл <> Неопределено Тогда
					Если РаспределениеСуммаРегл[Сч] <> РасходыПоОбъектуУчета.СуммаРегл Тогда
						НоваяСтрока.ПостояннаяРазница = РасходыПоОбъектуУчета.ПостояннаяРазница * РаспределениеСуммаРегл[Сч] / РасходыПоОбъектуУчета.СуммаРегл;
						НоваяСтрока.ВременнаяРазница  = РасходыПоОбъектуУчета.ВременнаяРазница  * РаспределениеСуммаРегл[Сч] / РасходыПоОбъектуУчета.СуммаРегл;
					КонецЕсли;
				Иначе
					НоваяСтрока.ПостояннаяРазница = 0;
					НоваяСтрока.ВременнаяРазница  = 0;
				КонецЕсли;

				// Уменьшаем расходы
				РасходыПоОбъектуУчета.Сумма = РасходыПоОбъектуУчета.Сумма - НоваяСтрока.Сумма;
				РасходыПоОбъектуУчета.СуммаБезНДС = РасходыПоОбъектуУчета.СуммаБезНДС - НоваяСтрока.СуммаБезНДС;
				РасходыПоОбъектуУчета.СуммаУпр = РасходыПоОбъектуУчета.СуммаУпр - НоваяСтрока.СуммаУпр;
				РасходыПоОбъектуУчета.СуммаРегл = РасходыПоОбъектуУчета.Сумма - НоваяСтрока.СуммаРегл;
				РасходыПоОбъектуУчета.ПостояннаяРазница = РасходыПоОбъектуУчета.ПостояннаяРазница - НоваяСтрока.ПостояннаяРазница;
				РасходыПоОбъектуУчета.ВременнаяРазница = РасходыПоОбъектуУчета.ВременнаяРазница - НоваяСтрока.ВременнаяРазница;

				ДанныеПоАналитке.МассивКоэффициентовСумма[Сч] = ДанныеПоАналитке.МассивКоэффициентовСумма[Сч] - НоваяСтрока.Сумма;
				ДанныеПоАналитке.МассивКоэффициентовСуммаБезНДС[Сч] = ДанныеПоАналитке.МассивКоэффициентовСуммаБезНДС[Сч] - НоваяСтрока.СуммаБезНДС;
				ДанныеПоАналитке.МассивКоэффициентовСуммаУпр[Сч] = ДанныеПоАналитке.МассивКоэффициентовСуммаУпр[Сч] - НоваяСтрока.СуммаУпр;
				ДанныеПоАналитке.МассивКоэффициентовСуммаРегл[Сч] = ДанныеПоАналитке.МассивКоэффициентовСуммаРегл[Сч] - НоваяСтрока.СуммаРегл;

				ДанныеПоАналитке.СуммаОстаток = ДанныеПоАналитке.СуммаОстаток - НоваяСтрока.Сумма;
				ДанныеПоАналитке.СуммаБезНДСОстаток = ДанныеПоАналитке.СуммаБезНДСОстаток - НоваяСтрока.СуммаБезНДС;
				ДанныеПоАналитке.СуммаУпрОстаток = ДанныеПоАналитке.СуммаУпрОстаток - НоваяСтрока.СуммаУпр;
				ДанныеПоАналитке.СуммаРеглОстаток = ДанныеПоАналитке.СуммаРеглОстаток - НоваяСтрока.СуммаРегл;
				 
			КонецЦикла; 
			
		КонецЦикла; 
		
	Иначе
		
		Если ПараметрыРасчета.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства
			ИЛИ ПараметрыРасчета.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР Тогда
			
			// Здесь расчет не нужен т.к. таблица уже содержит необходимые суммы
			
			РезультатРасчета = РасходыПоДокументам;
			РезультатРасчета.Колонки.Добавить("ОбъектУчета", ТипОбъектаУчета);
			
			Для каждого ДанныеСтроки Из РезультатРасчета Цикл
				ДанныеСтроки.ОбъектУчета = ДанныеСтроки.АналитикаРасходов;
				СтрокаДокумента = ПараметрыРасчета.ТаблицаОбъектовУчета.Найти(ДанныеСтроки.ОбъектУчета, "ОбъектУчета");
				Если НЕ СтрокаДокумента.ОтражатьВУпрУчете Тогда
					ДанныеСтроки.Сумма = 0;
					ДанныеСтроки.СуммаБезНДС = 0;
					ДанныеСтроки.СуммаУпр = 0;
				КонецЕсли;
				Если НЕ СтрокаДокумента.ОтражатьВРеглУчете И ПараметрыРасчета.ВедетсяРегламентированныйУчетВНА Тогда
					ДанныеСтроки.СуммаРегл = 0;
					ДанныеСтроки.ПостояннаяРазница = 0;
					ДанныеСтроки.ВременнаяРазница  = 0;
				КонецЕсли;
			КонецЦикла; 
			
		Иначе
			
			// Т.к. в таблице аналитикой является Объект строительства, то
			// необходимо по каждой статье распределить сумму расхода пропорционально плановым стоимостям ОС.
			//
			// Например, в документе ОС1: СтоимостьУУ=1000, СтоимостьБУ=10000
			//                       ОС2: СтоимостьУУ=4000, СтоимостьБУ=40000
			// Расходы: Статья1: СуммаУпр=500,  СуммаРегл=5000;
			//          Статья2: СуммаУпр=1500, СуммаРегл=15000;
			// Расчет: Статья1 на ОС1 СуммаУпр   =500*1000/5000=100
			//                 на ОС2 СтоимостьБУ=500*4000/5000=400
			//         Статья2 на ОС1 СуммаУпр   =1500*1000/5000=300
			//                 на ОС2 СтоимостьБУ=1500*4000/5000=1200.
			
			РезультатРасчета = РасходыПоДокументам.СкопироватьКолонки();
			РезультатРасчета.Колонки.Добавить("ОбъектУчета", ТипОбъектаУчета);
			
			МассивКоэффициентовСуммаУпр  = СоздатьМассивКоэффициентов(ПараметрыРасчета.ТаблицаОбъектовУчета, "СтоимостьУУ");
			МассивКоэффициентовСуммаРегл = СоздатьМассивКоэффициентов(ПараметрыРасчета.ТаблицаОбъектовУчета, "СтоимостьБУ");
			
			Для каждого ДанныеСтроки Из РасходыПоДокументам Цикл
				
				РаспределениеСумма       = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
												ДанныеСтроки.Сумма,  МассивКоэффициентовСуммаУпр);
												
				РаспределениеСуммаБезНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
												ДанныеСтроки.СуммаБезНДС,  МассивКоэффициентовСуммаУпр);
												
				РаспределениеСуммаУпр    = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
												ДанныеСтроки.СуммаУпр,  МассивКоэффициентовСуммаУпр);
				
				СуммаРегл = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеСтроки.СуммаРегл, МассивКоэффициентовСуммаРегл);
				СуммаПР   = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеСтроки.ПостояннаяРазница, МассивКоэффициентовСуммаРегл);
				СуммаВР   = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеСтроки.ВременнаяРазница, МассивКоэффициентовСуммаРегл);
				
				Для Сч = 0 По ПараметрыРасчета.ТаблицаОбъектовУчета.Количество()-1 Цикл
					
					СтрокаДокумента = ПараметрыРасчета.ТаблицаОбъектовУчета[Сч];
					
					НоваяСтрока = РезультатРасчета.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
					НоваяСтрока.ОбъектУчета = СтрокаДокумента.ОбъектУчета;
					
					Если СтрокаДокумента.ОтражатьВУпрУчете Тогда
						НоваяСтрока.Сумма       = ?(РаспределениеСумма       <> Неопределено, РаспределениеСумма[Сч],    0);
						НоваяСтрока.СуммаБезНДС = ?(РаспределениеСуммаБезНДС <> Неопределено, РаспределениеСумма[Сч],    0);
						НоваяСтрока.СуммаУпр    = ?(РаспределениеСуммаУпр    <> Неопределено, РаспределениеСуммаУпр[Сч], 0);
					Иначе
						НоваяСтрока.Сумма = 0;
						НоваяСтрока.СуммаБезНДС = 0;
						НоваяСтрока.СуммаУпр = 0;
					КонецЕсли;
					
					Если СтрокаДокумента.ОтражатьВРеглУчете ИЛИ ПараметрыРасчета.ВедетсяРегламентированныйУчетВНА Тогда
						НоваяСтрока.СуммаРегл         = ?(СуммаРегл <> Неопределено, СуммаРегл[Сч], 0);
						НоваяСтрока.ПостояннаяРазница = ?(СуммаПР   <> Неопределено, СуммаПР[Сч],   0);
						НоваяСтрока.ВременнаяРазница  = ?(СуммаВР   <> Неопределено, СуммаВР[Сч],   0);
					Иначе
						НоваяСтрока.СуммаРегл         = 0;
						НоваяСтрока.ПостояннаяРазница = 0;
						НоваяСтрока.ВременнаяРазница  = 0;
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатРасчета.Колонки.Добавить("КорректировкаСтоимостиНУ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	
	Возврат РезультатРасчета;

КонецФункции

// Определяет выполнялся ли расчет стоимости внеоборотных активов.
// Используется в закрытии месяца.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры выполнения операции закрытия месяца.
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнялся расчет стоимости внеоборотных активов.
//
Функция ВыполненРасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК ДанныеКРасчету
	|ГДЕ
	|	ДанныеКРасчету.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеКРасчету.Организация В(&Организация)
	|	И ДанныеКРасчету.Активность
	|	И ДанныеКРасчету.РасчетСтоимости
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК ДанныеКРасчету
	|ГДЕ
	|	ДанныеКРасчету.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеКРасчету.Организация В(&Организация)
	|	И ДанныеКРасчету.Активность
	|	И ДанныеКРасчету.РасчетСтоимости";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

// Определяет, что движения записываются при выполнении операции "Расчет стоимости ОС и НМА".
// Используется для управления логикой записи движений.
//
// Параметры:
//  Объект	 - НаборЗаписей - Набор записей регистра.
// 
// Возвращаемое значение:
//  Булево - Истина, если движения записываются при выполнении операции "Расчет стоимости ОС и НМА".
//
Функция ДвиженияЗаписываютсяПриРасчетеСтоимостиВНА(Объект) Экспорт

	// Проверим наличие служебного дополнительного свойства у набора записей
	Возврат Объект.ДополнительныеСвойства.Свойство(ИмяСлужебногоДополнительногоСвойстваОбъекта());

КонецФункции

// Определяет для каких объектов сведения не актуальны (требуется закрытие месяца).
//
// Параметры:
//  МассивСсылок - Массив - Список ОС или НМА.
//  ДатаСведений - Дата - Дата получения сведений.
// 
// Возвращаемое значение:
//  Булево - Ложь, если сведения не актуальны.
//
Функция ОбъектыДляКоторыхСведенияНеАктуальны(МассивСсылок, ДатаСведений = Неопределено) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Задания.ОбъектУчета КАК ОбъектУчета
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|	ГДЕ
	|		Задания.ОбъектУчета В(&МассивСсылок)
	|		И Задания.Месяц <= &ДатаСведений
	|		И &ГлавныйУзел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Задания.ОбъектУчета
	|	ИЗ
	|		РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК Задания
	|	ГДЕ
	|		Задания.ОбъектУчета В(&МассивСсылок)
	|		И Задания.Месяц <= &ДатаСведений
	|		И &ГлавныйУзел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтоимостьОС.ОсновноеСредство
	|	ИЗ
	|		РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС_РасчетСтоимости
	|			ПО (СтоимостьОС_РасчетСтоимости.Регистратор = СтоимостьОС.Регистратор)
	|				И (СтоимостьОС_РасчетСтоимости.РасчетСтоимости)
	|	ГДЕ
	|		СтоимостьОС.ОсновноеСредство В(&МассивСсылок)
	|		И СтоимостьОС.Период <= &ДатаСведений
	|		И ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|		И СтоимостьОС_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|		И НЕ &ГлавныйУзел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтоимостьНМА.НематериальныйАктив
	|	ИЗ
	|		РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА_РасчетСтоимости
	|			ПО (СтоимостьНМА_РасчетСтоимости.Регистратор = СтоимостьНМА.Регистратор)
	|				И (СтоимостьНМА_РасчетСтоимости.РасчетСтоимости)
	|	ГДЕ
	|		СтоимостьНМА.НематериальныйАктив В(&МассивСсылок)
	|		И СтоимостьНМА.Период <= &ДатаСведений
	|		И ТИПЗНАЧЕНИЯ(СтоимостьНМА.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|		И СтоимостьНМА_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|		И НЕ &ГлавныйУзел) КАК Задания";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ДатаСведений", ?(ДатаСведений = Неопределено, ТекущаяДатаСеанса(), ДатаСведений));
	Запрос.УстановитьПараметр("ТипыДокументовПоКоторымРассчитываетсяСтоимость", ТипыДокументовПоКоторымРассчитываетсяСтоимость());
	Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	
	Возврат Результат;
	
КонецФункции
 
#КонецОбласти

#Область ОтложенноеФормированиеДвижений

// Вызывается при выполнении операции закрытия месяца "Формирование движений по ОС и НМА".
//
Процедура ВыполнитьОперациюЗакрытияМесяцаОтложенноеФормированиеДвиженийПоВНА(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	
	Если НЕ ИспользуетсяУправлениеВНА_2_4(КонецРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоРасчета = РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.НачалоРасчета(ПараметрыРасчета.МассивОрганизаций);
	
	Если Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить() Тогда
		НачалоРасчета = Макс(НачалоРасчета, ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > КонецРасчета Тогда
		Возврат;
	КонецЕсли;
	
	НомерЗадания = РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.УвеличитьНомерЗадания();
	
	Отказ = Ложь;
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ЗакрытиеМесяца.ОтложенноеФормированиеДвиженийПоВНА");
		
		ЗаданияКРасчету = РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета, ОкончаниеПериода, НомерЗадания, ПараметрыРасчета.МассивОрганизаций);
		
		Попытка
			
			ПараметрыПроцедуры = ПараметрыОтложенногоФормированияДвижений();
			ПараметрыПроцедуры.Организация = ПараметрыРасчета.МассивОрганизаций;
			ПараметрыПроцедуры.Месяц = НачалоРасчета;
			ПараметрыПроцедуры.МенеджерВременныхТаблиц = ЗаданияКРасчету.ВременныеТаблицы;
			ПараметрыПроцедуры.ЭтапРасчета = ПараметрыОбработчика.ДанныеЭтапа.Код;
			КоличествоДанных = ОтложенноеФормированиеДвижений(ПараметрыПроцедуры, Неопределено, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.ЗафиксироватьРасчет(
				ПараметрыРасчета.МассивОрганизаций, НачалоРасчета, НомерЗадания, ЗаданияКРасчету);
				
			НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ПараметрыРасчета.Период,
				ПараметрыРасчета.МассивОрганизаций,
				ТекстОшибки,,,
				Отказ);
			
			Возврат;
				
		КонецПопытки;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет формирование движений при формировании проводок.
//
// Параметры:
//  МассивСсылок - Массив	 - Список документов, по которым формируются проводки.
//
Функция ОтложенноеФормированиеДвиженийПриФормированииПроводок(МассивСсылок) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоОС.Дата          КАК Период,
	|	Задания.ОбъектУчета         КАК ОбъектУчета,
	|	Задания.Организация         КАК Организация
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК Задания
	|		ПО (Задания.Организация = ДокументыПоОС.Организация)
	|			И (Задания.ОбъектУчета = ДокументыПоОС.ОсновноеСредство)
	|			И (Задания.Месяц <= ДокументыПоОС.Дата)
	|ГДЕ
	|	ДокументыПоОС.Ссылка В (&МассивСсылок)
	|	И ДокументыПоОС.Проведен
	|	И ДокументыПоОС.ТипСсылки В(&ТипыДокументов)
	|	И &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоОС.Дата             КАК Период,
	|	ДокументыПоОС.ОсновноеСредство КАК ОбъектУчета,
	|	ДокументыПоОС.Организация      КАК Организация
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС_РасчетСтоимости
	|		ПО СтоимостьОС_РасчетСтоимости.Регистратор = ДокументыПоОС.Ссылка
	|ГДЕ
	|	ДокументыПоОС.Ссылка В (&МассивСсылок)
	|	И ДокументыПоОС.Проведен
	|	И ДокументыПоОС.ТипСсылки В(&ТипыДокументов)
	|	И СтоимостьОС_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|	И НЕ &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоНМА.Дата         КАК Период,
	|	Задания.ОбъектУчета         КАК ОбъектУчета,
	|	Задания.Организация         КАК Организация
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК Задания
	|		ПО (Задания.Организация = ДокументыПоНМА.Организация)
	|			И (Задания.ОбъектУчета = ДокументыПоНМА.НематериальныйАктив)
	|			И (Задания.Месяц <= ДокументыПоНМА.Дата)
	|ГДЕ
	|	ДокументыПоНМА.Ссылка В (&МассивСсылок)
	|	И ДокументыПоНМА.Проведен
	|	И ДокументыПоНМА.ТипСсылки В(&ТипыДокументов)
	|	И &ГлавныйУзел
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоНМА.Дата                КАК Период,
	|	ДокументыПоНМА.НематериальныйАктив КАК ОбъектУчета,
	|	ДокументыПоНМА.Организация         КАК Организация
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА_РасчетСтоимости
	|		ПО СтоимостьНМА_РасчетСтоимости.Регистратор = ДокументыПоНМА.Ссылка
	|ГДЕ
	|	ДокументыПоНМА.Ссылка В (&МассивСсылок)
	|	И ДокументыПоНМА.Проведен
	|	И ДокументыПоНМА.ТипСсылки В(&ТипыДокументов)
	|	И СтоимостьНМА_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|	И НЕ &ГлавныйУзел
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация,
	|	КэшГраниц.Период
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|
	|УПОРЯДОЧИТЬ ПО
	|	КэшГраниц.Период";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ТипыДокументов", ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения());
	Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбъектыДляКоторыхСведенияНеАктуальны = Результат[Результат.ВГраница()-1].Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	
	Выборка = Результат[Результат.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
		НоваяСтрока = ДанныеДляПроверки.Добавить();
		НоваяСтрока.Дата   = НачалоДня(Выборка.Период);
		НоваяСтрока.Раздел = "РегламентныеОперации";
		НоваяСтрока.Объект = Выборка.Организация;
		
		Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПроцедуры = ПараметрыОтложенногоФормированияДвижений();
		ПараметрыПроцедуры.Организация = Выборка.Организация;
		ПараметрыПроцедуры.Месяц = Выборка.Период;
		ПараметрыПроцедуры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ПараметрыПроцедуры.ЭтапРасчета = Неопределено;
		ПараметрыПроцедуры.ВернутьДокументыКОтражению = Ложь;
		
		ОтложенноеФормированиеДвижений(ПараметрыПроцедуры, МассивСсылок);
		
	КонецЦикла;
	
	Возврат ОбъектыДляКоторыхСведенияНеАктуальны;
	
КонецФункции

// Возвращает таблицы движений, которые формируются отложенно, при формировании движений.
// Используется в обработчиках обновления.
//
// Параметры:
//  Регистратор	 - ДокументСсылка	 - Документ, для которого нужно получить таблицы движений.
// 
// Возвращаемое значение:
//  Структура, Неопределено - Содержит таблицы движений (ключ - имя регистра, значение - данные регистра).
//
Функция ТаблицыОтложенногоФормированияДвижений(Регистратор) Экспорт

	ТаблицыДляДвижений = Неопределено;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоОС.Дата                  КАК Период,
	|	ДокументыПоОС.ОсновноеСредство      КАК ОбъектУчета,
	|	ДокументыПоОС.Организация           КАК Организация
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|ГДЕ
	|	ДокументыПоОС.Ссылка = &Регистратор
	|	И ДокументыПоОС.Проведен
	|	И ДокументыПоОС.ТипСсылки В(&ТипыДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоНМА.Дата                 КАК Период,
	|	ДокументыПоНМА.НематериальныйАктив  КАК ОбъектУчета,
	|	ДокументыПоНМА.Организация          КАК Организация
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|ГДЕ
	|	ДокументыПоНМА.Ссылка = &Регистратор
	|	И ДокументыПоНМА.Проведен
	|	И ДокументыПоНМА.ТипСсылки В(&ТипыДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация,
	|	КэшГраниц.Период
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|
	|УПОРЯДОЧИТЬ ПО
	|	КэшГраниц.Период";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ТипыДокументов", ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТаблицыДляДвижений;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапросаОтложенногоФормированияДвижений(ТекстыЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_КэшГраниц", "КэшГраниц");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Выборка.Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Выборка.Период));
	Запрос.УстановитьПараметр("МассивСсылок", Новый Массив);
	Запрос.УстановитьПараметр("ОтборПоДокументам", Ложь);
	УстановитьПараметрыЗапросаСодержащегоТекстыЗапросаОтложенногоФормированияДвижений(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Ссылка);
		
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, "КэшГраниц,ДанныеКРасчету,ВТ_СтоимостьВНА,ВТ_АмортизацияВНА");
		
		ТаблицыДляДвижений = МенеджерОбъекта.ТаблицыОтложенногоФормированияДвижений(Выборка.Ссылка, МенеджерВременныхТаблиц);
		Для каждого КлючИЗначение Из ТаблицыДляДвижений Цикл
			Если СтрНачинаетсяС(КлючИЗначение.Ключ, "Таблица") Тогда
				ТаблицыДляДвижений.Вставить(Сред(КлючИЗначение.Ключ, 8), КлючИЗначение.Значение);
				ТаблицыДляДвижений.Удалить(КлючИЗначение.Ключ);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
		
	Возврат ТаблицыДляДвижений;
	
КонецФункции

// Определяет выполнялось ли формирование движений по внеоборотным активам.
// Используется в закрытии месяца.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры выполнения операции закрытия месяца.
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнялось формирование движений по внеоборотным активам.
//
Функция ВыполненоОтложенноеФормированиеДвиженийПоВНА(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|ГДЕ
	|	ДокументыПоОС.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДокументыПоОС.Организация В(&Организация)
	|	И ДокументыПоОС.Проведен
	|	И ДокументыПоОС.ТипСсылки В(&ТипыДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|ГДЕ
	|	ДокументыПоНМА.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДокументыПоНМА.Организация В(&Организация)
	|	И ДокументыПоНМА.Проведен
	|	И ДокументыПоНМА.ТипСсылки В(&ТипыДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ТипыДокументов", ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения());
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

#КонецОбласти

#Область ЗаданияКЗакрытиюМесяца

Процедура СформироватьЗаписиРегистровЗаданий(ДокументСсылка, ДанныеТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") 
		ИЛИ ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ВнеоборотныеАктивы.ФормированиеЗаданийКЗакрытиюМесяца");
	
	СформироватьЗаданияКРасчетуАмортизацииОС(ДокументСсылка, ДанныеТаблиц);
	СформироватьЗаданияКРасчетуАмортизацииНМА(ДокументСсылка, ДанныеТаблиц);
		
	СформироватьЗаданияКРасчетуСтоимостиВНА(ДанныеТаблиц);
		
	СформироватьЗаданияКФормированиюДвижений(ДокументСсылка, ДанныеТаблиц);
		
	ВнеоборотныеАктивыЛокализация.СформироватьЗаписиРегистровЗаданий(ДокументСсылка, ДанныеТаблиц);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

// Формирует задания к расчету амортизации ОС, если изменились исходные данные.
//
Процедура СформироватьЗаданияКРасчетуАмортизацииОС(ДокументСсылка, ДанныеТаблиц)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") 
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("ПервоначальныеСведенияОС");
	СписокТаблиц.Добавить("ПорядокУчетаОСУУ");
	СписокТаблиц.Добавить("ПараметрыАмортизацииОСУУ");
	СписокТаблиц.Добавить("МестонахождениеОС");
	СписокТаблиц.Добавить("СтоимостьОС");
	СписокТаблиц.Добавить("НаработкиОбъектовЭксплуатации");
	
	ВнеоборотныеАктивыЛокализация.ДополнитьСписокТаблицДляФормированияЗаданийКРасчетуАмортизацииОС(СписокТаблиц);
	
	СписокДопПолей = "ОсновноеСредство,ОтражатьВРеглУчете,ОтражатьВУпрУчете";
	ТекстОбъединенияДанных = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, СписокДопПолей);
	
	Если ТекстОбъединенияДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаДляФормированияЗаданийКРасчетуАмортизацииОС(
						ДанныеТаблиц, ТекстОбъединенияДанных);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		СписокЗапросов = Новый Массив;
		
		#Область ИзмененныеДанные
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация                   КАК Организация,
		|	ИзмененныеДанные.ОсновноеСредство              КАК ОсновноеСредство,
		|	ИзмененныеДанные.Документ                      КАК Документ,
		|	МАКСИМУМ(ИзмененныеДанные.ОтражатьВРеглУчете)  КАК ОтражатьВРеглУчете,
		|	МАКСИМУМ(ИзмененныеДанные.ОтражатьВУпрУчете)   КАК ОтражатьВУпрУчете,
		|	МИНИМУМ(ВЫБОР 
		|				КОГДА ИзмененныеДанные.ИмяТаблицы = ""НаработкиОбъектовЭксплуатации""
		|					ТОГДА НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ)
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1) 
		|			КОНЕЦ) КАК ПериодБУ,
		|	МИНИМУМ(ВЫБОР 
		|				КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
		|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1) 
		|				КОГДА ИзмененныеДанные.ИмяТаблицы = ""НаработкиОбъектовЭксплуатации""
		|						ИЛИ НЕ &ПорядокНачисленияПоСтандартамРегл
		|					ТОГДА НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ)
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1) 
		|			КОНЕЦ) КАК ПериодУУ
		|ПОМЕСТИТЬ ИзмененныеДанные
		|ИЗ
		|	(" + ТекстОбъединенияДанных + ") КАК ИзмененныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.ОсновноеСредство,
		|	ИзмененныеДанные.Документ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ОсновноеСредство";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		#КонецОбласти
		
		#Область ПорядокУчетаОСУУ
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПорядокУчетаОСУУ.Организация       КАК Организация,
		|	ПорядокУчетаОСУУ.ОсновноеСредство  КАК ОсновноеСредство,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПорядокУчетаОСУУ.Период, МЕСЯЦ)) КАК Период
		|ПОМЕСТИТЬ ПериодЗаданийУУ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПорядокУчетаОСУУ.Организация       КАК Организация,
		|		ПорядокУчетаОСУУ.ОсновноеСредство  КАК ОсновноеСредство,
		|		ВЫБОР
		|			КОГДА ПорядокУчетаОСУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
		|					И НАЧАЛОПЕРИОДА(ПорядокУчетаОСУУПоследние.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПорядокУчетаОСУУ.Период, МЕСЯЦ)
		|				ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаОСУУПоследние.Период, МЕСЯЦ, 1)
		|			ИНАЧЕ ПорядокУчетаОСУУПоследние.Период
		|		КОНЕЦ КАК Период
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ИзмененныеДанные.Организация        КАК Организация,
		|			ИзмененныеДанные.ОсновноеСредство   КАК ОсновноеСредство,
		|			МИНИМУМ(ИзмененныеДанные.ПериодУУ)  КАК Период,
		|			МАКСИМУМ(ПорядокУчетаОСУУ.Период)   КАК ПериодСведений
		|		ИЗ
		|			ИзмененныеДанные КАК ИзмененныеДанные
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
		|				ПО (ПорядокУчетаОСУУ.Организация = ИзмененныеДанные.Организация)
		|					И (ПорядокУчетаОСУУ.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
		|					И (ПорядокУчетаОСУУ.Период <= ИзмененныеДанные.ПериодУУ)
		|					И (ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) <> ТИП(Документ.СписаниеОС2_4)
		|						ИЛИ ИзмененныеДанные.Документ <> ПорядокУчетаОСУУ.Регистратор)
		|		ГДЕ
		|			ИзмененныеДанные.ОтражатьВУпрУчете
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ИзмененныеДанные.Организация,
		|			ИзмененныеДанные.ОсновноеСредство
		|		) КАК ПорядокУчетаОСУУПоследние
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
		|			ПО (ПорядокУчетаОСУУ.Организация = ПорядокУчетаОСУУПоследние.Организация)
		|				И (ПорядокУчетаОСУУ.ОсновноеСредство = ПорядокУчетаОСУУПоследние.ОсновноеСредство)
		|				И (ПорядокУчетаОСУУ.Период = ПорядокУчетаОСУУПоследние.ПериодСведений)
		|	ГДЕ
		|		ПорядокУчетаОСУУ.НачислятьАмортизациюУУ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИзмененныеДанные.Организация,
		|		ИзмененныеДанные.ОсновноеСредство,
		|		МИНИМУМ(ВЫБОР 
		|					КОГДА &ПорядокНачисленияПоСтандартамРегл 
		|							ИЛИ ПорядокУчетаОСУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
		|						ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаОСУУ.Период, МЕСЯЦ, 1)
		|					ИНАЧЕ ПорядокУчетаОСУУ.Период
		|				КОНЕЦ)
		|	ИЗ
		|		ИзмененныеДанные КАК ИзмененныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
		|			ПО (ПорядокУчетаОСУУ.Организация = ИзмененныеДанные.Организация)
		|				И (ПорядокУчетаОСУУ.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
		|				И (ПорядокУчетаОСУУ.Период > ИзмененныеДанные.ПериодУУ)
		|	ГДЕ
		|		ИзмененныеДанные.ОтражатьВУпрУчете
		|		И ПорядокУчетаОСУУ.НачислятьАмортизациюУУ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИзмененныеДанные.Организация,
		|		ИзмененныеДанные.ОсновноеСредство
		|
		|	//ТекстПорядокУчетаОСУУ//
		|
		|) КАК ПорядокУчетаОСУУ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПорядокУчетаОСУУ.Организация,
		|	ПорядокУчетаОСУУ.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";
		
		Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("ПорядокУчетаОСУУ_НачислятьАмортизацию") <> Неопределено Тогда
			
			ТекстПорядокУчетаОСУУ = "
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИзмененныеДанные.Организация       КАК Организация,
			|	ИзмененныеДанные.ОсновноеСредство  КАК ОсновноеСредство,
			|	ИзмененныеДанные.ПериодУУ          КАК Период
			|ИЗ
			|	ИзмененныеДанные КАК ИзмененныеДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПорядокУчетаОСУУ_НачислятьАмортизацию КАК ПорядокУчетаОСУУ
			|		ПО (ПорядокУчетаОСУУ.Организация = ИзмененныеДанные.Организация)
			|			И (ПорядокУчетаОСУУ.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстПорядокУчетаОСУУ//", ТекстПорядокУчетаОСУУ);
			
		КонецЕсли;
		СписокЗапросов.Добавить(ТекстЗапроса);
		#КонецОбласти
		
		#Область ФормированиеЗаданий
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ЕСТЬNULL(ПакетыАмортизацииОС.НомерПакета, 0) КАК НомерПакета,
		|	МИНИМУМ(ПериодЗаданийУУ.Период) КАК Месяц
		|ИЗ
		|	ИзмененныеДанные КАК ИзмененныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодЗаданийУУ КАК ПериодЗаданийУУ
		|		ПО (ПериодЗаданийУУ.Организация = ИзмененныеДанные.Организация)
		|			И (ПериодЗаданийУУ.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииОС КАК ПакетыАмортизацииОС
		|		ПО (ПакетыАмортизацииОС.Организация = ИзмененныеДанные.Организация)
		|			И (ПакетыАмортизацииОС.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
		|ГДЕ
		|	НЕ ПериодЗаданийУУ.Организация ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ЕСТЬNULL(ПакетыАмортизацииОС.НомерПакета, 0)";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
		Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("ПорядокУчетаОСУУ_НачислятьАмортизацию") <> Неопределено Тогда
			ТекстЗапроса = "УНИЧТОЖИТЬ ПорядокУчетаОСУУ_НачислятьАмортизацию";
			СписокЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		#КонецОбласти
		
		ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	КонецЕсли; 
	
	ИспользуемыеВременныеТаблицы = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ДанныеТаблиц.МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаУчета24", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	ПорядокНачисленияПоСтандартамРегл = Константы.ПорядокУчетаВНАВУпрУчете.Получить() = Перечисления.ПорядокУчетаВНАВУпрУчете.ПоСтандартамРегл;
	Запрос.УстановитьПараметр("ПорядокНачисленияПоСтандартамРегл", ПорядокНачисленияПоСтандартамРегл);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеВременныеТаблицы);
	
	РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует задания к расчету амортизации НМА, если изменились исходные данные.
//
Процедура СформироватьЗаданияКРасчетуАмортизацииНМА(ДокументСсылка, ДанныеТаблиц)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") 
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("ПервоначальныеСведенияНМА");
	СписокТаблиц.Добавить("ПорядокУчетаНМАУУ");
	СписокТаблиц.Добавить("ПараметрыАмортизацииНМАУУ");
	СписокТаблиц.Добавить("МестоУчетаНМА");
	СписокТаблиц.Добавить("СтоимостьНМА");
	СписокТаблиц.Добавить("ВыработкаНМА");
	
	ВнеоборотныеАктивыЛокализация.ДополнитьСписокТаблицДляФормированияЗаданийКРасчетуАмортизацииНМА(СписокТаблиц);
	
	СписокДопПолей = "НематериальныйАктив,ОтражатьВРеглУчете,ОтражатьВУпрУчете";
	ТекстОбъединенияДанных = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, СписокДопПолей);
	
	Если ТекстОбъединенияДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаДляФормированияЗаданийКРасчетуАмортизацииНМА(
						ДанныеТаблиц, ТекстОбъединенияДанных);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		СписокЗапросов = Новый Массив;
		
		#Область ИзмененныеДанные
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация                   КАК Организация,
		|	ИзмененныеДанные.НематериальныйАктив           КАК НематериальныйАктив,
		|	ИзмененныеДанные.Документ                      КАК Документ,
		|	МАКСИМУМ(ИзмененныеДанные.ОтражатьВРеглУчете)  КАК ОтражатьВРеглУчете,
		|	МАКСИМУМ(ИзмененныеДанные.ОтражатьВУпрУчете)   КАК ОтражатьВУпрУчете,
		|	МИНИМУМ(ВЫБОР 
		|				КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
		|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1) 
		|				КОГДА ИзмененныеДанные.ИмяТаблицы = ""ВыработкаНМА""
		|						ИЛИ НЕ &ПорядокНачисленияПоСтандартамРегл
		|					ТОГДА НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ)
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1) 
		|			КОНЕЦ) КАК ПериодУУ
		|ПОМЕСТИТЬ ИзмененныеДанные
		|ИЗ
		|	(" + ТекстОбъединенияДанных + ") КАК ИзмененныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.НематериальныйАктив,
		|	ИзмененныеДанные.Документ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	НематериальныйАктив";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		#КонецОбласти
			
		#Область ПорядокУчетаНМАУУ
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПорядокУчетаНМАУУ.Организация          КАК Организация,
		|	ПорядокУчетаНМАУУ.НематериальныйАктив  КАК НематериальныйАктив,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПорядокУчетаНМАУУ.Период, МЕСЯЦ)) КАК Период
		|ПОМЕСТИТЬ ПериодЗаданийУУ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПорядокУчетаНМАУУ.Организация          КАК Организация,
		|		ПорядокУчетаНМАУУ.НематериальныйАктив  КАК НематериальныйАктив,
		|		ВЫБОР
		|			КОГДА ПорядокУчетаНМАУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
		|					И НАЧАЛОПЕРИОДА(ПорядокУчетаНМАУУПоследние.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПорядокУчетаНМАУУ.Период, МЕСЯЦ)
		|				ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаНМАУУПоследние.Период, МЕСЯЦ, 1)
		|			ИНАЧЕ ПорядокУчетаНМАУУПоследние.Период
		|		КОНЕЦ КАК Период
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ИзмененныеДанные.Организация           КАК Организация,
		|			ИзмененныеДанные.НематериальныйАктив   КАК НематериальныйАктив,
		|			МИНИМУМ(ИзмененныеДанные.ПериодУУ)     КАК Период,
		|			МАКСИМУМ(ПорядокУчетаНМАУУ.Период)     КАК ПериодСведений
		|		ИЗ
		|			ИзмененныеДанные КАК ИзмененныеДанные
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчетаНМАУУ
		|				ПО (ПорядокУчетаНМАУУ.Организация = ИзмененныеДанные.Организация)
		|					И (ПорядокУчетаНМАУУ.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
		|					И (ПорядокУчетаНМАУУ.Период <= ИзмененныеДанные.ПериодУУ)
		|					И (ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) <> ТИП(Документ.СписаниеНМА2_4)
		|						ИЛИ ИзмененныеДанные.Документ <> ПорядокУчетаНМАУУ.Регистратор)
		|		ГДЕ
		|			ИзмененныеДанные.ОтражатьВУпрУчете
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ИзмененныеДанные.Организация,
		|			ИзмененныеДанные.НематериальныйАктив
		|		) КАК ПорядокУчетаНМАУУПоследние
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчетаНМАУУ
		|			ПО (ПорядокУчетаНМАУУ.Организация = ПорядокУчетаНМАУУПоследние.Организация)
		|				И (ПорядокУчетаНМАУУ.НематериальныйАктив = ПорядокУчетаНМАУУПоследние.НематериальныйАктив)
		|				И (ПорядокУчетаНМАУУ.Период = ПорядокУчетаНМАУУПоследние.ПериодСведений)
		|	ГДЕ
		|		ПорядокУчетаНМАУУ.НачислятьАмортизациюУУ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИзмененныеДанные.Организация,
		|		ИзмененныеДанные.НематериальныйАктив,
		|		МИНИМУМ(ВЫБОР 
		|					КОГДА &ПорядокНачисленияПоСтандартамРегл
		|							ИЛИ ПорядокУчетаНМАУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
		|						ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаНМАУУ.Период, МЕСЯЦ, 1)
		|					ИНАЧЕ ПорядокУчетаНМАУУ.Период
		|				КОНЕЦ)
		|	ИЗ
		|		ИзмененныеДанные КАК ИзмененныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчетаНМАУУ
		|			ПО (ПорядокУчетаНМАУУ.Организация = ИзмененныеДанные.Организация)
		|				И (ПорядокУчетаНМАУУ.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
		|				И (ПорядокУчетаНМАУУ.Период > ИзмененныеДанные.ПериодУУ)
		|	ГДЕ
		|		ИзмененныеДанные.ОтражатьВУпрУчете
		|		И ПорядокУчетаНМАУУ.НачислятьАмортизациюУУ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИзмененныеДанные.Организация,
		|		ИзмененныеДанные.НематериальныйАктив
		|
		|	//ТекстПорядокУчетаНМАУУ//
		|
		|) КАК ПорядокУчетаНМАУУ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПорядокУчетаНМАУУ.Организация,
		|	ПорядокУчетаНМАУУ.НематериальныйАктив
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";
		
		Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("ПорядокУчетаНМАУУ_НачислятьАмортизацию") <> Неопределено Тогда
			
			ТекстПорядокУчетаНМАУУ = "
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИзмененныеДанные.Организация          КАК Организация,
			|	ИзмененныеДанные.НематериальныйАктив  КАК НематериальныйАктив,
			|	ИзмененныеДанные.ПериодУУ             КАК Период
			|ИЗ
			|	ИзмененныеДанные КАК ИзмененныеДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПорядокУчетаНМАУУ_НачислятьАмортизацию КАК ПорядокУчетаНМАУУ
			|		ПО (ПорядокУчетаНМАУУ.Организация = ИзмененныеДанные.Организация)
			|			И (ПорядокУчетаНМАУУ.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстПорядокУчетаНМАУУ//", ТекстПорядокУчетаНМАУУ);
			
		КонецЕсли;
		СписокЗапросов.Добавить(ТекстЗапроса);
		#КонецОбласти
		
		#Область ФормированиеЗаданий
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ЕСТЬNULL(ПакетыАмортизацииНМА.НомерПакета, 0) КАК НомерПакета,
		|	МИНИМУМ(ПериодЗаданийУУ.Период) КАК Месяц
		|ИЗ
		|	ИзмененныеДанные КАК ИзмененныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодЗаданийУУ КАК ПериодЗаданийУУ
		|		ПО (ПериодЗаданийУУ.Организация = ИзмененныеДанные.Организация)
		|			И (ПериодЗаданийУУ.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииНМА КАК ПакетыАмортизацииНМА
		|		ПО (ПакетыАмортизацииНМА.Организация = ИзмененныеДанные.Организация)
		|			И (ПакетыАмортизацииНМА.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
		|ГДЕ
		|	НЕ ПериодЗаданийУУ.Организация ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ЕСТЬNULL(ПакетыАмортизацииНМА.НомерПакета, 0)";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
		Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("ПорядокУчетаНМАУУ_НачислятьАмортизацию") <> Неопределено Тогда
			ТекстЗапроса = "УНИЧТОЖИТЬ ПорядокУчетаНМАУУ_НачислятьАмортизацию";
			СписокЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		#КонецОбласти
		
		ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	КонецЕсли; 

	ИспользуемыеВременныеТаблицы = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ДанныеТаблиц.МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаУчета24", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	ПорядокНачисленияПоСтандартамРегл = Константы.ПорядокУчетаВНАВУпрУчете.Получить() = Перечисления.ПорядокУчетаВНАВУпрУчете.ПоСтандартамРегл;
	Запрос.УстановитьПараметр("ПорядокНачисленияПоСтандартамРегл", ПорядокНачисленияПоСтандартамРегл);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеВременныеТаблицы);
	
	РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует задания к расчету стоимости ОС и НМА, если изменились исходные данные.
//
Процедура СформироватьЗаданияКРасчетуСтоимостиВНА(ДанныеТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат;
	КонецЕсли; 
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("СтоимостьОС_ЗаданияКРасчетуСтоимостиВНА");
	СписокТаблиц.Добавить("СтоимостьНМА_ЗаданияКРасчетуСтоимостиВНА");
	СписокТаблиц.Добавить("ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНА");
	
	ТекстОбъединенияДанных = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, "ОбъектУчета");
	
	Если ТекстОбъединенияДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	
	#Область ИзмененныеДанные
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИзмененныеДанные.Организация       КАК Организация,
	|	ИзмененныеДанные.ОбъектУчета       КАК ОбъектУчета,
	|	ИзмененныеДанные.Документ          КАК Документ,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, ДЕНЬ))  КАК Период,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ)) КАК НачалоМесяца
	|ПОМЕСТИТЬ ИзмененныеДанные
	|ИЗ
	|	(" + ТекстОбъединенияДанных + ") КАК ИзмененныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.ОбъектУчета,
	|	ИзмененныеДанные.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ФормированиеЗаданий
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаФормированиеЗаданийКРасчетуСтоимостиВНА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ИзмененныеДанные.ОбъектУчета,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СтоимостьОС.Период > &ДатаНачалаУчета
		|				ТОГДА СтоимостьОС.Период
		|			ИНАЧЕ &ДатаНачалаУчета
		|		КОНЕЦ) КАК Месяц
		|ИЗ
		|	ИзмененныеДанные КАК ИзмененныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС
		|		ПО (СтоимостьОС.Организация = ИзмененныеДанные.Организация)
		|			И (СтоимостьОС.АналитикаКапитализацииРасходов = ИзмененныеДанные.ОбъектУчета)
		|			И (СтоимостьОС.Период >= ИзмененныеДанные.Период)
		|			И (СтоимостьОС.Активность)
		|			И (СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|			И (СтоимостьОС.ХозяйственнаяОперация В (
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС), 
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)))
		|ГДЕ
		|	СтоимостьОС.Период >= &ДатаНачалаУчетаСебестоимости
		|	И &ИспользоватьУчетСебестоимости
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ИзмененныеДанные.ОбъектУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ИзмененныеДанные.ОбъектУчета,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СтоимостьНМА.Период > &ДатаНачалаУчета
		|				ТОГДА СтоимостьНМА.Период
		|			ИНАЧЕ &ДатаНачалаУчета
		|		КОНЕЦ) КАК Месяц
		|ИЗ
		|	ИзмененныеДанные КАК ИзмененныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
		|		ПО (СтоимостьНМА.Организация = ИзмененныеДанные.Организация)
		|			И (СтоимостьНМА.НематериальныйАктив = ИзмененныеДанные.ОбъектУчета)
		|			И (СтоимостьНМА.Период >= ИзмененныеДанные.Период)
		|			И (СтоимостьНМА.Активность)
		|			И (СтоимостьНМА.ХозяйственнаяОперация В (
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМА)))
		|ГДЕ
		|	СтоимостьНМА.Период >= &ДатаНачалаУчетаСебестоимости
		|	И &ИспользоватьУчетСебестоимости
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ИзмененныеДанные.ОбъектУчета";
	КонецЕсли; 
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"УНИЧТОЖИТЬ ИзмененныеДанные";
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	Запрос.УстановитьПараметр("ДатаНачалаУчетаСебестоимости", НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить()));
	Запрос.УстановитьПараметр("ИспользоватьУчетСебестоимости", ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует задания к отложенному формированию движений по ОС, если изменились исходные данные.
//
Процедура СформироватьЗаданияКФормированиюДвижений(ДокументСсылка, ДанныеТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат;
	КонецЕсли; 
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("СтоимостьОС");
	СписокТаблиц.Добавить("АмортизацияОС");
	
	ДопПоля = Новый Структура("ОбъектУчета", "ОсновноеСредство");
	ТекстОбъединенияДанныхОС = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, ДопПоля);
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("СтоимостьНМА");
	СписокТаблиц.Добавить("АмортизацияНМА");
	
	ДопПоля = Новый Структура("ОбъектУчета", "НематериальныйАктив");
	ТекстОбъединенияДанныхНМА = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, ДопПоля);
	
	ТекстыДанных = Новый Массив;
	Если ТекстОбъединенияДанныхОС <> "" Тогда
		ТекстыДанных.Добавить(ТекстОбъединенияДанныхОС);
	КонецЕсли;
	Если ТекстОбъединенияДанныхНМА <> "" Тогда
		ТекстыДанных.Добавить(ТекстОбъединенияДанныхНМА);
	КонецЕсли; 
	ТекстОбъединенияДанных = СтрСоединить(ТекстыДанных, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТипыДокументов = ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения();
	ТипДокумента = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка));
	ЗарегистрироватьДокумент = (ТипыДокументов.Найти(ТипДокумента) <> Неопределено);
	
	Если ТекстОбъединенияДанных = "" И НЕ ЗарегистрироватьДокумент Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	Если ТекстОбъединенияДанных = "" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Ссылка КАК Документ,
		|	ИзмененныеДанные.ОсновноеСредство КАК ОбъектУчета,
		|	ИзмененныеДанные.Дата КАК Месяц
		|ИЗ
		|	РегистрСведений.ДокументыПоОС КАК ИзмененныеДанные
		|ГДЕ
		|	ИзмененныеДанные.Ссылка = &Ссылка
		|	И ИзмененныеДанные.Дата >= &ДатаНачалаУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Ссылка КАК Документ,
		|	ИзмененныеДанные.НематериальныйАктив КАК ОбъектУчета,
		|	ИзмененныеДанные.Дата КАК Месяц
		|ИЗ
		|	РегистрСведений.ДокументыПоНМА КАК ИзмененныеДанные
		|ГДЕ
		|	ИзмененныеДанные.Ссылка = &Ссылка
		|	И ИзмененныеДанные.Дата >= &ДатаНачалаУчета";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация       КАК Организация,
		|	ИзмененныеДанные.ОбъектУчета       КАК ОбъектУчета,
		|	ИзмененныеДанные.Документ          КАК Документ,
		|	МИНИМУМ(ИзмененныеДанные.Период)   КАК Период
		|ПОМЕСТИТЬ ИзмененныеДанные
		|ИЗ
		|	(" + ТекстОбъединенияДанных + ") КАК ИзмененныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.ОбъектУчета,
		|	ИзмененныеДанные.Документ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета,
		|	Организация";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
		Если ЗарегистрироватьДокумент Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ИзмененныеДанные.Организация,
			|	ИзмененныеДанные.Документ,
			|	ИзмененныеДанные.ОбъектУчета,
			|	МИНИМУМ(ИзмененныеДанные.Дата) КАК Месяц
			|ИЗ
			|	(ВЫБРАТЬ
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.Документ,
			|		ИзмененныеДанные.ОбъектУчета,
			|		ДокументыПоОС.Дата
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
			|			ПО (ДокументыПоОС.Организация = ИзмененныеДанные.Организация)
			|				И (ДокументыПоОС.ОсновноеСредство = ИзмененныеДанные.ОбъектУчета)
			|				И (ДокументыПоОС.Дата >= ИзмененныеДанные.Период)
			|				И (ДокументыПоОС.Дата >= &ДатаНачалаУчета)
			|				И (ДокументыПоОС.Проведен)
			|				И (ДокументыПоОС.ТипСсылки В(&ТипыДокументов))
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.Документ,
			|		ИзмененныеДанные.ОбъектУчета,
			|		ДокументыПоНМА.Дата
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
			|			ПО (ДокументыПоНМА.Организация = ИзмененныеДанные.Организация)
			|				И (ДокументыПоНМА.НематериальныйАктив = ИзмененныеДанные.ОбъектУчета)
			|				И (ДокументыПоНМА.Дата >= ИзмененныеДанные.Период)
			|				И (ДокументыПоНМА.Дата >= &ДатаНачалаУчета)
			|				И (ДокументыПоНМА.Проведен)
			|				И (ДокументыПоНМА.ТипСсылки В(&ТипыДокументов))
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ДокументыПоОС.Организация,
			|		ДокументыПоОС.Ссылка,
			|		ДокументыПоОС.ОсновноеСредство,
			|		ДокументыПоОС.Дата
			|	ИЗ
			|		РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
			|	ГДЕ
			|		ДокументыПоОС.Ссылка = &Ссылка
			|
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ДокументыПоНМА.Организация,
			|		ДокументыПоНМА.Ссылка,
			|		ДокументыПоНМА.НематериальныйАктив,
			|		ДокументыПоНМА.Дата
			|	ИЗ
			|		РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
			|	ГДЕ
			|		ДокументыПоНМА.Ссылка = &Ссылка
			|
			|	) КАК ИзмененныеДанные
			|
			|СГРУППИРОВАТЬ ПО
			|	ИзмененныеДанные.Организация,
			|	ИзмененныеДанные.Документ,
			|	ИзмененныеДанные.ОбъектУчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИзмененныеДанные";
			
			СписокЗапросов.Добавить(ТекстЗапроса);
			
		Иначе
		
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ИзмененныеДанные.Организация,
			|	ИзмененныеДанные.Документ,
			|	ИзмененныеДанные.ОбъектУчета,
			|	МИНИМУМ(ИзмененныеДанные.Дата) КАК Месяц
			|ИЗ
			|	(ВЫБРАТЬ
			|		ИзмененныеДанные.Организация КАК Организация,
			|		ИзмененныеДанные.Документ КАК Документ,
			|		ИзмененныеДанные.ОбъектУчета КАК ОбъектУчета,
			|		МИНИМУМ(ДокументыПоОС.Дата) КАК Дата
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
			|			ПО (ДокументыПоОС.Организация = ИзмененныеДанные.Организация)
			|				И (ДокументыПоОС.ОсновноеСредство = ИзмененныеДанные.ОбъектУчета)
			|				И (ДокументыПоОС.Дата >= ИзмененныеДанные.Период)
			|				И (ДокументыПоОС.Дата >= &ДатаНачалаУчета)
			|				И (ДокументыПоОС.Проведен)
			|				И (ДокументыПоОС.ТипСсылки В (&ТипыДокументов))
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.Документ,
			|		ИзмененныеДанные.ОбъектУчета
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.Документ,
			|		ИзмененныеДанные.ОбъектУчета,
			|		МИНИМУМ(ДокументыПоНМА.Дата)
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
			|			ПО (ДокументыПоНМА.Организация = ИзмененныеДанные.Организация)
			|				И (ДокументыПоНМА.НематериальныйАктив = ИзмененныеДанные.ОбъектУчета)
			|				И (ДокументыПоНМА.Дата >= ИзмененныеДанные.Период)
			|				И (ДокументыПоНМА.Дата >= &ДатаНачалаУчета)
			|				И (ДокументыПоНМА.Проведен)
			|				И (ДокументыПоНМА.ТипСсылки В (&ТипыДокументов))
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.Документ,
			|		ИзмененныеДанные.ОбъектУчета) КАК ИзмененныеДанные
			|
			|СГРУППИРОВАТЬ ПО
			|	ИзмененныеДанные.Организация,
			|	ИзмененныеДанные.Документ,
			|	ИзмененныеДанные.ОбъектУчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИзмененныеДанные";
			
			СписокЗапросов.Добавить(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет следующий период формирования заданий в зависимости от операции закрытия месяца.
//
// Параметры:
//  Операция		 - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Операция закрытия месяца.
//  Организация		 - СправочникСсылка.Организации				 - Организация, для которой формируются задания.
//  СледующийПериод	 - Дата										 - Период заданий.
//
Процедура ОпределитьСледующийПериодФормированияЗаданий(Операция, Организация, СледующийПериод) Экспорт

	ВнеоборотныеАктивыЛокализация.ОпределитьСледующийПериодФормированияЗаданий(Операция, Организация, СледующийПериод);
		
КонецПроцедуры

// Вызывается перед записью заданий к закрытию месяца для уточнения месяца.
//
// Параметры:
//  Месяц				 - Дата									 - Дата заданий.
//  ТекущаяОперация		 - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Операция закрытия месяца.
//  ТекущаяОрганизация	 - СправочникСсылка.Организации				 - Организация задания.
//
Процедура ПередЗаписьюЗаданийКЗакрытиюМесяца(Месяц, ТекущаяОперация, ТекущаяОрганизация) Экспорт
	
	ВнеоборотныеАктивыЛокализация.ПередЗаписьюЗаданийКЗакрытиюМесяца(Месяц, ТекущаяОперация, ТекущаяОрганизация);

КонецПроцедуры

// Добавляет текст запроса для формирования заданий.
//
// Параметры:
//  Запрос			 - Запрос	 - Запрос.
//  ТекстыЗапросов	 - Массив	 - Список текстов запросов.
//
Процедура ДополнитьТекстыЗапросовПриЗаписиДвиженийРаспределенияВзаиморасчетов(Запрос, ТекстыЗапросов) Экспорт

	ВнеоборотныеАктивыЛокализация.ДополнитьТекстыЗапросовПриЗаписиДвиженийРаспределенияВзаиморасчетов(Запрос, ТекстыЗапросов);
	
КонецПроцедуры

// Формирует задания при записи движений распределения взаиморасчетов.
//
// Параметры:
//  РезультатЗапроса		 - РезультатЗапроса			 - Результат запроса.
//  НомерЗапроса			 - Число					 - Номер запроса.
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - Менеджер временных таблиц.
//
Процедура СформироватьЗаданияПриЗаписиДвиженийРаспределенияВзаиморасчетов(РезультатЗапроса, НомерЗапроса, МенеджерВременныхТаблиц) Экспорт
	
	ВнеоборотныеАктивыЛокализация.СформироватьЗаданияПриЗаписиДвиженийРаспределенияВзаиморасчетов(РезультатЗапроса, НомерЗапроса, МенеджерВременныхТаблиц);
	
КонецПроцедуры

// Добавляет текст запроса для формирования заданий.
//
// Параметры:
//  Запрос			 - Запрос	 - Запрос.
//  ТекстыЗапросов	 - Массив	 - Список текстов запросов.
//
Процедура ДополнитьТекстыЗапросовПриЗаписиРегистраРасчетыСПоставщиками(Запрос, ТекстыЗапросов) Экспорт

	ВнеоборотныеАктивыЛокализация.ДополнитьТекстыЗапросовПриЗаписиРегистраРасчетыСПоставщиками(Запрос, ТекстыЗапросов);
	
КонецПроцедуры

// Формирует задания при записи регистра РасчетыСПоставщиками.
//
// Параметры:
//  РезультатЗапроса			 - РезультатЗапроса	 - Результат запроса.
//  НомерЗапроса				 - Число			 - Номер запроса.
//  СтруктураВременныеТаблицы	 - Структура		 - В структуру будет помещено имя временной таблицы.
//
Процедура СформироватьЗаданияПриЗаписиРегистраРасчетыСПоставщиками(РезультатЗапроса, НомерЗапроса, СтруктураВременныеТаблицы) Экспорт
	
	ВнеоборотныеАктивыЛокализация.СформироватьЗаданияПриЗаписиРегистраРасчетыСПоставщиками(РезультатЗапроса, НомерЗапроса, СтруктураВременныеТаблицы);
	
КонецПроцедуры

// Добавляет текст запроса для формирования заданий.
//
// Параметры:
//  Запрос			 - Запрос	 - Запрос.
//  ТекстыЗапросов	 - Массив	 - Список текстов запросов.
//
Процедура ДополнитьТекстыЗапросовПриЗаписиРегистраРасчетыСПоставщикамиПоДокументам(Запрос, ТекстыЗапросов) Экспорт

	ВнеоборотныеАктивыЛокализация.ДополнитьТекстыЗапросовПриЗаписиРегистраРасчетыСПоставщикамиПоДокументам(Запрос, ТекстыЗапросов);
	
КонецПроцедуры

// Формирует задания при записи регистра РасчетыСПоставщикамиПоДокументам.
//
// Параметры:
//  РезультатЗапроса			 - РезультатЗапроса	 - Результат запроса.
//  НомерЗапроса				 - Число			 - Номер запроса.
//  СтруктураВременныеТаблицы	 - Структура		 - В структуру будет помещено имя временной таблицы.
//
Процедура СформироватьЗаданияПриЗаписиРегистраРасчетыСПоставщикамиПоДокументам(РезультатЗапроса, НомерЗапроса, СтруктураВременныеТаблицы) Экспорт
	
	ВнеоборотныеАктивыЛокализация.СформироватьЗаданияПриЗаписиРегистраРасчетыСПоставщикамиПоДокументам(РезультатЗапроса, НомерЗапроса, СтруктураВременныеТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Добавляет в печатную форму текст предупреждения,
//  информирующий пользователя о том, что стоимость или амортизация не актуальны,
//  т.к. не выполнено закрытие месяца.
//
// Параметры:
//  СведенияАктуальны	 - Булево			 - Ложь, если сведения не актуальны.
//  ТабличныйДокумент	 - ТабличныйДокумент - Печатная форма
//
Процедура ДобавитьПредупреждениеЕслиСведенияНеАктуальны(СведенияАктуальны, ТабличныйДокумент) Экспорт
	
	Если СведенияАктуальны Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокументКопия = Новый ТабличныйДокумент;
	
	ОбластьПримечания = ТабличныйДокумент.ПолучитьОбласть(1,,1,);
	ТабличныйДокументКопия.Вывести(ОбластьПримечания);
	
	ОбластьПримечания = ТабличныйДокументКопия.Область(1,,1,);
	ОбластьПримечания.Очистить(Истина, Истина, Истина);
	ОбластьПримечания.ВысотаСтроки = 16;
	
	ОбластьПримечания = ТабличныйДокументКопия.Область(1,1,1,ТабличныйДокумент.ШиринаТаблицы);
	ОбластьПримечания.Объединить();
	ОбластьПримечания.Текст = НСтр("ru = 'Стоимость и амортизация не актуальны, необходимо выполнить закрытие месяца (это сообщение не выводится на печать)'");
	ОбластьПримечания.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
	ОбластьПримечания.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ОбластьПримечания.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьПримечания.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	
	ТабличныйДокументКопия.Вывести(ТабличныйДокумент);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ТабличныйДокументКопия);
	
	ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область(2,,ТабличныйДокумент.ВысотаТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

// Находит объекты эксплуатации по штрихкодам.
//
// Параметры:
//  ДанныеШтрихкодов - Структура - Данные штрихкодов.
//  ПараметрыПодбора - Структура - Параметры подбора, которым должны удовлетворять объекты эксплуатации.
// 
// Возвращаемое значение:
//  Массив - Список объектов эксплуатации.
//
Функция НайтиОбъектыЭксплуатацииПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт
	
	Результат = НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	
	ШаблонСообщения = НСтр("ru = 'Объект эксплуатации с инвентарным номером %1 не найден'");
	Для каждого Штрихкод Из Результат.НеНайдены Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Штрихкод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	КонецЦикла; 
	
	ШаблонСообщения = НСтр("ru = 'Объект эксплуатации ""%1"" не может быть добавлен, т.к. он не удовлетворяет условиям выбора'");
	Для каждого СсылкаНаОбъект Из Результат.НеПодходят Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект); 
	КонецЦикла; 
	
	Возврат Результат.МассивОбъектов;
	
КонецФункции

// Находит основные средства по штрихкодам.
//
// Параметры:
//  ДанныеШтрихкодов - Структура - Данные штрихкодов.
//  ПараметрыПодбора - Структура - Параметры подбора, которым должны удовлетворять объекты эксплуатации.
// 
// Возвращаемое значение:
//  Массив - Список объектов эксплуатации.
//
Функция НайтиОсновныеСредстваПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт

	Результат = НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	
	ШаблонСообщения = НСтр("ru = 'Основное средство с инвентарным номером %1 не найдено'");
	Для каждого Штрихкод Из Результат.НеНайдены Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Штрихкод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	КонецЦикла; 
	
	ШаблонСообщения = НСтр("ru = 'Основное средство ""%1"" не может быть добавлено в документ, т.к. оно не удовлетворяет условиям выбора'");
	Для каждого СсылкаНаОбъект Из Результат.НеПодходят Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект); 
	КонецЦикла; 
	
	Возврат Результат.МассивОбъектов;

КонецФункции
 
#КонецОбласти

#Область Прочее

// Формирует описание технологических параметров.
//
Функция ОписаниеПараметровОперацииЗакрытияМесяца() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеПараметровОперации();
	
	#Область РасчетАмортизации
		
	// МаксимальноеКоличествоЗаданийДляРасчетаАмортизации
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Имя 				  = "МаксимальноеКоличествоЗаданийДляРасчетаАмортизации";
	ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Количество одновременно выполняемых заданий расчета амортизации'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС     	  = 1;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 4;
	ОписаниеПараметра.Описание =
		НСтр("ru = 'Расчет амортизации в закрытии месяца может выполняться одновременно сразу по нескольким пакетам амортизации.
              |Увеличение количества заданий может уменьшить время расчета амортизации.
              |Количество заданий рекомендуется настраивать в зависимости от конфигурации сервера СУБД и серверов 1С:Предприятие.'");
		
	#КонецОбласти
	
	Возврат ОписаниеПараметров;
	
КонецФункции

// Определяет используется ли управление ВНА версии 2.4.
//
// Параметры:
//  Период	 - Дата - На какую дату нужно проверить (если не указана, то проверяется на текущую дату).
// 
// Возвращаемое значение:
//  Булево - Истина, если используется управление ВНА версии 2.4.
//
Функция ИспользуетсяУправлениеВНА_2_4(Период = '000101010000') Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВнеоборотныеАктивыЛокализация.ИспользуетсяУправлениеВНА_2_4(Период);

КонецФункции

// Определяет используется ли управление ВНА.
// 
// Возвращаемое значение:
//  Булево - Истина, если используется управление ВНА.
//
Функция ИспользуетсяУправлениеВНА() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
			ИЛИ ВнеоборотныеАктивыЛокализация.ИспользуетсяУправлениеВНА();

КонецФункции
 
// Определяет местонахождение основного средства.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - Основное средство.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения о местонахождении:
//  * Организация
//  * МОЛ
//  * Местонахождение
//  * АдресМестонахождения
//  * Арендатор
//  * ПодразделениеАрендатора
//  * МОЛАрендатора
//
Функция МестонахождениеОС(ОсновноеСредство) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОССрезПоследних.Организация КАК Организация,
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ,
	|	МестонахождениеОССрезПоследних.Местонахождение КАК Местонахождение,
	|	МестонахождениеОССрезПоследних.АдресМестонахождения КАК АдресМестонахождения,
	|	МестонахождениеОССрезПоследних.Арендатор КАК Арендатор,
	|	МестонахождениеОССрезПоследних.ПодразделениеАрендатора КАК ПодразделениеАрендатора,
	|	МестонахождениеОССрезПоследних.МОЛАрендатора КАК МОЛАрендатора
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(, ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОССрезПоследних";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	Результат = Запрос.Выполнить();
	
	МестонахождениеОС = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		МестонахождениеОС.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МестонахождениеОС, Выборка);
	КонецЕсли;
	
	Возврат МестонахождениеОС;
	
КонецФункции

// Определяет место учета нематериального актива.
//
// Параметры:
//  НематериальныйАктив	 - СправочникСсылка.НематериальныеАктивы - нематериальный актив.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения о месте учета:
//  * Организация
//  * Подразделение.
//
Функция МестоУчетаНМА(НематериальныйАктив) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестоУчетаНМА.Организация,
	|	МестоУчетаНМА.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.МестоУчетаНМА.СрезПоследних(, НематериальныйАктив = &НематериальныйАктив) КАК МестоУчетаНМА";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	
	Результат = Запрос.Выполнить();
	
	МестоУчетаНМА = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		МестоУчетаНМА.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МестоУчетаНМА, Выборка);
	КонецЕсли;

	Возврат МестоУчетаНМА;
	
КонецФункции

// Возвращает сведения о стоимости и амортизации ОС.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - Основное средство для которого необходимо получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства: Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
//  								АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
//  								Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
//  								СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ.
//
Функция СтоимостьИАмортизацияОС(ОсновноеСредство) Экспорт

	Организация = Неопределено;
	МестонахождениеОС = МестонахождениеОС(ОсновноеСредство);
	Если МестонахождениеОС <> Неопределено Тогда
		Организация = МестонахождениеОС.Организация
	КонецЕсли;
	
	СтоимостьИАмортизация = Новый Структура("Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
											|АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
											|Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
											|СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ,ЗалоговаяСтоимость");
	
	Для Каждого Колонка Из СтоимостьИАмортизация Цикл
		СтоимостьИАмортизация[Колонка.Ключ] = 0;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат СтоимостьИАмортизация;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаСтоимостьИАмортизацияОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияОстаток, 0)       
		|	КОНЕЦ КАК Амортизация,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияРеглОстаток, 0)
		|	КОНЕЦ КАК АмортизацияРегл,
		|	0 КАК АмортизацияНУ,
		|	0 КАК АмортизацияПР,
		|	0 КАК АмортизацияВР,
		|	0 КАК АмортизацияЦФ,
		|	0 КАК АмортизацияНУЦФ,
		|	0 КАК АмортизацияПРЦФ,
		|	0 КАК АмортизацияВРЦФ,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьОстаток, 0)
		|	КОНЕЦ КАК Стоимость,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьРеглОстаток, 0)
		|	КОНЕЦ КАК СтоимостьРегл,
		|	0 КАК СтоимостьНУ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьВР,
		|	0 КАК СтоимостьЦФ,
		|	0 КАК СтоимостьНУЦФ,
		|	0 КАК СтоимостьПРЦФ,
		|	0 КАК СтоимостьВРЦФ,
		|	0 КАК ЗалоговаяСтоимость
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АмортизацияОС.Остатки(
		|				,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК АмортизацияОСОстатки
		|		ПО ОбъектыЭксплуатации.Ссылка = АмортизацияОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(
		|				,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОСОстатки
		|		ПО ОбъектыЭксплуатации.Ссылка = СтоимостьОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК ПорядокУчетаОСУУ
		|		ПО ОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСУУ.ОсновноеСредство
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка = &ОсновноеСредство";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтоимостьИАмортизация, Выборка);

	Возврат СтоимостьИАмортизация;
	
КонецФункции

// Возвращает сведения о стоимости и амортизации НМА.
//
// Параметры:
//  НематериальныйАктив - СправочникСсылка.НематериальныеАктивы	 - Нематериальный актив для которого необходимо получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства: Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
//  								АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
//  								Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
//  								СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ.
//
Функция СтоимостьИАмортизацияНМА(НематериальныйАктив) Экспорт

	Организация = Неопределено;
	МестонахождениеОС = МестоУчетаНМА(НематериальныйАктив);
	Если МестонахождениеОС <> Неопределено Тогда
		Организация = МестонахождениеОС.Организация
	КонецЕсли;
	
	СтоимостьИАмортизация = Новый Структура("Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
											|АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
											|Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
											|СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ");
	
	Для Каждого Колонка Из СтоимостьИАмортизация Цикл
		СтоимостьИАмортизация[Колонка.Ключ] = 0;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат СтоимостьИАмортизация;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаСтоимостьИАмортизацияНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьУУ, 0)
		|					- ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияНМАОстатки.АмортизацияОстаток, 0)
		|	КОНЕЦ КАК Амортизация,
		|
		// АмортизацияРегл
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0)
		|					- ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьРеглОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияНМАОстатки.АмортизацияРеглОстаток, 0)
		|	КОНЕЦ КАК АмортизацияРегл,
		|
		|	0 КАК АмортизацияЦФ,
		|	0 КАК АмортизацияНУ,
		|	0 КАК АмортизацияНУЦФ,
		|	0 КАК АмортизацияПР,
		|	0 КАК АмортизацияПРЦФ,
		|	0 КАК АмортизацияВР,
		|	0 КАК АмортизацияВРЦФ,
		|
		// Стоимость
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьУУ, 0)
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьОстаток, 0)
		|	КОНЕЦ КАК Стоимость,
		|
		// СтоимостьРегл
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0)
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьРеглОстаток, 0)
		|	КОНЕЦ КАК СтоимостьРегл,
		|
		|	0 КАК СтоимостьЦФ,
		|	0 КАК СтоимостьНУ,
		|	0 КАК СтоимостьНУЦФ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьПРЦФ,
		|	0 КАК СтоимостьВР,
		|	0 КАК СтоимостьВРЦФ
		|
		|ИЗ
		|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АмортизацияНМА.Остатки(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК АмортизацияНМАОстатки
		|		ПО НематериальныеАктивы.Ссылка = АмортизацияНМАОстатки.НематериальныйАктив
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА.Остатки(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК СтоимостьНМАОстатки
		|		ПО НематериальныеАктивы.Ссылка = СтоимостьНМАОстатки.НематериальныйАктив
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК ПервоначальныеСведенияНМА
		|		ПО НематериальныеАктивы.Ссылка = ПервоначальныеСведенияНМА.НематериальныйАктив
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК ПорядокУчетаНМАУУ
		|		ПО НематериальныеАктивы.Ссылка = ПорядокУчетаНМАУУ.НематериальныйАктив
		|ГДЕ
		|	НематериальныеАктивы.Ссылка = &НематериальныйАктив";
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтоимостьИАмортизация, Выборка);

	Возврат СтоимостьИАмортизация;
	
КонецФункции

// Проверяет, что документ проводится в периоде, который соответствует версии документа.
//
// Параметры:
//  Объект				 - ДокументОбъект	 - Проводимый документ.
//  ЭтоДокументВерсии2_4 - Булево			 - Истина, если документ относится к версии 2.4.
//  Отказ				 - Булево			 - Отказ от проведения.
//
Процедура ПроверитьСоответствиеДатыВерсииУчета(Объект, ЭтоДокументВерсии2_4, Отказ) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаНачалаУчета = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
	
	ИспользуетсяУправлениеВНА_2_4 = (Объект.Дата >= ДатаНачалаУчета
				ИЛИ Объект.Дата = '000101010000' 
					И ТекущаяДатаСеанса() >= ДатаНачалаУчета);
	
	ТекстСообщения = Неопределено;

	Если ИспользуетсяУправлениеВНА_2_4 И НЕ ЭтоДокументВерсии2_4 Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата документа должна быть до %1 (начало ведения учета внеоборотных активов версии 2.4).
                               |После этой даты необходимо использовать документы, расположенные в разделе ""Внеоборотные активы"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ДатаНачалаУчета, "ДЛФ=D"));
		
	ИначеЕсли НЕ ИспользуетсяУправлениеВНА_2_4 И ЭтоДокументВерсии2_4  Тогда
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ИзменениеПараметровОС2_4")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ИзменениеПараметровНМА2_4")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4")
				И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВводОстатковВзаиморасчетовПоДоговорамЛизинга Тогда
				
			// Документы, которые можно проводить до даты начала учета версии 2.4
			Если НачалоДня(Объект.Дата) < НачалоДня(ДатаНачалаУчета-1) Тогда
				
				ТекстСообщения = НСтр("ru = 'Если документ оформлен для перехода на учет версии 2.4, то его дата должна быть %1.
	                                   |В остальных случаях дата документа должна быть после %2 (начало ведения учета внеоборотных активов версии 2.4).
	                                   |До этой даты необходимо использовать документы, расположенные в разделе ""Регламентированный учет"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ДатаНачалаУчета-1, "ДЛФ=D"), Формат(ДатаНачалаУчета, "ДЛФ=D"));
			КонецЕсли; 
			
		Иначе	
			
			ТекстСообщения = НСтр("ru = 'Дата документа должна быть после %1 (начало ведения учета внеоборотных активов версии 2.4).
	                               |До этой даты необходимо использовать документы, расположенные в разделе ""Регламентированный учет"".'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ДатаНачалаУчета, "ДЛФ=D"));
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ТекстСообщения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "Дата",, Отказ); 
	КонецЕсли; 
	
КонецПроцедуры

// Определяет организации, по которым закрытие месяца должно выполняться вместе.
//
// Параметры:
//  Период	 - Дата - Период закрытия месяца.
// 
// Возвращаемое значение:
//  Массив - Список групп организаций.
//
Функция ГруппыОрганизацийОСиНМА(Период) Экспорт
	
	МассивОСиНМА = Новый Массив;
	
	ВнеоборотныеАктивыЛокализация.ДополнитьГруппыОрганизацийОСиНМА(Период, МассивОСиНМА);
	
	Возврат МассивОСиНМА;
	
КонецФункции

// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//  Настройки	 - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//  Может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта().
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт

	ВнеоборотныеАктивыЛокализация.НастроитьВариантыОтчетов(Настройки);
	
	#Область ВедомостьПоОС2_4
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоОС2_4);
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации основных средств?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоОС");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации основных средств?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоОС_БУ");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации основных средств в бухгалтерском учете?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоОС_НУ");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации основных средств в налоговом учете?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоОС_БУ_НУ");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации основных средств в бухгалтерском и налоговом учетах?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоОС_УУ");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации основных средств в управленческом учете?'");
	
	#КонецОбласти
	
	#Область ВедомостьПоНМА2_4
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоНМА2_4);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоНМА");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоНМА_БУ");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР в бухгалтерском учете?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоНМА_НУ");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР в налоговом учете?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоНМА_БУ_НУ");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР в бухгалтерском и налоговом учетах?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоНМА_УУ");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР в управленческом учете?'");
	#КонецОбласти
	
	#Область СправкаРасчетАмортизацииОС2_4
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетАмортизацииОС2_4);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СправкаРасчетАмортизацииОС");
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СправкаРасчетПоДокументуАмортизацииОСКонтекст");
	#КонецОбласти
	
	#Область СправкаРасчетАмортизацииНМА2_4
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетАмортизацииНМА2_4);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СправкаРасчетАмортизацииНМА");
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СправкаРасчетПоДокументуАмортизацииНМАКонтекст");
	#КонецОбласти
	
КонецПроцедуры

// Определяет завершение перехода на версию 2.4.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
// 
// Возвращаемое значение:
//  Булево - Истина, если переход не завершен.
//
Функция НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Экспорт

	Если НЕ ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СостояниеЭтапа = ЗакрытиеМесяцаСервер.ОпределитьСостояниеЭтаповРасчета(
						Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24, 
						ПараметрыОбработчика.ПараметрыРасчета.Период, 
						ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
						Ложь,
						Ложь);
						
	Возврат СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;

КонецФункции

// Определяет параметры получения данных в запросе, который содержит обращение к данным двух версий учета.
//
// Параметры:
//  НачалоПериода	 - Дата	 - Начало периода.
//  КонецПериода	 - Конец - Начало периода.
// 
// Возвращаемое значение:
//  Структура - Параметры получения данных в запросе.
//
Функция ПараметрыПолученияДанныхДвухВерсийУчета(НачалоПериода, КонецПериода) Экспорт

	НачалоПериода22 = НачалоПериода;
	НачалоПериода24 = НачалоПериода;
	КонецПериода22 = КонецПериода;
	КонецПериода24 = КонецПериода;
	
	НачалоУчета24 = Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить();
	ИспользоватьВнеоборотныеАктивы2_2 = Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить();
	ИспользоватьВнеоборотныеАктивы2_4 = Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить();
	
	ИспользуетсяВерсия22 =
		ИспользоватьВнеоборотныеАктивы2_2
		И (НЕ ЗначениеЗаполнено(НачалоПериода)
			ИЛИ НачалоПериода < НачалоУчета24
			ИЛИ НЕ ИспользоватьВнеоборотныеАктивы2_4);
			
	ИспользуетсяВерсия24 =
		ИспользоватьВнеоборотныеАктивы2_4
		И (НЕ ЗначениеЗаполнено(КонецПериода)
			ИЛИ КонецПериода > НачалоУчета24);
			
	Если ИспользуетсяВерсия22 И ИспользуетсяВерсия24 Тогда
		КонецПериода22 = НачалоУчета24 - 1;
		НачалоПериода24 = НачалоУчета24;
	КонецЕсли; 

	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("ИспользуетсяВерсия22", ИспользуетсяВерсия22);
	ПараметрыПолученияДанных.Вставить("ИспользуетсяВерсия24", ИспользуетсяВерсия24);
	ПараметрыПолученияДанных.Вставить("НачалоПериода22", НачалоПериода22);
	ПараметрыПолученияДанных.Вставить("КонецПериода22", КонецПериода22);
	ПараметрыПолученияДанных.Вставить("НачалоПериода24", НачалоПериода24);
	ПараметрыПолученияДанных.Вставить("КонецПериода24", КонецПериода24);
	
	Возврат ПараметрыПолученияДанных;
	
КонецФункции

// Позволяет определить есть ли в табличной части документа строки с одинаковыми объектами учета.
//  При нахождении дублей формирует сообщения пользователю.
//
// Параметры:
//  Объект				 - ДокументОбъект	 - Документ.
//  ИмяТабличнойЧасти	 - Строка			 - Имя табличной части, в которой нужно искать дубли.
//  ИмяРеквизита		 - Строка			 - Имя реквизита ТЧ.
//  Отказ				 - Булево			 - Признак отказа от дальнейшей обработки.
//  ШаблонСообщения		 - Строка			 - Шаблон сообщения, который будет использоваться.
//
Процедура ПроверитьОтсутствиеДублейВТабличнойЧасти(Объект, ИмяТабличнойЧасти, ИмяРеквизита, Отказ, ШаблонСообщения = Неопределено) Экспорт
	
	Если ШаблонСообщения = Неопределено Тогда
		Если ИмяТабличнойЧасти = "ОС" Тогда
			ШаблонСообщения = НСтр("ru = 'Основное средство ""%1"" уже выбрано в строке %2.'");
		ИначеЕсли ИмяТабличнойЧасти = "НМА" Тогда
			ШаблонСообщения = НСтр("ru = 'Нематериальный актив ""%1"" уже выбран в строке %2.'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Значение ""%1"" уже выбрано в строке %2.'");
		КонецЕсли;
	КонецЕсли; 
	
	СписокОбъектов = Новый Соответствие;
	Для каждого ДанныеСтроки Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизита]) Тогда
			Продолжить;
		КонецЕсли;
		
		ИсходнаяСтрока = СписокОбъектов.Получить(ДанныеСтроки[ИмяРеквизита]);
		Если ИсходнаяСтрока = Неопределено Тогда
			СписокОбъектов.Вставить(ДанныеСтроки[ИмяРеквизита], ДанныеСтроки.НомерСтроки);
			Продолжить;
		КонецЕсли; 
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДанныеСтроки[ИмяРеквизита], Формат(ИсходнаяСтрока, "ЧГ="));
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, ДанныеСтроки.НомерСтроки, ИмяРеквизита);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, "", Отказ);
	
	КонецЦикла; 
	
КонецПроцедуры

// Определяет принят ли к учету объект эксплуатации.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.ОбъектыЭксплуатации	 - Объект эксплуатации.
// 
// Возвращаемое значение:
//  Булево - Истина, если принят к учету.
//
Функция ОбъектЭксплуатацииПринятКУчету(Ссылка) Экспорт

	Если ИспользуетсяУправлениеВНА_2_4(ТекущаяДатаСеанса()) Тогда
		ПервоначальныеСведения = Справочники.ОбъектыЭксплуатации.ПервоначальныеСведения(Ссылка);
		ПринятКУчету = ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКУчету 
						ИЛИ ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКУчету
						ИЛИ ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету;
	Иначе
		ПринятКУчету = ВнеоборотныеАктивыЛокализация.ОбъектЭксплуатацииПринятКУчету(Ссылка);
	КонецЕсли;
	
	Возврат ПринятКУчету

КонецФункции

// Определяет объекты конфигурации, в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
//
// Параметры:
//   Объекты - Массив - объекты метаданных (ОбъектМетаданных) с командами отчетов.
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Справочники.НематериальныеАктивы);
	Объекты.Добавить(Метаданные.Документы.АмортизацияНМА2_4);
	Объекты.Добавить(Метаданные.Документы.АмортизацияОС2_4);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4);
	Объекты.Добавить(Метаданные.Документы.ИзменениеПараметровНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ИзменениеПараметровОС2_4);
	Объекты.Добавить(Метаданные.Документы.МодернизацияОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПереоценкаНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПереоценкаОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПодготовкаКПередачеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПодготовкаКПередачеОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4);
	Объекты.Добавить(Метаданные.Документы.СписаниеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.СписаниеОС2_4);
	Объекты.Добавить(Метаданные.Документы.РазукомплектацияОС);
	
	Объекты.Добавить(Метаданные.Обработки.ЖурналДокументовНМА2_4);
	Объекты.Добавить(Метаданные.Обработки.ЖурналДокументовОС2_4);
	
	ВнеоборотныеАктивыЛокализация.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	
КонецПроцедуры

// Добавляет в журнал документы подсистемы ВНА.
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - ТаблицаЗначений	 - см. ОбщегоНазначенияУТ.НоваяТаблицаХозяйственныеОперацииИДокументы()
//
Процедура ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовЗакупки(ХозяйственныеОперацииИДокументы) Экспорт

	ВнеоборотныеАктивыЛокализация.ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовЗакупки(ХозяйственныеОперацииИДокументы);
	
КонецПроцедуры

// Удаляет из массива объекты эксплуатации не соответствующие отбору.
//
// Параметры:
//  МассивОбъектов	 - Массив	 - Массив из которого требуется удалить объекты эксплуатации.
//  ПараметрыПодбора - Структура - Параметры подбора.
//
Функция УдалитьОбъектыЭксплуатацииНеСоответствующиеОтбору(МассивОбъектов, ПараметрыПодбора) Экспорт

	ОписаниеЗапроса = Справочники.ОбъектыЭксплуатации.ОписаниеЗапросаДляВыбора(ПараметрыПодбора, Истина, МассивОбъектов);
	
	Запрос = Новый Запрос(ОписаниеЗапроса.ТекстЗапроса);
	Для каждого ОписаниеПараметра Из ОписаниеЗапроса.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметра.Ключ, ОписаниеПараметра.Значение);
	КонецЦикла; 
	
	ДоступныеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УдаленныеСсылки = Новый Массив;
	
	Для Сч = -МассивОбъектов.ВГраница() По 0 Цикл
		Если ДоступныеОбъекты.Найти(МассивОбъектов[-Сч]) = Неопределено Тогда
			УдаленныеСсылки.Добавить(МассивОбъектов[-Сч]);
			МассивОбъектов.Удалить(-Сч);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат УдаленныеСсылки;
	
КонецФункции

// Позволяет переопределить справочники хранения файлов по типам владельцев.
// 
// см. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов()
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если ТипВладелецФайла = Тип("ДокументСсылка.АмортизацияНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.АмортизацияОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВыработкаНМА")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ИзменениеПараметровНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ИзменениеПараметровОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.МодернизацияОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.НаработкаОбъектовЭксплуатации")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПеремещениеНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПеремещениеОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПереоценкаНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПереоценкаОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПодготовкаКПередачеНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.РазукомплектацияОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.СписаниеНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.СписаниеОС2_4")
		ИЛИ ВнеоборотныеАктивыЛокализация.ЕстьПрисоединенныеФайлы(ТипВладелецФайла) Тогда
		
		ИменаСправочников.Вставить("ДокументыВНАПрисоединенныеФайлы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ТекстЗапросаРасходыПоДокументам(СписокЗапросов) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	NULL КАК Организация,
	|	NULL КАК НаправлениеДеятельности,
	|	NULL КАК Подразделение,
	|	NULL КАК СтатьяРасходов,
	|	NULL КАК АналитикаРасходов,
	|	0    КАК Сумма,
	|	0    КАК СуммаУпр,
	|	0    КАК СуммаБезНДС,
	|	0    КАК СуммаРегл,
	|	0    КАК ПостояннаяРазница,
	|	0    КАК ВременнаяРазница
	|ПОМЕСТИТЬ НакопленныеРасходы
	|ГДЕ
	|	ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Регистратор КАК Регистратор,
	|	ДанныеКРасчету.АналитикаКапитализацииРасходов КАК АналитикаКапитализацииРасходов,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаБУ,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаУУ
	|ПОМЕСТИТЬ НачалоКапитализацииРасходов
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|ГДЕ
	|	ДанныеКРасчету.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС), 
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМА))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Регистратор,
	|	ДанныеКРасчету.АналитикаКапитализацииРасходов,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА СтоимостьОС.ОтражатьВРеглУчете
	|						И ЕСТЬNULL(ПринятиеКУчетуОС.ЧастичныйВводВЭксплуатацию, ЛОЖЬ)
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|				КОГДА СтоимостьОС.ОтражатьВРеглУчете
	|					ТОГДА НАЧАЛОПЕРИОДА(СтоимостьОС.Период, ДЕНЬ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|			КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1))),
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА СтоимостьОС.ОтражатьВУпрУчете
	|						И ЕСТЬNULL(ПринятиеКУчетуОС.ЧастичныйВводВЭксплуатацию, ЛОЖЬ)
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|				КОГДА СтоимостьОС.ОтражатьВУпрУчете
	|					ТОГДА НАЧАЛОПЕРИОДА(СтоимостьОС.Период, ДЕНЬ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|			КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1)))
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|		ПО (СтоимостьОС.АналитикаКапитализацииРасходов = ДанныеКРасчету.АналитикаКапитализацииРасходов)
	|			И (СтоимостьОС.Период < ДанныеКРасчету.Период)
	|			И (СтоимостьОС.Регистратор <> ДанныеКРасчету.Регистратор)
	|			И (СтоимостьОС.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС), 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга), 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4 КАК ПринятиеКУчетуОС
	|		ПО (ПринятиеКУчетуОС.Ссылка = СтоимостьОС.Регистратор)
	|ГДЕ
	|	ДанныеКРасчету.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Регистратор,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.АналитикаКапитализацииРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	АналитикаКапитализацииРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасходыОстатки.Организация КАК Организация,
	|	ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаУпрОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаБезНДСОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаРеглОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.ПостояннаяРазницаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.ВременнаяРазницаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВременнаяРазница
	|ПОМЕСТИТЬ ПрочиеРасходыОстатки
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Остатки(
	|			&НачалоМесяца,
	|			(Организация, НаправлениеДеятельности, АналитикаРасходов) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.НаправлениеДеятельности,
	|					ДанныеКРасчету.АналитикаКапитализацииРасходов
	|				ИЗ
	|					ДанныеКРасчету)) КАК ПрочиеРасходыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПрочиеРасходыОбороты.Период, ДЕНЬ) КАК Период,
	|	ПрочиеРасходыОбороты.Организация КАК Организация,
	|	ПрочиеРасходыОбороты.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходыОбороты.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОбороты.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаУпрОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаБезНДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаРеглОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.ПостояннаяРазницаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.ВременнаяРазницаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВременнаяРазница
	|ПОМЕСТИТЬ ПрочиеРасходыДвижения
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Запись,
	|			(Организация, НаправлениеДеятельности, АналитикаРасходов) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.НаправлениеДеятельности,
	|					ДанныеКРасчету.АналитикаКапитализацииРасходов
	|				ИЗ
	|					ДанныеКРасчету)) КАК ПрочиеРасходыОбороты
	|
	|ГДЕ
	|	&ТекущийДокумент <> НЕОПРЕДЕЛЕНО
	|			И &ТекущийДокумент <> ПрочиеРасходыОбороты.Регистратор
	|	ИЛИ НЕ ТИПЗНАЧЕНИЯ(ПрочиеРасходыОбороты.Регистратор) В (&ТипыДокументовПоКоторымНужноИсключитьРасходыПриРасчетеСтоимости)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НаправлениеДеятельности,
	|	АналитикаРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Регистратор                КАК Регистратор,
	|	ДанныеКРасчету.Период                     КАК Период,
	|	ДанныеКРасчету.Организация                КАК Организация,
	|	ДанныеКРасчету.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	ДанныеКРасчету.Подразделение              КАК Подразделение,
	|	ДанныеКРасчету.СтатьяРасходов             КАК СтатьяРасходов,
	|	ДанныеКРасчету.АналитикаРасходов          КАК АналитикаРасходов,
	
	// Должны присутствовать все ресурсы регистра Прочие расходы
	|	СУММА(ДанныеКРасчету.Сумма)               КАК Сумма,
	|	СУММА(ДанныеКРасчету.СуммаУпр)            КАК СуммаУпр,
	|	СУММА(ДанныеКРасчету.СуммаБезНДС)         КАК СуммаБезНДС,
	|	СУММА(ДанныеКРасчету.СуммаРегл)           КАК СуммаРегл,
	|	СУММА(ДанныеКРасчету.ПостояннаяРазница)   КАК ПостояннаяРазница,
	|	СУММА(ДанныеКРасчету.ВременнаяРазница)    КАК ВременнаяРазница
	|ПОМЕСТИТЬ РасходыПоДокументам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеКРасчету.Регистратор КАК Регистратор,
	|		ДанныеКРасчету.Период КАК Период,
	|		ДанныеКРасчету.Организация КАК Организация,
	|		ДанныеКРасчету.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|		ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|		ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.СуммаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаУпр,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаРегл,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.ПостояннаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПостояннаяРазница,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.ВременнаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВременнаяРазница
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачалоКапитализацииРасходов КАК НачалоКапитализацииРасходов
	|			ПО НачалоКапитализацииРасходов.АналитикаКапитализацииРасходов = ДанныеКРасчету.АналитикаКапитализацииРасходов
	|				И НачалоКапитализацииРасходов.Регистратор = ДанныеКРасчету.Регистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрочиеРасходыОстатки КАК ПрочиеРасходыОстатки
	|			ПО (ПрочиеРасходыОстатки.Организация = ДанныеКРасчету.Организация)
	|				И (ПрочиеРасходыОстатки.НаправлениеДеятельности = ДанныеКРасчету.НаправлениеДеятельности)
	|				И (ПрочиеРасходыОстатки.АналитикаРасходов = ДанныеКРасчету.АналитикаКапитализацииРасходов)
	|	ГДЕ
	|		(ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < &НачалоМесяца
	|			ИЛИ ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < &НачалоМесяца
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Регистратор,
	|		ДанныеКРасчету.Период,
	|		ДанныеКРасчету.Организация,
	|		ДанныеКРасчету.НаправлениеДеятельности,
	|		ПрочиеРасходыДвижения.Подразделение,
	|		ПрочиеРасходыДвижения.СтатьяРасходов,
	|		ПрочиеРасходыДвижения.АналитикаРасходов,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.СуммаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаБУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.ПостояннаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.ВременнаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачалоКапитализацииРасходов КАК НачалоКапитализацииРасходов
	|			ПО НачалоКапитализацииРасходов.АналитикаКапитализацииРасходов = ДанныеКРасчету.АналитикаКапитализацииРасходов
	|				И НачалоКапитализацииРасходов.Регистратор = ДанныеКРасчету.Регистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрочиеРасходыДвижения КАК ПрочиеРасходыДвижения
	|			ПО (ПрочиеРасходыДвижения.Организация = ДанныеКРасчету.Организация)
	|				И (ПрочиеРасходыДвижения.НаправлениеДеятельности = ДанныеКРасчету.НаправлениеДеятельности)
	|				И (ПрочиеРасходыДвижения.АналитикаРасходов = ДанныеКРасчету.АналитикаКапитализацииРасходов)
	|				И (ПрочиеРасходыДвижения.Период <= ДанныеКРасчету.Период)
	|	ГДЕ
	|		(ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < ПрочиеРасходыДвижения.Период
	|			ИЛИ ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < ПрочиеРасходыДвижения.Период
	|
	|	) КАК ДанныеКРасчету
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Регистратор,
	|	ДанныеКРасчету.Период,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.НаправлениеДеятельности,
	|	ДанныеКРасчету.Подразделение,
	|	ДанныеКРасчету.СтатьяРасходов,
	|	ДанныеКРасчету.АналитикаРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеКРасчету.Сумма) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.СуммаУпр) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.СуммаБезНДС) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.СуммаРегл) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.ПостояннаяРазница) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.ВременнаяРазница) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Функция ПараметрыРасчетаСтоимости() Экспорт

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ФактическаяСтоимость", Ложь);
	ПараметрыРасчета.Вставить("ВидАналитикиКапитализацииРасходов", Перечисления.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства);
	ПараметрыРасчета.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	ТипыОбъектовУчета = Новый Массив;
	ТипыОбъектовУчета.Добавить(Тип("СправочникСсылка.ОбъектыЭксплуатации"));
	ТипыОбъектовУчета.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"));
	ТипыОбъектовУчета.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
	
	ТаблицаОбъектовУчета = Новый ТаблицаЗначений;
	ТаблицаОбъектовУчета.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов(ТипыОбъектовУчета));
	ТаблицаОбъектовУчета.Колонки.Добавить("СтоимостьУУ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ТаблицаОбъектовУчета.Колонки.Добавить("СтоимостьБУ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ТаблицаОбъектовУчета.Колонки.Добавить("ОтражатьВРеглУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ОтражатьВУпрУчете",  Новый ОписаниеТипов("Булево"));

	ПараметрыРасчета.Вставить("ТаблицаОбъектовУчета", ТаблицаОбъектовУчета);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, СписокДопПолей = Неопределено, СписокПолейТаблиц = Неопределено) Экспорт

	ТекстДопПолей = "";
	Если СписокДопПолей <> Неопределено Тогда
		Если ТипЗнч(СписокДопПолей) = Тип("Строка") Тогда
			СтруктураДопПолей = Новый Структура(СписокДопПолей);
		Иначе
			СтруктураДопПолей = СписокДопПолей;
		КонецЕсли;
		Для каждого КлючИЗначение Из СтруктураДопПолей Цикл
			ТекстДопПолей = ТекстДопПолей + "
			|	, ИзмененныеДанные." + ?(ЗначениеЗаполнено(КлючИЗначение.Значение), КлючИЗначение.Значение, КлючИЗначение.Ключ) + " КАК " + КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЕсли; 
	
	Если СписокПолейТаблиц = Неопределено Тогда
		СписокПолейТаблиц = Новый Структура;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для каждого ИмяТаблицы Из СписокТаблиц Цикл
		
		ИмяВременнойТаблицы = ИмяТаблицы + "Изменение";
		ЕстьЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТаблиц, ИмяВременнойТаблицы, Ложь);
		Если НЕ ЕстьЗаписи Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстПолейТаблицы = "";
		Для каждого КлючИЗначение Из СписокПолейТаблиц Цикл
			Если КлючИЗначение.Значение.Найти(ИмяТаблицы) <> Неопределено Тогда
				ТекстПолейТаблицы = ТекстПолейТаблицы + "
				|	, ИзмененныеДанные." + КлючИЗначение.Ключ + " КАК " + КлючИЗначение.Ключ;
			Иначе
				ТекстПолейТаблицы = ТекстПолейТаблицы + "
				|	, НЕОПРЕДЕЛЕНО КАК " + КлючИЗначение.Ключ;
			КонецЕсли; 
		КонецЦикла; 
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Период КАК Период,
		|	ИзмененныеДанные.Организация КАК Организация,
		|	ИзмененныеДанные.Документ КАК Документ,
		|	""" + ИмяТаблицы + """ КАК ИмяТаблицы
		|	" + ТекстДопПолей + "
		|	" + ТекстПолейТаблицы + "
		|ИЗ
		|	" + ИмяВременнойТаблицы + " КАК ИзмененныеДанные";
		
		МассивСтрок.Добавить(ТекстЗапроса);
		
	КонецЦикла; 
	
	Если МассивСтрок.Количество() <> 0 Тогда
		ТекстОбъединенияДанных = СтрСоединить(МассивСтрок, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		Возврат ТекстОбъединенияДанных;
	КонецЕсли; 
	
	Возврат "";

КонецФункции

Процедура ПровестиДокументыВФоне(СписокДокументов, АдресХранилища) Экспорт

	ЕстьОшибки = Ложь;
	
	Для каждого ДокументСсылка Из СписокДокументов Цикл
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли; 
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла; 

	ПоместитьВоВременноеХранилище(ЕстьОшибки, АдресХранилища);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос) Экспорт

	Запрос.УстановитьПараметр("ТипыДокументовПоКоторымНужноИсключитьРасходыПриРасчетеСтоимости", ТипыДокументовПоКоторымНужноИсключитьРасходыПриРасчетеСтоимости());
	Запрос.УстановитьПараметр("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
КонецПроцедуры

Функция ТипыДокументовПоКоторымРассчитываетсяСтоимость(ПроверитьНаличиеПрав = Ложь) Экспорт

	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("МодернизацияОС2_4", ПроверитьНаличиеПрав, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуОС2_4", ПроверитьНаличиеПрав, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуНМА2_4", ПроверитьНаличиеПрав, ТипыОбъектов);
	
	Возврат ТипыОбъектов;

КонецФункции

Функция ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость() Экспорт

	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОС);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.МодернизацияОС);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМА);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость(Операции);
	
	Возврат Операции;

КонецФункции

Процедура УстановитьПараметрыФункциональныхОпцийФормыОбъекта(Форма, Организация, Дата, Периодичность = "МЕСЯЦ") Экспорт

	ПараметрыФО = Новый Структура("Организация, Период",
		Организация, ?(ВРег(Периодичность) = "МЕСЯЦ", НачалоМесяца(Дата), НачалоДня(Дата)));

	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

КонецПроцедуры

Функция УсловияПереходаНаУчет2_4() Экспорт

	КомментарийУчет2_4 = "";
	УсловияВключенияУчет2_4 = "";
	КомментарийМинДатаНачалаУчета2_4 = "";
	КомментарийМаксДатаНачалаУчета2_4 = "";
	
	МинимальнаяДатаНачалаУчета2_4 = '000101010000';
	МаксимальнаяДатаНачалаУчета2_4 = '000101010000';
	
	РежимПартионногоУчета = Истина;
	ВестиУправленческийУчетОрганизаций = Истина;
	ИспользоватьУчетПрочихДоходовРасходовРегл = Истина;
	
	Если НЕ Константы.ПартионныйУчетВерсии22.Получить() Тогда
		РежимПартионногоУчета = Ложь;
		УсловияВключенияУчет2_4 = УсловияВключенияУчет2_4 + Символы.ПС
			+ НСтр("ru = '- установить опции ""Партионный учет"" значение ""Версия 2.2""
                    |(раздел ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"")'");
	Иначе
		ДатаОпции = Константы.ДатаПереходаНаПартионныйУчетВерсии22.Получить();
		Если ЗначениеЗаполнено(ДатаОпции) И ДатаОпции > МинимальнаяДатаНачалаУчета2_4 Тогда
			МинимальнаяДатаНачалаУчета2_4 = ДатаОпции;
			ШаблонСообщения = НСтр("ru = 'Начало учета должно быть не раньше даты начала применения партионного учета версии 2.2: %1'");
			КомментарийМинДатаНачалаУчета2_4 = СтрШаблон(ШаблонСообщения, Формат(МинимальнаяДатаНачалаУчета2_4, "ДЛФ=D"));
		КонецЕсли; 
	КонецЕсли;

	Если НЕ Константы.ИспользоватьУчетПрочихДоходовРасходовРегл.Получить() Тогда
		ИспользоватьУчетПрочихДоходовРасходовРегл = Ложь;
		УсловияВключенияУчет2_4 = УсловияВключенияУчет2_4 + Символы.ПС
			+ НСтр("ru = '- включить опцию ""Прочие доходы и расходы в валюте регл. учета""
                    |(раздел ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"")'");
	КонецЕсли;

	Если НЕ Константы.ВестиУправленческийУчетОрганизаций.Получить() Тогда
		ВестиУправленческийУчетОрганизаций = Ложь;
		УсловияВключенияУчет2_4 = УсловияВключенияУчет2_4 + Символы.ПС
			+ НСтр("ru = '- включить опцию ""Управленческий учет по правилам международного финансового учета""
                    |(раздел ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"")'");
	Иначе
		ДатаОпции = Константы.ДатаНачалаВеденияУправленческогоУчетаОрганизаций.Получить();
		Если ЗначениеЗаполнено(ДатаОпции) И ДатаОпции > МинимальнаяДатаНачалаУчета2_4 Тогда
			МинимальнаяДатаНачалаУчета2_4 = ДатаОпции;
			ШаблонСообщения = НСтр("ru = 'Начало учета должно быть не раньше даты начала ведения управленческого учета по правилам международного финансового учета: %1'");
			КомментарийМинДатаНачалаУчета2_4 = СтрШаблон(ШаблонСообщения, Формат(МинимальнаяДатаНачалаУчета2_4, "ДЛФ=D"));
		КонецЕсли; 
	КонецЕсли;
	
	ВнеоборотныеАктивыЛокализация.УсловияПереходаНаУчет2_4(
		МинимальнаяДатаНачалаУчета2_4, 
		КомментарийМинДатаНачалаУчета2_4,
		МаксимальнаяДатаНачалаУчета2_4, 
		КомментарийМаксДатаНачалаУчета2_4);
	
	Если ЗначениеЗаполнено(УсловияВключенияУчет2_4) Тогда
		КомментарийУчет2_4 = НСтр("ru = 'Для включения возможности учета версии 2.4 необходимо:'") + УсловияВключенияУчет2_4;
	КонецЕсли; 
	
	ДоступностьУчета2_4 = Новый Структура;
	ДоступностьУчета2_4.Вставить("РежимПартионногоУчета", РежимПартионногоУчета);
	ДоступностьУчета2_4.Вставить("ВестиУправленческийУчетОрганизаций", ВестиУправленческийУчетОрганизаций);
	ДоступностьУчета2_4.Вставить("ИспользоватьУчетПрочихДоходовРасходовРегл", ИспользоватьУчетПрочихДоходовРасходовРегл);
	
	ДоступностьУчета2_4.Вставить("КомментарийУчет2_4", КомментарийУчет2_4);
	ДоступностьУчета2_4.Вставить("УсловияВключенияУчет2_4", УсловияВключенияУчет2_4);
	ДоступностьУчета2_4.Вставить("КомментарийМинДатаНачалаУчета2_4", КомментарийМинДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("КомментарийМаксДатаНачалаУчета2_4", КомментарийМаксДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("МинимальнаяДатаНачалаУчета2_4", МинимальнаяДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("МаксимальнаяДатаНачалаУчета2_4", МаксимальнаяДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("ДоступенУчет", НЕ ЗначениеЗаполнено(КомментарийУчет2_4));
	
	ВнеоборотныеАктивыЛокализация.ДополнитьУсловияПереходаНаУчет2_4(ДоступностьУчета2_4);
	
	Возврат ДоступностьУчета2_4;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетАмортизации

Функция ВыполнитьОчередьЗаданий(ОчередьЗаданийКРасчету)

	МаксимумЗаданий = ВнеоборотныеАктивыСлужебный.МаксимальноеКоличествоЗаданийДляРасчетаАмортизации();
	ВыполняетсяЗаданий = 0;
	
	ЕстьЗадания = Истина;
	ЕстьОшибки = Ложь;
	
	Пока ЕстьЗадания Цикл
		
		ЕстьЗадания = Ложь;
		
		Для каждого ОписаниеЗадания Из ОчередьЗаданийКРасчету Цикл
			
			Если ОписаниеЗадания.Статус = "" И ВыполняетсяЗаданий < МаксимумЗаданий Тогда
				
				// Запуск задания
				ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
				ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = ОписаниеЗадания.НаименованиеФоновогоЗадания;
				ПараметрыВыполненияВФоне.ЗапуститьНеВФоне = ОписаниеЗадания.ПараметрыЗадания.ВернутьПараметрыРасчета;
				
				РезультатВыполненияЗадания = ДлительныеОперации.ВыполнитьВФоне(
												ОписаниеЗадания.ПроцедураРасчета, 
												ОписаниеЗадания.ПараметрыЗадания, 
												ПараметрыВыполненияВФоне);
												
				ОписаниеЗадания.ОжидатьЗавершение = ПараметрыВыполненияВФоне.ОжидатьЗавершение;
				ОписаниеЗадания.Статус = РезультатВыполненияЗадания.Статус;
				ОписаниеЗадания.ИдентификаторЗадания = РезультатВыполненияЗадания.ИдентификаторЗадания;
				ОписаниеЗадания.АдресРезультата = РезультатВыполненияЗадания.АдресРезультата;
				
				Если ОписаниеЗадания.Статус = "Выполняется" Тогда
					ВыполняетсяЗаданий = ВыполняетсяЗаданий + 1;
				ИначеЕсли ОписаниеЗадания.Статус = "Ошибка" Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
				
			ИначеЕсли ОписаниеЗадания.Статус = "Выполняется" Тогда
				
				// Проверка выполнения
				
				Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ОписаниеЗадания.ИдентификаторЗадания);
				Если Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					
					Попытка
						Задание.ОжидатьЗавершения(ОписаниеЗадания.ОжидатьЗавершение);
						ОписаниеЗадания.Статус = "Выполнено";
						ВыполняетсяЗаданий = ВыполняетсяЗаданий - 1;
					Исключение
						// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
					КонецПопытки;
					
				ИначеЕсли Задание = Неопределено 
					ИЛИ Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
					ИЛИ Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					
					ЕстьОшибки = Истина;
					ОписаниеЗадания.Статус = "Ошибка";
					ВыполняетсяЗаданий = ВыполняетсяЗаданий - 1;
					
				ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					
					ОписаниеЗадания.Статус = "Выполнено";
					ВыполняетсяЗаданий = ВыполняетсяЗаданий - 1;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если ОписаниеЗадания.Статус = "Выполнено" 
				И ЭтоАдресВременногоХранилища(ОписаниеЗадания.АдресРезультата) Тогда
				
				Если НЕ ЕстьОшибки Тогда
					ЕстьОшибки = ПолучитьИзВременногоХранилища(ОписаниеЗадания.АдресРезультата);
				КонецЕсли;
				ОписаниеЗадания.АдресРезультата = Неопределено;
				
			КонецЕсли;
			
			Если ОписаниеЗадания.Статус = "Выполняется" ИЛИ ОписаниеЗадания.Статус = "" Тогда
				ЕстьЗадания = Истина;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция СоздатьОчередьЗаданий(ПараметрыРасчета, ИзмененныеПакеты)

	ОчередьЗаданийКРасчету = Новый ТаблицаЗначений;
	ОчередьЗаданийКРасчету.Колонки.Добавить("ИдентификаторЗадания", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("АдресРезультата", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("НаименованиеФоновогоЗадания", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("ПроцедураРасчета", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("ОжидатьЗавершение", Новый ОписаниеТипов("Число"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("ПараметрыЗадания");
	
	Если ИзмененныеПакеты <> Неопределено И ИзмененныеПакеты.Количество() <> 0 Тогда
		ПакетыАмортизации = ПараметрыРасчета.ПакетыАмортизации.Скопировать();
		Если ПараметрыРасчета.НомерПакета <> Неопределено Тогда
			СтруктураПоиска = Новый Структура("НомерПакета", ПараметрыРасчета.НомерПакета);
			СписокСтрок = ИзмененныеПакеты.НайтиСтроки(СтруктураПоиска);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокСтрок, ПакетыАмортизации);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИзмененныеПакеты, ПакетыАмортизации);
		КонецЕсли; 
	Иначе
		ПакетыАмортизации = ПараметрыРасчета.ПакетыАмортизации;
	КонецЕсли;
	
	ПакетыАмортизацииПоГоловнымОрганизациям = ПакетыАмортизацииПоГоловнымОрганизациям(ПакетыАмортизации);
	
	Для каждого ПакетГоловнойОрганизации Из ПакетыАмортизацииПоГоловнымОрганизациям Цикл
		
		НовоеЗадание = ОчередьЗаданийКРасчету.Добавить();
		
		Если ПакетГоловнойОрганизации.ЕстьОбособленныеПодразделения Тогда
			НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет амортизации по организации ""%1"" и ее филиалам.'");
		Иначе
			НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет амортизации по организации ""%1"".'");
		КонецЕсли; 
		
		НовоеЗадание.НаименованиеФоновогоЗадания = СтрШаблон(НаименованиеФоновогоЗадания, ПакетГоловнойОрганизации.ОрганизацияПредставление);
		НовоеЗадание.ПараметрыЗадания = ВнеоборотныеАктивы.НовыеПараметрыРасчетаАмортизации();
		НовоеЗадание.ПараметрыЗадания.Период = ПараметрыРасчета.Период;
		НовоеЗадание.ПараметрыЗадания.СписокОрганизаций = ПараметрыРасчета.СписокОрганизаций;
		НовоеЗадание.ПараметрыЗадания.НомерЗадания = ПараметрыРасчета.НомерЗадания;
		НовоеЗадание.ПараметрыЗадания.ЭтапРасчета = ПараметрыРасчета.ЭтапРасчета;
		НовоеЗадание.ПараметрыЗадания.Ссылка = ПараметрыРасчета.Ссылка;
		НовоеЗадание.ПараметрыЗадания.НомерПакета = ПараметрыРасчета.НомерПакета;
		НовоеЗадание.ПараметрыЗадания.Ответственный = ПараметрыРасчета.Ответственный;
		НовоеЗадание.ПараметрыЗадания.Комментарий = ПараметрыРасчета.Комментарий;
		НовоеЗадание.ПараметрыЗадания.ВернутьПараметрыРасчета = ПараметрыРасчета.ВернутьПараметрыРасчета;
		НовоеЗадание.ПараметрыЗадания.АдресПараметровРасчета = ПараметрыРасчета.АдресПараметровРасчета;
		
		Если ПараметрыРасчета.ОбъектыУчета = "ОС" Тогда
			НовоеЗадание.ПроцедураРасчета = "Документы.АмортизацияОС2_4.РассчитатьАмортизацию";
		Иначе
			НовоеЗадание.ПроцедураРасчета = "Документы.АмортизацияНМА2_4.РассчитатьАмортизацию";
		КонецЕсли;
		
		НовыйПакет = НовоеЗадание.ПараметрыЗадания.ПакетыАмортизации.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПакет, ПакетГоловнойОрганизации);
		
	КонецЦикла; 
	
	Возврат ОчередьЗаданийКРасчету;
	
КонецФункции

Функция ПакетыАмортизацииПоГоловнымОрганизациям(ПакетыАмортизации)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПакетыАмортизации.Организация КАК Организация,
	|	ПакетыАмортизации.НомерПакета КАК НомерПакета
	|ПОМЕСТИТЬ НомераПакетов
	|ИЗ
	|	&ПакетыАмортизации КАК ПакетыАмортизации
	|ГДЕ
	|	ПакетыАмортизации.НомерПакета <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	Если Константы.ПорядокУчетаВНАВУпрУчете.Получить() = Перечисления.ПорядокУчетаВНАВУпрУчете.ПоСтандартамМУ Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ГоловныеОрганизации.Ссылка, НомераПакетов.Организация) КАК Организация,
		|	ЕСТЬNULL(ГоловныеОрганизации.Представление, ТекущаяОрганизация.Представление) КАК ОрганизацияПредставление,
		|	ЕСТЬNULL(ГоловныеОрганизации.ЕстьОбособленныеПодразделения, ТекущаяОрганизация.ЕстьОбособленныеПодразделения) КАК ЕстьОбособленныеПодразделения,
		|	НомераПакетов.НомерПакета КАК НомерПакета
		|ИЗ
		|	НомераПакетов КАК НомераПакетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТекущаяОрганизация
		|		ПО (ТекущаяОрганизация.Ссылка = НомераПакетов.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ГоловныеОрганизации
		|		ПО (ГоловныеОрганизации.Ссылка = ТекущаяОрганизация.ГоловнаяОрганизация)";
	Иначе	
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	НомераПакетов.Организация КАК Организация,
		|	ТекущаяОрганизация.Представление КАК ОрганизацияПредставление,
		|	ЛОЖЬ КАК ЕстьОбособленныеПодразделения,
		|	НомераПакетов.НомерПакета КАК НомерПакета
		|ИЗ
		|	НомераПакетов КАК НомераПакетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТекущаяОрганизация
		|		ПО (ТекущаяОрганизация.Ссылка = НомераПакетов.Организация)";
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПакетыАмортизации", ПакетыАмортизации);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура УстановитьПараметрыЗапросаДляРасчетаАмортизации(Запрос, ПараметрыРасчета) Экспорт

	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("НачалоПредыдущегоМесяца", НачалоМесяца(НачалоМесяца(ПараметрыРасчета.Период)-1));
	Запрос.УстановитьПараметр("НачалоСледующегоМесяца", НачалоМесяца(КонецМесяца(ПараметрыРасчета.Период)+1));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", КонецМесяца(НачалоМесяца(ПараметрыРасчета.Период)-1));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяцаГраница", Новый Граница(КонецМесяца(НачалоМесяца(ПараметрыРасчета.Период)-1), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПозапрошлогоМесяца", НачалоМесяца(ДобавитьМесяц(ПараметрыРасчета.Период, -2)));
	Запрос.УстановитьПараметр("КонецПозапрошлогоМесяца", КонецМесяца(ДобавитьМесяц(ПараметрыРасчета.Период, -2)));
	Запрос.УстановитьПараметр("ПорядокУчетаВНАВУпрУчете", ПараметрыРасчета.ПорядокУчетаВНАВУпрУчете);
	Запрос.УстановитьПараметр("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	Запрос.УстановитьПараметр("МинимальнаяОстаточнаяСтоимость", ВнеоборотныеАктивыСлужебный.МинимальнаяОстаточнаяСтоимость());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС2_4"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4"));
	Запрос.УстановитьПараметр("ТипПринятиеКУчету", МассивТипов);

	Если ПараметрыРасчета.Свойство("ПакетыАмортизации") Тогда
		Запрос.УстановитьПараметр("ПакетыАмортизации", ПараметрыРасчета.ПакетыАмортизации);
	КонецЕсли;
	
	ВнеоборотныеАктивыЛокализация.ДополнитьПараметрыЗапросаДляРасчетаАмортизации(Запрос, ПараметрыРасчета);
	
КонецПроцедуры
 
#КонецОбласти

#Область РасчетСтоимостиВнеоборотныхАктивов 

Функция РассчитатьСтоимостьВнеоборотныхАктивов(Месяц, МенеджерВременныхТаблиц, ПараметрыОбработчика, МассивСсылок, Отказ)

	Если Месяц < ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4()
		ИЛИ НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Месяц) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаРасчетСтоимости();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("ТекущийДокумент", Неопределено);
	Запрос.УстановитьПараметр("МассивСсылок", ?(МассивСсылок <> Неопределено, МассивСсылок, Новый Массив));
	Запрос.УстановитьПараметр("ОтборПоДокументам", ?(МассивСсылок <> Неопределено, Истина, Ложь));
	
	Запрос.УстановитьПараметр(
		"ТипыДокументовПоКоторымРассчитываетсяСтоимость", 
		ТипыДокументовПоКоторымРассчитываетсяСтоимость());
	
	Запрос.УстановитьПараметр(
		"ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость", 
		ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость());
	
	УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос);
	
	Результат = Запрос.Выполнить();
	
	НакопленныеРасходы = Неопределено;
	ТаблицыУпрБаланса = Новый Структура;
	
	// Выборка документов по которым нужно рассчитать стоимость
	ВыборкаДокумент = Результат.Выбрать();
	КоличествоДанных = ВыборкаДокумент.Количество();
	Пока ВыборкаДокумент.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ЗаблокироватьДанныеПередРасчетомСтоимости(ВыборкаДокумент.Регистратор, ВыборкаДокумент.ВидОбъектовУчета);
			ТаблицыДляДвижений = СформироватьТаблицыДвиженийРасчетаСтоимости(ВыборкаДокумент, ПараметрыОбработчика, МенеджерВременныхТаблиц, Отказ);
			ЗаписатьДвиженияРасчетаСтоимости(ТаблицыДляДвижений, ВыборкаДокумент, ПараметрыОбработчика);
			
			Для Каждого Таблица Из ТаблицыДляДвижений Цикл
				ТаблицыУпрБаланса.Вставить(Таблица.Ключ);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если ПараметрыОбработчика <> Неопределено Тогда
				
				ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ПараметрыОбработчика.ПараметрыРасчета.Период,
					ВыборкаДокумент.Организация,
					ТекстОшибки,,
					ВыборкаДокумент.Регистратор,
					Отказ);
					
			КонецЕсли; 
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки; 
		
		Если ВыборкаДокумент.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства
			И ВыборкаДокумент.ФактическаяСтоимость Тогда
			
			Если НакопленныеРасходы <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицыДляДвижений.ТаблицаПрочиеРасходы, НакопленныеРасходы);
			Иначе
				НакопленныеРасходы = ТаблицыДляДвижений.ТаблицаПрочиеРасходы.Скопировать();
			КонецЕсли; 
			
			ОбновитьНакопленныеРасходы(НакопленныеРасходы, МенеджерВременныхТаблиц);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	ВнеоборотныеАктивыЛокализация.ПослеРасчетаСтоимостиВнеоборотныхАктивов(Запрос, МенеджерВременныхТаблиц, ТаблицыУпрБаланса);
	
	Возврат КоличествоДанных;
	
КонецФункции

Процедура ЗаблокироватьДанныеПередРасчетомСтоимости(Регистратор, ВидОбъектовУчета) Экспорт

	Блокировка = Новый БлокировкаДанных;
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4") Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПринятиеКУчетуОС2_4");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.МодернизацияОС2_4") Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.МодернизацияОС2_4");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4") Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПринятиеКУчетуНМА2_4");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
		
	КонецЕсли; 
	
	Если ВидОбъектовУчета = "ОсновныеСредства" Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СтоимостьОС.НаборЗаписей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
		
	Иначе
	
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СтоимостьНМА.НаборЗаписей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
		
	КонецЕсли; 
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасходы.НаборЗаписей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
	
	Блокировка.Заблокировать(); 
	
КонецПроцедуры

Функция СформироватьТаблицыДвиженийРасчетаСтоимости(ВыборкаДокумент, ПараметрыОбработчика, МенеджерВременныхТаблиц, Отказ)

	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаТекущиеРасходы(ТекстыЗапроса);
	ТекстЗапросаТаблицаДанныеДокумента(ТекстыЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", ВыборкаДокумент.Регистратор);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", ВыборкаДокумент.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", ВыборкаДокумент.ОтражатьВУпрУчете);
	
	Результат = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, Истина);
	
	// Таблицы для отладки
	// КэшГраниц
	// ПрочиеРасходыОстатки
	// ПрочиеРасходыДвижения
	// РасходыПоДокументам
	// НачалоКапитализацииРасходов
	// НакопленныеРасходы
	
	ПараметрыРасчетаСтоимости = ПараметрыРасчетаСтоимости();
	ЗаполнитьЗначенияСвойств(ПараметрыРасчетаСтоимости, ВыборкаДокумент);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.ДанныеДокумента, ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета);
	ТекущиеРасходы = РассчитатьРасходыПоДокументу(Результат.ТекущиеРасходы, ПараметрыРасчетаСтоимости);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекущиеРасходыПриформированииТаблицДвиженийРасчетаСтоимости(
		ВыборкаДокумент, Результат, ТекущиеРасходы);
	
	СоздатьВтРасчетСтоимости(ВыборкаДокумент, ТекущиеРасходы, МенеджерВременныхТаблиц);
	
	Если ПараметрыОбработчика <> Неопределено Тогда
		ЗарегистрироватьОшибкиРасчетаСтоимостиВНА(
		    ВыборкаДокумент,
			Результат.ДанныеДокумента, 
			ПараметрыОбработчика, 
			МенеджерВременныхТаблиц, 
			Отказ);
	КонецЕсли; 
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВыборкаДокумент.Регистратор);
	ТаблицыДляДвижений = МенеджерОбъекта.ТаблицыДвиженийРасчетаСтоимости(ВыборкаДокумент.Регистратор, МенеджерВременныхТаблиц);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТаблицыДвиженийРасчетаСтоимости(ВыборкаДокумент, ТаблицыДляДвижений);
	
	ИспользуемыеТаблицы = "КэшГраниц,ДанныеКРасчету,НакопленныеРасходы,РасходыПоДокументам";
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеТаблицы);
	
	Возврат ТаблицыДляДвижений;
	
КонецФункции

Процедура ЗаписатьДвиженияРасчетаСтоимости(ТаблицыДляДвижений, ВыборкаДокумент, ПараметрыОбработчика)

	Для Каждого Таблица Из ТаблицыДляДвижений Цикл
		
		ИмяРегистра = Таблица.Ключ;
		Если ВРег(Лев(ИмяРегистра,7))= "ТАБЛИЦА" Тогда
			ИмяРегистра = Прав(ИмяРегистра, СтрДлина(ИмяРегистра)-7);
		КонецЕсли;
		
		ИмяРегистра = ВРег(ИмяРегистра);
		
		Если ВнеоборотныеАктивыЛокализация.ЗаписьДвиженийРасчетаСтоимостиВыполняетсяВМодулеЛокализации(ИмяРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.РегистрыСведений.Найти(ИмяРегистра) <> Неопределено Тогда
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		Иначе
			НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		КонецЕсли;
		
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокумент.Регистратор);
		НаборЗаписей.Загрузить(Таблица.Значение);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	ВнеоборотныеАктивыЛокализация.ЗаписатьДвиженияРасчетаСтоимости(ТаблицыДляДвижений, ВыборкаДокумент, ПараметрыОбработчика);
	
КонецПроцедуры

Процедура СоздатьВтРасчетСтоимости(Выборка, ТекущиеРасходы, МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТекущиеРасходы.ОбъектУчета                 КАК ОбъектУчета,
	|	ТекущиеРасходы.СтатьяРасходов              КАК СтатьяРасходов,
	|	ТекущиеРасходы.АналитикаРасходов           КАК АналитикаРасходов,
	|	ТекущиеРасходы.Подразделение               КАК Подразделение,
	|	ТекущиеРасходы.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ТекущиеРасходы.Сумма                       КАК Сумма,
	|	ТекущиеРасходы.СуммаБезНДС                 КАК СуммаБезНДС,
	|	ТекущиеРасходы.СуммаУпр                    КАК СуммаУпр,
	|	ТекущиеРасходы.СуммаРегл                   КАК СуммаРегл,
	|	ТекущиеРасходы.ПостояннаяРазница           КАК ПостояннаяРазница,
	|	ТекущиеРасходы.ВременнаяРазница            КАК ВременнаяРазница,
	|	ТекущиеРасходы.КорректировкаСтоимостиНУ    КАК КорректировкаСтоимостиНУ,
	|	ТекущиеРасходы.СуммаЦФ                     КАК СуммаЦФ,
	|	ТекущиеРасходы.СуммаПРЦФ                   КАК СуммаПРЦФ,
	|	ТекущиеРасходы.СуммаВРЦФ                   КАК СуммаВРЦФ
	|ПОМЕСТИТЬ втТекущиеРасходы
	|ИЗ
	|	&ТекущиеРасходы КАК ТекущиеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеРасходы.СтатьяРасходов              КАК СтатьяРасходов,
	|	ТекущиеРасходы.АналитикаРасходов           КАК АналитикаРасходов,
	|	ТекущиеРасходы.Подразделение               КАК Подразделение,
	|	ТекущиеРасходы.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ТекущиеРасходы.Сумма                       КАК Сумма,
	|	ТекущиеРасходы.СуммаБезНДС                 КАК СуммаБезНДС,
	|	ТекущиеРасходы.СуммаУпр                    КАК СуммаУпр,
	|	ТекущиеРасходы.СуммаРегл                   КАК СуммаРегл,
	|	ТекущиеРасходы.ПостояннаяРазница           КАК ПостояннаяРазница,
	|	ТекущиеРасходы.ВременнаяРазница            КАК ВременнаяРазница
	|ПОМЕСТИТЬ втРасчетРасходов
	|ИЗ
	|	втТекущиеРасходы КАК ТекущиеРасходы";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаСоздатьВтРасчетСтоимости(Выборка, Запрос);
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТекущиеРасходы.ОбъектУчета               КАК ОбъектУчета,
		|	ТекущиеРасходы.СтатьяРасходов            КАК КорСтатьяРасходов,
		|	ТекущиеРасходы.АналитикаРасходов         КАК КорАналитикаРасходов,
		|	ТекущиеРасходы.Подразделение             КАК КорПодразделение,
		|	ТекущиеРасходы.НаправлениеДеятельности   КАК КорНаправлениеДеятельности,
		|
		|	ТекущиеРасходы.Сумма                     КАК Сумма,
		|	ТекущиеРасходы.СуммаУпр                  КАК Стоимость,
		|	ТекущиеРасходы.СуммаРегл                 КАК СтоимостьРегл,
		|
		|	0 КАК СтоимостьНУ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьВР,
		|	0 КАК СтоимостьЦФ,
		|	0 КАК СтоимостьНУЦФ,
		|	0 КАК СтоимостьПРЦФ,
		|	0 КАК СтоимостьВРЦФ,
		|	0 КАК КорПостояннаяРазница,
		|	0 КАК КорВременнаяРазница
		|
		|ПОМЕСТИТЬ ВтРасчетСтоимости
		|ИЗ
		|	втТекущиеРасходы КАК ТекущиеРасходы
		|ГДЕ
		|	ТекущиеРасходы.СуммаУпр <> 0
		|		ИЛИ ТекущиеРасходы.СуммаРегл <> 0";
		
	КонецЕсли;

	СписокЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
	Запрос.УстановитьПараметр("ТекущиеРасходы", ТекущиеРасходы);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Выборка.ХозяйственнаяОперация);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗарегистрироватьОшибкиРасчетаСтоимостиВНА(ВыборкаДокумент, ДанныеДокумента, ПараметрыОбработчика, МенеджерВременныхТаблиц, Отказ)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеДокумента.СтоимостьУУ КАК СтоимостьУУ,
	|	ДанныеДокумента.СтоимостьБУ КАК СтоимостьБУ,
	|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете
	|ПОМЕСТИТЬ втДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетСтоимости.ОбъектУчета КАК ОбъектУчета,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, 0)) + СУММА(ЕСТЬNULL(РасчетСтоимости.СтоимостьЦФ, 0)) КАК ФактическаяСтоимостьБУ,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.Стоимость, 0)) КАК ФактическаяСтоимостьУУ
	|ПОМЕСТИТЬ втВтРасчетСтоимостиСгруппированная
	|ИЗ
	|	ВтРасчетСтоимости КАК РасчетСтоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетСтоимости.ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОбъектУчета КАК ОбъектУчета,
	|	СУММА(ДанныеДокумента.СтоимостьБУ) КАК ПредварительнаяСтоимостьБУ,
	|	СУММА(ДанныеДокумента.СтоимостьУУ) КАК ПредварительнаяСтоимостьУУ,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьБУ, 0)) КАК ФактическаяСтоимостьБУ,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьУУ, 0)) КАК ФактическаяСтоимостьУУ
	|ИЗ
	|	втДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
	|		ПО (РасчетСтоимости.ОбъектУчета = ДанныеДокумента.ОбъектУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОбъектУчета,
	|	ДанныеДокумента.ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьУУ, 0)) < СУММА(ДанныеДокумента.СтоимостьУУ)
	|			И ДанныеДокумента.ОтражатьВУпрУчете
	|		ИЛИ СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьБУ, 0)) < СУММА(ДанныеДокумента.СтоимостьБУ)
	|			И ДанныеДокумента.ОтражатьВРеглУчете)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втВтРасчетСтоимостиСгруппированная";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетВнеоборотныхАктивовПоНаправлениямДеятельности") Тогда
		ТекстПоля = Символы.ПС + НСтр("ru = 'Возможно, неправильно заполнено направление деятельности.'");
	Иначе
		ТекстПоля = "";
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	
	Если ТипЗнч(ВыборкаДокумент.Регистратор) = Тип("ДокументСсылка.МодернизацияОС2_4") Тогда
		
		ШаблонСообщенияОС_БУ = НСтр("ru = 'У основного средства %1 предварительная сумма затрат (регл. учет) %2 (%3) не должна превышать фактическую %4 (%5).
	                              |Необходимо изменить предварительную сумму затрат в документе %6.'");
		
		ШаблонСообщенияОС_УУ = НСтр("ru = 'У основного средства %1 предварительная сумма затрат (упр. учет) %2 (%3) не должна превышать фактическую %4 (%5).
	                              |Необходимо изменить предварительную сумму затрат в документе %6.'");
		
		ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'У основного средства %1 отсутствуют фактические затраты на модернизацию (регл. учет).
	                              |Необходимо проверить документы, которыми были отражены затраты.'");
		
		ШаблонСообщенияОС_УУ_Нулевая = НСтр("ru = 'У основного средства %1 отсутствуют фактические затраты на модернизацию (упр. учет).
	                              |Необходимо проверить заполнение в документах, которыми были отражены затраты.'")
									+ ТекстПоля;
	Иначе
		
		ШаблонСообщенияОС_БУ = НСтр("ru = 'В документе для основного средства %1 указана стоимость (регл. учет) %2 (%3), превышающая фактическую %4 (%5).
	                              |Необходимо изменить стоимость в документе %6.'");
		
		ШаблонСообщенияОС_УУ = НСтр("ru = 'В документе для основного средства %1 указана стоимость (упр. учет) %2 (%3), превышающая фактическую %4 (%5).
	                              |Необходимо изменить стоимость в документе %6.'");
		
		ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'По основному средству %1 отсутствуют фактические затраты (регл. учет), связанные с его приобретением.
	                              |Необходимо проверить документы, которыми были отражены затраты.'")
									+ ТекстПоля;
		
		ШаблонСообщенияОС_УУ_Нулевая = НСтр("ru = 'По основному средству %1 отсутствуют фактические затраты (упр. учет), связанные с его приобретением.
	                              |Необходимо проверить документы, которыми были отражены затраты.'")
									+ ТекстПоля;
									
	КонецЕсли;
	
	ШаблонСообщенияНМА_БУ = НСтр("ru = 'У нематериального актива %1 предварительная стоимость (регл. учет) %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную стоимость в документе %6.'");
	
	ШаблонСообщенияНМА_УУ = НСтр("ru = 'У нематериального актива %1 предварительная стоимость (упр. учет) %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную стоимость в документе %6.'");
	
	ШаблонСообщенияНМА_БУ_Нулевая = НСтр("ru = 'По нематериальному активу %1 отсутствуют фактические затраты (регл. учет), связанные с его приобретением.
                              |Необходимо проверить документы, которыми были отражены затраты.'")
							+ ТекстПоля;;
	
	ШаблонСообщенияНМА_УУ_Нулевая = НСтр("ru = 'По нематериальному активу %1 отсутствуют фактические затраты (упр. учет), связанные с его приобретением.
                              |Необходимо проверить документы, которыми были отражены затраты.'")
							+ ТекстПоля;
		
	ШаблонСообщенияНИОКР_БУ = НСтр("ru = 'Сумма расходов на НИОКР (регл. учет) %1 %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную сумму расходов %6.'");
	
	ШаблонСообщенияНИОКР_УУ = НСтр("ru = 'Сумма расходов на НИОКР (упр. учет) %1 %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную сумму расходов %6.'");
	
	ШаблонСообщенияНИОКР_БУ_Нулевая = НСтр("ru = 'По расходам на НИОКР %1 отсутствуют фактические суммы расходов (регл. учет).
                              |Необходимо проверить документы, которыми были отражены расходы.'")
							+ ТекстПоля;
	
	ШаблонСообщенияНИОКР_УУ_Нулевая = НСтр("ru = 'По расходам на НИОКР %1 отсутствуют фактические суммы расходов (упр. учет).
                              |Необходимо проверить документы, которыми были отражены расходы.'")
							+ ТекстПоля;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.ОбъектУчета) = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
			ТекстОшибки_БУ = ШаблонСообщенияОС_БУ;
			ТекстОшибки_УУ = ШаблонСообщенияОС_УУ;
			ТекстОшибки_БУ_Нулевая = ШаблонСообщенияОС_БУ_Нулевая;
			ТекстОшибки_УУ_Нулевая = ШаблонСообщенияОС_УУ_Нулевая;
		ИначеЕсли ТипЗнч(Выборка.ОбъектУчета) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			ВидОбъектаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ОбъектУчета, "ВидОбъектаУчета");
			Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
				ТекстОшибки_БУ = ШаблонСообщенияНМА_БУ;
				ТекстОшибки_УУ = ШаблонСообщенияНМА_УУ;
				ТекстОшибки_БУ_Нулевая = ШаблонСообщенияНМА_БУ_Нулевая;
				ТекстОшибки_УУ_Нулевая = ШаблонСообщенияНМА_УУ_Нулевая;
			Иначе
				ТекстОшибки_БУ = ШаблонСообщенияНИОКР_БУ;
				ТекстОшибки_УУ = ШаблонСообщенияНИОКР_УУ;
				ТекстОшибки_БУ_Нулевая = ШаблонСообщенияНИОКР_БУ_Нулевая;
				ТекстОшибки_УУ_Нулевая = ШаблонСообщенияНИОКР_УУ_Нулевая;
			КонецЕсли; 
		КонецЕсли; 
		
		Если Выборка.ПредварительнаяСтоимостьБУ > Выборка.ФактическаяСтоимостьБУ Тогда
			
			Если Выборка.ФактическаяСтоимостьБУ = 0 Тогда
				ТекстОшибки = СтрШаблон(ТекстОшибки_БУ_Нулевая, Выборка.ОбъектУчета);
			Иначе	
				ТекстОшибки = СтрШаблон(ТекстОшибки_БУ, 
				                        Выборка.ОбъектУчета,
										Формат(Выборка.ПредварительнаяСтоимостьБУ, "ЧДЦ=2; ЧН=0"),
										ВалютаРегламентированногоУчета,
										Формат(Выборка.ФактическаяСтоимостьБУ, "ЧДЦ=2; ЧН=0"),
										ВалютаРегламентированногоУчета,
										ВыборкаДокумент.Регистратор);
			КонецЕсли; 
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код, 
				ПараметрыОбработчика.ПараметрыРасчета.Период,
				ВыборкаДокумент.Организация,
				ТекстОшибки,,
				ВыборкаДокумент.Регистратор,
				Отказ);
				
		КонецЕсли; 
	
		Если Выборка.ПредварительнаяСтоимостьУУ > Выборка.ФактическаяСтоимостьУУ Тогда
			
			Если Выборка.ФактическаяСтоимостьУУ = 0 Тогда
				ТекстОшибки = СтрШаблон(ТекстОшибки_УУ_Нулевая, Выборка.ОбъектУчета);
			Иначе	
				ТекстОшибки = СтрШаблон(ТекстОшибки_УУ, 
				                        Выборка.ОбъектУчета,
										Формат(Выборка.ПредварительнаяСтоимостьУУ, "ЧДЦ=2; ЧН=0"),
										ВалютаУправленческогоУчета,
										Формат(Выборка.ФактическаяСтоимостьУУ, "ЧДЦ=2; ЧН=0"),
										ВалютаУправленческогоУчета,
										ВыборкаДокумент.Регистратор);
			КонецЕсли; 
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код, 
				ПараметрыОбработчика.ПараметрыРасчета.Период,
				ВыборкаДокумент.Организация,
				ТекстОшибки,,
				ВыборкаДокумент.Регистратор,
				Отказ);
				
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНакопленныеРасходы(НакопленныеРасходы, МенеджерВременныхТаблиц)

	Если НакопленныеРасходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"УНИЧТОЖИТЬ НакопленныеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыПоДокументам.Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов,
	|	РасходыПоДокументам.Сумма,
	|	РасходыПоДокументам.СуммаУпр,
	|	РасходыПоДокументам.СуммаБезНДС,
	|	РасходыПоДокументам.СуммаРегл,
	|	РасходыПоДокументам.ПостояннаяРазница,
	|	РасходыПоДокументам.ВременнаяРазница
	|ПОМЕСТИТЬ НакопленныеРасходы
	|ИЗ
	|	&НакопленныеРасходы КАК РасходыПоДокументам
	|ГДЕ
	|	РасходыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
	
	НакопленныеРасходы.Свернуть(
		"Организация,НаправлениеДеятельности,Подразделение,СтатьяРасходов,АналитикаРасходов,ВидДвижения", 
		"Сумма,СуммаУпр,СуммаБезНДС,СуммаРегл,ПостояннаяРазница,ВременнаяРазница");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НакопленныеРасходы", НакопленныеРасходы);
	
	Запрос.Выполнить();
	
КонецПроцедуры
 
Функция ТекстЗапросаРасчетСтоимости()

	СписокЗапросов = Новый Массив;
	
	// Содержит документы и объекты учета, по которым требуется рассчитать стоимость.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ОсновныеСредства""                                     КАК ВидОбъектовУчета,
	|	НАЧАЛОПЕРИОДА(ДанныеКРасчету.Период, ДЕНЬ)               КАК Период,
	|	ДанныеКРасчету.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	ДанныеКРасчету.ВидАналитикиКапитализацииРасходов         КАК ВидАналитикиКапитализацииРасходов,
	|	ВЫБОР
	|		КОГДА НЕ ПринятиеКУчетуОС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПринятиеКУчетуОС.ЧастичныйВводВЭксплуатацию 
	|					ИЛИ ПринятиеКУчетуОС.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)
	|					ИЛИ ПринятиеКУчетуОС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации)
	|					ИЛИ ПринятиеКУчетуОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                    КАК ФактическаяСтоимость,
	|	ДанныеКРасчету.ВариантПримененияЦелевогоФинансирования   КАК ВариантПримененияЦелевогоФинансирования,
	|	ДанныеКРасчету.Регистратор                               КАК Регистратор,
	|	ДанныеКРасчету.Организация                               КАК Организация,
	|	ДанныеКРасчету.НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	ВсеДанныеКРасчету.АналитикаКапитализацииРасходов         КАК АналитикаКапитализацииРасходов,
	|	ДанныеКРасчету.ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	ДанныеКРасчету.ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете
	|ПОМЕСТИТЬ ДанныеКРасчету
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК ДанныеКРасчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК ВсеДанныеКРасчету
	|		ПО ВсеДанныеКРасчету.Регистратор = ДанныеКРасчету.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4 КАК ПринятиеКУчетуОС
	|		ПО ПринятиеКУчетуОС.Ссылка = ДанныеКРасчету.Регистратор
	|ГДЕ
	|	ДанныеКРасчету.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеКРасчету.Активность
	|	И ДанныеКРасчету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|	И ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И ДанныеКРасчету.ХозяйственнаяОперация В (&ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость)
	|
	|	И (ДанныеКРасчету.Регистратор В (&МассивСсылок)
	|		ИЛИ НЕ &ОтборПоДокументам)
	|
	|	И (ДанныеКРасчету.Организация, ДанныеКРасчету.АналитикаКапитализацииРасходов) В
	|			(ВЫБРАТЬ
	|				КэшГраниц.Организация,
	|				КэшГраниц.ОбъектУчета
	|			ИЗ
	|				КэшГраниц)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""НематериальныеАктивы""                                 КАК ВидОбъектовУчета,
	|	НАЧАЛОПЕРИОДА(ДанныеКРасчету.Период, ДЕНЬ)               КАК Период,
	|	ДанныеКРасчету.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР) КАК ВидАналитикиКапитализацииРасходов,
	|	ЛОЖЬ                                                     КАК ФактическаяСтоимость,
	|	ДанныеКРасчету.ВариантПримененияЦелевогоФинансирования   КАК ВариантПримененияЦелевогоФинансирования,
	|	ДанныеКРасчету.Регистратор                               КАК Регистратор,
	|	ДанныеКРасчету.Организация                               КАК Организация,
	|	ДанныеКРасчету.НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	ВсеДанныеКРасчету.НематериальныйАктив                    КАК АналитикаКапитализацииРасходов,
	|	ДанныеКРасчету.ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	ДанныеКРасчету.ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК ДанныеКРасчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК ВсеДанныеКРасчету
	|		ПО ВсеДанныеКРасчету.Регистратор = ДанныеКРасчету.Регистратор
	|ГДЕ
	|	ДанныеКРасчету.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеКРасчету.Активность
	|	И ДанныеКРасчету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|	И ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И ДанныеКРасчету.ХозяйственнаяОперация В (&ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость)
	|
	|	И (ДанныеКРасчету.Регистратор В (&МассивСсылок)
	|		ИЛИ НЕ &ОтборПоДокументам)
	|
	|	И (ДанныеКРасчету.Организация, ДанныеКРасчету.НематериальныйАктив) В
	|			(ВЫБРАТЬ
	|				КэшГраниц.Организация,
	|				КэшГраниц.ОбъектУчета
	|			ИЗ
	|				КэшГраниц)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НаправлениеДеятельности,
	|	АналитикаКапитализацииРасходов";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	// Содержит список расходов накопленных на момент каждого документа.
	ТекстЗапросаРасходыПоДокументам(СписокЗапросов);
	
	// Используется для обхода документов и формирования нужных движений. Должен быть последним.
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаВыборкиДанныхДляРасчетаСтоимости();
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеКРасчету.Организация                               КАК Организация,
		|	ДанныеКРасчету.ВидОбъектовУчета                          КАК ВидОбъектовУчета,
		|	ДанныеКРасчету.Регистратор                               КАК Регистратор,
		|	ДанныеКРасчету.Период                                    КАК Период,
		|	ДанныеКРасчету.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
		|	ДанныеКРасчету.ФактическаяСтоимость                      КАК ФактическаяСтоимость,
		|	ДанныеКРасчету.ВидАналитикиКапитализацииРасходов         КАК ВидАналитикиКапитализацииРасходов,
		|	ДанныеКРасчету.ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
		|	ДанныеКРасчету.ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете
		|ИЗ
		|	ДанныеКРасчету КАК ДанныеКРасчету
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Регистратор";
		
	КонецЕсли; 
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаДанныеДокумента(СписокЗапросов)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектУчета,
	|	ТаблицаОС.СтоимостьУУ,
	|	ТаблицаОС.СтоимостьБУ,
	|	ТаблицаОС.СтоимостьНУ,
	|	ТаблицаОС.СуммаЦелевыхСредств,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьНУ,
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете
	|	
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО ТаблицаОС.Ссылка = ПервоначальныеСведенияОС.Регистратор
	|			И ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.СтоимостьУУ,
	|	ТаблицаОС.СтоимостьБУ,
	|	0,
	|	ТаблицаОС.СуммаЦелевыхСредств,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьНУ,
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете
	|ИЗ
	|	Документ.МодернизацияОС2_4.ОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО ТаблицаОС.Ссылка = ПервоначальныеСведенияОС.Регистратор
	|			И ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Регистратор	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОС.НематериальныйАктив,
	|	ТаблицаОС.ПервоначальнаяСтоимостьУУ,
	|	ТаблицаОС.ПервоначальнаяСтоимостьБУ,
	|	0,
	|	ТаблицаОС.СуммаЦелевыхСредств,
	|	0,
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА2_4 КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Регистратор";	
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ДанныеДокумента");
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаТекущиеРасходы(СписокЗапросов)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходыПоДокументам.Организация                КАК Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение              КАК Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов             КАК СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов          КАК АналитикаРасходов,
	|	СУММА(РасходыПоДокументам.Сумма             - ЕСТЬNULL(НакопленныеРасходы.Сумма, 0))               КАК Сумма,
	|	СУММА(РасходыПоДокументам.СуммаУпр          - ЕСТЬNULL(НакопленныеРасходы.СуммаУпр, 0))            КАК СуммаУпр,
	|	СУММА(РасходыПоДокументам.СуммаБезНДС       - ЕСТЬNULL(НакопленныеРасходы.СуммаБезНДС, 0))         КАК СуммаБезНДС,
	|	СУММА(РасходыПоДокументам.СуммаРегл         - ЕСТЬNULL(НакопленныеРасходы.СуммаРегл, 0))           КАК СуммаРегл,
	|	СУММА(РасходыПоДокументам.ПостояннаяРазница - ЕСТЬNULL(НакопленныеРасходы.ПостояннаяРазница, 0))   КАК ПостояннаяРазница,
	|	СУММА(РасходыПоДокументам.ВременнаяРазница  - ЕСТЬNULL(НакопленныеРасходы.ВременнаяРазница, 0))    КАК ВременнаяРазница
	|ИЗ
	|	РасходыПоДокументам КАК РасходыПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ НакопленныеРасходы КАК НакопленныеРасходы
	|		ПО НакопленныеРасходы.Организация = РасходыПоДокументам.Организация
	|			И НакопленныеРасходы.НаправлениеДеятельности = РасходыПоДокументам.НаправлениеДеятельности
	|			И НакопленныеРасходы.Подразделение = РасходыПоДокументам.Подразделение
	|			И НакопленныеРасходы.СтатьяРасходов = РасходыПоДокументам.СтатьяРасходов
	|			И НакопленныеРасходы.АналитикаРасходов = РасходыПоДокументам.АналитикаРасходов
	|ГДЕ
	|	РасходыПоДокументам.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоДокументам.Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ТекущиеРасходы");
	
КонецПроцедуры

Функция СоздатьМассивКоэффициентов(Таблица, ИмяКолонки)

	МассивКоэффициентов = Таблица.ВыгрузитьКолонку(ИмяКолонки);
	
	Если Таблица.Итог(ИмяКолонки) = 0 Тогда
		Для Сч = 0 По МассивКоэффициентов.ВГраница() Цикл
			МассивКоэффициентов[Сч] = 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивКоэффициентов;
	
КонецФункции

Процедура АктуализироватьДвиженияПослеРасчетаСтоимости(Месяц, МенеджерВременныхТаблиц, ПараметрыОбработчика, Отказ)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.АналитикаКапитализацииРасходов КАК ОбъектУчета
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|ГДЕ
	|	ДанныеКРасчету.ВидАналитикиКапитализацииРасходов В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Организация,
	|	СтоимостьОС.ОсновноеСредство
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|		ПО (СтоимостьОС.Регистратор = ДанныеКРасчету.Регистратор)
	|ГДЕ
	|	ДанныеКРасчету.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДанныеКРасчету = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроцедуры = ПараметрыОтложенногоФормированияДвижений();
	ПараметрыПроцедуры.Месяц = Месяц;
	ПараметрыПроцедуры.ИмяТаблицыЗаданий = "ДанныеКФормированиюДвижений";
	ПараметрыПроцедуры.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыПроцедуры.Организация = ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций;
	ПараметрыПроцедуры.ЭтапРасчета = ПараметрыОбработчика.ДанныеЭтапа.Код;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ ДанныеКФормированиюДвижений
	|ИЗ
	|	&ДанныеКРасчету КАК ДанныеКРасчету";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеКРасчету", ДанныеКРасчету);
	Запрос.МенеджерВременныхТаблиц = ПараметрыПроцедуры.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ОтложенноеФормированиеДвижений(ПараметрыПроцедуры, Неопределено, Отказ);
	
КонецПроцедуры

Функция ИмяСлужебногоДополнительногоСвойстваОбъекта() Экспорт

	Возврат "РасчетСтоимостиВнеоборотныхАктивов";

КонецФункции

Функция ПолучитьРаспределениеСтоимости(Стоимость, СуммаОстаток, МассивКоэффициентовСумма)
	
	Если Стоимость < СуммаОстаток Тогда
		РаспределениеСумма = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
									Стоимость, 
									МассивКоэффициентовСумма);
	Иначе
		РаспределениеСумма = МассивКоэффициентовСумма;
	КонецЕсли;
	
	Возврат РаспределениеСумма;
	
КонецФункции

#КонецОбласти

#Область ОтложенноеФормированиеДвижений

// Выполняет формирование движений по основным средствам при закрытии месяца.
//
// Параметры:
//  Месяц		 - Дата - Месяц в котором выполняется формирование движений.
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - Содержит таблицу КэшГраниц, полученную с помощью ЗаданияКРасчетуЗаМесяц().
//  Отказ		 - Булево - (возвращаемое значение) Истина, если возникли ошибки.
//
Функция ОтложенноеФормированиеДвижений(ПараметрыВыполнения, МассивСсылок, Отказ = Ложь)

	УстановитьПривилегированныйРежим(Истина);
	
	Месяц = ПараметрыВыполнения.Месяц;
	МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапросаОтложенногоФормированияДвижений(ТекстыЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_КэшГраниц", ПараметрыВыполнения.ИмяТаблицыЗаданий);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("МассивСсылок", ?(МассивСсылок <> Неопределено, МассивСсылок, Новый Массив));
	Запрос.УстановитьПараметр("ОтборПоДокументам", ?(МассивСсылок <> Неопределено, Истина, Ложь));
	УстановитьПараметрыЗапросаСодержащегоТекстыЗапросаОтложенногоФормированияДвижений(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблицы для отладки:
	// - ВТ_СтоимостьВНА
	// - ВТ_АмортизацияВНА
	// - СтоимостьВНА_Движения
	
	Выборка = РезультатЗапроса.Выбрать();
	КоличествоДанных = Выборка.Количество();
	ПредыдущийРегистратор = Неопределено;
	
	ИспользуемыеВТ = "КэшГраниц,ДанныеКРасчету,ВТ_СтоимостьВНА,ВТ_АмортизацияВНА";
	
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);
		
		ОбновитьТаблицыОтложенногоФормированияДвижений(ПредыдущийРегистратор, МенеджерВременныхТаблиц);
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Ссылка);
		
		НачатьТранзакцию();
		Попытка
			
			ТаблицыДляДвижений = МенеджерОбъекта.ТаблицыОтложенногоФормированияДвижений(Выборка.Ссылка, МенеджерВременныхТаблиц);
			
			// Запись движений
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
			ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
			ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументОбъект.Ссылка, ДополнительныеСвойства);
			ДополнительныеСвойства.ТаблицыДляДвижений = ТаблицыДляДвижений;
			
			ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, ДокументОбъект.Движения, Истина);
			ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ДокументОбъект);
			
			ВнеоборотныеАктивыЛокализация.ПриВыполненииОтложенногоФормированияДвижений(
				Выборка, ПараметрыВыполнения, ТаблицыДляДвижений);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = НСтр("ru = 'Не удалось сформировать движения по документу %1, по причине:
                                |%2'");
			
			ТекстОшибки = СтрШаблон(ТекстОшибки, 
				Строка(Выборка.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		ПредыдущийРегистратор = Выборка.Ссылка;
		
	КонецЦикла;
	
	ПроверитьОтложенноеФормированиеДвижений(ПараметрыВыполнения, Отказ);
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ДанныеКРасчету,ВТ_СтоимостьВНА,ВТ_АмортизацияВНА");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КоличествоДанных;
	
КонецФункции

Процедура ПроверитьОтложенноеФормированиеДвижений(ПараметрыВыполнения, Отказ)

	Если НЕ ЗначениеЗаполнено(ПараметрыВыполнения.ЭтапРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыВыполнения.Месяц));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыВыполнения.Месяц));
	
	#Область НеУказанаСтатьяРасходовВРеализации
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаДокумента,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ТаблицаРасходы.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ЕСТЬNULL(ТаблицаРасходы.НомерСтроки, 0) КАК НомерСтроки
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = ДанныеКРасчету.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов.Расходы КАК ТаблицаРасходы
	|		ПО (ТаблицаРасходы.Ссылка = ДанныеКРасчету.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьВНА
	|		ПО (СтоимостьВНА.Ссылка = ТаблицаРасходы.Ссылка)
	|			И (СтоимостьВНА.ОбъектУчета = ТаблицаРасходы.ВнеоборотныйАктив)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) = ТИП(Документ.РеализацияУслугПрочихАктивов)
	|	И ТаблицаРасходы.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	И НЕ СтоимостьВНА.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеПроблемы = НСтр("ru = 'В документе Реализация услуг и прочих активов №%1 от %2 для внеоборотного актива %3 необходимо указать статью расходов, на которую будет списана стоимость.'");
		ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
									Выборка.НомерДокумента, 
									Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
									Выборка.ВнеоборотныйАктив);
		
		ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыВыполнения.ЭтапРасчета, 
			ПараметрыВыполнения.Месяц,
			Выборка.Организация,
			ОписаниеПроблемы,,
			Выборка.Ссылка, 
			Отказ);
				
	КонецЦикла; 
	
	#КонецОбласти
	
	#Область СтоимостьНовыхОСПревышаетСтоимостьИсходного
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_РазукомплектацияОС
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) = ТИП(Документ.РазукомплектацияОС)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(ПараметрыАмортизацииОСУУ.Период) КАК Период
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСУУ_Период
	|ИЗ
	|	ВТ_РазукомплектацияОС КАК ДанныеКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = ДанныеКРасчету.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ КАК ПараметрыАмортизацииОСУУ
	|		ПО ПараметрыАмортизацииОСУУ.ОсновноеСредство = ТаблицаДокумента.ОсновноеСредство
	|			И ПараметрыАмортизацииОСУУ.Организация = ТаблицаДокумента.Организация
	|			И ПараметрыАмортизацииОСУУ.Период < ТаблицаДокумента.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСУУ_Период.Ссылка КАК Ссылка,
	|	ПараметрыАмортизацииОСУУ_Период.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСУУ
	|ИЗ
	|	ПараметрыАмортизацииОСУУ_Период КАК ПараметрыАмортизацииОСУУ_Период
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ КАК ПараметрыАмортизацииОСУУ
	|		ПО ПараметрыАмортизацииОСУУ.ОсновноеСредство = ПараметрыАмортизацииОСУУ_Период.ОсновноеСредство
	|			И ПараметрыАмортизацииОСУУ.Организация = ПараметрыАмортизацииОСУУ_Период.Организация
	|			И ПараметрыАмортизацииОСУУ.Период = ПараметрыАмортизацииОСУУ_Период.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаДокумента,
	|	СУММА(ТаблицаОС.СтоимостьУУ) КАК ОбщаяСтоимостьУУ,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.Стоимость, 0)) - МАКСИМУМ(ЕСТЬNULL(ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость, 0)) КАК ИсходнаяСтоимостьУУ,
	|	СУММА(ТаблицаОС.СтоимостьБУ) КАК ОбщаяСтоимостьБУ,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьЦФ, 0)) КАК ИсходнаяСтоимостьБУ,
	|	СУММА(ТаблицаОС.СтоимостьНУ) КАК ОбщаяСтоимостьНУ,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьНУ, 0) + ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьНУЦФ, 0)) КАК ИсходнаяСтоимостьНУ
	|ИЗ
	|	ВТ_РазукомплектацияОС КАК ДанныеКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = ДанныеКРасчету.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС.ОС КАК ТаблицаОС
	|		ПО (ТаблицаОС.Ссылка = ТаблицаДокумента.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК ВТ_СтоимостьВНА
	|		ПО (ВТ_СтоимостьВНА.ОбъектУчета = ТаблицаДокумента.ОсновноеСредство)
	|			И (ВТ_СтоимостьВНА.Ссылка = ТаблицаДокумента.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСУУ КАК ПараметрыАмортизацииОСУУ
	|		ПО (ПараметрыАмортизацииОСУУ.ОсновноеСредство = ТаблицаДокумента.ОсновноеСредство)
	|			И (ПараметрыАмортизацииОСУУ.Ссылка = ТаблицаДокумента.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Номер,
	|	ТаблицаДокумента.Дата
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаОС.СтоимостьУУ) >= (МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.Стоимость, 0)) - МАКСИМУМ(ЕСТЬNULL(ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость, 0)))
	|		ИЛИ СУММА(ТаблицаОС.СтоимостьБУ) >= МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьЦФ, 0))
	|		ИЛИ СУММА(ТаблицаОС.СтоимостьНУ) >= МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьНУ, 0) + ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьНУЦФ, 0)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РазукомплектацияОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыАмортизацииОСУУ_Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыАмортизацииОСУУ
	|";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ВалютаРегл = Строка(Константы.ВалютаРегламентированногоУчета.Получить());
	ВалютаУпр = Строка(Константы.ВалютаУправленческогоУчета.Получить());
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОбщаяСтоимостьУУ >= Выборка.ИсходнаяСтоимостьУУ
			И Выборка.ОбщаяСтоимостьУУ <> 0 Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'В документе Разукомплектация ОС №%1 от %2 общая стоимость, принимаемых к учету ОС в управленческом учете (%3 %4) должна быть меньше стоимости исходного ОС (%5 %6).'");
			
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
										Выборка.НомерДокумента, 
										Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
										Выборка.ОбщаяСтоимостьУУ,
										ВалютаУпр,
										Выборка.ИсходнаяСтоимостьУУ,
										ВалютаУпр);
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыВыполнения.ЭтапРасчета, 
				ПараметрыВыполнения.Месяц,
				Выборка.Организация,
				ОписаниеПроблемы,,
				Выборка.Ссылка, 
				Отказ);
			
		КонецЕсли; 
				
		Если Выборка.ОбщаяСтоимостьБУ >= Выборка.ИсходнаяСтоимостьБУ
			И Выборка.ОбщаяСтоимостьБУ <> 0 Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'В документе Разукомплектация ОС №%1 от %2 общая стоимость, принимаемых к учету ОС в бухгалтерском учете (%3 %4) должна быть меньше стоимости исходного ОС (%5 %6).'");
			
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
										Выборка.НомерДокумента, 
										Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
										Выборка.ОбщаяСтоимостьБУ,
										ВалютаРегл,
										Выборка.ИсходнаяСтоимостьБУ,
										ВалютаРегл);
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыВыполнения.ЭтапРасчета, 
				ПараметрыВыполнения.Месяц,
				Выборка.Организация,
				ОписаниеПроблемы,,
				Выборка.Ссылка, 
				Отказ);
			
		КонецЕсли; 
				
		Если Выборка.ОбщаяСтоимостьНУ >= Выборка.ИсходнаяСтоимостьНУ
			И Выборка.ОбщаяСтоимостьНУ <> 0 Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'В документе Разукомплектация ОС №%1 от %2 общая стоимость, принимаемых к учету ОС в налоговом учете (%3 %4) должна быть меньше стоимости исходного ОС (%5 %6).'");
			
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
										Выборка.НомерДокумента, 
										Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
										Выборка.ОбщаяСтоимостьНУ,
										ВалютаРегл,
										Выборка.ИсходнаяСтоимостьНУ,
										ВалютаРегл);
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыВыполнения.ЭтапРасчета, 
				ПараметрыВыполнения.Месяц,
				Выборка.Организация,
				ОписаниеПроблемы,,
				Выборка.Ссылка, 
				Отказ);
			
		КонецЕсли; 
				
	КонецЦикла; 
	#КонецОбласти
	
	ВнеоборотныеАктивыЛокализация.ПроверитьОтложенноеФормированиеДвижений(ПараметрыВыполнения, Отказ);
	
КонецПроцедуры

Функция ПараметрыОтложенногоФормированияДвижений()

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Месяц", Неопределено);
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Неопределено);
	ПараметрыРасчета.Вставить("ИмяТаблицыЗаданий", "КэшГраниц");
	ПараметрыРасчета.Вставить("Организация", Неопределено);
	ПараметрыРасчета.Вставить("ЭтапРасчета", Неопределено);
	ПараметрыРасчета.Вставить("ВернутьДокументыКОтражению", Истина);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Процедура ТекстыЗапросаОтложенногоФормированияДвижений(ТекстыЗапроса)

	#Область ДанныеКРасчету
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ДанныеКРасчету.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ ДанныеКРасчету
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыПоОС.Ссылка КАК Ссылка,
	|		ДокументыПоОС.Дата КАК Дата,
	|		ДокументыПоОС.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ДокументыПоОС.Организация КАК Организация,
	|		ДокументыПоОС.ОсновноеСредство КАК ОбъектУчета
	|	ИЗ
	|		РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|	ГДЕ
	|		НЕ ДокументыПоОС.ДополнительнаяЗапись
	|		И ДокументыПоОС.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыПоОС.Ссылка КАК Ссылка
	|				ИЗ
	|					РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|				ГДЕ
	|					ДокументыПоОС.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					И ДокументыПоОС.Проведен
	|					И НЕ ДокументыПоОС.ДополнительнаяЗапись
	|					И ДокументыПоОС.ТипСсылки В (&ТипыДокументов)
	|					И (ДокументыПоОС.Ссылка В (&МассивСсылок)
	|						ИЛИ НЕ &ОтборПоДокументам)
	|					И (ДокументыПоОС.Организация, ДокументыПоОС.ОсновноеСредство) В
	|						(ВЫБРАТЬ
	|							КэшГраниц.Организация,
	|							КэшГраниц.ОбъектУчета
	|						ИЗ
	|							ВТ_КэшГраниц КАК КэшГраниц))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДокументыПоНМА.Ссылка,
	|		ДокументыПоНМА.Дата,
	|		ДокументыПоНМА.ХозяйственнаяОперация,
	|		ДокументыПоНМА.Организация,
	|		ДокументыПоНМА.НематериальныйАктив
	|	ИЗ
	|		РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|	ГДЕ
	|		НЕ ДокументыПоНМА.ДополнительнаяЗапись
	|		И ДокументыПоНМА.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыПоНМА.Ссылка
	|				ИЗ
	|					РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|				ГДЕ
	|					ДокументыПоНМА.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					И ДокументыПоНМА.Проведен
	|					И НЕ ДокументыПоНМА.ДополнительнаяЗапись
	|					И ДокументыПоНМА.ТипСсылки В (&ТипыДокументов)
	|					И (ДокументыПоНМА.Ссылка В (&МассивСсылок)
	|						ИЛИ НЕ &ОтборПоДокументам)
	|					И (ДокументыПоНМА.Организация, ДокументыПоНМА.НематериальныйАктив) В
	|						(ВЫБРАТЬ
	|							КэшГраниц.Организация,
	|							КэшГраниц.ОбъектУчета
	|						ИЗ
	|							ВТ_КэшГраниц КАК КэшГраниц))) КАК ДанныеКРасчету
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область НачислениеИзноса
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаНачислениеИзноса();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	NULL КАК ОбъектУчета
		|ПОМЕСТИТЬ НачислениеИзноса
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета";
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ВТ_СтоимостьВНА
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтоимостьОСОстатки.Организация КАК Организация,
	|	СтоимостьОСОстатки.ОсновноеСредство КАК ОбъектУчета,
	|	СтоимостьОСОстатки.СтоимостьОстаток КАК Стоимость,
	|	СтоимостьОСОстатки.СтоимостьРеглОстаток КАК СтоимостьРегл,
	|	СтоимостьОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	СтоимостьОСОстатки.СтоимостьПРОстаток КАК СтоимостьПР,
	|	СтоимостьОСОстатки.СтоимостьВРОстаток КАК СтоимостьВР,
	|	СтоимостьОСОстатки.СтоимостьЦФОстаток КАК СтоимостьЦФ,
	|	СтоимостьОСОстатки.СтоимостьНУЦФОстаток КАК СтоимостьНУЦФ,
	|	СтоимостьОСОстатки.СтоимостьПРЦФОстаток КАК СтоимостьПРЦФ,
	|	СтоимостьОСОстатки.СтоимостьВРЦФОстаток КАК СтоимостьВРЦФ,
	|	СтоимостьОСОстатки.АмортизационнаяПремияОстаток КАК АмортизационнаяПремия,
	|	СтоимостьОСОстатки.ЗалоговаяСтоимостьОстаток КАК ЗалоговаяСтоимость,
	|	СтоимостьОСОстатки.ПредварительнаяСтоимостьОстаток КАК ПредварительнаяСтоимость,
	|	СтоимостьОСОстатки.ПредварительнаяСтоимостьРеглОстаток КАК ПредварительнаяСтоимостьРегл,
	|	СтоимостьОСОстатки.РезервПереоценкиСтоимостиОстаток КАК РезервПереоценкиСтоимости,
	|	СтоимостьОСОстатки.РезервПереоценкиСтоимостиРеглОстаток КАК РезервПереоценкиСтоимостиРегл,
	|	0 КАК КорректировкаСтоимостиНУ
	|ПОМЕСТИТЬ СтоимостьВНА_Остатки
	|ИЗ
	|	РегистрНакопления.СтоимостьОС.Остатки(
	|			&НачалоМесяца,
	|			(Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.ОбъектУчета
	|				ИЗ
	|					ДанныеКРасчету КАК ДанныеКРасчету)) КАК СтоимостьОСОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтоимостьНМАОстатки.Организация КАК Организация,
	|	СтоимостьНМАОстатки.НематериальныйАктив КАК ОбъектУчета,
	|	СтоимостьНМАОстатки.СтоимостьОстаток КАК Стоимость,
	|	СтоимостьНМАОстатки.СтоимостьРеглОстаток КАК СтоимостьРегл,
	|	СтоимостьНМАОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	СтоимостьНМАОстатки.СтоимостьПРОстаток КАК СтоимостьПР,
	|	СтоимостьНМАОстатки.СтоимостьВРОстаток КАК СтоимостьВР,
	|	СтоимостьНМАОстатки.СтоимостьЦФОстаток КАК СтоимостьЦФ,
	|	СтоимостьНМАОстатки.СтоимостьНУЦФОстаток КАК СтоимостьНУЦФ,
	|	СтоимостьНМАОстатки.СтоимостьПРЦФОстаток КАК СтоимостьПРЦФ,
	|	СтоимостьНМАОстатки.СтоимостьВРЦФОстаток КАК СтоимостьВРЦФ,
	|	0 КАК АмортизационнаяПремия,
	|	0 КАК ЗалоговаяСтоимость,
	|	СтоимостьНМАОстатки.ПредварительнаяСтоимостьОстаток КАК ПредварительнаяСтоимость,
	|	СтоимостьНМАОстатки.ПредварительнаяСтоимостьРеглОстаток КАК ПредварительнаяСтоимостьРегл,
	|	СтоимостьНМАОстатки.РезервПереоценкиСтоимостиОстаток КАК РезервПереоценкиСтоимости,
	|	СтоимостьНМАОстатки.РезервПереоценкиСтоимостиРеглОстаток КАК РезервПереоценкиСтоимостиРегл,
	|	0 КАК КорректировкаСтоимостиНУ
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА.Остатки(
	|			&НачалоМесяца,
	|			(Организация, НематериальныйАктив) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.ОбъектУчета
	|				ИЗ
	|					ДанныеКРасчету КАК ДанныеКРасчету)) КАК СтоимостьНМАОстатки
	|
	|//СтоимостьВНА_Остатки_Локализация//
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтоимостьОС.Период КАК Период,
	|	СтоимостьОС.Регистратор КАК Регистратор,
	|	СтоимостьОС.Организация КАК Организация,
	|	СтоимостьОС.ОсновноеСредство КАК ОбъектУчета,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.Стоимость
	|		ИНАЧЕ -СтоимостьОС.Стоимость
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьРегл
	|		ИНАЧЕ -СтоимостьОС.СтоимостьРегл
	|	КОНЕЦ КАК СтоимостьРегл,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьНУ
	|		ИНАЧЕ -СтоимостьОС.СтоимостьНУ
	|	КОНЕЦ КАК СтоимостьНУ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьПР
	|		ИНАЧЕ -СтоимостьОС.СтоимостьПР
	|	КОНЕЦ КАК СтоимостьПР,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьВР
	|		ИНАЧЕ -СтоимостьОС.СтоимостьВР
	|	КОНЕЦ КАК СтоимостьВР,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьЦФ
	|		ИНАЧЕ -СтоимостьОС.СтоимостьЦФ
	|	КОНЕЦ КАК СтоимостьЦФ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьНУЦФ
	|		ИНАЧЕ -СтоимостьОС.СтоимостьНУЦФ
	|	КОНЕЦ КАК СтоимостьНУЦФ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьПРЦФ
	|		ИНАЧЕ -СтоимостьОС.СтоимостьПРЦФ
	|	КОНЕЦ КАК СтоимостьПРЦФ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьВРЦФ
	|		ИНАЧЕ -СтоимостьОС.СтоимостьВРЦФ
	|	КОНЕЦ КАК СтоимостьВРЦФ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.АмортизационнаяПремия
	|		ИНАЧЕ -СтоимостьОС.АмортизационнаяПремия
	|	КОНЕЦ КАК АмортизационнаяПремия,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.ЗалоговаяСтоимость
	|		ИНАЧЕ -СтоимостьОС.ЗалоговаяСтоимость
	|	КОНЕЦ КАК ЗалоговаяСтоимость,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.ПредварительнаяСтоимость
	|		ИНАЧЕ -СтоимостьОС.ПредварительнаяСтоимость
	|	КОНЕЦ КАК ПредварительнаяСтоимость,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.ПредварительнаяСтоимостьРегл
	|		ИНАЧЕ -СтоимостьОС.ПредварительнаяСтоимостьРегл
	|	КОНЕЦ КАК ПредварительнаяСтоимостьРегл,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ -СтоимостьОС.РезервПереоценкиСтоимости
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ -СтоимостьОС.РезервПереоценкиСтоимостиРегл
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|	0 КАК КорректировкаСтоимостиНУ
	|ПОМЕСТИТЬ СтоимостьВНА_Движения
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|ГДЕ
	|	СтоимостьОС.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И СтоимостьОС.Активность
	|	И (СтоимостьОС.Организация, СтоимостьОС.ОсновноеСредство) В
	|			(ВЫБРАТЬ
	|				ДанныеКРасчету.Организация,
	|				ДанныеКРасчету.ОбъектУчета
	|			ИЗ
	|				ДанныеКРасчету КАК ДанныеКРасчету)
	|	И (ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовКоторыеМогутИзменитьСтоимость)
	|		ИЛИ ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|				И НЕ СтоимостьОС.Регистратор В 
	|					(ВЫБРАТЬ
	|						ДанныеКРасчету.Ссылка
	|					ИЗ
	|						ДанныеКРасчету КАК ДанныеКРасчету))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтоимостьНМА.Период КАК Период,
	|	СтоимостьНМА.Регистратор КАК Регистратор,
	|	СтоимостьНМА.Организация КАК Организация,
	|	СтоимостьНМА.НематериальныйАктив КАК ОбъектУчета,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.Стоимость
	|		ИНАЧЕ -СтоимостьНМА.Стоимость
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьРегл
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьРегл
	|	КОНЕЦ КАК СтоимостьРегл,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьНУ
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьНУ
	|	КОНЕЦ КАК СтоимостьНУ,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьПР
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьПР
	|	КОНЕЦ КАК СтоимостьПР,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьВР
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьВР
	|	КОНЕЦ КАК СтоимостьВР,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьЦФ
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьЦФ
	|	КОНЕЦ КАК СтоимостьЦФ,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьНУЦФ
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьНУЦФ
	|	КОНЕЦ КАК СтоимостьНУЦФ,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьПРЦФ
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьПРЦФ
	|	КОНЕЦ КАК СтоимостьПРЦФ,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьВРЦФ
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьВРЦФ
	|	КОНЕЦ КАК СтоимостьВРЦФ,
	|	0 КАК АмортизационнаяПремия,
	|	0 КАК ЗалоговаяСтоимость,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.ПредварительнаяСтоимость
	|		ИНАЧЕ -СтоимостьНМА.ПредварительнаяСтоимость
	|	КОНЕЦ КАК ПредварительнаяСтоимость,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.ПредварительнаяСтоимостьРегл
	|		ИНАЧЕ -СтоимостьНМА.ПредварительнаяСтоимостьРегл
	|	КОНЕЦ КАК ПредварительнаяСтоимостьРегл,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.РезервПереоценкиСтоимости
	|		ИНАЧЕ -СтоимостьНМА.РезервПереоценкиСтоимости
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ -СтоимостьНМА.РезервПереоценкиСтоимостиРегл
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|	0 КАК КорректировкаСтоимостиНУ
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|ГДЕ
	|	СтоимостьНМА.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И СтоимостьНМА.Активность
	|	И ТИПЗНАЧЕНИЯ(СтоимостьНМА.Регистратор) В (&ТипыДокументовКоторыеМогутИзменитьСтоимость)
	|	И (СтоимостьНМА.Организация, СтоимостьНМА.НематериальныйАктив) В
	|			(ВЫБРАТЬ
	|				ДанныеКРасчету.Организация,
	|				ДанныеКРасчету.ОбъектУчета
	|			ИЗ
	|				ДанныеКРасчету КАК ДанныеКРасчету)
	|
	|//СтоимостьВНА_Движения_Локализация//
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	СУММА(ДанныеКРасчету.Стоимость) КАК Стоимость,
	|	СУММА(ДанныеКРасчету.СтоимостьРегл) КАК СтоимостьРегл,
	|	СУММА(ДанныеКРасчету.СтоимостьНУ) КАК СтоимостьНУ,
	|	СУММА(ДанныеКРасчету.СтоимостьПР) КАК СтоимостьПР,
	|	СУММА(ДанныеКРасчету.СтоимостьВР) КАК СтоимостьВР,
	|	СУММА(ДанныеКРасчету.СтоимостьЦФ) КАК СтоимостьЦФ,
	|	СУММА(ДанныеКРасчету.СтоимостьНУЦФ) КАК СтоимостьНУЦФ,
	|	СУММА(ДанныеКРасчету.СтоимостьПРЦФ) КАК СтоимостьПРЦФ,
	|	СУММА(ДанныеКРасчету.СтоимостьВРЦФ) КАК СтоимостьВРЦФ,
	|	СУММА(ДанныеКРасчету.АмортизационнаяПремия) КАК АмортизационнаяПремия,
	|	СУММА(ДанныеКРасчету.ЗалоговаяСтоимость) КАК ЗалоговаяСтоимость,
	|	СУММА(ДанныеКРасчету.ПредварительнаяСтоимость) КАК ПредварительнаяСтоимость,
	|	СУММА(ДанныеКРасчету.ПредварительнаяСтоимостьРегл) КАК ПредварительнаяСтоимостьРегл,
	|	СУММА(ДанныеКРасчету.РезервПереоценкиСтоимости) КАК РезервПереоценкиСтоимости,
	|	СУММА(ДанныеКРасчету.РезервПереоценкиСтоимостиРегл) КАК РезервПереоценкиСтоимостиРегл,
	|	СУММА(ДанныеКРасчету.КорректировкаСтоимостиНУ) КАК КорректировкаСтоимостиНУ,
	|
	|	ВЫБОР КОГДА СУММА(ДанныеКРасчету.СтоимостьЦФ) = 0 ИЛИ (СУММА(ДанныеКРасчету.СтоимостьРегл) + СУММА(ДанныеКРасчету.СтоимостьЦФ)) = 0
	|		ТОГДА 0
	|		ИНАЧЕ СУММА(ДанныеКРасчету.СтоимостьЦФ) / (СУММА(ДанныеКРасчету.СтоимостьРегл) + СУММА(ДанныеКРасчету.СтоимостьЦФ))
	|	КОНЕЦ КАК ДоляЦФБУ,
	|	ВЫБОР КОГДА СУММА(ДанныеКРасчету.СтоимостьНУЦФ) = 0 ИЛИ (СУММА(ДанныеКРасчету.СтоимостьНУ) + СУММА(ДанныеКРасчету.СтоимостьНУЦФ)) = 0
	|		ТОГДА 0
	|		ИНАЧЕ СУММА(ДанныеКРасчету.СтоимостьНУЦФ) / (СУММА(ДанныеКРасчету.СтоимостьНУ) + СУММА(ДанныеКРасчету.СтоимостьНУЦФ))
	|	КОНЕЦ КАК ДоляЦФНУ
	|
	|ПОМЕСТИТЬ ВТ_СтоимостьВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка КАК Ссылка,
	|		ДанныеКРасчету.Дата КАК Дата,
	|		ДанныеКРасчету.Организация КАК Организация,
	|		ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		ЕСТЬNULL(СтоимостьОС.Стоимость, 0) КАК Стоимость,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) КАК СтоимостьРегл,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0) КАК СтоимостьНУ,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0) КАК СтоимостьПР,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьВР, 0) КАК СтоимостьВР,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0) КАК СтоимостьЦФ,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьНУЦФ, 0) КАК СтоимостьНУЦФ,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0) КАК СтоимостьПРЦФ,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьВРЦФ, 0) КАК СтоимостьВРЦФ,
	|		ЕСТЬNULL(СтоимостьОС.АмортизационнаяПремия, 0) КАК АмортизационнаяПремия,
	|		ЕСТЬNULL(СтоимостьОС.ЗалоговаяСтоимость, 0) КАК ЗалоговаяСтоимость,
	|		ЕСТЬNULL(СтоимостьОС.ПредварительнаяСтоимость, 0) КАК ПредварительнаяСтоимость,
	|		ЕСТЬNULL(СтоимостьОС.ПредварительнаяСтоимостьРегл, 0) КАК ПредварительнаяСтоимостьРегл,
	|		ЕСТЬNULL(СтоимостьОС.РезервПереоценкиСтоимости, 0) КАК РезервПереоценкиСтоимости,
	|		ЕСТЬNULL(СтоимостьОС.РезервПереоценкиСтоимостиРегл, 0) КАК РезервПереоценкиСтоимостиРегл,
	|		ЕСТЬNULL(СтоимостьОС.КорректировкаСтоимостиНУ, 0) КАК КорректировкаСтоимостиНУ
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьВНА_Остатки КАК СтоимостьОС
	|			ПО (СтоимостьОС.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|				И (СтоимостьОС.Организация = ДанныеКРасчету.Организация)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка,
	|		ДанныеКРасчету.Дата,
	|		ДанныеКРасчету.Организация,
	|		ДанныеКРасчету.ОбъектУчета,
	|		ЕСТЬNULL(СтоимостьОС.Стоимость, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьВР, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьНУЦФ, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьВРЦФ, 0),
	|		ЕСТЬNULL(СтоимостьОС.АмортизационнаяПремия, 0),
	|		ЕСТЬNULL(СтоимостьОС.ЗалоговаяСтоимость, 0),
	|		ЕСТЬNULL(СтоимостьОС.ПредварительнаяСтоимость, 0),
	|		ЕСТЬNULL(СтоимостьОС.ПредварительнаяСтоимостьРегл, 0),
	|		ЕСТЬNULL(СтоимостьОС.РезервПереоценкиСтоимости, 0),
	|		ЕСТЬNULL(СтоимостьОС.РезервПереоценкиСтоимостиРегл, 0),
	|		ЕСТЬNULL(СтоимостьОС.КорректировкаСтоимостиНУ, 0) КАК КорректировкаСтоимостиНУ 
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьВНА_Движения КАК СтоимостьОС
	|			ПО (СтоимостьОС.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|				И (СтоимостьОС.Организация = ДанныеКРасчету.Организация)
	|				И (СтоимостьОС.Период <= ДанныеКРасчету.Дата
	|					ИЛИ ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовКоторыеМогутНачислитьАмортизацию))
	|				И (СтоимостьОС.Регистратор <> ДанныеКРасчету.Ссылка)
	|	) КАК ДанныеКРасчету
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.ОбъектУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация";
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаВТ_СтоимостьВНА(ТекстЗапроса);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти

	#Область ВТ_АмортизацияВНА
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АмортизацияОС.Организация КАК Организация,
	|	АмортизацияОС.ОсновноеСредство КАК ОбъектУчета,
	|	-АмортизацияОС.АмортизацияОстаток КАК Амортизация,
	|	-АмортизацияОС.АмортизацияРеглОстаток КАК АмортизацияРегл,
	|	-АмортизацияОС.АмортизацияНУОстаток КАК АмортизацияНУ,
	|	-АмортизацияОС.АмортизацияПРОстаток КАК АмортизацияПР,
	|	-АмортизацияОС.АмортизацияВРОстаток КАК АмортизацияВР,
	|	-АмортизацияОС.АмортизацияЦФОстаток КАК АмортизацияЦФ,
	|	-АмортизацияОС.АмортизацияНУЦФОстаток КАК АмортизацияНУЦФ,
	|	-АмортизацияОС.АмортизацияПРЦФОстаток КАК АмортизацияПРЦФ,
	|	-АмортизацияОС.АмортизацияВРЦФОстаток КАК АмортизацияВРЦФ,
	|	-АмортизацияОС.РезервПереоценкиАмортизацииОстаток КАК РезервПереоценкиАмортизации,
	|	-АмортизацияОС.РезервПереоценкиАмортизацииРеглОстаток КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ АмортизацияВНА_Остатки
	|ИЗ
	|	РегистрНакопления.АмортизацияОС.Остатки(
	|			&НачалоМесяца,
	|			(Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.ОбъектУчета
	|				ИЗ
	|					ДанныеКРасчету КАК ДанныеКРасчету)) КАК АмортизацияОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АмортизацияНМА.Организация КАК Организация,
	|	АмортизацияНМА.НематериальныйАктив КАК ОбъектУчета,
	|	-АмортизацияНМА.АмортизацияОстаток КАК Амортизация,
	|	-АмортизацияНМА.АмортизацияРеглОстаток КАК АмортизацияРегл,
	|	-АмортизацияНМА.АмортизацияНУОстаток КАК АмортизацияНУ,
	|	-АмортизацияНМА.АмортизацияПРОстаток КАК АмортизацияПР,
	|	-АмортизацияНМА.АмортизацияВРОстаток КАК АмортизацияВР,
	|	-АмортизацияНМА.АмортизацияЦФОстаток КАК АмортизацияЦФ,
	|	-АмортизацияНМА.АмортизацияНУЦФОстаток КАК АмортизацияНУЦФ,
	|	-АмортизацияНМА.АмортизацияПРЦФОстаток КАК АмортизацияПРЦФ,
	|	-АмортизацияНМА.АмортизацияВРЦФОстаток КАК АмортизацияВРЦФ,
	|	-АмортизацияНМА.РезервПереоценкиАмортизацииОстаток КАК РезервПереоценкиАмортизации,
	|	-АмортизацияНМА.РезервПереоценкиАмортизацииРеглОстаток КАК РезервПереоценкиАмортизацииРегл
	|ИЗ
	|	РегистрНакопления.АмортизацияНМА.Остатки(
	|			&НачалоМесяца,
	|			(Организация, НематериальныйАктив) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.ОбъектУчета
	|				ИЗ
	|					ДанныеКРасчету КАК ДанныеКРасчету)) КАК АмортизацияНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияОС.Период КАК Период,
	|	АмортизацияОС.Регистратор КАК Регистратор,
	|	АмортизацияОС.Организация КАК Организация,
	|	АмортизацияОС.ОсновноеСредство КАК ОбъектУчета,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.Амортизация 
	|		ИНАЧЕ -АмортизацияОС.Амортизация 
	|	КОНЕЦ КАК Амортизация,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияРегл 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияРегл 
	|	КОНЕЦ КАК АмортизацияРегл,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияНУ 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияНУ 
	|	КОНЕЦ КАК АмортизацияНУ,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияПР 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияПР 
	|	КОНЕЦ КАК АмортизацияПР,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияВР 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияВР 
	|	КОНЕЦ КАК АмортизацияВР,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияЦФ 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияЦФ 
	|	КОНЕЦ КАК АмортизацияЦФ,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияНУЦФ 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияНУЦФ 
	|	КОНЕЦ КАК АмортизацияНУЦФ,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияПРЦФ 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияПРЦФ 
	|	КОНЕЦ КАК АмортизацияПРЦФ,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияВРЦФ 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияВРЦФ 
	|	КОНЕЦ КАК АмортизацияВРЦФ,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.РезервПереоценкиАмортизации 
	|		ИНАЧЕ -АмортизацияОС.РезервПереоценкиАмортизации 
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ -АмортизацияОС.РезервПереоценкиАмортизацииРегл 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ АмортизацияВНА_Движения
	|ИЗ
	|	РегистрНакопления.АмортизацияОС КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И АмортизацияОС.Активность
	|	И (АмортизацияОС.Организация, АмортизацияОС.ОсновноеСредство) В
	|			(ВЫБРАТЬ
	|				ДанныеКРасчету.Организация,
	|				ДанныеКРасчету.ОбъектУчета
	|			ИЗ
	|				ДанныеКРасчету КАК ДанныеКРасчету)
	|	И (ТИПЗНАЧЕНИЯ(АмортизацияОС.Регистратор) В (
	|				ТИП(Документ.АмортизацияОС2_4),
	|				ТИП(Документ.ПринятиеКУчетуОС2_4),
	|				ТИП(Документ.РаспределениеНДС),
	|				ТИП(Документ.КорректировкаРегистров))
	|		ИЛИ
	|			ТИПЗНАЧЕНИЯ(АмортизацияОС.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|			И НЕ АмортизацияОС.Регистратор В 
	|					(ВЫБРАТЬ
	|						ДанныеКРасчету.Ссылка
	|					ИЗ
	|						ДанныеКРасчету КАК ДанныеКРасчету))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АмортизацияНМА.Период КАК Период,
	|	АмортизацияНМА.Регистратор КАК Регистратор,
	|	АмортизацияНМА.Организация КАК Организация,
	|	АмортизацияНМА.НематериальныйАктив КАК ОбъектУчета,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.Амортизация 
	|		ИНАЧЕ -АмортизацияНМА.Амортизация 
	|	КОНЕЦ КАК Амортизация,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияРегл 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияРегл 
	|	КОНЕЦ КАК АмортизацияРегл,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияНУ 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияНУ 
	|	КОНЕЦ КАК АмортизацияНУ,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияПР 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияПР 
	|	КОНЕЦ КАК АмортизацияПР,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияВР 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияВР 
	|	КОНЕЦ КАК АмортизацияВР,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияЦФ 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияЦФ 
	|	КОНЕЦ КАК АмортизацияЦФ,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияНУЦФ 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияНУЦФ 
	|	КОНЕЦ КАК АмортизацияНУЦФ,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияПРЦФ 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияПРЦФ 
	|	КОНЕЦ КАК АмортизацияПРЦФ,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияВРЦФ 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияВРЦФ 
	|	КОНЕЦ КАК АмортизацияВРЦФ,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.РезервПереоценкиАмортизации 
	|		ИНАЧЕ -АмортизацияНМА.РезервПереоценкиАмортизации 
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ -АмортизацияНМА.РезервПереоценкиАмортизацииРегл 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл
	|ИЗ
	|	РегистрНакопления.АмортизацияНМА КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И АмортизацияНМА.Активность
	|	И ТИПЗНАЧЕНИЯ(АмортизацияНМА.Регистратор) В (
	|				ТИП(Документ.АмортизацияНМА2_4),
	|				ТИП(Документ.ПринятиеКУчетуНМА2_4),
	|				ТИП(Документ.РаспределениеНДС),
	|				ТИП(Документ.КорректировкаРегистров))
	|	И (АмортизацияНМА.Организация, АмортизацияНМА.НематериальныйАктив) В
	|			(ВЫБРАТЬ
	|				ДанныеКРасчету.Организация,
	|				ДанныеКРасчету.ОбъектУчета
	|			ИЗ
	|				ДанныеКРасчету КАК ДанныеКРасчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеКРасчету.НачислятьИзнос КАК НачислятьИзнос,
	|	СУММА(ДанныеКРасчету.Амортизация) КАК Амортизация,
	|	СУММА(ДанныеКРасчету.АмортизацияРегл) КАК АмортизацияРегл,
	|	СУММА(ДанныеКРасчету.АмортизацияНУ) КАК АмортизацияНУ,
	|	СУММА(ДанныеКРасчету.АмортизацияПР) КАК АмортизацияПР,
	|	СУММА(ДанныеКРасчету.АмортизацияВР) КАК АмортизацияВР,
	|	СУММА(ДанныеКРасчету.АмортизацияЦФ) КАК АмортизацияЦФ,
	|	СУММА(ДанныеКРасчету.АмортизацияНУЦФ) КАК АмортизацияНУЦФ,
	|	СУММА(ДанныеКРасчету.АмортизацияПРЦФ) КАК АмортизацияПРЦФ,
	|	СУММА(ДанныеКРасчету.АмортизацияВРЦФ) КАК АмортизацияВРЦФ,
	|	СУММА(ДанныеКРасчету.РезервПереоценкиАмортизации) КАК РезервПереоценкиАмортизации,
	|	СУММА(ДанныеКРасчету.РезервПереоценкиАмортизацииРегл) КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ ВТ_АмортизацияВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка КАК Ссылка,
	|		ДанныеКРасчету.Дата КАК Дата,
	|		ДанныеКРасчету.Организация КАК Организация,
	|		ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		ЕСТЬNULL(АмортизацияВНА.Амортизация, 0) КАК Амортизация,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0) КАК АмортизацияРегл,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияНУ, 0) КАК АмортизацияНУ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияПР, 0) КАК АмортизацияПР,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияВР, 0) КАК АмортизацияВР,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0) КАК АмортизацияЦФ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияНУЦФ, 0) КАК АмортизацияНУЦФ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияПРЦФ, 0) КАК АмортизацияПРЦФ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияВРЦФ, 0) КАК АмортизацияВРЦФ,
	|		ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0) КАК РезервПереоценкиАмортизации,
	|		ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0) КАК РезервПереоценкиАмортизацииРегл,
	|		НЕ НачислениеИзноса.ОбъектУчета ЕСТЬ NULL КАК НачислятьИзнос
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияВНА_Остатки КАК АмортизацияВНА
	|			ПО (АмортизацияВНА.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|				И (АмортизацияВНА.Организация = ДанныеКРасчету.Организация)
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачислениеИзноса КАК НачислениеИзноса
	|			ПО НачислениеИзноса.ОбъектУчета = ДанныеКРасчету.ОбъектУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка,
	|		ДанныеКРасчету.Дата,
	|		ДанныеКРасчету.Организация,
	|		ДанныеКРасчету.ОбъектУчета,
	|		ВЫБОР 
	|			КОГДА ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ &ПорядокУчетаВНАВУпрУчете = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНАВУпрУчете.ПоСтандартамРегл)
	|					ИЛИ ТИПЗНАЧЕНИЯ(АмортизацияВНА.Регистратор) В (&ТипыДокументовПоКоторымНужноУчестьАмортизацию)
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.Амортизация, 0) 
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0),
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияНУ, 0),
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияПР, 0),
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияВР, 0),
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0),
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияНУЦФ, 0),
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияПРЦФ, 0),
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияВРЦФ, 0),
	|		ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0),
	|		ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0),
	|		НЕ НачислениеИзноса.ОбъектУчета ЕСТЬ NULL КАК НачислятьИзнос
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияВНА_Движения КАК АмортизацияВНА
	|			ПО (АмортизацияВНА.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|				И (АмортизацияВНА.Организация = ДанныеКРасчету.Организация)
	|				И (АмортизацияВНА.Регистратор <> ДанныеКРасчету.Ссылка)
	|				И (ТИПЗНАЧЕНИЯ(АмортизацияВНА.Регистратор) <> ТИП(Документ.КорректировкаРегистров)
	|					ИЛИ АмортизацияВНА.Период <= ДанныеКРасчету.Дата)
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачислениеИзноса КАК НачислениеИзноса
	|			ПО НачислениеИзноса.ОбъектУчета = ДанныеКРасчету.ОбъектУчета
	|) КАК ДанныеКРасчету
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.ОбъектУчета,
	|	ДанныеКРасчету.НачислятьИзнос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ДанныеКРасчету_Выборка
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.Дата
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеКРасчету.Дата";

	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти

КонецПроцедуры

Процедура ОбновитьТаблицыОтложенногоФормированияДвижений(Регистратор, МенеджерВременныхТаблиц)

	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.МодернизацияОС2_4") Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстыЗапроса = Новый Массив;
	
	#Область ИсходныеТаблицы
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеКРасчету.Стоимость КАК Стоимость,
	|	ДанныеКРасчету.СтоимостьРегл КАК СтоимостьРегл,
	|	ДанныеКРасчету.СтоимостьНУ КАК СтоимостьНУ,
	|	ДанныеКРасчету.СтоимостьПР КАК СтоимостьПР,
	|	ДанныеКРасчету.СтоимостьВР КАК СтоимостьВР,
	|	ДанныеКРасчету.СтоимостьЦФ КАК СтоимостьЦФ,
	|	ДанныеКРасчету.СтоимостьНУЦФ КАК СтоимостьНУЦФ,
	|	ДанныеКРасчету.СтоимостьПРЦФ КАК СтоимостьПРЦФ,
	|	ДанныеКРасчету.СтоимостьВРЦФ КАК СтоимостьВРЦФ,
	|	ДанныеКРасчету.АмортизационнаяПремия КАК АмортизационнаяПремия,
	|	ДанныеКРасчету.ЗалоговаяСтоимость КАК ЗалоговаяСтоимость,
	|	ДанныеКРасчету.ПредварительнаяСтоимость КАК ПредварительнаяСтоимость,
	|	ДанныеКРасчету.ПредварительнаяСтоимостьРегл КАК ПредварительнаяСтоимостьРегл,
	|	ДанныеКРасчету.РезервПереоценкиСтоимости КАК РезервПереоценкиСтоимости,
	|	ДанныеКРасчету.РезервПереоценкиСтоимостиРегл КАК РезервПереоценкиСтоимостиРегл,
	|	ДанныеКРасчету.КорректировкаСтоимостиНУ КАК КорректировкаСтоимостиНУ
	|ПОМЕСТИТЬ ВТ_СтоимостьВНА_Исходная
	|ИЗ
	|	ВТ_СтоимостьВНА КАК ДанныеКРасчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеКРасчету.НачислятьИзнос КАК НачислятьИзнос,
	|	ДанныеКРасчету.Амортизация КАК Амортизация,
	|	ДанныеКРасчету.АмортизацияРегл КАК АмортизацияРегл,
	|	ДанныеКРасчету.АмортизацияНУ КАК АмортизацияНУ,
	|	ДанныеКРасчету.АмортизацияПР КАК АмортизацияПР,
	|	ДанныеКРасчету.АмортизацияВР КАК АмортизацияВР,
	|	ДанныеКРасчету.АмортизацияЦФ КАК АмортизацияЦФ,
	|	ДанныеКРасчету.АмортизацияНУЦФ КАК АмортизацияНУЦФ,
	|	ДанныеКРасчету.АмортизацияПРЦФ КАК АмортизацияПРЦФ,
	|	ДанныеКРасчету.АмортизацияВРЦФ КАК АмортизацияВРЦФ,
	|	ДанныеКРасчету.РезервПереоценкиАмортизации КАК РезервПереоценкиАмортизации,
	|	ДанныеКРасчету.РезервПереоценкиАмортизацииРегл КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ ВТ_АмортизацияВНА_Исходная
	|ИЗ
	|	ВТ_АмортизацияВНА КАК ДанныеКРасчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтоимостьВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_АмортизацияВНА";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область СтоимостьВНА_Движения
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтоимостьОС.Период, ДЕНЬ) КАК Дата,
	|	СтоимостьОС.Организация КАК Организация,
	|	СтоимостьОС.ОсновноеСредство КАК ОбъектУчета,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.Стоимость
	|			ИНАЧЕ -СтоимостьОС.Стоимость
	|		КОНЕЦ) КАК Стоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьРегл
	|			ИНАЧЕ -СтоимостьОС.СтоимостьРегл
	|		КОНЕЦ) КАК СтоимостьРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьНУ
	|			ИНАЧЕ -СтоимостьОС.СтоимостьНУ
	|		КОНЕЦ) КАК СтоимостьНУ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьПР
	|			ИНАЧЕ -СтоимостьОС.СтоимостьПР
	|		КОНЕЦ) КАК СтоимостьПР,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьВР
	|			ИНАЧЕ -СтоимостьОС.СтоимостьВР
	|		КОНЕЦ) КАК СтоимостьВР,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьЦФ
	|			ИНАЧЕ -СтоимостьОС.СтоимостьЦФ
	|		КОНЕЦ) КАК СтоимостьЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьНУЦФ
	|			ИНАЧЕ -СтоимостьОС.СтоимостьНУЦФ
	|		КОНЕЦ) КАК СтоимостьНУЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьПРЦФ
	|			ИНАЧЕ -СтоимостьОС.СтоимостьПРЦФ
	|		КОНЕЦ) КАК СтоимостьПРЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьВРЦФ
	|			ИНАЧЕ -СтоимостьОС.СтоимостьВРЦФ
	|		КОНЕЦ) КАК СтоимостьВРЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.АмортизационнаяПремия
	|			ИНАЧЕ -СтоимостьОС.АмортизационнаяПремия
	|		КОНЕЦ) КАК АмортизационнаяПремия,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.ЗалоговаяСтоимость
	|			ИНАЧЕ -СтоимостьОС.ЗалоговаяСтоимость
	|		КОНЕЦ) КАК ЗалоговаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.ПредварительнаяСтоимость
	|			ИНАЧЕ -СтоимостьОС.ПредварительнаяСтоимость
	|		КОНЕЦ) КАК ПредварительнаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.ПредварительнаяСтоимостьРегл
	|			ИНАЧЕ -СтоимостьОС.ПредварительнаяСтоимостьРегл
	|		КОНЕЦ) КАК ПредварительнаяСтоимостьРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.РезервПереоценкиСтоимости
	|			ИНАЧЕ -СтоимостьОС.РезервПереоценкиСтоимости
	|		КОНЕЦ) КАК РезервПереоценкиСтоимости,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.РезервПереоценкиСтоимостиРегл
	|			ИНАЧЕ -СтоимостьОС.РезервПереоценкиСтоимостиРегл
	|		КОНЕЦ) КАК РезервПереоценкиСтоимостиРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.КорректировкаСтоимостиНУ
	|			ИНАЧЕ -СтоимостьОС.КорректировкаСтоимостиНУ
	|		КОНЕЦ) КАК КорректировкаСтоимостиНУ
	|ПОМЕСТИТЬ СтоимостьВНА_Движения
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|ГДЕ
	|	СтоимостьОС.Регистратор = &Регистратор
	|	И СтоимостьОС.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СтоимостьОС.Период, ДЕНЬ),
	|	СтоимостьОС.Организация,
	|	СтоимостьОС.ОсновноеСредство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтоимостьНМА.Период, ДЕНЬ) КАК Дата,
	|	СтоимостьНМА.Организация КАК Организация,
	|	СтоимостьНМА.НематериальныйАктив КАК ОбъектУчета,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.Стоимость
	|			ИНАЧЕ -СтоимостьНМА.Стоимость
	|		КОНЕЦ) КАК Стоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьРегл
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьРегл
	|		КОНЕЦ) КАК СтоимостьРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьНУ
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьНУ
	|		КОНЕЦ) КАК СтоимостьНУ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьПР
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьПР
	|		КОНЕЦ) КАК СтоимостьПР,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьВР
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьВР
	|		КОНЕЦ) КАК СтоимостьВР,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьЦФ
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьЦФ
	|		КОНЕЦ) КАК СтоимостьЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьНУЦФ
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьНУЦФ
	|		КОНЕЦ) КАК СтоимостьНУЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьПРЦФ
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьПРЦФ
	|		КОНЕЦ) КАК СтоимостьПРЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьВРЦФ
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьВРЦФ
	|		КОНЕЦ) КАК СтоимостьВРЦФ,
	|	0 КАК АмортизационнаяПремия,
	|	0 КАК ЗалоговаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.ПредварительнаяСтоимость
	|			ИНАЧЕ -СтоимостьНМА.ПредварительнаяСтоимость
	|		КОНЕЦ) КАК ПредварительнаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.ПредварительнаяСтоимостьРегл
	|			ИНАЧЕ -СтоимостьНМА.ПредварительнаяСтоимостьРегл
	|		КОНЕЦ) КАК ПредварительнаяСтоимостьРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.РезервПереоценкиСтоимости
	|			ИНАЧЕ -СтоимостьНМА.РезервПереоценкиСтоимости
	|		КОНЕЦ) КАК РезервПереоценкиСтоимости,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.РезервПереоценкиСтоимостиРегл
	|			ИНАЧЕ -СтоимостьНМА.РезервПереоценкиСтоимостиРегл
	|		КОНЕЦ) КАК РезервПереоценкиСтоимостиРегл,
	|	0 КорректировкаСтоимостиНУ
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|ГДЕ
	|	СтоимостьНМА.Регистратор = &Регистратор
	|	И СтоимостьНМА.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СтоимостьНМА.Период, ДЕНЬ),
	|	СтоимостьНМА.Организация,
	|	СтоимостьНМА.НематериальныйАктив";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область АмортизацияВНА_Движения
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(АмортизацияОС.Период, ДЕНЬ) КАК Дата,
	|	АмортизацияОС.Организация КАК Организация,
	|	АмортизацияОС.ОсновноеСредство КАК ОбъектУчета,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.Амортизация
	|			ИНАЧЕ -АмортизацияОС.Амортизация
	|		КОНЕЦ) КАК Амортизация,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияРегл
	|			ИНАЧЕ -АмортизацияОС.АмортизацияРегл
	|		КОНЕЦ) КАК АмортизацияРегл,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияНУ
	|			ИНАЧЕ -АмортизацияОС.АмортизацияНУ
	|		КОНЕЦ) КАК АмортизацияНУ,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияПР
	|			ИНАЧЕ -АмортизацияОС.АмортизацияПР
	|		КОНЕЦ) КАК АмортизацияПР,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияВР
	|			ИНАЧЕ -АмортизацияОС.АмортизацияВР
	|		КОНЕЦ) КАК АмортизацияВР,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияЦФ
	|			ИНАЧЕ -АмортизацияОС.АмортизацияЦФ
	|		КОНЕЦ) КАК АмортизацияЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияНУЦФ
	|			ИНАЧЕ -АмортизацияОС.АмортизацияНУЦФ
	|		КОНЕЦ) КАК АмортизацияНУЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияПРЦФ
	|			ИНАЧЕ -АмортизацияОС.АмортизацияПРЦФ
	|		КОНЕЦ) КАК АмортизацияПРЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияВРЦФ
	|			ИНАЧЕ -АмортизацияОС.АмортизацияВРЦФ
	|		КОНЕЦ) КАК АмортизацияВРЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.РезервПереоценкиАмортизации
	|			ИНАЧЕ -АмортизацияОС.РезервПереоценкиАмортизации
	|		КОНЕЦ) КАК РезервПереоценкиАмортизации,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.РезервПереоценкиАмортизацииРегл
	|			ИНАЧЕ -АмортизацияОС.РезервПереоценкиАмортизацииРегл
	|		КОНЕЦ) КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ АмортизацияВНА_Движения
	|ИЗ
	|	РегистрНакопления.АмортизацияОС КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Регистратор = &Регистратор
	|	И АмортизацияОС.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(АмортизацияОС.Период, ДЕНЬ),
	|	АмортизацияОС.Организация,
	|	АмортизацияОС.ОсновноеСредство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(АмортизацияНМА.Период, ДЕНЬ),
	|	АмортизацияНМА.Организация,
	|	АмортизацияНМА.НематериальныйАктив,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.Амортизация
	|			ИНАЧЕ -АмортизацияНМА.Амортизация
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияРегл
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияРегл
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияНУ
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияНУ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияПР
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияПР
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияВР
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияВР
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияЦФ
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияЦФ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияНУЦФ
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияНУЦФ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияПРЦФ
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияПРЦФ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияВРЦФ
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияВРЦФ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.РезервПереоценкиАмортизации
	|			ИНАЧЕ -АмортизацияНМА.РезервПереоценкиАмортизации
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.РезервПереоценкиАмортизацииРегл
	|			ИНАЧЕ -АмортизацияНМА.РезервПереоценкиАмортизацииРегл
	|		КОНЕЦ)
	|ИЗ
	|	РегистрНакопления.АмортизацияНМА КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Регистратор = &Регистратор
	|	И АмортизацияНМА.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(АмортизацияНМА.Период, ДЕНЬ),
	|	АмортизацияНМА.Организация,
	|	АмортизацияНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ВТ_СтоимостьВНА
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтоимостьВНА.Ссылка КАК Ссылка,
	|	СтоимостьВНА.Дата КАК Дата,
	|	СтоимостьВНА.Организация КАК Организация,
	|	СтоимостьВНА.ОбъектУчета КАК ОбъектУчета,
	|	СУММА(СтоимостьВНА.Стоимость + ЕСТЬNULL(СтоимостьВНА_Движения.Стоимость, 0)) КАК Стоимость,
	|	СУММА(СтоимостьВНА.СтоимостьРегл + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьРегл, 0)) КАК СтоимостьРегл,
	|	СУММА(СтоимостьВНА.СтоимостьНУ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУ, 0)) КАК СтоимостьНУ,
	|	СУММА(СтоимостьВНА.СтоимостьПР + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьПР, 0)) КАК СтоимостьПР,
	|	СУММА(СтоимостьВНА.СтоимостьВР + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьВР, 0)) КАК СтоимостьВР,
	|	СУММА(СтоимостьВНА.СтоимостьЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьЦФ, 0)) КАК СтоимостьЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьНУЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУЦФ, 0)) КАК СтоимостьНУЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьПРЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьПРЦФ, 0)) КАК СтоимостьПРЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьВРЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьВРЦФ, 0)) КАК СтоимостьВРЦФ,
	|	СУММА(СтоимостьВНА.АмортизационнаяПремия + ЕСТЬNULL(СтоимостьВНА_Движения.АмортизационнаяПремия, 0)) КАК АмортизационнаяПремия,
	|	СУММА(СтоимостьВНА.ЗалоговаяСтоимость + ЕСТЬNULL(СтоимостьВНА_Движения.ЗалоговаяСтоимость, 0)) КАК ЗалоговаяСтоимость,
	|	СУММА(СтоимостьВНА.ПредварительнаяСтоимость + ЕСТЬNULL(СтоимостьВНА_Движения.ПредварительнаяСтоимость, 0)) КАК ПредварительнаяСтоимость,
	|	СУММА(СтоимостьВНА.ПредварительнаяСтоимостьРегл + ЕСТЬNULL(СтоимостьВНА_Движения.ПредварительнаяСтоимостьРегл, 0)) КАК ПредварительнаяСтоимостьРегл,
	|	СУММА(СтоимостьВНА.РезервПереоценкиСтоимости + ЕСТЬNULL(СтоимостьВНА_Движения.РезервПереоценкиСтоимости, 0)) КАК РезервПереоценкиСтоимости,
	|	СУММА(СтоимостьВНА.РезервПереоценкиСтоимостиРегл + ЕСТЬNULL(СтоимостьВНА_Движения.РезервПереоценкиСтоимостиРегл, 0)) КАК РезервПереоценкиСтоимостиРегл,
	|	СУММА(СтоимостьВНА.КорректировкаСтоимостиНУ + ЕСТЬNULL(СтоимостьВНА_Движения.КорректировкаСтоимостиНУ, 0)) КАК КорректировкаСтоимостиНУ,
	|	ВЫБОР
	|		КОГДА СУММА(СтоимостьВНА.СтоимостьЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьЦФ, 0)) = 0
	|				ИЛИ СУММА(СтоимостьВНА.СтоимостьРегл + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьРегл, 0)) + СУММА(СтоимостьВНА.СтоимостьЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьЦФ, 0)) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(СтоимостьВНА.СтоимостьЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьЦФ, 0)) / (СУММА(СтоимостьВНА.СтоимостьРегл + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьРегл, 0)) + СУММА(СтоимостьВНА.СтоимостьЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьЦФ, 0)))
	|	КОНЕЦ КАК ДоляЦФБУ,
	|	ВЫБОР
	|		КОГДА СУММА(СтоимостьВНА.СтоимостьНУЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУЦФ, 0)) = 0
	|				ИЛИ СУММА(СтоимостьВНА.СтоимостьНУ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУ, 0)) + СУММА(СтоимостьВНА.СтоимостьНУЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУЦФ, 0)) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(СтоимостьВНА.СтоимостьНУЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУЦФ, 0)) / (СУММА(СтоимостьВНА.СтоимостьНУ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУ, 0)) + СУММА(СтоимостьВНА.СтоимостьНУЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУЦФ, 0)))
	|	КОНЕЦ КАК ДоляЦФНУ
	|ПОМЕСТИТЬ ВТ_СтоимостьВНА
	|ИЗ
	|	ВТ_СтоимостьВНА_Исходная КАК СтоимостьВНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьВНА_Движения КАК СтоимостьВНА_Движения
	|		ПО СтоимостьВНА.ОбъектУчета = СтоимостьВНА_Движения.ОбъектУчета
	|			И СтоимостьВНА.Организация = СтоимостьВНА_Движения.Организация
	|			И СтоимостьВНА.Дата >= СтоимостьВНА_Движения.Дата
	|			И (СтоимостьВНА.Ссылка <> &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтоимостьВНА.Ссылка,
	|	СтоимостьВНА.Дата,
	|	СтоимостьВНА.Организация,
	|	СтоимостьВНА.ОбъектУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
		
	#Область ВТ_АмортизацияВНА
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АмортизацияВНА.Ссылка КАК Ссылка,
	|	АмортизацияВНА.Дата КАК Дата,
	|	АмортизацияВНА.Организация КАК Организация,
	|	АмортизацияВНА.ОбъектУчета КАК ОбъектУчета,
	|	АмортизацияВНА.НачислятьИзнос ЕСТЬ NULL КАК НачислятьИзнос,
	|	СУММА(АмортизацияВНА.Амортизация + ЕСТЬNULL(АмортизацияВНА_Движения.Амортизация, 0)) КАК Амортизация,
	|	СУММА(АмортизацияВНА.АмортизацияРегл + ЕСТЬNULL(АмортизацияВНА_Движения.АмортизацияРегл, 0)) КАК АмортизацияРегл,
	|	СУММА(АмортизацияВНА.АмортизацияНУ + ЕСТЬNULL(АмортизацияВНА_Движения.АмортизацияНУ, 0)) КАК АмортизацияНУ,
	|	СУММА(АмортизацияВНА.АмортизацияПР + ЕСТЬNULL(АмортизацияВНА_Движения.АмортизацияПР, 0)) КАК АмортизацияПР,
	|	СУММА(АмортизацияВНА.АмортизацияВР + ЕСТЬNULL(АмортизацияВНА_Движения.АмортизацияВР, 0)) КАК АмортизацияВР,
	|	СУММА(АмортизацияВНА.АмортизацияЦФ + ЕСТЬNULL(АмортизацияВНА_Движения.АмортизацияЦФ, 0)) КАК АмортизацияЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияНУЦФ + ЕСТЬNULL(АмортизацияВНА_Движения.АмортизацияНУЦФ, 0)) КАК АмортизацияНУЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияПРЦФ + ЕСТЬNULL(АмортизацияВНА_Движения.АмортизацияПРЦФ, 0)) КАК АмортизацияПРЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияВРЦФ + ЕСТЬNULL(АмортизацияВНА_Движения.АмортизацияВРЦФ, 0)) КАК АмортизацияВРЦФ,
	|	СУММА(АмортизацияВНА.РезервПереоценкиАмортизации + ЕСТЬNULL(АмортизацияВНА_Движения.РезервПереоценкиАмортизации, 0)) КАК РезервПереоценкиАмортизации,
	|	СУММА(АмортизацияВНА.РезервПереоценкиАмортизацииРегл + ЕСТЬNULL(АмортизацияВНА_Движения.РезервПереоценкиАмортизацииРегл, 0)) КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ ВТ_АмортизацияВНА
	|ИЗ
	|	ВТ_АмортизацияВНА_Исходная КАК АмортизацияВНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияВНА_Движения КАК АмортизацияВНА_Движения
	|		ПО АмортизацияВНА.ОбъектУчета = АмортизацияВНА_Движения.ОбъектУчета
	|			И АмортизацияВНА.Организация = АмортизацияВНА_Движения.Организация
	|			И АмортизацияВНА.Дата >= АмортизацияВНА_Движения.Дата
	|			И (АмортизацияВНА.Ссылка <> &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	АмортизацияВНА.Ссылка,
	|	АмортизацияВНА.Дата,
	|	АмортизацияВНА.Организация,
	|	АмортизацияВНА.ОбъектУчета,
	|	АмортизацияВНА.НачислятьИзнос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаСодержащегоТекстыЗапросаОтложенногоФормированияДвижений(Запрос)

	Запрос.УстановитьПараметр("ПорядокУчетаВНАВУпрУчете", Константы.ПорядокУчетаВНАВУпрУчете.Получить());
	Запрос.УстановитьПараметр("ТипыДокументов", ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения());
	Запрос.УстановитьПараметр("ТипыДокументовКоторыеМогутИзменитьСтоимость", ТипыДокументовКоторыеМогутИзменитьСтоимость());
	Запрос.УстановитьПараметр("ТипыДокументовКоторыеМогутНачислитьАмортизацию", ТипыДокументовКоторыеМогутНачислитьАмортизацию());
	Запрос.УстановитьПараметр("ТипыДокументовПоКоторымНужноУчестьАмортизацию", ТипыДокументовПоКоторымНужноУчестьАмортизацию());
	
КонецПроцедуры
 
#КонецОбласти

#Область Прочее

// Блокирует регистр "Задания к закрытию месяца" по указанным аналитикам.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Номер задания из константы "Номер задания к закрытию месяца".
//	Организации - Массив, СправочникСсылка.Организации - Перечень организаций к блокировке.
//	Операция - ПеречислениеСсылка.ТипыОперацийЗакрытияМесяца - Операция, по которой блокируется регистр заданий.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации, ИмяРегистра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		Если Организации.Количество() <> 0 Тогда
			ИсточникБлокировки.ЗагрузитьКолонку(Организации, "Организация");
			ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
		// если массив пустой, то блокировка ставится по всем организациям.
	ИначеЕсли ТипЗнч(Организации) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Организации) Тогда
		СтрокаБлокировки = ИсточникБлокировки.Добавить();
		СтрокаБлокировки.Организация = Организации;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения() Экспорт

	СписокОбъектов = Новый Массив;
	
	СписокТипов = Новый Массив;
	
	// ОС
	СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратОСОтАрендатора2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ВыбытиеАрендованныхОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИзменениеПараметровОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.МодернизацияОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПередачаОСАрендатору2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПеремещениеОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПереоценкаОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РазукомплектацияОС"));

	// НМА
	СписокТипов.Добавить(Тип("ДокументСсылка.ИзменениеПараметровНМА2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПеремещениеНМА2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПереоценкаНМА2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеНМА2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеНМА2_4"));
	
	// Прочее
	СписокТипов.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	
	Для каждого ТипОбъекта Из СписокТипов Цикл
		СписокОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипОбъекта));
	КонецЦикла; 
	
	Возврат СписокОбъектов;

КонецФункции

Функция ТипыДокументовКоторыеМогутИзменитьСтоимость() Экспорт

	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуОС2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("МодернизацияОС2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("АмортизацияОС2_4", Ложь, ТипыОбъектов);
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуНМА2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("АмортизацияНМА2_4", Ложь, ТипыОбъектов);
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("КорректировкаРегистров", Ложь, ТипыОбъектов);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТипыДокументовКоторыеМогутИзменитьСтоимость(ТипыОбъектов);
	
	Возврат ТипыОбъектов;
	
КонецФункции

Функция ТипыДокументовКоторыеМогутНачислитьАмортизацию()

	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("АмортизацияОС2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("АмортизацияНМА2_4", Ложь, ТипыОбъектов);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТипыДокументовКоторыеМогутНачислитьАмортизацию(ТипыОбъектов);

	Возврат ТипыОбъектов;
	
КонецФункции

Функция ТипыДокументовПоКоторымНужноИсключитьРасходыПриРасчетеСтоимости()

	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуОС2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуНМА2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("МодернизацияОС2_4", Ложь, ТипыОбъектов);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТипыДокументовПоКоторымНужноИсключитьРасходыПриРасчетеСтоимости(ТипыОбъектов);

	Возврат ТипыОбъектов;
	
КонецФункции

Функция ТипыДокументовПоКоторымНужноУчестьАмортизацию()

	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТипыДокументовПоКоторымНужноУчестьАмортизацию(ТипыОбъектов);

	Возврат ТипыОбъектов;
	
КонецФункции
 
Процедура ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, Движения, ЗагружатьПустойНабор = Ложь) Экспорт
	
	Если НЕ ДополнительныеСвойства.Свойство("ТаблицыДляДвижений") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	Для Каждого Таблица Из ТаблицыДляДвижений Цикл
		
		ИмяРегистра = Таблица.Ключ;
		Если ВРег(Лев(ИмяРегистра,7))= "ТАБЛИЦА" Тогда
			ИмяРегистра = Прав(ИмяРегистра, СтрДлина(ИмяРегистра)-7);
		КонецЕсли;
		
		Если НЕ ВнеоборотныеАктивыЛокализация.ТребуетсяЗагрузитьТаблицыДвижений(ИмяРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Таблица.Значение.Количество() > 0 ИЛИ ЗагружатьПустойНабор)
			И Движения.Найти(ИмяРегистра) <> Неопределено Тогда
			Движения[ИмяРегистра].Записывать = Истина;
			Движения[ИмяРегистра].Загрузить(Таблица.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора)

	МассивШтрихкодов = Новый Массив;
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		Для каждого СтрокаШтрихкод Из ДанныеШтрихкодов Цикл
			Если ЗначениеЗаполнено(СтрокаШтрихкод.Штрихкод) Тогда
				МассивШтрихкодов.Добавить(СтрокаШтрихкод.Штрихкод);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкодов.Штрихкод) Тогда
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов.Штрихкод);
	КонецЕсли;
	
	Если МассивШтрихкодов.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли; 
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивШтрихкодов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
	|	ОбъектыЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|ГДЕ
	|	ОбъектыЭксплуатации.ИнвентарныйНомер В(&МассивШтрихкодов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыЭксплуатации.Наименование,
	|	ОбъектыЭксплуатации.ИнвентарныйНомер";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивОбъектов = Результат.ВыгрузитьКолонку("Ссылка");
	
	НеНайдены = Новый Массив;
	Для каждого Штрихкод Из МассивШтрихкодов Цикл
		Если Результат.Найти(Штрихкод, "ИнвентарныйНомер") = Неопределено Тогда
			НеНайдены.Добавить(Штрихкод);
		КонецЕсли; 
	КонецЦикла; 
	
	НеПодходят = Новый Массив;
	Если ПараметрыПодбора <> Неопределено Тогда
		НеПодходят = УдалитьОбъектыЭксплуатацииНеСоответствующиеОтбору(МассивОбъектов, ПараметрыПодбора);
	КонецЕсли; 
	
	Результат = Новый Структура;
	Результат.Вставить("МассивОбъектов", МассивОбъектов);
	Результат.Вставить("НеПодходят", НеПодходят);
	Результат.Вставить("НеНайдены", НеНайдены);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
