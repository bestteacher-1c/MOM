////////////////////////////////////////////////////////////////////////////////
// Процедуры, используемые для локализации документа "Изменение параметров НМА".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Прочее

// Добавляет в текст запроса реквизиты шапки документа.
//  Реквизиты добавляются вместо параметра "&ИзменениеПараметровНМА_РеквизитыДокумента".
//
// Параметры:
//  ТекстЗапроса - Строка				 - Исходный текст запроса.
//  ИмяТаблицы	 - Строка, Неопределено	 - Синоним таблицы документа в запросе.
//  	Для получения пустых значений нужно передать "Неопределено".
//
Процедура ДобавитьВТекстЗапросаРеквизитыДокумента(ТекстЗапроса, ИмяТаблицы = Неопределено) Экспорт

	ПоляЛокализации = "NULL";
	
	//++ Локализация
	
	Если ИмяТаблицы = Неопределено Тогда
		ПоляЛокализации = 
		"	ЛОЖЬ КАК НачислятьАмортизациюНУ,
		|	ЛОЖЬ КАК НачислятьАмортизациюНУФлаг,
		|	0    КАК СпециальныйКоэффициентНУ,
		|	ЛОЖЬ КАК СпециальныйКоэффициентНУФлаг";
	Иначе
		ПоляЛокализации = 
		"	ДанныеДокумента.НачислятьАмортизациюНУ КАК НачислятьАмортизациюНУ,
		|	ДанныеДокумента.НачислятьАмортизациюНУФлаг КАК НачислятьАмортизациюНУФлаг,
		|	ДанныеДокумента.СпециальныйКоэффициентНУ КАК СпециальныйКоэффициентНУ,
		|	ДанныеДокумента.СпециальныйКоэффициентНУФлаг КАК СпециальныйКоэффициентНУФлаг";
	КонецЕсли; 
	
	ПоляЛокализации = СтрЗаменить(ПоляЛокализации, "Таблица", ИмяТаблицы);
	
	//-- Локализация

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзменениеПараметровНМА_РеквизитыДокумента", ПоляЛокализации);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	Движения = Объект.Движения;
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	
	//++ Локализация
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(Объект, ДополнительныеСвойства, Движения, Отказ);
	
	
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("АмортизационныеРасходы.ОрганизацияПолучательРасходов");
	
	ПроверитьЗаполнениеПараметров(Объект, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект.<Имя документа> - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРегУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	//++ Локализация
	
	СписокЗапросов = Новый Массив;
	
	ВнеоборотныеАктивыЛокализация.ТекстЗапросаПеремещениеСтоимостиНМА(СписокЗапросов);
	ВнеоборотныеАктивыЛокализация.ТекстЗапросаПеремещениеАмортизацииНМА(СписокЗапросов);
	
	Возврат СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	//-- Локализация
	Возврат "";
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	//++ Локализация

	Возврат "";

	//-- Локализация
	Возврат "";
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация
	
	ТекстЗапросаТаблицаПорядокУчетаНМАБУ(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСчетаБухгалтерскогоУчетаНМА(ТекстыЗапроса, Регистры);
	
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(ТекстыЗапроса, Регистры);
	
	
	//-- Локализация
	
КонецПроцедуры

Процедура ПроверитьСтрокуАмортизационныеРасходы(Объект, ДанныеСтроки, Отказ) Экспорт

	//++ Локализация
	
	ШаблонПолучатель = НСтр("ru='Не заполнено поле ""Организация-получатель расходов"" в строке ""%1"" списка ""Амортизационные расходы"".'");
	Если ДанныеСтроки.ПередаватьРасходыВДругуюОрганизацию
		И Не ЗначениеЗаполнено(ДанныеСтроки.ОрганизацияПолучательРасходов) Тогда
		Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("АмортизационныеРасходы", ДанныеСтроки.НомерСтроки, "ОрганизацияПолучательРасходов");
		ТекстСообщения = СтрШаблон(ШаблонПолучатель, ДанныеСтроки.НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьБлокировкуДанныхПриПроведении(Объект, Блокировка) Экспорт

	//++ Локализация
	
	Если Объект.ОтражатьВРеглУчете Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПараметрыАмортизацииНМАБУ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Объект.НМА;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("НематериальныйАктив", "НематериальныйАктив");
		ЭлементБлокировки.УстановитьЗначение("Организация", Объект.Организация);
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПараметрыАмортизацииНМАБУ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Объект.НМА;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("НематериальныйАктив", "НематериальныйАктив");
		ЭлементБлокировки.УстановитьЗначение("Организация", Объект.Организация);
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

Функция ПараметрыВыбраны(Объект) Экспорт

	ПараметрыВыбраны = Истина;
	
	//++ Локализация
	
	ПараметрыВыбраны =
		Объект.НачислятьАмортизациюНУФлаг
		ИЛИ Объект.СпециальныйКоэффициентНУФлаг;

	//-- Локализация
	
	Возврат ПараметрыВыбраны;
	
КонецФункции
 
#КонецОбласти

#Область ФормаДокумента

Процедура УстановитьУсловноеОформление(Форма) Экспорт

	//++ Локализация
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	#Область АмортизационныеРасходыОрганизацияПолучательРасходов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АмортизационныеРасходыОрганизацияПолучательРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.АмортизационныеРасходы.ПередаватьРасходыВДругуюОрганизацию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область НеПринятКУчету_Регл
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НМАНачислятьАмортизациюНУ.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НМАСпециальныйКоэффициентНУ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НМА.ПринятКУчетуРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не принят к учету>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	#КонецОбласти
	
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаДляЗаполненияТекущихЗначенийПараметров(ТекстЗапроса) Экспорт

	//++ Локализация
	
	ТекстПоля =
	"	,ЕСТЬNULL(СпециальныйКоэффициентНалоговыйУчет.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициентНУ,
	|	ЕСТЬNULL(ПорядокУчетаНМАБУ.НачислятьАмортизациюНУ, 0) КАК НачислятьАмортизациюНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМА.ДокументПринятияКУчетуБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПринятКУчетуРегл";
	
	ТекстСоединение =
	"		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И Регистратор <> &Ссылка
	|					И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМАБУ
	|		ПО (ПорядокУчетаНМАБУ.НематериальныйАктив = НематериальныеАктивы.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И Регистратор <> &Ссылка
	|					И НематериальныйАктив В (&СписокНМА)) КАК СпециальныйКоэффициентНалоговыйУчет
	|		ПО (СпециальныйКоэффициентНалоговыйУчет.НематериальныйАктив = НематериальныеАктивы.Ссылка)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПОЛЯ_ЛОКАЛИЗАЦИЯ//", ТекстПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СОЕДИНЕНИЕ_ЛОКАЛИЗАЦИЯ//", ТекстСоединение);
	
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьИнформациюВПодвале(Объект, ЗаголовокНадписи) Экспорт

	//++ Локализация
	
	Если ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса()) < ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4() Тогда
		Если ЗаголовокНадписи.Количество() <> 0 Тогда
			ЗаголовокНадписи.Добавить(Символы.ПС);
		КонецЕсли;
		ЗаголовокНадписи.Добавить(НСтр("ru = 'Документ введен для перехода на учет внеоборотных активов версии 2.4'"));
	КонецЕсли; 
	
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

//++ Локализация

Процедура ТекстЗапросаТаблицаПорядокУчетаНМАБУ(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПорядокУчетаНМАБУ";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, "Документ.ИзменениеПараметровНМА2_4");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	&Организация КАК Организация,
	|	
	|	ПорядокУчета.Состояние КАК Состояние,
	|	ПорядокУчета.НачислятьАмортизациюБУ КАК НачислятьАмортизациюБУ,
	|	ВЫБОР
	|		КОГДА &НачислятьАмортизациюНУФлаг
	|			ТОГДА &НачислятьАмортизациюНУ
	|		ИНАЧЕ ПорядокУчета.НачислятьАмортизациюНУ
	|	КОНЕЦ КАК НачислятьАмортизациюНУ,
	|	ВЫБОР
	|		КОГДА &АмортизационныеРасходыФлаг
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ПорядокУчета.СпособОтраженияРасходов
	|	КОНЕЦ КАК СпособОтраженияРасходов,
	|	ВЫБОР
	|		КОГДА &АмортизационныеРасходыФлаг
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПорядокУчета.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА &АмортизационныеРасходыФлаг
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПорядокУчета.АналитикаРасходов
	|	КОНЕЦ КАК АналитикаРасходов,
	|	ВЫБОР
	|		КОГДА &АмортизационныеРасходыФлаг
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ПорядокУчета.ПередаватьРасходыВДругуюОрганизацию
	|	КОНЕЦ КАК ПередаватьРасходыВДругуюОрганизацию,
	|	ВЫБОР
	|		КОГДА &АмортизационныеРасходыФлаг
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ ПорядокУчета.ОрганизацияПолучательРасходов
	|	КОНЕЦ КАК ОрганизацияПолучательРасходов
	|ИЗ
	|	Документ.ИзменениеПараметровНМА2_4.НМА КАК ТаблицаНМА
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(
	|				&Период,
	|				Регистратор <> &Ссылка
	|				И &Организация = Организация
	|				И НематериальныйАктив В
	|						(ВЫБРАТЬ СписокНМА.НематериальныйАктив ИЗ ВтСписокНМА КАК СписокНМА)
	|			) КАК ПорядокУчета
	|		ПО
	|			ПорядокУчета.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|	И &ОтражатьВРеглУчете
	|	И (&АмортизационныеРасходыФлаг
	|		ИЛИ &НачислятьАмортизациюНУФлаг)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаНачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                         КАК Регистратор,
	|	&Период                         КАК Период,
	|	ТаблицаНМА.НематериальныйАктив  КАК НематериальныйАктив,
	|	&Организация                    КАК Организация,
	|	&СпециальныйКоэффициентНУ       КАК СпециальныйКоэффициент
	|ИЗ
	|	Документ.ИзменениеПараметровНМА2_4.НМА КАК ТаблицаНМА
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|	И &ОтражатьВРеглУчете
	|	И &СпециальныйКоэффициентНУФлаг
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаСчетаБухгалтерскогоУчетаНМА(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СчетаБухгалтерскогоУчетаНМА";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                                 КАК Регистратор,
	|	&Период                                 КАК Период,
	|	ТаблицаНМА.НематериальныйАктив          КАК НематериальныйАктив,
	|	&Организация                            КАК Организация,
	|	&ГруппаФинансовогоУчета                 КАК ГруппаФинансовогоУчета
	|ИЗ
	|	Документ.ИзменениеПараметровНМА2_4.НМА КАК ТаблицаНМА
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|	И &ГруппаФинансовогоУчетаФлаг
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка КАК Документ,
	|	&Период КАК Период,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете) КАК Статус
	|ГДЕ
	|	&Период >= &ДатаНачалаУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПараметров(Объект, Отказ)
	
	Если Объект.ГруппаФинансовогоУчетаФлаг 
		И (НЕ Объект.ОтражатьВРеглУчете ИЛИ НЕ Объект.ОтражатьВУпрУчете) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(
		|				&Дата,
		|				Регистратор <> &Ссылка
		|					И Организация = &Организация
		|					И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаБУ
		|		ПО (ПорядокУчетаБУ.НематериальныйАктив = НематериальныеАктивы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|				&Дата,
		|				Регистратор <> &Ссылка
		|					И Организация = &Организация
		|					И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаУУ
		|		ПО (ПорядокУчетаУУ.НематериальныйАктив = НематериальныеАктивы.Ссылка)
		|ГДЕ
		|	НематериальныеАктивы.Ссылка В(&СписокНМА)
		|	И ПорядокУчетаБУ.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
		|	И ПорядокУчетаУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("СписокНМА", Объект.НМА.ВыгрузитьКолонку("НематериальныйАктив"));
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо отразить изменение параметров в управленческом и регламентированном учетах, т.к. изменяется группа финансового учета и выбраны нематериальные активы (расходы на НИОКР), которые приняты в обоих учетах'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ВариантОтраженияВУчете");
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры


//-- Локализация

#КонецОбласти

#КонецОбласти
