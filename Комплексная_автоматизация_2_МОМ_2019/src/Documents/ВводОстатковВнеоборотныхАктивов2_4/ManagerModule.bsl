#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Команды

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = Документы.ИзменениеПараметровОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		СписокОпераций = Новый Массив;
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств);
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе);
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаНаБалансе);
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, "ХозяйственнаяОперация", СписокОпераций, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Представление = ВнеоборотныеАктивыВызовСервера.ПредставлениеВводаОстатков(Данные);
	Если Не ПустаяСтрока(Представление) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ХозяйственнаяОперация = Неопределено;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ХозяйственнаяОперация = ВнеоборотныеАктивыВызовСервера.ОперацияВводаОстатков(Параметры.Ключ);
	ИначеЕсли Параметры.Свойство("Отбор") Тогда
		Параметры.Отбор.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
		Параметры.ЗначенияЗаполнения.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		ХозяйственнаяОперация = ВнеоборотныеАктивыВызовСервера.ОперацияВводаОстатков(Параметры.ЗначениеКопирования);
	ИначеЕсли Параметры.Свойство("ОтборПоТипамОпераций") И Параметры.ОтборПоТипамОпераций.Количество() = 1 Тогда
		ХозяйственнаяОперация = Параметры.ОтборПоТипамОпераций[0].Значение;
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
		Если Параметры.Свойство("Организация") Тогда
			ЗначенияЗаполнения.Вставить("Организация", Параметры.Организация);
		КонецЕсли;
		Параметры.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ОсновныеСредства";
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "НематериальныеАктивы";
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ВложенияВоВнеоборотныеАктивы";
		
	КонецЕсли;
		
	ВнеоборотныеАктивыВызовСервера.ОбработкаПолученияФормы_ВводОстатковВнеоборотныхАктивов(
		ХозяйственнаяОперация, ВыбраннаяФорма, СтандартнаяОбработка);
		
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Определяет состав документов и хозяйственных операций, доступных для отображения в рабочем месте.
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка
//  ОтборХозяйственныеОперации		 - СписокЗначений - список значений типа ПеречислениеСсылка.ХозяйственныеОперации
//  ОтборТипыДокументов				 - СписокЗначений - список значений типа СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  КлючНазначенияИспользования		 - Строка - ключ рабочего места для которого вызывается функция
//  ДокументыКОформлению			 - Булево - признак вызова метода для формы "ФормаСпискаКОформлению".
//
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка.
//
//
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ДокументыКОформлению = Ложь) Экспорт
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков основных средств'");
	Строка.Порядок                      = 1;
	Строка.ГруппаКнопок                 = "ОС";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков нематериальных активов и расходов на НИОКР'");
	Строка.Порядок                      = 4;
	Строка.ГруппаКнопок                 = "НМА";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков вложений во внеоборотные активы'");
	Строка.Порядок                      = 9;
	Строка.ГруппаКнопок                 = "Прочее";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ДополнитьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы);
	
	Если КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНастроек);
	
	Возврат ТаблицаЗначенийДоступно;
		
КонецФункции

Функция КлючНазначенияФормыПоУмолчанию() Экспорт
	
	Возврат "ДокументыОС";
	
КонецФункции

Функция ЗаполнитьРеквизитыВзависимостиОтСвойств(ОбъектИлиДанныеСтроки, ВспомогательныеРеквизиты, ПараметрыРеквизитовОбъекта) Экспорт

	ИзмененныеРеквизиты = Новый Массив;
	
	ЭтоНМА = (ВспомогательныеРеквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР);
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Истина Тогда
			Действие = "Очистить";
		ИначеЕсли ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Истина Тогда
			Действие = "Заполнить";
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Действие = "Очистить"
			И (ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьУУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ПервоначальнаяСтоимостьУУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияУУ") Тогда
			
			ОбъектИлиДанныеСтроки[ПараметрыРеквизита.ИмяРеквизита] = 0;
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаУУ" Тогда
			
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию,
				Неопределено,
				ИзмененныеРеквизиты);

		ИначеЕсли ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюУУ" Тогда
			
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				Истина,
				Ложь,
				ИзмененныеРеквизиты);
				
		ИначеЕсли ПараметрыРеквизита.ИмяРеквизита = "МетодНачисленияАмортизацииУУ" Тогда
			
			ЗначениеРеквизита = ?(ЭтоНМА, Перечисления.СпособыНачисленияАмортизацииНМА.Линейный, 
											Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				ЗначениеРеквизита,
				Неопределено,
				ИзмененныеРеквизиты);

		ИначеЕсли ПараметрыРеквизита.ИмяРеквизита = "СрокИспользованияУУ" Тогда
			
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				ОбъектИлиДанныеСтроки.СрокИспользованияБУ,
				0,
				ИзмененныеРеквизиты);

		ИначеЕсли ПараметрыРеквизита.ИмяРеквизита = "КоэффициентУскоренияУУ" Тогда
		
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				1,
				0,
				ИзмененныеРеквизиты);
				
		КонецЕсли;
		
		ВводОстатковВнеоборотныхАктивовЛокализация.ЗаполнитьРеквизитыВзависимостиОтСвойств(
			ОбъектИлиДанныеСтроки, ВспомогательныеРеквизиты, ПараметрыРеквизита, Действие, ИзмененныеРеквизиты);
			
	КонецЦикла; 
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");
	
КонецФункции

Функция ВспомогательныеРеквизиты(Объект, ЭтоДанныеСтроки) Экспорт

	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВБУиНУ", Объект.ОтражатьВБУиНУ);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВОперативномУчете", Объект.ОтражатьВОперативномУчете);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВУУ", Объект.ОтражатьВУУ);
	ВспомогательныеРеквизиты.Вставить("Организация", Объект.Организация);
	ВспомогательныеРеквизиты.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ВспомогательныеРеквизиты.Вставить("Дата", Объект.Дата);
	ВспомогательныеРеквизиты.Вставить("ДатаНачалаУчета", '000101010000');
	ВспомогательныеРеквизиты.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	ВспомогательныеРеквизиты.Вставить("ИспользоватьРеглУчет", ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"));
	ВспомогательныеРеквизиты.Вставить("ПорядокУчетаВНАВУпрУчете", Константы.ПорядокУчетаВНАВУпрУчете.Получить());
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ВспомогательныеРеквизиты.Вставить("ВалютыСовпадают", ВалютаУпр = ВалютаРегл);
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ДополнитьВспомогательныеРеквизиты(Объект, ВспомогательныеРеквизиты);
	
	ВспомогательныеРеквизиты = Новый ФиксированнаяСтруктура(ВспомогательныеРеквизиты);
	
	Если ЭтоДанныеСтроки Тогда
		Возврат ДополнитьВспомогательныеРеквизитыПоДаннымСтроки(Объект, Объект, ВспомогательныеРеквизиты);
	КонецЕсли; 
	
	Возврат ВспомогательныеРеквизиты;
	
КонецФункции

Функция ДополнитьВспомогательныеРеквизитыПоДаннымСтроки(Объект, ДанныеСтроки, ИсходныеВспомогательныеРеквизиты) Экспорт

	ВспомогательныеРеквизиты = Новый Структура(ИсходныеВспомогательныеРеквизиты);
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ДополнитьВспомогательныеРеквизитыПоДаннымСтроки(Объект, ДанныеСтроки, ВспомогательныеРеквизиты);
	
	Возврат Новый ФиксированнаяСтруктура(ВспомогательныеРеквизиты);
	
КонецФункции

// Формирование списка доступных типов операций ввода начальных остатков.
//
// Параметры:
// 		СписокТиповОпераций - СписокЗначений - Возврат, Список значений операций документа.
//
Процедура ЗаполнитьСписокТиповОперацийДокумента(СписокТиповОпераций) Экспорт
	
	СписокТиповОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств);
	СписокТиповОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР);
	СписокТиповОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы);
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ДополнитьСписокТиповОперацийДокумента(СписокТиповОпераций);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоУмолчанию(ДанныеСтроки, Объект) Экспорт
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ГруппаФинансовогоУчета) Тогда
			ДанныеСтроки.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ЗначениеПоУмолчанию(
													Перечисления.ВидыВнеоборотныхАктивов.ОсновноеСредство);
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР Тогда	
		
		ВидАктива = ?(ДанныеСтроки.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР, 
						Перечисления.ВидыВнеоборотныхАктивов.НИОКР, 
						Перечисления.ВидыВнеоборотныхАктивов.НМА);
				
		ДанныеСтроки.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ЗначениеПоУмолчанию(ВидАктива);
		
	КонецЕсли; 
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ЗаполнитьЗначенияПоУмолчанию(ДанныеСтроки, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ВводОстатковВнеоборотныхАктивов2_4";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	
	ВЗапросеЕстьИсточник = Истина;
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	ТекстЗапроса = Неопределено;
	СинонимТаблицыДокумента = Неопределено;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
				
	ИначеЕсли ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
				
	ИначеЕсли ИмяРегистра = "ДокументыПоНМА" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДокументыПоНМА(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		
		ТекстЗапроса = ВводОстатковВнеоборотныхАктивовЛокализация.АдаптированныйТекстЗапросаДвиженийПоРегистру(
							ИмяРегистра, ПереопределениеРасчетаПараметров, СинонимТаблицыДокумента);
		
	КонецЕсли;
				
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС"
		ИЛИ ИмяРегистра = "ДокументыПоНМА" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДокументыПоНМА(Запрос, ТекстыЗапроса, Регистры);
	
	// ОС
	ТекстЗапросаТаблицаПервоначальныеСведенияОС(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСтоимостьОС(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаАмортизацияОС(ТекстыЗапроса, Регистры);
	
	// НМА
	ТекстЗапросаТаблицаПервоначальныеСведенияНМА(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаМестоУчетаНМА(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПорядокУчетаНМА(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПорядокУчетаНМАУУ(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСтоимостьНМА(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаАмортизацияНМА(ТекстыЗапроса, Регистры);
	
	// Общее
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                               КАК Ссылка,
	|	ДанныеДокумента.Дата                                 КАК Период,
	|	ДанныеДокумента.Номер                                КАК Номер,
	|	ДанныеДокумента.Организация                          КАК Организация,
	|	ДанныеДокумента.Местонахождение                      КАК Местонахождение,
	|	ДанныеДокумента.ХозяйственнаяОперация                КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Ответственный                        КАК Ответственный,
	|	ДанныеДокумента.Комментарий                          КАК Комментарий,
	|	ДанныеДокумента.Проведен                             КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления                      КАК ПометкаУдаления,
	|	ДанныеДокумента.ОтражатьВРеглУчете                   КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете                    КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.ОтражатьВБУиНУ                       КАК ОтражатьВБУиНУ,
	|	ДанныеДокумента.ОтражатьВОперативномУчете            КАК ОтражатьВОперативномУчете,
	|	ДанныеДокумента.ОтражатьВУУ                          КАК ОтражатьВУУ,
	|	ДанныеДокумента.ГруппаФинансовогоУчета               КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.ВидАктивов                           КАК ВидАктивов,
	|	&ВводОстатковВнеоборотныхАктивов_РеквизитыШапки
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ДобавитьВТекстЗапросаРеквизитыШапки(ТекстЗапроса, "ДанныеДокумента");
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВводОстатковВнеоборотныхАктивов2_4"));
	ЗначенияПараметровПроведения.Вставить("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru='Ввод остатков внеоборотных активов'"));
	ЗначенияПараметровПроведения.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли; 
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ДополнитьЗначенияПараметровПроведения(Реквизиты, ЗначенияПараметровПроведения);
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Местонахождение                        КАК Подразделение,
	|	&Контрагент                             КАК Контрагент,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&Период  КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоОС";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОС.НомерСтроки-1, 0)    КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	ВЫБОР 
	|		КОГДА &ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС), 
	|										ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе))
	|			ТОГДА ТаблицаОС.Подразделение
	|		ИНАЧЕ &Местонахождение
	|	КОНЕЦ                                   КАК Подразделение,
	|	&Проведен                               КАК Проведен,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковОсновныхСредств),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПредметовЛизингаНаБалансе))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОС.НомерСтроки-1, 0)    КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Местонахождение                        КАК Подразделение,
	|	&Проведен                               КАК Проведен,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4.АрендованныеОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПредметовЛизингаЗаБалансом),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАрендованныхОС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаДокумента.НомерСтроки-1, 0) КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	ТаблицаДокумента.Подразделение          КАК Подразделение,
	|	&Проведен                               КАК Проведен,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	ТаблицаДокумента.ВнеоборотныйАктив      КАК ОсновноеСредство
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4.ПрочиеРасходы КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы)
	|	И &ВидАктивов = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоНМА(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоНМА";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаДокумента.НомерСтроки-1, 0) КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Местонахождение                        КАК Подразделение,
	|	&Проведен                               КАК Проведен,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	ТаблицаДокумента.НематериальныйАктив    КАК НематериальныйАктив
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4.НМА КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаДокумента.НомерСтроки-1, 0) КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Местонахождение                        КАК Подразделение,
	|	&Проведен                               КАК Проведен,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	ТаблицаДокумента.ВнеоборотныйАктив      КАК НематериальныйАктив
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4.ПрочиеРасходы КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы)
	|	И &ВидАктивов = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаПервоначальныеСведенияОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПервоначальныеСведенияОС";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковВнеоборотныхАктивовЛокализация.ТекстЗапросаТаблицаПервоначальныеСведенияОС(ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Ссылка                         КАК Регистратор,
		|	&Период                         КАК Период,
		|	ТаблицаОС.ОсновноеСредство      КАК ОсновноеСредство,
		|	&Организация                    КАК Организация,
		|	ТаблицаОС.ДатаПринятияКУчетуУУ  КАК ДатаВводаВЭксплуатациюУУ,
		|	&Ссылка                         КАК ДокументВводаВЭксплуатациюУУ,
		|	ТаблицаОС.ПорядокУчетаУУ        КАК ПорядокУчетаУУ,
		|	ТаблицаОС.ПервоначальнаяСтоимостьБУ ПервоначальнаяСтоимостьБУ,
		|	ТаблицаОС.ПервоначальнаяСтоимостьУУ ПервоначальнаяСтоимостьУУ
		|ИЗ
		|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &ОтражатьВОперативномУчете";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПервоначальныеСведенияНМА(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПервоначальныеСведенияНМА";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковВнеоборотныхАктивовЛокализация.ТекстЗапросаТаблицаПервоначальныеСведенияНМА(ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Ссылка                                КАК Регистратор,
		|	&Период                                КАК Период,
		|	ТаблицаДокумента.НематериальныйАктив   КАК НематериальныйАктив,
		|	&Организация                           КАК Организация,
		|
		|	ТаблицаДокумента.ДатаПриобретения      КАК ДатаПриобретения,
		|	ТаблицаДокумента.ДатаПринятияКУчетуУУ  КАК ДатаПринятияКУчетуУУ,
		|
		|	&Ссылка                                КАК ДокументПринятияКУчетуУУ,
		|
		|	ТаблицаДокумента.ПервоначальнаяСтоимостьУУ КАК ПервоначальнаяСтоимостьУУ
		|ИЗ
		|	Документ.ВводОстатковВнеоборотныхАктивов2_4.НМА КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И &ОтражатьВОперативномУчете";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестонахождениеОС";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковВнеоборотныхАктивовЛокализация.ТекстЗапросаТаблицаМестонахождениеОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Ссылка                                      КАК Регистратор,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
		|	ТаблицаОС.МОЛ                                КАК МОЛ,
		|	&Местонахождение                             КАК Местонахождение,
		|	ТаблицаОС.АдресМестонахождения               КАК АдресМестонахождения,
		|	ТаблицаОС.АдресМестонахожденияЗначение       КАК АдресМестонахожденияЗначение,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете
		|ИЗ
		|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ТаблицаОС
		|	И &ОтражатьВОперативномУчете";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаМестоУчетаНМА(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестоУчетаНМА";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                       КАК Регистратор,
	|	&Период                       КАК Период,
	|	&Организация                  КАК Организация,
	|	Таблица.НематериальныйАктив   КАК НематериальныйАктив,
	|	&Местонахождение              КАК Подразделение,
	|	&ОтражатьВРеглУчете           КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете            КАК ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.НМА КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОС";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковВнеоборотныхАктивовЛокализация.ТекстЗапросаТаблицаПорядокУчетаОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Ссылка                                 КАК Регистратор,
		|	&Период                                 КАК Период,
		|	&Организация                            КАК Организация,
		|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство,
		|	ТаблицаОС.ГруппаФинансовогоУчета        КАК ГруппаФинансовогоУчета,
		|	ТаблицаОС.ОсновноеСредство.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаОС.ПоказательНаработки           КАК ПоказательНаработки,
		|	ТаблицаОС.ОбъемНаработки                КАК ОбъемНаработки,
		|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете
		|ИЗ
		|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &ОтражатьВОперативномУчете";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаНМА(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаНМА";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Регистратор,
	|	&Период                                 КАК Период,
	|	&Организация                            КАК Организация,
	|	Таблица.НематериальныйАктив             КАК НематериальныйАктив,
	|	Таблица.ГруппаФинансовогоУчета          КАК ГруппаФинансовогоУчета,
	|	Таблица.НематериальныйАктив.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Таблица.ОбъемНаработки                  КАК ОбъемНаработки,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.НМА КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОСУУ";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                          КАК Регистратор,
	|	&Период                                          КАК Период,
	|	&Организация                                     КАК Организация,
	|	ТаблицаОС.ОсновноеСредство                       КАК ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК Состояние,
	|	ТаблицаОС.НачислятьАмортизациюУУ                 КАК НачислятьАмортизациюУУ,
	|	ВЫБОР КОГДА ТаблицаОС.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|		ТОГДА ТаблицаОС.СтатьяРасходовБУ
	|		ИНАЧЕ ТаблицаОС.СтатьяРасходовУУ 
	|	КОНЕЦ                                            КАК СтатьяРасходов,
	|	ВЫБОР КОГДА ТаблицаОС.АналитикаРасходовУУ = НЕОПРЕДЕЛЕНО
	|		ТОГДА ТаблицаОС.АналитикаРасходовБУ
	|		ИНАЧЕ ТаблицаОС.АналитикаРасходовУУ 
	|	КОНЕЦ                                            КАК АналитикаРасходов,
	|	ТаблицаОС.ПередаватьРасходыВДругуюОрганизацию    КАК ПередаватьРасходыВДругуюОрганизацию,
	|	ТаблицаОС.ОрганизацияПолучательРасходов          КАК ОрганизацияПолучательРасходов
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете
	|	И &ОтражатьВОперативномУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаНМАУУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаНМАУУ";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                          КАК Регистратор,
	|	&Период                                          КАК Период,
	|	&Организация                                     КАК Организация,
	|	Таблица.НематериальныйАктив                      КАК НематериальныйАктив,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету) КАК Состояние,
	|	Таблица.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию) КАК НачислятьАмортизациюУУ,
	|	ВЫБОР КОГДА Таблица.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|		ТОГДА Таблица.СтатьяРасходовБУ
	|		ИНАЧЕ Таблица.СтатьяРасходовУУ 
	|	КОНЕЦ                                            КАК СтатьяРасходов,
	|	ВЫБОР КОГДА Таблица.АналитикаРасходовУУ = НЕОПРЕДЕЛЕНО
	|		ТОГДА Таблица.АналитикаРасходовБУ
	|		ИНАЧЕ Таблица.АналитикаРасходовУУ 
	|	КОНЕЦ                                            КАК АналитикаРасходов,
	|	Таблица.ПередаватьРасходыВДругуюОрганизацию      КАК ПередаватьРасходыВДругуюОрганизацию,
	|	Таблица.ОрганизацияПолучательРасходов            КАК ОрганизацияПолучательРасходов
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.НМА КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете
	|	И &ОтражатьВОперативномУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииОСУУ";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                      КАК Регистратор,
	|	&Период                                      КАК Период,
	|	ВЫБОР 
	|		КОГДА ТаблицаОС.ЕстьИзменениеПараметровАмортизацииУУ
	|			ТОГДА ТаблицаОС.ДатаИзмененияПараметровУУ
	|		КОГДА &Период < &ДатаНачалаУчета
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, 1)
	|		ИНАЧЕ ТаблицаОС.ДатаПринятияКУчетуУУ 
	|	КОНЕЦ                                        КАК ДатаПоследнегоИзменения,
	|	&Организация                                 КАК Организация,
	|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
	|	ТаблицаОС.СрокИспользованияУУ                КАК СрокИспользования,
	|	ВЫБОР 
	|		КОГДА ТаблицаОС.ЕстьИзменениеПараметровАмортизацииУУ
	|			ТОГДА ТаблицаОС.СрокИспользованияУУОстаточный
	|		ИНАЧЕ ТаблицаОС.СрокИспользованияУУ 
	|	КОНЕЦ                                        КАК СрокИспользованияДляВычисленияАмортизации,
	|	ВЫБОР 
	|		КОГДА ТаблицаОС.ЕстьИзменениеПараметровАмортизацииУУ
	|			ТОГДА ОбъемНаработкиОстаточныйУУ 
	|		ИНАЧЕ ТаблицаОС.ОбъемНаработки 
	|	КОНЕЦ                                        КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаОС.КоэффициентУскоренияУУ             КАК КоэффициентУскорения,
	|	ТаблицаОС.МетодНачисленияАмортизацииУУ       КАК МетодНачисленияАмортизации,
	|	ТаблицаОС.ЛиквидационнаяСтоимость            КАК ЛиквидационнаяСтоимость,
	|	ТаблицаОС.ЛиквидационнаяСтоимостьРегл        КАК ЛиквидационнаяСтоимостьРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаОС.ЕстьИзменениеПараметровАмортизацииУУ
	|			ТОГДА ТаблицаОС.СтоимостьДляВычисленияАмортизацииУУ
	|		ИНАЧЕ ТаблицаОС.ТекущаяСтоимостьУУ
	|	КОНЕЦ                                        КАК СтоимостьДляВычисленияАмортизации,
	|	ВЫБОР 
	|		КОГДА &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА 0
	|		КОГДА ТаблицаОС.ЕстьИзменениеПараметровАмортизацииУУ
	|			ТОГДА ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ
	|		ИНАЧЕ ТаблицаОС.ТекущаяСтоимостьБУ
	|	КОНЕЦ                                        КАК СтоимостьДляВычисленияАмортизацииРегл
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете
	|	И &ОтражатьВОперативномУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииНМАУУ";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                      КАК Регистратор,
	|	&Период                                      КАК Период,
	|	&Организация                                 КАК Организация,
	|	Таблица.НематериальныйАктив                  КАК НематериальныйАктив,
	|	Таблица.СрокИспользованияУУ                  КАК СрокИспользования,
	|	Таблица.КоэффициентУскоренияУУ               КАК КоэффициентУскорения,
	|	Таблица.МетодНачисленияАмортизацииУУ         КАК МетодНачисленияАмортизации,
	|	Таблица.ЛиквидационнаяСтоимость              КАК ЛиквидационнаяСтоимость,
	|	Таблица.ЛиквидационнаяСтоимостьРегл          КАК ЛиквидационнаяСтоимостьРегл
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.НМА КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете
	|	И &ОтражатьВОперативномУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаСтоимостьОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "СтоимостьОС";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковВнеоборотныхАктивовЛокализация.ТекстЗапросаТаблицаСтоимостьОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Ссылка                                      КАК Регистратор,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	&Местонахождение                             КАК Подразделение,
		|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
		|	ТаблицаОС.ГруппаФинансовогоУчета             КАК ГруппаФинансовогоУчета,
		|	ТаблицаОС.ОсновноеСредство.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковСтоимостиОС)  КАК ХозяйственнаяОперация,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	ТаблицаОС.ТекущаяСтоимостьУУ                 КАК Стоимость,
		|	ТаблицаОС.ТекущаяСтоимостьБУ                 КАК СтоимостьРегл,
		|	ТаблицаОС.РезервПереоценкиСтоимости          КАК РезервПереоценкиСтоимости,
		|	ТаблицаОС.РезервПереоценкиСтоимостиРегл      КАК РезервПереоценкиСтоимостиРегл
		|ИЗ
		|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &ОтражатьВОперативномУчете
		|	И (ТаблицаОС.ТекущаяСтоимостьУУ <> 0
		|		ИЛИ ТаблицаОС.ТекущаяСтоимостьБУ <> 0
		|		ИЛИ ТаблицаОС.РезервПереоценкиСтоимости <> 0
		|		ИЛИ ТаблицаОС.РезервПереоценкиСтоимостиРегл <> 0)";
	
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаАмортизацияОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "АмортизацияОС";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковВнеоборотныхАктивовЛокализация.ТекстЗапросаТаблицаАмортизацияОС();
	
	Если ТекстЗапроса = Неопределено Тогда
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
		|	&Ссылка                                      КАК Регистратор,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	&Местонахождение                             КАК Подразделение,
		|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
		|	ТаблицаОС.ГруппаФинансовогоУчета             КАК ГруппаФинансовогоУчета,
		|	ТаблицаОС.ОсновноеСредство.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАмортизацииОС)  КАК ХозяйственнаяОперация,
		|	ТаблицаОС.НакопленнаяАмортизацияУУ           КАК Амортизация,
		|	ТаблицаОС.НакопленнаяАмортизацияБУ           КАК АмортизацияРегл,
		|	ТаблицаОС.РезервПереоценкиАмортизации        КАК РезервПереоценкиАмортизации,
		|	ТаблицаОС.РезервПереоценкиАмортизацииРегл    КАК РезервПереоценкиАмортизацииРегл
		|ИЗ
		|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &ОтражатьВОперативномУчете
		|	И (ТаблицаОС.НакопленнаяАмортизацияУУ <> 0
		|		ИЛИ ТаблицаОС.НакопленнаяАмортизацияБУ <> 0
		|		ИЛИ ТаблицаОС.РезервПереоценкиАмортизации <> 0
		|		ИЛИ ТаблицаОС.РезервПереоценкиАмортизацииРегл <> 0)";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаСтоимостьНМА(ТекстыЗапроса, Регистры)

	ИмяРегистра = "СтоимостьНМА";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковВнеоборотныхАктивовЛокализация.ТекстЗапросаТаблицаСтоимостьНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Ссылка                                      КАК Регистратор,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	&Местонахождение                             КАК Подразделение,
		|	Таблица.НематериальныйАктив                  КАК НематериальныйАктив,
		|	Таблица.ГруппаФинансовогоУчета               КАК ГруппаФинансовогоУчета,
		|	Таблица.НематериальныйАктив.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковСтоимостиНМАиРасходовНаНИОКР) КАК ХозяйственнаяОперация,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	Таблица.ТекущаяСтоимостьУУ                   КАК Стоимость,
		|	Таблица.ТекущаяСтоимостьБУ                   КАК СтоимостьРегл,
		|
		|	Таблица.РезервПереоценкиСтоимости            КАК РезервПереоценкиСтоимости,
		|	Таблица.РезервПереоценкиСтоимостиРегл        КАК РезервПереоценкиСтоимостиРегл
		|ИЗ
		|	Документ.ВводОстатковВнеоборотныхАктивов2_4.НМА КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|	И &ОтражатьВОперативномУчете
		|	И (Таблица.ТекущаяСтоимостьУУ <> 0
		|		ИЛИ Таблица.ТекущаяСтоимостьБУ <> 0
		|		ИЛИ Таблица.РезервПереоценкиСтоимости <> 0
		|		ИЛИ Таблица.РезервПереоценкиСтоимостиРегл <> 0)";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаАмортизацияНМА(ТекстыЗапроса, Регистры)

	ИмяРегистра = "АмортизацияНМА";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковВнеоборотныхАктивовЛокализация.ТекстЗапросаТаблицаАмортизацияНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
		|	&Ссылка                                      КАК Регистратор,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	&Местонахождение                             КАК Подразделение,
		|	Таблица.НематериальныйАктив                  КАК НематериальныйАктив,
		|	Таблица.ГруппаФинансовогоУчета               КАК ГруппаФинансовогоУчета,
		|	Таблица.НематериальныйАктив.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАмортизацииНМАиРасходовНаНИОКР)  КАК ХозяйственнаяОперация,
		|	Таблица.НакопленнаяАмортизацияУУ             КАК Амортизация,
		|	Таблица.НакопленнаяАмортизацияБУ             КАК АмортизацияРегл,
		|	Таблица.РезервПереоценкиАмортизации          КАК РезервПереоценкиАмортизации,
		|	Таблица.РезервПереоценкиАмортизацииРегл      КАК РезервПереоценкиАмортизацииРегл
		|ИЗ
		|	Документ.ВводОстатковВнеоборотныхАктивов2_4.НМА КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|	И &ОтражатьВОперативномУчете
		|	И (Таблица.НакопленнаяАмортизацияУУ <> 0
		|		ИЛИ Таблица.НакопленнаяАмортизацияБУ <> 0
		|		ИЛИ Таблица.РезервПереоценкиАмортизации <> 0
		|		ИЛИ Таблица.РезервПереоценкиАмортизацииРегл <> 0)";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)

	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	ВтДанныеРасходы.Дата                    КАК Период,
	|	ВтДанныеРасходы.Организация             КАК Организация,
	|	ВтДанныеРасходы.Подразделение           КАК Подразделение,
	|	ВтДанныеРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВтДанныеРасходы.СтатьяРасходов          КАК СтатьяРасходов,
	|	ВтДанныеРасходы.АналитикаРасходов       КАК АналитикаРасходов,
	|	ВтДанныеРасходы.ВидДеятельностиНДС      КАК ВидДеятельностиНДС,
	|
	|	ВтДанныеРасходы.Сумма                   КАК СуммаСНДС,
	|	ВтДанныеРасходы.СуммаБезНДС             КАК СуммаБезНДС,
	|	ВтДанныеРасходы.СуммаБезНДС             КАК СуммаБезНДСУпр,
	|
	|	ВтДанныеРасходы.СуммаРегл               КАК СуммаСНДСРегл,
	|	ВтДанныеРасходы.СуммаРегл
	|		- ВтДанныеРасходы.НДСРегл           КАК СуммаБезНДСРегл,
	|	ВтДанныеРасходы.СуммаПР                 КАК ПостояннаяРазница,
	|	ВтДанныеРасходы.СуммаВР                 КАК ВременнаяРазница,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                            КАК АналитикаУчетаНоменклатуры
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	ВтДанныеРасходы КАК ВтДанныеРасходы";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтДанныеРасходы";
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Организация                                       КАК Организация,
	|	&Период                                            КАК Дата,
	|	ДанныеДокументаРасходы.НомерСтроки                 КАК НомерСтроки,
	|	ДанныеДокументаРасходы.Подразделение               КАК Подразделение,
	|	ДанныеДокументаРасходы.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ДанныеДокументаРасходы.СтатьяРасходов              КАК СтатьяРасходов,
	|	ДанныеДокументаРасходы.ВнеоборотныйАктив           КАК АналитикаРасходов,
	|	ДанныеДокументаРасходы.Ссылка                      КАК ДокументПоступленияРасходов,
	|
	|	ТаблицаАналитикУчетаПартий.ВидЦенности			   КАК ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС	   КАК ВидДеятельностиНДС,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий    КАК АналитикаУчетаПартий,
	|
	|	ДанныеДокументаРасходы.Сумма                       КАК Сумма,
	|	ДанныеДокументаРасходы.СуммаБезНДС                 КАК СуммаБезНДС,
	|	ДанныеДокументаРасходы.СуммаРегл                   КАК СуммаРегл,
	|	0                                                  КАК НДСРегл,
	|	ДанныеДокументаРасходы.СуммаПР                     КАК СуммаПР,
	|	ДанныеДокументаРасходы.СуммаВР                     КАК СуммаВР
	|
	|ПОМЕСТИТЬ ВтДанныеРасходы
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ПрочиеРасходы КАК ДанныеДокументаРасходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО
	|		ДанныеДокументаРасходы.СтатьяРасходов = СтатьиРасходов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки = ДанныеДокументаРасходы.НомерСтроки
	|
	|ГДЕ
	|	ДанныеДокументаРасходы.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""ПрочиеРасходы""														КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 											КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)								КАК Поставщик,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)                           КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО 												            КАК СтавкаНДС,
	|	ВЫБОР КОГДА ЕСТЬNULL(Статьи.ВариантРаздельногоУчетаНДС, НЕОПРЕДЕЛЕНО) =
	|	  ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение) 
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|		ИНАЧЕ ДанныеДокумента.НалогообложениеНДС
	|	КОНЕЦ 																	КАК НалогообложениеНДС,
	|	Статьи.ВидЦенностиНДС 													КАК ВидЦенности,
	|	0																		КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ПрочиеРасходы КАК ТаблицаДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|		ПО ТаблицаДокумента.СтатьяРасходов = Статьи.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроведениеРегламентированныйУчет

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ВводОстатковВнеоборотныхАктивовЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ВводОстатковВнеоборотныхАктивовЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ВводОстатковВнеоборотныхАктивов2_4.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.4.11.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("aeb2c15d-5193-4318-91d2-cf1a047e2e03");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВводОстатковВнеоборотныхАктивов2_4.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет документы ""Ввод остатков внеоборотных активов"":
	|- Заполняет новые реквизиты ""ПР для вычисления амортизации"", ""Адрес местонахождения (значение)"", ""ОУ"", ""БУ и НУ"", ""УУ"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ПараметрыАмортизацииОСБУ.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ПараметрыАмортизацииОСУУ.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ КАК ПараметрыАмортизацииОСБУ
	|		ПО (ПараметрыАмортизацииОСБУ.Регистратор = ДанныеДокумента.Ссылка)
	|			И (ПараметрыАмортизацииОСБУ.ОсновноеСредство = ДанныеДокумента.ОсновноеСредство)
	|			И (ПараметрыАмортизацииОСБУ.ПРДляВычисленияАмортизации <> 0)
	|ГДЕ
	|	(ДанныеДокумента.ПРДляВычисленияАмортизации = 0
	|				И ДанныеДокумента.ЕстьИзменениеПараметровАмортизацииБУ
	|			ИЛИ ДанныеДокумента.АдресМестонахождения <> """"
	|				И (ВЫРАЗИТЬ(ДанныеДокумента.АдресМестонахожденияЗначение КАК СТРОКА(100))) = """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ДанныеДокумента
	|ГДЕ
	|	НЕ ДанныеДокумента.ОтражатьВОперативномУчете
	|	И НЕ ДанныеДокумента.ОтражатьВБУиНУ
	|	И НЕ ДанныеДокумента.ОтражатьВУУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ КАК ПараметрыАмортизацииОСУУ
	|		ПО (ПараметрыАмортизацииОСУУ.Регистратор = ДанныеДокумента.Ссылка)
	|			И (ПараметрыАмортизацииОСУУ.ОсновноеСредство = ДанныеДокумента.ОсновноеСредство)
	|ГДЕ
	|	(ДанныеДокумента.ЕстьИзменениеПараметровАмортизацииУУ
	|				И ДанныеДокумента.СрокИспользованияУУОстаточный <> ПараметрыАмортизацииОСУУ.СрокИспользованияДляВычисленияАмортизации
	|			ИЛИ ДанныеДокумента.СрокИспользованияУУ <> ПараметрыАмортизацииОСУУ.СрокИспользования)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ВводОстатковВнеоборотныхАктивовЛокализация.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ВводОстатковВнеоборотныхАктивов2_4";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииОСУУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСУУ.СрокИспользования КАК СрокИспользования,
	|	ПараметрыАмортизацииОСУУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСУУ КАК ПараметрыАмортизацииОСУУ
	|ГДЕ
	|	ПараметрыАмортизацииОСУУ.Регистратор = &Регистратор";
	ЗапросПараметрыАмортизацииОСУУ = Новый Запрос(ТекстЗапроса);
	
	ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	ВестиУУНаПланеСчетовХозрасчетный = ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
	
	//++ Локализация
	ДатаНачалаУчета = Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить();
	//-- Локализация
	
 	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
 		Попытка
			
 			Блокировка = Новый БлокировкаДанных;
 			ЭлементБлокировки = Блокировка.Добавить("Документ.ВводОстатковВнеоборотныхАктивов2_4");
 			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
 			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПараметрыАмортизацииОСБУ.НаборЗаписей");
 			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			Блокировка.Заблокировать();
 			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
 				Продолжить;
 			КонецЕсли;
			
			Если НЕ ДанныеОбъекта.ОтражатьВОперативномУчете
				И НЕ ДанныеОбъекта.ОтражатьВБУиНУ
				И НЕ ДанныеОбъекта.ОтражатьВУУ Тогда
				
				ДанныеОбъекта.ОтражатьВОперативномУчете = Истина;
				
				ДанныеОбъекта.ОтражатьВБУиНУ = 
					ДанныеОбъекта.ОтражатьВРеглУчете 
					И ИспользоватьРеглУчет
					И ДанныеОбъекта.Дата >= ДатаНачалаУчета;
				
				ДанныеОбъекта.ОтражатьВУУ = 
					ДанныеОбъекта.ОтражатьВРеглУчете 
					И ИспользоватьРеглУчет 
					И ВестиУУНаПланеСчетовХозрасчетный
					И ДанныеОбъекта.Дата >= ДатаНачалаУчета;
				
			КонецЕсли; 
			
			ЗапросПараметрыАмортизацииОСУУ.УстановитьПараметр("Регистратор", Выборка.Ссылка);
			ПараметрыАмортизацииОСУУ = ЗапросПараметрыАмортизацииОСУУ.Выполнить().Выгрузить();
			ПараметрыАмортизацииОСУУ.Индексы.Добавить("ОсновноеСредство");
			
			Для каждого ДанныеСтроки Из ДанныеОбъекта.ОС Цикл
				
				ЗаписьРегистра = ПараметрыАмортизацииОСУУ.Найти(ДанныеСтроки.ОсновноеСредство, "ОсновноеСредство");
				
				Если ЗаписьРегистра <> Неопределено
					И ДанныеСтроки.СрокИспользованияУУ <> ЗаписьРегистра.СрокИспользования Тогда
					
					ДанныеСтроки.СрокИспользованияУУ = ЗаписьРегистра.СрокИспользования;
				КонецЕсли;
				
				Если ЗаписьРегистра <> Неопределено
					И ДанныеСтроки.ЕстьИзменениеПараметровАмортизацииУУ
					И ДанныеСтроки.СрокИспользованияУУОстаточный <> ЗаписьРегистра.СрокИспользованияДляВычисленияАмортизации Тогда
					
					ДанныеСтроки.СрокИспользованияУУОстаточный = ЗаписьРегистра.СрокИспользованияДляВычисленияАмортизации;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтроки.АдресМестонахождения)
					И НЕ ЗначениеЗаполнено(ДанныеСтроки.АдресМестонахожденияЗначение) Тогда
					
					ДанныеСтроки.АдресМестонахожденияЗначение = 
						УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
							ДанныеСтроки.АдресМестонахождения,
							Перечисления.ТипыКонтактнойИнформации.Адрес);
				КонецЕсли; 
				
			КонецЦикла; 
			
			ВводОстатковВнеоборотныхАктивовЛокализация.ОбработатьДанныеДляПереходаНаНовуюВерсию(ДанныеОбъекта);
			
			Если ДанныеОбъекта.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
 		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
 		КонецПопытки;
 
 	КонецЦикла;
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли