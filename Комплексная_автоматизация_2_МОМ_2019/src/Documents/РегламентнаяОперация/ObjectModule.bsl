#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ВремОрганизация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
	Если ЗначениеЗаполнено(ВремОрганизация) И Не Организация = ВремОрганизация Тогда
		
		Организация = ВремОрганизация;
		
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		
		ЗначениеИзСтруктуры = Неопределено;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Организация", ЗначениеИзСтруктуры) Тогда
			
			Организация = ЗначениеИзСтруктуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не Организация.Пустая() Тогда
		
		// Проверяем наличие проведенных регл. операций в этом месяце по выбранной организации.
		ПроверитьДублиДокументов(Отказ);
		
		ПроверитьЗаполнениеРегистрацииВНалоговыхОрганах(Отказ);
		
		ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
		ПроверитьДоступностьРегламентнойОперации(ГоловнаяОрганизация, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПодготовитьДанныеДляФормированияЗаданияКЗакрытиюМесяцаПередЗаписью();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей Тогда
		ПроведениеСерверУТ.ОчиститьЗаписатьДвижения(Движения, "Хозрасчетный");
	КонецЕсли;
	
	ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регламентная операция по закрытию месяца.%1'"),
			СокрЛП(ТипОперации)));
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ);
	
	МенеджерВременныхТаблицДляОтраженияВРеглУчете = Неопределено;
	ВыполнитьРегламентнуюОперацию(МенеджерВременныхТаблицДляОтраженияВРеглУчете, Отказ);
	
	ОперацииКОтражениюВРеглУчете = Новый Массив;
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество);
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога);
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога);
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетТорговогоСбора);
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей);
	
	Если Не Отказ И ОперацииКОтражениюВРеглУчете.Найти(ТипОперации) <> Неопределено Тогда
		РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	Если НЕ Отказ И ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс") Тогда
		УправленческийУчетПроведениеСервер.ДобавитьДвиженияАктивовПассивов(Ссылка, Движения);
	КонецЕсли;
	
	// Сохраним результаты проведения
	Движения.Записать();
	
	
	Если Не Отказ 
		И ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей Тогда
		РеквизитыДокумента = Новый Структура("Ссылка,Дата,Организация", Ссылка, Дата, Организация);
		РеглУчетПроведениеСервер.ОтразитьДокумент(РеквизитыДокумента,, МенеджерВременныхТаблицДляОтраженияВРеглУчете);
	КонецЕсли;
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы = СтруктураВременныеТаблицы;
	
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ);
	
	Если Не ДополнительныеСвойства.Свойство("ОчисткаДляПоследующегоПроведения") 
		ИЛИ НЕ ДополнительныеСвойства.ОчисткаДляПоследующегоПроведения Тогда
	
		ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
		СформироватьЗаданияКРасчетуНалоговПриОтменеПроведения();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок)
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	Отказ               = Отказ ИЛИ УчетнаяПолитикаСуществует(ГоловнаяОрганизация);
	СтруктураШапки      = Новый Структура();
	
	Если Отказ Тогда
		Возврат СтруктураШапки;
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.ЗагрузитьЗначения(НалоговыйУчет.ВсяОрганизация(Организация));
	
	СтруктураШапки.Вставить("НачДата",                 НачалоМесяца(Дата));
	СтруктураШапки.Вставить("КонДата",                 КонецМесяца(Дата));
	СтруктураШапки.Вставить("НачГраница",              Новый Граница(СтруктураШапки.НачДата, ВидГраницы.Исключая));
	СтруктураШапки.Вставить("КонГраница",              Новый Граница(СтруктураШапки.КонДата, ВидГраницы.Включая));
	СтруктураШапки.Вставить("НачГода",                 НачалоГода(Дата));
	СтруктураШапки.Вставить("Организация",             Организация);
	СтруктураШапки.Вставить("СписокОрганизаций",       СписокОрганизаций);
	СтруктураШапки.Вставить("Ссылка",                  Ссылка);
	СтруктураШапки.Вставить("Дата",                    Дата);
	СтруктураШапки.Вставить("Номер",                   Номер);
	СтруктураШапки.Вставить("ТипОперации",             ТипОперации);
	СтруктураШапки.Вставить("Заголовок",               Заголовок);
	СтруктураШапки.Вставить("ГоловноеПодразделение",   ГоловнаяОрганизация);
	СтруктураШапки.Вставить("Предприниматель",         (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
	
	Возврат СтруктураШапки;
	
КонецФункции

Процедура ПроверитьДоступностьРегламентнойОперации(ОрганизацияДляУчетнойПолитики, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим наличие учетной политики
	Если Не УчетнаяПолитика.Существует(ОрганизацияДляУчетнойПолитики, Дата, Ложь, Ссылка) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для организации %1 на %2 не заполнена учетная политика.'"),
			ОрганизацияДляУчетнойПолитики,
			Формат(НачалоМесяца(Дата), "ДФ='MMMM yyyy'"));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
			
	КонецЕсли;
	
	// Проверим выполнение условия для операций регл. учета
	ОперацииРеглУчета = Новый Массив;
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетКурсовыхРазниц);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода);
	
	Если ОперацииРеглУчета.Найти(ТипОперации) <> Неопределено
		И (Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") ИЛИ Дата < Константы.ДатаНачалаВеденияРеглУчета.Получить()) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Выполнение операции %1 не доступно на %2.'"),
			ТипОперации,
			Формат(НачалоМесяца(Дата), "ДФ='MMMM yyyy'"));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ТипОперации", "Объект", Отказ);
		
	КонецЕсли;
		
	// Проверим выполнение условия для признания расходов УСН
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН
		И Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, КонецМесяца(Дата)) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для организации %1 не доступно признание расходов на %2.'"),
			Организация,
			Формат(КонецМесяца(Дата), "ДФ='MMMM yyyy'"));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
		
	КонецЕсли;
	
	// Проверим выполнение условия для расчета налога УСН
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН
		И Не УчетнаяПолитика.ПрименяетсяУСН(Организация, КонецМесяца(Дата)) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для организации %1 не доступен расчет налога УСН на %2.'"),
			Организация,
			Формат(КонецМесяца(Дата), "ДФ='MMMM yyyy'"));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция УчетнаяПолитикаСуществует(ОрганизацияДляУчетнойПолитики)
	
	Существует = УчетнаяПолитика.Существует(ОрганизацияДляУчетнойПолитики, Дата, Ложь, Ссылка);
	Отказ      = Не Существует;
	
	Если Не Существует Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для организации %1 на %2 не заполнена учетная политика.'"),
			ОрганизацияДляУчетнойПолитики,
			Формат(НачалоМесяца(Дата), "ДФ='MMMM yyyy'"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Процедура ВыполнитьРегламентнуюОперацию(МенеджерВременныхТаблицДляОтраженияВРеглУчете, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок);
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
		
		// Доли списания косвенных расходов
		РасчетДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Ложь, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество);
		РасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог);
		РасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог);
		РасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
	
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТорговогоСбора Тогда
		
		РасчетТорговогоСбора(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетКурсовыхРазниц Тогда
		
		РасчетКурсовыхРазницРегл(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата Тогда
		
		// Закрытие счетов 90-91
		ЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ);
		// Округление сумм НДС до полных рублей № 248-ФЗ от 23.07.2013
		ОкруглениеСуммНДС(СтруктураШапкиДокумента);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет Тогда
		
		// Списание убытков прошлых лет
		СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ);		
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		
		// Расчет налога на прибыль
		ВыполнитьРасчетНалогаНаПрибыльСЗамеромВремени(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога Тогда
		
		// Расчет отложенного налога (балансовым методом)
		ВыполнитьРасчетОтложенногоНалога(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН Тогда
		
		// Признание расходов при УСН
		ВыполнитьПризнаниеРасходовПриУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН Тогда
		
		// Расчет налога при УСН
		ВыполнитьРасчетНалогаПриУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода Тогда
		
		// Операции закрытия года
		ЗакрытиеГода(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей Тогда
		
		ПризнаниеВНУЛизинговыхПлатежей(СтруктураШапкиДокумента, МенеджерВременныхТаблицДляОтраженияВРеглУчете, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности Тогда
		
		РасчетКурсовыхРазницФО(СтруктураШапкиДокумента, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляФормированияЗаданияКЗакрытиюМесяцаПередЗаписью()

	Если Не ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
		ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
		ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	КонецЕсли; 
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		ИмяТаблицы = "РегламентнаяОперацияРасчетНалогаНаИмуществоИзменение";
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		ИмяТаблицы = "РегламентнаяОперацияРасчетЗемельногоНалогаИзменение";
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		ИмяТаблицы = "РегламентнаяОперацияРасчетТранспортногоНалогаИзменение";
	Иначе
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаПередЗаписью.Дата, МЕСЯЦ) КАК Период,
	|	ТаблицаПередЗаписью.Организация КАК Организация,
	|	ИСТИНА                   КАК ОтражатьВРеглУчете,
	|	ЛОЖЬ                     КАК ОтражатьВУпрУчете,
	|	&Ссылка КАК Документ
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	Документ.РегламентнаяОперация КАК ТаблицаПередЗаписью
	|ГДЕ
	|	ТаблицаПередЗаписью.Ссылка = &Ссылка
	|	И ТаблицаПередЗаписью.Проведен";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтруктураВременныеТаблицы.Вставить(ИмяТаблицы, Выборка.Количество > 0);
	
КонецПроцедуры
 
#Область СервисныеПроцедуры

Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если проведение документа вызывается из механизма расчета партий, то установим служебное доп. свойство в движениях документа.
	// Это нужно для того, чтобы при восстановлении движений документа не изменялся регистр заданий к расчету.
	Если ДополнительныеСвойства.Свойство(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта()) Тогда
		Для Каждого ТекущийНабор Из Движения Цикл
			ТекущийНабор.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
		КонецЦикла;
	КонецЕсли;
	
	// Если документ новый, то подготовки не требуется, наборы записей и так пусты
	ЭтоНовый = Ложь;
	Если ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый) И ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеРегистры = Неопределено;
	РежимЗаписи         = Неопределено;
	ОтменаПроведения    = ДополнительныеСвойства.Свойство("РежимЗаписи", РежимЗаписи)
	                      И (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	
	// Установим свойств набора записей РБ
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН Тогда
		Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("РассчитатьСуммыУУ", Истина);
	КонецЕсли;
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата 
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетКурсовыхРазниц 
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН Тогда
		Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("РассчитатьСуммыФО", Истина);
	КонецЕсли;
	
	ДляПоследующегоПроведения = Ложь;
	ДополнительныеСвойства.Свойство("ОчисткаДляПоследующегоПроведения", ДляПоследующегоПроведения);
	
	ОперацииОтносящиесяКФинРезультату = Новый Массив;
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода);
	Если Не Отказ И (ОперацииОтносящиесяКФинРезультату.Найти(ТипОперации) = Неопределено ИЛИ ОтменаПроведения)
		И ДляПоследующегоПроведения <> Истина Тогда
		Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("ПроверкаИзмененияРегистра", Истина);
	КонецЕсли;
	
	// Если перепроводим документ методом РассчитатьРегламентныеОперации (см. модуль менеджера),
	// то для операции признания расходов по УСН ставим специальные отметки для регистров УСН:
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН И ОтменаПроведения Тогда
		
		УчетУСНСервер.УстановитьСлужебноеСвойствоДляРегистровУСН(Движения);
		
		Если ДляПоследующегоПроведения <> Истина Тогда
			
			Параметры = Новый Структура("НачДата, КонДата, Организация, ТипОперации", НачалоМесяца(Дата), КонецМесяца(Дата), Организация, ТипОперации);
			УчетУСНСервер.ОчиститьДвиженияРегистровУСНЗаУказанныйПериод(Параметры);
			УчетУСНСервер.ОбновитьЗаданияКЗакрытиюМесяцаПриВыполненииРеглОперации(Дата, Организация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого НаборЗаписей Из Движения Цикл
		
		// Очищаем наборы записей
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	// Определяем наборы записей, в которых есть движения
	МассивИменРегистров = ПроведениеСерверУТ.ПолучитьИспользуемыеРегистры(
		Ссылка,
		Метаданные().Движения,
		ИсключаемыеРегистры);
	
	// Записываем наборы записей, в которых есть движения
	Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
		Движения[ИмяРегистра].Записывать = Истина;
	КонецЦикла;
	
	Движения.Записать();
	
КонецПроцедуры

Процедура ПроверитьДублиДокументов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериодаПериода
	|	И ДанныеДокумента.Ссылка.ТипОперации = &ТипОперации
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И ДанныеДокумента.Ссылка <> &Ссылка
	|	И ДанныеДокумента.Организация = &Организация");
	
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериодаПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Ссылка",              Ссылка);
	Запрос.УстановитьПараметр("ТипОперации",         ТипОперации);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ШаблонТекста = НСтр("ru = 'За %1 уже есть проведенный документ ""Регламентная операция - %2"" для организации %3'");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста,
				Формат(Дата, "ДФ='ММММ гггг ""г.""'"),
				ТипОперации,
				Выборка.Организация);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Дата", "Объект", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗаданияКРасчетуНалоговПриОтменеПроведения()

	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		
		ПериодРасчета = ВнеоборотныеАктивыЛокализация.ПериодРасчетаНалогаНаИмущество(Организация, Дата);
		Если ПериодРасчета <> Неопределено Тогда
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(
				ПериодРасчета, Ссылка, Организация, Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество);
		КонецЕсли;
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		ПериодРасчета = ВнеоборотныеАктивыЛокализация.ПериодРасчетаЗемельногоНалога(Организация, Дата);
		Если ПериодРасчета <> Неопределено Тогда
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(
				ПериодРасчета, Ссылка, Организация, Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога);
		КонецЕсли;
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		
		ПериодРасчета = ВнеоборотныеАктивыЛокализация.ПериодРасчетаТранспортногоНалога(Организация, Дата);
		Если ПериодРасчета <> Неопределено Тогда
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(
				ПериодРасчета, Ссылка, Организация, Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога);
		КонецЕсли;
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей Тогда
		
		ПериодРасчета = УчетОСВызовСервера.СледующийПериодПризнанияВНУЛизинговыхПлатежей(Организация, НачалоМесяца(Дата));
		Если ПериодРасчета <> Неопределено Тогда
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(
				ПериодРасчета, Ссылка, Организация, Перечисления.ОперацииЗакрытияМесяца.ПризнаниеВНалоговомУчетеЛизинговыхПлатежей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетИмущественныхНалогов(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметрыРасчета = Новый Структура("СписокОшибок", Новый Массив);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	ТаблицыНачислениеНалога = РасчетИмущественныхНалогов.ПодготовитьТаблицыРасчетНалога(
								ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов, 
								Отказ,
								ДопПараметрыРасчета);
	
	ДополнительныеСвойства.Вставить("СписокОшибок", ДопПараметрыРасчета.СписокОшибок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	РасчетИмущественныхНалогов.СформироватьДвиженияРасчетНалога(
		ТаблицыНачислениеНалога,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов,
		Движения,
		Отказ);
		
	УчетУСНСервер.СформироватьДвиженияОтражениеРасходовПоИмущественнымНалогам(
		ТаблицыНачислениеНалога.ТаблицаРасходыНаПлатон,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов,
		ЭтотОбъект,
		Отказ);
	
	ДополнительныеСвойства.Вставить("КоличествоОбработанныхДанных", ТаблицыНачислениеНалога.ТаблицаСправкиРасчета.Количество());
	
КонецПроцедуры
	
Процедура РасчетТорговогоСбора(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетТорговогоСбора(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ГоловноеПодразделение <> СтруктураШапкиДокумента.Организация Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицыНачислениеСбора = ТорговыйСборПереопределяемый.ПодготовитьТаблицыРасчета(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетТорговогоСбора, Отказ);
	
	Если Отказ ИЛИ ТаблицыНачислениеСбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ТорговыйСборПереопределяемый.СформироватьДвиженияРасчета(
		ТаблицыНачислениеСбора,
		Движения,
		Отказ);
	
КонецПроцедуры

// Расчет долей списания косвенных расходов

Процедура РасчетДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента, ТранспортныеРасходы, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьДанныеРасчетаДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	Период = СтруктураШапкиДокумента.КонДата;
	
	ДолиСписанияКосвенныхРасходов = Движения.ДолиСписанияКосвенныхРасходов.ВыгрузитьКолонки();
	РасчетНормированияРасходов = Движения.РасчетНормированияРасходов.ВыгрузитьКолонки();
	
	РассчетныеДоли = НалоговыйУчет.ДолиСписанияРасходов(Период, Организация, РасчетНормированияРасходов, ТранспортныеРасходы);
	ЗаполнитьЗначенияСвойств(ДолиСписанияКосвенныхРасходов.Добавить(), РассчетныеДоли);
	
	Если ТранспортныеРасходы Тогда
		СтруктураШапкиДокумента.Вставить("ДоляСписанияТранспортныхРасходов", РассчетныеДоли.ДоляТранспортныхРасходов);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ДолиСписанияКосвенныхРасходов,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей, 
		"ДолиСписанияКосвенныхРасходов",
		Истина,
		"Организация, Период",
		"ДоляРасходовНаРекламу, ДоляРасходовНаДобровольноеСтрахованиеЖизни, ДоляРасходовНаДобровольноеМедицинскоеСтрахование, ДоляПредставительскихРасходов, ДоляЕНВД, ДоляТранспортныхРасходов, ДоляРасходовНаВозмещениеПроцентовРаботникам, ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев, ДоляРезервовПоСомнительнымДолгамНУ");
	
	Если Не ТранспортныеРасходы Тогда
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения,
			РасчетНормированияРасходов,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей,
			"РасчетНормированияРасходов",
			Истина,
			"Организация, ВидОперации, СуммаБазы",
			"РасходыМесяц, РазницыМесяц, ЗатратыГод, РасходыГод, РазницыГод");
	КонецЕсли;
	
КонецПроцедуры

// Переоценка валютных средств

Процедура РасчетКурсовыхРазницРегл(СтруктураШапкиДокумента, Отказ)
	
	Документы.РегламентнаяОперация.РасчетКурсовыхРазниц(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

Процедура РасчетКурсовыхРазницФО(СтруктураШапкиДокумента, Отказ)
	
	Документы.РегламентнаяОперация.РасчетКурсовыхРазницФО(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

// Определение финансового результата

Процедура ЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизитыЗакрытие90_91[0];
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ПроводкиЗакрытиеСчета90 = ЗакрытиеМесяца.ПроводкиЗакрытиеСчета90(Реквизиты.Период, Реквизиты.Организация);
	
	ПроводкиЗакрытиеСчета91 = ЗакрытиеМесяца.ПодготовитьТаблицыЗакрытиеСчета91(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытие90_91,
		СтруктураШапкиДокумента.СписокОрганизаций, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(
		Движения,
		ПроводкиЗакрытиеСчета90,
		Реквизиты.Период,
		Реквизиты.Организация);
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(
		Движения,
		ПроводкиЗакрытиеСчета91,
		Реквизиты.Период,
		Реквизиты.Организация);
	
КонецПроцедуры

Процедура ОкруглениеСуммНДС(СтруктураШапкиДокумента)
	
	Если УчетНДС.ПолучитьПорядокОкругленияНДС(СтруктураШапкиДокумента.Дата) <> 2 
		ИЛИ Месяц(СтруктураШапкиДокумента.Дата) <> Месяц(КонецКвартала(СтруктураШапкиДокумента.Дата)) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыОкругленияНДС(СтруктураШапкиДокумента);
	
	ЗакрытиеМесяца.СформироватьДвиженияПоОкруглениюНДС(
		ПараметрыПроведения.ТаблицаРеквизитыОкруглениеНДС,
		СтруктураШапкиДокумента.СписокОрганизаций, Движения);
	
КонецПроцедуры	

Процедура СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыСписаниеУбытков(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаУбытков = ЗакрытиеМесяца.ПодготовитьТаблицуУбытков(ПараметрыПроведения.ТаблицаРеквизитыСписаниеУбытков, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияСписаниеУбытков(ТаблицаУбытков,
		ПараметрыПроведения.ТаблицаРеквизитыСписаниеУбытков, Движения, Отказ);
	
КонецПроцедуры // СписаниеУбытковПрошлыхЛет()

// Расчет налога на прибыль (ПБУ 18/02)

Процедура ВыполнитьРасчетНалогаНаПрибыльСЗамеромВремени(СтруктураШапкиДокумента, Отказ)
	
	КоличествоОбрабатываемыхДанных = 0;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РегламентированныйУчет.РасчетНалогаНаПрибыль");
	
	ВыполнитьРасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, КоличествоОбрабатываемыхДанных);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбрабатываемыхДанных);
	
КонецПроцедуры

Процедура ВыполнитьРасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, КоличествоОбрабатываемыхДанных)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьДанныеРасчетаНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Период         = ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога[0].Период;
	Организации    = СтруктураШапкиДокумента.СписокОрганизаций;
	ПараметрыПБУ18 = УчетнаяПолитика.ПараметрыПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаДолейБазыНалогаНаПрибыль = НалоговыйУчетОбособленныхПодразделений.ПодготовитьТаблицуРасчетДолейБазыНалогаНаПрибыль(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		Организации);
	
	// Проводки по начислению налога на прибыль
	ОбщаяСуммаНалога = РасчетНалогаНаПрибыль.НачислитьНалогНаПрибыль(
		Движения,
		ПараметрыПБУ18,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		ТаблицаДолейБазыНалогаНаПрибыль);
	
	Если ТаблицаДолейБазыНалогаНаПрибыль <> Неопределено Тогда
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения,
			ТаблицаДолейБазыНалогаНаПрибыль,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетДолейБазыНалогаНаПрибыль",
			Истина,
			"Организация, РегистрацияВНалоговомОргане, ДоляНалоговойБазы",
			"РасходыПоОплатеТруда, СтоимостьАмортизируемогоИмущества,СтоимостьОСПрошлыхМесяцев,СтоимостьОССледующегоМесяца");
		
	КонецЕсли;
	
	// РАСЧЕТ НАЛОГА В СООТВЕТСТВИИ С ПБУ 18
	
	// При балансовом методе расчет выполняется в ходе отдельной регламентной операции - РасчетОтложенногоНалога
	Если ПараметрыПБУ18.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод Тогда
		// Средняя ставка налога на прибыль за месяц (имеет смысл, если налог уплачивается по разным ставкам).
		ПрименяютсяРазныеСтавкиНалогаНаПрибыль = 
			(ТаблицаДолейБазыНалогаНаПрибыль <> Неопределено                         // Налог уплачивается в разные регионы
			И ПолучитьФункциональнуюОпцию("ПрименяютсяРазныеСтавкиНалогаНаПрибыль"));// И пользователь установил, что в разных регионах могут быть разные ставки
		
		НалоговаяБазаОбщая = 0;
		
		Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда
			// В случае признания убытков расчетная ставка определяется по предыдущему месяцу
			Если ОбщаяСуммаНалога = 0 Тогда
				НалоговаяБазаЗаМесяц = 0;
				РасчетнаяСтавкаНалогаЗаМесяц = НалоговыйУчетОбособленныхПодразделений.ПолучитьРасчетнуюСтавкуНалогаНаПрибыль(
						Организация, 
						НачалоМесяца(Период)-1);
			Иначе  
					// В случае признания прибыли расчетная ставка текущего месяца определяется по формуле:
				    // налог на прибыль НУ / прибыль по данным БУ , все показатели по данным текущего месяца.

				НалоговаяБазаЗаМесяц = РасчетНалогаНаПрибыль.НалоговаяБаза(     
						НачалоМесяца(Период), 
						КонецМесяца(Период), 
						Организация);
				НалоговаяБазаЗаГод = РасчетНалогаНаПрибыль.НалоговаяБаза(
						НачалоГода(Период), 
						КонецМесяца(Период), 
						Организация);
				// Если в прошлом периоде по итогам с начала года был убыток, а в текущем - прибыль,
				// то налог на прибыль по данным НУ, рассчитанный на текущий месяц, соответствует налогу на прибыль за год,
				// следовательно база берется за год.
				НалоговаяБазаОбщая = ?(НалоговаяБазаЗаГод < НалоговаяБазаЗаМесяц,НалоговаяБазаЗаГод,НалоговаяБазаЗаМесяц);  	
				РасчетнаяСтавкаНалогаЗаМесяц = ?(НалоговаяБазаОбщая = 0, 0, ОбщаяСуммаНалога / НалоговаяБазаОбщая);
				
			КонецЕсли;
			
			// Эта ставка далее 
			// 1. используется в РассчитатьОНО_ОНА() и РассчитатьОНАПоУбыткамТекущегоПериода().
			СтруктураШапкиДокумента.Вставить("СтавкаНалогаНаПрибыль", РасчетнаяСтавкаНалогаЗаМесяц);
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога[0].СтавкаНалогаНаПрибыль = РасчетнаяСтавкаНалогаЗаМесяц;
			// 2. записывается в справку-расчет
			РасчетСреднейСтавки = НалоговыйУчет.ПодготовитьТаблицуРасчетСтавокНалогаНаПрибыль(Отказ);
			СтрокаРасчета = РасчетСреднейСтавки.Добавить();
			СтрокаРасчета.Ставка      = РасчетнаяСтавкаНалогаЗаМесяц * 100;
			СтрокаРасчета.СуммаНалога = ОбщаяСуммаНалога;
			СтрокаРасчета.СуммаБазы   = НалоговаяБазаОбщая;
			
		КонецЕсли;
		
		// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
		// Проводки по начислению условного дохода (расхода) по налогу на прибыль
	
		// Налог на прибыль
		ТаблицаРасчетНалогаНаПрибыль = РасчетНалогаНаПрибыль.ПодготовитьТаблицуРасчетНалогаНаПрибыль(
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			СтруктураШапкиДокумента.СписокОрганизаций, 
			Отказ);
		
		// Постоянные разницы
		СтруктураТаблицПостоянныхРазниц = РасчетНалогаНаПрибыль.ПодготовитьТаблицуРасчетПостоянныхРазниц(
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			СтруктураШапкиДокумента.СписокОрганизаций,
			Отказ,
			КоличествоОбрабатываемыхДанных);
			
		ТаблицаРасчетПостоянныхРазниц                           = СтруктураТаблицПостоянныхРазниц.ТаблицаРасчетПостоянныхРазниц;
		ТаблицаПостоянныхРазницВОценкеАктивовИОбязательств      = СтруктураТаблицПостоянныхРазниц.ТаблицаРазницВОценкеАктивовИОбязательств;
		ТаблицаСтоимостиПостоянныхНалоговыхАктивовИОбязательств = СтруктураТаблицПостоянныхРазниц.ТаблицаСтоимостиНалоговыхАктивовИОбязательств;
		
		// Временные разницы
		СтруктураТаблицВременныхРазниц = РасчетНалогаНаПрибыль.РассчитатьВременныеРазницы(
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			СтруктураШапкиДокумента.СписокОрганизаций, 
			Отказ,
			КоличествоОбрабатываемыхДанных);
			
		ТаблицаРасчетВременныхРазниц                           = СтруктураТаблицВременныхРазниц.ТаблицаРасчетВременныхРазниц;
		ТаблицаВременныхРазницВОценкеАктивовИОбязательств      = СтруктураТаблицВременныхРазниц.ТаблицаРазницВОценкеАктивовИОбязательств;
		ТаблицаСтоимостиВременныхНалоговыхАктивовИОбязательств = СтруктураТаблицВременныхРазниц.ТаблицаСтоимостиНалоговыхАктивовИОбязательств;
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения, 
			ТаблицаПостоянныхРазницВОценкеАктивовИОбязательств, 
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетРазницВОценкеАктивовИОбязательств");
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения, 
			ТаблицаСтоимостиПостоянныхНалоговыхАктивовИОбязательств, 
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетСтоимостиНалоговыхАктивовИОбязательств");
		
		РасчетНалогаНаПрибыль.СформироватьДвиженияРасчетНалогаНаПрибыль(
			ТаблицаРасчетПостоянныхРазниц,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога, 
			Движения, 
			Отказ);
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения, 
			ТаблицаВременныхРазницВОценкеАктивовИОбязательств, 
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетРазницВОценкеАктивовИОбязательств");
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения, 
			ТаблицаСтоимостиВременныхНалоговыхАктивовИОбязательств, 
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетСтоимостиНалоговыхАктивовИОбязательств");
		
		РасчетНалогаНаПрибыль.СформироватьДвиженияРасчетНалогаНаПрибыль(
			ТаблицаРасчетВременныхРазниц,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога, 
			Движения, 
			Отказ);
		
		РасчетНалогаНаПрибыль.СформироватьДвиженияРасчетНалогаНаПрибыль(
			ТаблицаРасчетНалогаНаПрибыль,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога, 
			Движения, 
			Отказ);
			
		РасчетНалогаНаПрибыль.ДобавитьПроводкуСписанияОтклоненийПриОкругленииНалогаНаПрибыль(
			ТаблицаРасчетПостоянныхРазниц,
			ТаблицаРасчетВременныхРазниц,
			ТаблицаРасчетНалогаНаПрибыль,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			ОбщаяСуммаНалога, 
			Движения, 
			Отказ);
		
		// Справки расчеты по распределению налога между налоговыми органами
		
		Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда
			
			ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
				Движения,
				РасчетСреднейСтавки,
				ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
				"РасчетСтавкиНалогаНаПрибыльЗаМесяц",
				Истина,
				"Организация,Ставка,СуммаНалога,СуммаБазы",
				"");
			
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		НалоговыйУчетОбособленныхПодразделений.ПроведениеПересчетаОНАиОНОКаждыйМесяц(СтруктураШапкиДокумента, Движения, Отказ);
		
	КонецЕсли;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Для каждого Проводка Из Движения.Хозрасчетный Цикл
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт = ВалютаРеглУчета;
			Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
		КонецЕсли;
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт = ВалютаРеглУчета;
			Проводка.ВалютнаяСуммаКт = Проводка.Сумма;
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеРегистрацииВНалоговыхОрганах(Отказ)
	
	Если ТипОперации <> Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.РегистрацияВНалоговомОргане КАК НалоговыйОрган
	|ПОМЕСТИТЬ РегистрацииВНалоговыхОрганах
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)
	|	И НЕ Организации.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрации.Организация,
	|	Регистрации.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО (Подразделения.Ссылка = Регистрации.Подразделение)
	|ГДЕ
	|	Регистрации.Организация В(&СписокОрганизаций)
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрации.Организация,
	|	Регистрации.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО (Подразделения.Родитель = Регистрации.Подразделение)
	|ГДЕ
	|	Регистрации.Организация В(&СписокОрганизаций)
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрации.Организация,
	|	Регистрации.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО (Подразделения.Родитель.Родитель = Регистрации.Подразделение)
	|ГДЕ
	|	Регистрации.Организация В(&СписокОрганизаций)
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрации.Организация,
	|	Регистрации.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО (Подразделения.Родитель.Родитель.Родитель = Регистрации.Подразделение)
	|ГДЕ
	|	Регистрации.Организация В(&СписокОрганизаций)
	|	И НЕ Подразделения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииВНалоговыхОрганах.Организация,
	|	РегистрацииВНалоговыхОрганах.Организация.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	РегистрацииВНалоговыхОрганах.НалоговыйОрган
	|ИЗ
	|	РегистрацииВНалоговыхОрганах КАК РегистрацииВНалоговыхОрганах
	|ГДЕ
	|	(РегистрацииВНалоговыхОрганах.НалоговыйОрган ЕСТЬ NULL 
	|			ИЛИ РегистрацииВНалоговыхОрганах.НалоговыйОрган = 
	|									ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("СписокОрганизаций", НалоговыйУчет.ВсяОрганизация(Организация));
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Отказ = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = НСтр("ru = 'Для %Организация% %ОбособленноеПодразделение% не указана регистрация в налоговом органе.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организация%", Выборка.Организация);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОбособленноеПодразделение%", 
					?(Выборка.ОбособленноеПодразделение, НСтр("ru = '(обособленное подразделение)'"), ""));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Организация", "Объект", Отказ);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Расчет налога на прибыль'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Закрытие года

Процедура ЗакрытиеГода(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьДанныеЗакрытияГода(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеПеречетаОНАиОНО(ПараметрыПроведения, СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Движения.Хозрасчетный.Модифицированность() Тогда
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	
	ПроведениеРеформацииБаланса(ПараметрыПроведения, СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Ложь;
	Движения.Хозрасчетный.Записать(Ложь);
	
	ТаблицаПрочиеРасходы = ПараметрыПроведения.ТаблицаПрочиеРасходы;
	
	Если Не ТаблицаПрочиеРасходы.Количество() = 0 Тогда
		Движения.ПрочиеРасходы.Записывать = Истина;
		Движения.ПрочиеРасходы.Загрузить(ТаблицаПрочиеРасходы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроведениеПеречетаОНАиОНО(ПараметрыПроведения, СтруктураШапкиДокумента, Отказ)
	
	Если НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(
			СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация) <> 
		Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод Тогда
		// При балансовом методе оценка отложенного налога выполняется по ставке следующего налогового периода,
		// поэтому пересчет при реформации баланса не требуется.
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаОНАОНО = ЗакрытиеМесяца.ПодготовитьТаблицуПересчетОНАиОНО(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		СтруктураШапкиДокумента.СписокОрганизаций,
		Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ТаблицаОНАОНО,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		"РасчетСтоимостиНалоговыхАктивовИОбязательствПослеИзмененияСтавкиНалогаНаПрибыль");
	
	ЗакрытиеМесяца.СформироватьДвиженияуПересчетОНАиОНО(
		ТаблицаОНАОНО,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		Движения,
		Отказ);
	
КонецПроцедуры

Процедура ПроведениеРеформацииБаланса(ПараметрыПроведения, СтруктураШапкиДокумента, Отказ)
	
	ТаблицаЗакрытия = ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода;
	ТаблицыДвижений = Новый Массив;
	
	// Подготовка проведения по данным информационноя базы
	ТаблицыДвижений.Добавить(ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие99Реформация(ТаблицаЗакрытия, Отказ));
	ТаблицыДвижений.Добавить(ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие90БУ(ТаблицаЗакрытия, Отказ));
	ТаблицыДвижений.Добавить(ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие91БУ(ТаблицаЗакрытия, Отказ));
	
	// Закрытие счетов в НУ
	ТаблицыДвижений.Добавить(ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие20_23_25_26НУиНЕ(ТаблицаЗакрытия, Отказ));
	ТаблицыДвижений.Добавить(ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие44НУ(ТаблицаЗакрытия, Отказ));
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений
	Для Каждого ТаблицаДвижений Из ТаблицыДвижений Цикл
		
		ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеГода(
			ТаблицаДвижений,
			ТаблицаЗакрытия,
			Движения,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#Область Лизинг

// Выполняет признание в НУ расходов на приобретение ОС по договору лизинга
//
Процедура ПризнаниеВНУЛизинговыхПлатежей(СтруктураШапкиДокумента, МенеджерВременныхТаблицДляОтраженияВРеглУчете, Отказ)
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Организация, Дата);
	Если ПараметрыУчетнойПолитики = Неопределено
		ИЛИ НЕ ПараметрыУчетнойПолитики.ВключатьВСоставНалоговыхРасходовЛизинговыеПлатежи Тогда
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = "Лизинг.ПризнаниеВНУЛизинговыхПлатежей";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	КоличествоОбработанныхДанных = 0;
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыПризнаниеВНУЛизинговыхПлатежей(СтруктураШапкиДокумента);
	
	ТаблицаЗатратПоАмортизации = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПустаяТаблицаАмортизации();
	
	ПараметрыРасходыПоАреднымПлатежамНУ = УчетОСВызовСервера.ПодготовитьТаблицыРасходовПоАренднымПлатежамНУ(
											ПараметрыПроведения.ТаблицаОС, 
											ПараметрыПроведения.АрендныеПлатежи, 
											ТаблицаЗатратПоАмортизации, 
											КоличествоОбработанныхДанных,
											Отказ);
	
	Если НЕ Отказ Тогда
	
		// Формирование данных для проведения по регистрам опер учета на основании рассчитанных расходов по арендным платежам.
		ТекстыЗапросов = Новый СписокЗначений;
		ТекстыЗапросов.Добавить(ТекстЗапросаВтРасходыПоАренднымПлатежам(), "ВтРасходыПоАренднымПлатежам");
		ТекстыЗапросов.Добавить(ТекстЗапросаВтКорректировкаАмортизации(), "ВтКорректировкаАмортизации");
		ТекстыЗапросов.Добавить(ТекстЗапросаПрочиеРасходы(), "ПрочиеРасходы");
		ТекстыЗапросов.Добавить(ТекстЗапросаПартииПрочихРасходов(), "ПартииПрочихРасходов");
		Если МенеджерВременныхТаблицДляОтраженияВРеглУчете = Неопределено Тогда
			МенеджерВременныхТаблицДляОтраженияВРеглУчете = Новый МенеджерВременныхТаблиц;
		КонецЕсли; 
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицДляОтраженияВРеглУчете;
		Запрос.УстановитьПараметр("РасходыПоАренднымПлатежам", ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаРасходыПоАренднымПлатежамНУ);
		Запрос.УстановитьПараметр("КорректировкаАмортизации", ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаКорректировкаАмортизации);
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ТаблицыДляДвижений = Новый Структура;
		ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапросов, ТаблицыДляДвижений, Истина);
		
		// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
		// По регистру ПрочиеРасходы
		ПроведениеСерверУТ.ОтразитьДвижения(
			ТаблицыДляДвижений.ТаблицаПрочиеРасходы, 
			Движения.ПрочиеРасходы, 
			Отказ);
			
		// По регистру ПартииПрочихРасходов
		ПроведениеСерверУТ.ОтразитьДвижения(
			ТаблицыДляДвижений.ТаблицаПартииПрочихРасходов, 
			Движения.ПартииПрочихРасходов, 
			Отказ);
		
		// По регистру РасчетРасходовПоАренде
		УчетОСВызовСервера.СформироватьДвиженияРасчетРасходовПоАренде(
			ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаРасходыПоАренднымПлатежамНУ, 
			ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаРеквизиты,
			Движения, 
			Отказ);
		
	КонецЕсли;
		
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанныхДанных);
		
КонецПроцедуры

Функция ТекстЗапросаВтРасходыПоАренднымПлатежам()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация                                  КАК Организация,
	|	РасходыПоАренднымПлатежам.ОсновноеСредство    КАК ОсновноеСредство,
	|	РасходыПоАренднымПлатежам.Контрагент          КАК Контрагент,
	|	ВЫРАЗИТЬ(РасходыПоАренднымПлатежам.ДоговорКонтрагента КАК Справочник.ДоговорыЛизинга) КАК ДоговорКонтрагента,
	|	РасходыПоАренднымПлатежам.Подразделение       КАК Подразделение,
	|	РасходыПоАренднымПлатежам.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	РасходыПоАренднымПлатежам.СуммаПлатежаНУ      КАК СуммаПлатежаНУ,
	|	РасходыПоАренднымПлатежам.КорректировкаАмортизацииНУ        КАК КорректировкаАмортизацииНУ,
	|	РасходыПоАренднымПлатежам.НаправлениеДеятельности           КАК НаправлениеДеятельности,
	|	РасходыПоАренднымПлатежам.НаправлениеДеятельностиЗатрат     КАК НаправлениеДеятельностиЗатрат,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.РасходыЛизинговыеПлатежи) КАК СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий
	|ПОМЕСТИТЬ ВтРасходыПоАренднымПлатежам
	|ИЗ
	|	&РасходыПоАренднымПлатежам КАК РасходыПоАренднымПлатежам
	|ГДЕ
	|	РасходыПоАренднымПлатежам.СуммаПлатежаНУ <> 0";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВтКорректировкаАмортизации()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация                                  КАК Организация,
	|	КорректировкаАмортизации.ОсновноеСредство    КАК ОсновноеСредство,
	|	КорректировкаАмортизации.Контрагент          КАК Контрагент,
	|	ВЫРАЗИТЬ(КорректировкаАмортизации.ДоговорКонтрагента КАК Справочник.ДоговорыЛизинга) КАК ДоговорКонтрагента,
	|	КорректировкаАмортизации.Подразделение       КАК Подразделение,
	|	КорректировкаАмортизации.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	КорректировкаАмортизации.АналитикаРасходов   КАК АналитикаРасходов,
	|	КорректировкаАмортизации.КорректировкаАмортизацииНУ        КАК КорректировкаАмортизацииНУ,
	|	КорректировкаАмортизации.НаправлениеДеятельности           КАК НаправлениеДеятельности,
	|	КорректировкаАмортизации.НаправлениеДеятельностиЗатрат     КАК НаправлениеДеятельностиЗатрат,
	|	ВЫРАЗИТЬ(КорректировкаАмортизации.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов) КАК СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий
	|ПОМЕСТИТЬ ВтКорректировкаАмортизации
	|ИЗ
	|	&КорректировкаАмортизации КАК КорректировкаАмортизации
	|ГДЕ
	|	КорректировкаАмортизации.КорректировкаАмортизацииНУ <> 0";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПрочиеРасходы()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|	&Период                                       КАК Период,
	|	ВтДанныеРасходы.Организация                   КАК Организация,
	|	ВтДанныеРасходы.ПодразделениеЗатрат           КАК Подразделение,
	|	ВтДанныеРасходы.НаправлениеДеятельностиЗатрат КАК НаправлениеДеятельности,
	|	ВтДанныеРасходы.СтатьяРасходов                КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                  КАК АналитикаРасходов,
	|	-ВтДанныеРасходы.СуммаПлатежаНУ               КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПризнаниеВНУЛизинговыхПлатежей) КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтРасходыПоАренднымПлатежам КАК ВтДанныеРасходы
	|ГДЕ
	|	ВтДанныеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И ВтДанныеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|	И ВтДанныеРасходы.СтатьяРасходов.ПринятиеКНалоговомуУчету
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|	&Период                                       КАК Период,
	|	ВтДанныеРасходы.Организация                   КАК Организация,
	|	ВтДанныеРасходы.ПодразделениеЗатрат           КАК Подразделение,
	|	ВтДанныеРасходы.НаправлениеДеятельностиЗатрат КАК НаправлениеДеятельности,
	|	ВтДанныеРасходы.СтатьяРасходов                КАК СтатьяРасходов,
	|	ВтДанныеРасходы.АналитикаРасходов             КАК АналитикаРасходов,
	|	-ВтДанныеРасходы.КорректировкаАмортизацииНУ   КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПризнаниеВНУЛизинговыхПлатежей) КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтКорректировкаАмортизации КАК ВтДанныеРасходы
	|ГДЕ
	|	ВтДанныеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И ВтДанныеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|	И ВтДанныеРасходы.СтатьяРасходов.ПринятиеКНалоговомуУчету";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПартииПрочихРасходов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|	&Период                                       КАК Период,
	|	ВтДанныеРасходы.Организация                   КАК Организация,
	|	ВтДанныеРасходы.ПодразделениеЗатрат           КАК Подразделение,
	|	ВтДанныеРасходы.НаправлениеДеятельностиЗатрат КАК НаправлениеДеятельности,
	|	ВтДанныеРасходы.СтатьяРасходов                КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                  КАК АналитикаРасходов,
	|	&Ссылка                                       КАК ДокументПоступленияРасходов,
	|	ВтДанныеРасходы.АналитикаУчетаПартий          КАК АналитикаУчетаПартий,
	|	-ВтДанныеРасходы.СуммаПлатежаНУ               КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПризнаниеВНУЛизинговыхПлатежей) КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтРасходыПоАренднымПлатежам КАК ВтДанныеРасходы
	|ГДЕ
	|	ВтДанныеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И ВтДанныеРасходы.СтатьяРасходов.ПринятиеКналоговомуУчету
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|	&Период                                       КАК Период,
	|	ВтДанныеРасходы.Организация                   КАК Организация,
	|	ВтДанныеРасходы.ПодразделениеЗатрат           КАК Подразделение,
	|	ВтДанныеРасходы.НаправлениеДеятельностиЗатрат КАК НаправлениеДеятельности,
	|	ВтДанныеРасходы.СтатьяРасходов                КАК СтатьяРасходов,
	|	ВтДанныеРасходы.АналитикаРасходов             КАК АналитикаРасходов,
	|	&Ссылка                                       КАК ДокументПоступленияРасходов,
	|	ВтДанныеРасходы.АналитикаУчетаПартий          КАК АналитикаУчетаПартий,
	|	-ВтДанныеРасходы.КорректировкаАмортизацииНУ   КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПризнаниеВНУЛизинговыхПлатежей) КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтКорректировкаАмортизации КАК ВтДанныеРасходы
	|ГДЕ
	|	ВтДанныеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И ВтДанныеРасходы.СтатьяРасходов.ПринятиеКналоговомуУчету";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область БлокировкаПриОбновленииИБ

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПредставлениеОперации)
	
	ВходящиеДанные = Новый Соответствие;
	
	ВходящиеДанные.Вставить(Метаданные.Документы.РегламентнаяОперация);
	ВходящиеДанные.Вставить(Метаданные.РегистрыБухгалтерии.Хозрасчетный);
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.АналитикаУчетаНоменклатуры);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДолиСписанияКосвенныхРасходов);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПорядокОтраженияНоменклатуры);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество
	 ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога
	 ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		ВходящиеДанные.Вставить(Метаданные.Документы.ИзменениеПараметровОС);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.МестонахождениеОСБухгалтерскийУчет);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПорядокУплатыНалоговНаМестах);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.РегистрацияЗемельныхУчастков);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.РегистрацияТранспортныхСредств);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СостоянияОСОрганизаций);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СпособыОтраженияРасходовПоИмущественнымНалогам);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СтавкиНалогаНаИмущество);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СчетаБухгалтерскогоУчетаОС);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетКурсовыхРазниц Тогда
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.КурсыВалют);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата Тогда
		
		ВходящиеДанные.Вставить(Метаданные.Документы.СчетФактураНалоговыйАгент);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога Тогда
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.РасчетСтавкиНалогаНаПрибыльЗаМесяц);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.РегистрацииВНалоговомОргане);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода Тогда
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДолиСписанияКосвенныхРасходов);
		
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации);
	
КонецПроцедуры

#КонецОбласти

#Область УСН

// Признание расходов
Процедура ВыполнитьПризнаниеРасходовПриУСН(СтруктураШапкиДокумента, Отказ)
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		УчетУСНСервер.ПризнатьРасходы(СтруктураШапкиДокумента, Движения);
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование КУДиР.Признание расходов.'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	УчетУСНСервер.ОтразитьРасходыКУДиР(СтруктураШапкиДокумента, Движения, Отказ);
	
	Если Не Отказ Тогда
		Для каждого НаборЗаписейРегистра Из Движения Цикл
			Если НаборЗаписейРегистра.Количество() Тогда
				ПроведениеСерверУТ.ЗаполнитьДополнительныеСвойстваНабораПоДокументу(ЭтотОбъект, НаборЗаписейРегистра);
				НаборЗаписейРегистра.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Расчет налога
Процедура ВыполнитьРасчетНалогаПриУСН(СтруктураШапкиДокумента, Отказ)
	
	Если Не УчетнаяПолитика.ПрименяетсяУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата) Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачисленияНалогаУСН(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстРасчета = УчетУСНСервер.НовыйКонтекстРасчетаНалога(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Дата);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = "УчетПоУСН.РасчетНалогаПриУСН";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
		
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
		
	ДанныеРасчета = УчетУСНСервер.ПодготовитьРасчетНалога(КонтекстРасчета);
		
	КоличествоОбработанныхДанных = ДанныеРасчета.ТаблицаПрочиеАктивыПассивы.Количество()
		+ ДанныеРасчета.ТаблицаПроводок.Количество() + ДанныеРасчета.ТаблицаСправкиРасчета.Количество()
		+ ДанныеРасчета.ТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы.Количество();
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетУСНСервер.СформироватьДвиженияНачислениеНалогаУСН(
		ДанныеРасчета,
		ПараметрыПроведения.ТаблицаРеквизитыНалогУСН,
		Движения,
		Отказ);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанныхДанных);
	
КонецПроцедуры

#КонецОбласти

Процедура ВыполнитьРасчетОтложенногоНалога(СтруктураШапкиДокумента, Отказ)

	// ОТЛОЖЕННЫЙ НАЛОГ НА ПРИБЫЛЬ
		
	// Инициализация
	
	// Основной алгоритм расчета опирается на оценку отложенных налогов на начало периода,
	// выполненную предыдущими регламентными операциями и записанную в служебные регистры.
	// Если в служебных регистрах такая информация отсутствует, то требуется ее записать - инициализировать расчет.
	// Такое может быть при первом выполнении после изменения учетной политики, а также, если по каким-то причинам
	// регламентные операции за отдельные месяцы были пропущены.
	//
	// После инициализации выполняется оценка на отчетную дату (конец периода) в общем порядке,
	// обращающаяся к только что записанным данным.
	//
	// Алгоритм инициализации отличается от общего алгоритма (на отчетную дату) следующими моментами:
	// - ставка налога может определяться исходя из соотношения фактически отраженных сумм на счетах 09 и 77
	//   и временных разниц;
	// - при инициализации не формируются проводки, поэтому погрешности округления нивелируются так,
	//   чтобы общая сумма по виду отложенных активов или обязательств точно соответствовала суммам на счетах;
	// - записи о временных разницах и суммах отложенного налога, которые заведомо не соответствуют друг-другу игнорируются.
	
	НалогНаПрибыльБухгалтерскийУчет.ИнициализироватьРасчетОтложенногоНалога(
		Движения,
		СтруктураШапкиДокумента.Дата,
		СтруктураШапкиДокумента.Организация);
		
	ИменаРегистровИнициализации = Новый Массив;
	ИменаРегистровИнициализации.Добавить("РасчетОтложенногоНалога");
	ИменаРегистровИнициализации.Добавить("ПримененныеСтавкиОтложенногоНалога");
	
	ИнициализированныеРегистры = Новый Массив;
	
	Для Каждого ИмяРегистра Из ИменаРегистровИнициализации Цикл
		
		НаборЗаписей = Движения[ИмяРегистра];
		Если Не НаборЗаписей.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		ИнициализированныеРегистры.Добавить(НаборЗаписей);
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
	// Основные действия
	НалогНаПрибыльБухгалтерскийУчет.ОтразитьПоследствияНачисленияНалога(
		Движения,
		СтруктураШапкиДокумента.Дата,
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Ссылка);
		
	Для Каждого НаборЗаписей Из ИнициализированныеРегистры Цикл
		
		Если Не НаборЗаписей.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		// Запишем принудительно в режиме дополнения, чтобы не потерять ранее записанные записи.
		НаборЗаписей.Записать(Ложь);
		НаборЗаписей.Записывать = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#КонецЕсли
