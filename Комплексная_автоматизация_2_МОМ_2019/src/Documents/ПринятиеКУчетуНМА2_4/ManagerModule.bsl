
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ИзменениеПараметровНМА2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Команда = ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаСписка";
	КонецЕсли;
	
	ПринятиеКУчетуНМАЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Принятие к учету НМА".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуНМА2_4) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПринятиеКУчетуНМА2_4.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПринятиеКУчетуНМА2_4);
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ПринятиеКУчетуНМАЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует таблицы движений при расчете стоимости.
//
// Параметры:
//  Регистратор			 	- ДокументСсылка.ПринятиеКУчетуНМА2_4 - Документ, для которого формируются движения
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит вспомогательные временные таблицы, которые могут
//                                                      использоваться для формирования движений.
//
// Возвращаемое значение:
//  Структура - Содержит таблицы движений.
//
Функция ТаблицыДвиженийРасчетаСтоимости(Регистратор, МенеджерВременныхТаблиц) Экспорт

	СписокРегистров = "ПрочиеРасходы,ПартииПрочихРасходов,ДвиженияДоходыРасходыПрочиеАктивыПассивы,
	|СтоимостьНМА,ПервоначальныеСведенияНМА,ОтражениеДокументовВРеглУчете";
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Регистратор, ДополнительныеСвойства);
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ИнициализироватьДанныеДокумента(Регистратор, ДополнительныеСвойства, СписокРегистров);

	Возврат ДополнительныеСвойства.ТаблицыДляДвижений;
	
КонецФункции

Процедура ЗаполнитьСтоимость(Объект) Экспорт

	Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Объект.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.НематериальныйАктив) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Дата                                      КАК Период,
	|	&ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР) КАК ВидАналитикиКапитализацииРасходов,
	|	ЛОЖЬ                                       КАК ФактическаяСтоимость,
	|	&ГруппаФинансовогоУчета                    КАК ГруппаФинансовогоУчета,
	|	&ВариантПримененияЦелевогоФинансирования   КАК ВариантПримененияЦелевогоФинансирования,
	|	&ТекущийДокумент                           КАК Регистратор,
	|	&Организация                               КАК Организация,
	|	&НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	&НематериальныйАктив                       КАК АналитикаКапитализацииРасходов,
	|	&ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете
	|ПОМЕСТИТЬ ДанныеКРасчету
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НаправлениеДеятельности,
	|	АналитикаКапитализацииРасходов";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивы.ТекстЗапросаРасходыПоДокументам(СписокЗапросов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходыПоДокументам.Период,
	|	РасходыПоДокументам.Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов,
	|	РасходыПоДокументам.Сумма КАК Сумма,
	|	РасходыПоДокументам.СуммаУпр КАК СуммаУпр,
	|	РасходыПоДокументам.СуммаБезНДС КАК СуммаБезНДС,
	|	РасходыПоДокументам.СуммаРегл КАК СуммаРегл,
	|	РасходыПоДокументам.ПостояннаяРазница КАК ПостояннаяРазница,
	|	РасходыПоДокументам.ВременнаяРазница КАК ВременнаяРазница
	|ИЗ
	|	РасходыПоДокументам КАК РасходыПоДокументам";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	ДатаДокумента = ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", Объект.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("ВариантПримененияЦелевогоФинансирования", Объект.ВариантПримененияЦелевогоФинансирования);
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМА);
	Запрос.УстановитьПараметр("НематериальныйАктив", Объект.НематериальныйАктив);
	ВнеоборотныеАктивы.УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос);
	
	Результат = Запрос.Выполнить();
	
	ПараметрыРасчетаСтоимости = ВнеоборотныеАктивы.ПараметрыРасчетаСтоимости();
	ПараметрыРасчетаСтоимости.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР;
	НовыйОбъектУчета = ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.Добавить();
	НовыйОбъектУчета.ОбъектУчета = Объект.НематериальныйАктив;
	НовыйОбъектУчета.СтоимостьУУ = Объект.ПервоначальнаяСтоимостьУУ;
	НовыйОбъектУчета.СтоимостьБУ = Объект.ПервоначальнаяСтоимостьБУ;
	НовыйОбъектУчета.ОтражатьВРеглУчете = Объект.ОтражатьВРеглУчете;
	НовыйОбъектУчета.ОтражатьВУпрУчете = Объект.ОтражатьВУпрУчете;
	
	РасходыПоДокументу = ВнеоборотныеАктивы.РассчитатьРасходыПоДокументу(Результат.Выгрузить(), ПараметрыРасчетаСтоимости);
	РасходыПоДокументу.Свернуть("ОбъектУчета", "СуммаРегл,СуммаУпр");
	
	Если Объект.ОтражатьВРеглУчете Тогда
		Если РасходыПоДокументу.Количество() <> 0 Тогда
			Объект.ПервоначальнаяСтоимостьБУ = РасходыПоДокументу[0].СуммаРегл;
		Иначе
			Объект.ПервоначальнаяСтоимостьБУ = 0;
		КонецЕсли; 
	КонецЕсли; 
	Если Объект.ОтражатьВУпрУчете Тогда
		Если РасходыПоДокументу.Количество() <> 0 Тогда
			Объект.ПервоначальнаяСтоимостьУУ = РасходыПоДокументу[0].СуммаУпр;
		Иначе
			Объект.ПервоначальнаяСтоимостьУУ = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ПринятиеКУчетуНМА2_4";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	СинонимТаблицыДокумента = "";
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;		
		
	Иначе
		
		ТекстЗапроса = ПринятиеКУчетуНМАЛокализация.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра, СинонимТаблицыДокумента);
		
	КонецЕсли;
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДокументыПоНМА(Запрос, ТекстыЗапроса, Регистры);
	
	ТекстЗапросаТаблицаМестоУчетаНМА(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПорядокУчетаНМА(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПорядокУчетаНМАУУ(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПервоначальныеСведенияНМА(ТекстыЗапроса, Запрос, Регистры);
	
	ТекстЗапросаТаблицаСтоимостьНМА(ТекстыЗапроса, Запрос, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(ТекстыЗапроса, Запрос, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(ТекстыЗапроса, Запрос, Регистры);
	ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(ТекстыЗапроса, Запрос, Регистры);
	
	ПринятиеКУчетуНМАЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина,, Регистры <> Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ПометкаУдаления,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Проведен,
	|	ДанныеДокумента.ХозяйственнаяОперация,
	|	ДанныеДокумента.АналитикаДоходов,
	|	ДанныеДокумента.АналитикаРасходовБУ,
	|	ДанныеДокумента.ВариантПримененияЦелевогоФинансирования,
	|	ДанныеДокумента.ВариантРаздельногоУчетаНДС,
	|	ДанныеДокумента.ВидОбъектаУчета,
	|	ДанныеДокумента.ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Комментарий,
	|	ДанныеДокумента.КоэффициентБУ,
	|	ДанныеДокумента.КоэффициентУскоренияУУ,
	|	ДанныеДокумента.ЛиквидационнаяСтоимость,
	|	ДанныеДокумента.ЛиквидационнаяСтоимостьРегл,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|		ИНАЧЕ ДанныеДокумента.НалогообложениеНДС
	|	КОНЕЦ КАК НалогообложениеНДС,
	|	ДанныеДокумента.НаправлениеДеятельности,
	|	ДанныеДокумента.НематериальныйАктив,
	|	ДанныеДокумента.ОбъемНаработки,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ОрганизацияПолучательРасходов,
	|	ДанныеДокумента.Ответственный,
	|	ДанныеДокумента.ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете,
	|	ДанныеДокумента.ПервоначальнаяСтоимостьБУ,
	|	ДанныеДокумента.ПервоначальнаяСтоимостьНУ,
	|	ДанныеДокумента.ПервоначальнаяСтоимостьПР,
	|	ДанныеДокумента.ПервоначальнаяСтоимостьВР,
	|	ДанныеДокумента.ПервоначальнаяСтоимостьУУ,
	|	ДанныеДокумента.ПередаватьРасходыВДругуюОрганизацию,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.ПорядокУчетаБУ,
	|	ДанныеДокумента.ПорядокУчетаНУ,
	|	ДанныеДокумента.ПорядокУчетаУУ,
	|	ДанныеДокумента.НачислятьАмортизациюНУ,
	|	ДанныеДокумента.СпециальныйКоэффициентНУ,
	|	ДанныеДокумента.МетодНачисленияАмортизацииБУ,
	|	ДанныеДокумента.МетодНачисленияАмортизацииУУ,
	|	ДанныеДокумента.СпособПоступления,
	|	ДанныеДокумента.СрокИспользованияБУ,
	|	ДанныеДокумента.СрокИспользованияНУ,
	|	ДанныеДокумента.СрокИспользованияУУ,
	|	ДанныеДокумента.СтатьяДоходов,
	|	ДанныеДокумента.СтатьяРасходовБУ,
	|	ВЫБОР КОГДА ДанныеДокумента.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|			И ДанныеДокумента.ОтражатьВУпрУчете
	|		ТОГДА ДанныеДокумента.СтатьяРасходовБУ
	|		ИНАЧЕ ДанныеДокумента.СтатьяРасходовУУ 
	|	КОНЕЦ КАК СтатьяРасходовУУ,
	|	ВЫБОР КОГДА ДанныеДокумента.АналитикаРасходовУУ = НЕОПРЕДЕЛЕНО
	|			И ДанныеДокумента.ОтражатьВУпрУчете
	|		ТОГДА ДанныеДокумента.АналитикаРасходовБУ
	|		ИНАЧЕ ДанныеДокумента.АналитикаРасходовУУ 
	|	КОНЕЦ КАК АналитикаРасходовУУ,
	|	ДанныеДокумента.СуммаЦелевыхСредств
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуНМА2_4"));
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru='Принятие к учету НМА'"));
	ЗначенияПараметровПроведения.Вставить("СтатьяАП_НМА", ПланыВидовХарактеристик.СтатьиАктивовПассивов.НематериальныеАктивы);
	ЗначенияПараметровПроведения.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		ЗначенияПараметровПроведения.Вставить("КонецМесяца", КонецМесяца(Реквизиты.Период));
		ЗначенияПараметровПроведения.Вставить("НачалоМесяца", НачалоМесяца(Реквизиты.Период));
	КонецЕсли;
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&Подразделение                          КАК Подразделение,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&Период   КАК ДатаОтраженияВУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоНМА(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоНМА";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	0                                       КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Подразделение                          КАК Подразделение,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Проведен                               КАК Проведен,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	&НематериальныйАктив                    КАК НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаМестоУчетаНМА(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестоУчетаНМА";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                       КАК Регистратор,
	|	&Период                       КАК Период,
	|	&НематериальныйАктив          КАК НематериальныйАктив,
	|	&Организация                  КАК Организация,
	|	&Подразделение                КАК Подразделение,
	|	&ОтражатьВУпрУчете            КАК ОтражатьВУпрУчете,
	|	&ОтражатьВРеглУчете           КАК ОтражатьВРеглУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаНМА(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаНМА";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                                 КАК Регистратор,
	|	&Период                                 КАК Период,
	|	&НематериальныйАктив                    КАК НематериальныйАктив,
	|	&Организация                            КАК Организация,
	|	&ГруппаФинансовогоУчета                 КАК ГруппаФинансовогоУчета,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&ОбъемНаработки                         КАК ОбъемНаработки,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаНМАУУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаНМАУУ";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                                 КАК Регистратор,
	|	&Период                                 КАК Период,
	|	&НематериальныйАктив                    КАК НематериальныйАктив,
	|	&Организация                            КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету) КАК Состояние,
	|	&ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию) КАК НачислятьАмортизациюУУ,
	|	&СтатьяРасходовУУ                       КАК СтатьяРасходов,
	|	&АналитикаРасходовУУ                    КАК АналитикаРасходов,
	|	&ПередаватьРасходыВДругуюОрганизацию    КАК ПередаватьРасходыВДругуюОрганизацию,
	|	&ОрганизацияПолучательРасходов          КАК ОрганизацияПолучательРасходов
	|ГДЕ
	|	&ОтражатьВУпрУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииНМАУУ";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                             КАК Регистратор,
	|	&Период                             КАК Период,
	|	&НематериальныйАктив                КАК НематериальныйАктив,
	|	&Организация                        КАК Организация,
	|	&СрокИспользованияУУ                КАК СрокИспользования,
	|	&МетодНачисленияАмортизацииУУ       КАК МетодНачисленияАмортизации,
	|	&КоэффициентУскоренияУУ             КАК КоэффициентУскорения,
	|	&ЛиквидационнаяСтоимость            КАК ЛиквидационнаяСтоимость,
	|	&ЛиквидационнаяСтоимостьРегл        КАК ЛиквидационнаяСтоимостьРегл
	|ГДЕ
	|	&ОтражатьВУпрУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПервоначальныеСведенияНМА(ТекстыЗапроса, Запрос, Регистры)
	
	ИмяРегистра = "ПервоначальныеСведенияНМА";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуНМАЛокализация.ТекстЗапросаТаблицаПервоначальныеСведенияНМА(ТекстыЗапроса, Запрос);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапросаВтРасчетСтоимостиСгруппированная(ТекстыЗапроса, Запрос);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Ссылка КАК Регистратор,
		|	&Период КАК Период,
		|	&НематериальныйАктив КАК НематериальныйАктив,
		|	&Организация КАК Организация,
		|	&Период КАК ДатаПринятияКУчетуУУ,
		|	&Ссылка КАК ДокументПринятияКУчетуУУ,
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, &ПервоначальнаяСтоимостьУУ) КАК ПервоначальнаяСтоимостьУУ
		|ИЗ
		|	Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
		|		ПО (РасчетСтоимости.ОбъектУчета = &НематериальныйАктив)
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка";
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаСтоимостьНМА(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "СтоимостьНМА";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса = ПринятиеКУчетуНМАЛокализация.ТекстЗапросаТаблицаСтоимостьНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Ссылка                                      КАК Регистратор,
		|	&Период                                      КАК Период,
		|	&НематериальныйАктив                         КАК НематериальныйАктив,
		|	&Организация                                 КАК Организация,
		|	&Подразделение                               КАК Подразделение,
		|	&ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
		|	
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, &ПервоначальнаяСтоимостьУУ)     КАК Стоимость,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, &ПервоначальнаяСтоимостьБУ) КАК СтоимостьРегл,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, 0) КАК СтоимостьНУ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПР, 0) КАК СтоимостьПР,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВР, 0) КАК СтоимостьВР,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьЦФ, 0) КАК СтоимостьЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУЦФ, 0) КАК СтоимостьНУЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПРЦФ, 0) КАК СтоимостьПРЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВРЦФ, 0) КАК СтоимостьВРЦФ,
		|	
		|	0 КАК ПредварительнаяСтоимость,
		|	0 КАК ПредварительнаяСтоимостьРегл,
		|
		|	ЕСТЬNULL(РасчетСтоимости.КорПостояннаяРазница, 0) КАК КорПостояннаяРазница,
		|	ЕСТЬNULL(РасчетСтоимости.КорВременнаяРазница, 0)  КАК КорВременнаяРазница,
		|	
		|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	&ВариантПримененияЦелевогоФинансирования     КАК ВариантПримененияЦелевогоФинансирования,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	&НалогообложениеНДС                          КАК НалогообложениеНДС,
		|	
		|	ЕСТЬNULL(РасчетСтоимости.КорПодразделение, НЕОПРЕДЕЛЕНО)                КАК КорПодразделение,
		|	ЕСТЬNULL(РасчетСтоимости.КорНаправлениеДеятельности, НЕОПРЕДЕЛЕНО)      КАК КорНаправлениеДеятельности,
		|	ЕСТЬNULL(РасчетСтоимости.КорСтатьяРасходов, НЕОПРЕДЕЛЕНО)               КАК КорСтатьяРасходов,
		|	ЕСТЬNULL(РасчетСтоимости.КорАналитикаРасходов, НЕОПРЕДЕЛЕНО)            КАК КорАналитикаРасходов,
		|	
		|	НЕ РасчетСтоимости.ОбъектУчета ЕСТЬ NULL                        КАК РасчетСтоимости
		|
		|ИЗ
		|	Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
		|		ПО ИСТИНА
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Нужно отдельно записать предварительную стоимость для расчета амортизации
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Ссылка                                      КАК Регистратор,
		|	&Период                                      КАК Период,
		|	&НематериальныйАктив                         КАК НематериальныйАктив,
		|	&Организация                                 КАК Организация,
		|	&Подразделение                               КАК Подразделение,
		|	&ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
		|	
		|	0                                            КАК Стоимость,
		|	0                                            КАК СтоимостьРегл,
		|	0                                            КАК СтоимостьНУ,
		|	0                                            КАК СтоимостьПР,
		|	0                                            КАК СтоимостьВР,
		|	0                                            КАК СтоимостьЦФ,
		|	0                                            КАК СтоимостьНУЦФ,
		|	0                                            КАК СтоимостьПРЦФ,
		|	0                                            КАК СтоимостьВРЦФ,
		|	
		|	&ПервоначальнаяСтоимостьУУ                   КАК ПредварительнаяСтоимость,
		|	ВЫБОР
		|		КОГДА НЕ &ВедетсяРегламентированныйУчетВНА
		|			ТОГДА &ПервоначальнаяСтоимостьБУ
		|		ИНАЧЕ 0
		|	КОНЕЦ                                        КАК ПредварительнаяСтоимостьРегл,
		|
		|	0                                            КАК КорПостояннаяРазница,
		|	0                                            КАК КорВременнаяРазница,
		|	
		|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	&ВариантПримененияЦелевогоФинансирования     КАК ВариантПримененияЦелевогоФинансирования,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	&НалогообложениеНДС                          КАК НалогообложениеНДС,
		|	
		|	НЕОПРЕДЕЛЕНО                                 КАК КорПодразделение,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорНаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорСтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
		|	
		|	ЛОЖЬ                                         КАК РасчетСтоимости
		|
		|ГДЕ
		|	&ПервоначальнаяСтоимостьУУ <> 0
		|		ИЛИ &ПервоначальнаяСтоимостьБУ <> 0 И НЕ &ВедетсяРегламентированныйУчетВНА";
	
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПрочиеРасходы(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПартииПрочихРасходов(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Ссылка                                      КАК Регистратор,
	|	&Период                                      КАК Период,
	|	&Организация                                 КАК Организация,
	|	&Подразделение                               КАК Подразделение,
	|	&Ссылка                                      КАК ДокументПоступленияРасходов,
	|	&СтатьяРасходовБУ                            КАК СтатьяРасходов,
	|	&АналитикаРасходовБУ                         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаПартий,
	|	0                                            КАК Стоимость,
	|	0                                            КАК СтоимостьБезНДС,
	|	0                                            КАК СтоимостьРегл,
	|	0                                            КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА ПВХСтатьиРасходов.ПринятиеКналоговомуУчету
	|			ТОГДА 0
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации)
	|			ТОГДА &ПервоначальнаяСтоимостьНУ
	|		ИНАЧЕ ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, &ПервоначальнаяСтоимостьБУ - &СуммаЦелевыхСредств)
	|	КОНЕЦ                                        КАК ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации)
	|			ТОГДА -&ПервоначальнаяСтоимостьНУ
	|		ИНАЧЕ -ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, &ПервоначальнаяСтоимостьБУ - &СуммаЦелевыхСредств)
	|	КОНЕЦ КАК ВременнаяРазница
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|		ПО (&СтатьяРасходовБУ = ПВХСтатьиРасходов.Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету)
	|	И ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	СписокЗапросовОбъединение = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                      КАК Период,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	&Организация                                 КАК Организация,
	|
	|	РасчетСтоимости.КорПодразделение             КАК Подразделение,
	|	РасчетСтоимости.КорНаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	РасчетСтоимости.КорСтатьяРасходов            КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаДоходов,
	|	РасчетСтоимости.КорАналитикаРасходов         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                               КАК КорПодразделение,
	|	&НаправлениеДеятельности                     КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_НМА                                КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
	|	РасчетСтоимости.ОбъектУчета                  КАК КорАналитикаАктивовПассивов,
	|	&ГруппаФинансовогоУчета                      КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                                 КАК КорОрганизация,
	|
	|	РасчетСтоимости.Сумма                        КАК Сумма,
	|	РасчетСтоимости.Стоимость                    КАК СуммаУпр,
	|	РасчетСтоимости.СтоимостьРегл                КАК СуммаРегл
	|ИЗ
	|	ВтРасчетСтоимости КАК РасчетСтоимости";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	ПринятиеКУчетуНМАЛокализация.ДополнитьТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(СписокЗапросовОбъединение);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)

	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяВтРасчетРасходов(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	&Ссылка                                      КАК Регистратор,
	|	&Период                                      КАК Период,
	|	&Организация                                 КАК Организация,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	РасчетРасходов.Подразделение                 КАК Подразделение,
	|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|	РасчетРасходов.СтатьяРасходов                КАК СтатьяРасходов,
	|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
	|
	|	РасчетРасходов.Сумма                         КАК СуммаСНДС,
	|	РасчетРасходов.СуммаБезНДС                   КАК СуммаБезНДС,
	|	РасчетРасходов.СуммаУпр                      КАК СуммаБезНДСУпр,
	|
	|	РасчетРасходов.СуммаРегл                     КАК СуммаСНДСРегл,
	|	РасчетРасходов.СуммаРегл                     КАК СуммаБезНДСРегл,
	|	РасчетРасходов.ПостояннаяРазница             КАК ПостояннаяРазница,
	|	РасчетРасходов.ВременнаяРазница              КАК ВременнаяРазница
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	ВтРасчетРасходов КАК РасчетРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Списание на расходы в НУ
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Ссылка                                      КАК Регистратор,
	|	&Период                                      КАК Период,
	|	&Организация                                 КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеСтоимостиНМА) КАК ХозяйственнаяОперация,
	|	&Подразделение                               КАК Подразделение,
	|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
	|	&СтатьяРасходовБУ                            КАК СтатьяРасходов,
	|	&АналитикаРасходовБУ                         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
	|
	|	0                                            КАК СуммаСНДС,
	|	0                                            КАК СуммаБезНДС,
	|	0                                            КАК СуммаБезНДСУпр,
	|
	|	0                                            КАК СуммаСНДСРегл,
	|	0                                            КАК СуммаБезНДСРегл,
	|	ВЫБОР 
	|		КОГДА ПВХСтатьиРасходов.ПринятиеКНалоговомуУчету
	|			ТОГДА 0
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации)
	|			ТОГДА &ПервоначальнаяСтоимостьНУ
	|		ИНАЧЕ ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, &ПервоначальнаяСтоимостьБУ - &СуммаЦелевыхСредств)
	|	КОНЕЦ                                        КАК ПостояннаяРазница,
	|	ВЫБОР 
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации)
	|			ТОГДА -&ПервоначальнаяСтоимостьНУ
	|		ИНАЧЕ -ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, &ПервоначальнаяСтоимостьБУ - &СуммаЦелевыхСредств)
	|	КОНЕЦ КАК ВременнаяРазница
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|		ПО (&СтатьяРасходовБУ = ПВХСтатьиРасходов.Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРасчетСтоимостиСгруппированная(ТекстыЗапроса, Запрос)

	ИмяТаблицы = "ВтРасчетСтоимостиСгруппированная";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат "";
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетСтоимости.ОбъектУчета               КАК ОбъектУчета,
	|	СУММА(РасчетСтоимости.Стоимость)          КАК Стоимость,
	|	СУММА(РасчетСтоимости.СтоимостьРегл)      КАК СтоимостьРегл,
	|	СУММА(РасчетСтоимости.СтоимостьНУ)        КАК СтоимостьНУ,
	|	СУММА(РасчетСтоимости.СтоимостьПР)        КАК СтоимостьПР,
	|	СУММА(РасчетСтоимости.СтоимостьВР)        КАК СтоимостьВР,
	|	СУММА(РасчетСтоимости.СтоимостьЦФ)        КАК СтоимостьЦФ,
	|	СУММА(РасчетСтоимости.СтоимостьНУЦФ)      КАК СтоимостьНУЦФ,
	|	СУММА(РасчетСтоимости.СтоимостьПРЦФ)      КАК СтоимостьПРЦФ,
	|	СУММА(РасчетСтоимости.СтоимостьВРЦФ)      КАК СтоимостьВРЦФ
	|ПОМЕСТИТЬ ВтРасчетСтоимостиСгруппированная 
	|ИЗ
	|	ВтРасчетСтоимости КАК РасчетСтоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетСтоимости.ОбъектУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроведениеПоРеглУчету

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуНМАЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуНМАЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ПринятиеКУчетуНМАЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	ПринятиеКУчетуНМАЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли
