#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ИзменениеПараметровОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Команда = ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаСписка";
	КонецЕсли;
	
	ПринятиеКУчетуОСЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Принятие к учету ОС".
//
// Параметры:
//  КомандыСозданияНаОсновании	 - ТаблицаЗначений	 - Таблица с командами создания на основании. Для изменения.
//  	См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//  Порядок						 - Число			 - Порядок команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Порядок = 0) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуОС2_4) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПринятиеКУчетуОС2_4);
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.Порядок = Порядок;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПраваПользователяПовтИсп.ПечатьЭтикетокИЦенников() Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ВнеоборотныеАктивыКлиент.ПечатьЭтикетокОбъектовЭксплуатацииИзДокумента";
		КомандаПечати.МенеджерПечати = "Документ.ПринятиеКУчетуОС2_4";
		КомандаПечати.Идентификатор = "Этикетки";
		КомандаПечати.Представление = НСтр("ru = 'Этикетки'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
	ПринятиеКУчетуОСЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ПринятиеКУчетуОСЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьСтоимость(Объект, ВыбранныеСтроки = Неопределено) Экспорт

	Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Объект.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Дата                                      КАК Период,
	|	&ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	&ВидАналитикиКапитализацииРасходов         КАК ВидАналитикиКапитализацииРасходов,
	|	&ФактическаяСтоимость                      КАК ФактическаяСтоимость,
	|	&ГруппаФинансовогоУчета                    КАК ГруппаФинансовогоУчета,
	|	&ВариантПримененияЦелевогоФинансирования   КАК ВариантПримененияЦелевогоФинансирования,
	|	&ТекущийДокумент                           КАК Регистратор,
	|	&Организация                               КАК Организация,
	|	&НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА &ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)
	|			ТОГДА &ОбъектСтроительства
	|		ИНАЧЕ ТаблицаОС.ОсновноеСредство
	|	КОНЕЦ                                      КАК АналитикаКапитализацииРасходов,
	|	&ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете
	|ПОМЕСТИТЬ ДанныеКРасчету
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НаправлениеДеятельности,
	|	АналитикаКапитализацииРасходов";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивы.ТекстЗапросаРасходыПоДокументам(СписокЗапросов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходыПоДокументам.Период,
	|	РасходыПоДокументам.Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов,
	|	РасходыПоДокументам.Сумма КАК Сумма,
	|	РасходыПоДокументам.СуммаУпр КАК СуммаУпр,
	|	РасходыПоДокументам.СуммаБезНДС КАК СуммаБезНДС,
	|	РасходыПоДокументам.СуммаРегл КАК СуммаРегл,
	|	РасходыПоДокументам.ПостояннаяРазница КАК ПостояннаяРазница,
	|	РасходыПоДокументам.ВременнаяРазница КАК ВременнаяРазница
	|ИЗ
	|	РасходыПоДокументам КАК РасходыПоДокументам";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	ДатаДокумента = ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("ВидАналитикиКапитализацииРасходов", Объект.ВидАналитикиКапитализацииРасходов);
	Запрос.УстановитьПараметр("ФактическаяСтоимость", Ложь);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", Объект.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("ВариантПримененияЦелевогоФинансирования", Объект.ВариантПримененияЦелевогоФинансирования);
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОбъектСтроительства", Объект.ОбъектСтроительства);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ВнеоборотныеАктивы.УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос);
	
	ТаблицаОС = Объект.ОС.Выгрузить(ВыбранныеСтроки);
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	
	Результат = Запрос.Выполнить();
	
	ПараметрыРасчетаСтоимости = ВнеоборотныеАктивы.ПараметрыРасчетаСтоимости();
	ПараметрыРасчетаСтоимости.ВидАналитикиКапитализацииРасходов = Объект.ВидАналитикиКапитализацииРасходов;
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ОбъектУчета", "ОсновноеСредство");
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета, ТаблицаОС, СоответствиеПолей);
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВРеглУчете, "ОтражатьВРеглУчете");
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВУпрУчете, "ОтражатьВУпрУчете");
	РасходыПоДокументу = ВнеоборотныеАктивы.РассчитатьРасходыПоДокументу(Результат.Выгрузить(), ПараметрыРасчетаСтоимости);
							
	РасходыПоДокументу.Свернуть("ОбъектУчета", "СуммаРегл,СуммаУпр");
	
	Если ВыбранныеСтроки <> Неопределено Тогда
		СписокСтрок = ВыбранныеСтроки;
	Иначе
		СписокСтрок = Объект.ОС;
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		
		СтруктураПоиска = Новый Структура("ОбъектУчета", ДанныеСтроки.ОсновноеСредство);
		СписокСтрокРасходы = РасходыПоДокументу.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрокРасходы.Количество() <> 0 Тогда
			Если Объект.ОтражатьВРеглУчете Тогда
				ДанныеСтроки.СтоимостьБУ = СписокСтрокРасходы[0].СуммаРегл;
			КонецЕсли; 
			Если Объект.ОтражатьВУпрУчете Тогда
				ДанныеСтроки.СтоимостьУУ = СписокСтрокРасходы[0].СуммаУпр;
			КонецЕсли;
		Иначе
			ДанныеСтроки.СтоимостьУУ = 0;
			ДанныеСтроки.СтоимостьБУ = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ПринятиеКУчетуОСЛокализация.ЗаполнитьСтоимость(Объект, СписокСтрок, ТаблицаОС);
	
КонецПроцедуры

// Формирует таблицы движений при расчете стоимости.
//
// Параметры:
//  Регистратор			 	- ДокументСсылка.ПринятиеКУчетуОС2_4 - Документ, для которого формируются движения
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит вспомогательные временные таблицы, которые могут
//                                                      использоваться для формирования движений.
//
// Возвращаемое значение:
//  Структура - Содержит таблицы движений.
//
Функция ТаблицыДвиженийРасчетаСтоимости(Регистратор, МенеджерВременныхТаблиц) Экспорт

	СписокРегистров = 
	"ПрочиеРасходы,ПартииПрочихРасходов,ДвиженияДоходыРасходыПрочиеАктивыПассивы,
	|СтоимостьОС,АмортизацияОС,
	|ПараметрыАмортизацииОСБУ,ПараметрыАмортизацииОСУУ,ПервоначальныеСведенияОС,
	|ПервоначальныеСведенияОСБухгалтерскийУчет,ПервоначальныеСведенияОСНалоговыйУчет,
	|ОтражениеДокументовВРеглУчете";
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Регистратор, ДополнительныеСвойства);
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ИнициализироватьДанныеДокумента(Регистратор, ДополнительныеСвойства, СписокРегистров);

	Возврат ДополнительныеСвойства.ТаблицыДляДвижений;
	
КонецФункции

Функция ПредставлениеРеквизитов() Экспорт

	ПредставлениеРеквизитов = Новый Соответствие;

	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ВедетсяРегламентированныйУчетВНА = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	
	Если ВедетсяРегламентированныйУчетВНА Тогда
		
		ПредставлениеРеквизитов.Вставить("ОС.СтоимостьБУ", СтрШаблон(НСтр("ru = 'Стоимость регл. (%1)'"), Строка(ВалютаРегл)));
		ПредставлениеРеквизитов.Вставить("ОС.СтоимостьУУ", СтрШаблон(НСтр("ru = 'Стоимость упр. (%1)'"), Строка(ВалютаУпр)));
		ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимость", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)'"), Строка(ВалютаУпр)));
		
	Иначе
		
		Если ВалютаРегл = ВалютаУпр Тогда
			ПредставлениеРеквизитов.Вставить("ОС.СтоимостьБУ", НСтр("ru = 'Стоимость'"));
			ПредставлениеРеквизитов.Вставить("ОС.СтоимостьУУ", НСтр("ru = 'Стоимость'"));
			ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимость", НСтр("ru = 'Ликвидационная стоимость'"));
		Иначе
			ПредставлениеРеквизитов.Вставить("ОС.СтоимостьБУ", СтрШаблон(НСтр("ru = 'Стоимость (%1)'"), Строка(ВалютаРегл)));
			ПредставлениеРеквизитов.Вставить("ОС.СтоимостьУУ", СтрШаблон(НСтр("ru = 'Стоимость (%1)'"), Строка(ВалютаУпр)));
			ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимость", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)'"), Строка(ВалютаУпр)));
			ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимостьРегл", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)'"), Строка(ВалютаРегл)));
		КонецЕсли;
		
	КонецЕсли; 
	
	ПринятиеКУчетуОСЛокализация.ДополнитьПредставлениеРеквизитов(ПредставлениеРеквизитов);
	
	Возврат ПредставлениеРеквизитов;
	
КонецФункции
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ПринятиеКУчетуОС2_4";
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		ВЗапросеЕстьИсточник = Ложь;
		
	ИначеЕсли ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		
		ТекстЗапроса = ПринятиеКУчетуОСЛокализация.АдаптированныйТекстЗапросаДвиженийПоРегистру(
							ИмяРегистра, ПереопределениеРасчетаПараметров, СинонимТаблицыДокумента);
		
	КонецЕсли;
		
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров,
										ТекстыЗапросаВременныхТаблиц);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСтоимостьОС(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаАмортизацияОС(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	
	ПринятиеКУчетуОСЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина,, Регистры <> Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                            КАК Ссылка,
	|	ДанныеДокумента.Дата                                              КАК Период,
	|	ДанныеДокумента.Номер                                             КАК Номер,
	|	ДанныеДокумента.Организация                                       КАК Организация,
	|	ДанныеДокумента.Местонахождение                                   КАК Местонахождение,
	|	ДанныеДокумента.МОЛ                                               КАК МОЛ,
	|	ДанныеДокумента.ХозяйственнаяОперация                             КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.НаправлениеДеятельности                           КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Ответственный                                     КАК Ответственный,
	|	ДанныеДокумента.Комментарий                                       КАК Комментарий,
	|	ДанныеДокумента.Проведен                                          КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления                                   КАК ПометкаУдаления,
	|	ДанныеДокумента.ОтражатьВРеглУчете                                КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете                                 КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.ГруппаФинансовогоУчета                            КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.ОбъектСтроительства                               КАК ОбъектСтроительства,
	|	ДанныеДокумента.ВидАналитикиКапитализацииРасходов                 КАК ВидАналитикиКапитализацииРасходов,
	|	ДанныеДокумента.ПорядокУчетаУУ                                    КАК ПорядокУчетаУУ,
	|	ДанныеДокумента.АдресМестонахождения                              КАК АдресМестонахождения,
	|	ДанныеДокумента.АдресМестонахожденияЗначение                      КАК АдресМестонахожденияЗначение,
	|	&ПринятиеКУчетуОС_СтатьяРасходовУУ                                КАК СтатьяРасходовУУ,
	|	&ПринятиеКУчетуОС_ВариантРаспределенияРасходовУпр                 КАК ВариантРаспределенияРасходовУпр,
	|	&ПринятиеКУчетуОС_АналитикаРасходовУУ                             КАК АналитикаРасходовУУ,
	|	ДанныеДокумента.НачислятьАмортизациюУУ                            КАК НачислятьАмортизациюУУ,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
	|		ИНАЧЕ ДанныеДокумента.МетодНачисленияАмортизацииУУ
	|	КОНЕЦ                                                             КАК МетодНачисленияАмортизацииУУ,
	|	ДанныеДокумента.СрокИспользованияУУ                               КАК СрокИспользованияУУ,
	|	ДанныеДокумента.КоэффициентУскоренияУУ                            КАК КоэффициентУскоренияУУ,
	|	&ПринятиеКУчетуОС_РеквизитыДокумента
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ПринятиеКУчетуОСЛокализация.ДобавитьВТекстЗапросаРеквизитыДокумента(Запрос.Текст, "ДанныеДокумента");
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("НомерПакета", 0);
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	СписокРазрешенныхВариантовРаспределенияРасходов = Новый Массив;
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	Запрос.УстановитьПараметр("СписокРазрешенныхВариантовРаспределенияРасходов", СписокРазрешенныхВариантовРаспределенияРасходов);
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Реквизиты.Организация, Реквизиты.Период);
	Запрос.УстановитьПараметр("ВключатьВСоставНалоговыхРасходовЛизинговыеПлатежи", 
		ПараметрыУчетнойПолитики <> Неопределено И ПараметрыУчетнойПолитики.ВключатьВСоставНалоговыхРасходовЛизинговыеПлатежи);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуОС2_4"));
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru='Принятие к учету ОС'"));
	ЗначенияПараметровПроведения.Вставить("СтатьяАП_ОС", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОсновныеСредства);
	ЗначенияПараметровПроведения.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());

	Если Реквизиты <> Неопределено Тогда
		
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
		ЗначенияПараметровПроведения.Вставить(
			"ЕстьУчетСебестоимости", 
			РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Реквизиты.Период));
	
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&Местонахождение                        КАК Подразделение,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&Период                                 КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоОС";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОС.НомерСтроки-1, 0)    КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Местонахождение                        КАК Подразделение,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Проведен                               КАК Проведен,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестонахождениеОС";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                             КАК Период,
	|	&Организация                        КАК Организация,
	|	ТаблицаОС.ОсновноеСредство          КАК ОсновноеСредство,
	|	&МОЛ                                КАК МОЛ,
	|	&Местонахождение                    КАК Местонахождение,
	|	&АдресМестонахождения               КАК АдресМестонахождения,
	|	&АдресМестонахожденияЗначение       КАК АдресМестонахожденияЗначение,
	|	&ОтражатьВРеглУчете                 КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                  КАК ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОС";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	&Организация                            КАК Организация,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&ГруппаФинансовогоУчета                 КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.ПоказательНаработки           КАК ПоказательНаработки,
	|	ТаблицаОС.ОбъемНаработки                КАК ОбъемНаработки,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОСУУ";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	&Организация                            КАК Организация,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК Состояние,
	|	&НачислятьАмортизациюУУ                 КАК НачислятьАмортизациюУУ,
	|	&СтатьяРасходовУУ                       КАК СтатьяРасходов,
	|	&АналитикаРасходовУУ                    КАК АналитикаРасходов,
	|	&ПередаватьРасходыВДругуюОрганизацию    КАК ПередаватьРасходыВДругуюОрганизацию,
	|	&ОрганизацияПолучательРасходов          КАК ОрганизацияПолучательРасходов
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииОСУУ";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                             КАК Период,
	|	&Период                             КАК ДатаПоследнегоИзменения,
	|	&Организация                        КАК Организация,
	|	ТаблицаОС.ОсновноеСредство          КАК ОсновноеСредство,
	|	&СрокИспользованияУУ                КАК СрокИспользования,
	|	&СрокИспользованияУУ                КАК СрокИспользованияДляВычисленияАмортизации,
	|	ТаблицаОС.ОбъемНаработки            КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	&КоэффициентУскоренияУУ             КАК КоэффициентУскорения,
	|	&МетодНачисленияАмортизацииУУ       КАК МетодНачисленияАмортизации,
	|
	|	ТаблицаОС.ЛиквидационнаяСтоимость       КАК ЛиквидационнаяСтоимость,
	|	ТаблицаОС.ЛиквидационнаяСтоимостьРегл   КАК ЛиквидационнаяСтоимостьРегл,
	|
	|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаОС.СтоимостьУУ) КАК СтоимостьДляВычисленияАмортизации,
	|
	|	ВЫБОР
	|		КОГДА НЕ &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьДляВычисленияАмортизацииРегл
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
	|		ПО РасчетСтоимости.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПервоначальныеСведенияОС";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	&Организация КАК Организация,
		|	&Период КАК ДатаВводаВЭксплуатациюУУ,
		|	&Ссылка КАК ДокументВводаВЭксплуатациюУУ,
		|	&ПорядокУчетаУУ КАК ПорядокУчетаУУ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ) КАК ПервоначальнаяСтоимостьБУ,
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаОС.СтоимостьУУ) КАК ПервоначальнаяСтоимостьУУ
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
		|		ПО (РасчетСтоимости.ОбъектУчета = ТаблицаОС.ОсновноеСредство)
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка";
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаСтоимостьОС(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "СтоимостьОС";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаСтоимостьОС(ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	&Местонахождение                             КАК Подразделение,
		|	&ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
		|	ВЫБОР 
		|		КОГДА &ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуСамортизированногоОС)
		|		ИНАЧЕ &ХозяйственнаяОперация 
		|	КОНЕЦ                                        КАК ХозяйственнаяОперация,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	&ВидАналитикиКапитализацииРасходов           КАК ВидАналитикиКапитализацииРасходов,
		|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
		|	ВЫБОР 
		|		КОГДА &ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства) 
		|			ТОГДА &ОбъектСтроительства 
		|		ИНАЧЕ ТаблицаОС.ОсновноеСредство 
		|	КОНЕЦ                                        КАК АналитикаКапитализацииРасходов,
		|
		|	ЕСТЬNULL(РасчетСтоимости.КорПодразделение, НЕОПРЕДЕЛЕНО)                КАК КорПодразделение,
		|	ЕСТЬNULL(РасчетСтоимости.КорНаправлениеДеятельности, НЕОПРЕДЕЛЕНО)      КАК КорНаправлениеДеятельности,
		|	ЕСТЬNULL(РасчетСтоимости.КорСтатьяРасходов, НЕОПРЕДЕЛЕНО)               КАК КорСтатьяРасходов,
		|	ЕСТЬNULL(РасчетСтоимости.КорАналитикаРасходов, НЕОПРЕДЕЛЕНО)            КАК КорАналитикаРасходов,
		|	НЕ РасчетСтоимости.ОбъектУчета ЕСТЬ NULL                                КАК РасчетСтоимости,
		|
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаОС.СтоимостьУУ) КАК Стоимость,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ) КАК СтоимостьРегл,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, 0) КАК СтоимостьНУ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПР, 0) КАК СтоимостьПР,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВР, 0) КАК СтоимостьВР,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьЦФ, 0) КАК СтоимостьЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУЦФ, 0) КАК СтоимостьНУЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПРЦФ, 0) КАК СтоимостьПРЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВРЦФ, 0) КАК СтоимостьВРЦФ,
		|
		|	0 КАК ПредварительнаяСтоимость,
		|	0 КАК ПредварительнаяСтоимостьРегл
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
		|		ПО РасчетСтоимости.ОбъектУчета = ТаблицаОС.ОсновноеСредство
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Нужно отдельно записать предварительную стоимость для расчета амортизации
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	&Местонахождение                             КАК Подразделение,
		|	&ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
		|	ВЫБОР 
		|		КОГДА &ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуСамортизированногоОС)
		|		ИНАЧЕ &ХозяйственнаяОперация 
		|	КОНЕЦ                                        КАК ХозяйственнаяОперация,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	&ВидАналитикиКапитализацииРасходов           КАК ВидАналитикиКапитализацииРасходов,
		|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
		|	ВЫБОР 
		|		КОГДА &ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства) 
		|			ТОГДА &ОбъектСтроительства 
		|		ИНАЧЕ ТаблицаОС.ОсновноеСредство 
		|	КОНЕЦ                                        КАК АналитикаКапитализацииРасходов,
		|
		|	НЕОПРЕДЕЛЕНО                                 КАК КорПодразделение,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорНаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорСтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
		|	ЛОЖЬ                                         КАК РасчетСтоимости,
		|
		|	0                                            КАК Стоимость,
		|	0                                            КАК СтоимостьРегл,
		|	0                                            КАК СтоимостьНУ,
		|	0                                            КАК СтоимостьПР,
		|	0                                            КАК СтоимостьВР,
		|	0                                            КАК СтоимостьЦФ,
		|	0                                            КАК СтоимостьНУЦФ,
		|	0                                            КАК СтоимостьПРЦФ,
		|	0                                            КАК СтоимостьВРЦФ,
		|
		|	ТаблицаОС.СтоимостьУУ                        КАК ПредварительнаяСтоимость,
		|
		|	ВЫБОР
		|		КОГДА НЕ &ВедетсяРегламентированныйУчетВНА
		|			ТОГДА ТаблицаОС.СтоимостьБУ
		|		ИНАЧЕ 0
		|	КОНЕЦ                                        КАК ПредварительнаяСтоимостьРегл
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И (ТаблицаОС.СтоимостьБУ <> 0 И НЕ &ВедетсяРегламентированныйУчетВНА
		|		ИЛИ ТаблицаОС.СтоимостьУУ <> 0)";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаАмортизацияОС(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "АмортизацияОС";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаАмортизацияОС(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапросаТаблицаВтНачисленнаяАмортизация(Запрос, ТекстыЗапроса);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)          КАК ВидДвижения,
		|	&Ссылка                                         КАК Регистратор,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОС) КАК ХозяйственнаяОперация,
		|	НачисленнаяАмортизация.ПериодРасчета            КАК Период,
		|	НачисленнаяАмортизация.Организация              КАК Организация,
		|	НачисленнаяАмортизация.Подразделение            КАК Подразделение,
		|	НачисленнаяАмортизация.ОсновноеСредство         КАК ОсновноеСредство,
		|	НачисленнаяАмортизация.НаправлениеДеятельности  КАК НаправлениеДеятельности,
		|	НачисленнаяАмортизация.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
		|
		|	НачисленнаяАмортизация.СуммаУУ    КАК Амортизация,
		|	НачисленнаяАмортизация.СуммаБУ    КАК АмортизацияРегл,
		|
		|	НачисленнаяАмортизация.КорПодразделение              КАК КорПодразделение,
		|	НачисленнаяАмортизация.КорНаправлениеДеятельности    КАК КорНаправлениеДеятельности,
		|	НачисленнаяАмортизация.СтатьяРасходов                КАК КорСтатьяРасходов,
		|	НачисленнаяАмортизация.АналитикаРасходов             КАК КорАналитикаРасходов
		|ИЗ
		|	ВТ_НачисленнаяАмортизация КАК НачисленнаяАмортизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)          КАК ВидДвижения,
		|	&Ссылка                                         КАК Регистратор,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОС) КАК ХозяйственнаяОперация,
		|	&Период                                         КАК Период,
		|	&Организация                                    КАК Организация,
		|	&Местонахождение                                КАК Подразделение,
		|	ТаблицаОС.ОсновноеСредство                      КАК ОсновноеСредство,
		|	&НаправлениеДеятельности                        КАК НаправлениеДеятельности,
		|	&ГруппаФинансовогоУчета                         КАК ГруппаФинансовогоУчета,
		|
		|	ТаблицаОС.СтоимостьУУ             КАК Амортизация,
		|	ТаблицаОС.СтоимостьБУ             КАК АмортизацияРегл,
		|
		|	НЕОПРЕДЕЛЕНО                      КАК КорПодразделение,
		|	НЕОПРЕДЕЛЕНО                      КАК КорНаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                      КАК КорСтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                      КАК КорАналитикаРасходов
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)";
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	СписокЗапросовОбъединение = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                      КАК Период,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	&Организация                                 КАК Организация,
	|
	|	РасчетСтоимости.КорПодразделение             КАК Подразделение,
	|	РасчетСтоимости.КорНаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	РасчетСтоимости.КорСтатьяРасходов            КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаДоходов,
	|	РасчетСтоимости.КорАналитикаРасходов         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ГруппаФинансовогоУчета,
	|
	|	&Местонахождение                             КАК КорПодразделение,
	|	&НаправлениеДеятельности                     КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                                 КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
	|	РасчетСтоимости.ОбъектУчета                  КАК КорАналитикаАктивовПассивов,
	|	&ГруппаФинансовогоУчета                      КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                                 КАК КорОрганизация,
	|
	|	РасчетСтоимости.Сумма                        КАК Сумма,
	|	РасчетСтоимости.СтоимостьРегл 
	|		+ РасчетСтоимости.СтоимостьЦФ            КАК СуммаРегл,
	|	РасчетСтоимости.Стоимость                    КАК СуммаУпр
	|ИЗ
	|	ВтРасчетСтоимости КАК РасчетСтоимости";
	
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	ПринятиеКУчетуОСЛокализация.ДополнитьТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(СписокЗапросовОбъединение);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)

	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяВтРасчетРасходов(ТекстыЗапроса, Запрос);
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
		ЗапросыРегистра = Новый Массив;
		
		ЗапросыРегистра.Добавить(РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы());
		ЗапросыРегистра.Добавить(ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаОтражениеНачисленнойАмортизацииВПрочихРасходах());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                      КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
		|	&Организация                                 КАК Организация,
		|   РасчетРасходов.Подразделение                 КАК Подразделение,
		|	РасчетРасходов.СтатьяРасходов                КАК СтатьяРасходов,
		|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
		|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
		|
		|	РасчетРасходов.Сумма                         КАК СуммаСНДС,
		|	РасчетРасходов.СуммаБезНДС                   КАК СуммаБезНДС,
		|	РасчетРасходов.СуммаУпр                      КАК СуммаБезНДСУпр,
		|
		|	РасчетРасходов.СуммаРегл                     КАК СуммаСНДСРегл,
		|	РасчетРасходов.СуммаРегл                     КАК СуммаБезНДСРегл,
		|	РасчетРасходов.ПостояннаяРазница             КАК ПостояннаяРазница,
		|	РасчетРасходов.ВременнаяРазница              КАК ВременнаяРазница,
		|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры
		|ИЗ
		|	ВтРасчетРасходов КАК РасчетРасходов";
		
		ЗапросыРегистра.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ЗапросыРегистра, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаВтНачисленнаяАмортизация(Запрос, ТекстыЗапроса)

	ИмяТаблицы = "ВТ_НачисленнаяАмортизация";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	ТекстЗапроса =
	// Амортизация по предварительной стоимости
	"ВЫБРАТЬ
	|	&Период                                         КАК ПериодРасчета,
	|	&Организация                                    КАК Организация,
	|	&Местонахождение                                КАК Подразделение,
	|	&Местонахождение                                КАК КорПодразделение,
	|	ТаблицаОС.ОсновноеСредство                      КАК ОсновноеСредство,
	|	&НаправлениеДеятельности                        КАК НаправлениеДеятельности,
	|	&НаправлениеДеятельности                        КАК КорНаправлениеДеятельности,
	|	&ГруппаФинансовогоУчета                         КАК ГруппаФинансовогоУчета,
	|	&СтатьяРасходовУУ                               КАК СтатьяРасходов,
	|	&АналитикаРасходовУУ                            КАК АналитикаРасходов,
	|	ТаблицаОС.СтоимостьУУ                           КАК СуммаУУ,
	|	ТаблицаОС.СтоимостьБУ                           КАК СуммаБУ,
	|	0                                               КАК НомерПакета,
	|	0                                               КАК ВыработкаБУ,
	|	0                                               КАК РесурсВыработанныйЗаПрошлыйПериод,
	|	0                                               КАК РесурсВыработанныйЗаТекущийПериод,
	|	0                                               КАК СтоимостьДляВычисленияАмортизации,
	|	ЛОЖЬ                                            КАК ЭтоДоначисление
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету)
	|
	// Доначисление амортизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                                         КАК ПериодРасчета,
	|	&Организация                                    КАК Организация,
	|	&Местонахождение                                КАК Подразделение,
	|	&Местонахождение                                КАК КорПодразделение,
	|	ТаблицаОС.ОсновноеСредство                      КАК ОсновноеСредство,
	|	&НаправлениеДеятельности                        КАК НаправлениеДеятельности,
	|	&НаправлениеДеятельности                        КАК КорНаправлениеДеятельности,
	|	&ГруппаФинансовогоУчета                         КАК ГруппаФинансовогоУчета,
	|	ВЫБОР 
	|		КОГДА &ВариантРаспределенияРасходовУпр В (&СписокРазрешенныхВариантовРаспределенияРасходов)
	|			ТОГДА &СтатьяРасходовУУ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ДоначислениеИмущественныхНалоговИАмортизации)
	|	КОНЕЦ                                           КАК СтатьяРасходов,
	|	ВЫБОР 
	|		КОГДА &ВариантРаспределенияРасходовУпр В (&СписокРазрешенныхВариантовРаспределенияРасходов)
	|			ТОГДА &АналитикаРасходовУУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                           КАК АналитикаРасходов,
	|
	|	РасчетСтоимости.Стоимость - ТаблицаОС.СтоимостьУУ КАК СуммаУУ,
	|	РасчетСтоимости.СтоимостьРегл - ТаблицаОС.СтоимостьБУ КАК СуммаБУ,
	|
	|	0                                               КАК НомерПакета,
	|	0                                               КАК ВыработкаБУ,
	|	0                                               КАК РесурсВыработанныйЗаПрошлыйПериод,
	|	0                                               КАК РесурсВыработанныйЗаТекущийПериод,
	|	0                                               КАК СтоимостьДляВычисленияАмортизации,
	|	ЛОЖЬ                                            КАК ЭтоДоначисление
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
	|		ПО РасчетСтоимости.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету)
	|	И РасчетСтоимости.Стоимость > ТаблицаОС.СтоимостьУУ";
	
	Документы.АмортизацияОС2_4.ТекстЗапросаВтНачисленнаяАмортизация(ТекстыЗапроса, ТекстЗапроса, Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса)

	ИмяТаблицы = "ВтРасчетСтоимостиСгруппированная";
	
	Если ПроведениеСерверУТ.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасчетСтоимости.ОбъектУчета               КАК ОбъектУчета,
		|	СУММА(РасчетСтоимости.Стоимость)          КАК Стоимость,
		|	СУММА(РасчетСтоимости.СтоимостьРегл)      КАК СтоимостьРегл,
		|	СУММА(РасчетСтоимости.СтоимостьНУ)        КАК СтоимостьНУ,
		|	СУММА(РасчетСтоимости.СтоимостьПР)        КАК СтоимостьПР,
		|	СУММА(РасчетСтоимости.СтоимостьВР)        КАК СтоимостьВР,
		|	СУММА(РасчетСтоимости.СтоимостьЦФ)        КАК СтоимостьЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьНУЦФ)      КАК СтоимостьНУЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьПРЦФ)      КАК СтоимостьПРЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьВРЦФ)      КАК СтоимостьВРЦФ,
		|	СУММА(РасчетСтоимости.НДС)                КАК НДС,
		|	СУММА(РасчетСтоимости.НДСРегл)            КАК НДСРегл
		|ПОМЕСТИТЬ ВтРасчетСтоимостиСгруппированная
		|ИЗ
		|	ВтРасчетСтоимости КАК РасчетСтоимости
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетСтоимости.ОбъектУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроведениеПоРеглУчету

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуОСЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуОСЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	ПринятиеКУчетуОСЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);

КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыОС1(ПараметрыПечати, МассивОбъектов) Экспорт

	Возврат ПринятиеКУчетуОСЛокализация.ПолучитьДанныеДляПечатнойФормыОС1(ПараметрыПечати, МассивОбъектов);

КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивОбъектов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	Возврат МассивОбъектов;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ПринятиеКУчетуОС2_4.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.4.10.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c10584c2-82e0-4a30-b3d4-9b086e95a3e6");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПринятиеКУчетуОС2_4.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет документы ""Принятие к учету ОС"":
	|- Заполняет новый реквизит ""Адрес местонахождения (значение)""
	|- Заполняет пустой реквизит ""Вариант применения целевого финансирования""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ПринятиеКУчетуОС2_4";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4 КАК ДанныеДокумента
	|ГДЕ
	|	(ДанныеДокумента.АдресМестонахождения <> """"
	|				И (ВЫРАЗИТЬ(ДанныеДокумента.АдресМестонахожденияЗначение КАК СТРОКА(100))) = """"
	|			ИЛИ ДанныеДокумента.ВариантПримененияЦелевогоФинансирования = ЗНАЧЕНИЕ(Перечисление.ВариантыПримененияЦелевогоФинансирования.ПустаяСсылка))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	СписокСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокСсылок);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяОбъекта = "Документ.ПринятиеКУчетуОС2_4";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для каждого Выборка Из ОбновляемыеДанные Цикл
 		
 		НачатьТранзакцию();
		
 		Попытка
			
 			Блокировка = Новый БлокировкаДанных;
 			ЭлементБлокировки = Блокировка.Добавить("Документ.ПринятиеКУчетуОС2_4");
 			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
 			Блокировка.Заблокировать();
 			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
 				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеОбъекта.АдресМестонахождения)
				И НЕ ЗначениеЗаполнено(ДанныеОбъекта.АдресМестонахожденияЗначение) Тогда
				
				ДанныеОбъекта.АдресМестонахожденияЗначение = 
					УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
						ДанныеОбъекта.АдресМестонахождения,
						Перечисления.ТипыКонтактнойИнформации.Адрес);
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ВариантПримененияЦелевогоФинансирования) Тогда
				ДанныеОбъекта.ВариантПримененияЦелевогоФинансирования = Перечисления.ВариантыПримененияЦелевогоФинансирования.НеИспользуется;
			КонецЕсли;
			
			Если ДанныеОбъекта.Модифицированность() Тогда
	 			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли; 
	
			ЗафиксироватьТранзакцию();
			
 		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
 		КонецПопытки;
 
 	КонецЦикла;
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли