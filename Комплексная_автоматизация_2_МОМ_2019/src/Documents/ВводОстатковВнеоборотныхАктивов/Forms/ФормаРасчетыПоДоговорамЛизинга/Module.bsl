
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОФормление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Заголовок = ВнеоборотныеАктивыВызовСервера.ПредставлениеВводаОстатков2_2(Объект);
	
	ЗаполнитьСлужебныеРеквизитыТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РасчетыПоДоговорамЛизингаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму(
		"Справочник.ДоговорыЛизинга.ФормаВыбора",
		ПараметрыФормыВыбора,
		ЭтаФорма,
		ЭтаФорма,,,
		Новый ОписаниеОповещения(
			"ОбработкаВыбораДоговора",
			ЭтаФорма),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоДоговорамЛизингаКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоДоговорамЛизинга.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		ЗаполнитьСлужебныеРеквизитыТаблицы(Элементы.РасчетыПоДоговорамЛизинга.ТекущаяСтрока);
	Иначе
		ТекущиеДанные.ДоговорВВалютеРегл = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоДоговорамЛизингаДоговорПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоДоговорамЛизинга.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Договор) Тогда
		ЗаполнитьСлужебныеРеквизитыТаблицы(Элементы.РасчетыПоДоговорамЛизинга.ТекущаяСтрока);
	Иначе
		ТекущиеДанные.ДоговорВВалютеРегл = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоДоговорамЛизингаТипЗадолженностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоДоговорамЛизинга.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипЗадолженности) Тогда
		ЗаполнитьСлужебныеРеквизитыТаблицы(Элементы.РасчетыПоДоговорамЛизинга.ТекущаяСтрока);
	Иначе
		ТекущиеДанные.ДоговорВВалютеРегл = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДоговора(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаВыбораДоговораНаСервере(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Заголовок = ВнеоборотныеАктивыВызовСервера.ПредставлениеВводаОстатков2_2(Объект);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаполнитьСлужебныеРеквизитыТаблицы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОФормление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область СуммаРегл
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасчетыПоДоговорамЛизингаСуммаРегл.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасчетыПоДоговорамЛизинга.ДоговорВВалютеРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораДоговораНаСервере(ВыбранноеЗначение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", ВыбранноеЗначение);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Партнер КАК Партнер,
	|	Т.Контрагент КАК Контрагент,
	|	Т.Ссылка КАК Договор,
	|	Т.ГруппаФинансовогоУчета.СчетУчетаРасчетовСЛизингодателемЛизинговыеУслуги КАК СчетУчета,
	|	ЛОЖЬ КАК СальдоДебетовое,
	|	ВЫБОР
	|		КОГДА Т.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоговорВВалютеРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоЛизингу.ЛизинговыйПлатеж) КАК ТипЗадолженности
	|ИЗ
	|	Справочник.ДоговорыЛизинга КАК Т
	|ГДЕ
	|	Т.Ссылка = &Договор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Партнер КАК Партнер,
	|	Т.Контрагент,
	|	Т.Ссылка,
	|	Т.ГруппаФинансовогоУчета.СчетУчетаРасчетовСЛизингодателемВыкупПредметаЛизинга,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Т.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоЛизингу.ВыкупПредметаЛизинга)
	|ИЗ
	|	Справочник.ДоговорыЛизинга КАК Т
	|ГДЕ
	|	Т.Ссылка = &Договор
	|	И Т.ЕстьВыкупПредметаЛизинга
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Партнер КАК Партнер,
	|	Т.Контрагент,
	|	Т.Ссылка,
	|	Т.ГруппаФинансовогоУчета.СчетУчетаРасчетовСЛизингодателемОбеспечительныйПлатеж,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА Т.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж)
	|ИЗ
	|	Справочник.ДоговорыЛизинга КАК Т
	|ГДЕ
	|	Т.Ссылка = &Договор
	|	И Т.ЕстьОбеспечительныйПлатеж
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Партнер КАК Партнер,
	|	Т.Контрагент,
	|	Т.Ссылка,
	|	Т.ГруппаФинансовогоУчета.СчетУчетаРасчетовСЛизингодателемАрендныеОбязательства,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Т.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоЛизингу.АрендныеОбязательства)
	|ИЗ
	|	Справочник.ДоговорыЛизинга КАК Т
	|ГДЕ
	|	Т.Ссылка = &Договор
	|	И Т.ВариантУчетаИмущества = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаИмуществаПриЛизинге.НаБалансе)";
	#КонецОбласти
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Объект.РасчетыПоДоговорамЛизинга.Добавить(), Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТаблицы(ИдентификаторСтроки=Неопределено)
	
	МассивВыделенныхСтрок = Неопределено;
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		МассивВыделенныхСтрок = Новый Массив;
		МассивВыделенныхСтрок.Добавить(Объект.РасчетыПоДоговорамЛизинга.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", Объект.РасчетыПоДоговорамЛизинга.Выгрузить(МассивВыделенныхСтрок, "НомерСтроки, Договор"));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	(ВЫРАЗИТЬ(Т.НомерСтроки КАК ЧИСЛО)) - 1 КАК ИндексСтроки,
	|	ВЫРАЗИТЬ(Т.Договор КАК Справочник.ДоговорыЛизинга) КАК Договор
	|ПОМЕСТИТЬ втТаблицаДокумента
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИндексСтроки КАК ИндексСтроки,
	|	ВЫБОР
	|		КОГДА Т.Договор.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоговорВВалютеРегл
	|ИЗ
	|	втТаблицаДокумента КАК Т";
	#КонецОбласти
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Объект.РасчетыПоДоговорамЛизинга[Выборка.ИндексСтроки], Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

