#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет максимальное оплачиваемое количество дней нетрудоспособности для указанной причины.
//
// Параметры:
//  ПричинаНетрудоспособности	 - Перечисления.ПричиныНетрудоспособности
//  СлучайУходаЗаБольнымРебенком - Перечисления.СлучаиУходаЗаБольнымиДетьми.
// 
// Возвращаемое значение:
//  МаксимальноеКоличествоОплачиваемыхДней - Число.
//
Функция МаксимальноеКоличествоОплачиваемыхДнейПоПричинеНетрудоспособности(ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком) Экспорт
	
	МаксимальноеКоличествоОплачиваемыхДней = Неопределено;
	
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании Тогда
		МаксимальноеКоличествоОплачиваемыхДней = 24; // П.2 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
		МаксимальноеКоличествоОплачиваемыхДней = 7; // Пп. 6 п.5 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре Тогда
		МаксимальноеКоличествоОплачиваемыхДней = 15; // Пп. 2 п.5 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
	КонецЕсли;
	
	Возврат МаксимальноеКоличествоОплачиваемыхДней;
	
КонецФункции

// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.БольничныйЛист - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.БольничныйЛист - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа.
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, Объект, Отказ);
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета);
	
	РезультатИсправления = ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(ДокументСсылка,
		Движения, РежимПроведения, Отказ, РеквизитыДляПроведения, СтруктураВидовУчета, Объект);
	
	Если РеквизитыДляПроведения.ДокументРассчитан Тогда
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
			ПерерасчетЗарплаты.СформироватьДвиженияИсходныеДанныхПерерасчетов(Движения, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Начисления);
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияРезультатовНачислений(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеРезультатовНачислений);
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
			ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержанийДоПределаПоСотрудникам(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияДоПределаПоСотрудникам);
			РасчетЗарплатыРасширенный.СформироватьЗадолженностьПоУдержаниямФизическихЛиц(Движения, ДанныеДляПроведения.ЗадолженностьПоУдержаниям);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				Модуль.СформироватьДвиженияНачислений(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации);
			КонецЕсли;
			
			ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ);
			
			// Заполним описание данных для проведения в учете начисленной зарплаты.
			ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
			ДанныеДляПроведенияУчетЗарплаты.Движения 				= Движения;
			ДанныеДляПроведенияУчетЗарплаты.Организация 			= РеквизитыДляПроведения.Организация;
			ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= РеквизитыДляПроведения.ПериодРегистрации;
			ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= РеквизитыДляПроведения.ПорядокВыплаты;
			ДанныеДляПроведенияУчетЗарплаты.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
			
			// - Регистрация начислений в учете начислений и удержаний.
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисления(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.НачисленияПоСотрудникам, Неопределено);
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				Модуль.ЗарегистрироватьНачисленияУдержания(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты);
				Модуль.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты);
			КонецЕсли;
			
			// Подготовка данных для регистрации удержаний, НДФЛ и Корректировок выплаты в учете начисленной зарплаты.
			УчетНачисленнойЗарплаты.СоздатьВТРаспределениеНачисленийТекущегоДокумента(ДанныеДляПроведенияУчетЗарплаты);
			
			// - Регистрация начислений и удержаний в бухучете.
			ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено);
				
			// - Регистрация бухучета займов.
			ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				Неопределено, ДанныеДляПроведения.УдержанияЗаймов, Неопределено);
					
			// - Регистрация материальной выгоды в учете НДФЛ.
			ДатаОперацииПоНалогам = НачалоДня(РеквизитыДляПроведения.ДатаНачалаСобытия) - 1;
			УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам,
				ДанныеДляПроведения.МатериальнаяВыгода, Ложь, , ДокументСсылка, РеквизитыДляПроведения.ДоходПолученНаТерриторииРФ);
			// Если ранее при начислении авансов НДФЛ был удержан и перечислен, соответствующие ему доходы следует зачесть при
			// начислении зарплаты за тот же месяц.
			ЗасчитыватьДанныеАвансов = РеквизитыДляПроведения.РассчитатьЗарплату;	
			Если ЗасчитыватьДанныеАвансов
				И РезультатИсправления.ИсправлениеВТекущемПериоде 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДляПроведения.ИсправленныйДокумент, "РассчитатьЗарплату") Тогда
					 ЗасчитыватьДанныеАвансов = Ложь
			КонецЕсли;
			УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(
				РеквизитыДляПроведения.Ссылка, Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Дата,
				РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, РеквизитыДляПроведения.ПланируемаяДатаВыплаты, ДанныеДляПроведения,  
				Истина, Истина, РеквизитыДляПроведения.ДоходПолученНаТерриторииРФ, , , "ВТНачисленияДляУчетаДоходовНДФЛ", ЗасчитыватьДанныеАвансов);
				
			РасчетЗарплатыРасширенный.СформироватьДвиженияКорректировкиВыплатыПоВременнойТаблицеНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, ДанныеДляПроведения, Истина, Истина);

			// - Регистрация материальной выгоды в учете НДФЛ.
			УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
			
			// - Регистрация удержаний в учете начисленной зарплаты.
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.УдержанияПоСотрудникам);
			УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НалогНаМатериальнуюВыгоду, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам);
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьЗаймы(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				ДанныеДляПроведения.УдержанияЗаймов, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
			
			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
			
			// - регистрация пособий
			УчетСтраховыхВзносов.СформироватьПособия(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Пособия, Неопределено);
			
			// Займы
			// - взаиморасчеты по займам
			ЗаймыСотрудникам.ЗарегистрироватьВзаиморасчетыПоЗаймам(Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ);
			
			// - Регистрация бухучета НДФЛ, выполняется после вызова регистрации доходов в учете НДФЛ.
			ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				Неопределено, Неопределено, ДанныеДляПроведения.НДФЛПоСотрудникам);
					
			// - Регистрация бухучета займов.
			ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				Неопределено, Неопределено, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				Модуль.ЗарегистрироватьНачисленияСоставМесячногоДенежногоСодержания(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СоставМесячногоДенежногоСодержания);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			// Корректировки данных для среднего заработка.
			ПараметрыКорректировок = УчетПособийСоциальногоСтрахованияРасширенный.ПараметрыЗаписиКорректировокСреднегоЗаработкаФСС();
			ЗаполнитьТаблицыКорректировок(РеквизитыДляПроведения.Ссылка, ПараметрыКорректировок);
			УчетПособийСоциальногоСтрахованияРасширенный.ЗаписатьКорректировкиСреднегоЗаработкаФСС(
				РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаНачало, РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаОкончание, ПараметрыКорректировок);
			// Учет среднего заработка (регистрация начислений).
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
		ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
		ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
		ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
		ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
		
		СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(Движения, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.ДанныеСостоянийСотрудников);
		УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(Движения, ДанныеДляРегистрацииВУчетаСтажаПФР(РеквизитыДляПроведения.Ссылка)[РеквизитыДляПроведения.Ссылка]);
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			ВсеСотрудники = ДанныеДляПроведения.ВсеСотрудники;
			ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(
				Движения, КадровыйУчетРасширенный.ТаблицаСотрудникиДатыСобытия(ВсеСотрудники, РеквизитыДляПроведения.ДатаНачала),
				РеквизитыДляПроведения.Ссылка);
			КадровыйУчетРасширенный.СформироватьДвиженияЗанятостиВременноОсвобожденныхПозицииШтатногоРасписания(
				Движения, ВсеСотрудники, РеквизитыДляПроведения.ДатаНачала, РеквизитыДляПроведения.ДатаОкончания, Ложь);
		КонецЕсли;
		
		УчетСреднегоЗаработка.УдалитьПричиныПерерасчетов(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		ПерерасчетЗарплаты.УдалитьПерерасчетыПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		// Реестр отпусков
		Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			КадровыйУчетРасширенный.ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеДляПроведения.ДанныеРеестраОтпусков, Отказ);
		КонецЕсли;
	
		Если Перечисления.ПричиныНетрудоспособности.ЭтоУходЗаРодственником(РеквизитыДляПроведения.ПричинаНетрудоспособности) Тогда
			УчетПособийСоциальногоСтрахованияРасширенный.СформироватьДвиженияПериодовУходаЗаБольнымиРодственниками(Движения, ДанныеДляПроведения.ПериодыУходаЗаРодственниками);
		КонецЕсли;
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ВыполнитьЗапланированныеКорректировкиДвижений(Движения);
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, СтруктураВидовУчета);
	
КонецПроцедуры

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	Если (ДополнительныеПараметры.ОтменаДокумента Или ДополнительныеПараметры.ИсправлениеВТекущемПериоде)
		И Не ДополнительныеПараметры.ИсправлениеДоначислением Тогда
		
		СторнироватьРасчеты = ДополнительныеПараметры.ОтменаДокумента Или ДополнительныеПараметры.РеквизитыДляПроведения.ДокументРассчитан;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего И СторнироватьРасчеты Тогда
			УчетСреднегоЗаработка.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		КонецЕсли;
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		КонецЕсли;
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета И СторнироватьРасчеты Тогда
			
			Если ДополнительныеПараметры.ИсправлениеВТекущемПериоде И Не ДополнительныеПараметры.Свойство("СторнироватьЗарегистрированноеПриНачисленииАванса") Тогда
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправленныйДокумент, "РассчитатьЗарплату") И (ДополнительныеПараметры.ОтменаДокумента Или Не ДополнительныеПараметры.РеквизитыДляПроведения.РассчитатьЗарплату) Тогда
					ДополнительныеПараметры.Вставить("СторнироватьЗарегистрированноеПриНачисленииАванса", Истина)
				КонецЕсли;
			КонецЕсли;
			
			УчетСтраховыхВзносовРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры);
			УчетНДФЛРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры);
			РасчетЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры);
			ОтражениеЗарплатыВБухучетеРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
			УчетНачисленнойЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры);
			УчетПособийСоциальногоСтрахованияРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
			
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияБезСпецификиУчетов(
				Движения, ИсправленныйДокумент, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - Состав колонок см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расчет среднего заработка
	УчетПособийСоциальногоСтрахованияРасширенный.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, "Документ.БольничныйЛист");
	
	Если Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты,ЧтениеРабочегоВремениНачисленнойЗарплаты", , Ложь) Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик     = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
			КомандаПечати.МенеджерПечати = "Документ.БольничныйЛист";
			КомандаПечати.Идентификатор  = "ПФ_MXL_РасчетПособия";
			КомандаПечати.Представление  = НСтр("ru = 'Расчет пособия'");
			КомандаПечати.Порядок        = 1;
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
			ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "РасчетПоПравилам2010Года", Ложь);
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик     = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
			КомандаПечати.МенеджерПечати = "Документ.БольничныйЛист";
			КомандаПечати.Идентификатор  = "ПФ_MXL_ЛистокНетрудоспособностиСРасчетомПособия";
			КомандаПечати.Представление  = НСтр("ru = 'Листок нетрудоспособности с расчетом пособия'");
			КомандаПечати.Порядок        = 2;
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
			ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "РасчетПоПравилам2010Года", Ложь);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоплатуЗаДниБолезни") Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик     = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
			КомандаПечати.МенеджерПечати = "Документ.БольничныйЛист";
			КомандаПечати.Идентификатор  = "ПФ_MXL_ДоплатаЗаДниНетрудоспособности";
			КомандаПечати.Представление  = НСтр("ru = 'Приказ о доплате за дни болезни'");
			КомандаПечати.Порядок        = 10;
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
			ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ДоплачиватьДоСреднегоЗаработка", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Подробный расчет начислений.
	РасчетЗарплатыРасширенный.ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати);
	
	// Приказ о предоставлении отпуска.
	Если КадровыйУчетРасширенный.НастройкиКадровогоУчета().ПечататьТ6ДляОтпусковПоБеременностиИРодам Тогда
		КадровыйУчетРасширенный.ДобавитьКомандуПечатиПриказаОПредоставленииОтпуска(КомандыПечати);
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  Для чтения:
//    МассивОбъектов  - Массив    - Ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - Настройки печати;
//  Для изменения:
//    КоллекцияПечатныхФорм - ТаблицаЗначений - Табличные документы.
//    ОбъектыПечати         - СписокЗначений  - Разбивка областей табличного документа по напечатанным объектам.
//        * Значение            - Ссылка объекта;
//        * Представление       - Имя области в которой был выведен объект;
//    ПараметрыВывода       - Структура       - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	МетаданныеМакетов = Метаданные.Документы.БольничныйЛист.Макеты;
	Для Каждого МетаданныеМакета Из МетаданныеМакетов Цикл
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, МетаданныеМакета.Имя) Тогда
			РезультатПечати = СформироватьПечатнуюФорму(МетаданныеМакета, МассивОбъектов, ОбъектыПечати);
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				МетаданныеМакета.Имя,
				МетаданныеМакета.Представление(),
				РезультатПечати.ТабличныйДокумент,
				,
				РезультатПечати.ПолноеИмяМакета);
		КонецЕсли;
	КонецЦикла;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати);
		Если ТабличныйДокумент <> Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"РасчетСреднегоЗаработка",
				НСтр("ru = 'Расчет среднего заработка'"),
				ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать УчетПособийСоциальногоСтрахования.ДанныеБольничногоЛиста.
// При адаптации следует учитывать что новая функция возвращает "сырые" данные реквизитов шапки документа.
// Т.е. следует не только заменить вызов, но еще и расширить реализацию - по аналогии с содержимым этой функции.
// Получает данные для заполнения документа по первичному листку нетрудоспособности.
//
// Параметры:
//  ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист
//                 первичный листок нетрудоспособности.
//  ИсключаемыеДокументы - массив из ДокументСсылка.БольничныйЛист
//                 см. описание метода ПоследнийДеньБолезни.
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л.
//
Функция ДанныеПервичногоБольничногоЛиста(ПервичныйБольничныйЛист, ИсключаемыеДокументы = Неопределено) Экспорт
	ДанныеБольничного = УчетПособийСоциальногоСтрахования.ДанныеБольничногоЛиста(ПервичныйБольничныйЛист);
	
	ДатаНачала = УчетПособийСоциальногоСтрахования.ПоследнийДеньБолезни(ДанныеБольничного.Ссылка, ИсключаемыеДокументы) + 86400;
	ДанныеБольничного.Вставить("ДатаНачала", ДатаНачала);
	ДанныеБольничного.Вставить("ДатаНачалаОплаты", ДатаНачала);
	
	Если Не ДанныеБольничного.ЯвляетсяПродолжениемБолезни Тогда
		ДанныеБольничного.ПервичныйБольничныйЛист = ДанныеБольничного.Ссылка;
	КонецЕсли;
	
	Возврат ДанныеБольничного;
КонецФункции

// Устарела. Следует использовать УчетПособийСоциальногоСтрахования.ПоследнийДеньБолезни.
// Определяет последний день болезни, оформленной несколькими листками нетрудоспособности.
//
// Параметры:
//  ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист
//                 первичный листок нетрудоспособности.
//  ИсключаемыеДокументы - массив из ДокументСсылка.БольничныйЛист
//                 массив листков нетрудоспособности, которые не нужно учитывать при определении последнего дня болезни.
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л.
//
Функция ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы  = Неопределено) Экспорт
	Возврат УчетПособийСоциальногоСтрахования.ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает запрос по начислениям по указанному отборы и параметрам.
Функция ЗапросПоБольничным(Отбор, ПоляУпорядочивания, КоличествоПервых) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.ПометкаУдаления КАК ПометкаУдаления,
	|	БольничныйЛист.Номер КАК Номер,
	|	БольничныйЛист.Дата КАК Дата,
	|	БольничныйЛист.Проведен КАК Проведен,
	|	БольничныйЛист.АдресМедицинскойОрганизации КАК АдресМедицинскойОрганизации,
	|	БольничныйЛист.ВидНеоплачиваемогоВремени КАК ВидНеоплачиваемогоВремени,
	|	БольничныйЛист.ВидОплатыЗаСчетРаботодателя КАК ВидОплатыЗаСчетРаботодателя,
	|	БольничныйЛист.ВидОплатыПособия КАК ВидОплатыПособия,
	|	БольничныйЛист.ВидРасчетаДоплаты КАК ВидРасчетаДоплаты,
	|	БольничныйЛист.ВторойКодПричиныНетрудоспособности КАК ВторойКодПричиныНетрудоспособности,
	|	БольничныйЛист.ГруппаИнвалидности КАК ГруппаИнвалидности,
	|	БольничныйЛист.ДатаАктаН1 КАК ДатаАктаН1,
	|	БольничныйЛист.ДатаВыдачиЛисткаНетрудоспособности КАК ДатаВыдачиЛисткаНетрудоспособности,
	|	БольничныйЛист.ДатаИзмененияКодаПричиныНетрудоспособности КАК ДатаИзмененияКодаПричиныНетрудоспособности,
	|	БольничныйЛист.ДатаНаправленияВБюроМСЭ КАК ДатаНаправленияВБюроМСЭ,
	|	БольничныйЛист.ДатаНарушенияРежима КАК ДатаНарушенияРежима,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
	|	БольничныйЛист.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаНачалаПоловиннойОплаты КАК ДатаНачалаПоловиннойОплаты,
	|	БольничныйЛист.ДатаНачалаРаботы КАК ДатаНачалаРаботы,
	|	БольничныйЛист.ДатаНачалаРодственник1 КАК ДатаНачалаРодственник1,
	|	БольничныйЛист.ДатаНачалаРодственник2 КАК ДатаНачалаРодственник2,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	БольничныйЛист.ДатаНовыйСтатусНетрудоспособного КАК ДатаНовыйСтатусНетрудоспособного,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
	|	БольничныйЛист.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	БольничныйЛист.ДатаОкончанияПутевки КАК ДатаОкончанияПутевки,
	|	БольничныйЛист.ДатаОкончанияРодственник1 КАК ДатаОкончанияРодственник1,
	|	БольничныйЛист.ДатаОкончанияРодственник2 КАК ДатаОкончанияРодственник2,
	|	БольничныйЛист.ДатаОсвидетельствованияМСЭ КАК ДатаОсвидетельствованияМСЭ,
	|	БольничныйЛист.ДатаРегистрацииДокументовМСЭ КАК ДатаРегистрацииДокументовМСЭ,
	|	БольничныйЛист.ДнейОплаты КАК ДнейОплаты,
	|	БольничныйЛист.ДокументРассчитан КАК ДокументРассчитан,
	|	БольничныйЛист.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	БольничныйЛист.ДоляНеполногоВремени КАК ДоляНеполногоВремени,
	|	БольничныйЛист.ДоначислитьЗарплатуПриНеобходимости КАК ДоначислитьЗарплатуПриНеобходимости,
	|	БольничныйЛист.ДоплачиватьДоДенежногоСодержания КАК ДоплачиватьДоДенежногоСодержания,
	|	БольничныйЛист.ДоплачиватьДоСреднегоЗаработка КАК ДоплачиватьДоСреднегоЗаработка,
	|	БольничныйЛист.ДополнительныйКодПричиныНетрудоспособности КАК ДополнительныйКодПричиныНетрудоспособности,
	|	БольничныйЛист.ДоходПолученНаТерриторииРФ КАК ДоходПолученНаТерриторииРФ,
	|	БольничныйЛист.ИсправленныйДокумент КАК ИсправленныйДокумент,
	|	БольничныйЛист.КодНарушенияРежима КАК КодНарушенияРежима,
	|	БольничныйЛист.КодПричиныНетрудоспособности КАК КодПричиныНетрудоспособности,
	|	БольничныйЛист.Комментарий КАК Комментарий,
	|	БольничныйЛист.МедицинскаяОрганизация КАК МедицинскаяОрганизация,
	|	БольничныйЛист.МинимальныйСреднедневнойЗаработок КАК МинимальныйСреднедневнойЗаработок,
	|	БольничныйЛист.НазначитьПособие КАК НазначитьПособие,
	|	БольничныйЛист.НаименованиеМедицинскойОрганизации КАК НаименованиеМедицинскойОрганизации,
	|	БольничныйЛист.НаименованиеОрганизацииВЛисткеНетрудоспособности КАК НаименованиеОрганизацииВЛисткеНетрудоспособности,
	|	БольничныйЛист.Начислено КАК Начислено,
	|	БольничныйЛист.НовыйСтатусНетрудоспособного КАК НовыйСтатусНетрудоспособного,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.НомерЛисткаПоОсновномуМестуРаботы КАК НомерЛисткаПоОсновномуМестуРаботы,
	|	БольничныйЛист.НомерЛисткаПродолжения КАК НомерЛисткаПродолжения,
	|	БольничныйЛист.НомерПервичногоЛисткаНетрудоспособности КАК НомерПервичногоЛисткаНетрудоспособности,
	|	БольничныйЛист.НомерПутевки КАК НомерПутевки,
	|	БольничныйЛист.ОграничениеПособия КАК ОграничениеПособия,
	|	БольничныйЛист.ОграничениеПособияБезЛьгот КАК ОграничениеПособияБезЛьгот,
	|	БольничныйЛист.ОГРН_Санатория КАК ОГРН_Санатория,
	|	БольничныйЛист.ОГРНМедицинскойОрганизации КАК ОГРНМедицинскойОрганизации,
	|	БольничныйЛист.Организация КАК Организация,
	|	БольничныйЛист.ОсвобождатьСтавку КАК ОсвобождатьСтавку,
	|	БольничныйЛист.ОсвобождениеДатаНачала1 КАК ОсвобождениеДатаНачала1,
	|	БольничныйЛист.ОсвобождениеДатаНачала2 КАК ОсвобождениеДатаНачала2,
	|	БольничныйЛист.ОсвобождениеДатаНачала3 КАК ОсвобождениеДатаНачала3,
	|	БольничныйЛист.ОсвобождениеДатаОкончания1 КАК ОсвобождениеДатаОкончания1,
	|	БольничныйЛист.ОсвобождениеДатаОкончания2 КАК ОсвобождениеДатаОкончания2,
	|	БольничныйЛист.ОсвобождениеДатаОкончания3 КАК ОсвобождениеДатаОкончания3,
	|	БольничныйЛист.ОсвобождениеДолжностьВрача1 КАК ОсвобождениеДолжностьВрача1,
	|	БольничныйЛист.ОсвобождениеДолжностьВрача2 КАК ОсвобождениеДолжностьВрача2,
	|	БольничныйЛист.ОсвобождениеДолжностьВрача3 КАК ОсвобождениеДолжностьВрача3,
	|	БольничныйЛист.ОсвобождениеДолжностьВрачаПредседателяВК1 КАК ОсвобождениеДолжностьВрачаПредседателяВК1,
	|	БольничныйЛист.ОсвобождениеДолжностьВрачаПредседателяВК2 КАК ОсвобождениеДолжностьВрачаПредседателяВК2,
	|	БольничныйЛист.ОсвобождениеДолжностьВрачаПредседателяВК3 КАК ОсвобождениеДолжностьВрачаПредседателяВК3,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрача1 КАК ОсвобождениеИдентификационныйНомерВрача1,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрача2 КАК ОсвобождениеИдентификационныйНомерВрача2,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрача3 КАК ОсвобождениеИдентификационныйНомерВрача3,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1 КАК ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2 КАК ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2,
	|	БольничныйЛист.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3 КАК ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3,
	|	БольничныйЛист.ОсвобождениеФИОВрача1 КАК ОсвобождениеФИОВрача1,
	|	БольничныйЛист.ОсвобождениеФИОВрача2 КАК ОсвобождениеФИОВрача2,
	|	БольничныйЛист.ОсвобождениеФИОВрача3 КАК ОсвобождениеФИОВрача3,
	|	БольничныйЛист.ОсвобождениеФИОВрачаПредседателяВК1 КАК ОсвобождениеФИОВрачаПредседателяВК1,
	|	БольничныйЛист.ОсвобождениеФИОВрачаПредседателяВК2 КАК ОсвобождениеФИОВрачаПредседателяВК2,
	|	БольничныйЛист.ОсвобождениеФИОВрачаПредседателяВК3 КАК ОсвобождениеФИОВрачаПредседателяВК3,
	|	БольничныйЛист.ОснованиеПодписиРуководителя КАК ОснованиеПодписиРуководителя,
	|	БольничныйЛист.ОсновноеМестоРаботы КАК ОсновноеМестоРаботы,
	|	БольничныйЛист.Ответственный КАК Ответственный,
	|	БольничныйЛист.ПервичныйБольничныйЛист КАК ПервичныйБольничныйЛист,
	|	БольничныйЛист.ПериодНахожденияВСтационареСРебенкомПо КАК ПериодНахожденияВСтационареСРебенкомПо,
	|	БольничныйЛист.ПериодНахожденияВСтационареСРебенкомС КАК ПериодНахожденияВСтационареСРебенкомС,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаВторойГод КАК ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаПервыйГод КАК ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	БольничныйЛист.ПериодРегистрации КАК ПериодРегистрации,
	|	БольничныйЛист.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	БольничныйЛист.ПорядокВыплаты КАК ПорядокВыплаты,
	|	БольничныйЛист.ПособиеВыплачиваетсяФСС КАК ПособиеВыплачиваетсяФСС,
	|	БольничныйЛист.ПоставленаНаУчетВРанниеСрокиБеременности КАК ПоставленаНаУчетВРанниеСрокиБеременности,
	|	БольничныйЛист.ПоУходуВозрастЛет1 КАК ПоУходуВозрастЛет1,
	|	БольничныйЛист.ПоУходуВозрастЛет2 КАК ПоУходуВозрастЛет2,
	|	БольничныйЛист.ПоУходуВозрастМесяцев1 КАК ПоУходуВозрастМесяцев1,
	|	БольничныйЛист.ПоУходуВозрастМесяцев2 КАК ПоУходуВозрастМесяцев2,
	|	БольничныйЛист.ПоУходуИспользованоДней1 КАК ПоУходуИспользованоДней1,
	|	БольничныйЛист.ПоУходуИспользованоДней2 КАК ПоУходуИспользованоДней2,
	|	БольничныйЛист.ПоУходуРодственнаяСвязь1 КАК ПоУходуРодственнаяСвязь1,
	|	БольничныйЛист.ПоУходуРодственнаяСвязь2 КАК ПоУходуРодственнаяСвязь2,
	|	БольничныйЛист.ПоУходуФИО1 КАК ПоУходуФИО1,
	|	БольничныйЛист.ПоУходуФИО2 КАК ПоУходуФИО2,
	|	БольничныйЛист.ПредоставленДубликатЛисткаНетрудоспособности КАК ПредоставленДубликатЛисткаНетрудоспособности,
	|	БольничныйЛист.ПредставлениеПериода КАК ПредставлениеПериода,
	|	БольничныйЛист.ПрименятьЛьготыПриНачисленииПособия КАК ПрименятьЛьготыПриНачисленииПособия,
	|	БольничныйЛист.ПриступитьКРаботеС КАК ПриступитьКРаботеС,
	|	БольничныйЛист.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныйЛист.ПроцентДоплатыЗаДниНетрудоспособности КАК ПроцентДоплатыЗаДниНетрудоспособности,
	|	БольничныйЛист.ПроцентОплаты КАК ПроцентОплаты,
	|	БольничныйЛист.ПроцентОплатыБезЛьгот КАК ПроцентОплатыБезЛьгот,
	|	БольничныйЛист.РайонныйКоэффициентРФнаНачалоСобытия КАК РайонныйКоэффициентРФнаНачалоСобытия,
	|	БольничныйЛист.Рассчитал КАК Рассчитал,
	|	БольничныйЛист.РассчитатьЗарплату КАК РассчитатьЗарплату,
	|	БольничныйЛист.РасчетПоПравилам2010Года КАК РасчетПоПравилам2010Года,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход1 КАК РодственникЗаКоторымОсуществляетсяУход1,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход2 КАК РодственникЗаКоторымОсуществляетсяУход2,
	|	БольничныйЛист.Руководитель КАК Руководитель,
	|	БольничныйЛист.СлучайУходаЗаБольнымРебенком КАК СлучайУходаЗаБольнымРебенком,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.СохраняемоеДенежноеСодержание КАК СохраняемоеДенежноеСодержание,
	|	БольничныйЛист.СреднийДневнойЗаработок КАК СреднийДневнойЗаработок,
	|	БольничныйЛист.СтажЛет КАК СтажЛет,
	|	БольничныйЛист.СтажМесяцев КАК СтажМесяцев,
	|	БольничныйЛист.СтажРасширенныйЛет КАК СтажРасширенныйЛет,
	|	БольничныйЛист.СтажРасширенныйМесяцев КАК СтажРасширенныйМесяцев,
	|	БольничныйЛист.Удержано КАК Удержано,
	|	БольничныйЛист.УсловияИсчисленияКод1 КАК УсловияИсчисленияКод1,
	|	БольничныйЛист.УсловияИсчисленияКод2 КАК УсловияИсчисленияКод2,
	|	БольничныйЛист.УсловияИсчисленияКод3 КАК УсловияИсчисленияКод3,
	|	БольничныйЛист.УчитыватьЗаработокПредыдущихСтрахователей КАК УчитыватьЗаработокПредыдущихСтрахователей,
	|	БольничныйЛист.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БольничныйЛист.ФиксПериодРасчетаСреднегоЗаработка КАК ФиксПериодРасчетаСреднегоЗаработка,
	|	БольничныйЛист.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
	|	БольничныйЛист.ЯвляетсяПродолжениемБолезни КАК ЯвляетсяПродолжениемБолезни,
	|	БольничныйЛист.Представление КАК Представление
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист";
	
	Если КоличествоПервых <> 1 Тогда
		Если КоличествоПервых = 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоПервых, "ЧГ="));
		КонецЕсли;
	КонецЕсли;
	
	// Отборы.
	Если Отбор.Количество() > 0 Тогда
		ФрагментыУсловий = Новый Массив;
		Для Каждого КлючИЗначение Из Отбор Цикл
			ИмяОтбора = КлючИЗначение.Ключ;
			ЗначениеОтбора = КлючИЗначение.Значение;
			Если ТипЗнч(ЗначениеОтбора) = Тип("ФиксированныйМассив") Тогда
				ЗначениеОтбора = Новый Массив(ЗначениеОтбора);
			КонецЕсли;
			Запрос.УстановитьПараметр(ИмяОтбора, ЗначениеОтбора);
			Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				ФрагментыУсловий.Добавить(СтрШаблон("БольничныйЛист.%1 В (&%1)", ИмяОтбора))
			Иначе
				ФрагментыУсловий.Добавить(СтрШаблон("БольничныйЛист.%1 = &%1", ИмяОтбора))
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	" + СтрСоединить(ФрагментыУсловий, " И ");
	КонецЕсли;
	
	// Порядок.
	Если ЗначениеЗаполнено(ПоляУпорядочивания) Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	" + ПоляУпорядочивания;
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

// Функция возвращает структуру с описанием данного вида документа.
//
Функция ОписаниеДокумента() Экспорт

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйКлиентСервер.СтруктураОписанияДокумента();
	
	ОписаниеДокумента.КраткоеНазваниеИменительныйПадеж	 = НСтр("ru = 'болезнь'");
	ОписаниеДокумента.КраткоеНазваниеРодительныйПадеж	 = НСтр("ru = 'болезни'");
	ОписаниеДокумента.ИмяРеквизитаСотрудник				 = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаОтсутствующийСотрудник = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия		 = "ДатаНачала";
	ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия	 = "ДатаОкончания";
	
	Возврат ОписаниеДокумента;

КонецФункции

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	ОписаниеСостава = ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта();
	ОписаниеСостава.ИспользоватьКраткийСостав = Ложь;
	ОписаниеСостава.ЗаполнятьТабличнуюЧастьФизическиеЛицаДокумента = Ложь;
	ОписаниеСостава.ЗаполнятьФизическиеЛицаПоСотрудникам = Истина;
	
	ОписаниеХранения = ЗарплатаКадрыСоставДокументов.ОписаниеХраненияСотрудниковФизическихЛиц();
	ОписаниеХранения.ПолеСотрудник      = "Сотрудник";
	ОписаниеХранения.ПолеФизическоеЛицо = "ФизическоеЛицо";
	
	ОписаниеСостава.ОписаниеХраненияСотрудниковФизическихЛиц.Добавить(ОписаниеХранения);
	
	ОписаниеЗаполнения = ЗарплатаКадрыСоставДокументов.ОписаниеХраненияСотрудниковФизическихЛиц();
	ОписаниеЗаполнения.ПолеСотрудник      = "Сотрудник";
	ОписаниеЗаполнения.ПолеФизическоеЛицо = "ФизическоеЛицо";
	
	ОписаниеСостава.ОписаниеЗаполненияФизическихЛицПоСотрудникам.Добавить(ОписаниеЗаполнения);
	
	Возврат ОписаниеСостава;
КонецФункции

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.БольничныйЛист";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "Удержано,Показатели.Значение,ПримененныеВычетыНаДетейИИмущественные.РазмерВычета";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.БольничныйЛист";
	НовыеСведения.ПоляРегистрации = "Начисления.Сотрудник";
	НовыеСведения.ПоляДоступа     = "Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.БольничныйЛист";
	НовыеСведения.ПоляРегистрации = "НачисленияПерерасчет.Сотрудник";
	НовыеСведения.ПоляДоступа     = "НачисленияПерерасчет.Результат,НачисленияПерерасчет.РасчетнаяБазаЗаЕдиницуНормыВремени,НачисленияПерерасчет.СуммаВычета,НачисленияПерерасчет.РезультатВТомЧислеЗаСчетФБ";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.БольничныйЛист";
	НовыеСведения.ПоляРегистрации = "НДФЛ.ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "НДФЛ.Налог,НДФЛ.ЗачтеноАвансовыхПлатежей,НДФЛ.ПримененныйВычетЛичный,НДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.БольничныйЛист";
	НовыеСведения.ПоляРегистрации = "СреднийЗаработокДанныеСтрахователей.ФизическоеЛицо,СреднийЗаработокФСС.ФизическоеЛицо,Удержания.ФизическоеЛицо,РаспределениеРезультатовУдержаний.Сотрудник";
	НовыеСведения.ПоляДоступа     = "СреднийЗаработокДанныеСтрахователей.Сумма,СреднийЗаработокФСС.Сумма,Удержания.Результат,РаспределениеРезультатовНачислений.Результат,РаспределениеРезультатовУдержаний.Результат";
	НовыеСведения.ОбластьДанных   = "Доходы";
КонецПроцедуры

#Область УчетПособий

// Возникает при заполнении документа ЗаявлениеСотрудникаНаВыплатуПособия на основании текущего документа.
Процедура ЗаполнитьЗаявлениеСотрудникаНаВыплатуПособияПоОснованию(Больничный, Заявление, РеквизитыДокумента, ДанныеДляРасчетаСреднегоЗаработка) Экспорт
	ДанныеДляРасчетаСреднегоЗаработка = ДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Больничный)).Получить(Больничный);
	
	НеобходимыеРеквизиты = "Организация, Сотрудник, ПричинаНетрудоспособности, НомерЛисткаНетрудоспособности, "
		+ "ДатаВыдачиЛисткаНетрудоспособности, СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок, ИсправленныйДокумент, "
		+ "ПоставленаНаУчетВРанниеСрокиБеременности, Дата";
	РеквизитыБольничного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Больничный, НеобходимыеРеквизиты);
	
	ПричинаНетрудоспособности = РеквизитыБольничного.ПричинаНетрудоспособности;
	
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Если РеквизитыБольничного.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена Тогда
			РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки);
		Иначе
			РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам);
		КонецЕсли;
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание Тогда
		РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеВСвязиСНесчастнымСлучаемНаПроизводстве);
	Иначе
		РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности);
	КонецЕсли;
	
	РеквизитыДокумента.Вставить("Организация", РеквизитыБольничного.Организация);
	РеквизитыДокумента.Вставить("Сотрудник", РеквизитыБольничного.Сотрудник);
	РеквизитыДокумента.Вставить("НомерЛисткаНетрудоспособности", РеквизитыБольничного.НомерЛисткаНетрудоспособности);
	РеквизитыДокумента.Вставить("ДатаЛисткаНетрудоспособности", РеквизитыБольничного.ДатаВыдачиЛисткаНетрудоспособности);
	РеквизитыДокумента.Вставить("СреднийЗаработокЗаРасчетныйПериод", Макс(РеквизитыБольничного.СреднийДневнойЗаработок, РеквизитыБольничного.МинимальныйСреднедневнойЗаработок));
	РеквизитыДокумента.Вставить("ДатаПредставленияПакетаДокументов", РеквизитыБольничного.Дата);
	
	Если ЗначениеЗаполнено(РеквизитыБольничного.ИсправленныйДокумент) Тогда
		РеквизитыДокумента.Вставить("Перерасчет", Истина);
		РеквизитыДокумента.Вставить("КодПричиныПерерасчета", "01");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьПодробногоРасчетаНачислений

// Заполняет структуру - описание документа для формирования печатной формы подробного расчета начислений.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в Обработки.ПечатьРасчетаНачислений.ОписаниеДокументаРасчетаНачислений.
//
Процедура ЗаполнитьОписаниеДокументаРасчетаНачислений(ОписаниеДокумента) Экспорт
	КатегорииСпециализированногоНачисления = Новый Массив;
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	ОписаниеДокумента.Вставить("ИмяДокумента", 								МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", 							МетаданныеДокумента.Синоним);
	ОписаниеДокумента.Вставить("ЕстьРасчетСреднегоЗаработка", 				Истина);
	ОписаниеДокумента.Вставить("СреднийЗаработокОбщий",		 				Ложь);
	ОписаниеДокумента.Вставить("ЕстьРасчетСпециализированныхНачислений",	Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетЗарплаты", 						Истина);
	ОписаниеДокумента.Вставить("КатегорииСпециализированногоНачисления", 	КатегорииСпециализированногоНачисления);
	ОписаниеДокумента.Вставить("НазваниеСпециализированногоНачисления", 	НСтр("ru = 'Больничный лист'"));
КонецПроцедуры

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ДанныеДокументов) Экспорт
	РасчетЗарплатыРасширенный.ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ПустаяСсылка().Метаданные().Имя, ДанныеДокументов);
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок) Экспорт
	Возврат РасчетЗарплатыРасширенный.НачисленияПоказателиДокументов(МассивСсылок, ПустаяСсылка().Метаданные().Имя);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.БольничныйЛист);
	
КонецФункции

Функция ВидыСтажаВЛисткеНетрудоспособности() Экспорт
	КатегорииСтажа = КатегорииСтажаВЛисткеНетрудоспособности();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыСтажа.Ссылка,
	|	ВидыСтажа.КатегорияСтажа
	|ИЗ
	|	Справочник.ВидыСтажа КАК ВидыСтажа
	|ГДЕ
	|	ВидыСтажа.КатегорияСтажа В(&КатегорииСтажа)";
	Запрос.УстановитьПараметр("КатегорииСтажа", КатегорииСтажа);
	Результат = Запрос.Выполнить();
	ВидыСтажа = Новый Массив;
	НеобязательныеВидыСтажа = Новый Соответствие;
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВидыСтажа.Добавить(Выборка.Ссылка);
			Если Выборка.КатегорияСтажа = Перечисления.КатегорииСтажа.РасширенныйСтраховой Тогда
				ЗаголовокФлажка = НСтр("ru = 'Требуется ввести стаж с учетом нестраховых периодов'");
				НеобязательныеВидыСтажа.Вставить(Выборка.Ссылка, ЗаголовокФлажка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("ВидыСтажа, НеобязательныеВидыСтажа", ВидыСтажа, НеобязательныеВидыСтажа);
КонецФункции

Функция КатегорииСтажаВЛисткеНетрудоспособности() Экспорт
	КатегорииСтажа = Новый Массив;
	КатегорииСтажа.Добавить(Перечисления.КатегорииСтажа.Страховой);
	КатегорииСтажа.Добавить(Перечисления.КатегорииСтажа.РасширенныйСтраховой);
	Возврат КатегорииСтажа;
КонецФункции

Процедура ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Ссылка,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	ЛОЖЬ КАК Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ
	|ПОМЕСТИТЬ ВТНачисленияДляУчетаПособий
	|ИЗ
	|	Документ.БольничныйЛист.Начисления КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаНачислений.Сторно
	|			ТОГДА ТаблицаНачислений.СторнируемыйДокумент
	|		ИНАЧЕ ТаблицаНачислений.Ссылка
	|	КОНЕЦ,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ
	|ИЗ
	|	Документ.БольничныйЛист.НачисленияПерерасчет КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаНачислений.Сторно
	|			ТОГДА ТаблицаНачислений.СторнируемыйДокумент
	|		ИНАЧЕ ТаблицаНачислений.Ссылка
	|	КОНЕЦ,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сторно,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.БольничныйЛист.НачисленияПерерасчетНулевыеСторно КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Выполнить();
	
	ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(
		РеквизитыДляПроведения.Организация,
		РеквизитыДляПроведения.ПериодРегистрации,
		РеквизитыДляПроведения.ЭЛНКарантинПоКоронавирусу);

	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьСведенияОПособиях(ДанныеДляПроведения, ПособиеПлатитУчастникПилотногоПроекта);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСостоянийСотрудника(РеквизитыДляПроведения, ДанныеДляПроведения, ДругиеСотрудники) Экспорт
	
	ДанныеСостояний = СостоянияСотрудников.ПустаяТаблицаДанныхСостоянийСотрудника();
	Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		НоваяСтрока = ДанныеСостояний.Добавить();
		НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
		НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам;
		НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
		НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
	Иначе
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
			// Если расчет зарплаты отключен, то считаем весь период "оплаченной болезнью".
			НоваяСтрока = ДанныеСостояний.Добавить();
			НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
			НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.Болезнь;
			НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
			НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
		Иначе
			Если Не РеквизитыДляПроведения.НазначитьПособие Тогда
				// Весь период без оплаты
				НоваяСтрока = ДанныеСостояний.Добавить();
				НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
				НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
				НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
				НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
			Иначе
				Если РеквизитыДляПроведения.ДатаНачала < РеквизитыДляПроведения.ДатаНачалаОплаты Тогда
					// Если оплата начинается позже, то интервал перед - это болезнь без оплаты.
					НоваяСтрока = ДанныеСостояний.Добавить();
					НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
					НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
					НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
					НоваяСтрока.Окончание = НачалоДня(РеквизитыДляПроведения.ДатаНачалаОплаты) - 1;
				КонецЕсли;
				НоваяСтрока = ДанныеСостояний.Добавить();
				НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
				НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.Болезнь;
				НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачалаОплаты;
				НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончанияОплаты;
				Если РеквизитыДляПроведения.ДатаОкончанияОплаты < РеквизитыДляПроведения.ДатаОкончания Тогда
					// Если оплата заканчивается раньше, то интервал - это болезнь без оплаты.
					НоваяСтрока = ДанныеСостояний.Добавить();
					НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
					НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
					НоваяСтрока.Начало = КонецДня(РеквизитыДляПроведения.ДатаОкончанияОплаты) + 1;
					НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// По всем другим рабочим местам регистрируем болезнь без оплаты.
	Для Каждого ДругойСотрудник Из ДругиеСотрудники Цикл
		НоваяСтрока = ДанныеСостояний.Добавить();
		НоваяСтрока.Сотрудник = ДругойСотрудник;
		Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам;		
		Иначе	
			НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
			НоваяСтрока.ВидВремени = Справочники.ВидыИспользованияРабочегоВремени.Болезнь;
		КонецЕсли;	
		НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
		НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
	КонецЦикла;
	
	ДанныеДляПроведения.ДанныеСостоянийСотрудников = ДанныеСостояний;
	
КонецПроцедуры

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета)
	
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет,НачисленияПерерасчетНулевыеСторно", "Ссылка.ПериодРегистрации");
		Если РеквизитыДляПроведения.ДокументРассчитан Тогда
			
			РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			РасчетЗарплаты.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.ИсправленныйДокумент);
			РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			РасчетЗарплатыРасширенный.ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.ФизическоеЛицо);
			ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения);
			РасчетЗарплатыРасширенный.ЗаполнитьПогашениеЗадолженностиПоУдержаниям(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.ПериодРегистрации);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				ПараметрыУправленческаяЗарплата = Модуль.ДополнительныеПараметрыПодготовкиДанныхДляПроведения();
				ПараметрыУправленческаяЗарплата.ПолеДатыДействия = "Ссылка.ПериодРегистрации";
				ПараметрыУправленческаяЗарплата.ПолеВидаНачисления = "Начисление";
				Модуль.ПриПодготовкеДанныхДляПроведенияДокументаРасчетаЗарплаты(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ПараметрыУправленческаяЗарплата);
			КонецЕсли;
			
			ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВД(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДанныеДляПроведения.НачисленияПоСотрудникам);
			
			ЗаймыСотрудникам.ЗаполнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.ПланируемаяДатаВыплаты, "Ссылка.ПериодРегистрации");
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			
				СоставМесячногоДенежногоСодержания = Модуль.СведенияОСоставеМесячногоДенежногоСодержания(РеквизитыДляПроведения.Ссылка, "ДенежноеСодержание,ДенежноеСодержаниеФактическиеНачисления");
				ДанныеДляПроведения.Вставить("СоставМесячногоДенежногоСодержания", СоставМесячногоДенежногоСодержания);
			КонецЕсли;
			
		КонецЕсли;
		
		ДругиеСотрудники = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(
		РеквизитыДляПроведения.ФизическоеЛицо, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.ДатаНачала, РеквизитыДляПроведения.ДатаОкончания);
		
		ЗаполнитьДанныеСостоянийСотрудника(РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения, ДругиеСотрудники);
		
		ДругиеСотрудники.Вставить(0, РеквизитыДляПроведения.Сотрудник);
		ДанныеДляПроведения.Вставить("ВсеСотрудники", ДругиеСотрудники);
		
		ЗаполнитьДанныеРеестраОтпусков(РеквизитыДляПроведения, ДанныеДляПроведения);
		ЗаполнитьДанныеУчетаПериодовУходаЗаБольнымиДетьми(РеквизитыДляПроведения, ДанныеДляПроведения);
		
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ДокументРассчитан И СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка();
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаполнитьДанныеРеестраОтпусков(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	Если Не РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРеестраОтпусков = КадровыйУчетРасширенный.ТаблицаРеестраОтпусков();
	
	НоваяСтрока = ДанныеРеестраОтпусков.Добавить();
	Если ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", РеквизитыДляПроведения.ИсправленныйДокумент);
		Запрос.УстановитьПараметр("Сотрудник", РеквизитыДляПроведения.Сотрудник);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	РеестрОтпусков.Сотрудник,
			|	РеестрОтпусков.ФизическоеЛицо,
			|	РеестрОтпусков.ДокументОснование,
			|	РеестрОтпусков.Номер,
			|	РеестрОтпусков.ВидОтпуска,
			|	РеестрОтпусков.ВидДоговора,
			|	РеестрОтпусков.Основание
			|ИЗ
			|	РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
			|ГДЕ
			|	РеестрОтпусков.Регистратор = &ДокументОснование
			|	И РеестрОтпусков.Сотрудник = &Сотрудник";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	Иначе
		
		НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = РеквизитыДляПроведения.ФизическоеЛицо;
		НоваяСтрока.ДокументОснование = РеквизитыДляПроведения.Ссылка;
		НоваяСтрока.Номер = 1;
		
		НоваяСтрока.ВидОтпуска = НСтр("ru='Отпуск по беременности и родам'");
		
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
			Истина, РеквизитыДляПроведения.Сотрудник, "ВидДоговора", РеквизитыДляПроведения.ДатаНачала);
		
		Если КадровыеДанныеСотрудника.Количество() > 0 Тогда
			НоваяСтрока.ВидДоговора = КадровыеДанныеСотрудника[0].ВидДоговора;
		КонецЕсли;
		
		Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.Номер);
		НоваяСтрока.Основание = Основание;
		
	КонецЕсли;
	
	НоваяСтрока.Период = РеквизитыДляПроведения.Дата;
	
	НоваяСтрока.КоличествоДнейОтпуска = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(
		РеквизитыДляПроведения.ДатаНачала, РеквизитыДляПроведения.ДатаОкончания);
	
	НоваяСтрока.ДатаНачалаПериодаОтсутствия = РеквизитыДляПроведения.ДатаНачала;
	НоваяСтрока.ДатаОкончанияПериодаОтсутствия = РеквизитыДляПроведения.ДатаОкончания;
	
	ДанныеДляПроведения.Вставить("ДанныеРеестраОтпусков", ДанныеРеестраОтпусков);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыКорректировок(РеквизитыДляПроведения, ПараметрыКорректировок)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КорректировкиНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КорректировкиНачислений.ПорядокРасчета КАК ПорядокРасчета,
		|	КорректировкиНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	КорректировкиНачислений.Период КАК Период,
		|	КорректировкиНачислений.Сумма КАК Сумма
		|ИЗ
		|	Документ.БольничныйЛист.СреднийЗаработокФСС КАК КорректировкиНачислений
		|ГДЕ
		|	КорректировкиНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|	И КорректировкиНачислений.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкиВремени.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КорректировкиВремени.Период КАК Период,
		|	КорректировкиВремени.ОтработаноДнейКалендарных КАК ОтработаноДнейКалендарных,
		|	КорректировкиВремени.ДнейБолезниУходаЗаДетьми КАК ДнейБолезниУходаЗаДетьми
		|ИЗ
		|	Документ.БольничныйЛист.ОтработанноеВремяДляСреднегоФСС КАК КорректировкиВремени
		|ГДЕ
		|	КорректировкиВремени.Источник <> ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Исправления)
		|	И КорректировкиВремени.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыОтсутствий.Ссылка КАК Ссылка,
		|	ПериодыОтсутствий.НомерСтроки КАК НомерСтроки,
		|	ПериодыОтсутствий.Начало КАК Начало,
		|	ПериодыОтсутствий.Окончание КАК Окончание,
		|	ПериодыОтсутствий.Дни КАК Дни,
		|	ПериодыОтсутствий.ВидБолезниУходаЗаДетьми КАК ВидБолезниУходаЗаДетьми,
		|	ПериодыОтсутствий.Источник КАК Источник
		|ИЗ
		|	Документ.БольничныйЛист.ПериодыБолезниУходаЗаДетьми КАК ПериодыОтсутствий
		|ГДЕ
		|	ПериодыОтсутствий.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|	И ПериодыОтсутствий.Ссылка = &Ссылка";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыКорректировок.КорректировкиНачислений = РезультатыЗапроса[0].Выгрузить();
	ПараметрыКорректировок.КорректировкиВремени = РезультатыЗапроса[1].Выгрузить();
	ПараметрыКорректировок.ПериодыОтсутствий = РезультатыЗапроса[2].Выгрузить();
	
КонецПроцедуры

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.Организация КАК Организация,
	|	БольничныйЛист.ПериодРегистрации КАК ПериодРегистрации,
	|	БольничныйЛист.ДокументРассчитан КАК ДокументРассчитан,
	|	БольничныйЛист.ПорядокВыплаты КАК ПорядокВыплаты,
	|	БольничныйЛист.Дата КАК Дата,
	|	БольничныйЛист.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	БольничныйЛист.ОсвобождатьСтавку КАК ОсвобождатьСтавку,
	|	БольничныйЛист.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
	|	БольничныйЛист.НазначитьПособие КАК НазначитьПособие,
	|	БольничныйЛист.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	БольничныйЛист.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БольничныйЛист.ИсправленныйДокумент КАК ИсправленныйДокумент,
	|	БольничныйЛист.Номер КАК Номер,
	|	БольничныйЛист.СлучайУходаЗаБольнымРебенком КАК СлучайУходаЗаБольнымРебенком,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход1 КАК РодственникЗаКоторымОсуществляетсяУход1,
	|	БольничныйЛист.ДатаНачалаРодственник1 КАК ДатаНачалаРодственник1,
	|	БольничныйЛист.ДатаОкончанияРодственник1 КАК ДатаОкончанияРодственник1,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход2 КАК РодственникЗаКоторымОсуществляетсяУход2,
	|	БольничныйЛист.ДатаНачалаРодственник2 КАК ДатаНачалаРодственник2,
	|	БольничныйЛист.ДатаОкончанияРодственник2 КАК ДатаОкончанияРодственник2,
	|	БольничныйЛист.РассчитатьЗарплату КАК РассчитатьЗарплату,
	|	БольничныйЛист.ДоходПолученНаТерриторииРФ КАК ДоходПолученНаТерриторииРФ
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.НомерСтроки КАК НомерСтроки,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.РанееНачислено КАК РанееНачислено
	|ИЗ
	|	Документ.БольничныйЛист.РаспределениеПоТерриториямУсловиямТруда КАК БольничныйЛистРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛистРаспределениеРезультатовНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БольничныйЛистРаспределениеРезультатовНачислений.Территория КАК Территория,
	|	БольничныйЛистРаспределениеРезультатовНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БольничныйЛистРаспределениеРезультатовНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БольничныйЛистРаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БольничныйЛистРаспределениеРезультатовНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СУММА(БольничныйЛистРаспределениеРезультатовНачислений.Результат) КАК Результат,
	|	БольничныйЛистРаспределениеРезультатовНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат
	|ИЗ
	|	Документ.БольничныйЛист.РаспределениеРезультатовНачислений КАК БольничныйЛистРаспределениеРезультатовНачислений
	|ГДЕ
	|	БольничныйЛистРаспределениеРезультатовНачислений.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	БольничныйЛистРаспределениеРезультатовНачислений.Территория,
	|	БольничныйЛистРаспределениеРезультатовНачислений.СтатьяФинансирования,
	|	БольничныйЛистРаспределениеРезультатовНачислений.СтатьяРасходов,
	|	БольничныйЛистРаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете,
	|	БольничныйЛистРаспределениеРезультатовНачислений.ОблагаетсяЕНВД,
	|	БольничныйЛистРаспределениеРезультатовНачислений.ПодразделениеУчетаЗатрат,
	|	БольничныйЛистРаспределениеРезультатовНачислений.ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	РаспределениеРезультатовНачислений = Результаты[2].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	РеквизитыДляПроведения.РаспределениеРезультатовНачислений = РаспределениеРезультатовНачислений;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, Организация, ПериодРегистрации, ДокументРассчитан, ПорядокВыплаты, Дата, ПланируемаяДатаВыплаты,
		| ДатаНачалаСобытия, Сотрудник, ПериодРасчетаСреднегоЗаработкаНачало, ПериодРасчетаСреднегоЗаработкаОкончание, ОсвобождатьСтавку, ПричинаНетрудоспособности,
		| ДатаНачала, ДатаОкончания, НазначитьПособие, ДатаНачалаОплаты, ДатаОкончанияОплаты, ФизическоеЛицо, ИсправленныйДокумент, Номер, СлучайУходаЗаБольнымРебенком,
		| РодственникЗаКоторымОсуществляетсяУход1, ДатаНачалаРодственник1, ДатаОкончанияРодственник1, РодственникЗаКоторымОсуществляетсяУход2, ДатаНачалаРодственник2,
		| ДатаОкончанияРодственник2, РаспределениеПоТерриториямУсловиямТруда, РаспределениеРезультатовНачислений, ДоходПолученНаТерриторииРФ, РассчитатьЗарплату");
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

Процедура ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов =
	"ПериодРегистрации,
	|Организация,
	|ИсправленныйДокумент,
	|ВидОплатыПособия,
	|ВидОплатыЗаСчетРаботодателя,
	|ВидНеоплачиваемогоВремени,
	|ВидРасчетаДоплаты";
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ИменаРеквизитов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.*
	               |ИЗ
	               |	Документ.БольничныйЛист.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Ссылка = &Ссылка";
				   
	Начисления = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроверки = РасчетЗарплатыРасширенный.ПараметрыПроверкиПересеченияФактическогоПериодаДействия();
	ПараметрыПроверки.Организация = РеквизитыДокумента.Организация;
	ПараметрыПроверки.ПериодРегистрации = РеквизитыДокумента.ПериодРегистрации;
	ПараметрыПроверки.Документ = ДокументСсылка;
	ПараметрыПроверки.Начисления = Начисления;
	ПараметрыПроверки.ИсправленныйДокумент = РеквизитыДокумента.ИсправленныйДокумент;
	
	ОсновныеНачисления = Новый Массив;
	ОсновныеНачисления.Добавить(РеквизитыДокумента.ВидОплатыПособия);
	ОсновныеНачисления.Добавить(РеквизитыДокумента.ВидОплатыЗаСчетРаботодателя);
	ОсновныеНачисления.Добавить(РеквизитыДокумента.ВидНеоплачиваемогоВремени);
	ОсновныеНачисления.Добавить(РеквизитыДокумента.ВидРасчетаДоплаты);
	
	ПараметрыПроверки.ОсновныеНачисления = ОсновныеНачисления;
	
	РасчетЗарплатыРасширенный.ПроверитьПересечениеФактическогоПериодаДействия(ПараметрыПроверки, Отказ);
	
КонецПроцедуры

#Область Печать

Функция СформироватьПечатнуюФорму(МетаданныеМакета, МассивОбъектов, ОбъектыПечати)
	ПолноеИмяМакета = ПолноеИмяМакета(МетаданныеМакета);
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	ИменаПараметровОбластей = УправлениеПечатьюБЗК.ИменаПараметровОбластейСтандартногоМакета(ПолноеИмяМакета);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_" + Сред(МетаданныеМакета.Имя, СтрДлина("ПФ_MXL_") + 1);
	
	КонтекстПечати = Новый Структура;
	КонтекстПечати.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	КонтекстПечати.Вставить("ПолноеИмяМакета", ПолноеИмяМакета);
	КонтекстПечати.Вставить("Макет", Макет);
	КонтекстПечати.Вставить("МетаданныеМакета", МетаданныеМакета);
	КонтекстПечати.Вставить("МассивОбъектов", МассивОбъектов);
	КонтекстПечати.Вставить("ОбъектыПечати", ОбъектыПечати);
	КонтекстПечати.Вставить("ИменаПараметровОбластей", ИменаПараметровОбластей);
	КонтекстПечати.Вставить("НачалоОчередногоДокумента", 0);
	
	Если МетаданныеМакета = Метаданные.Документы.БольничныйЛист.Макеты.ПФ_MXL_РасчетПособия Тогда
		ПриПечатиРасчетаПособия(КонтекстПечати);
	ИначеЕсли МетаданныеМакета = Метаданные.Документы.БольничныйЛист.Макеты.ПФ_MXL_ЛистокНетрудоспособностиСРасчетомПособия Тогда
		ПриПечатиЛисткаНетрудоспособностиСРасчетомПособия(КонтекстПечати);
	ИначеЕсли МетаданныеМакета = Метаданные.Документы.БольничныйЛист.Макеты.ПФ_MXL_ДоплатаЗаДниНетрудоспособности Тогда
		ПриПечатиДоплатыЗаДниНетрудоспособности(КонтекстПечати);
	КонецЕсли;
	
	Возврат КонтекстПечати;
КонецФункции

Процедура УстановитьПоляПечати(ТабличныйДокумент, ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу)
	Если ТабличныйДокумент.ПолеСлева = 10 Тогда
		ТабличныйДокумент.ПолеСлева = ПолеСлева;
	КонецЕсли;
	Если ТабличныйДокумент.ПолеСверху = 10 Тогда
		ТабличныйДокумент.ПолеСверху = ПолеСверху;
	КонецЕсли;
	Если ТабличныйДокумент.ПолеСправа = 10 Тогда
		ТабличныйДокумент.ПолеСправа = ПолеСправа;
	КонецЕсли;
	Если ТабличныйДокумент.ПолеСнизу = 10 Тогда
		ТабличныйДокумент.ПолеСнизу = ПолеСнизу;
	КонецЕсли;
КонецПроцедуры

Процедура ПередНачаломПечатиОчередногоДокумента(КонтекстПечати)
	Если КонтекстПечати.ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
		КонтекстПечати.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	КонтекстПечати.НачалоОчередногоДокумента = КонтекстПечати.ТабличныйДокумент.ВысотаТаблицы + 1;
КонецПроцедуры

Процедура ПослеОкончанияПечатиОчередногоДокумента(КонтекстПечати, Ссылка)
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
		КонтекстПечати.ТабличныйДокумент,
		КонтекстПечати.НачалоОчередногоДокумента,
		КонтекстПечати.ОбъектыПечати,
		Ссылка);
КонецПроцедуры

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаСреднегоЗаработка.ДанныеДокументовРасчетаСреднегоЗаработка.
//   ИмяМакета          - строка, вариант печати расчета среднего заработка.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивСсылок) Экспорт
	
	ДанныеДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УчетПособийСоциальногоСтрахования.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Запрос.МенеджерВременныхТаблиц, МассивСсылок);
	
	СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.ДатаНачалаСобытия,
	|	ДанныеДокументов.ПрименятьПредельнуюВеличину,
	|	ДанныеДокументов.ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ДанныеДокументов.УчитыватьЗаработокПредыдущихСтрахователей,
	|	ДанныеДокументов.РасчетПоПравилам2010Года,
	|	ДанныеДокументов.ДоляНеполногоВремени,
	|	ДанныеДокументов.РайонныйКоэффициентРФ,
	|	ДанныеДокументов.МинимальныйРазмерОплатыТрудаРФ,
	|	БольничныйЛист.Организация,
	|	БольничныйЛист.Дата КАК ДатаДокумента,
	|	БольничныйЛист.Номер КАК НомерДокумента,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачалаОтсутствия,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончанияОтсутствия,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	ВТКадровыеДанныеСотрудников.Организация КАК Страхователь,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТКадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ВТКадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТКадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ВТКадровыеДанныеСотрудников.Должность КАК Должность,
	|	ВТКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО БольничныйЛист.Организация = Организации.Ссылка
	|		ПО ДанныеДокументов.Ссылка = БольничныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО ДанныеДокументов.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокументов.ДатаНачалаСобытия = ВТКадровыеДанныеСотрудников.Период";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетПособийСоциальногоСтрахования.ТаблицыДанныхСреднегоЗаработкаФСС("БольничныйЛист", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка();
			
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
			
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
			ЗаполнитьЗначенияСвойств(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);
			
			ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, ТаблицыДанныхОСреднем);
			ДанныеДокумента.ПараметрыРасчета = ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.ПараметрыРасчета;
			ДанныеДокумента.ДанныеРасчетаСреднего = ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.ДанныеРасчетаСреднего;
			
			ДанныеДокументов.Добавить(ДанныеДокумента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачалаСобытия КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "Организация,ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости");
	
КонецПроцедуры

#КонецОбласти

#Область ПФ_MXL_РасчетПособия

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму расчета оплаты пособия.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Процедура ПриПечатиРасчетаПособия(КонтекстПечати)
	ТабличныйДокумент = КонтекстПечати.ТабличныйДокумент;
	ОбъектыПечати     = КонтекстПечати.ОбъектыПечати;
	МассивОбъектов    = КонтекстПечати.МассивОбъектов;
	
	УстановитьПоляПечати(ТабличныйДокумент, 0, 0, 0, 0);
	
	ДанныеДляПечатиРасчетаПособия = ДанныеДляПечатиРасчетаПособия(МассивОбъектов);
	ВыборкаДляШапки               = ДанныеДляПечатиРасчетаПособия.ВыборкаДляШапки;
	КадровыеДанныеСотрудников     = ДанныеДляПечатиРасчетаПособия.КадровыеДанныеСотрудников;
	
	Пока ВыборкаДляШапки.Следующий() Цикл
		Если ВыборкаДляШапки.РасчетПоПравилам2010Года Тогда
			Продолжить;
		КонецЕсли;
		ПередНачаломПечатиОчередногоДокумента(КонтекстПечати);
		
		ВывестиШапкуРасчетаПособия(КонтекстПечати, ВыборкаДляШапки, КадровыеДанныеСотрудников);
		
		ВывестиТаблицыРасчетаПособия(КонтекстПечати, ВыборкаДляШапки, ДанныеДляПечатиРасчетаПособия);
		
		ПослеОкончанияПечатиОчередногоДокумента(КонтекстПечати, ВыборкаДляШапки.Ссылка);
	КонецЦикла;
КонецПроцедуры

Функция ДанныеДляПечатиРасчетаПособия(МассивСсылок, НомерТаблицыРазделителяСреднегоЗаработка = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныеЛисты.Ссылка КАК Ссылка,
	|	БольничныеЛисты.АдресМедицинскойОрганизации КАК АдресМедицинскойОрганизации,
	|	БольничныеЛисты.ВидНеоплачиваемогоВремени КАК ВидНеоплачиваемогоВремени,
	|	БольничныеЛисты.ВидОплатыЗаСчетРаботодателя КАК ВидОплатыЗаСчетРаботодателя,
	|	БольничныеЛисты.ВидОплатыПособия КАК ВидОплатыПособия,
	|	БольничныеЛисты.ВидРасчетаДоплаты КАК ВидРасчетаДоплаты,
	|	БольничныеЛисты.ВторойКодПричиныНетрудоспособности КАК ВторойКодПричиныНетрудоспособности,
	|	БольничныеЛисты.ГруппаИнвалидности КАК ГруппаИнвалидности,
	|	БольничныеЛисты.ДатаАктаН1 КАК ДатаАктаН1,
	|	БольничныеЛисты.ДатаВыдачиЛисткаНетрудоспособности КАК ДатаВыдачиЛисткаНетрудоспособности,
	|	БольничныеЛисты.ДатаИзмененияКодаПричиныНетрудоспособности КАК ДатаИзмененияКодаПричиныНетрудоспособности,
	|	БольничныеЛисты.ДатаНаправленияВБюроМСЭ КАК ДатаНаправленияВБюроМСЭ,
	|	БольничныеЛисты.ДатаНарушенияРежима КАК ДатаНарушенияРежима,
	|	БольничныеЛисты.ДатаНачала КАК ДатаНачала,
	|	БольничныеЛисты.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	БольничныеЛисты.ДатаНачалаПоловиннойОплаты КАК ДатаНачалаПоловиннойОплаты,
	|	БольничныеЛисты.ДатаНачалаРаботы КАК ДатаНачалаРаботы,
	|	БольничныеЛисты.ДатаНачалаРодственник1 КАК ДатаНачалаРодственник1,
	|	БольничныеЛисты.ДатаНачалаРодственник2 КАК ДатаНачалаРодственник2,
	|	БольничныеЛисты.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	БольничныеЛисты.ДатаНовыйСтатусНетрудоспособного КАК ДатаНовыйСтатусНетрудоспособного,
	|	БольничныеЛисты.ДатаОкончания КАК ДатаОкончания,
	|	БольничныеЛисты.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	БольничныеЛисты.ДатаОкончанияПутевки КАК ДатаОкончанияПутевки,
	|	БольничныеЛисты.ДатаОкончанияРодственник1 КАК ДатаОкончанияРодственник1,
	|	БольничныеЛисты.ДатаОкончанияРодственник2 КАК ДатаОкончанияРодственник2,
	|	БольничныеЛисты.ДатаОсвидетельствованияМСЭ КАК ДатаОсвидетельствованияМСЭ,
	|	БольничныеЛисты.ДатаРегистрацииДокументовМСЭ КАК ДатаРегистрацииДокументовМСЭ,
	|	БольничныеЛисты.ДнейОплаты КАК ДнейОплаты,
	|	БольничныеЛисты.ДокументРассчитан КАК ДокументРассчитан,
	|	БольничныеЛисты.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	БольничныеЛисты.ДоляНеполногоВремени КАК ДоляНеполногоВремени,
	|	БольничныеЛисты.ДоначислитьЗарплатуПриНеобходимости КАК ДоначислитьЗарплатуПриНеобходимости,
	|	БольничныеЛисты.ДоплачиватьДоДенежногоСодержания КАК ДоплачиватьДоДенежногоСодержания,
	|	БольничныеЛисты.ДоплачиватьДоСреднегоЗаработка КАК ДоплачиватьДоСреднегоЗаработка,
	|	БольничныеЛисты.ДополнительныйКодПричиныНетрудоспособности КАК ДополнительныйКодПричиныНетрудоспособности,
	|	БольничныеЛисты.ДоходПолученНаТерриторииРФ КАК ДоходПолученНаТерриторииРФ,
	|	БольничныеЛисты.ИсправленныйДокумент КАК ИсправленныйДокумент,
	|	БольничныеЛисты.КодНарушенияРежима КАК КодНарушенияРежима,
	|	БольничныеЛисты.КодПричиныНетрудоспособности КАК КодПричиныНетрудоспособности,
	|	БольничныеЛисты.Комментарий КАК Комментарий,
	|	БольничныеЛисты.МедицинскаяОрганизация КАК МедицинскаяОрганизация,
	|	БольничныеЛисты.МинимальныйСреднедневнойЗаработок КАК МинимальныйСреднедневнойЗаработок,
	|	БольничныеЛисты.НазначитьПособие КАК НазначитьПособие,
	|	БольничныеЛисты.НаименованиеМедицинскойОрганизации КАК НаименованиеМедицинскойОрганизации,
	|	БольничныеЛисты.НаименованиеОрганизацииВЛисткеНетрудоспособности КАК НаименованиеОрганизацииВЛисткеНетрудоспособности,
	|	БольничныеЛисты.Начислено КАК Начислено,
	|	БольничныеЛисты.НовыйСтатусНетрудоспособного КАК НовыйСтатусНетрудоспособного,
	|	БольничныеЛисты.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныеЛисты.НомерЛисткаПоОсновномуМестуРаботы КАК НомерЛисткаПоОсновномуМестуРаботы,
	|	БольничныеЛисты.НомерЛисткаПродолжения КАК НомерЛисткаПродолжения,
	|	БольничныеЛисты.НомерПервичногоЛисткаНетрудоспособности КАК НомерПервичногоЛисткаНетрудоспособности,
	|	БольничныеЛисты.НомерПутевки КАК НомерПутевки,
	|	БольничныеЛисты.ОграничениеПособия КАК ОграничениеПособия,
	|	БольничныеЛисты.ОграничениеПособияБезЛьгот КАК ОграничениеПособияБезЛьгот,
	|	БольничныеЛисты.ОГРН_Санатория КАК ОГРН_Санатория,
	|	БольничныеЛисты.ОГРНМедицинскойОрганизации КАК ОГРНМедицинскойОрганизации,
	|	БольничныеЛисты.Организация КАК Организация,
	|	БольничныеЛисты.ОсвобождатьСтавку КАК ОсвобождатьСтавку,
	|	БольничныеЛисты.ОсвобождениеДатаНачала1 КАК ОсвобождениеДатаНачала1,
	|	БольничныеЛисты.ОсвобождениеДатаНачала2 КАК ОсвобождениеДатаНачала2,
	|	БольничныеЛисты.ОсвобождениеДатаНачала3 КАК ОсвобождениеДатаНачала3,
	|	БольничныеЛисты.ОсвобождениеДатаОкончания1 КАК ОсвобождениеДатаОкончания1,
	|	БольничныеЛисты.ОсвобождениеДатаОкончания2 КАК ОсвобождениеДатаОкончания2,
	|	БольничныеЛисты.ОсвобождениеДатаОкончания3 КАК ОсвобождениеДатаОкончания3,
	|	БольничныеЛисты.ОсвобождениеДолжностьВрача1 КАК ОсвобождениеДолжностьВрача1,
	|	БольничныеЛисты.ОсвобождениеДолжностьВрача2 КАК ОсвобождениеДолжностьВрача2,
	|	БольничныеЛисты.ОсвобождениеДолжностьВрача3 КАК ОсвобождениеДолжностьВрача3,
	|	БольничныеЛисты.ОсвобождениеДолжностьВрачаПредседателяВК1 КАК ОсвобождениеДолжностьВрачаПредседателяВК1,
	|	БольничныеЛисты.ОсвобождениеДолжностьВрачаПредседателяВК2 КАК ОсвобождениеДолжностьВрачаПредседателяВК2,
	|	БольничныеЛисты.ОсвобождениеДолжностьВрачаПредседателяВК3 КАК ОсвобождениеДолжностьВрачаПредседателяВК3,
	|	БольничныеЛисты.ОсвобождениеИдентификационныйНомерВрача1 КАК ОсвобождениеИдентификационныйНомерВрача1,
	|	БольничныеЛисты.ОсвобождениеИдентификационныйНомерВрача2 КАК ОсвобождениеИдентификационныйНомерВрача2,
	|	БольничныеЛисты.ОсвобождениеИдентификационныйНомерВрача3 КАК ОсвобождениеИдентификационныйНомерВрача3,
	|	БольничныеЛисты.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1 КАК ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1,
	|	БольничныеЛисты.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2 КАК ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2,
	|	БольничныеЛисты.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3 КАК ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3,
	|	БольничныеЛисты.ОсвобождениеФИОВрача1 КАК ОсвобождениеФИОВрача1,
	|	БольничныеЛисты.ОсвобождениеФИОВрача2 КАК ОсвобождениеФИОВрача2,
	|	БольничныеЛисты.ОсвобождениеФИОВрача3 КАК ОсвобождениеФИОВрача3,
	|	БольничныеЛисты.ОсвобождениеФИОВрачаПредседателяВК1 КАК ОсвобождениеФИОВрачаПредседателяВК1,
	|	БольничныеЛисты.ОсвобождениеФИОВрачаПредседателяВК2 КАК ОсвобождениеФИОВрачаПредседателяВК2,
	|	БольничныеЛисты.ОсвобождениеФИОВрачаПредседателяВК3 КАК ОсвобождениеФИОВрачаПредседателяВК3,
	|	БольничныеЛисты.ОснованиеПодписиРуководителя КАК ОснованиеПодписиРуководителя,
	|	БольничныеЛисты.ОсновноеМестоРаботы КАК ОсновноеМестоРаботы,
	|	БольничныеЛисты.Ответственный КАК Ответственный,
	|	БольничныеЛисты.ПервичныйБольничныйЛист КАК ПервичныйБольничныйЛист,
	|	БольничныеЛисты.ПериодНахожденияВСтационареСРебенкомПо КАК ПериодНахожденияВСтационареСРебенкомПо,
	|	БольничныеЛисты.ПериодНахожденияВСтационареСРебенкомС КАК ПериодНахожденияВСтационареСРебенкомС,
	|	БольничныеЛисты.ПериодРасчетаСреднегоЗаработкаВторойГод КАК ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	БольничныеЛисты.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	БольничныеЛисты.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	БольничныеЛисты.ПериодРасчетаСреднегоЗаработкаПервыйГод КАК ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	БольничныеЛисты.ПериодРегистрации КАК ПериодРегистрации,
	|	БольничныеЛисты.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	БольничныеЛисты.ПорядокВыплаты КАК ПорядокВыплаты,
	|	БольничныеЛисты.ПособиеВыплачиваетсяФСС КАК ПособиеВыплачиваетсяФСС,
	|	БольничныеЛисты.ПоставленаНаУчетВРанниеСрокиБеременности КАК ПоставленаНаУчетВРанниеСрокиБеременности,
	|	БольничныеЛисты.ПоУходуВозрастЛет1 КАК ПоУходуВозрастЛет1,
	|	БольничныеЛисты.ПоУходуВозрастЛет2 КАК ПоУходуВозрастЛет2,
	|	БольничныеЛисты.ПоУходуВозрастМесяцев1 КАК ПоУходуВозрастМесяцев1,
	|	БольничныеЛисты.ПоУходуВозрастМесяцев2 КАК ПоУходуВозрастМесяцев2,
	|	БольничныеЛисты.ПоУходуИспользованоДней1 КАК ПоУходуИспользованоДней1,
	|	БольничныеЛисты.ПоУходуИспользованоДней2 КАК ПоУходуИспользованоДней2,
	|	БольничныеЛисты.ПоУходуРодственнаяСвязь1 КАК ПоУходуРодственнаяСвязь1,
	|	БольничныеЛисты.ПоУходуРодственнаяСвязь2 КАК ПоУходуРодственнаяСвязь2,
	|	БольничныеЛисты.ПоУходуФИО1 КАК ПоУходуФИО1,
	|	БольничныеЛисты.ПоУходуФИО2 КАК ПоУходуФИО2,
	|	БольничныеЛисты.ПредоставленДубликатЛисткаНетрудоспособности КАК ПредоставленДубликатЛисткаНетрудоспособности,
	|	БольничныеЛисты.ПредставлениеПериода КАК ПредставлениеПериода,
	|	БольничныеЛисты.ПрименятьЛьготыПриНачисленииПособия КАК ПрименятьЛьготыПриНачисленииПособия,
	|	БольничныеЛисты.ПриступитьКРаботеС КАК ПриступитьКРаботеС,
	|	БольничныеЛисты.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныеЛисты.ПроцентДоплатыЗаДниНетрудоспособности КАК ПроцентДоплатыЗаДниНетрудоспособности,
	|	БольничныеЛисты.ПроцентОплаты КАК ПроцентОплаты,
	|	БольничныеЛисты.ПроцентОплатыБезЛьгот КАК ПроцентОплатыБезЛьгот,
	|	БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия КАК РайонныйКоэффициентРФнаНачалоСобытия,
	|	БольничныеЛисты.Рассчитал КАК Рассчитал,
	|	БольничныеЛисты.РассчитатьЗарплату КАК РассчитатьЗарплату,
	|	БольничныеЛисты.РасчетПоПравилам2010Года КАК РасчетПоПравилам2010Года,
	|	БольничныеЛисты.РодственникЗаКоторымОсуществляетсяУход1 КАК РодственникЗаКоторымОсуществляетсяУход1,
	|	БольничныеЛисты.РодственникЗаКоторымОсуществляетсяУход2 КАК РодственникЗаКоторымОсуществляетсяУход2,
	|	БольничныеЛисты.Руководитель КАК Руководитель,
	|	БольничныеЛисты.СлучайУходаЗаБольнымРебенком КАК СлучайУходаЗаБольнымРебенком,
	|	БольничныеЛисты.Сотрудник КАК Сотрудник,
	|	БольничныеЛисты.СохраняемоеДенежноеСодержание КАК СохраняемоеДенежноеСодержание,
	|	БольничныеЛисты.СреднийДневнойЗаработок КАК СреднийДневнойЗаработок,
	|	БольничныеЛисты.СтажЛет КАК СтажЛет,
	|	БольничныеЛисты.СтажМесяцев КАК СтажМесяцев,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.СтажРасширенныйЛет = 0
	|				И БольничныеЛисты.СтажРасширенныйМесяцев = 0
	|			ТОГДА БольничныеЛисты.СтажЛет
	|		ИНАЧЕ БольничныеЛисты.СтажРасширенныйЛет
	|	КОНЕЦ КАК СтажРасширенныйЛет,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.СтажРасширенныйЛет = 0
	|				И БольничныеЛисты.СтажРасширенныйМесяцев = 0
	|			ТОГДА БольничныеЛисты.СтажМесяцев
	|		ИНАЧЕ БольничныеЛисты.СтажРасширенныйМесяцев
	|	КОНЕЦ КАК СтажРасширенныйМесяцев,
	|	БольничныеЛисты.УдалитьПоставленаНаУчетВРанниеСрокиБеременности КАК УдалитьПоставленаНаУчетВРанниеСрокиБеременности,
	|	БольничныеЛисты.УдалитьХеш КАК УдалитьХеш,
	|	БольничныеЛисты.Удержано КАК Удержано,
	|	БольничныеЛисты.УсловияИсчисленияКод1 КАК УсловияИсчисленияКод1,
	|	БольничныеЛисты.УсловияИсчисленияКод2 КАК УсловияИсчисленияКод2,
	|	БольничныеЛисты.УсловияИсчисленияКод3 КАК УсловияИсчисленияКод3,
	|	БольничныеЛисты.УчитыватьЗаработокПредыдущихСтрахователей КАК УчитыватьЗаработокПредыдущихСтрахователей,
	|	БольничныеЛисты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БольничныеЛисты.ФиксПериодРасчетаСреднегоЗаработка КАК ФиксПериодРасчетаСреднегоЗаработка,
	|	БольничныеЛисты.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
	|	БольничныеЛисты.ЯвляетсяПродолжениемБолезни КАК ЯвляетсяПродолжениемБолезни,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.ДатаНачалаПоловиннойОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ БольничныеЛисты.ДатаОкончанияОплаты < БольничныеЛисты.ДатаНачалаПоловиннойОплаты
	|			ТОГДА РАЗНОСТЬДАТ(БольничныеЛисты.ДатаНачалаОплаты, БольничныеЛисты.ДатаОкончанияОплаты, ДЕНЬ) + 1
	|		ИНАЧЕ РАЗНОСТЬДАТ(БольничныеЛисты.ДатаНачалаОплаты, БольничныеЛисты.ДатаНачалаПоловиннойОплаты, ДЕНЬ)
	|	КОНЕЦ КАК ДнейВПолномРазмере,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.ДатаНачалаПоловиннойОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БольничныеЛисты.ДатаОкончанияОплаты >= БольничныеЛисты.ДатаНачалаПоловиннойОплаты
	|			ТОГДА РАЗНОСТЬДАТ(БольничныеЛисты.ДатаНачалаПоловиннойОплаты, БольничныеЛисты.ДатаОкончанияОплаты, ДЕНЬ) + 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейПо50процентов,
	|	ВЫБОР
	|		КОГДА ОрганизацияСправочник.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ОрганизацияСправочник.Наименование
	|		ИНАЧЕ ОрганизацияСправочник.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеОрганизации
	|ПОМЕСТИТЬ ВТБольничныеЛисты
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныеЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОрганизацияСправочник
	|		ПО БольничныеЛисты.Организация = ОрганизацияСправочник.Ссылка
	|ГДЕ
	|	БольничныеЛисты.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛистНачисления.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТБольничныеЛистыДатыНачалаНачислений
	|ИЗ
	|	ВТБольничныеЛисты КАК БольничныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|		ПО БольничныеЛисты.Ссылка = БольничныйЛистНачисления.Ссылка";
	
	Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
	"ВЫБРАТЬ * ИЗ ВТБольничныеЛисты УПОРЯДОЧИТЬ ПО ДатаНачала, ДатаНачалаСобытия";
	
	ВыборкаДляШапки = Запрос.Выполнить().Выбрать();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТБольничныеЛистыДатыНачалаНачислений");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"МинимальнаяОплатаТрудаРФ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		,
		"ВТМинимальнаяОплатаТруда");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"МаксимальныйРазмерЕжемесячнойСтраховойВыплаты",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		,
		"ВТМаксимальнаяОплатаТруда");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БольничныеЛисты.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТБольничныеЛисты КАК БольничныеЛисты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛистНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	БольничныйЛистНачисления.ДатаОкончания КАК ПериодДействияКонец,
	|	БольничныйЛистНачисления.Результат КАК Результат,
	|	БольничныйЛистНачисления.ОплаченоДней КАК ОплаченоВремени,
	|	БольничныйЛистНачисления.Ссылка КАК Ссылка,
	|	МинимальнаяОплатаТруда.Размер КАК МРОТ,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.ОграничениеПособия = ЗНАЧЕНИЕ(Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереММОТ)
	|				ИЛИ БольничныеЛисты.ДатаНарушенияРежима <> ДАТАВРЕМЯ(1, 1, 1)
	|					И БольничныйЛистНачисления.ДатаНачала >= БольничныеЛисты.ДатаНарушенияРежима
	|			ТОГДА МинимальнаяОплатаТруда.Размер / ДЕНЬ(КОНЕЦПЕРИОДА(БольничныйЛистНачисления.ДатаНачала, МЕСЯЦ)) * ВЫБОР
	|					КОГДА БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия < 1
	|						ТОГДА 1
	|					ИНАЧЕ БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия
	|				КОНЕЦ
	|		КОГДА БольничныеЛисты.ОграничениеПособия = ЗНАЧЕНИЕ(Перечисление.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты)
	|			ТОГДА МаксимальнаяОплатаТруда.Размер * 4 / ДЕНЬ(КОНЕЦПЕРИОДА(БольничныйЛистНачисления.ДатаНачала, МЕСЯЦ)) * ВЫБОР
	|					КОГДА БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия < 1
	|						ТОГДА 1
	|					ИНАЧЕ БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МаксимальныйРазмерДневногоПособия,
	|	ВЫБОР
	|		КОГДА ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|			ТОГДА БольничныйЛистНачисления.Результат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоРаботодателем,
	|	ВЫБОР
	|		КОГДА ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|			ТОГДА БольничныйЛистНачисления.Результат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоФСС
	|ИЗ
	|	ВТБольничныеЛисты КАК БольничныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
	|			ПО БольничныйЛистНачисления.Начисление = ПВРНачисления.Ссылка
	|		ПО БольничныеЛисты.Ссылка = БольничныйЛистНачисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
	|		ПО (БольничныйЛистНачисления.ДатаНачала = МинимальнаяОплатаТруда.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксимальнаяОплатаТруда КАК МаксимальнаяОплатаТруда
	|		ПО БольничныеЛисты.ДатаНачалаСобытия = МаксимальнаяОплатаТруда.Период
	|ГДЕ
	|	ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам))
	|
	|УПОРЯДОЧИТЬ ПО
	|	БольничныеЛисты.ДатаНачала
	|ИТОГИ
	|	СУММА(Результат),
	|	СУММА(НачисленоРаботодателем),
	|	СУММА(НачисленоФСС)
	|ПО
	|	Ссылка";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов  = Результат.Количество();
	
	СписокСотрудников = Результат[КоличествоРезультатов - 2].Выгрузить().ВыгрузитьКолонку("Сотрудник");
	ИменаПолей = "ФИОПолные,ИНН,СтраховойНомерПФР,Подразделение,Должность,ТабельныйНомер,Пол,ДатаРождения";
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, ИменаПолей);
	
	ВыборкаНачислений = Результат[КоличествоРезультатов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДанныеДляПечатиРасчетаСреднегоЗаработка = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивСсылок);
	ОбластиДляВстраиванияСреднегоЗаработка = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ОбластиДляВстраивания(
		ДанныеДляПечатиРасчетаСреднегоЗаработка,
		Ложь,
		,
		НомерТаблицыРазделителяСреднегоЗаработка);
	
	ДанныеДляПечатиРасчетаПособия = Новый Структура;
	ДанныеДляПечатиРасчетаПособия.Вставить("ВыборкаДляШапки", ВыборкаДляШапки);
	ДанныеДляПечатиРасчетаПособия.Вставить("ВыборкаНачислений", ВыборкаНачислений);
	ДанныеДляПечатиРасчетаПособия.Вставить("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	ДанныеДляПечатиРасчетаПособия.Вставить("ОбластиДляВстраиванияСреднегоЗаработка", ОбластиДляВстраиванияСреднегоЗаработка);
	ДанныеДляПечатиРасчетаПособия.Вставить("ДанныеДляПечатиРасчетаСреднегоЗаработка", ДанныеДляПечатиРасчетаСреднегоЗаработка);
	ДанныеДляПечатиРасчетаПособия.Вставить("ВалютаУчета", ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты());
	
	Возврат ДанныеДляПечатиРасчетаПособия;
	
КонецФункции

Процедура ВывестиШапкуРасчетаПособия(КонтекстПечати, ВыборкаДляШапки, КадровыеДанныеСотрудников)
	СекцияШапка = КонтекстПечати.Макет.ПолучитьОбласть("Шапка");
	
	ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры, ВыборкаДляШапки);
	
	КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(ВыборкаДляШапки.Сотрудник);
	Если КадровыеДанныеСотрудника = Неопределено Тогда
		Пол = Перечисления.ПолФизическогоЛица.Мужской;
	Иначе
		ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры, КадровыеДанныеСотрудника);
		Пол = КадровыеДанныеСотрудника.Пол;
	КонецЕсли;
	Если Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		СловаНеРаботал = НСтр("ru = 'Не работала'");
	Иначе
		СловаНеРаботал = НСтр("ru = 'Не работал'");
	КонецЕсли;
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("СловаНеРаботал", СловаНеРаботал);
	ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры, ЗначенияЗаполнения);
	
	СекцияШапка.Параметры.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(КадровыеДанныеСотрудника.ТабельныйНомер, Истина, Истина);
	СекцияШапка.Параметры.ПодписьЛетСтажа = ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru = 'год'"), НСтр("ru = 'года'"), НСтр("ru = 'лет'"), СекцияШапка.Параметры.СтажРасширенныйЛет);
	СекцияШапка.Параметры.ПодписьМесяцевСтажа = ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru = 'месяц'"), НСтр("ru = 'месяца'"), НСтр("ru = 'месяцев'"), СекцияШапка.Параметры.СтажРасширенныйМесяцев);
	
	Если ВыборкаДляШапки.ФинансированиеФедеральнымБюджетом = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов Тогда
		
		РазностьСтажей 	= УчетПособийСоциальногоСтрахования.ПодсчитатьРазностьСтажейВГодахИМесяцах(
			ВыборкаДляШапки.СтажРасширенныйЛет,
			ВыборкаДляШапки.СтажРасширенныйМесяцев,
			ВыборкаДляШапки.СтажЛет,
			ВыборкаДляШапки.СтажМесяцев);
		НестраховыхПериодовЛет 		= РазностьСтажей.РазностьЛет;
		НестраховыхПериодовМесяцев 	= РазностьСтажей.РазностьМесяцев;
		
		Если НестраховыхПериодовЛет > 0 Или НестраховыхПериодовМесяцев > 0 Тогда
			СекцияШапка.Параметры.ЛетНестраховогоСтажа 				= НестраховыхПериодовЛет;
			СекцияШапка.Параметры.МесяцевНестраховогоСтажа 			= НестраховыхПериодовМесяцев;
			СекцияШапка.Параметры.ПодписьЛетНестраховогоСтажа 		= ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru = 'год'"), НСтр("ru = 'года'"), НСтр("ru = 'лет'"), СекцияШапка.Параметры.ЛетНестраховогоСтажа);
			СекцияШапка.Параметры.ПодписьМесяцевНестраховогоСтажа 	= ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru = 'месяц'"), НСтр("ru = 'месяца'"), НСтр("ru = 'месяцев'"), СекцияШапка.Параметры.МесяцевНестраховогоСтажа);
		КонецЕсли;
		
	КонецЕсли;
	
	СекцияШапка.Параметры.ОписаниеНазначениеПособия = ПредставлениеНазначенияПособия(ВыборкаДляШапки);
	СекцияШапка.Параметры.НаименованиеОрганизации = СокрЛП(СекцияШапка.Параметры.НаименованиеОрганизации);
	
	КонтекстПечати.ТабличныйДокумент.Вывести(СекцияШапка);
	
КонецПроцедуры

Процедура ВывестиТаблицыРасчетаПособия(КонтекстПечати, ВыборкаДляШапки, ДанныеДляПечатиРасчетаПособия)
	// Определение локальных переменных.
	ТабличныйДокумент       = КонтекстПечати.ТабличныйДокумент;
	Макет                   = КонтекстПечати.Макет;
	ИменаПараметровОбластей = КонтекстПечати.ИменаПараметровОбластей;
	
	ВыборкаНачислений         = ДанныеДляПечатиРасчетаПособия.ВыборкаНачислений;
	КадровыеДанныеСотрудников = ДанныеДляПечатиРасчетаПособия.КадровыеДанныеСотрудников;
	ОбластиСреднегоЗаработка  = ДанныеДляПечатиРасчетаПособия.ОбластиДляВстраиванияСреднегоЗаработка;
	ДанныеСреднегоЗаработка   = ДанныеДляПечатиРасчетаПособия.ДанныеДляПечатиРасчетаСреднегоЗаработка;
	ВалютаУчета               = ДанныеДляПечатиРасчетаПособия.ВалютаУчета;
	
	// Вывод среднего.
	УправлениеПечатьюБЗК.ВывестиОбластьСФорматомСтрок(
		ТабличныйДокумент,
		ОбластиСреднегоЗаработка.ТабличныйДокумент,
		ОбластиСреднегоЗаработка.ТабличныйДокумент.Область(
			Обработки.ПечатьРасчетаСреднегоЗаработка.ИмяВстраиваемойОбласти(
				ОбластиСреднегоЗаработка.ОбъектыПечати,
				ВыборкаДляШапки.Ссылка)));
	
	// Подготовка секций таблицы.
	ПоказыватьМинимальныйРазмерДневногоПособия = УчетПособийСоциальногоСтрахования.ОграничиватьПособиеСнизуМРОТ(
		ВыборкаДляШапки.ПричинаНетрудоспособности,
		ВыборкаДляШапки.ДатаОкончания);
	
	Если ПоказыватьМинимальныйРазмерДневногоПособия Тогда
		
		СекцияШапкиТаблицы = Макет.ПолучитьОбласть("РасчетПособияШапка2020");
		СекцияСтрокиТаблицы = Макет.ПолучитьОбласть("РасчетПособияСтрока2020");
		
		ПараметрыШапкиТаблицы = Новый Структура(ИменаПараметровОбластей.РасчетПособияШапка2020);
		ПараметрыСтрокиТаблицы = Новый Структура(ИменаПараметровОбластей.РасчетПособияСтрока2020);
		
	ИначеЕсли ЭтоПособиеПоМатеринству(ВыборкаДляШапки) Тогда
		
		СекцияШапкиТаблицы = Макет.ПолучитьОбласть("РасчетПособияШапка2013");
		СекцияСтрокиТаблицы = Макет.ПолучитьОбласть("РасчетПособияСтрока2013");
		
		ПараметрыШапкиТаблицы = Новый Структура(ИменаПараметровОбластей.РасчетПособияШапка2013);
		ПараметрыСтрокиТаблицы = Новый Структура(ИменаПараметровОбластей.РасчетПособияСтрока2013);
		
		Для Каждого Элемент Из ДанныеСреднегоЗаработка Цикл
			Если ВыборкаДляШапки.Ссылка = Элемент.РеквизитыДокумента.Ссылка Тогда
				ПараметрыСтрокиТаблицы.СреднийПредельный = УчетПособийСоциальногоСтрахованияКлиентСервер.МаксимальныйСреднедневнойЗаработокДляОплатыПособияПоМатеринству(
					Элемент.ПараметрыРасчета);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СекцияШапкиТаблицы = Макет.ПолучитьОбласть("РасчетПособияШапка2011");
		СекцияСтрокиТаблицы = Макет.ПолучитьОбласть("РасчетПособияСтрока2011");
		
		ПараметрыШапкиТаблицы = Новый Структура(ИменаПараметровОбластей.РасчетПособияШапка2011);
		ПараметрыСтрокиТаблицы = Новый Структура(ИменаПараметровОбластей.РасчетПособияСтрока2011);
		
	КонецЕсли;
	
	// Вывод заголовка.
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("РасчетПособияЗаголовок"));
	
	// Вывод шапки.
	Если ПараметрыШапкиТаблицы.Свойство("УчетРК")
		И ТребуетсяВыводРайонногоКоэффициента(ВыборкаДляШапки) Тогда
		ПараметрыШапкиТаблицы.УчетРК = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с учетом РК: %1'"),
			ВыборкаДляШапки.РайонныйКоэффициентРФнаНачалоСобытия);
	ИначеЕсли ПараметрыШапкиТаблицы.Свойство("РайонныйКоэффициент") Тогда
		Если ТипЗнч(ВыборкаДляШапки.РайонныйКоэффициентРФнаНачалоСобытия) = Тип("Число")
			И ВыборкаДляШапки.РайонныйКоэффициентРФнаНачалоСобытия > 1 Тогда
			ПараметрыШапкиТаблицы.РайонныйКоэффициент = ВыборкаДляШапки.РайонныйКоэффициентРФнаНачалоСобытия;
		Иначе
			ПараметрыШапкиТаблицы.РайонныйКоэффициент = 1;
		КонецЕсли;
	КонецЕсли;
	
	СекцияШапкиТаблицы.Параметры.Заполнить(ПараметрыШапкиТаблицы);
	ТабличныйДокумент.Вывести(СекцияШапкиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтрокиТаблицы, ВыборкаДляШапки);
	
	// Вывод строк и расчет итогов.
	НачисленоФСС = 0;
	НачисленоРаботодателем = 0;
	НачисленоВсего = 0;
	
	ВыборкаНачислений.Сбросить();
	Если ВыборкаНачислений.НайтиСледующий(Новый Структура("Ссылка", ВыборкаДляШапки.Ссылка)) Тогда
		
		ВыборкаНачисленийПоДокументу = ВыборкаНачислений.Выбрать();
		НачисленоФСС = ВыборкаНачислений.НачисленоФСС;
		НачисленоРаботодателем = ВыборкаНачислений.НачисленоРаботодателем;
		НачисленоВсего = НачисленоФСС + НачисленоРаботодателем;
		
		Пока ВыборкаНачисленийПоДокументу.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ПараметрыСтрокиТаблицы, ВыборкаНачисленийПоДокументу);
			
			РазмерПособияВПроцентах = РазмерПособияВПроцентах(ВыборкаДляШапки, ВыборкаНачисленийПоДокументу);
			Если ВыборкаДляШапки.СреднийДневнойЗаработок < ВыборкаДляШапки.МинимальныйСреднедневнойЗаработок Тогда
				РазмерДневногоПособия = Окр(ВыборкаДляШапки.МинимальныйСреднедневнойЗаработок * РазмерПособияВПроцентах / 100,2);
			Иначе
				РазмерДневногоПособия = Окр(ВыборкаДляШапки.СреднийДневнойЗаработок * РазмерПособияВПроцентах / 100,2);
			КонецЕсли;
			
			Если ПоказыватьМинимальныйРазмерДневногоПособия Тогда
				ПараметрыСтрокиТаблицы.МинимальныйРазмерДневногоПособия = УчетПособийСоциальногоСтрахования.ОграничениеПособияСнизуМРОТ(
					ВыборкаДляШапки.ПричинаНетрудоспособности,
					ВыборкаНачисленийПоДокументу.ПериодДействияНачало,
					1,
					ВыборкаДляШапки.РайонныйКоэффициентРФнаНачалоСобытия,
					ВыборкаДляШапки.ДоляНеполногоВремени,
					ВыборкаНачисленийПоДокументу.МРОТ);
			КонецЕсли;
			
			ПараметрыСтрокиТаблицы.РазмерПособияВПроцентах = РазмерПособияВПроцентах;
			ПараметрыСтрокиТаблицы.РазмерДневногоПособия = РазмерДневногоПособия;
			
			СекцияСтрокиТаблицы.Параметры.Заполнить(ПараметрыСтрокиТаблицы);
			ТабличныйДокумент.Вывести(СекцияСтрокиТаблицы);
			
		КонецЦикла;
	КонецЕсли;
	
	// Вывод подвала.
	Если Макет.Области.Найти("РасчетПособияПодвал") <> Неопределено Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("РасчетПособияПодвал"));
	КонецЕсли;
	
	// Вывод итогов.
	СекцияИтоговТаблицы = Макет.ПолучитьОбласть("РасчетПособияИтоги");
	ПараметрыИтоговТаблицы = Новый Структура(ИменаПараметровОбластей.РасчетПособияИтоги);
	ПараметрыИтоговТаблицы.НачисленоФСС 					= НачисленоФСС;
	ПараметрыИтоговТаблицы.НачисленоФССПрописью 			= РаботаСКурсамиВалют.СформироватьСуммуПрописью(НачисленоФСС, ВалютаУчета);
	ПараметрыИтоговТаблицы.НачисленоРаботодателем 			= НачисленоРаботодателем;
	ПараметрыИтоговТаблицы.НачисленоРаботодателемПрописью 	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(НачисленоРаботодателем, ВалютаУчета);
	ПараметрыИтоговТаблицы.НачисленоВсего 					= НачисленоВсего;
	ПараметрыИтоговТаблицы.НачисленоВсегоПрописью 			= РаботаСКурсамиВалют.СформироватьСуммуПрописью(НачисленоВсего, ВалютаУчета);
	ПараметрыИтоговТаблицы.ПериодРегистрации 				= ВыборкаДляШапки.ПериодРегистрации;
	СекцияИтоговТаблицы.Параметры.Заполнить(ПараметрыИтоговТаблицы);
	ТабличныйДокумент.Вывести(СекцияИтоговТаблицы);
	
КонецПроцедуры

Процедура ВывестиШапкуЛисткаНетрудоспособностиИРасчетаПособия(КонтекстПечати, ВыборкаДляШапки, КадровыеДанныеСотрудников)
	// Определение локальных переменных.
	ТабличныйДокумент       = КонтекстПечати.ТабличныйДокумент;
	Макет                   = КонтекстПечати.Макет;
	ИменаПараметровОбластей = КонтекстПечати.ИменаПараметровОбластей;
	
	// Вывод шапки.
	ПараметрыШапки = Новый Структура(ИменаПараметровОбластей.Шапка);
	
	ЗаполнитьЗначенияСвойств(ПараметрыШапки, ВыборкаДляШапки);
	
	// Медицинская организация.
	МассивСтрок = РазделитьПоШирине(ВыборкаДляШапки.НаименованиеМедицинскойОрганизации, " ", 50);
	Если МассивСтрок.Количество() = 1 Тогда
		ПараметрыШапки.НаименованиеМедицинскойОрганизации1 = ВыборкаДляШапки.НаименованиеМедицинскойОрганизации;
	Иначе
		ПараметрыШапки.НаименованиеМедицинскойОрганизации1 = СокрП(МассивСтрок[0]);
		МассивСтрок.Удалить(0);
		ПараметрыШапки.НаименованиеМедицинскойОрганизации2 = СокрЛ(СтрСоединить(МассивСтрок, " "));
	КонецЕсли;
	
	МассивСтрок = РазделитьПоШирине(ВыборкаДляШапки.АдресМедицинскойОрганизации, ",", 50);
	Если МассивСтрок.Количество() = 1 Тогда
		ПараметрыШапки.АдресМедицинскойОрганизации1 = ВыборкаДляШапки.АдресМедицинскойОрганизации;
	Иначе
		ПараметрыШапки.АдресМедицинскойОрганизации1 = СокрП(МассивСтрок[0]);
		МассивСтрок.Удалить(0);
		ПараметрыШапки.АдресМедицинскойОрганизации2 = СокрЛ(СтрСоединить(МассивСтрок, " "));
	КонецЕсли;
	
	// Кадровые данные.
	КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(ВыборкаДляШапки.Сотрудник);
	ЗаполнитьЗначенияСвойств(ПараметрыШапки, КадровыеДанныеСотрудника);
	
	ПараметрыШапки.РайонныйКоэффициент = ВыборкаДляШапки.РайонныйКоэффициентРФнаНачалоСобытия;
	
	ПараметрыШапки.ПредставлениеПериодаОтсутствия = ПредставлениеПериодаОтсутствия(
		КадровыеДанныеСотрудника.Пол,
		ВыборкаДляШапки.ДатаНачала,
		ВыборкаДляШапки.ДатаОкончания);
	
	ПараметрыШапки.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
		КадровыеДанныеСотрудника.ТабельныйНомер,
		Истина,
		Истина);
	
	ПараметрыШапки.ПредставлениеСтраховогоСтажа = ПредставлениеДлительности(
		ВыборкаДляШапки.СтажРасширенныйЛет,
		ВыборкаДляШапки.СтажРасширенныйМесяцев);
	
	Если ВыборкаДляШапки.ФинансированиеФедеральнымБюджетом = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов Тогда
		
		РазностьСтажей = УчетПособийСоциальногоСтрахования.ПодсчитатьРазностьСтажейВГодахИМесяцах(ВыборкаДляШапки.СтажРасширенныйЛет,
			ВыборкаДляШапки.СтажРасширенныйМесяцев,
			ВыборкаДляШапки.СтажЛет,
			ВыборкаДляШапки.СтажМесяцев);
		Если РазностьСтажей.РазностьЛет > 0 Или РазностьСтажей.РазностьМесяцев > 0 Тогда
			ПараметрыШапки.ПредставлениеНестраховыхПериодов = ПредставлениеДлительности(
				РазностьСтажей.РазностьЛет,
				РазностьСтажей.РазностьМесяцев);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыШапки.ОписаниеНазначениеПособия = ПредставлениеНазначенияПособия(ВыборкаДляШапки);
	ПараметрыШапки.НаименованиеОрганизации = СокрЛП(ПараметрыШапки.НаименованиеОрганизации);
	
	// Уход за родственниками.
	ЭтоУходЗаРодственником = Перечисления.ПричиныНетрудоспособности.ЭтоУходЗаРодственником(
		ВыборкаДляШапки.ПричинаНетрудоспособности);
	
	Если ВыборкаДляШапки.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		СлучайУходаЗаБольнымРебенком = ВыборкаДляШапки.СлучайУходаЗаБольнымРебенком;
	Иначе
		СлучайУходаЗаБольнымРебенком = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаДляШапки.РодственникЗаКоторымОсуществляетсяУход1) Тогда
		ПараметрыШапки.ПоУходу1_Возраст = ПредставлениеДлительности(
			ВыборкаДляШапки.ПоУходуВозрастЛет1,
			ВыборкаДляШапки.ПоУходуВозрастМесяцев1);
		ПараметрыШапки.ПоУходу1_Связь = ПредставлениеРодственнойСвязи(ВыборкаДляШапки.ПоУходуРодственнаяСвязь1);
		ПараметрыШапки.ПоУходу1_Родственник = ВыборкаДляШапки.ПоУходуФИО1;
		ПараметрыШапки.ПоУходу1_Дней = УчетПособийСоциальногоСтрахованияРасширенный.ОстатокОплачиваемыхДнейУходаЗаБольнымРодственником(
			ВыборкаДляШапки.РодственникЗаКоторымОсуществляетсяУход1,
			Макс(ВыборкаДляШапки.ДатаНачалаРодственник1, ВыборкаДляШапки.ДатаНачалаОплаты),
			СлучайУходаЗаБольнымРебенком,
			ВыборкаДляШапки.Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаДляШапки.РодственникЗаКоторымОсуществляетсяУход2) Тогда
		ПараметрыШапки.ПоУходу2_Возраст = ПредставлениеДлительности(
			ВыборкаДляШапки.ПоУходуВозрастЛет2,
			ВыборкаДляШапки.ПоУходуВозрастМесяцев2);
		ПараметрыШапки.ПоУходу2_Связь = ПредставлениеРодственнойСвязи(ВыборкаДляШапки.ПоУходуРодственнаяСвязь2);
		ПараметрыШапки.ПоУходу2_Родственник = ВыборкаДляШапки.ПоУходуФИО2;
		ПараметрыШапки.ПоУходу2_Дней = УчетПособийСоциальногоСтрахованияРасширенный.ОстатокОплачиваемыхДнейУходаЗаБольнымРодственником(
			ВыборкаДляШапки.РодственникЗаКоторымОсуществляетсяУход2,
			Макс(ВыборкаДляШапки.ДатаНачалаРодственник2, ВыборкаДляШапки.ДатаНачалаОплаты),
			СлучайУходаЗаБольнымРебенком,
			ВыборкаДляШапки.Ссылка);
	КонецЕсли;
	
	// Освобождение от работы.
	ПараметрыШапки.ПредставлениеВрача1 = ПредставлениеВрача(ВыборкаДляШапки, "1");
	ПараметрыШапки.ПредставлениеВрача2 = ПредставлениеВрача(ВыборкаДляШапки, "2");
	ПараметрыШапки.ПредставлениеВрача3 = ПредставлениеВрача(ВыборкаДляШапки, "3");
	ПараметрыШапки.ПредставлениеПредседателяВК1 = ПредставлениеВрача(ВыборкаДляШапки, "ПредседателяВК1");
	ПараметрыШапки.ПредставлениеПредседателяВК2 = ПредставлениеВрача(ВыборкаДляШапки, "ПредседателяВК2");
	ПараметрыШапки.ПредставлениеПредседателяВК3 = ПредставлениеВрача(ВыборкаДляШапки, "ПредседателяВК3");
	
	// Флажки.
	Если ВыборкаДляШапки.ЯвляетсяПродолжениемБолезни Тогда
		ПараметрыШапки.ЭтоПродолжение = "V";
	Иначе
		ПараметрыШапки.Первичный = "V";
	КонецЕсли;
	
	Если ВыборкаДляШапки.ПредоставленДубликатЛисткаНетрудоспособности Тогда
		ПараметрыШапки.Дубликат = "V";
	КонецЕсли;
	
	Если ЭтоУходЗаРодственником Тогда
		ПараметрыШапки.ЭтоПособиеПоУходу = "V";
	КонецЕсли;
	
	Если ВыборкаДляШапки.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена Тогда
		ПараметрыШапки.УчетВРанниеСроки_Поставлена = "V";
	ИначеЕсли ВыборкаДляШапки.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеПоставлена Тогда
		ПараметрыШапки.УчетВРанниеСроки_НеПоставлена = "V";
	ИначеЕсли ВыборкаДляШапки.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеИзвестно Тогда
		ПараметрыШапки.УчетВРанниеСроки_НеИзвестно = "V";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаДляШапки.ДатаНарушенияРежима)
		Или ЗначениеЗаполнено(ВыборкаДляШапки.КодНарушенияРежима) Тогда
		ПараметрыШапки.ЭтоНарушениеРежима = "V";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаДляШапки.ПериодНахожденияВСтационареСРебенкомС)
		Или ЗначениеЗаполнено(ВыборкаДляШапки.ПериодНахожденияВСтационареСРебенкомПо) Тогда
		ПараметрыШапки.НаходилсяВСтационаре = "V";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаДляШапки.ДатаНаправленияВБюроМСЭ)
		Или ЗначениеЗаполнено(ВыборкаДляШапки.ДатаОсвидетельствованияМСЭ)
		Или ЗначениеЗаполнено(ВыборкаДляШапки.ДатаРегистрацииДокументовМСЭ) Тогда
		ПараметрыШапки.МедикоСоциальнаяЭкспертиза = "V";
	КонецЕсли;
	
	Если ВыборкаДляШапки.ОсновноеМестоРаботы Тогда
		ПараметрыШапки.ФлажокОсновноеМестоРаботы = "V";
	Иначе
		ПараметрыШапки.ФлажокСовместительство = "V";
	КонецЕсли;
	
	СекцияШапка = Макет.ПолучитьОбласть("Шапка");
	СекцияШапка.Параметры.Заполнить(ПараметрыШапки);
	ТабличныйДокумент.Вывести(СекцияШапка);
КонецПроцедуры

Функция РазделитьПоШирине(Строка, Разделитель, МаксимальнаяШирина)
	МассивСтрок = Новый Массив;
	
	КоличествоСтрок = СтрЧислоСтрок(Строка);
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Подстрока = СтрПолучитьСтроку(Строка, НомерСтроки);
		Пока СтрДлина(Подстрока) > МаксимальнаяШирина Цикл
			Позиция = СтрНайти(Подстрока, Разделитель, НаправлениеПоиска.СКонца, МаксимальнаяШирина);
			Если Позиция = 0 Тогда
				Позиция = СтрНайти(Подстрока, Разделитель, НаправлениеПоиска.СНачала, МаксимальнаяШирина);
				Если Позиция = 0 Тогда
					Прервать; // Неделимая строка.
				КонецЕсли;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Подстрока, Позиция));
			Подстрока = Сред(Подстрока, Позиция + 1);
		КонецЦикла;
		МассивСтрок.Добавить(Подстрока);
	КонецЦикла;
	
	Возврат МассивСтрок;
КонецФункции


Функция ПредставлениеВрача(ВыборкаДляШапки, СуффиксПолей)
	Должность = ВыборкаДляШапки["ОсвобождениеДолжностьВрача" + СуффиксПолей];
	ФИО = ВыборкаДляШапки["ОсвобождениеФИОВрача" + СуффиксПолей];
	ИдентификационныйНомер = ВыборкаДляШапки["ОсвобождениеИдентификационныйНомерВрача" + СуффиксПолей];
	
	Представления = Новый Массив;
	Если ЗначениеЗаполнено(Должность) Тогда
		Представления.Добавить(Должность);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФИО) Тогда
		Представления.Добавить(ФИО);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификационныйНомер) Тогда
		Представления.Добавить(ИдентификационныйНомер);
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

Функция ПредставлениеПериодаОтсутствия(Пол, ДатаНачала, ДатаОкончания)
	Если Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		Представление = НСтр("ru = 'Не работала c [ДатаНачала] по [ДатаОкончания]'");
	Иначе
		Представление = НСтр("ru = 'Не работал c [ДатаНачала] по [ДатаОкончания]'");
	КонецЕсли;
	Представление = СтрЗаменить(Представление, "[ДатаНачала]", Формат(ДатаНачала, "ДЛФ=D"));
	Представление = СтрЗаменить(Представление, "[ДатаОкончания]", Формат(ДатаОкончания, "ДЛФ=D"));
	Возврат Представление;
КонецФункции

Функция ПредставлениеДлительности(ЧислоЛет, ЧислоМесяцев)
	Массив = Новый Массив;
	Если ЧислоЛет > 0 Тогда
		Массив.Добавить(Формат(ЧислоЛет, "ЧГ="));
		Массив.Добавить(ПерсонифицированныйУчет.ФормаМножественногоЧисла(
			НСтр("ru = 'год'"),
			НСтр("ru = 'года'"),
			НСтр("ru = 'лет'"),
			ЧислоЛет));
	КонецЕсли;
	Если ЧислоМесяцев > 0 Тогда
		Массив.Добавить(Формат(ЧислоМесяцев, "ЧГ="));
		Массив.Добавить(ПерсонифицированныйУчет.ФормаМножественногоЧисла(
			НСтр("ru = 'месяц'"),
			НСтр("ru = 'месяца'"),
			НСтр("ru = 'месяцев'"),
			ЧислоМесяцев));
	КонецЕсли;
	Возврат СтрСоединить(Массив, " ");
КонецФункции

Функция ПредставлениеНазначенияПособия(ВыборкаДляШапки)
	Если Не ВыборкаДляШапки.НазначитьПособие Тогда
		Возврат НСтр("ru = 'Пособие не начислялось.'");
	КонецЕсли;
	
	ДнейВПолномРазмере 	= ВыборкаДляШапки.ДнейВПолномРазмере;
	ДнейПо50процентов 	= ВыборкаДляШапки.ДнейПо50процентов;
	ПроцентОплаты 		= ВыборкаДляШапки.ПроцентОплаты;
	
	Если Не ЗначениеЗаполнено(ДнейПо50процентов) Тогда
		Представление = НСтр("ru = 'Назначено пособие [НаименованиеПособия] в размере [ПроцентОплаты]% за [ДнейВПолномРазмере]'");
	ИначеЕсли Не ЗначениеЗаполнено(ДнейВПолномРазмере) Тогда
		Представление = НСтр("ru = 'Назначено пособие [НаименованиеПособия] в размере 50% за [ДнейПо50процентов]'");
	Иначе
		Представление = НСтр("ru = 'Назначено пособие [НаименованиеПособия] в размере [ПроцентОплаты]% за [ДнейВПолномРазмере] и 50% за [ДнейПо50процентов]'");
	КонецЕсли;
	
	Представление = СтрЗаменить(Представление, "[НаименованиеПособия]", ПричинаНетрудоспособностиСтрокой(ВыборкаДляШапки.ПричинаНетрудоспособности));
	Представление = СтрЗаменить(Представление, "[ПроцентОплаты]", ПроцентОплаты);
	Представление = СтрЗаменить(Представление, "[ДнейВПолномРазмере]", Формат(ДнейВПолномРазмере, "ЧН=-; ЧГ=") + ФормаМножественногоЧислаДней(ДнейВПолномРазмере));
	Представление = СтрЗаменить(Представление, "[ДнейПо50процентов]", Формат(ДнейПо50процентов, "ЧН=-; ЧГ=") + ФормаМножественногоЧислаДней(ДнейПо50процентов));
	
	Возврат Представление;
КонецФункции

Функция ПричинаНетрудоспособностиСтрокой(ПричинаНетрудоспособности)
	
	ПричинаНетрудоспособностиСтрокой = НСтр("ru = 'по временной нетрудоспособности'");
	
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		ПричинаНетрудоспособностиСтрокой = НСтр("ru = 'по беременности и родам'");
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		ПричинаНетрудоспособностиСтрокой = НСтр("ru = 'по уходу за больным ребенком'");
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
		ПричинаНетрудоспособностиСтрокой = НСтр("ru = 'по уходу за больным членом семьи'");
	КонецЕсли;
	
	Возврат ПричинаНетрудоспособностиСтрокой;
	
КонецФункции

Функция ТребуетсяВыводРайонногоКоэффициента(ВыборкаДляШапки)
	
	Возврат (ВыборкаДляШапки.СреднийДневнойЗаработок < ВыборкаДляШапки.МинимальныйСреднедневнойЗаработок
		Или ВыборкаДляШапки.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ
		Или ВыборкаДляШапки.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты
		Или ЗначениеЗаполнено(ВыборкаДляШапки.ДатаНарушенияРежима))
		И ВыборкаДляШапки.РайонныйКоэффициентРФнаНачалоСобытия > 1;
		
КонецФункции

Функция ЭтоПособиеПоМатеринству(ВыборкаДляШапки)
	
	ДатаОтдельногоРасчетаПособийПоМатеринству = УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаОтдельногоРасчетаПособийПоМатеринству();
		
	Возврат ВыборкаДляШапки.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
		И ВыборкаДляШапки.ДатаНачалаСобытия >= ДатаОтдельногоРасчетаПособийПоМатеринству
		И ВыборкаДляШапки.ПериодРегистрации >= ДатаОтдельногоРасчетаПособийПоМатеринству;
		
КонецФункции

Функция РазмерПособияВПроцентах(ВыборкаДляШапки, ВыборкаНачисленийПоДокументу)
	
	РазмерПособияВПроцентах = ВыборкаДляШапки.ПроцентОплаты;
	
	Если ВыборкаДляШапки.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
		И ЗначениеЗаполнено(ВыборкаДляШапки.ДатаНачалаПоловиннойОплаты)
		И ВыборкаНачисленийПоДокументу.ПериодДействияНачало >= ВыборкаДляШапки.ДатаНачалаПоловиннойОплаты Тогда
		РазмерПособияВПроцентах = 50;
	КонецЕсли;
	
	Возврат РазмерПособияВПроцентах;
	
КонецФункции

Функция ФормаМножественногоЧислаДней(КоличествоДней)
	
	Возврат ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru = ' календарный день'"), НСтр("ru = ' календарных дня'"), НСтр("ru = ' календарных дней'"), КоличествоДней);
	
КонецФункции

Функция ПредставлениеРодственнойСвязи(КодРодственнойСвязи)
	
	Если КодРодственнойСвязи = "38" Тогда
		Возврат НСтр("ru = '38 (мать)'");
		
	ИначеЕсли КодРодственнойСвязи = "39" Тогда
		Возврат НСтр("ru = '39 (отец)'");
		
	ИначеЕсли КодРодственнойСвязи = "40" Тогда
		Возврат НСтр("ru = '40 (опекун)'");
		
	ИначеЕсли КодРодственнойСвязи = "41" Тогда
		Возврат НСтр("ru = '41 (попечитель)'");
		
	ИначеЕсли КодРодственнойСвязи = "42" Тогда
		Возврат НСтр("ru = '42 (иной родственник)'");
		
	Иначе
		Возврат КодРодственнойСвязи;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПФ_MXL_ЛистокНетрудоспособностиСРасчетомПособия

Процедура ПриПечатиЛисткаНетрудоспособностиСРасчетомПособия(КонтекстПечати)
	УстановитьПоляПечати(КонтекстПечати.ТабличныйДокумент, 0, 0, 0, 0);
	
	ДанныеДляПечатиРасчетаПособия = ДанныеДляПечатиРасчетаПособия(КонтекстПечати.МассивОбъектов, 0);
	ВыборкаДляШапки               = ДанныеДляПечатиРасчетаПособия.ВыборкаДляШапки;
	КадровыеДанныеСотрудников     = ДанныеДляПечатиРасчетаПособия.КадровыеДанныеСотрудников;
	
	Пока ВыборкаДляШапки.Следующий() Цикл
		Если ВыборкаДляШапки.РасчетПоПравилам2010Года Тогда
			Продолжить;
		КонецЕсли;
		ПередНачаломПечатиОчередногоДокумента(КонтекстПечати);
		
		ВывестиШапкуЛисткаНетрудоспособностиИРасчетаПособия(КонтекстПечати, ВыборкаДляШапки, КадровыеДанныеСотрудников);
		
		КонтекстПечати.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ВывестиТаблицыРасчетаПособия(КонтекстПечати, ВыборкаДляШапки, ДанныеДляПечатиРасчетаПособия);
		
		ПослеОкончанияПечатиОчередногоДокумента(КонтекстПечати, ВыборкаДляШапки.Ссылка);
	КонецЦикла;
	
	КонтекстПечати.ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = "[&НомерСтраницы]";
	КонтекстПечати.ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
КонецПроцедуры

#КонецОбласти

#Область ПФ_MXL_ДоплатаЗаДниНетрудоспособности

Процедура ПриПечатиДоплатыЗаДниНетрудоспособности(КонтекстПечати)
	// Определение локальных переменных.
	ТабличныйДокумент = КонтекстПечати.ТабличныйДокумент;
	Макет             = КонтекстПечати.Макет;
	
	ДанныеДляПечатиРасчетаПособия = ДанныеДляПечатиДоплатыЗаДниНетрудоспособности(КонтекстПечати.МассивОбъектов);
	ДанныеЛН                      = ДанныеДляПечатиРасчетаПособия.ДанныеЛН;
	КадровыеДанныеСотрудников     = ДанныеДляПечатиРасчетаПособия.КадровыеДанныеСотрудников;
	
	Пока ДанныеЛН.Следующий() Цикл
		
		Если НЕ ДанныеЛН.ДоплачиватьДоСреднегоЗаработка Тогда
			ТекстСообщения = НСтр("ru = '%1: Доплата за дни временной нетрудоспособности не производится.'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеЛН.Ссылка));
			Продолжить;
		КонецЕсли;
		
		ПередНачаломПечатиОчередногоДокумента(КонтекстПечати);
		
		СекцияПриказ = Макет.ПолучитьОбласть("Приказ");
		
		ЗаполняемыеСвойства = "НаименованиеОрганизации,ПроцентДоплаты,НомерДокумента,ДатаДокумента,НомерЛН,ДатаНачала,ДатаОкончания,ДатаНачалаОплаты,ДатаОкончанияОплаты,РуководительРасшифровкаПодписи,ДолжностьРуководителя";
		ЗаполнитьЗначенияСвойств(СекцияПриказ.Параметры, ДанныеЛН, ЗаполняемыеСвойства);
		ФорматнаяСтрокаДаты = "ДЛФ=D";
		СекцияПриказ.Параметры.НаименованиеОрганизации 	= СокрЛП(СекцияПриказ.Параметры.НаименованиеОрганизации);
		СекцияПриказ.Параметры.ДатаДокумента 			= Формат(СекцияПриказ.Параметры.ДатаДокумента, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаНачала 				= Формат(СекцияПриказ.Параметры.ДатаНачала, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаОкончания 			= Формат(СекцияПриказ.Параметры.ДатаОкончания, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаНачалаОплаты 		= Формат(СекцияПриказ.Параметры.ДатаНачалаОплаты, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаОкончанияОплаты 		= Формат(СекцияПриказ.Параметры.ДатаОкончанияОплаты, ФорматнаяСтрокаДаты);
		
		ЗаполняемыеСвойства = "ФамилияИО,Подразделение,Должность,ТабельныйНомер";
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(ДанныеЛН.Сотрудник);
		ЗаполнитьЗначенияСвойств(СекцияПриказ.Параметры, КадровыеДанныеСотрудника, ЗаполняемыеСвойства);
		
		ФамилияИО = КадровыеДанныеСотрудника.ФамилияИО;
		ФизическиеЛицаЗарплатаКадры.Просклонять(ФамилияИО, 2, ФамилияИО, КадровыеДанныеСотрудника.Пол, КадровыеДанныеСотрудника.ФизическоеЛицо);
		СекцияПриказ.Параметры.ФамилияИО = ФамилияИО;
		
		СекцияПриказ.Параметры.СотрудникРасшифровкаПодписи = КадровыеДанныеСотрудника.ИОФамилия;
		
		ТабличныйДокумент.Вывести(СекцияПриказ);
		
		ПослеОкончанияПечатиОчередногоДокумента(КонтекстПечати, ДанныеЛН.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляПечатиДоплатыЗаДниНетрудоспособности(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныеЛисты.Ссылка,
	|	БольничныеЛисты.Руководитель,
	|	БольничныеЛисты.ДатаНачала КАК Дата
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныеЛисты
	|ГДЕ
	|	БольничныеЛисты.Ссылка В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Руководитель"), "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныеЛисты.Ссылка,
	|	БольничныеЛисты.Сотрудник,
	|	БольничныеЛисты.ФизическоеЛицо,
	|	БольничныеЛисты.ПроцентДоплатыЗаДниНетрудоспособности КАК ПроцентДоплаты,
	|	БольничныеЛисты.ДоплачиватьДоСреднегоЗаработка,
	|	БольничныеЛисты.Номер КАК НомерДокумента,
	|	БольничныеЛисты.Дата КАК ДатаДокумента,
	|	БольничныеЛисты.НомерЛисткаНетрудоспособности КАК НомерЛН,
	|	БольничныеЛисты.ДатаНачала,
	|	БольничныеЛисты.ДатаОкончания,
	|	БольничныеЛисты.ДатаНачалаОплаты,
	|	БольничныеЛисты.ДатаОкончанияОплаты,
	|	ВЫБОР
	|		КОГДА ОрганизацияСправочник.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ОрганизацияСправочник.Наименование
	|		ИНАЧЕ ОрганизацияСправочник.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
	|	БольничныеЛисты.ДолжностьРуководителя
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныеЛисты
	|		ПО ВТДанныеДокументов.Ссылка = БольничныеЛисты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
	|		ПО (БольничныеЛисты.Ссылка = ФИООтветственныхЛиц.Ссылка)
	|			И (БольничныеЛисты.ДатаНачала = ФИООтветственныхЛиц.Дата)
	|			И (БольничныеЛисты.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОрганизацияСправочник
	|		ПО (БольничныеЛисты.Организация = ОрганизацияСправочник.Ссылка)";
	
	Результат = Запрос.Выполнить();             
	
	СписокСотрудников = Результат.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, "ФамилияИО,ИОФамилия,Подразделение,Должность,ТабельныйНомер,Пол,ФИОПолные");
	
	Возврат Новый Структура("ДанныеЛН, КадровыеДанныеСотрудников", Результат.Выбрать(), КадровыеДанныеСотрудников);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДанныеДляРасчетаСреднегоЗаработка

// Возвращает описание документов с полями ПараметрыРасчета и ДанныеРасчетаСреднего.
// 	ПараметрыРасчета - см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС()
// 	ДанныеРасчетаСреднего - см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС.
//
// Параметры:
//	 МассивСсылок 		- массив ссылок на документ БольничныйЛист, по которым получаем данные.
// 
// Возвращаемое значение: Соответствие, ключ - ссылка на больничный лист, значение - Структура("ПараметрыРасчета,ДанныеРасчетаСреднего").
//
Функция ДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МассивСсылок) Экспорт
	ДанныеДокументов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УчетПособийСоциальногоСтрахования.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Запрос.МенеджерВременныхТаблиц, МассивСсылок);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокументов.Сотрудник КАК Сотрудник,
	|	ДанныеДокументов.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ДанныеДокументов.ПрименятьПредельнуюВеличину КАК ПрименятьПредельнуюВеличину,
	|	ДанныеДокументов.ИспользоватьДниБолезниУходаЗаДетьми КАК ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаПервыйГод КАК ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаВторойГод КАК ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ДанныеДокументов.УчитыватьЗаработокПредыдущихСтрахователей КАК УчитыватьЗаработокПредыдущихСтрахователей,
	|	ДанныеДокументов.РасчетПоПравилам2010Года КАК РасчетПоПравилам2010Года,
	|	ДанныеДокументов.ДоляНеполногоВремени КАК ДоляНеполногоВремени,
	|	ДанныеДокументов.РайонныйКоэффициентРФ КАК РайонныйКоэффициентРФ,
	|	ДанныеДокументов.МинимальныйРазмерОплатыТрудаРФ КАК МинимальныйРазмерОплатыТрудаРФ
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС КАК ДанныеДокументов";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетПособийСоциальногоСтрахования.ТаблицыДанныхСреднегоЗаработкаФСС("БольничныйЛист", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
			ЗаполнитьЗначенияСвойств(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);
			
			ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, ТаблицыДанныхОСреднем);
			
			ДанныеДокументов.Вставить(Выборка.Ссылка, ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
КонецФункции

#КонецОбласти

Процедура СоздатьВТДанныеБольничныхЛистов(МенеджерВременныхТаблиц, ИмяВТОтборов = "ВТБольничныеЛисты", ИмяПоляСодержащегоСсылку = "Ссылка") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТБольничныеЛисты.Ссылка,
	|	БольничныйЛист.ПрименятьЛьготыПриНачисленииПособия КАК ВыплатаЗаСчетФедеральногоБюджета,
	|	БольничныйЛист.ДатаНачала,
	|	БольничныйЛист.ДатаОкончания,
	|	БольничныйЛист.УсловияИсчисленияКод1,
	|	БольничныйЛист.УсловияИсчисленияКод2,
	|	БольничныйЛист.УсловияИсчисленияКод3,
	|	БольничныйЛист.СтажЛет КАК СтажБезНестраховыхПериодовЛет,
	|	БольничныйЛист.СтажМесяцев КАК СтажБезНестраховыхПериодовСтажМесяцев,
	|	БольничныйЛист.СтажРасширенныйЛет КАК ЛетСтажа,
	|	БольничныйЛист.СтажРасширенныйМесяцев КАК МесяцевСтажа,
	|	ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка) КАК ИсправленныйДокумент
	|ПОМЕСТИТЬ ВТРеквизитыБольничныхЛистов
	|ИЗ
	|	#ВТБольничныеЛисты# КАК ВТБольничныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО ВТБольничныеЛисты.#ИмяПоляСодержащегоСсылку# = БольничныйЛист.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(НачисленияБольничныйЛист.Результат) КАК ЗаСчетФСС,
	|	ДанныеДокументов.Ссылка
	|ПОМЕСТИТЬ ВТНачислено
	|ИЗ
	|	ВТРеквизитыБольничныхЛистов КАК ДанныеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.Начисления КАК НачисленияБольничныйЛист
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления
	|			ПО (ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста)
	|					ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание)
	|					ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве))
	|				И НачисленияБольничныйЛист.Начисление = ПланВидовРасчетаНачисления.Ссылка
	|		ПО ДанныеДокументов.ИсправленныйДокумент = НачисленияБольничныйЛист.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРеквизитыБольничныхЛистов.Ссылка,
	|	ВТРеквизитыБольничныхЛистов.ВыплатаЗаСчетФедеральногоБюджета,
	|	ВТРеквизитыБольничныхЛистов.ДатаНачала КАК ДатаНачалаОплаты,
	|	ВТРеквизитыБольничныхЛистов.ДатаОкончания КАК ДатаОкончанияОплаты,
	|	ВТРеквизитыБольничныхЛистов.УсловияИсчисленияКод1,
	|	ВТРеквизитыБольничныхЛистов.УсловияИсчисленияКод2,
	|	ВТРеквизитыБольничныхЛистов.УсловияИсчисленияКод3,
	|	ВТРеквизитыБольничныхЛистов.СтажБезНестраховыхПериодовЛет,
	|	ВТРеквизитыБольничныхЛистов.СтажБезНестраховыхПериодовСтажМесяцев,
	|	ВТРеквизитыБольничныхЛистов.ЛетСтажа,
	|	ВТРеквизитыБольничныхЛистов.МесяцевСтажа,
	|	ВТРеквизитыБольничныхЛистов.ИсправленныйДокумент,
	|	ЕСТЬNULL(ВТНачислено.ЗаСчетФСС, 0) КАК ЗаСчетФСС
	|ПОМЕСТИТЬ ВТДанныеБольничныхЛистов
	|ИЗ
	|	ВТРеквизитыБольничныхЛистов КАК ВТРеквизитыБольничныхЛистов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислено КАК ВТНачислено
	|		ПО ВТРеквизитыБольничныхЛистов.Ссылка = ВТНачислено.Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТБольничныеЛисты#", ИмяВТОтборов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяПоляСодержащегоСсылку#", ИмяПоляСодержащегоСсылку);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолныеПраваНаДокумент() Экспорт
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачала,
	|	БольничныйЛист.ДатаОкончания,
	|	БольничныйЛист.ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаОкончанияОплаты,
	|	БольничныйЛист.ВидОплатыПособия.ВидСтажаПФР2014 КАК ВидСтажаНаПериодСОплатой,
	|	БольничныйЛист.ВидНеоплачиваемогоВремени.ВидСтажаПФР2014 КАК ВидСтажаНаПериодБезОплаты,
	|	БольничныйЛист.Ссылка
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
		
		ВидСтажаНаПериодБезОплаты = Выборка.ВидСтажаНаПериодБезОплаты;
		Если (Выборка.ДатаНачала < Выборка.ДатаНачалаОплаты
			Или Выборка.ДатаНачалаОплаты = '00010101')
			И ЗначениеЗаполнено(ВидСтажаНаПериодБезОплаты) Тогда
			
			ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
			ОписаниеПериода.Сотрудник = Выборка.Сотрудник;
			ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаНачала;
			ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
			ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
			
			Если Выборка.ДатаНачалаОплаты = '00010101' Тогда
				ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
			Иначе
				ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаНачалаОплаты - 86400;
			КонецЕсли;
			
			РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
													 					
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", ВидСтажаНаПериодБезОплаты);
		КонецЕсли;
		
		Если Выборка.ДатаНачалаОплаты <> '00010101' Тогда
			ВидСтажаНаПериодСОплатой = Выборка.ВидСтажаНаПериодСОплатой;

			ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
			ОписаниеПериода.Сотрудник = Выборка.Сотрудник;
			ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаНачалаОплаты;
			ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончанияОплаты;
			ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.Болезнь;

			РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
														 					
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", ВидСтажаНаПериодСОплатой);
		КонецЕсли;
		
		Если Выборка.ДатаОкончания > Выборка.ДатаОкончанияОплаты
			И Выборка.ДатаОкончанияОплаты <> '00010101'
			И ЗначениеЗаполнено(ВидСтажаНаПериодБезОплаты) Тогда
			
			ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
			ОписаниеПериода.Сотрудник = Выборка.Сотрудник;
			ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаОкончанияОплаты + 86400;
			ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
			ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
			
			РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
									 					
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", ВидСтажаНаПериодБезОплаты);
		КонецЕсли;
		
	КонецЦикла;

	Возврат ДанныеДляРегистрацииВУчете;
														
КонецФункции

#Область ПериодыУходаЗаДетьми

Процедура ЗаполнитьДанныеУчетаПериодовУходаЗаБольнымиДетьми(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	ПериодыУходаЗаРодственниками = УчетПособийСоциальногоСтрахованияРасширенный.ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПериодыУходаЗаБольнымиРодственниками.Период,
	|	ПериодыУходаЗаБольнымиРодственниками.ФизическоеЛицо,
	|	ПериодыУходаЗаБольнымиРодственниками.Родственник,
	|	ПериодыУходаЗаБольнымиРодственниками.СлучайУходаЗаБольнымРебенком,
	|	-ПериодыУходаЗаБольнымиРодственниками.КоличествоДней КАК КоличествоДней,
	|	-ПериодыУходаЗаБольнымиРодственниками.ОплаченоДней КАК ОплаченоДней,
	|	ПериодыУходаЗаБольнымиРодственниками.НачалоПериода,
	|	ПериодыУходаЗаБольнымиРодственниками.ОкончаниеПериода,
	|	ПериодыУходаЗаБольнымиРодственниками.НачалоПериодаОплаты,
	|	ПериодыУходаЗаБольнымиРодственниками.ОкончаниеПериодаОплаты
	|ИЗ
	|	РегистрНакопления.ПериодыУходаЗаБольнымиРодственниками КАК ПериодыУходаЗаБольнымиРодственниками
	|ГДЕ
	|	ПериодыУходаЗаБольнымиРодственниками.Регистратор = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.ИсправленныйДокумент);
	
	ДвиженияИсправленногоДокумента = Запрос.Выполнить().Выбрать();
	
	Пока ДвиженияИсправленногоДокумента.Следующий() Цикл
		
		НоваяСтрока = ПериодыУходаЗаРодственниками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДвиженияИсправленногоДокумента);
		
	КонецЦикла;
	
	Если Не Перечисления.ПричиныНетрудоспособности.ЭтоУходЗаРодственником(РеквизитыДляПроведения.ПричинаНетрудоспособности) Тогда
		
		Если ПериодыУходаЗаРодственниками.Количество() > 0 Тогда
			ДанныеДляПроведения.Вставить("ПериодыУходаЗаРодственниками", ПериодыУходаЗаРодственниками);
		КонецЕсли;
		
		Возврат;

	КонецЕсли; 
	
	Если РеквизитыДляПроведения.НазначитьПособие Тогда
		ДатаНачалаОплаты = РеквизитыДляПроведения.ДатаНачалаОплаты;
		ДатаОкончанияОплаты = РеквизитыДляПроведения.ДатаОкончанияОплаты;
	Иначе
		ДатаНачалаОплаты = Неопределено;
		ДатаОкончанияОплаты = Неопределено;
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		СлучайУходаЗаБольнымРебенком = РеквизитыДляПроведения.СлучайУходаЗаБольнымРебенком;
	Иначе
		СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДляПроведения.РодственникЗаКоторымОсуществляетсяУход1) Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДатаНачалаРодственник1), РеквизитыДляПроведения.ДатаНачалаРодственник1, РеквизитыДляПроведения.ДатаНачала);
		ДатаОкончания = ?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДатаОкончанияРодственник1), РеквизитыДляПроведения.ДатаОкончанияРодственник1, РеквизитыДляПроведения.ДатаОкончания);
		ДобавитьПериодыУходаЗаРодственником(ПериодыУходаЗаРодственниками, РеквизитыДляПроведения.ФизическоеЛицо, СлучайУходаЗаБольнымРебенком, РеквизитыДляПроведения.РодственникЗаКоторымОсуществляетсяУход1, ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДляПроведения.РодственникЗаКоторымОсуществляетсяУход2) Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДатаНачалаРодственник2), РеквизитыДляПроведения.ДатаНачалаРодственник2, РеквизитыДляПроведения.ДатаНачала);
		ДатаОкончания = ?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДатаОкончанияРодственник2), РеквизитыДляПроведения.ДатаОкончанияРодственник2, РеквизитыДляПроведения.ДатаОкончания);
		ДобавитьПериодыУходаЗаРодственником(ПериодыУходаЗаРодственниками, РеквизитыДляПроведения.ФизическоеЛицо, СлучайУходаЗаБольнымРебенком, РеквизитыДляПроведения.РодственникЗаКоторымОсуществляетсяУход2, ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты);
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПериодыУходаЗаРодственниками", ПериодыУходаЗаРодственниками);
	
КонецПроцедуры

Процедура ДобавитьПериодыУходаЗаРодственником(ПериодыУходаЗаДетьми, ФизическоеЛицо, СлучайУходаЗаБольнымРебенком, Родственник, ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты)
	
	ОписаниеПериодовУходаЗаРодственником = ОписаниеПериодовУходаЗаРодственником(ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты);
	
	Для каждого ОписаниеПериода Из ОписаниеПериодовУходаЗаРодственником Цикл
		
		ПериодУхода = ПериодыУходаЗаДетьми.Добавить();
		ПериодУхода.ФизическоеЛицо = ФизическоеЛицо;
		ПериодУхода.Родственник = Родственник;
		ПериодУхода.СлучайУходаЗаБольнымРебенком = СлучайУходаЗаБольнымРебенком;
		
		ПериодУхода.Период = ОписаниеПериода.НачалоПериода;
		ПериодУхода.КоличествоДней = ОписаниеПериода.КоличествоДней;
		ПериодУхода.ОплаченоДней = ОписаниеПериода.ОплаченоДней;
		ПериодУхода.НачалоПериода = ОписаниеПериода.НачалоПериода;
		ПериодУхода.ОкончаниеПериода = ОписаниеПериода.ОкончаниеПериода;
		ПериодУхода.НачалоПериодаОплаты = ОписаниеПериода.НачалоПериодаОплаты;
		ПериодУхода.ОкончаниеПериодаОплаты = ОписаниеПериода.ОкончаниеПериодаОплаты;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеПериодовУходаЗаРодственником(ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты)
	
	ОписаниеПериодовУходаЗаРодственником = Новый Массив;
	
	Если Год(ДатаНачала) = Год(ДатаОкончания) Тогда	
		ОписаниеПериода = ОписаниеПериодаУходаЗаБольнымРодственником(ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты);
		ОписаниеПериодовУходаЗаРодственником.Добавить(ОписаниеПериода);
	Иначе
		
		НачалоПериодаПервогоГода = НачалоДня(ДатаНачала);
		ОкончаниеПериодаПервогоГода = КонецГода(ДатаНачала);
		
		ОписаниеПериода = ОписаниеПериодаУходаЗаБольнымРодственником(НачалоПериодаПервогоГода, ОкончаниеПериодаПервогоГода, ДатаНачалаОплаты, ДатаОкончанияОплаты);
		ОписаниеПериодовУходаЗаРодственником.Добавить(ОписаниеПериода);
		
		НачалоПериодаВторогоГода = НачалоГода(ДатаОкончания);
		ОкончаниеПериодаВторогоГода = КонецДня(ДатаОкончания);
		
		ОписаниеПериода = ОписаниеПериодаУходаЗаБольнымРодственником(НачалоПериодаВторогоГода, ОкончаниеПериодаВторогоГода, ДатаНачалаОплаты, ДатаОкончанияОплаты);
		ОписаниеПериодовУходаЗаРодственником.Добавить(ОписаниеПериода);
		
	КонецЕсли;
	
	Возврат ОписаниеПериодовУходаЗаРодственником;
	
КонецФункции

Функция ОписаниеПериодаУходаЗаБольнымРодственником(Знач НачалоПериода, Знач ОкончаниеПериода, Знач НачалоПериодаОплаты, Знач ОкончаниеПериодаОплаты)
	
	ДлинаСуток = УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
	ПособиеОплачивается = ЗначениеЗаполнено(НачалоПериодаОплаты) И ЗначениеЗаполнено(ОкончаниеПериодаОплаты);
	
	ОписаниеПериода = Новый Структура("НачалоПериода,ОкончаниеПериода,НачалоПериодаОплаты,ОкончаниеПериодаОплаты,ОплаченоДней,КоличествоДней");
	ОписаниеПериода.НачалоПериода = НачалоПериода;
	ОписаниеПериода.ОкончаниеПериода = ОкончаниеПериода;
	ОписаниеПериода.КоличествоДней = (КонецДня(ОкончаниеПериода) - НачалоДня(НачалоПериода) + 1)/ ДлинаСуток;
	ОписаниеПериода.НачалоПериодаОплаты = '00010101';
	ОписаниеПериода.ОкончаниеПериодаОплаты = '00010101';
	ОписаниеПериода.ОплаченоДней = 0;
	
	Если ПособиеОплачивается Тогда
		НачалоПериодаОплаты = Макс(НачалоПериодаОплаты, НачалоПериода);
		ОкончаниеПериодаОплаты = Мин(ОкончаниеПериодаОплаты, ОкончаниеПериода);
		Если НачалоПериодаОплаты <= ОкончаниеПериодаОплаты Тогда
			ОписаниеПериода.НачалоПериодаОплаты = НачалоПериодаОплаты;
			ОписаниеПериода.ОкончаниеПериодаОплаты = ОкончаниеПериодаОплаты;
			ОписаниеПериода.ОплаченоДней = (КонецДня(ОкончаниеПериодаОплаты) - НачалоДня(НачалоПериодаОплаты) + 1)/ ДлинаСуток;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеПериода;
	
КонецФункции

#КонецОбласти

#Область НачальноеЗаполнениеИОбновлениеИБ

Процедура ЗаполнитьИсходныеДанныеПерерасчетов(ПараметрыОбновления) Экспорт

	ПараметрыЗаполнения = ПерерасчетЗарплаты.ПараметрыЗаполненияИсходныхДанныхПерерасчетов();
	ПерерасчетЗарплаты.ЗаполнитьИсходныеДанныеПерерасчетов(ПараметрыОбновления, Метаданные.Документы.БольничныйЛист, ПараметрыЗаполнения);

КонецПроцедуры

#КонецОбласти

#Область ЭЛН

// Возвращает соответствие, в котором ключ - имя поля больничного, а значение - имя поля ЭЛН.
Функция СоответствиеПолейЭЛН() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("НомерПервичногоЛисткаНетрудоспособности",      "PREV_LN_CODE");
	СоответствиеПолей.Вставить("ПредоставленДубликатЛисткаНетрудоспособности", "DUPLICATE_FLAG");
	СоответствиеПолей.Вставить("ДатаВыдачиЛисткаНетрудоспособности",           "LN_DATE");
	
	СоответствиеПолей.Вставить("НаименованиеМедицинскойОрганизации", "LPU_NAME");
	СоответствиеПолей.Вставить("АдресМедицинскойОрганизации",        "LPU_ADDRESS");
	СоответствиеПолей.Вставить("ОГРНМедицинскойОрганизации",         "LPU_OGRN");
	
	СоответствиеПолей.Вставить("КодПричиныНетрудоспособности",               "REASON1");
	СоответствиеПолей.Вставить("ДополнительныйКодПричиныНетрудоспособности", "REASON2");
	СоответствиеПолей.Вставить("ВторойКодПричиныНетрудоспособности",         "REASON3");
	
	СоответствиеПолей.Вставить("НомерЛисткаПоОсновномуМестуРаботы",          "PARENT_CODE");
	СоответствиеПолей.Вставить("ДатаИзмененияКодаПричиныНетрудоспособности", "DATE1");
	СоответствиеПолей.Вставить("ДатаОкончанияПутевки",                       "DATE2");
	
	СоответствиеПолей.Вставить("НомерПутевки",   "VOUCHER_NO");
	СоответствиеПолей.Вставить("ОГРН_Санатория", "VOUCHER_OGRN");
	
	СоответствиеПолей.Вставить("ПоУходуФИО1",               "SERV1_FIO");
	СоответствиеПолей.Вставить("ПоУходуРодственнаяСвязь1",  "SERV1_RELATION_CODE");
	СоответствиеПолей.Вставить("ПоУходуВозрастЛет1",        "SERV1_AGE");
	СоответствиеПолей.Вставить("ПоУходуВозрастМесяцев1",    "SERV1_MM");
	
	СоответствиеПолей.Вставить("ПоУходуФИО2",               "SERV2_FIO");
	СоответствиеПолей.Вставить("ПоУходуРодственнаяСвязь2",  "SERV2_RELATION_CODE");
	СоответствиеПолей.Вставить("ПоУходуВозрастЛет2",        "SERV2_AGE");
	СоответствиеПолей.Вставить("ПоУходуВозрастМесяцев2",    "SERV2_MM");
	
	СоответствиеПолей.Вставить("ПериодНахожденияВСтационареСРебенкомС",  "HOSPITAL_DT1");
	СоответствиеПолей.Вставить("ПериодНахожденияВСтационареСРебенкомПо", "HOSPITAL_DT2");
	
	СоответствиеПолей.Вставить("ДатаНаправленияВБюроМСЭ",      "MSE_DT1");
	СоответствиеПолей.Вставить("ДатаРегистрацииДокументовМСЭ", "MSE_DT2");
	СоответствиеПолей.Вставить("ДатаОсвидетельствованияМСЭ",   "MSE_DT3");
	СоответствиеПолей.Вставить("ГруппаИнвалидности",           "MSE_INVALID_GROUP");
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Вызывается после загрузки ЭЛН.
Процедура ПослеЗагрузкиЭЛН(ДокументОбъект, ДанныеИзСервиса) Экспорт
	
	ЗаполнитьФлагПостановкиНаУчетВРанниеСрокиБеременности(ДокументОбъект, ДанныеИзСервиса);
	ЗаполнитьМедицинскуюОрганизацию(ДокументОбъект);
	ЗаполнитьРодственников(ДокументОбъект);
	ЗаполнитьДаты(ДокументОбъект);
	ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(ДокументОбъект);
	
КонецПроцедуры

// Заполнение поля ПоставленаНаУчетВРанниеСрокиБеременности.
Процедура ЗаполнитьФлагПостановкиНаУчетВРанниеСрокиБеременности(ДокументОбъект, ДанныеИзСервиса)
	ФлагПостановки = ОбменЛисткамиНетрудоспособностиФСС.ЗначениеИзСтрокиXMLПоТипу(ДанныеИзСервиса.PREGN12W_FLAG, Тип("Число"));
	Если ФлагПостановки = 1 Тогда
		ДокументОбъект.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена;
	ИначеЕсли ФлагПостановки = 0 Тогда
		ДокументОбъект.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеПоставлена;
	Иначе
		ДокументОбъект.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеИзвестно;
	КонецЕсли;
КонецПроцедуры

// Заполнение медицинской организации.
Процедура ЗаполнитьМедицинскуюОрганизацию(Документ)
	Если Не ЗначениеЗаполнено(Документ.ОГРНМедицинскойОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МедицинскиеОрганизации.Ссылка
	|ИЗ
	|	Справочник.МедицинскиеОрганизации КАК МедицинскиеОрганизации
	|ГДЕ
	|	МедицинскиеОрганизации.ОГРН = &ОГРН";
	Запрос.УстановитьПараметр("ОГРН", Документ.ОГРНМедицинскойОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Документ.МедицинскаяОрганизация = Выборка.Ссылка;
	Иначе
		МедОрганизация = Справочники.МедицинскиеОрганизации.СоздатьЭлемент();
		МедОрганизация.Наименование = Документ.НаименованиеМедицинскойОрганизации;
		МедОрганизация.ОГРН         = Документ.ОГРНМедицинскойОрганизации;
		МедОрганизация.Адрес        = Документ.АдресМедицинскойОрганизации;
		МедОрганизация.Записать();
		Документ.МедицинскаяОрганизация = МедОрганизация.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение родственников.
Процедура ЗаполнитьРодственников(Документ)
	Если Не ЗначениеЗаполнено(Документ.ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	НомераИФИОРодственников = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РодственникиФизическихЛиц.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РодственникиФизическихЛиц.НаименованиеСлужебное ПОДОБНО &НаименованиеСлужебное1
	|			ТОГДА 1
	|		КОГДА РодственникиФизическихЛиц.НаименованиеСлужебное ПОДОБНО &НаименованиеСлужебное2
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерРодственника,
	|	РодственникиФизическихЛиц.СтепеньРодства КАК СтепеньРодства,
	|	РодственникиФизическихЛиц.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
	|ГДЕ
	|	РодственникиФизическихЛиц.Владелец = &Владелец
	|	И (РодственникиФизическихЛиц.НаименованиеСлужебное ПОДОБНО &НаименованиеСлужебное1
	|			ИЛИ РодственникиФизическихЛиц.НаименованиеСлужебное ПОДОБНО &НаименованиеСлужебное2)
	|	И РодственникиФизическихЛиц.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Владелец", Документ.ФизическоеЛицо);
	
	Для НомерРодственника = 1 По 2 Цикл
		ФИО = "";
		Если ЗначениеЗаполнено(Документ["ПоУходуФИО"+НомерРодственника]) Тогда
			МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Документ["ПоУходуФИО"+НомерРодственника]);
			Для Каждого Инициал Из МассивСлов Цикл
				Если Не ПустаяСтрока(Инициал) Тогда
					ФИО = ?(ФИО = "", "", ФИО + " ") + ТРег(СокрЛП(Инициал));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ФИО = "" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РодственникиФизическихЛиц.НаименованиеСлужебное ПОДОБНО &НаименованиеСлужебное" + НомерРодственника, "ЛОЖЬ");
		Иначе
			НомераИФИОРодственников.Вставить(НомерРодственника, ФИО);
			Запрос.УстановитьПараметр("НаименованиеСлужебное" + НомерРодственника, ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(ФИО) + "%");
		КонецЕсли;
	КонецЦикла;
	
	Если НомераИФИОРодственников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого КлючИЗначение Из НомераИФИОРодственников Цикл
		РодственникиНайденныеПоФИО = Таблица.Скопировать(Новый Структура("НомерРодственника", КлючИЗначение.Ключ));
		ЗаполнитьРодственника(Документ, КлючИЗначение.Ключ, КлючИЗначение.Значение, РодственникиНайденныеПоФИО);
	КонецЦикла;
КонецПроцедуры

// Заполнение родственника.
Процедура ЗаполнитьРодственника(Документ, НомерРодственника, ФИОРодственника, РодственникиНайденныеПоФИО)
	Родственник = Неопределено;
	Количество = РодственникиНайденныеПоФИО.Количество();
	Если Количество = 0 Тогда
		
		РодственникОбъект = Справочники.РодственникиФизическихЛиц.СоздатьЭлемент();
		РодственникОбъект.Владелец              = Документ.ФизическоеЛицо;
		РодственникОбъект.Наименование          = ФИОРодственника;
		РодственникОбъект.НаименованиеСлужебное = ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(ФИОРодственника);
		РодственникОбъект.СтепеньРодства        = СтепеньРодства(ФИОРодственника, Документ["ПоУходуРодственнаяСвязь" + НомерРодственника]);
		РодственникОбъект.Записать();
		
		Родственник = РодственникОбъект.Ссылка;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлен родственник сотрудника %1. Нажмите на сообщение, чтобы заполнить степень родства и дату рождения.'"),
			ФИОРодственника);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Родственник, "1", "1");
		
	ИначеЕсли Количество = 1 Тогда
		
		Родственник = РодственникиНайденныеПоФИО[0].Ссылка;
		
	Иначе
		
		СтепеньРодства = СтепеньРодства(ФИОРодственника, Документ["ПоУходуРодственнаяСвязь" + НомерРодственника]);
		Найденные = РодственникиНайденныеПоФИО.НайтиСтроки(Новый Структура("СтепеньРодства", СтепеньРодства));
		Если Найденные.Количество() = 1 Тогда
			Родственник = Найденные[0].Ссылка;
		Иначе
			ВозрастМесяцев = Документ["ПоУходуВозрастЛет" + НомерРодственника] * 12 + Документ["ПоУходуВозрастМесяцев" + НомерРодственника];
			ОжидаемаяДатаРождения = ДобавитьМесяц(Документ.ДатаНачалаСобытия, -ВозрастМесяцев);
			МинимальнаяРазница = Неопределено;
			Для Каждого ДанныеРодственника Из РодственникиНайденныеПоФИО Цикл
				Если Не ЗначениеЗаполнено(ДанныеРодственника.ДатаРождения) Тогда
					Продолжить;
				КонецЕсли;
				Разница = (ОжидаемаяДатаРождения - ДанныеРодственника.ДатаРождения);
				Разница = ?(Разница < 0, -Разница, Разница);
				Если МинимальнаяРазница = Неопределено Или МинимальнаяРазница > Разница Тогда
					МинимальнаяРазница = Разница;
					Родственник = ДанныеРодственника.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Документ["РодственникЗаКоторымОсуществляетсяУход" + НомерРодственника] = Родственник;
КонецПроцедуры

// Определение степени родства "с" родственником по связи "от" родственника.
Функция СтепеньРодства(ФИО, СвязьОтРодственника)
	Если СвязьОтРодственника = "38" Или СвязьОтРодственника = "39" Тогда // Отец, Мать.
		Инициалы = СтрРазделить(ФИО, " ", Ложь);
		Если Инициалы.Количество() > 2 Тогда
			Инициалы.Удалить(0);
			Инициалы.Удалить(0);
			Пол = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(СтрСоединить(Инициалы, " "));
			Если Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				Возврат Справочники.СтепениРодстваФизическихЛиц.НайтиПоКоду("05"); // Сын
			ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				Возврат Справочники.СтепениРодстваФизическихЛиц.НайтиПоКоду("06"); // Дочь
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Заполнение дат оплаты и освобождения от работы.
Процедура ЗаполнитьДаты(Документ)
	
	Если ЗначениеЗаполнено(Документ.ОсвобождениеДатаНачала1) Тогда
		Документ.ДатаНачала    = Документ.ОсвобождениеДатаНачала1;
		Документ.ДатаОкончания = Документ.ОсвобождениеДатаОкончания1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.ОсвобождениеДатаНачала2)
		И ЗначениеЗаполнено(Документ.ОсвобождениеДатаОкончания2) Тогда
		Если ЗначениеЗаполнено(Документ.ДатаНачала) Тогда
			Документ.ДатаНачала = Мин(Документ.ДатаНачала, Документ.ОсвобождениеДатаНачала2);
		Иначе
			Документ.ДатаНачала = Документ.ОсвобождениеДатаНачала2;
		КонецЕсли;
		Документ.ДатаОкончания = Макс(Документ.ДатаОкончания, Документ.ОсвобождениеДатаОкончания2);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.ОсвобождениеДатаНачала3)
		И ЗначениеЗаполнено(Документ.ОсвобождениеДатаОкончания3) Тогда
		Если ЗначениеЗаполнено(Документ.ДатаНачала) Тогда
			Документ.ДатаНачала = Мин(Документ.ДатаНачала, Документ.ОсвобождениеДатаНачала3);
		Иначе
			Документ.ДатаНачала = Документ.ОсвобождениеДатаНачала3;
		КонецЕсли;
		Документ.ДатаОкончания = Макс(Документ.ДатаОкончания, Документ.ОсвобождениеДатаОкончания3);
	КонецЕсли;
	
	Документ.ДатаНачалаОплаты    = Документ.ДатаНачала;
	Документ.ДатаОкончанияОплаты = Документ.ДатаОкончания;
	
КонецПроцедуры

// Заполняет причину нетрудоспособности и случай ухода за ребенком.
Процедура ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(Документ)
	Стационар = ЗначениеЗаполнено(Документ.ПериодНахожденияВСтационареСРебенкомС);
	
	Если Документ.КодПричиныНетрудоспособности = "01"
		Или Документ.КодПричиныНетрудоспособности = "02" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "03" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Карантин;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "04"
		Или Документ.КодПричиныНетрудоспособности = "07" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "05" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "06" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Протезирование;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "08" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "09" Тогда
		
		ПоУходуВозраст1 = Документ.ПоУходуВозрастЛет1 + Окр(Документ.ПоУходуВозрастМесяцев1 / 12, 1);
		ПоУходуВозраст2 = Документ.ПоУходуВозрастЛет2 + Окр(Документ.ПоУходуВозрастМесяцев2 / 12, 1);
		
		Если ПоУходуВозраст2 > 0 И ПоУходуВозраст2 < ПоУходуВозраст1 Тогда
			НаименьшийВозрастПоУходу = ПоУходуВозраст2;
		Иначе
			НаименьшийВозрастПоУходу = ПоУходуВозраст1;
		КонецЕсли;
		
		Если НаименьшийВозрастПоУходу = 0 Тогда
			Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		ИначеЕсли НаименьшийВозрастПоУходу < 7 Тогда
			Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
			Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно);
		ИначеЕсли НаименьшийВозрастПоУходу >= 7 И НаименьшийВозрастПоУходу < 15 Тогда
			Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
			Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно);
		ИначеЕсли НаименьшийВозрастПоУходу >= 15 Тогда
			Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым;
		КонецЕсли;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "10"
		Или Документ.КодПричиныНетрудоспособности = "11" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "12" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно);
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "13" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно);
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "14" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно);
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "15" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриВИЧ;
		
	Иначе
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
	КонецЕсли;
	
КонецПроцедуры

// Получает предыдущий проведенный документ в цепочке исправлений по переданной ссылке на документ.
Функция ПредыдущийПроведенныйДокументИзЦепочкиИсправлений(БольничныйОбъект) Экспорт
	НайденныйДокумент = БольничныйОбъект.ИсправленныйДокумент;
	Если Не ЗначениеЗаполнено(НайденныйДокумент) Тогда
		Возврат Неопределено; // Цепочка прервана, проведенный документ не найден.
	КонецЕсли;
	Пока Истина Цикл
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НайденныйДокумент, "ИсправленныйДокумент, Проведен");
		Если ЗначенияРеквизитов.Проведен Тогда
			// Исправленный документ проведен.
			Возврат НайденныйДокумент;
		ИначеЕсли Не ЗначениеЗаполнено(ЗначенияРеквизитов.ИсправленныйДокумент) Тогда
			// Исправленный документ не проведен и его реквизит "ИсправленныйДокумент" не заполнен.
			Возврат Неопределено;
		Иначе
			// Исправленный документ не проведен, но у него заполнен реквизит "ИсправленныйДокумент".
			НайденныйДокумент = ЗначенияРеквизитов.ИсправленныйДокумент;
		КонецЕсли;
	КонецЦикла;
КонецФункции

#КонецОбласти

#Область ПараметрыВыбораНачислений

Функция ДополнительныеПараметрыВыбораНачислений(Документ, ПутьКРеквизиту) Экспорт
	Результат = Новый Соответствие;
	
	Если ПутьКРеквизиту = "ВидОплатыПособия" Тогда
		Категория = УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНачисленияПоПричинеНетрудоспособности(Документ.ПричинаНетрудоспособности);
	ИначеЕсли ПутьКРеквизиту = "ВидНеоплачиваемогоВремени" Тогда
		Категория = УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНеоплачиваемогоВремениПоПричинеНетрудоспособности(Документ.ПричинаНетрудоспособности);
	ИначеЕсли ПутьКРеквизиту = "ВидОплатыЗаСчетРаботодателя" Тогда
		Категория = УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНачисленияОплатаБольничногоЛистаЗаСчетРаботодателя();
	ИначеЕсли ПутьКРеквизиту = "ВидРасчетаДоплаты" Тогда
		Если Документ.ДоплачиватьДоДенежногоСодержания Тогда
			Категория = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни;
		Иначе
			Категория = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Категория);
	Возврат Результат;
КонецФункции

#КонецОбласти

Процедура ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаНачала КАК ДатаНачала,
		|	ТаблицаДокумента.ДатаОкончания КАК ДатаОкончания,
		|	ЕСТЬNULL(ТаблицаДокументаИсправления.Ссылка, ТаблицаДокументаСторнирование.Ссылка) КАК РегистраторИзмерение
		|ИЗ
		|	Документ.БольничныйЛист КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ТаблицаДокумента.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|			И (КОНЕЦПЕРИОДА(ТаблицаДокумента.ДатаНачала, ДЕНЬ) >= КадроваяИсторияСотрудников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписания
		|		ПО ТаблицаДокумента.Ссылка = ЗанятостьПозицийШтатногоРасписания.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК ТаблицаДокументаИсправления
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИспр КАК ЗанятостьПозицийШтатногоРасписанияИспр
		|			ПО ТаблицаДокументаИсправления.Ссылка = ЗанятостьПозицийШтатногоРасписанияИспр.РегистраторИзмерение
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаИсправления.ИсправленныйДокумент
		|			И (ТаблицаДокументаИсправления.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СторнированиеНачислений КАК ТаблицаДокументаСторнирование
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИспр КАК ЗанятостьПозицийШтатногоРасписанияСторнирование
		|			ПО ТаблицаДокументаСторнирование.Ссылка = ЗанятостьПозицийШтатногоРасписанияСторнирование.РегистраторИзмерение
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаСторнирование.СторнируемыйДокумент
		|			И (ТаблицаДокументаСторнирование.Проведен)
		|ГДЕ
		|	ТаблицаДокумента.Проведен
		|	И ТаблицаДокумента.ОсвобождатьСтавку
		|	И ЗанятостьПозицийШтатногоРасписания.Регистратор ЕСТЬ NULL
		|	И ЗанятостьПозицийШтатногоРасписанияИспр.РегистраторИзмерение ЕСТЬ NULL
		|	И ЗанятостьПозицийШтатногоРасписанияСторнирование.РегистраторИзмерение ЕСТЬ NULL
		|	И НЕ КадроваяИсторияСотрудников.Сотрудник ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала,
		|	Регистратор,
		|	Сотрудник";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.ЗаполнитьДвиженияПоДаннымВыборкиРегистраторов(Выборка, Ложь, ПараметрыОбновления);
	
КонецПроцедуры

Процедура ИсправитьДвиженияЗанятостьПозицийШтатногоРасписания(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ЗанятостьПозицийШтатногоРасписания.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписания
		|ГДЕ
		|	ЗанятостьПозицийШтатногоРасписания.КоличествоСтавок = 0
		|	И ЗанятостьПозицийШтатногоРасписания.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ТИПЗНАЧЕНИЯ(ЗанятостьПозицийШтатногоРасписания.Регистратор) = ТИП(Документ.БольничныйЛист)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаНачала КАК ДатаНачала,
		|	ТаблицаДокумента.ДатаОкончания КАК ДатаОкончания,
		|	ЕСТЬNULL(ТаблицаДокументаИсправления.Ссылка, ТаблицаДокументаСторнирование.Ссылка) КАК РегистраторИзмерение
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК ТаблицаДокументаИсправления
		|			ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаИсправления.ИсправленныйДокумент
		|				И (ТаблицаДокументаИсправления.Проведен)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СторнированиеНачислений КАК ТаблицаДокументаСторнирование
		|			ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаСторнирование.СторнируемыйДокумент
		|				И (ТаблицаДокументаСторнирование.Проведен)
		|		ПО Регистраторы.Регистратор = ТаблицаДокумента.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала,
		|	Регистратор,
		|	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.ЗаполнитьДвиженияПоДаннымВыборкиРегистраторов(Выборка, Ложь, ПараметрыОбновления);
	
КонецПроцедуры

Функция ПолноеИмяМакета(МетаданныеМакета)
	Возврат МетаданныеМакета.Родитель().ПолноеИмя() + "." + МетаданныеМакета.Имя;
КонецФункции

#КонецОбласти

#КонецЕсли
