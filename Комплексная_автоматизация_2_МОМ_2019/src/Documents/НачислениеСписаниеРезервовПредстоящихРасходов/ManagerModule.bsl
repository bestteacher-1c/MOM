#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
	НачислениеСписаниеРезервовПредстоящихРасходовЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

// Возвращает данные по объектам учета резервов предстоящих расходов: направление деятельности, остатки на регистре,
//	данные по начислению и списанию. Данные заполняются на основании одного из следующих условий:
//		- дата, переданная в параметрах заполнения входит в период действия объекта учета резервов;
//		- есть остатки на регистре на дату, переданную в параметрах.
//	Параметры:
//		ПараметрыЗаполнения - Структура - структура, содержащая следующие ключи:
//			Дата - дата и время - дата, на которую необходимо получить данные регистра "РезервыПредстоящихРасходов";
//			Ссылка - ДокументСсылка - ссылка на документ, остатки по которому не надо учитывать при получении данных из регистра;
//			Организация - СправочникСсылка.Организации - Организация, по которой необходимо получить данные;
//			ВидРезервов - СправочникСсылка.Резервы - Резерв, по которому необходимо получить данные;
//		ОбъектыУчетаРезервов - СправочникСсылка.ОбъектыУчетаРезервовПредстоящихРасходов - если задан, то возвращаются данные только по этому объекту учета;
//
//	Возвращаемые данные:
//		РезультатЗапроса - Данные результата запроса.
//
Функция ДанныеДляЗаполненияРезервов(ПараметрыЗаполнения, ОбъектыУчетаРезервов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезервыПредстоящихРасходовОстатки.Организация КАК Организация,
	|	РезервыПредстоящихРасходовОстатки.ВидРезервов КАК ВидРезервов,
	|	РезервыПредстоящихРасходовОстатки.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов,
	|	-РезервыПредстоящихРасходовОстатки.СуммаРеглОстаток КАК СуммаРеглОстаток,
	|	-РезервыПредстоящихРасходовОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
	|ПОМЕСТИТЬ ОстаткиРезервовПредстоящихРасходов
	|ИЗ
	|	РегистрНакопления.РезервыПредстоящихРасходов.Остатки(
	|			&Граница,
	|			Организация = &Организация
	|				И ВидРезервов = &ВидРезервов
	|				И (НЕ &ОтборПоОбъектуУчетаРезервов ИЛИ ОбъектУчетаРезервов В (&ОбъектыУчетаРезервов))) КАК РезервыПредстоящихРасходовОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидРезервов,
	|	ОбъектУчетаРезервов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыУчетаРезервовПредстоящихРасходов.Ссылка КАК ОбъектУчетаРезервов,
	|	ОбъектыУчетаРезервовПредстоящихРасходов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ОбъектыУчетаРезервовПредстоящихРасходов.ПодразделениеНачисления КАК ПодразделениеНачисления,
	|	ОбъектыУчетаРезервовПредстоящихРасходов.НаправлениеДеятельностиНачисления КАК НаправлениеДеятельностиНачисления,
	|	ОбъектыУчетаРезервовПредстоящихРасходов.СтатьяРасходовНачисления КАК СтатьяРасходовНачисления,
	|	ОбъектыУчетаРезервовПредстоящихРасходов.АналитикаРасходовНачисления КАК АналитикаРасходовНачисления,
	|	ОбъектыУчетаРезервовПредстоящихРасходов.ПодразделениеСписания КАК ПодразделениеСписания,
	|	ОбъектыУчетаРезервовПредстоящихРасходов.НаправлениеДеятельностиСписания КАК НаправлениеДеятельностиСписания,
	|	ОбъектыУчетаРезервовПредстоящихРасходов.СтатьяДоходовСписания КАК СтатьяДоходовСписания,
	|	ОбъектыУчетаРезервовПредстоящихРасходов.АналитикаДоходовСписания КАК АналитикаДоходовСписания,
	|	ЕСТЬNULL(РезервыПредстоящихРасходовОстатки.СуммаРеглОстаток, 0) КАК ТекущаяСуммаРегл,
	|	ЕСТЬNULL(РезервыПредстоящихРасходовОстатки.СуммаУпрОстаток, 0) КАК ТекущаяСуммаУпр
	|ИЗ
	|	Справочник.ОбъектыУчетаРезервовПредстоящихРасходов КАК ОбъектыУчетаРезервовПредстоящихРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезервовПредстоящихРасходов КАК РезервыПредстоящихРасходовОстатки
	|		ПО (РезервыПредстоящихРасходовОстатки.ОбъектУчетаРезервов = ОбъектыУчетаРезервовПредстоящихРасходов.Ссылка)
	|			И (РезервыПредстоящихРасходовОстатки.Организация = ОбъектыУчетаРезервовПредстоящихРасходов.Организация)
	|			И (РезервыПредстоящихРасходовОстатки.ВидРезервов = ОбъектыУчетаРезервовПредстоящихРасходов.ВидРезервов)
	|ГДЕ
	|	ОбъектыУчетаРезервовПредстоящихРасходов.Организация = &Организация
	|	И ОбъектыУчетаРезервовПредстоящихРасходов.ВидРезервов = &ВидРезервов
	|	И ВЫБОР
	|			КОГДА &ОтборПоОбъектуУчетаРезервов
	|				ТОГДА ОбъектыУчетаРезервовПредстоящихРасходов.Ссылка В (&ОбъектыУчетаРезервов)
	|			ИНАЧЕ ЕСТЬNULL(РезервыПредстоящихРасходовОстатки.СуммаРеглОстаток, 0) > 0
	|					ИЛИ ЕСТЬNULL(РезервыПредстоящихРасходовОстатки.СуммаУпрОстаток, 0) > 0
	|					ИЛИ ОбъектыУчетаРезервовПредстоящихРасходов.НачалоПериода <= &ТекДата
	|						И (ОбъектыУчетаРезервовПредстоящихРасходов.КонецПериода > &ТекДата
	|							ИЛИ ОбъектыУчетаРезервовПредстоящихРасходов.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
	|		КОНЕЦ;
	|
	|УНИЧТОЖИТЬ ОстаткиРезервовПредстоящихРасходов";
	
	Запрос.УстановитьПараметр("Граница", Новый Граница(Новый МоментВремени(ПараметрыЗаполнения.Дата, ПараметрыЗаполнения.Ссылка), ВидГраницы.Исключая));	
	Запрос.УстановитьПараметр("ТекДата", ПараметрыЗаполнения.Дата);
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("ВидРезервов", ПараметрыЗаполнения.ВидРезервов);
	Запрос.УстановитьПараметр("ОбъектыУчетаРезервов", ОбъектыУчетаРезервов);
	Запрос.УстановитьПараметр("ОтборПоОбъектуУчетаРезервов", ОбъектыУчетаРезервов <> Неопределено И ОбъектыУчетаРезервов.Количество() > 0);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// Создание запроса инициализации движений и заполенение его параметров
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	// Текст запроса, формирующего таблицы движений
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаРезервыПредстоящихРасходов(Запрос, ТекстыЗапроса, Регистры);
	
	// Выполение запроса и выгрузка полученных таблиц для формирования движений
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ВидРезервов КАК ВидРезервов
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПредстоящихРасходов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтНачисления(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтНачисления";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Строки.ПодразделениеНачисления КАК Подразделение,
	|	Строки.НаправлениеДеятельностиНачисления КАК НаправлениеДеятельностиНачисления,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Строки.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов,
	|	Строки.СтатьяРасходовНачисления КАК СтатьяРасходов,
	|	Строки.АналитикаРасходовНачисления КАК АналитикаРасходов,
	|	ВЫБОР
	|		КОГДА Строки.УстановитьНовуюСуммуРегл И Строки.ТекущаяСуммаРегл < Строки.НоваяСуммаРегл
	|		ТОГДА Строки.НоваяСуммаРегл - Строки.ТекущаяСуммаРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА НЕ &УправленческийУчетОрганизаций 
	|			ТОГДА 0
	|		КОГДА Строки.УстановитьНовуюСуммаУпр И Строки.ТекущаяСуммаУпр < Строки.НоваяСуммаУпр
	|		ТОГДА Строки.НоваяСуммаУпр - Строки.ТекущаяСуммаУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр
	|
	|ПОМЕСТИТЬ ВтНачисления
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПредстоящихРасходов.Резервы КАК Строки
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|	И (Строки.УстановитьНовуюСуммуРегл И Строки.ТекущаяСуммаРегл < Строки.НоваяСуммаРегл
	|	ИЛИ Строки.УстановитьНовуюСуммаУпр И Строки.ТекущаяСуммаУпр < Строки.НоваяСуммаУпр)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтСписания(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтСписания";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Строки.ПодразделениеСписания КАК Подразделение,
	|	Строки.НаправлениеДеятельностиСписания КАК НаправлениеДеятельностиСписания,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Строки.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов,
	|	Строки.СтатьяДоходовСписания КАК СтатьяДоходов,
	|	Строки.АналитикаДоходовСписания КАК АналитикаДоходов,
	|	ВЫБОР
	|		КОГДА Строки.УстановитьНовуюСуммуРегл И Строки.ТекущаяСуммаРегл > Строки.НоваяСуммаРегл
	|		ТОГДА Строки.ТекущаяСуммаРегл - Строки.НоваяСуммаРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА НЕ &УправленческийУчетОрганизаций 
	|			ТОГДА 0
	|		КОГДА Строки.УстановитьНовуюСуммаУпр И Строки.ТекущаяСуммаУпр > Строки.НоваяСуммаУпр
	|		ТОГДА Строки.ТекущаяСуммаУпр - Строки.НоваяСуммаУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр
	|
	|ПОМЕСТИТЬ ВтСписания
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПредстоящихРасходов.Резервы КАК Строки
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|	И (Строки.УстановитьНовуюСуммуРегл И Строки.ТекущаяСуммаРегл > Строки.НоваяСуммаРегл
	|	ИЛИ Строки.УстановитьНовуюСуммаУпр И Строки.ТекущаяСуммаУпр > Строки.НоваяСуммаУпр)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтНачисления", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтНачисления(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ТаблицаНачислений.Подразделение КАК Подразделение,
	|	ТаблицаНачислений.НаправлениеДеятельностиНачисления КАК НаправлениеДеятельности,
	|	ТаблицаНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаНачислений.АналитикаРасходов КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаБезНДС,
	|	СУММА(ТаблицаНачислений.СуммаУпр) КАК СуммаБезНДСУпр,
	|	СУММА(ТаблицаНачислений.СуммаРегл) КАК СуммаСНДСРегл,
	|	СУММА(ТаблицаНачислений.СуммаРегл) КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеРезервовПредстоящихРасходов) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	ВтНачисления КАК ТаблицаНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.СтатьяРасходов,
	|	ТаблицаНачислений.АналитикаРасходов,
	|	ТаблицаНачислений.Подразделение,
	|	ТаблицаНачислений.НаправлениеДеятельностиНачисления
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтСписания", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтСписания(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ТаблицаСписаний.Подразделение КАК Подразделение,
	|	ТаблицаСписаний.НаправлениеДеятельностиСписания КАК НаправлениеДеятельности,
	|	ТаблицаСписаний.СтатьяДоходов КАК СтатьяДоходов,
	|	ТаблицаСписаний.АналитикаДоходов КАК АналитикаДоходов,
	|	СУММА(0) КАК Сумма,
	|	СУММА(ТаблицаСписаний.СуммаРегл) КАК СуммаРегл,
	|	СУММА(ТаблицаСписаний.СуммаУпр) КАК СуммаУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРезервовПредстоящихРасходов) КАК ХозяйственнаяОперация
	|	
	|ИЗ
	|	ВтСписания КАК ТаблицаСписаний
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСписаний.СтатьяДоходов,
	|	ТаблицаСписаний.АналитикаДоходов,
	|	ТаблицаСписаний.Подразделение,
	|	ТаблицаСписаний.НаправлениеДеятельностиСписания";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаРезервыПредстоящихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РезервыПредстоящихРасходов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтНачисления", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтНачисления(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтСписания", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтСписания(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ВидРезервов КАК ВидРезервов,
	|	ТаблицаНачислений.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаНачислений.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов,
	|	СУММА(ТаблицаНачислений.СуммаРегл) КАК СуммаРегл,
	|	СУММА(ТаблицаНачислений.СуммаУпр) КАК СуммаУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеРезервовПредстоящихРасходов) КАК ХозяйственнаяОперация
	|	
	|ИЗ
	|	ВтНачисления КАК ТаблицаНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.ОбъектУчетаРезервов,
	|	ТаблицаНачислений.НаправлениеДеятельности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Организация,
	|	&ВидРезервов,
	|	ТаблицаСписаний.НаправлениеДеятельности,
	|	ТаблицаСписаний.ОбъектУчетаРезервов,
	|	СУММА(ТаблицаСписаний.СуммаРегл),
	|	СУММА(ТаблицаСписаний.СуммаУпр),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРезервовПредстоящихРасходов)
	|ИЗ
	|	ВтСписания КАК ТаблицаСписаний
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСписаний.ОбъектУчетаРезервов,
	|	ТаблицаСписаний.НаправлениеДеятельности";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат НачислениеСписаниеРезервовПредстоящихРасходовЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат НачислениеСписаниеРезервовПредстоящихРасходовЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область Прочее

#Область ЗагрузкаИзФайла

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Загрузка из файла.

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	Возврат;
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки;
//     * остальные колонки сооответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа,
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько
//     подходящих вариантов.
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Резервы =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДанныеДляСопоставления.ОбъектУчетаРезервов КАК СТРОКА(&НаименованиеДлина)) КАК Наименование,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СправочникДляСопоставления.Ссылка) КАК ОбъектУчетаРезервов,
	|	ДанныеДляСопоставленияПоНаименованию.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставленияПоНаименованию.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставленияПоНаименованию
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыУчетаРезервовПредстоящихРасходов КАК СправочникДляСопоставления
	|		ПО (СправочникДляСопоставления.Наименование = ДанныеДляСопоставленияПоНаименованию.Наименование)
	|			И НЕ СправочникДляСопоставления.ЭтоГруппа
	|ГДЕ
	|	НЕ СправочникДляСопоставления.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставленияПоНаименованию.Идентификатор";
	
	НаименованиеДлина = Метаданные.Справочники.ОбъектыУчетаРезервовПредстоящихРасходов.ДлинаНаименования;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеДлина", НаименованиеДлина); 
	
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл 
		
		НоваяСтрока = Резервы.Добавить();
		НоваяСтрока.Идентификатор = СтрокаТаблицы.Идентификатор;
		
		СтрокаРезультата = ТаблицаРезультата.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаРезультата <> Неопределено Тогда 
			Если СтрокаРезультата.Количество = 1 Тогда 
				НоваяСтрока.ОбъектУчетаРезервов  = СтрокаРезультата.ОбъектУчетаРезервов;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "Идентификатор,ОбъектУчетаРезервов");
			ИначеЕсли СтрокаРезультата.Количество > 1 Тогда 
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "ОбъектУчетаРезервов";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Резервы, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возврашает список подходящих объектов ИБ для неоднозначного значения ячейки.
//
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - имя колонки, в который возника неоднозначность
//  СписокНеоднозначностей    - ТаблицаЗначений - Список для заполения с неоднозначными данными
//     * Идентификатор        - Число  - Уникальный идентификатор строки
//     * Колонка              - Строка -  Имя колонки с возникшей неоднозначностью
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "ОбъектУчетаРезервов" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыУчетаРезервов.Ссылка
		|ИЗ
		|	Справочник.ОбъектыУчетаРезервовПредстоящихРасходов КАК ОбъектыУчетаРезервов
		|ГДЕ
		|	ОбъектыУчетаРезервов.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ОбъектУчетаРезервов);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);  
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
