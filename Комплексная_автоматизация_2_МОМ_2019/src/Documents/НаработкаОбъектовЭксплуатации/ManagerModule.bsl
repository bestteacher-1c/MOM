#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Добавляет команду создания документа "Регистрация наработок".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.НаработкаОбъектовЭксплуатации) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.НаработкаОбъектовЭксплуатации.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.НаработкаОбъектовЭксплуатации);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Производит запись движений в регистр "Наработки объектов эксплуатации"
//
// Параметры:
// 		ДополнительныеСвойства - Структура - Структура дополнительных свойств объекта документа
// 		Движения - КоллекцияДвижений - Коллекция движения объекта документа
// 		Отказ - Булево - Возвращаемый параметр, признак ошибки при выполнении процедуры.
//
Процедура ОтразитьНаработкиОбъектовЭксплуатации(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаНаработкиОбъектовЭксплуатации = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНаработкиОбъектовЭксплуатации;
	
	Если Отказ Или ТаблицаНаработкиОбъектовЭксплуатации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = Движения.НаработкиОбъектовЭксплуатации;
	ТаблицаДвижений.Записывать = Истина;
	ТаблицаДвижений.Загрузить(ТаблицаНаработкиОбъектовЭксплуатации);
	
КонецПроцедуры

// Производит проверку таблицы наработок документов регистрации и установки значений наработок.
//
// Параметры:
// 		Объект - ДанныеФормыСтруктура, ДокументОбъект.РегистрацияНаработки, ДокументОбъект.УстановкаЗначенийНаработки - Документ вызывающий проверку
// 		Таблица - ТабличнаяЧасть, ДанныеФормыКоллекция - Таблица документа для проверки
// 		Отказ - Булево - Возвращаемый параметр, признак наличия ошибок в ходе проверки.
//
Процедура ПроверкаТаблицыНаработок(Объект, Таблица, Отказ = Ложь) Экспорт
	
	// Проверка дублей строк
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	(ВЫРАЗИТЬ(Данные.НомерСтроки КАК ЧИСЛО)) - 1 КАК ИндексСтроки,
		|	Данные.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
		|	Данные.ПоказательНаработки КАК ПоказательНаработки
		|ПОМЕСТИТЬ ДанныеТабличнойЧасти
		|ИЗ
		|	&Данные КАК Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеТабличнойЧасти1.ИндексСтроки КАК ИндексСтроки
		|ИЗ
		|	ДанныеТабличнойЧасти КАК ДанныеТабличнойЧасти1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеТабличнойЧасти КАК ДанныеТабличнойЧасти2
		|		ПО ДанныеТабличнойЧасти1.ОбъектЭксплуатации = ДанныеТабличнойЧасти2.ОбъектЭксплуатации
		|			И ДанныеТабличнойЧасти1.ПоказательНаработки = ДанныеТабличнойЧасти2.ПоказательНаработки
		|			И ДанныеТабличнойЧасти1.ИндексСтроки <> ДанныеТабличнойЧасти2.ИндексСтроки");
	
	Запрос.УстановитьПараметр("Данные", Таблица.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ШаблонОшибки = НСтр("ru='Показатель наработки ""%ПоказательНаработки%"" для ""%ОбъектИлиУзел%"" в строке %НомерСтроки% повторяется в других строках табличной части'");
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = Таблица[Выборка.ИндексСтроки];
		ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%ПоказательНаработки%", СтрокаТаблицы.ПоказательНаработки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОбъектИлиУзел%", СтрокаТаблицы.ОбъектЭксплуатации);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Наработки", СтрокаТаблицы.НомерСтроки, "ПоказательНаработки"),,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.НаработкаОбъектовЭксплуатации";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	НаработкиОбъектовЭксплуатации(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата            КАК ДатаРегистрации,
	|	ДанныеДокумента.Дата            КАК Период,
	|	ДанныеДокумента.Номер           КАК Номер,
	|	ДанныеДокумента.Ответственный   КАК Ответственный,
	|	ДанныеДокумента.Комментарий     КАК Комментарий,
	|	ДанныеДокумента.Проведен        КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.НаработкаОбъектовЭксплуатации КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	
	ЗначенияПараметровПроведения.Вставить("ИспользоватьУзлы", ПолучитьФункциональнуюОпцию("ИспользоватьУзлыОбъектовЭксплуатации"));
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.НаработкаОбъектовЭксплуатации"));
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru='Регистрация наработок'"));
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.НаработкаОбъектовЭксплуатации);
	
	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли;

	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Процедура НаработкиОбъектовЭксплуатации(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НаработкиОбъектовЭксплуатации";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// НаработкиОбъектовЭксплуатации
	|"+
	"ВЫБРАТЬ
	|	&ДатаРегистрации КАК Период,
	|		Объекты.Ссылка
	|			КАК ОбъектЭксплуатации,
	|	Наработки.ПоказательНаработки КАК ПоказательНаработки,
	|	Наработки.Значение КАК Значение,
	|	Наработки.СреднесуточноеЗначение КАК СреднесуточноеЗначение,
	|	ЛОЖЬ КАК КорректировочнаяЗапись
	|ИЗ
	|	Документ.НаработкаОбъектовЭксплуатации.Наработки КАК Наработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК Объекты
	|		ПО Наработки.ОбъектЭксплуатации = Объекты.Ссылка
	|ГДЕ
	|	Наработки.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&Период   КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоОС";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОС.НомерСтроки-1, 0)    КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Проведен                               КАК Проведен,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	ЛОЖЬ                                    КАК ОтражатьВРеглУчете,
	|	ИСТИНА                                  КАК ОтражатьВУпрУчете,
	|	ТаблицаОС.ОбъектЭксплуатации            КАК ОсновноеСредство
	|ИЗ
	|	Документ.НаработкаОбъектовЭксплуатации КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НаработкаОбъектовЭксплуатации.Наработки КАК ТаблицаОС
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|			И ТаблицаОС.ОбъектЭксплуатации ССЫЛКА Справочник.ОбъектыЭксплуатации
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
