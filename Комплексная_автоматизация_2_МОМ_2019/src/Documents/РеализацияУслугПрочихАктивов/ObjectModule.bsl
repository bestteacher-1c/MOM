#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ДатаПерехода = Дата('00010101');
	Если ДополнительныеПараметры <> Неопределено Тогда
		ДополнительныеПараметры.Свойство("НоваяДата", ДатаПерехода);
	КонецЕсли;
	
	Статус = Перечисления.СтатусыРеализацийТоваровУслуг[НовыйСтатус];
	
	// Установка даты перехода права собственности
	Если ЗначениеЗаполнено(ДатаПерехода) Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав Тогда
			ДатаПереходаПраваСобственности = ДатаПерехода;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	ИдентификаторПлатежа   = Неопределено;
	РасшифровкаПлатежа.Очистить();
	
	ПараметрыЗаполнения = Документы.РеализацияУслугПрочихАктивов.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
	УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(ЭтотОбъект, Доходы);
	
	РеализацияУслугПрочихАктивовЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	НепроверяемыеРеквизиты.Добавить("Расходы");
	НепроверяемыеРеквизиты.Добавить("Расходы.ВидАктива");
	НепроверяемыеРеквизиты.Добавить("Расходы.ВнеоборотныйАктив");
	НепроверяемыеРеквизиты.Добавить("Расходы.СуммаАмортизационнойПремии");
	НепроверяемыеРеквизиты.Добавить("Расходы.СтатьяДоходов");
	НепроверяемыеРеквизиты.Добавить("Расходы.АналитикаДоходов");
	
	Если Не ЗначениеЗаполнено(ХозяйственнаяОперация)
		Или ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности 
			И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав Тогда
		НепроверяемыеРеквизиты.Добавить("Статус");
		НепроверяемыеРеквизиты.Добавить("ДатаПереходаПраваСобственности");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Статус)
		Или Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено Тогда
		НепроверяемыеРеквизиты.Добавить("ДатаПереходаПраваСобственности");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Соглашение)
		Или Не Документы.РеализацияУслугПрочихАктивов.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		НепроверяемыеРеквизиты.Добавить("Договор");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам") Тогда
		ПроверяемыеРеквизиты.Добавить("Подразделение");
	КонецЕсли;
	
	ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,Новый Структура("Доходы"), НепроверяемыеРеквизиты, Отказ);
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, Новый Структура("Расходы"), НепроверяемыеРеквизиты, Отказ);
		
	Если ЗначениеЗаполнено(НаправлениеДеятельности) 
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		НепроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	//++ НЕ УТ
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав Тогда
		НепроверяемыеРеквизиты.Добавить("Расходы.СтатьяРасходов");
		НепроверяемыеРеквизиты.Добавить("Расходы.СтатьяАктивовПассивов");
		ПроверитьРеализациюВнеоборотныхАктивов(НепроверяемыеРеквизиты, Отказ);
	КонецЕсли;
	//-- НЕ УТ
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
	ВзаиморасчетыСервер.ПроверитьДатуПлатежа(ЭтотОбъект, Отказ);
	ПродажиСервер.ПроверитьЗапретОтгрузки(Партнер, Отказ);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	РеализацияУслугПрочихАктивовЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ЕстьКорректировки = Ложь;
		ПродажиСервер.ПроверитьНаличиеКорректировок(Ссылка, Ссылка, ЕстьКорректировки);
        Если ЕстьКорректировки Тогда
			ПродажиСервер.СообщитьОбОшибкахОтменаПроведенияЕстьКорректировки(Ссылка,Отказ);
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрыРегистрации = Документы.РеализацияУслугПрочихАктивов.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПередЗаписью(ПараметрыРегистрации, РежимЗаписи, ПометкаУдаления, Проведен);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДозаполнитьДанныеДоходов();
		ОчиститьНеиспользуемыеРеквизиты();
		
		Если СуммаДокумента > 0 И НЕ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			ВзаиморасчетыСервер.ЗаполнитьСуммыРасшифровкиНакладной(СуммаДокумента, СуммаВзаиморасчетов, РасшифровкаПлатежа);
		Иначе
			Если РасшифровкаПлатежа.Количество() <> 0 Тогда
				РасшифровкаПлатежа.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Доходы);
		
	КонецЕсли;
	
	СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Доходы, ЦенаВключаетНДС);
	СтруктураКурса = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(Курс, Кратность);
	ЗаполнитьСуммуВзаиморасчетов(СтруктураКурса);
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Доходы", СтруктураКурса);
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;

	ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	
	РеализацияУслугПрочихАктивовЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ И ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		
		ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
		Документы.РеализацияУслугПрочихАктивов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, "РеестрДокументов,ДокументыПоОС,ДокументыПоНМА");
		РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		//++ НЕ УТ
		РегистрыСведений.ДокументыПоОС.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		РегистрыСведений.ДокументыПоНМА.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		//-- НЕ УТ
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("НомерДокумента", Номер);
	
	РеализацияУслугПрочихАктивовЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.РеализацияУслугПрочихАктивов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСерверУТ.ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, Движения);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДоходыРасходыПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	//++ НЕ УТ
	РегистрыСведений.ДокументыПоОС.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	РегистрыСведений.ДокументыПоНМА.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	//-- НЕ УТ
	
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	УчетНДСУП.СформироватьДвиженияВРегистры(ДополнительныеСвойства, Движения, Отказ);

	СформироватьСписокРегистровДляКонтроля();

	РеализацияУслугПрочихАктивовЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ПараметрыРегистрации = Документы.РеализацияУслугПрочихАктивов.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриПроведении(ПараметрыРегистрации);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	РеализацияУслугПрочихАктивовЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ПараметрыРегистрации = Документы.РеализацияУслугПрочихАктивов.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриУдаленииПроведения(ПараметрыРегистрации);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ДанныеЗаполнения);
		
		ПродажиСервер.ПроверитьВозможностьВводаНаОснованииСоглашения("РеализацияУслугПрочихАктивов",
			УсловияПродаж.ХозяйственнаяОперация);
		
		ДопустимыеСтатусы = Новый Массив();
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыСоглашенийСКлиентами.Действует);
		ОшибкиСтатуса = (УсловияПродаж.СтатусСоглашения <> Перечисления.СтатусыСоглашенийСКлиентами.Действует);
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСоглашения(УсловияПродаж.Типовое);
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения, УсловияПродаж.СтатусСоглашения, , ОшибкиСтатуса, ДопустимыеСтатусы);
		
		Если (Не УсловияПродаж.Типовое) И ЗначениеЗаполнено(УсловияПродаж.Партнер) Тогда
			Партнер = УсловияПродаж.Партнер;
		КонецЕсли;
		Соглашение = ДанныеЗаполнения;
		Документы.РеализацияУслугПрочихАктивов.ЗаполнитьПоУсловиямПродаж(ЭтотОбъект, УсловияПродаж);
	//++ НЕ УТ
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПодготовкаКПередачеНМА2_4") Тогда
		ЗаполнитьПоДокументуПодготовкаКПередачеНМА2_4(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4") Тогда
		ЗаполнитьПоДокументуПодготовкаКПередачеОС2_4(ДанныеЗаполнения);
	//-- НЕ УТ
	КонецЕсли;

	РеализацияУслугПрочихАктивовЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

	ПараметрыЗаполнения = Документы.РеализацияУслугПрочихАктивов.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = ОбщегоНазначенияУТПовтИсп.ДополнительныйПрефиксНумератораДокументыРеализацииТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Документы.РеализацияУслугПрочихАктивов.ЗаполнитьПоУмолчанию(ЭтотОбъект);
	
	РаботаСКурсамиВалютУТ.ЗаполнитьКурсКратностьПоУмолчанию(Курс, Кратность, Валюта, ВалютаВзаиморасчетов);
	
	ВалютаОплаты  = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ФормаОплаты, БанковскийСчетОрганизации);
	ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(ВалютаВзаиморасчетов,НалогообложениеНДС,ВалютаОплаты);
	
КонецПроцедуры

//++ НЕ УТ

Процедура ЗаполнитьПоДокументуПодготовкаКПередачеНМА2_4(ДанныеЗаполнения)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Организация КАК Организация,
	|	Операция.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.НематериальныйАктив.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТабличнаяЧасть.НематериальныйАктив КАК НематериальныйАктив,
	|	Операция.Партнер КАК Партнер,
	|	Операция.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ втДанныеОснования
	|ИЗ
	|	Документ.ПодготовкаКПередачеНМА2_4 КАК Операция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодготовкаКПередачеНМА2_4.НМА КАК ТабличнаяЧасть
	|		ПО (ТабличнаяЧасть.Ссылка = Операция.Ссылка)
	|ГДЕ
	|	Операция.Ссылка = &ДанныеЗаполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеОснования.НематериальныйАктив КАК НематериальныйАктив,
	|	ПорядокУчетаНМА.ГруппаФинансовогоУчета.СчетУчета КАК СчетУчета,
	|	ПорядокУчетаНМА.ГруппаФинансовогоУчета.СчетУчетаЦФ КАК СчетУчетаЦФ
	|ПОМЕСТИТЬ втПараметры
	|ИЗ
	|	втДанныеОснования КАК втДанныеОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМА.СрезПоследних(
	|				&Дата,
	|				(Организация, НематериальныйАктив) В
	|					(ВЫБРАТЬ
	|						Т.Организация,
	|						Т.НематериальныйАктив
	|					ИЗ
	|						втДанныеОснования КАК Т)) КАК ПорядокУчетаНМА
	|		ПО втДанныеОснования.НематериальныйАктив = ПорядокУчетаНМА.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК РеализацияНаОсновании,
	|	втДанныеОснования.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено) КАК Статус,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПереходаПраваСобственности,
	|	втДанныеОснования.Организация КАК Организация,
	|	втДанныеОснования.Подразделение КАК Подразделение,
	|	втДанныеОснования.Партнер КАК Партнер,
	|	втДанныеОснования.Контрагент КАК Контрагент
	|ИЗ
	|	втДанныеОснования КАК втДанныеОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(втДанныеОснования.НематериальныйАктив) КАК Содержание,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка) КАК СтатьяДоходов,
	|	втДанныеОснования.НематериальныйАктив КАК АналитикаДоходов,
	|	&ЕдиницаИзмеренияШтуки КАК ЕдиницаИзмерения,
	|	1 КАК Количество
	|ИЗ
	|	втДанныеОснования КАК втДанныеОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.НематериальныеАктивы) КАК СтатьяАктивовПассивов,
	|	втДанныеОснования.НематериальныйАктив КАК АналитикаАктивовПассивов,
	|	втПараметры.СчетУчета КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА) КАК ВидАктива,
	|	втДанныеОснования.НематериальныйАктив КАК ВнеоборотныйАктив
	|ИЗ
	|	втДанныеОснования КАК втДанныеОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметры КАК втПараметры
	|		ПО втДанныеОснования.НематериальныйАктив = втПараметры.НематериальныйАктив";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияШтуки", Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796", Ложь));
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[Пакет.Количество()-3].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	Доходы.Загрузить(Пакет[Пакет.Количество()-2].Выгрузить());
	Расходы.Загрузить(Пакет[Пакет.Количество()-1].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуПодготовкаКПередачеОС2_4(ДанныеЗаполнения)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Организация КАК Организация,
	|	Операция.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.ОсновноеСредство.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТабличнаяЧасть.ОсновноеСредство КАК ОсновноеСредство,
	|	Операция.Партнер КАК Партнер,
	|	Операция.Контрагент КАК Контрагент,
	|	Операция.Валюта КАК Валюта,
	|	Операция.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Операция.НалогообложениеНДС КАК НалогообложениеНДС,
	|	Операция.Основание КАК Основание,
	|	Операция.ОснованиеДата КАК ОснованиеДата,
	|	Операция.ОснованиеНомер КАК ОснованиеНомер,
	|	Операция.Грузоотправитель КАК Грузоотправитель,
	|	Операция.Грузополучатель КАК Грузополучатель,
	|	Операция.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Операция.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	Операция.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	Операция.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	Операция.Отпустил КАК Отпустил,
	|	Операция.ОтпустилДолжность КАК ОтпустилДолжность,
	|	Операция.Руководитель КАК Руководитель,
	|	Операция.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ТабличнаяЧасть.Сумма КАК Цена,
	|	ТабличнаяЧасть.Сумма КАК Сумма,
	|	ТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	|	ТабличнаяЧасть.СуммаНДС КАК СуммаНДС,
	|	ТабличнаяЧасть.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ втДанныеОснования
	|ИЗ
	|	Документ.ПодготовкаКПередачеОС2_4 КАК Операция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодготовкаКПередачеОС2_4.ОС КАК ТабличнаяЧасть
	|		ПО Операция.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Операция.Ссылка = &ДанныеЗаполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОС.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета
	|ПОМЕСТИТЬ втПорядокУчетаОС
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&Дата,
	|			ОсновноеСредство В
	|				(ВЫБРАТЬ
	|					ДанныеОснования.ОсновноеСредство
	|				ИЗ
	|					втДанныеОснования КАК ДанныеОснования)) КАК ПорядокУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК РеализацияНаОсновании,
	|	втДанныеОснования.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ВПути) КАК Статус,
	|	втДанныеОснования.Организация КАК Организация,
	|	втДанныеОснования.Подразделение КАК Подразделение,
	|	втДанныеОснования.Партнер КАК Партнер,
	|	втДанныеОснования.Контрагент КАК Контрагент,
	|	втДанныеОснования.Валюта КАК Валюта,
	|	втДанныеОснования.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	втДанныеОснования.НалогообложениеНДС КАК НалогообложениеНДС,
	|	втДанныеОснования.Основание КАК Основание,
	|	втДанныеОснования.ОснованиеДата КАК ОснованиеДата,
	|	втДанныеОснования.ОснованиеНомер КАК ОснованиеНомер,
	|	втДанныеОснования.Грузоотправитель КАК Грузоотправитель,
	|	втДанныеОснования.Грузополучатель КАК Грузополучатель,
	|	втДанныеОснования.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	втДанныеОснования.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	втДанныеОснования.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	втДанныеОснования.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	втДанныеОснования.Отпустил КАК Отпустил,
	|	втДанныеОснования.ОтпустилДолжность КАК ОтпустилДолжность,
	|	втДанныеОснования.Руководитель КАК Руководитель,
	|	втДанныеОснования.ГлавныйБухгалтер КАК ГлавныйБухгалтер
	|ИЗ
	|	втДанныеОснования КАК втДанныеОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(втДанныеОснования.ОсновноеСредство) КАК Содержание,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.РеализацияОС) КАК СтатьяДоходов,
	|	втДанныеОснования.ОсновноеСредство КАК АналитикаДоходов,
	|	&ЕдиницаИзмеренияШтуки КАК ЕдиницаИзмерения,
	|	1 КАК Количество,
	|	втДанныеОснования.Сумма КАК Цена,
	|	втДанныеОснования.Сумма КАК Сумма,
	|	втДанныеОснования.СтавкаНДС КАК СтавкаНДС,
	|	втДанныеОснования.СуммаНДС КАК СуммаНДС,
	|	втДанныеОснования.СуммаСНДС КАК СуммаСНДС
	|ИЗ
	|	втДанныеОснования КАК втДанныеОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОсновныеСредства) КАК СтатьяАктивовПассивов,
	|	втДанныеОснования.ОсновноеСредство КАК АналитикаАктивовПассивов,
	|	ПорядокУчетаОС.ГруппаФинансовогоУчета.СчетУчетаВыбытия КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство) КАК ВидАктива,
	|	втДанныеОснования.ОсновноеСредство КАК ВнеоборотныйАктив
	|ИЗ
	|	втДанныеОснования КАК втДанныеОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаОС КАК ПорядокУчетаОС
	|		ПО втДанныеОснования.ОсновноеСредство = ПорядокУчетаОС.ОсновноеСредство";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияШтуки", Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796", Ложь));
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[Пакет.Количество()-3].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	Доходы.Загрузить(Пакет[Пакет.Количество()-2].Выгрузить());
	Расходы.Загрузить(Пакет[Пакет.Количество()-1].Выгрузить());
	
	РеализацияУслугПрочихАктивовЛокализация.ЗаполнитьПоДокументуПодготовкаКПередачеОС2_4Завершение(ЭтотОбъект);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.РасчетыСКлиентами);
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура ДозаполнитьДанныеДоходов()
	Для Каждого Строка Из Доходы Цикл
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС И Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизиты()
	
	ОчищаемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуВзаиморасчетов(СтруктураКурса)
	
	Если Доходы.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество()=0 Тогда
		
		СуммаВзаиморасчетов = Доходы.Итог("СуммаВзаиморасчетов");
		
	Иначе
		
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетов(ЭтотОбъект, , СтруктураКурса);
		
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ

Процедура ПроверитьРеализациюВнеоборотныхАктивов(НепроверяемыеРеквизиты, Отказ)

	Если РеализацияВзаимозависимомуЛицу Тогда
		ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(
			ЭтотОбъект,Новый Структура("Расходы"), НепроверяемыеРеквизиты, Отказ);
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав Тогда
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Основные средства""'");
		ПолеВнеоборотныйАктив = НСтр("ru = 'Основное средство'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Внеоборотные активы""'");
		ПолеВнеоборотныйАктив = НСтр("ru = 'Внеоборотный актив'");
	КонецЕсли; 
	
	Если Расходы.Количество() = 0 Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав Тогда
			ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Основные средства""'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Внеоборотные активы""'");
		КонецЕсли; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Расходы", "", Отказ);
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из Расходы Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ВидАктива) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НСтр("ru = 'Вид актива'"), Формат(ДанныеСтроки.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Расходы", ДанныеСтроки.НомерСтроки, "ВидАктива");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ВнеоборотныйАктив) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПолеВнеоборотныйАктив, Формат(ДанныеСтроки.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Расходы", ДанныеСтроки.НомерСтроки, "ВнеоборотныйАктив");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
		КонецЕсли; 
		
		Если ДанныеСтроки.ВосстановитьАмортизационнуюПремию Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки.СуммаАмортизационнойПремии) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, НСтр("ru = 'Сумма амортизационной премии'"), Формат(ДанныеСтроки.НомерСтроки, "ЧГ="));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Расходы", ДанныеСтроки.НомерСтроки, "СуммаАмортизационнойПремии");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки.СтатьяДоходов) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, НСтр("ru = 'Статья доходов'"), Формат(ДанныеСтроки.НомерСтроки, "ЧГ="));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Расходы", ДанныеСтроки.НомерСтроки, "СтатьяДоходов");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли
