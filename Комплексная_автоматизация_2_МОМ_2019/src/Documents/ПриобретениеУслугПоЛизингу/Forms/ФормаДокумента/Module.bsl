#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаПоДокументу.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ЗаполнитьСписокВыбораТиповНачислений();
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
	ИзменитьОтображениеИтоговыхПоказателей(ЭтотОбъект);
	
	#Область СтандартныеПодсистемы
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПриобретениеУслугПоЛизингу", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастроитьПредставлениеСчетаФактуры();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Начисления);
	
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Начисления);
	РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(Объект.Начисления);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаВыбора" Тогда
		
		ВыделенныеСтроки = Элементы.Начисления.ВыделенныеСтроки;
		
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.Начисления.НайтиПоИдентификатору(Строка);
			ДанныеСтроки.Подразделение = ВыбранноеЗначение;
		КонецЦикла;
		
	КонецЕсли;
	
	Если УчетНДСУПКлиент.ЗаконченоРедактированиеСчетаФактурыПолученного(ВыбранноеЗначение, ИсточникВыбора) Тогда
		НастроитьПредставлениеСчетаФактуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	Договор = Справочники.ДоговорыЛизинга.ДоговорПоУмолчанию(Объект);
	
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ДоговорПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	АктуализироватьЗакупкуПодДеятельность();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ПриИзмененииНалогообложенияНДССервер();
	ИзменитьОтображениеИтоговыхПоказателей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	
	СуммаВключаетНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ОбновитьЗаголовкиКолонокСумм(Элементы, Объект.Валюта, Объект.ВалютаВзаиморасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВалютыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"         , Объект.Валюта);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов"    , Объект.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов"     , Объект.Начисления.Итог("СуммаВзаиморасчетов"));
	СтруктураПараметров.Вставить("СуммаДокумента"          , Объект.Начисления.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("Курс"                    , Объект.Курс);
	СтруктураПараметров.Вставить("Кратность"               , Объект.Кратность);
	СтруктураПараметров.Вставить("ДатаДокумента"           , Объект.Дата);
	СтруктураПараметров.Вставить("ТолькоПросмотр"          , ЭтаФорма.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ЭтоДокументЗакупки"      , Истина);
	
	ДополнительныеПараметры = Новый Структура;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеВзаиморасчеты", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВалютыИКурсДокумента", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ЗакупкаПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТ
	Если Поле.Имя = "НачисленияСчетРеглУчетаАктивовПассивов" Тогда
		РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма, "Начисления", ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.Начисления.ТекущиеДанные;
	ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(СтрокаТаблицы, "СтатьяРасходов");
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(СтрокаТаблицы, "СтатьяРасходов");
	Если Объект.НалогообложениеНДС <> ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС") Тогда
		СтрокаТаблицы.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		СтрокаТаблицы.НаправлениеДеятельности = НаправлениеДеятельности;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСтавкаНДСПриИзменении(Элемент)
	
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура НачисленияСуммаПриИзменении(Элемент)
	
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДокументОбеспечительногоПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru='Не заполнено поле ""Организация""'"), , , , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru='Не заполнено поле ""Контрагент""'"), , , , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru='Не заполнено поле ""Договор""'"), , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыФормы.Вставить("Договор",     Объект.Договор);
	
	ОткрытьФорму("Документ.ПриобретениеУслугПоЛизингу.Форма.ФормаВыборДокументаОбеспечительногоПлатежа", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДокументОбеспечительногоПлатежаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.Начисления.ТекущиеДанные;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтрокаТаблицы.ОбеспечительныйПлатеж = ВыбранноеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	СформироватьНадписьВалюты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СформироватьНадписьВалюты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСтатьяРасходовПриИзменении(Элемент)
	
	НачисленияСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура НачисленияСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.Начисления.НайтиПоИдентификатору(Элементы.Начисления.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
		КонецЕсли;
	Иначе
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("
		|ЗаполнитьПризнакАналитикаРасходовОбязательна,
		|ЗаполнитьТипСтатьи");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.Начисления.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.Начисления.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Строка = Объект.Начисления.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Строка.СтатьяРасходов = Результат;
		НачисленияСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачисления(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьНачисленияЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Объект.Начисления,
		Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачисленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ПроверитьЗаполнениеПолейОтбора() Тогда
		ЗаполнитьНачисленияНаСервере();
		Если Не Объект.Начисления.Количество() Тогда
			Текст = СтрШаблон(НСтр("ru = 'По договору %1 отсутствует график начисления за %2'"),
				Объект.Договор,
				Формат(Объект.Дата, "ДФ=""ММММ гггг 'г.'"""));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеПолейОтбора()
	
	Результат = Истина;
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Текст = НСтр("ru='Для заполнения начислений требуется указание договора.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Договор", "Объект");
		Результат = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Текст = НСтр("ru='Для заполнения начислений требуется указание даты документа.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Дата", "Объект");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНачисленияНаСервере()
	
	Объект.Начисления.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(График.УслугаПоЛизингу), 0) КАК УслугаПоЛизингу,
	|	ЕСТЬNULL(СУММА(График.ЗачетОбеспечительногоПлатежа), 0) КАК ЗачетОбеспечительногоПлатежа,
	|	ЕСТЬNULL(СУММА(График.ВыкупПредметаЛизинга), 0) КАК ВыкупПредметаЛизинга
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийЛизинга КАК График
	|ГДЕ
	|	График.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И График.ВариантГрафика.Владелец = &Договор
	|	И График.ВариантГрафика.Используется
	|	И НЕ График.ВариантГрафика.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.Дата));
	
	СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "СтавкаНДС");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.УслугаПоЛизингу <> 0 Тогда
			НоваяСтрока = Объект.Начисления.Добавить();
			НоваяСтрока.ТипНачисления = Перечисления.ТипыПлатежейПоЛизингу.ЛизинговыйПлатеж;
			НоваяСтрока.Сумма = Выборка.УслугаПоЛизингу;
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.НаправлениеДеятельности = НаправлениеДеятельности;
		КонецЕсли;
		
		Если Выборка.ЗачетОбеспечительногоПлатежа <> 0 Тогда
			НоваяСтрока = Объект.Начисления.Добавить();
			НоваяСтрока.ТипНачисления = Перечисления.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж;
			НоваяСтрока.Сумма = Выборка.ЗачетОбеспечительногоПлатежа;
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.НаправлениеДеятельности = НаправлениеДеятельности;
		КонецЕсли;
		
		Если Выборка.ВыкупПредметаЛизинга <> 0 Тогда
			НоваяСтрока = Объект.Начисления.Добавить();
			НоваяСтрока.ТипНачисления = Перечисления.ТипыПлатежейПоЛизингу.ВыкупПредметаЛизинга;
			НоваяСтрока.Сумма = Выборка.ВыкупПредметаЛизинга;
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.НаправлениеДеятельности = НаправлениеДеятельности;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	Если Объект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
			Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Начисления, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("Начисления", "СтатьяРасходов, АналитикаРасходов"));
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "Начисления", ТипыСтатей);
	РеглУчетВызовСервера.УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(ЭтаФорма, "Начисления", ТипыСтатей);
	
	//
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, 
		Новый Структура("Начисления"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияОбеспечительныйПлатеж.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Начисления.ТипНачисления");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСТР("ru='<Не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияТипНачисления.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Начисления.ТипНачисления");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПлатежейПоЛизингу.ЛизинговыйПлатеж;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСТР("ru='Услуга по лизингу'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияТипНачисления.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Начисления.ТипНачисления");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСТР("ru='Зачет обеспечительного платежа'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияАналитикаРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Начисления.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюЗакупки(ЭтаФорма,
		"НачисленияСтавкаНДС",
		"НачисленияСуммаНДС",
		"НачисленияСуммаСНДС");
	
	//
	
	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма, "НачисленияСуммаСНДС");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияСуммаВзаиморасчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Валюта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютаВзаиморасчетов");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииНалогообложенияНДССервер()
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	Если Объект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
			Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Начисления, СтруктураДействий, КэшированныеЗначения);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	НастроитьПредставлениеСчетаФактуры();
	
КонецПроцедуры

&НаСервере
Процедура СуммаВключаетНДСПриИзмененииСервер()
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Начисления, СтруктураДействий, КэшированныеЗначения);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	Договор = Справочники.ДоговорыЛизинга.ДоговорПоУмолчанию(Объект);
	
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ДоговорПриИзмененииНаСервере();
	КонецЕсли;
	
	НастроитьПредставлениеСчетаФактуры();
	
	АктуализироватьЗакупкуПодДеятельность();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Договор = Справочники.ДоговорыЛизинга.ДоговорПоУмолчанию(Объект);
	
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ДоговорПриИзмененииНаСервере();
	КонецЕсли;
	
	НастроитьПредставлениеСчетаФактуры();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Объект.ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ВалютаВзаиморасчетов");
	
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	Объект.Валюта = Объект.ВалютаВзаиморасчетов;
	
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПоЛизингу.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС,
		Объект.НалогообложениеНДС,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	ПриИзмененииНалогообложенияНДССервер();
	ИзменитьОтображениеИтоговыхПоказателей(ЭтаФорма);
	АктуализироватьЗакупкуПодДеятельность();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности,, Объект.Договор);
	КонецЕсли;
	
	НастроитьВидимостьЭлементовПоДоговору();
	ЗаполнитьСписокВыбораТиповНачислений();
	СформироватьНадписьВалюты(ЭтаФорма);
	
	НастроитьПредставлениеСчетаФактуры();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ПоляПересчетаСуммыНДСВСтрокеТЧ(Форма)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Форма.Объект);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	ОбновитьЗаголовкиКолонокСумм(Элементы, Объект.Валюта, Объект.ВалютаВзаиморасчетов);
	
	НастроитьПредставлениеСчетаФактуры();
	
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПоЛизингу.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС,
		Объект.НалогообложениеНДС,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
		
	АктуализироватьЗакупкуПодДеятельность(Ложь);
	
	НастроитьВидимостьЭлементовПоДоговору();
	
	ПВХ = ПланыВидовХарактеристик;
	ПВХ.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Начисления, "СтатьяРасходов, АналитикаРасходов");
	
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Начисления, "СтатьяРасходов");
	РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(Объект.Начисления);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.НачисленияСтатьяРасходов.Заголовок = НСтр("ru = 'Статья доходов / расходов'");
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности,, Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыРегистрации = ПараметрыРегистрацииСчетовФактурПолученных(Объект);
	УчетНДСУПКлиент.ОбработкаНавигационнойСсылкиСчетаФактурыПолученные(
		ЭтаФорма,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ПараметрыРегистрации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОтображениеИтоговыхПоказателей(Форма)
	
	ЗакупкаОблагаетсяНДС = УчетНДСУПКлиентСервер.ОтображатьНДСВИтогахДокументаЗакупки(Форма.Объект.НалогообложениеНДС);
	Если Не ЗакупкаОблагаетсяНДС Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПредставлениеСчетаФактуры()
			
	ПараметрыРегистрации = ПараметрыРегистрацииСчетовФактурПолученных(Объект);
	СчетаФактурыПолученныеНаОсновании = УчетНДСУП.СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрации);
	
	ТекстСчетаФактурыПолученные = СчетаФактурыПолученныеНаОсновании.Представление;	
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗакупкуПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПоЛизингу.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ЗакупкаПодДеятельность, 
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ЗакупкаПодДеятельность,
		Объект.ЗакупкаПодДеятельность,
		ПараметрыЗаполнения, 
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	Для Каждого ТекСтрока Из Объект.Начисления Цикл
		
		ТекСтрока.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
			ТекСтрока.Сумма,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
			
		ТекСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
		ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
		ТекСтрока.СуммаВзаиморасчетов = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимПересчетВВалюту(НоваяВалюта, СтараяВалюта, Начисления)
	
	Если Не ЗначениеЗаполнено(НоваяВалюта) Тогда
		НоваяВалюта = СтараяВалюта;
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтараяВалюта) Тогда
		Возврат Ложь;
	ИначеЕсли СтараяВалюта = НоваяВалюта Тогда
		Возврат Ложь;
	ИначеЕсли Начисления.Итог("Сумма") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьЭлементовПоДоговору()
	
	ВидимостьЭлементов = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ВариантУчетаИмущества = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ВариантУчетаИмущества");
		Если ВариантУчетаИмущества = Перечисления.ВариантыУчетаИмуществаПриЛизинге.ЗаБалансом Тогда
			ВидимостьЭлементов = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НачисленияПодразделение.Видимость = ВидимостьЭлементов;
	Элементы.НачисленияСтатьяРасходов.Видимость = ВидимостьЭлементов;
	Элементы.НачисленияАналитикаРасходов.Видимость = ВидимостьЭлементов;
	Элементы.НачисленияАналитикаАктивовПассивов.Видимость = ВидимостьЭлементов;
	Элементы.НачисленияСчетРеглУчетаРасходов.Видимость = ВидимостьЭлементов;
	Элементы.НачисленияСчетРеглУчетаАктивовПассивов.Видимость = ВидимостьЭлементов;
	Элементы.НачисленияНаправлениеДеятельности.Видимость = ВидимостьЭлементов;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТиповНачислений()
	
	СписокВыбораТипНачисления = Элементы.НачисленияТипНачисления.СписокВыбора;
	
	ТипыПлатежей = Справочники.ДоговорыЛизинга.ТипыПлатежейПоДоговору(Объект.Договор);
	СписокВыбораТипНачисления.ЗагрузитьЗначения(ТипыПлатежей);
	
	ЭлементСписка = СписокВыбораТипНачисления.НайтиПоЗначению(Перечисления.ТипыПлатежейПоЛизингу.ЛизинговыйПлатеж);
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Представление = НСтр("ru='Услуга по лизингу'");
	КонецЕсли;
	
	ЭлементСписка = СписокВыбораТипНачисления.НайтиПоЗначению(Перечисления.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж);
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Представление = НСтр("ru='Зачет обеспечительного платежа'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеВзаиморасчеты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ИзмениласьВалютаВзаиморасчетов = РезультатЗакрытия.ВалютаВзаиморасчетов <> Объект.ВалютаВзаиморасчетов;
		ИзмениласьВалюта = РезультатЗакрытия.Валюта <> Объект.Валюта;
		
		Объект.Валюта = РезультатЗакрытия.Валюта;
		
		Если ИзмениласьВалюта Тогда
			
			Если НеобходимПересчетВВалюту(Объект.Валюта, ВалютаДокумента, Объект.Начисления) 
				И РезультатЗакрытия.НеобходимПересчетСуммДокумента Тогда
				
				ПриИзмененииВалютыСервер(Объект.Валюта);
				ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
				
			КонецЕсли;
			
			ОбновитьЗаголовкиКолонокСумм(Элементы, Объект.Валюта, Объект.ВалютаВзаиморасчетов);
			ВалютаДокумента = Объект.Валюта;
			
		КонецЕсли;
		
		Объект.ВалютаВзаиморасчетов = РезультатЗакрытия.ВалютаВзаиморасчетов;
		
		Если ИзмениласьВалютаВзаиморасчетов Тогда
			
			ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
			ОбновитьЗаголовкиКолонокСумм(Элементы, Объект.Валюта, Объект.ВалютаВзаиморасчетов);
			
		КонецЕсли;
		
		Объект.Курс					= РезультатЗакрытия.Курс;
		Объект.Кратность			= РезультатЗакрытия.Кратность;
		Объект.СуммаВзаиморасчетов	= РезультатЗакрытия.СуммаВзаиморасчетов;
		
		ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись()
	
	СтруктураКурса = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(Объект.Курс, Объект.Кратность);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(
			Объект.Начисления,
			0,
			"СуммаВзаиморасчетов");
	
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(Объект, "Начисления", СтруктураКурса);
	ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(Объект, "Начисления");
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьВалюты(Форма)
	
	ПараметрыНадписиВалюты = ВзаиморасчетыКлиентСервер.ПараметрыНадписиВалюты();
	
	ПараметрыНадписиВалюты.ВалютаДокумента      = Форма.ВалютаДокумента;
	ПараметрыНадписиВалюты.ВалютаВзаиморасчетов = Форма.ВалютаВзаиморасчетовДокумента;
	ПараметрыНадписиВалюты.ВалютаРеглУчета      = Форма.ВалютаРегламентированногоУчета;
	ПараметрыНадписиВалюты.СуммаДокумента       = Форма.Объект.Начисления.Итог("СуммаСНДС");
	ПараметрыНадписиВалюты.СуммаВзаиморасчетов  = Форма.Объект.Начисления.Итог("СуммаВзаиморасчетов");
	ПараметрыНадписиВалюты.Курс                 = Форма.Объект.Курс;
	ПараметрыНадписиВалюты.Кратность            = Форма.Объект.Кратность;
	
	Форма.НадписьВалюты = ВзаиморасчетыКлиентСервер.СформироватьНадписьВалюты(ПараметрыНадписиВалюты);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовкиКолонокСумм(Элементы, Валюта, ВалютаВзаиморасчетов)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Элементы.НачисленияСумма.Заголовок = СтрШаблон(НСтр("ru='Сумма (%1)'"), Валюта);
	Иначе
		Элементы.НачисленияСумма.Заголовок = НСтр("ru='Сумма'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		Элементы.НачисленияСуммаВзаиморасчетов.Заголовок = СтрШаблон(НСтр("ru='Сумма взаиморасчетов (%1)'"), ВалютаВзаиморасчетов);
	Иначе
		Элементы.НачисленияСуммаВзаиморасчетов.Заголовок = НСтр("ru='Сумма взаиморасчетов'");
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыРегистрацииСчетовФактурПолученных(Объект)
	
	ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурПолученных();
	ПараметрыРегистрации.Ссылка = Объект.Ссылка;
	ПараметрыРегистрации.Дата = Объект.Дата;
	ПараметрыРегистрации.Организация = Объект.Организация;
	ПараметрыРегистрации.Контрагент = Объект.Контрагент;
	ПараметрыРегистрации.НалогообложениеНДС = Объект.НалогообложениеНДС;
	ПараметрыРегистрации.ПриобретениеТоваровРаботУслуг = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти
