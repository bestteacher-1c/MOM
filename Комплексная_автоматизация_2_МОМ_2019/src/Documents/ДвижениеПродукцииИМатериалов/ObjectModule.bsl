#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыДвиженияПродукцииИМатериалов[НовыйСтатус];
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
		
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Для Каждого ДанныеСтроки Из Товары Цикл
		Если ПоРаспоряжениям И ЗначениеЗаполнено(Распоряжение)
			И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую
			И Не ЗначениеЗаполнено(ДанныеСтроки.Распоряжение) Тогда
			
			ДанныеСтроки.Распоряжение = Распоряжение;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеСтроки.Распоряжение)
			И ДанныеСтроки.Распоряжение <> Неопределено Тогда
			
			ДанныеСтроки.Распоряжение = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Округление количества если движение не через кладовые
	Если (ТипЗнч(Отправитель) <> Тип("СправочникСсылка.Склады")	
		Или Не ЗначениеЗаполнено(Отправитель)
		Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отправитель, "ЦеховаяКладовая"))
	   И (ТипЗнч(Получатель) <> Тип("СправочникСсылка.Склады")	
	   	Или Не ЗначениеЗаполнено(Получатель)
		Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ЦеховаяКладовая")) Тогда
			ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий);
	
	// Заполнение ТЧ ВидыЗапасов
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация, Отправитель, Получатель, Неопределено);
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерийОтправитель");
		ИменаПолей.Вставить("Назначение", "НазначениеОтправителя");
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета, ИменаПолей);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		
		ЗаполнитьВидыЗапасов(Отказ);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМ_УТ.ЕстьМаркируемаяПродукцияГИСМ(Товары);
	// Конец ИнтеграцияГИСМ
	
	ДвижениеПродукцииИМатериаловЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	ДвижениеПродукцииИМатериаловЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Распоряжение = ДокументОснованиеПриЗаполнении(ДанныеЗаполнения);
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Распоряжение);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ОбъектыОснований") Тогда
		
		ОбъектОснование = ДанныеЗаполнения.ОбъектыОснований[0];
		
		Если ДанныеЗаполнения.ОбъектыОснований.Количество() = 1 Тогда
			ДокументОснование = ОбъектОснование;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			ЗаполнитьВыпускПродукцииНаОснованииЗаказаКлиента(ОбъектОснование);
			
		ИначеЕсли ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			
			ЗаполнитьПередачуМатериаловНаОснованииПриобретения(ДанныеЗаполнения.ОбъектыОснований);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда

			ИнтеграцияВЕТИСУТ.ЗаполнитьДвижениеПродукцииИМатериаловНаОснованииИсходящейТранспортнойОперацииВЕТИС(ЭтотОбъект, ДанныеЗаполнения);

		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Заполнение на основании документа %1 не предусмотрено. Обратитесь к администратору.'"), ОбъектОснование);
		КонецЕсли; 
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Товары") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
		
		Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.НазначениеОтправителя = НоваяСтрока.Назначение;
		КонецЦикла;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов);
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий, Ложь);
		
	Иначе
		
		// Заполнение по распоряжениям.
		
		СтруктураЗаполнения = Неопределено;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда // команда ввода на основании
			
			СтруктураЗаполнения = Новый Структура("МассивЗаказов", ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			Если ДанныеЗаполнения.Свойство("ОпределитьРаспоряжения") Тогда
				
				СтруктураЗаполнения = ДанныеЗаполнения;
				СтруктураЗаполнения.Вставить("МассивЗаказов", ОпределитьРаспоряжения(ДанныеЗаполнения.РеквизитыШапки));
				
			ИначеЕсли ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда // из спец. формы оформления накладных
				
				СтруктураЗаполнения = ДанныеЗаполнения;
				
			ИначеЕсли ДанныеЗаполнения.Свойство("РеквизитыШапки") Тогда
				
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
				
			Иначе
				
				ЗаполнитьПоОтбору(ДанныеЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураЗаполнения <> Неопределено Тогда
			
			СтруктураЗаполнения.РеквизитыШапки.Вставить("ВариантПриемкиТоваров", ВариантПриемкиТоваров);
			ЗаполнитьПоРаспоряжениям(СтруктураЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ДвижениеПродукцииИМатериаловЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Дата, Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Отправитель");
	МассивНепроверяемыхРеквизитов.Добавить("Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("Товары");
	
	ОтключитьПроверкуЗаполненияПоХозяйственнойОперации(МассивНепроверяемыхРеквизитов);
	
	ПредставлениеПолей = Документы.ДвижениеПродукцииИМатериалов.ПредставлениеПолей(ЭтотОбъект);
	
	ПроверитьРеквизитыШапки(ПредставлениеПолей, Отказ);
	
	ПроверитьТовары(ПредставлениеПолей, Отказ);
	
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ПроверитьВозможностьОкругления = 
		(ТипЗнч(Отправитель) <> Тип("СправочникСсылка.Склады")	
			Или Не ЗначениеЗаполнено(Отправитель)
			Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отправитель, "ЦеховаяКладовая"))
		И (ТипЗнч(Получатель) <> Тип("СправочникСсылка.Склады")	
	   		Или Не ЗначениеЗаполнено(Получатель)
			Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ЦеховаяКладовая"));
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	// Проверка заполнения серий в т.ч. серии.
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Организация, Дата);
	
	Если НЕ ПараметрыУчетнойПолитики.УчетГотовойПродукцииПоПлановойСтоимости
	ИЛИ (ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
	  И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ДвижениеПродукцииИМатериаловЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ДвижениеПродукцииИМатериалов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыМатериаловВПроизводство(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
	ДвижениеПродукцииИМатериаловЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
	
	Если Не ПоРаспоряжениям
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) Тогда
		// Если на склад приходуется продукция, произведенная без заказов, заполняем виды запасов без проверки.
		ПараметрыЗаполнения.ПриНехваткеТоваровОрганизацииФормироватьРезервПоТоварамТребующимПодтвержденияВыпуска = Истина;
	КонецЕсли;
	
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
	
	ДвижениеПродукцииИМатериаловЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.ДокументДелаетИПриходИРасход = Ложь;
	ПараметрыЗаполнения.ПодбиратьВидыЗапасовПоИнтеркампани = Истина;
	Если Не ПоРаспоряжениям
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) Тогда
		ПараметрыЗаполнения.ПриНехваткеТоваровОрганизацииФормироватьРезервПоТоварамТребующимПодтвержденияВыпуска = Истина;
	КонецЕсли;
	
	Если ПоРаспоряжениям И ТипЗнч(Получатель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ДополнительныеСвойства.Вставить("НужноКонтролироватьОстаткиТоваровОрганизаций", Ложь);
	КонецЕсли;
	
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус = Перечисления.СтатусыДвиженияПродукцииИМатериалов.Отгружено;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	ЕстьМаркируемаяПродукцияГИСМ = Ложь;
	
	ВидыЗапасовУказаныВручную = Ложь;
	ВидыЗапасов.Очистить();
	Серии.Очистить();
	
	Документы.ДвижениеПродукцииИМатериалов.ОтвязатьОтРаспоряжений(ЭтотОбъект);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ИдентификаторСтроки = "";
	КонецЦикла;
	
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	
	ИнициализироватьДокумент();
	
	ДвижениеПродукцииИМатериаловЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	СписокОпераций = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
	Если СписокОпераций.Количество() = 1 Тогда
		ХозяйственнаяОперация = СписокОпераций[0];
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыДвиженийПродукцииИМатериалов") Тогда
		Статус = Перечисления.СтатусыДвиженияПродукцииИМатериалов.Принято;
	КонецЕсли;
	
	ПредставлениеПолей = Документы.ДвижениеПродукцииИМатериалов.ПредставлениеПолей(ЭтотОбъект);
	Если ПредставлениеПолей.ТипОтправителя = "Подразделение" Тогда
		Отправитель = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Отправитель);
	ИначеЕсли ПредставлениеПолей.ТипОтправителя = "Кладовая" Тогда
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный);
		Отправитель = ЗначениеНастроекПовтИсп.ПолучитьЦеховуюКладовуюПоУмолчанию(Подразделение, Отправитель);
	Иначе
		Отправитель = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Отправитель);
	КонецЕсли;
	
	Если ПредставлениеПолей.ТипПолучателя = "Подразделение" Тогда
		Получатель = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Получатель);
	ИначеЕсли ПредставлениеПолей.ТипПолучателя = "Кладовая" Тогда
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный);
		Получатель = ЗначениеНастроекПовтИсп.ПолучитьЦеховуюКладовуюПоУмолчанию(Подразделение, Получатель);
	Иначе
		Получатель = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Получатель);
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		ВидЦены = Справочники.Склады.УчетныйВидЦены(Отправитель);
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство Тогда
		ПоРаспоряжениям = Истина;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатов
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатовМеждуФилиалами Тогда
		ПоРаспоряжениям = Ложь;
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы.ДвижениеПродукцииИМатериалов.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(НалогообложениеНДС, ПараметрыЗаполнения);
	
КонецПроцедуры

Функция ОпределитьРаспоряжения(РеквизитыШапки)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОстатки.Распоряжение
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(
	|			,
	|			Подразделение = &Подразделение
	|				И Склад = &Склад) КАК ТаблицаОстатки
	|ГДЕ
	|	ТаблицаОстатки.Распоряжение.Организация = &Организация
	|	И ТаблицаОстатки.КОформлениюОстаток <> 0";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", РеквизитыШапки.Организация);
	Запрос.УстановитьПараметр("Подразделение", РеквизитыШапки.Получатель);
	Запрос.УстановитьПараметр("Склад", РеквизитыШапки.Отправитель);
	
	МассивЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Распоряжение");
	
	Возврат МассивЗаказов;

КонецФункции

Процедура ЗаполнитьПоОтбору(СтруктураОтбора)
	
	СтруктураОтбора.Свойство("Организация", Организация);
	
	Если СтруктураОтбора.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперация) Тогда
		
		ПредставлениеПолей = Документы.ДвижениеПродукцииИМатериалов.ПредставлениеПолей(ЭтотОбъект);
		
		Если ПредставлениеПолей.ТипОтправителя = "Склад" Тогда
			СтруктураОтбора.Свойство("Склад", Отправитель);
		ИначеЕсли ПредставлениеПолей.ТипПолучателя = "Склад" Тогда
			СтруктураОтбора.Свойство("Склад", Получатель);
		КонецЕсли;
		
		Если ПредставлениеПолей.ТипОтправителя = "Подразделение" Тогда
			СтруктураОтбора.Свойство("Подразделение", Отправитель);
		ИначеЕсли ПредставлениеПолей.ТипПолучателя = "Подразделение" Тогда
			СтруктураОтбора.Свойство("Подразделение", Получатель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРаспоряжениям(СтруктураЗаполнения)
	
	Если СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		И СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую
		И СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		И СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
		И СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
		И СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Заполнение по распоряжениям для операции ""%1"" не предусмотрено.'"), СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация);
	КонецЕсли;
	
	МассивЗаказов = СтруктураЗаполнения.МассивЗаказов;
	
	ПараметрыЗаполнения = Документы.ДвижениеПродукцииИМатериалов.ПараметрыЗаполненияДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, СтруктураЗаполнения);
	Документы.ДвижениеПродукцииИМатериалов.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения,
		СтруктураЗаполнения.РеквизитыШапки, МассивЗаказов);
	
	ТаблицаНакладная = Товары.Выгрузить();
	
	Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьПоЗаказамОрдерам(ТаблицаНакладная, Ссылка, ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		ТаблицаНакладная.Колонки.Количество.Имя        = "КоличествоДоИзменения";
		ТаблицаНакладная.Колонки.КоличествоВОрдере.Имя = "Количество";
	Иначе
		ТаблицаНакладная.Колонки.Количество.Имя        = "КоличествоДоИзменения";
		ТаблицаНакладная.Колонки.КоличествоВЗаказе.Имя = "Количество";
	КонецЕсли;
	
	НакладныеСервер.УдалитьПустыеСтроки(ТаблицаНакладная, "Количество");
	
	Товары.Загрузить(ТаблицаНакладная);
	
	Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьШапкуДокументаПоЗаказу(ЭтотОбъект, ПараметрыЗаполнения, МассивЗаказов);
	
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		Если ПараметрыЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
			Или ПараметрыЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
			// Перенос складских серий из ордеров для получателя
			НастройкиОтборов = Документы.ДвижениеПродукцииИМатериалов.ПолучитьНастройкиОтборов(ПараметрыЗаполнения.РеквизитыШапки);
			Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьСерииПоОтгрузке(
				ЭтотОбъект, ?(НастройкиОтборов <> Неопределено, НастройкиОтборов.ТаблицаОтборов, Неопределено));
		КонецЕсли;
	КонецЕсли;
	
	Документы.ДвижениеПродукцииИМатериалов.ОбновитьЗависимыеРеквизитыТабличнойЧасти(Товары, ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПередачуМатериаловНаОснованииПриобретения(МассивЗаказов)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую) КАК ХозяйственнаяОперация,
		|	МАКСИМУМ(ТаблицаДокумента.Организация),
		|	МАКСИМУМ(ТаблицаТовары.Склад) КАК Отправитель,
		|	МАКСИМУМ(ТаблицаДокумента.НаправлениеДеятельности) КАК НаправлениеДеятельности,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокумента.Организация) КАК КоличествоОрганизаций,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаТовары.Склад) КАК КоличествоСкладов
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|			И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В (&МассивЗаказов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриобретениеТоваровУслугТовары.Склад,
		|	ПриобретениеТоваровУслугТовары.Номенклатура,
		|	ПриобретениеТоваровУслугТовары.Характеристика,
		|	ПриобретениеТоваровУслугТовары.Назначение КАК Назначение,
		|	ПриобретениеТоваровУслугТовары.Назначение КАК НазначениеОтправителя,
		|	ПриобретениеТоваровУслугТовары.Упаковка,
		|	ПриобретениеТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ПриобретениеТоваровУслугТовары.Количество КАК Количество,
		|	ПриобретениеТоваровУслугТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ПриобретениеТоваровУслугТовары.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
		|	ПриобретениеТоваровУслугТовары.Серия КАК Серия
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка В (&МассивЗаказов)
		|	И ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриобретениеТоваровУслугСерии.Склад,
		|	ПриобретениеТоваровУслугСерии.Серия,
		|	ПриобретениеТоваровУслугСерии.Количество,
		|	ПриобретениеТоваровУслугСерии.Номенклатура,
		|	ПриобретениеТоваровУслугСерии.Характеристика,
		|	ПриобретениеТоваровУслугСерии.Назначение КАК Назначение,
		|	ПриобретениеТоваровУслугСерии.Назначение КАК НазначениеОтправителя
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Серии КАК ПриобретениеТоваровУслугСерии
		|ГДЕ
		|	ПриобретениеТоваровУслугСерии.Ссылка В (&МассивЗаказов)
		|	И ПриобретениеТоваровУслугСерии.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))");
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРеквизиты = РезультатЗапроса[0].Выбрать();
	Если Не ВыборкаРеквизиты.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка шапки и табличной части
	Если ВыборкаРеквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов по разным организациям.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ВыборкаРеквизиты.КоличествоСкладов > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, т.к материалы поступили на разные склады.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТоварыОснования = РезультатЗапроса[1].Выгрузить();
	Если ТоварыОснования.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Поступление не содержит товаров. Ввод на основании невозможен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаРеквизиты);
	
	// Разбиение строк, заполнение серий со статусом 10.
	ИндексыСтрок = Новый Массив();
	
	Для Каждого СтрокаТовары Из ТоварыОснования Цикл
		Если СтрокаТовары.СтатусУказанияСерий = 10 Тогда
			ИндексыСтрок.Вставить(0, ТоварыОснования.Индекс(СтрокаТовары));
		КонецЕсли;
	КонецЦикла;
	
	СерииОснования = РезультатЗапроса[2].Выгрузить();
	
	Если ИндексыСтрок.Количество() > 0 Тогда
		КлючСерии = "Номенклатура, Характеристика, Склад, Назначение";
		ОбеспечениеСервер.ПеренестиСерииИзТаблицыВСтроки(ТоварыОснования, ИндексыСтрок, СерииОснования, КлючСерии);
	КонецЕсли;
	
	Товары.Загрузить(ТоварыОснования);
	
	Для Каждого СтрокаСерии Из СерииОснования Цикл
		Если СтрокаСерии.Количество > 0 Тогда
			НоваяСтрока = Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
			НоваяСтрока.НазначениеОтправителя = НоваяСтрока.Назначение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьВыпускПродукцииНаОснованииЗаказаКлиента(ЗаказКлиента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзКладовой) КАК ХозяйственнаяОперация,
	|	ЗаказКлиента.Организация          КАК Организация,
	|	ЗаказКлиента.Склад                КАК Получатель,
	|	ЗаказКлиента.НалогообложениеНДС   КАК ВыпускПодДеятельность,
	|	НЕ ЗаказКлиента.Проведен          КАК ЕстьОшибкиПроведен,
	|	
	|	ВЫБОР КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат ТОГДА
	|			ЗаказКлиента.НаправлениеДеятельности
	|		КОНЕЦ КАК НаправлениеДеятельности,
	|	
	|	ЗаказКлиента.Статус КАК СтатусДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		Реквизиты.ЕстьОшибкиПроведен,
		Истина);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ПараметрыТаблицыТовары.ПолучатьРаботы = Ложь;
	
	ТаблицаТовары = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента, ПараметрыТаблицыТовары);
	
	Товары.Загрузить(ТаблицаТовары);
	
	Для каждого ДанныеСтроки Из Товары Цикл
		ДанныеСтроки.НазначениеОтправителя = ДанныеСтроки.Назначение;
	КонецЦикла;
	
КонецПроцедуры

Функция ДокументОснованиеПриЗаполнении(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ОбъектыОснований") Тогда
		
		Возврат ДанныеЗаполнения.ОбъектыОснований[0];
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Товары")
		И ТипЗнч(ДанныеЗаполнения.Товары) = Тип("ТаблицаЗначений")
		И ДанныеЗаполнения.Товары.Колонки.Найти("Распоряжение") <> Неопределено Тогда
		
		Возврат ДанныеЗаполнения.Товары[0].Распоряжение;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда
		
		Возврат ДанныеЗаполнения.МассивЗаказов[0];
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда
		
		Возврат ДанныеЗаполнения[0];
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВидыЗапасов

Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	ТекстЗапроса = 	
	"ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Статус КАК Статус,
	|	&Организация КАК Организация,
	|	&ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	&Отправитель КАК Отправитель,
	|	&Получатель КАК Получатель,
	|	Неопределено КАК Партнер,
	|	Неопределено КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЛОЖЬ КАК ЕстьСделкиВТабличнойЧасти,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Получатель
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|	ПО
	|		СтруктураПредприятия.Ссылка = &Получатель
	|
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Назначение КАК НазначениеПолучателя,
	|	ТаблицаТоваров.НазначениеОтправителя КАК Назначение,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТоваров.Распоряжение КАК Заказ,
	|	ТаблицаТоваров.КодСтроки КАК КодСтроки,
	|	ТаблицаТоваров.ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	&Отправитель КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	ТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	ТаблицаТоваров.НазначениеПолучателя КАК НазначениеПолучателя,
	|	ТаблицаТоваров.ГруппаПродукции,
	|	ИСТИНА КАК ПодбиратьВидыЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	&Отправитель КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаВидыЗапасов.Серия,
	|	ТаблицаВидыЗапасов.ГруппаПродукции,
	|	ТаблицаВидыЗапасов.НазначениеПолучателя,
	|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ТаблицаВидыЗапасов.СкладОтгрузки КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад КАК Склад,
	|	ТаблицаВидыЗапасов.Сделка КАК Сделка,
	|	ТаблицаВидыЗапасов.Серия КАК СерияПолучатель,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную,
	|	ТаблицаВидыЗапасов.НазначениеПолучателя КАК НазначениеПолучателя,
	|	ТаблицаВидыЗапасов.ГруппаПродукции КАК ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Менеджер", Ответственный);
	Запрос.УстановитьПараметр("ПоРаспоряжениям", ПоРаспоряжениям);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ВидыЗапасов.Выгрузить());
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	ИменаРеквизитов = "Организация, ОрганизацияПолучатель, Статус, Дата, Отправитель, Получатель, ХозяйственнаяОперация,
						|НалогообложениеНДС";
	
	Возврат ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц, Ссылка, ИменаРеквизитов);
	
КонецФункции

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
	
	Если Не Проведен
		Или ПерезаполнитьВидыЗапасов
		Или ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
		Или ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц) Тогда
		
		ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
		
		// Если на склад приходуется продукция, произведенная без заказов, заполняем виды запасов без проверки.
		Если Не ПоРаспоряжениям
			И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
				ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) Тогда
			ПараметрыЗаполнения.ВладелецТовараВШапке = Ложь;
			ПараметрыЗаполнения.ТаблицаРеквизитовВидовЗапасовПоУмолчанию = ТаблицаРеквизитовВидовЗапасовПоУмолчаниюЗаполнение();
			ПараметрыЗаполнения.СообщатьОбОшибкахЗаполнения = Ложь;
			ПараметрыЗаполнения.ПриНехваткеТоваровОрганизацииЗаполнятьВидамиЗапасовПоУмолчанию = Истина;
		КонецЕсли;
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
		
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД", "Количество");
		
		Если Не Отказ Тогда
			ЗаполнитьАналитикуПолучателяВидовЗапасов(МенеджерВременныхТаблиц);
			ЗаполнитьВидЗапасовПолучателя();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗаполненияВидовЗапасов()
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ПродукцияДавальца);
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
		И Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства Тогда
		ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.МатериалДавальца);
	КонецЕсли;
	
	ПараметрыЗаполнения.ПодбиратьВТЧТоварыПринятыеНаОтветственноеХранение = "Всегда";
	
	// Отключаем подбор по интеркампани т.к. передача продукции\материалов по этапу должна быть оформлена только от
	// организации этапа.
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства Тогда
		ПараметрыЗаполнения.ПодбиратьВидыЗапасовПоИнтеркампани = Ложь;
	КонецЕсли;
	
	ПараметрыЗаполнения.ДокументДелаетИПриходИРасход = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ТаблицаРеквизитовВидовЗапасовПоУмолчаниюЗаполнение()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки					КАК НомерСтроки,
		|	ТаблицаТоваров.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
		|	ТаблицаТоваров.Назначение					КАК Назначение
		|ПОМЕСТИТЬ ВтТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров;
		|
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
		|	ТаблицаТоваров.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
		|	&Организация									КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)	КАК ВидЗапасов,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)		КАК НомерГТД,
		|	ВЫБОР
		|		КОГДА ИСТИНА
		|			ТОГДА &Организация
		|	КОНЕЦ											КАК ВладелецТовара,
		|	ВЫБОР
		|		КОГДА ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ											КАК Контрагент,
		|	СпрНазначения.Договор							КАК Договор,
		|	ВЫБОР
		|		КОГДА ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|	КОНЕЦ											КАК ТипЗапасов,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварТребующийПодтвержденияВыпуска) КАК ТипЗапасовРезервы
		|ИЗ
		|	ВтТаблицаТоваров КАК ТаблицаТоваров
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
		|	ПО СпрНазначения.Ссылка = ТаблицаТоваров.Назначение
		|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(, "НомерСтроки, АналитикаУчетаНоменклатуры, Назначение"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьВидЗапасовПолучателя() Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Запасы.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Запасы.ВидЗапасов КАК ВидЗапасов,
	|	Запасы.ГруппаПродукции КАК ГруппаПродукции
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	&ВидыЗапасов КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	СпрВидыЗапасов.Ссылка КАК ВидЗапасов,
	|	&ОрганизацияПолучатель КАК ОрганизацияПолучательЗапасов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|	НЕОПРЕДЕЛЕНО КАК ВладелецТовара,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Соглашение,
	|	НЕОПРЕДЕЛЕНО КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦены,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	Ключи.Номенклатура.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Запасы.ГруппаПродукции КАК ГруппаПродукции,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика) КАК ХозОперацияВидаЗапаса
	|ИЗ
	|	Запасы КАК Запасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК СпрВидыЗапасов
	|		ПО (СпрВидыЗапасов.Ссылка = Запасы.ВидЗапасов)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|		ПО (Ключи.Ссылка = Запасы.АналитикаУчетаНоменклатуры)
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеПолуфабрикатовМеждуФилиалами)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ВидыЗапасов", ВидыЗапасов.Выгрузить(, "НомерСтроки, АналитикаУчетаНоменклатуры, ВидЗапасов, ГруппаПродукции"));
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатовМеждуФилиалами Тогда
		НалогообложениеОрганизации = Справочники.Организации.НалогообложениеНДС(ОрганизацияПолучатель, Неопределено, Дата);
	Иначе
		НалогообложениеОрганизации = Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата);
	КонецЕсли;
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	ВидыЗапасовПолучателя = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидЗапасовПолучателя = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
			Выборка.ОрганизацияПолучательЗапасов,
			Выборка.ХозОперацияВидаЗапаса,
			Выборка);
		ВидыЗапасовПолучателя.Вставить(Выборка.НомерСтроки, ВидЗапасовПолучателя);
	КонецЦикла;
	
	Для Каждого Запас Из ВидыЗапасов Цикл
		ВидЗапасовПолучателя = ВидыЗапасовПолучателя[Запас.НомерСтроки];
		Если Не ЗначениеЗаполнено(ВидЗапасовПолучателя) Тогда
			ВидЗапасовПолучателя = ?(
				Запас.ВидЗапасов.РеализацияЗапасовДругойОрганизации, 
				Справочники.ВидыЗапасов.ВидЗапасовДокумента(
					Запас.ВидЗапасов.Организация,, 
					Запас.ВидЗапасов), 
				Запас.ВидЗапасов);
		КонецЕсли;
		Запас.ВидЗапасовПолучателя = ВидЗапасовПолучателя;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуПолучателяВидовЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.НазначениеПолучателя КАК НазначениеПолучателя,
	|	ТаблицаТоваров.ГруппаПродукции КАК ГруппаПродукции,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТоваров.НазначениеПолучателя,
	|	ТаблицаТоваров.ГруппаПродукции
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	Количество УБЫВ";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	ОтборТоваров = Новый Структура("АналитикаУчетаНоменклатуры");
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		КоличествоТоваров = ВыборкаТовары.Количество;
		
		ЗаполнитьЗначенияСвойств(ОтборТоваров, ВыборкаТовары);
		
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(ОтборТоваров) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары, "Серия, ГруппаПродукции, НазначениеПолучателя");
			НоваяСтрока.Количество = Количество;
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьРеквизитыШапки(ПредставлениеПолей, Отказ)

	Если НЕ ЗначениеЗаполнено(Отправитель) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"), ПредставлениеПолей.Отправитель);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Отправитель",, Отказ); 
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"), ПредставлениеПолей.Получатель);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Получатель",, Отказ); 
	КонецЕсли; 
	Если Товары.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не введено ни одной строки в список ""%1""'"), ПредставлениеПолей.Товары);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Товары",, Отказ); 
	КонецЕсли;
	
	Если Отправитель = Получатель И ЗначениеЗаполнено(Отправитель)
		И Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатовМеждуФилиалами Тогда
		Если ПредставлениеПолей.ТипОтправителя = "Склад" 
				И ПредставлениеПолей.ТипПолучателя = "Кладовая"
			ИЛИ ПредставлениеПолей.ТипОтправителя = "Кладовая" 
				И ПредставлениеПолей.ТипПолучателя = "Склад" Тогда
			ТекстСообщения = НСтр("ru = 'Склад и цеховая кладовая должны быть разными'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отправитель и получатель должны быть разными'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Отправитель",, Отказ); 
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой Тогда
		ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект,Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТовары(ПредставлениеПолей, Отказ)
	
	ПроверятьКодСтроки = ПоРаспоряжениям
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство);
	
	ШаблонСообщения = НСтр("ru='Не допускается превышение запланированного количества товара по этапу в строке %1 списка ""%2"".'");
	ШаблонСообщенияПустоеРаспоряжение = НСтр("ru = 'В строке %1 списка ""%2"" не заполнено распоряжение.'");
	
	Для Каждого ДанныеСтроки Из Товары Цикл
		Если ПроверятьКодСтроки
			И ДанныеСтроки.КодСтроки = 0
			И ЗначениеЗаполнено(ДанныеСтроки.Распоряжение) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(ДанныеСтроки.НомерСтроки, "ЧГ="), ПредставлениеПолей.Товары);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ДанныеСтроки.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
		КонецЕсли;
		Если ПоРаспоряжениям
			И Не ЗначениеЗаполнено(Распоряжение)
			И Не ЗначениеЗаполнено(ДанныеСтроки.Распоряжение) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщенияПустоеРаспоряжение, Формат(ДанныеСтроки.НомерСтроки, "ЧГ="), ПредставлениеПолей.Товары);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ДанныеСтроки.НомерСтроки, "Распоряжение");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура ОтключитьПроверкуЗаполненияПоХозяйственнойОперации(МассивНепроверяемыхРеквизитов)

	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		// Если реквизит не используется для хозяйственной операции, исключаем данный реквизит из проверки.
		Если МассивРеквизитовОперации.Найти(ЭлементМассива) = Неопределено Тогда
			МассивНепроверяемыхРеквизитов.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// См. описание в комментарии к одноименной процедуре в модуле УправлениеДоступом.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Организация;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Отправитель;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Получатель;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	
	// Контроль при перепроведении и отмене проведения
	Если ПоРаспоряжениям Или Не ДополнительныеСвойства.ЭтоНовый Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
			Массив.Добавить(Движения.ТоварыКОтгрузке);
		КонецЕсли;
	КонецЕсли;

	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения.
	КонтролироватьТоварыОрганизаций = Истина;
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		КонтролироватьТоварыОрганизаций = Ложь;
	ИначеЕсли Не ПоРаспоряжениям
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) Тогда
		КонтролироватьТоварыОрганизаций = Ложь;
	ИначеЕсли ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И ПоРаспоряжениям
		И ТипЗнч(Получатель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		КонтролироватьТоварыОрганизаций = Ложь;
	КонецЕсли;
	
	Если КонтролироватьТоварыОрганизаций Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ПоРаспоряжениям 
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства) Тогда
		Массив.Добавить(Движения.РаспоряженияНаПередачуИзПроизводства);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.ЗаказыМатериаловВПроизводство);
		
		Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой Тогда
			
			Массив.Добавить(Движения.СвободныеОстатки);
			Массив.Добавить(Движения.ОбеспечениеЗаказов);
			
			Если НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов).ИспользоватьСерииНоменклатуры Тогда
				Массив.Добавить(Движения.ТоварыНаСкладах);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

// Функция проверят изменение табличной части "Товары" относительно табличной части "Виды запасов" документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - Менеджер временных таблиц.
//
// Возвращаемое значение:
//	Булево - Истина - товары изменены
//           Ложь - товары не изменены.
//
Функция ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.Назначение КАК Назначение,
	|		ТаблицаТоваров.ГруппаПродукции КАК ГруппаПродукции,
	|		(ВЫБОР ТаблицаТоваров.СтатусУказанияСерийПолучатель
	|			КОГДА 14 ТОГДА ТаблицаТоваров.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КОНЕЦ) КАК Серия,
	|		ТаблицаТоваров.Количество КАК Количество
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|		ТаблицаВидыЗапасов.ГруппаПродукции КАК ГруппаПродукции,
	|		ТаблицаВидыЗапасов.СерияПолучатель КАК Серия,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.ГруппаПродукции,
	|	ТаблицаТоваров.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
