#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Возврат; //В дальнейшем будет добавлен код команд
	
КонецПроцедуры

// Добавляет команду создания документа "Выработка сотрудников".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииСозданиеВыработкиСотрудников(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВыработкаСотрудников) Тогда
		КомандаСоздатьНаОсновании						= КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик			= "СозданиеНаОснованииУТКлиент.СозданиеВыработкиСотрудников";
		КомандаСоздатьНаОсновании.Менеджер				= "Документ.ВыработкаСотрудников";
		КомандаСоздатьНаОсновании.Идентификатор			= "СозданиеВыработкиСотрудников";
		КомандаСоздатьНаОсновании.Представление			= НСтр("ru = 'Выработка сотрудников'");
		КомандаСоздатьНаОсновании.РежимЗаписи			= "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции	= "ИспользоватьПроизводство,ИспользоватьУправлениеРемонтами,ИспользоватьУчетПрочихДоходовРасходов";
		КомандаСоздатьНаОсновании.МножественныйВыбор	= Истина;
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

// Формирует документы Выработка сотрудников за период по переданным организациям. Выполняет диагностику и регистрирует
// проблему, если обработаны не все распоряжения. Вызывается из формы закрытия месяца.
//
// Параметры:
//   ПараметрыОбработчика - Структура - параметры закрытия месяца.
//
Процедура ОформитьПриЗакрытииМесяца(ПараметрыОбработчика) Экспорт
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Организация", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	СтруктураОтбора.Вставить("НачалоПериода", НачалоМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
	СтруктураОтбора.Вставить("КонецПериода", КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
	СтруктураОтбора.Вставить("ВключатьВПериодВыполненияРабот", Истина);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено);
	СформироватьДокументы(СтруктураОтбора, АдресВХранилище, Истина);
	Результат = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Для Каждого Строка Из Результат.СписокОшибок Цикл 
		
		ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
			Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыработкиСотрудников,
			Строка.Организация,
			НачалоМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
		
		ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРегистрации,
			НСтр("ru='Рекомендуется оформить вручную из списка к оформлению. При автоматическом оформлении диагностированы ошибки'"),
			,
			Строка.ТекстОшибки);
			
	КонецЦикла;
	
КонецПроцедуры

// Формирует документы по переданному отбору и помещает их в безопасное хранилище.
//
// Параметры:
//   СтруктураОтбора - Структура - содержит отбор
//     - Организация   - СправочникСсылка.Организации - отбор по организации
//     - Подразделение - СправочникСсылка.СтруктураПредприятия - отбор по подразделению
//     - ВидНаряда     - ПеречислениеСсылка.ВидыБригадныхНарядов - отбор по виду наряда
//     - Бригада       - СправочникСсылка.Бригады - отбор по бригаде
//   АдресРезультата - адрес, по которому помещается служебная информация: список ошибок и количество документов
//   УдалятьДокументыСОшибками - если Истина, то документы, которые не удалось провести, удаляются.
//
Процедура СформироватьДокументы(СтруктураОтбора, АдресРезультата, УдалятьДокументыСОшибками = Неопределено) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Документ.ВыработкаСотрудников.МодульМенеджера.СформироватьДокументы");
	
	Результат = Новый Структура;
	
	СписокДокументов = Новый СписокЗначений;
	СписокОшибок = Новый Массив;
	
	СтруктураШапки = Новый Структура("Бригада,ВидНаряда,Организация,НачалоПериода,КонецПериода,Подразделение");
	ТекущийДокумент = Неопределено;
	
	Выборка = ТрудозатратыКОформлению(СтруктураОтбора).Выбрать();
	
	СуществующиеДокументы = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Если (СтруктураШапки.Бригада <> Выборка.Бригада И ЗначениеЗаполнено(Выборка.Бригада))
			Или СтруктураШапки.ВидНаряда <> Выборка.ВидНаряда
			Или СтруктураШапки.Организация <> Выборка.Организация
			Или СтруктураШапки.НачалоПериода <> Выборка.НачалоПериода
			Или СтруктураШапки.КонецПериода <> Выборка.КонецПериода
			Или СтруктураШапки.Подразделение <> Выборка.Подразделение Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураШапки, Выборка);
			
			ЗаписатьНовыйДокумент(ТекущийДокумент, СписокДокументов, СписокОшибок);
			
			ТекущийДокумент = Документы.ВыработкаСотрудников.СоздатьДокумент();
			ТекущийДокумент.ПолучитьСсылкуНового();
			
			ТекущийДокумент.Заполнить(Выборка);
			
			Если СтруктураОтбора.Свойство("ВключатьВПериодВыполненияРабот") 
				И СтруктураОтбора.ВключатьВПериодВыполненияРабот Тогда
				ТекущийДокумент.Дата = КонецМесяца(Выборка.КонецПериода);
			Иначе
				ТекущийДокумент.Дата = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = ТекущийДокумент.ВидыРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ЗаписатьНовыйДокумент(ТекущийДокумент, СписокДокументов, СписокОшибок);
	
	Если УдалятьДокументыСОшибками = Истина Тогда
		
		Для Каждого Строка Из СписокОшибок Цикл
			
			Если Строка.ТипОшибки = "ДокументСуществует" Тогда
				Продолжить;
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.ВыработкаСотрудников");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Строка.Документ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
				ДокументОбъект = Строка.Документ.ПолучитьОбъект();
				ДокументОбъект.Удалить();
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ДобавитьОшибкуАвтоматическогоСоздания(ДокументОбъект, СписокОшибок, "Заполнение", ОписаниеОшибки());
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПолучитьСообщенияПользователю(Истина);
	
	Владелец = Пользователи.АвторизованныйПользователь();
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СписокДокументов.ВыгрузитьЗначения(), "ФормаСозданнияВыработкиСотрудников");
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.Вставить("СписокОшибок", СписокОшибок);
	Результат.Вставить("КоличествоДокументов", СписокДокументов.Количество());
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, СписокДокументов.Количество());
	
КонецПроцедуры

// Заполняет таблицу выполненных работ по остаткам к оформлению в соответствии с отбором.
//
// Параметры:
//  Объект			- ДокументОбъект.ВыработкаСотрудников, ДанныеФормыСтруктура - Документ, который нужно заполнить
//  СтруктураОтбора - Структура - структура параметров заполнения.
//
Процедура ЗаполнитьВидыРаботПоОстаткам(Объект, СтруктураОтбора) Экспорт
	
	КОформлению = ТрудозатратыКОформлению(СтруктураОтбора);
	
	Объект.ВидыРабот.Загрузить(КОформлению.Выгрузить());
	
КонецПроцедуры

// Возвращает результат запроса по остаткам трудозатрат к оформлению в соответствии с отбором.
//
// Параметры:
//	СтруктураОтбора	- Структура - содержит отбор
//  							- Организация	- СправочникСсылка.Организации - отбор по организации
//  							- Подразделения	- СправочникСсылка.СтруктураПредприятия - отбор по подразделению
//  							- ВидНаряда		- ПеречислениеСсылка.ВидыБригадныхНарядов - отбор по виду наряда
//  							- Бригада		- СправочникСсылка.Бригады - отбор по бригаде
//  							- Работник		- СправочникСсылка.ФизическиеЛица - отбор по бригаде
//  							- Распоряжения	- Массив - отбор по распоряжениям
//								- ВидыРабот		- Массив - отбор по видам работ
//	МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц - менеджер, если результат требуется поместить во временную таблицу.
//
// Возвращаемое значение:
//   РезультатЗапроса   - трудозатраты к оформлению.
//
Функция ТрудозатратыКОформлению(СтруктураОтбора, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Перем Организации, Подразделения, Бригады, Работники, ВидыНарядов, Распоряжения, ВидыРабот,
		Периоды, НачалоПериода, КонецПериода, Периодичность, СворачиватьРаспоряжения;
	
	Если СтруктураОтбора.Свойство("Организация") И ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
		Организации = Новый Массив;
		Организации.Добавить(СтруктураОтбора.Организация);
	ИначеЕсли НЕ СтруктураОтбора.Свойство("Организации", Организации) Тогда
		Организации = Новый Массив;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Подразделение") И ЗначениеЗаполнено(СтруктураОтбора.Подразделение) Тогда
		Подразделения = Новый Массив;
		Подразделения.Добавить(СтруктураОтбора.Подразделение);
	ИначеЕсли НЕ СтруктураОтбора.Свойство("Подразделения", Подразделения) Тогда
		Подразделения = Новый Массив;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ВидНаряда") Тогда
		ВидыНарядов = Новый Массив;
		ВидыНарядов.Добавить(СтруктураОтбора.ВидНаряда);
	ИначеЕсли НЕ СтруктураОтбора.Свойство("ВидыНарядов", ВидыНарядов) Тогда
		ВидыНарядов = Новый Массив;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Бригада") И ЗначениеЗаполнено(СтруктураОтбора.Бригада) Тогда
		Бригады = Новый Массив;
		Бригады.Добавить(СтруктураОтбора.Бригада);
	ИначеЕсли НЕ СтруктураОтбора.Свойство("Бригады", Бригады) Тогда
		Бригады = Новый Массив;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Работник") И ЗначениеЗаполнено(СтруктураОтбора.Работник) Тогда
		Работники = Новый Массив;
		Работники.Добавить(СтруктураОтбора.Работник);
	ИначеЕсли НЕ СтруктураОтбора.Свойство("Работники", Работники) Тогда
		Работники = Новый Массив;
	КонецЕсли;
	
	Если НЕ СтруктураОтбора.Свойство("Распоряжения", Распоряжения) Тогда
		Распоряжения = Новый Массив;
	КонецЕсли;
	
	Если НЕ СтруктураОтбора.Свойство("ВидыРабот", ВидыРабот) Тогда
		ВидыРабот = Новый Массив;
	КонецЕсли;
	
	Если НЕ СтруктураОтбора.Свойство("Периоды", Периоды) Тогда
		Периоды = Новый Массив;
	КонецЕсли;
	
	Если НЕ СтруктураОтбора.Свойство("НачалоПериода", НачалоПериода) Тогда
		НачалоПериода = Дата(1,1,1);
	КонецЕсли;
	
	Если НЕ СтруктураОтбора.Свойство("КонецПериода", КонецПериода) Тогда
		КонецПериода = Дата(1,1,1);
	КонецЕсли;
	
	Если НЕ СтруктураОтбора.Свойство("Периодичность", Периодичность) Тогда
		Периодичность = Перечисления.ПериодичностьОформленияВыработкиСотрудников.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ СтруктураОтбора.Свойство("СворачиватьРаспоряжения", СворачиватьРаспоряжения) Тогда
		СворачиватьРаспоряжения = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Иначе
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ДокументИсключение") Тогда
		Запрос.УстановитьПараметр("ДокументИсключение", СтруктураОтбора.ДокументИсключение);
	Иначе
		Запрос.УстановитьПараметр("ДокументИсключение", Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организации",                   Организации);
	Запрос.УстановитьПараметр("БезОтбораПоОрганизациям",       Организации.Количество() = 0);
	
	Запрос.УстановитьПараметр("Подразделения",                 Подразделения);
	Запрос.УстановитьПараметр("БезОтбораПоПодразделениям",     Подразделения.Количество() = 0);
	
	Запрос.УстановитьПараметр("ВидыНарядов",                   ВидыНарядов);
	Запрос.УстановитьПараметр("БезОтбораПоВидамНарядов",       ВидыНарядов.Количество() = 0);
	
	Запрос.УстановитьПараметр("Бригады",                       Бригады);
	Запрос.УстановитьПараметр("БезОтбораПоБригадам",           Бригады.Количество() = 0);
	
	Запрос.УстановитьПараметр("Работники",                     Работники);
	Запрос.УстановитьПараметр("БезОтбораПоРаботникам",         Работники.Количество() = 0);
	
	Запрос.УстановитьПараметр("Периоды",                       Периоды);
	Запрос.УстановитьПараметр("БезОтбораПоПериодам",           Периоды.Количество() = 0);
	
	Запрос.УстановитьПараметр("Распоряжения",                  Распоряжения);
	Запрос.УстановитьПараметр("БезОтбораПоРаспоряжениям",      Распоряжения.Количество() = 0);
	
	Запрос.УстановитьПараметр("ВидыРабот",                     ВидыРабот);
	Запрос.УстановитьПараметр("БезОтбораПоВидамРабот",         ВидыРабот.Количество() = 0);
	
	Запрос.УстановитьПараметр("НачалоПериода",                 НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                  КонецПериода);
	
	Запрос.УстановитьПараметр("Периодичность",                 Периодичность);
	Запрос.УстановитьПараметр("СворачиватьРаспоряжения",       СворачиватьРаспоряжения);
	
	Запрос.УстановитьПараметр("АналитическийУчетПоГруппамПродукции", ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции"));
	
	#Область ТекстЗапроса
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.ПериодичностьОформленияВыработкиСотрудников.ПустаяСсылка)
	|			ТОГДА Подразделения.ПериодичностьОформленияВыработки
	|		ИНАЧЕ &Периодичность
	|	КОНЕЦ КАК Периодичность,
	|	ТрудозатратыКОформлению.ВидРабот КАК ВидРабот,
	|	ТрудозатратыКОформлению.КоличествоОстаток КАК Количество,
	|	ТрудозатратыКОформлению.Организация КАК Организация,
	|	ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
	|	ТрудозатратыКОформлению.Исполнитель КАК Исполнитель,
	|	ТрудозатратыКОформлению.Подразделение КАК Подразделение,
	|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения,
	|	ВЫБОР
	|		КОГДА ИСТИНА
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(
	|			,
	|			(&БезОтбораПоОрганизациям
	|					ИЛИ Организация В (&Организации))
	|				И (&БезОтбораПоРаспоряжениям
	|					ИЛИ Распоряжение В (&Распоряжения))
	|				И (&БезОтбораПоВидамРабот
	|					ИЛИ ВидРабот В (&ВидыРабот))
	|				И (&БезОтбораПоПодразделениям
	|					ИЛИ Подразделение В (&Подразделения))
	|				И (&БезОтбораПоБригадам
	|					ИЛИ Исполнитель В (&Бригады) ИЛИ Исполнитель Ссылка Справочник.ФизическиеЛица)
	|				И (&БезОтбораПоРаботникам
	|					ИЛИ Исполнитель В (&Работники) ИЛИ Исполнитель Ссылка Справочник.Бригады)
	|	) КАК ТрудозатратыКОформлению
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО Подразделения.Ссылка = ТрудозатратыКОформлению.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.ПериодичностьОформленияВыработкиСотрудников.ПустаяСсылка)
	|			ТОГДА Подразделения.ПериодичностьОформленияВыработки
	|		ИНАЧЕ &Периодичность
	|	КОНЕЦ КАК Периодичность,
	|	ТрудозатратыКОформлению.ВидРабот КАК ВидРабот,
	|	ТрудозатратыКОформлению.Количество КАК Количество,
	|	ТрудозатратыКОформлению.Организация КАК Организация,
	|	ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
	|	ТрудозатратыКОформлению.Исполнитель КАК Исполнитель,
	|	ТрудозатратыКОформлению.Подразделение КАК Подразделение,
	|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения,
	|	ВЫБОР
	|		КОГДА ИСТИНА
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	РегистрНакопления.ТрудозатратыКОформлению КАК ТрудозатратыКОформлению
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО Подразделения.Ссылка = ТрудозатратыКОформлению.Подразделение
	|
	|ГДЕ
	|	(&БезОтбораПоОрганизациям ИЛИ ТрудозатратыКОформлению.Организация В (&Организации))
	|	И (&БезОтбораПоРаспоряжениям ИЛИ ТрудозатратыКОформлению.Распоряжение В (&Распоряжения))
	|	И (&БезОтбораПоВидамРабот ИЛИ ТрудозатратыКОформлению.ВидРабот В (&ВидыРабот))
	|	И (&БезОтбораПоПодразделениям ИЛИ ТрудозатратыКОформлению.Подразделение В (&Подразделения))
	|	И (&БезОтбораПоБригадам ИЛИ ТрудозатратыКОформлению.Исполнитель В (&Бригады) ИЛИ Исполнитель Ссылка Справочник.Бригады)
	|	И (&БезОтбораПоРаботникам ИЛИ ТрудозатратыКОформлению.Исполнитель В (&Работники) ИЛИ Исполнитель Ссылка Справочник.Бригады)
	|	И ТрудозатратыКОформлению.Регистратор = &ДокументИсключение
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТрудозатратыПроизводстваБезЗаказа.Ссылка.Дата		КАК ДатаВыполнения,
	|	ТрудозатратыПроизводстваБезЗаказа.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|	ТрудозатратыПроизводстваБезЗаказа.Ссылка			КАК Распоряжение,
	|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения		КАК КодСтрокиРаспоряжения,
	|	СпрПартииПроизводства.Ссылка						КАК ПартияПроизводства,
	|	СпрПартииПроизводства.ГруппаПродукции				КАК ГруппаПродукции
	|ПОМЕСТИТЬ ВтПартииПроизводстваБезЗаказа
	|ИЗ
	|	Остатки КАК ТрудозатратыКОформлению
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа.Трудозатраты КАК ТрудозатратыПроизводстваБезЗаказа
	|		ПО ТрудозатратыПроизводстваБезЗаказа.Ссылка = ТрудозатратыКОформлению.Распоряжение
	|		И ТрудозатратыПроизводстваБезЗаказа.КодСтроки = ТрудозатратыКОформлению.КодСтрокиРаспоряжения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = ТрудозатратыПроизводстваБезЗаказа.Ссылка
	|		И СпрПартииПроизводства.Код = ТрудозатратыПроизводстваБезЗаказа.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТрудозатратыПроизводстваБезЗаказа.Ссылка,
	|	ТрудозатратыПроизводстваБезЗаказа.СтатьяКалькуляции,
	|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения,
	|	СпрПартииПроизводства.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТрудозатратыПроизводстваБезЗаказа.Ссылка,
	|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ТрудозатратыКОформлению.Исполнитель Ссылка Справочник.Бригады
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Бригадный)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Персональный)
	|	КОНЕЦ											КАК ВидНаряда,
	|	ПартииПроизводстваБезЗаказа.ДатаВыполнения		КАК ДатаВыполнения,
	|	ТрудозатратыКОформлению.Периодичность			КАК Периодичность,
	|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения	КАК КодСтрокиРаспоряжения,
	|	ТрудозатратыКОформлению.ВидРабот				КАК ВидРабот,
	|	ТрудозатратыКОформлению.Количество				КАК Количество,
	|	ТрудозатратыКОформлению.Организация				КАК Организация,
	|	ТрудозатратыКОформлению.Распоряжение			КАК Распоряжение,
	|	ТрудозатратыКОформлению.Исполнитель				КАК Исполнитель,
	|	ТрудозатратыКОформлению.Подразделение			КАК Подразделение,
	|	ПартииПроизводстваБезЗаказа.ГруппаПродукции		КАК ГруппаПродукции,
	|	ПартииПроизводстваБезЗаказа.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплаты
	|ПОМЕСТИТЬ втТрудозатратыКОформлению
	|ИЗ
	|	Остатки КАК ТрудозатратыКОформлению
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПартииПроизводстваБезЗаказа КАК ПартииПроизводстваБезЗаказа
	|		ПО ПартииПроизводстваБезЗаказа.Распоряжение = ТрудозатратыКОформлению.Распоряжение
	|		И ПартииПроизводстваБезЗаказа.КодСтрокиРаспоряжения = ТрудозатратыКОформлению.КодСтрокиРаспоряжения
	|
	|;
	|
	|ВЫБРАТЬ
	|	ДД.ВидНаряда КАК ВидНаряда,
	|	ДД.ДатаВыполнения КАК ДатаВыполнения,
	|	ВЫБОР
	|		КОГДА ДД.Периодичность = ЗНАЧЕНИЕ(Перечисление.ПериодичностьОформленияВыработкиСотрудников.День)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДД.ДатаВыполнения, ДЕНЬ)
	|		КОГДА ДД.Периодичность = ЗНАЧЕНИЕ(Перечисление.ПериодичностьОформленияВыработкиСотрудников.Месяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДД.ДатаВыполнения, МЕСЯЦ)
	|		ИНАЧЕ
	|			ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА ДД.Периодичность = ЗНАЧЕНИЕ(Перечисление.ПериодичностьОформленияВыработкиСотрудников.День)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДД.ДатаВыполнения, ДЕНЬ)
	|		КОГДА ДД.Периодичность = ЗНАЧЕНИЕ(Перечисление.ПериодичностьОформленияВыработкиСотрудников.Месяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДД.ДатаВыполнения, МЕСЯЦ)
	|		ИНАЧЕ
	|			ДД.ДатаВыполнения
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА ДД.Периодичность = ЗНАЧЕНИЕ(Перечисление.ПериодичностьОформленияВыработкиСотрудников.День)
	|			ТОГДА КОНЕЦПЕРИОДА(ДД.ДатаВыполнения, ДЕНЬ)
	|		КОГДА ДД.Периодичность = ЗНАЧЕНИЕ(Перечисление.ПериодичностьОформленияВыработкиСотрудников.Месяц)
	|			ТОГДА КОНЕЦПЕРИОДА(ДД.ДатаВыполнения, МЕСЯЦ)
	|		ИНАЧЕ
	|			ДД.ДатаВыполнения
	|	КОНЕЦ КАК КонецПериода,
	|	ДД.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения,
	|	ДД.ВидРабот КАК ВидРабот,
	|	ДД.Количество,
	|	ЕСТЬNULL(Расценки.Расценка,0) КАК Расценка,
	|	ДД.Количество * ЕСТЬNULL(Расценки.Расценка,0) КАК Сумма,
	|	ДД.Организация КАК Организация,
	|	ДД.Распоряжение КАК Распоряжение,
	|	ДД.Исполнитель КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА ДД.Исполнитель Ссылка Справочник.Бригады
	|			ТОГДА ДД.Исполнитель
	|	КОНЕЦ КАК Бригада,
	|	ВЫБОР
	|		КОГДА ДД.Исполнитель Ссылка Справочник.ФизическиеЛица
	|			ТОГДА ДД.Исполнитель
	|	КОНЕЦ КАК Работник,
	|	ДД.Подразделение КАК Подразделение,
	|	ДД.ГруппаПродукции КАК ГруппаПродукции,
	|	ДД.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ДД.СпособОтраженияЗарплаты КАК СпособОтраженияЗарплаты
	|ПОМЕСТИТЬ ТрудозатратыКОформлению
	|ИЗ
	|	втТрудозатратыКОформлению КАК ДД
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасценкиРаботСотрудников.СрезПоследних(&КонецПериода) КАК Расценки
	|	ПО ДД.ВидРабот = Расценки.ВидРабот
	|	И ДД.ВидРабот.КвалификационныйРазряд = Расценки.КвалификационныйРазряд
	|		
	|ГДЕ
	|	(&БезОтбораПоПериодам ИЛИ
	|		ВЫБОР
	|			КОГДА ДД.Периодичность = ЗНАЧЕНИЕ(Перечисление.ПериодичностьОформленияВыработкиСотрудников.День)
	|				ТОГДА НАЧАЛОПЕРИОДА(ДД.ДатаВыполнения, ДЕНЬ) В (&Периоды)
	|			КОГДА ДД.Периодичность = ЗНАЧЕНИЕ(Перечисление.ПериодичностьОформленияВыработкиСотрудников.Месяц)
	|				ТОГДА НАЧАЛОПЕРИОДА(ДД.ДатаВыполнения, МЕСЯЦ) В (&Периоды)
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ)
	|	И (&НачалоПериода = ДАТАВРЕМЯ(1,1,1) ИЛИ НАЧАЛОПЕРИОДА(ДД.ДатаВыполнения, ДЕНЬ) >= &НачалоПериода)
	|	И (&КонецПериода = ДАТАВРЕМЯ(1,1,1) ИЛИ НАЧАЛОПЕРИОДА(ДД.ДатаВыполнения, ДЕНЬ) <= &КонецПериода)
	|	И (&БезОтбораПоВидамНарядов ИЛИ ДД.ВидНаряда В (&ВидыНарядов))
	|
	|;
	|
	|ВЫБРАТЬ
	|	ДД.ВидНаряда КАК ВидНаряда,
	|	ДД.Период КАК Период,
	|	МИНИМУМ(НачалоПериода(ДД.НачалоПериода, ДЕНЬ)) КАК НачалоПериода,
	|	МАКСИМУМ(КонецПериода(ДД.КонецПериода, ДЕНЬ)) КАК КонецПериода,
	|	ДД.Организация КАК Организация,
	|	ДД.Исполнитель КАК Исполнитель,
	|	ДД.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	ТрудозатратыКОформлению КАК ДД
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДД.ВидНаряда,
	|	ДД.Период,
	|	ДД.Подразделение,
	|	ДД.Исполнитель,
	|	ДД.Организация
	|
	|;
	|
	|ВЫБРАТЬ
	|	ДД.ВидНаряда КАК ВидНаряда,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаВыполнения,
	|	ДД.Период КАК Период,
	|	Периоды.НачалоПериода КАК НачалоПериода,
	|	Периоды.КонецПериода КАК КонецПериода,
	|	0 КАК КодСтрокиРаспоряжения,
	|	ЗНАЧЕНИЕ(Справочник.ВидыРаботСотрудников.ПустаяСсылка) КАК ВидРабот,
	|	СУММА(ДД.Количество) КАК Количество,
	|	0 КАК Расценка,
	|	СУММА(ДД.Сумма) КАК Сумма,
	|	ДД.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Распоряжение,
	|	НЕОПРЕДЕЛЕНО КАК Исполнитель,
	|	ДД.Бригада КАК Бригада,
	|	НЕОПРЕДЕЛЕНО КАК Работник,
	|	ДД.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяКалькуляции,
	|	НЕОПРЕДЕЛЕНО КАК СпособОтраженияЗарплаты
	|ПОМЕСТИТЬ втВидыРабот
	|ИЗ
	|	ТрудозатратыКОформлению КАК ДД
	|	ЛЕВОЕ СОЕДИНЕНИЕ Периоды КАК Периоды
	|		ПО ДД.ВидНаряда = Периоды.ВидНаряда
	|		И ДД.Период = Периоды.Период
	|		И ДД.Подразделение = Периоды.Подразделение
	|		И ДД.Организация = Периоды.Организация
	|		И ДД.Исполнитель = Периоды.Исполнитель
	|		
	|ГДЕ
	|	&СворачиватьРаспоряжения
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДД.ВидНаряда,
	|	ДД.Период,
	|	ДД.Подразделение,
	|	ДД.Организация,
	|	Периоды.НачалоПериода,
	|	Периоды.КонецПериода,
	|	ДД.Бригада
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.ВидНаряда,
	|	ДД.ДатаВыполнения КАК ДатаВыполнения,
	|	ДД.Период КАК Период,
	|	Периоды.НачалоПериода КАК НачалоПериода,
	|	Периоды.КонецПериода КАК КонецПериода,
	|	ДД.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения,
	|	ДД.ВидРабот КАК ВидРабот,
	|	СУММА(ДД.Количество) КАК Количество,
	|	МАКСИМУМ(ДД.Расценка) КАК Расценка,
	|	СУММА(ДД.Сумма) КАК Сумма,
	|	ДД.Организация КАК Организация,
	|	ДД.Распоряжение КАК Распоряжение,
	|	ДД.Исполнитель КАК Исполнитель,
	|	ДД.Бригада КАК Бригада,
	|	ДД.Работник КАК Работник,
	|	ДД.Подразделение КАК Подразделение,
	|	ДД.ГруппаПродукции КАК ГруппаПродукции,
	|	ДД.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ДД.СпособОтраженияЗарплаты КАК СпособОтраженияЗарплаты
	|ИЗ
	|	ТрудозатратыКОформлению КАК ДД
	|	ЛЕВОЕ СОЕДИНЕНИЕ Периоды КАК Периоды
	|		ПО ДД.ВидНаряда = Периоды.ВидНаряда
	|		И ДД.Период = Периоды.Период
	|		И ДД.Подразделение = Периоды.Подразделение
	|		И ДД.Организация = Периоды.Организация
	|		И ДД.Исполнитель = Периоды.Исполнитель
	|		
	|ГДЕ
	|	НЕ &СворачиватьРаспоряжения
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДД.ВидНаряда,
	|	ДД.ДатаВыполнения,
	|	ДД.Период,
	|	Периоды.НачалоПериода,
	|	Периоды.КонецПериода,
	|	ДД.КодСтрокиРаспоряжения,
	|	ДД.ВидРабот,
	|	ДД.Организация,
	|	ДД.Распоряжение,
	|	ДД.Исполнитель,
	|	ДД.Бригада,
	|	ДД.Работник,
	|	ДД.ГруппаПродукции,
	|	ДД.Подразделение,
	|	ДД.СтатьяКалькуляции,
	|	ДД.СпособОтраженияЗарплаты
	|
	|;
	|
	|ВЫБРАТЬ
	|	ДД.ВидНаряда КАК ВидНаряда,
	|	ДД.Организация КАК Организация,
	|	ДД.НачалоПериода КАК НачалоПериода,
	|	ДД.КонецПериода КАК КонецПериода,
	|	ДД.Бригада КАК Бригада,
	|	ДД.Подразделение КАК Подразделение,
	
	|	ДД.Подразделение.ИспользоватьКТУ КАК ИспользоватьКТУ,
	|	ДД.Подразделение.ИспользоватьТарифныеСтавки КАК ИспользоватьТарифныеСтавки,
	|	ДД.Подразделение.ИспользоватьОтработанноеВремя КАК ИспользоватьОтработанноеВремя,
	|	ДД.ДатаВыполнения КАК ДатаВыполнения,
	|	ДД.Период КАК Период,
	|	ДД.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения,
	|	ДД.ВидРабот КАК ВидРабот,
	|	ДД.Количество КАК Количество,
	|	ДД.Расценка КАК Расценка,
	|	ДД.Сумма КАК Сумма,
	|	ДД.ГруппаПродукции КАК ГруппаПродукции,
	|	ДД.Распоряжение КАК Распоряжение,
	|	ДД.Исполнитель КАК Исполнитель,
	|	ДД.Работник КАК Работник,
	|	ДД.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ДД.СпособОтраженияЗарплаты КАК СпособОтраженияЗарплаты
	|//ПОМЕСТИТЬ ВидыРабот
	|ИЗ
	|	втВидыРабот КАК ДД
	|
	|//УПОРЯДОЧИТЬ ПО
	|";
	
	ТекстУпорядочивания =
	"УПОРЯДОЧИТЬ ПО
	|	ДД.ВидНаряда,
	|	ДД.Организация,
	|	ДД.НачалоПериода,
	|	ДД.КонецПериода,
	|	ДД.Бригада,
	|	ДД.Подразделение,
	|	ДД.Исполнитель
	|";
	
	#КонецОбласти
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПОМЕСТИТЬ ВидыРабот", "ПОМЕСТИТЬ ВидыРабот");
		Запрос.Выполнить();
		Возврат Истина;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УПОРЯДОЧИТЬ ПО", ТекстУпорядочивания);
		Возврат Запрос.Выполнить();
	КонецЕсли;
	
КонецФункции

// Заполняет список работников по ранее введенным документам.
//
// Параметры:
//  Объект			- ДокументОбъект.ВыработкаСотрудников, ДанныеФормыСтруктура - Документ, который нужно заполнить.
//
Процедура ЗаполнитьРаботников(Объект) Экспорт
	
	Объект.Работники.Очистить();
	
	ДатаСостава = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	
	СоставыБригад = СоставыБригад(ДатаСостава, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Бригада));
	
	СтруктураОтбора = Новый Структура("Бригада", Объект.Бригада);
	
	Если СоставыБригад.НайтиСледующий(СтруктураОтбора) Тогда
		
		Выборка = СоставыБригад.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Работники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		ЗаполнитьКадровыеДанныеСотрудников(
			Объект,
			"Работники",
			Ложь,
			Объект.ИспользоватьТарифныеСтавки,
			Объект.ИспользоватьОтработанноеВремя);
	КонецЕсли;
	
	РаспределитьСуммуПоУчастникам(Объект);
	
КонецПроцедуры

// Заполняет кадровые данные: квалификацию, тарифную ставку, отработанное время в переданной коллекции.
//
// Параметры:
//  Объект - ДокументОбъект.ВыработкаСотрудников, ДанныеФормыСтруктура - Заполняемый документ
//  ИмяТЧ - Строка - имя табличной части, в которой требуется заполнить поля
//  КвалификацияИсполнителя - Булево - Истина, если требуется заполнить квалификацию
//  ТарифнаяСтавка - Булево - Истина, если требуется заполнить тарифную ставку
//  ОтработаноЧасов - Булево - Истина, если требуется заполнить отработанное время
//  МассивСтрок - Массив - строки, в которых выполняется заполнение (если Неопределено, то поля заполненяются во всех
//                         строках табличной части).
//
Процедура ЗаполнитьКадровыеДанныеСотрудников(Объект, ИмяТЧ, КвалификацияИсполнителя = Истина, ТарифнаяСтавка = Истина, ОтработаноЧасов = Истина, МассивСтрок = Неопределено) Экспорт
	
	Если Объект.Работники.Количество() = 0 Или Не (КвалификацияИсполнителя Или ТарифнаяСтавка Или ОтработаноЧасов) Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСтрок = Неопределено Тогда
		Коллекция = Объект[ИмяТЧ];
		ФизическиеЛица = Коллекция.Выгрузить(,"Работник").ВыгрузитьКолонку("Работник");
	Иначе
		Коллекция = МассивСтрок;
		ФизическиеЛица = Объект[ИмяТЧ].Выгрузить(МассивСтрок,"Работник").ВыгрузитьКолонку("Работник");
	КонецЕсли;
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыЗапроса.Организация = Объект.Организация;
	ПараметрыЗапроса.НачалоПериода = НачалоМесяца(Объект.Дата);
	ПараметрыЗапроса.ОкончаниеПериода = КонецМесяца(Объект.Дата);
	ПараметрыЗапроса.КадровыеДанные = "РазрядКатегория,СовокупнаяТарифнаяСтавка,ВидСовокупнойТарифнойСтавки";
	
	ДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапроса);
	
	ОтработанноеВремяСотрудников = Новый Соответствие;
	
	// получение данных об отработанном времени
	Если ОтработаноЧасов И ЗначениеЗаполнено(Объект.НачалоПериода) И ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТаблицаСотрудники = Новый ТаблицаЗначений;
		ТаблицаСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудники.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудники.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудники.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		
		Для Каждого СтрокаТаблицы Из ДанныеСотрудников Цикл
			СтрокаСотрудники = ТаблицаСотрудники.Добавить();
			СтрокаСотрудники.Сотрудник = СтрокаТаблицы.Сотрудник;
			СтрокаСотрудники.Период = Объект.НачалоПериода;
			СтрокаСотрудники.ДатаНачала = Объект.НачалоПериода;
			СтрокаСотрудники.ДатаОкончания = КонецДня(Объект.КонецПериода);
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСотрудники.Сотрудник,
		|	ТаблицаСотрудники.Период,
		|	ТаблицаСотрудники.ДатаНачала,
		|	ТаблицаСотрудники.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудники КАК ТаблицаСотрудники");
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаСотрудники", ТаблицаСотрудники);
		Запрос.Выполнить();
		
		ПараметрыВТ = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
		ПараметрыВТ.ДатаНачала = Объект.НачалоПериода;
		ПараметрыВТ.ДатаОкончания = КонецДня(Объект.КонецПериода);
		ПараметрыВТ.МесяцДатаНачала = НачалоМесяца(Объект.НачалоПериода);
		ПараметрыВТ.МесяцДатаОкончания = КонецМесяца(Объект.КонецПериода);
		ПараметрыВТ.ДатаАктуальности = Объект.Дата;
		ПараметрыВТ.Организация = Объект.Организация;
		
		УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыВТ);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеУчетаВремени.Сотрудник,
		|	СУММА(ДанныеУчетаВремени.Часы) КАК ОтработаноЧасов
		|ИЗ
		|	ВТДанныеУчетаВремениИСостоянийСотрудников КАК ДанныеУчетаВремени
		|ГДЕ
		|	ДанныеУчетаВремени.ВидУчетаВремени.РабочееВремя = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеУчетаВремени.Сотрудник";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОтработанноеВремяСотрудников.Вставить(Выборка.Сотрудник, Выборка.ОтработаноЧасов);
		КонецЦикла;
		
	КонецЕсли;
	
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для Каждого Строка Из Коллекция Цикл
		
		Если КвалификацияИсполнителя Тогда
			Строка.КвалификацияИсполнителя = Неопределено;
		КонецЕсли;
		Если ТарифнаяСтавка Тогда
			Строка.ТарифнаяСтавка = Неопределено;
		КонецЕсли;
		Если ОтработаноЧасов Тогда
			Строка.ОтработаноЧасов = Неопределено;
		КонецЕсли;
		
		Отбор.ФизическоеЛицо = Строка.Работник;
		
		НайденныеСтроки = ДанныеСотрудников.НайтиСтроки(Отбор);
		
		Для Каждого Данные Из НайденныеСтроки Цикл
			
			Если КвалификацияИсполнителя И Не ЗначениеЗаполнено(Строка.КвалификацияИсполнителя) Тогда
				Строка.КвалификацияИсполнителя = НайденныеСтроки[0].КвалификацияИсполнителя;
			КонецЕсли;
			
			Если ТарифнаяСтавка
				И НайденныеСтроки[0].ВидСовокупнойТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка
				И Не ЗначениеЗаполнено(Строка.ТарифнаяСтавка) Тогда
				Строка.ТарифнаяСтавка = НайденныеСтроки[0].СовокупнаяТарифнаяСтавка;
			КонецЕсли;
			
			Если ОтработаноЧасов И Не ЗначениеЗаполнено(Строка.ОтработаноЧасов) Тогда
				Строка.ОтработаноЧасов = ОтработанноеВремяСотрудников[НайденныеСтроки[0].Сотрудник];
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

// Заполняет массивы реквизитов, зависимых от свойств документа
//
// Параметры:
//  Объект - ДокументОбъект.ВыработкаСотрудников, ДанныеФормыСтруктура - документ
//	МассивВсехРеквизитов - Массив - реквизиты, которые зависят от свойств документа
//	МассивРеквизитовОперации - Массив - реквизиты, которые используются при заданных свойствах.
//
Процедура ИменаРеквизитовПоВидуНаряда(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Бригада");
	МассивВсехРеквизитов.Добавить("ГруппаНастройкаПоказателей");
	МассивВсехРеквизитов.Добавить("ГруппаПериодВыполненияРабот");
	МассивВсехРеквизитов.Добавить("Распределено");
	МассивВсехРеквизитов.Добавить("ДатаНачала");
	МассивВсехРеквизитов.Добавить("ДатаОкончания");
	МассивВсехРеквизитов.Добавить("Автораспределение");
	
	МассивВсехРеквизитов.Добавить("ЗаполнитьВидыРабот");
	МассивВсехРеквизитов.Добавить("ВидыРабот.Работник");
	МассивВсехРеквизитов.Добавить("ВидыРабот.КвалификацияИсполнителя");
	МассивВсехРеквизитов.Добавить("ВидыРабот.СпособОтраженияЗарплаты");
	МассивВсехРеквизитов.Добавить("ВидыРабот.ГруппаПродукции");
	МассивВсехРеквизитов.Добавить("ВидыРабот.Распоряжение");
	МассивВсехРеквизитов.Добавить("ВидыРабот.КодСтрокиРаспоряжения");
	МассивВсехРеквизитов.Добавить("ВидыРабот.СтатьяКалькуляции");
	
	МассивВсехРеквизитов.Добавить("Работники");
	МассивВсехРеквизитов.Добавить("СотрудникиЗаполнитьКадровыеДанные");
	МассивВсехРеквизитов.Добавить("СотрудникиТарифнаяСтавка");
	МассивВсехРеквизитов.Добавить("СотрудникиОтработано");
	
	МассивРеквизитовОперации = Новый Массив;
	
	Если Объект.ВидНаряда = Перечисления.ВидыБригадныхНарядов.Персональный Тогда
		
		МассивРеквизитовОперации.Добавить("ГруппаПериодВыполненияРабот");
		МассивРеквизитовОперации.Добавить("ДатаНачала");
		МассивРеквизитовОперации.Добавить("ДатаОкончания");
		
		МассивРеквизитовОперации.Добавить("ЗаполнитьВидыРабот");
		МассивРеквизитовОперации.Добавить("ВидыРабот.Распоряжение");
		МассивРеквизитовОперации.Добавить("ВидыРабот.КодСтрокиРаспоряжения");
		МассивРеквизитовОперации.Добавить("ВидыРабот.Работник");
		МассивРеквизитовОперации.Добавить("ВидыРабот.КвалификацияИсполнителя");
		МассивРеквизитовОперации.Добавить("ВидыРабот.СтатьяКалькуляции");
		
	ИначеЕсли Объект.ВидНаряда = Перечисления.ВидыБригадныхНарядов.Бригадный Тогда
		
		МассивРеквизитовОперации.Добавить("Бригада");
		МассивРеквизитовОперации.Добавить("ГруппаНастройкаПоказателей");
		МассивРеквизитовОперации.Добавить("Распределено");
		МассивРеквизитовОперации.Добавить("ГруппаПериодВыполненияРабот");
		МассивРеквизитовОперации.Добавить("ДатаНачала");
		МассивРеквизитовОперации.Добавить("ДатаОкончания");
		
		МассивРеквизитовОперации.Добавить("ЗаполнитьВидыРабот");
		МассивРеквизитовОперации.Добавить("ВидыРабот.Распоряжение");
		МассивРеквизитовОперации.Добавить("ВидыРабот.КодСтрокиРаспоряжения");
		МассивРеквизитовОперации.Добавить("ВидыРабот.СтатьяКалькуляции");
		
		МассивРеквизитовОперации.Добавить("Работники");
		МассивРеквизитовОперации.Добавить("СотрудникиЗаполнитьКадровыеДанные");
		МассивРеквизитовОперации.Добавить("СотрудникиТарифнаяСтавка");
		МассивРеквизитовОперации.Добавить("СотрудникиОтработано");
		
	ИначеЕсли Объект.ВидНаряда = Перечисления.ВидыБригадныхНарядов.БригадныйПоЗаказу21 Тогда
		
		МассивРеквизитовОперации.Добавить("Бригада");
		МассивРеквизитовОперации.Добавить("Автораспределение");
		МассивРеквизитовОперации.Добавить("ГруппаПериодВыполненияРабот");
		МассивРеквизитовОперации.Добавить("ДатаНачала");
		МассивРеквизитовОперации.Добавить("ДатаОкончания");
		
		МассивРеквизитовОперации.Добавить("ЗаполнитьВидыРабот");
		МассивРеквизитовОперации.Добавить("ВидыРабот.Распоряжение");
		МассивРеквизитовОперации.Добавить("ВидыРабот.КодСтрокиРаспоряжения");
		МассивРеквизитовОперации.Добавить("ВидыРабот.СтатьяКалькуляции");
		
		Если Объект.Автораспределение Тогда
			МассивРеквизитовОперации.Добавить("Работники");
			МассивРеквизитовОперации.Добавить("Распределено");
		Иначе
			МассивРеквизитовОперации.Добавить("ВидыРабот.Работник");
		КонецЕсли;
		
	ИначеЕсли Объект.ВидНаряда = Перечисления.ВидыБригадныхНарядов.БригадныйБезЗаказа21 Тогда
		
		МассивРеквизитовОперации.Добавить("Бригада");
		МассивРеквизитовОперации.Добавить("Автораспределение");
		
		МассивРеквизитовОперации.Добавить("ВидыРабот.ГруппаПродукции");
		
		Если Объект.Автораспределение Тогда
			МассивРеквизитовОперации.Добавить("Работники");
			МассивРеквизитовОперации.Добавить("Распределено");
		Иначе
			МассивРеквизитовОперации.Добавить("ВидыРабот.Работник");
		КонецЕсли;
		
	ИначеЕсли Объект.ВидНаряда = Перечисления.ВидыБригадныхНарядов.ПрочиеРаботы Тогда
		
		МассивРеквизитовОперации.Добавить("Бригада");
		МассивРеквизитовОперации.Добавить("Автораспределение");
		
		МассивРеквизитовОперации.Добавить("ВидыРабот.СпособОтраженияЗарплаты");
		
		Если Объект.Автораспределение Тогда
			МассивРеквизитовОперации.Добавить("Работники");
			МассивРеквизитовОперации.Добавить("Распределено");
			МассивРеквизитовОперации.Добавить("СотрудникиЗаполнитьКадровыеДанные");
			МассивРеквизитовОперации.Добавить("СотрудникиТарифнаяСтавка");
			МассивРеквизитовОперации.Добавить("СотрудникиОтработано");
		Иначе
			МассивРеквизитовОперации.Добавить("ВидыРабот.Работник");
		КонецЕсли;
		
	ИначеЕсли Объект.ВидНаряда = Перечисления.ВидыБригадныхНарядов.Ремонт Тогда
		
		МассивРеквизитовОперации.Добавить("Бригада");
		МассивРеквизитовОперации.Добавить("Автораспределение");
		МассивРеквизитовОперации.Добавить("ГруппаПериодВыполненияРабот");
		МассивРеквизитовОперации.Добавить("ДатаНачала");
		МассивРеквизитовОперации.Добавить("ДатаОкончания");
		
		МассивРеквизитовОперации.Добавить("ЗаполнитьВидыРабот");
		МассивРеквизитовОперации.Добавить("ВидыРабот.Распоряжение");
		МассивРеквизитовОперации.Добавить("ВидыРабот.КодСтрокиРаспоряжения");
		МассивРеквизитовОперации.Добавить("ВидыРабот.СпособОтраженияЗарплаты");
		
		Если Объект.Автораспределение Тогда
			МассивРеквизитовОперации.Добавить("Работники");
			МассивРеквизитовОперации.Добавить("Распределено");
			МассивРеквизитовОперации.Добавить("СотрудникиЗаполнитьКадровыеДанные");
			МассивРеквизитовОперации.Добавить("СотрудникиТарифнаяСтавка");
			МассивРеквизитовОперации.Добавить("СотрудникиОтработано");
		Иначе
			МассивРеквизитовОперации.Добавить("ВидыРабот.Работник");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Распределяет количества и суммы видов работ по исполнителям.
//
// Параметры:
//	Объект - ДокументОбъект.ВыработкаСотрудников - документ, в котором выполняется распределение.
//
Процедура РаспределитьСуммуПоУчастникам(Объект) Экспорт
	
	Если Не Объект.ИспользоватьКТУ 
		И Не Объект.ИспользоватьТарифныеСтавки
		И Не Объект.ИспользоватьОтработанноеВремя Тогда
		Возврат;
	КонецЕсли;
	
	КРаспределению = Объект.ВидыРабот.Итог("Сумма");
	
	Коэффициенты = Новый Массив;
	
	Для Каждого Строка Из Объект.Работники Цикл
		
		Коэффициент = 1;
		
		Если Объект.ИспользоватьКТУ Тогда
			Коэффициент = Коэффициент * Строка.КТУ;
		КонецЕсли;
		
		Если Объект.ИспользоватьТарифныеСтавки Тогда
			Коэффициент = Коэффициент * Строка.ТарифнаяСтавка;
		КонецЕсли;
		
		Если Объект.ИспользоватьОтработанноеВремя Тогда
			Коэффициент = Коэффициент * Строка.ОтработаноЧасов;
		КонецЕсли;
		
		Коэффициенты.Добавить(Коэффициент);
		
	КонецЦикла;
	
	Результат = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(КРаспределению, Коэффициенты);
	
	Индекс = 0;
	Для Каждого Строка Из Объект.Работники Цикл
		
		Если Результат <> Неопределено Тогда
			Строка.Сумма = Результат[Индекс];
		Иначе
			Строка.Сумма = 0;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		СтандартнаяОбработка = Ложь;
		Если ПравоДоступа("Добавление", Метаданные.Документы.ВыработкаСотрудников)
			И (ПолучитьФункциональнуюОпцию("УправлениеПредприятием")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2")) Тогда
			ВыбраннаяФорма = "ФормаСпискаДокументов";
		Иначе
			ВыбраннаяФорма = "ФормаСписка";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка            КАК Ссылка,
	|	Реквизиты.Дата              КАК Дата,
	|	Реквизиты.Номер             КАК Номер,
	|	КОНЕЦПЕРИОДА(Реквизиты.Дата, ДЕНЬ) КАК Период,
	|	Реквизиты.Бригада           КАК Бригада,
	|	Реквизиты.Организация       КАК Организация,
	|	Реквизиты.Подразделение     КАК Подразделение,
	|	Реквизиты.СуммаДокумента    КАК СуммаДокумента,
	|	Реквизиты.Валюта            КАК Валюта,
	|	Реквизиты.ВидНаряда         КАК ВидНаряда,
	|	Реквизиты.Автораспределение КАК Автораспределение
	|ИЗ
	|	Документ.ВыработкаСотрудников КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Реквизиты.Валюта, Реквизиты.Валюта, Реквизиты.Дата);
	ПоказательРасчетаЗарплаты = РасчетЗарплатыРасширенный.ПоказательПоИдентификатору("СдельныйЗаработок");
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("ПоказательРасчетаЗарплаты",       ПоказательРасчетаЗарплаты);
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ВыработкаСотрудников")));
	Запрос.УстановитьПараметр("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	
	УстаревшиеВиды = Новый Массив;
	УстаревшиеВиды.Добавить(Перечисления.ВидыБригадныхНарядов.Ремонт);
	УстаревшиеВиды.Добавить(Перечисления.ВидыБригадныхНарядов.ПрочиеРаботы);
	УстаревшиеВиды.Добавить(Перечисления.ВидыБригадныхНарядов.БригадныйПоЗаказу21);
	УстаревшиеВиды.Добавить(Перечисления.ВидыБригадныхНарядов.БригадныйБезЗаказа21);
	Запрос.УстановитьПараметр("УстаревшиеВиды", УстаревшиеВиды);
	
КонецПроцедуры

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	ИсточникиДанных.Вставить("ВидыРабот.Распоряжение");
	
	Возврат ИсточникиДанных; 
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТрудозатратыНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаТаблицаВидыРаботСотрудников(Запрос)
	
	Если Запрос.Параметры.Свойство("ТаблицаВидыРаботСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВидовРаботСотрудников = НоваяТаблицаВидовРаботСотрудников();
	
	УстаревшиеНаСтатьи = Новый Массив;
	УстаревшиеНаСтатьи.Добавить(Перечисления.ВидыБригадныхНарядов.Ремонт);
	УстаревшиеНаСтатьи.Добавить(Перечисления.ВидыБригадныхНарядов.ПрочиеРаботы);
	
	УстаревшиеНаПроизводство = Новый Массив;
	УстаревшиеНаПроизводство.Добавить(Перечисления.ВидыБригадныхНарядов.БригадныйПоЗаказу21);
	УстаревшиеНаПроизводство.Добавить(Перечисления.ВидыБригадныхНарядов.БригадныйБезЗаказа21);
	
	Если Запрос.Параметры.ВидНаряда = Перечисления.ВидыБригадныхНарядов.Персональный
		Или УстаревшиеНаСтатьи.Найти(Запрос.Параметры.ВидНаряда) <> Неопределено 
		Или Не Запрос.Параметры.Автораспределение И УстаревшиеНаПроизводство.Найти(Запрос.Параметры.ВидНаряда) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТаблицаВидыРаботСотрудников", ТаблицаВидовРаботСотрудников);
		Возврат;
	КонецЕсли;
	
	ЗапросВидовРабот = Новый Запрос;
	ЗапросВидовРабот.Текст = 
	"ВЫБРАТЬ
	|	ВидыРабот.Распоряжение			КАК Распоряжение,
	|	ВидыРабот.КодСтрокиРаспоряжения	КАК КодСтрокиРаспоряжения,
	|	СпрПартииПроизводства.Ссылка	КАК ПартияПроизводства
	|ПОМЕСТИТЬ ВтПартииПроизводстваБезЗаказа
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ВидыРабот
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа.Трудозатраты КАК ТрудозатратыПроизводстваБезЗаказа
	|		ПО ТрудозатратыПроизводстваБезЗаказа.Ссылка = ВидыРабот.Распоряжение
	|		И ТрудозатратыПроизводстваБезЗаказа.КодСтроки = ВидыРабот.КодСтрокиРаспоряжения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = ТрудозатратыПроизводстваБезЗаказа.Ссылка
	|		И СпрПартииПроизводства.Код = ТрудозатратыПроизводстваБезЗаказа.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыРабот.Распоряжение,
	|	ВидыРабот.КодСтрокиРаспоряжения,
	|	СпрПартииПроизводства.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидыРабот.Распоряжение,
	|	ВидыРабот.КодСтрокиРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРабот.ВидРабот,
	|	ВидыРабот.СтатьяКалькуляции,
	|	СУММА(ВидыРабот.Количество) КАК Количество,
	|	СУММА(ВидыРабот.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВидыРабот.Распоряжение) = ТИП(Документ.ПроизводствоБезЗаказа)
	|			ТОГДА ПартииПроизводстваБезЗаказа.ПартияПроизводства
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|	КОНЕЦ КАК ПартияПроизводства,
	|	ВидыРабот.ГруппаПродукции
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ВидыРабот
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтПартииПроизводстваБезЗаказа КАК ПартииПроизводстваБезЗаказа
	|		ПО ПартииПроизводстваБезЗаказа.Распоряжение = ВидыРабот.Распоряжение
	|		И ПартииПроизводстваБезЗаказа.КодСтрокиРаспоряжения = ВидыРабот.КодСтрокиРаспоряжения
	|
	|ГДЕ
	|	ВидыРабот.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыРабот.СтатьяКалькуляции,
	|	ВидыРабот.ВидРабот,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВидыРабот.Распоряжение) = ТИП(Документ.ПроизводствоБезЗаказа)
	|			ТОГДА ПартииПроизводстваБезЗаказа.ПартияПроизводства
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВидыРабот.ГруппаПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Работники.Работник,
	|	Работники.Сумма
	|ИЗ
	|	Документ.ВыработкаСотрудников.Работники КАК Работники
	|ГДЕ
	|	Работники.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Работники.Сумма";
	
	ЗапросВидовРабот.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	
	Результаты = ЗапросВидовРабот.ВыполнитьПакет();
	
	ВидыРабот = Результаты[1].Выбрать();
	Работники = Результаты[2].Выгрузить();
	
	Коэффициенты = Работники.ВыгрузитьКолонку("Сумма");
	
	Пока ВидыРабот.Следующий() Цикл
		
		Количества = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ВидыРабот.Количество, Коэффициенты);
		Суммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ВидыРабот.Сумма, Коэффициенты);
		
		Индекс = 0;
		Для Каждого Строка Из Работники Цикл
			
			НоваяСтрока = ТаблицаВидовРаботСотрудников.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидыРабот);
			
			НоваяСтрока.Работник = Строка.Работник;
			НоваяСтрока.Количество = Количества[Индекс];
			НоваяСтрока.НормативнаяСтоимость = Суммы[Индекс];
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаВидыРаботСотрудников", ТаблицаВидовРаботСотрудников);
	
КонецПроцедуры

Функция НоваяТаблицаВидовРаботСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	ТрудозатратыНЗП.ПартияПроизводства,
	|	ТрудозатратыНЗП.ЗаказНаПроизводство,
	|	ТрудозатратыНЗП.КодСтрокиПродукция,
	|	ТрудозатратыНЗП.Этап,
	|	ТрудозатратыНЗП.СтатьяКалькуляции,
	|	ТрудозатратыНЗП.ВидРабот,
	|	ТрудозатратыНЗП.ГруппаПродукции,
	|	ТрудозатратыНЗП.Количество,
	|	ТрудозатратыНЗП.НормативнаяСтоимость,
	|	ТрудозатратыНЗП.Сотрудник КАК Работник
	|ИЗ
	|	РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК ТрудозатратыНЗП";
	
	Результат = Запрос.Выполнить();
	
	Таблица = Результат.Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

#Область ВременныеТаблицы

Функция ТекстЗапросаВтВидыРаботСотрудников(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаВидыРаботСотрудников";
	
	УстановитьПараметрЗапросаТаблицаВидыРаботСотрудников(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыРаботСотрудников.ПартияПроизводства,
	|	ВидыРаботСотрудников.ЗаказНаПроизводство,
	|	ВидыРаботСотрудников.КодСтрокиПродукция,
	|	ВидыРаботСотрудников.Этап,
	|	ВидыРаботСотрудников.СтатьяКалькуляции,
	|	ВидыРаботСотрудников.ВидРабот,
	|	ВидыРаботСотрудников.ГруппаПродукции,
	|	ВидыРаботСотрудников.Количество,
	|	ВидыРаботСотрудников.НормативнаяСтоимость,
	|	ВидыРаботСотрудников.Работник
	|ПОМЕСТИТЬ ВтТаблицаВидыРаботСотрудников
	|ИЗ
	|	&ТаблицаВидыРаботСотрудников КАК ВидыРаботСотрудников";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтПартииПроизводстваБезЗаказа(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПартииПроизводстваБезЗаказа";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТрудозатраты.Распоряжение			КАК Распоряжение,
	|	ТаблицаТрудозатраты.КодСтрокиРаспоряжения	КАК КодСтрокиРаспоряжения,
	|	СпрПартииПроизводства.Ссылка	КАК ПартияПроизводства
	|ПОМЕСТИТЬ ВтПартииПроизводстваБезЗаказа
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ТаблицаТрудозатраты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа.Трудозатраты КАК ТрудозатратыПроизводстваБезЗаказа
	|		ПО ТрудозатратыПроизводстваБезЗаказа.Ссылка = ТаблицаТрудозатраты.Распоряжение
	|		И ТрудозатратыПроизводстваБезЗаказа.КодСтроки = ТаблицаТрудозатраты.КодСтрокиРаспоряжения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = ТрудозатратыПроизводстваБезЗаказа.Ссылка
	|		И СпрПартииПроизводства.Код = ТрудозатратыПроизводстваБезЗаказа.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|ГДЕ
	|	ТаблицаТрудозатраты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТрудозатраты.Распоряжение,
	|	ТаблицаТрудозатраты.КодСтрокиРаспоряжения,
	|	СпрПартииПроизводства.Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ТекстЗапросаТаблицаЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Дата,
	|	Работники.Работник КАК ФизическоеЛицо,
	|	ИСТИНА КАК ИспользоватьПриРасчетеПервойПоловиныМесяца,
	|	СУММА(Работники.Сумма * &КоэффициентПересчетаВВалютуРегл) КАК Значение
	|ИЗ
	|	Документ.ВыработкаСотрудников.Работники КАК Работники
	|ГДЕ
	|	Работники.Ссылка = &Ссылка
	|	И &ПоказательРасчетаЗарплаты <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	Работники.Работник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ВыработкаСотрудниковВидыРабот.Работник,
	|	ИСТИНА КАК ИспользоватьПриРасчетеПервойПоловиныМесяца,
	|	СУММА(ВыработкаСотрудниковВидыРабот.Сумма * &КоэффициентПересчетаВВалютуРегл)
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ВыработкаСотрудниковВидыРабот
	|ГДЕ
	|	ВыработкаСотрудниковВидыРабот.Ссылка = &Ссылка
	|	И &ПоказательРасчетаЗарплаты <> НЕОПРЕДЕЛЕНО
	|	И НЕ ВыработкаСотрудниковВидыРабот.Работник = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаСотрудниковВидыРабот.Работник";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТрудозатратыНезавершенногоПроизводства";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрЗапросаТаблицаВидыРаботСотрудников(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаВидыРаботСотрудников", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыРаботСотрудников(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПартииПроизводстваБезЗаказа", ТекстыЗапроса) Тогда
		ТекстЗапросаВтПартииПроизводстваБезЗаказа(Запрос, ТекстыЗапроса);
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВидыРабот.Распоряжение) = ТИП(Документ.ПроизводствоБезЗаказа)
	|			И НЕ ВидыРабот.Распоряжение = ЗНАЧЕНИЕ(Документ.ПроизводствоБезЗаказа.ПустаяСсылка)
	|			ТОГДА ПартииПроизводстваБезЗаказа.ПартияПроизводства
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|	КОНЕЦ                                  КАК ПартияПроизводства,
	|	ВидыРабот.СтатьяКалькуляции            КАК СтатьяКалькуляции,
	|	ВидыРабот.ВидРабот                     КАК ВидРабот,
	|	ВидыРабот.ГруппаПродукции              КАК ГруппаПродукции,
	|	ВидыРабот.Работник                     КАК Сотрудник,
	|	ВидыРабот.Количество                   КАК Количество,
	|	ВидыРабот.Сумма * &КоэффициентПересчетаВВалютуУПР КАК НормативнаяСтоимость,
	|	0                                      КАК Стоимость,
	|	0                                      КАК СтоимостьРегл
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ВидыРабот
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтПартииПроизводстваБезЗаказа КАК ПартииПроизводстваБезЗаказа
	|		ПО ПартииПроизводстваБезЗаказа.Распоряжение = ВидыРабот.Распоряжение
	|		И ПартииПроизводстваБезЗаказа.КодСтрокиРаспоряжения = ВидыРабот.КодСтрокиРаспоряжения
	|
	|ГДЕ
	|	ВидыРабот.Ссылка = &Ссылка
	|	И (&ВидНаряда = ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Персональный)
	|		ИЛИ &ВидНаряда В (&УстаревшиеВиды) И НЕ &Автораспределение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	ВидыРабот.ПартияПроизводства           КАК ПартияПроизводства,
	|	ВидыРабот.СтатьяКалькуляции            КАК СтатьяКалькуляции,
	|	ВидыРабот.ВидРабот                     КАК ВидРабот,
	|	ВидыРабот.ГруппаПродукции              КАК ГруппаПродукции,
	|	ВидыРабот.Работник                     КАК Сотрудник,
	|	ВидыРабот.Количество                   КАК Количество,
	|	ВидыРабот.НормативнаяСтоимость * &КоэффициентПересчетаВВалютуУПР КАК НормативнаяСтоимость,
	|	0                                      КАК Стоимость,
	|	0                                      КАК СтоимостьРегл
	|ИЗ
	|	ВтТаблицаВидыРаботСотрудников КАК ВидыРабот
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТрудозатратыКОформлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПартииПроизводстваБезЗаказа", ТекстыЗапроса) Тогда
		ТекстЗапросаВтПартииПроизводстваБезЗаказа(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаТрудозатраты.Распоряжение) = ТИП(Документ.ПроизводствоБезЗаказа)
	|			ТОГДА ПартииПроизводстваБезЗаказа.ПартияПроизводства
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|	КОНЕЦ КАК ПартияПроизводства,
	|	ТаблицаТрудозатраты.Распоряжение КАК Распоряжение,
	|	ТаблицаТрудозатраты.ВидРабот КАК ВидРабот,
	|	&Подразделение КАК Подразделение,
	|	&Бригада КАК Исполнитель,
	|	ТаблицаТрудозатраты.Количество КАК Количество,
	|	ТаблицаТрудозатраты.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ТаблицаТрудозатраты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтПартииПроизводстваБезЗаказа КАК ПартииПроизводстваБезЗаказа
	|		ПО ПартииПроизводстваБезЗаказа.Распоряжение = ТаблицаТрудозатраты.Распоряжение
	|		И ПартииПроизводстваБезЗаказа.КодСтрокиРаспоряжения = ТаблицаТрудозатраты.КодСтрокиРаспоряжения
	|
	|ГДЕ
	|	ТаблицаТрудозатраты.Ссылка = &Ссылка
	|	И &ВидНаряда В (ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Бригадный),
	|					ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Ремонт),
	|					ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.БригадныйПоЗаказу21))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаТрудозатраты.Распоряжение) = ТИП(Документ.ПроизводствоБезЗаказа)
	|			ТОГДА ПартииПроизводстваБезЗаказа.ПартияПроизводства
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТрудозатраты.Распоряжение КАК Распоряжение,
	|	ТаблицаТрудозатраты.ВидРабот КАК ВидРабот,
	|	&Подразделение КАК Подразделение,
	|	ТаблицаТрудозатраты.Работник КАК Исполнитель,
	|	ТаблицаТрудозатраты.Количество КАК Количество,
	|	ТаблицаТрудозатраты.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ТаблицаТрудозатраты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтПартииПроизводстваБезЗаказа КАК ПартииПроизводстваБезЗаказа
	|		ПО ПартииПроизводстваБезЗаказа.Распоряжение = ТаблицаТрудозатраты.Распоряжение
	|		И ПартииПроизводстваБезЗаказа.КодСтрокиРаспоряжения = ТаблицаТрудозатраты.КодСтрокиРаспоряжения
	|
	|ГДЕ
	|	ТаблицаТрудозатраты.Ссылка = &Ссылка
	|	И &ВидНаряда В (ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Персональный))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка									КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО							КАК РазделительЗаписи,
	|	ДД.Дата									КАК ДатаДокументаИБ,
	|	ДД.Номер								КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных				КАК ТипСсылки,
	|	ДД.Организация							КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РегистрацияСдельныхРабот) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО							КАК НаправлениеДеятельности,
	|	ДД.Подразделение						КАК Подразделение,
	|	ДД.Ответственный						КАК Ответственный,
	|	ВЫРАЗИТЬ(ДД.Комментарий КАК СТРОКА(100))КАК Комментарий,
	|	ДД.Валюта								КАК Валюта,
	|	ДД.СуммаДокумента						КАК Сумма,
	|	ДД.Проведен								КАК Проведен,
	|	ДД.ПометкаУдаления						КАК ПометкаУдаления,
	|	ЛОЖЬ									КАК ДополнительнаяЗапись,
	|	""""									КАК Дополнительно,
	|	ДД.Дата									КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать							КАК НомерПервичногоДокумента,
	|	НЕОПРЕДЕЛЕНО							КАК МестоХранения
	|ИЗ
	|	Документ.ВыработкаСотрудников КАК ДД
	|ГДЕ
	|	ДД.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ВыработкаСотрудников";
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
		
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ДД";
		
	ИначеЕсли ИмяРегистра = "ТрудозатратыКОформлению" Тогда
			
		ТекстЗапроса = ТекстЗапросаТаблицаТрудозатратыКОформлению(Неопределено, ТекстыЗапроса, Неопределено);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтПартииПроизводстваБезЗаказа", ТекстЗапросаВтПартииПроизводстваБезЗаказа(Неопределено, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ТаблицаТрудозатраты";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВыработкаСотрудников) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ВыработкаСотрудников";
		КомандаПечати.Представление = НСтр("ru = 'Выработка сотрудников'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВыработкаСотрудников") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ВыработкаСотрудников",
			Нстр("ru = 'Выработка сотрудников'"),
			ПечатьВыработкиСотрудников(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьВыработкиСотрудников(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВыработкаСотрудников";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыработкаСотрудников.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВыработкаСотрудников.ВидНаряда В (ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.БригадныйБезЗаказа21),
	|												ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.ПрочиеРаботы))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоРаспоряжениям,
	|	ВыработкаСотрудников.Дата КАК ДатаДокумента,
	|	ВыработкаСотрудников.Номер КАК НомерДокумента,
	|	ВыработкаСотрудников.Ответственный.ФизическоеЛицо КАК Менеджер,
	|	ВыработкаСотрудников.Подразделение КАК Подразделение,
	|	ВыработкаСотрудников.Бригада КАК Бригада,
	|	ВыработкаСотрудников.Валюта КАК Валюта,
	|	ВыработкаСотрудников.НачалоПериода КАК НачалоПериода,
	|	ВыработкаСотрудников.КонецПериода КАК КонецПериода,
	|	""Авто"" КАК СуффиксОбласти
	|ИЗ
	|	Документ.ВыработкаСотрудников КАК ВыработкаСотрудников
	|ГДЕ
	|	ВыработкаСотрудников.Ссылка В(&МассивОбъектов)
	|	И (ВыработкаСотрудников.Автораспределение ИЛИ ВыработкаСотрудников.ВидНаряда = ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Бригадный))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыработкаСотрудников.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВыработкаСотрудников.ВидНаряда В (ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.БригадныйБезЗаказа21),
	|												ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.ПрочиеРаботы))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоРаспоряжениям,
	|	ВыработкаСотрудников.Дата КАК ДатаДокумента,
	|	ВыработкаСотрудников.Номер КАК НомерДокумента,
	|	ВыработкаСотрудников.Ответственный.ФизическоеЛицо КАК Менеджер,
	|	ВыработкаСотрудников.Подразделение КАК Подразделение,
	|	ВыработкаСотрудников.Бригада КАК Бригада,
	|	ВыработкаСотрудников.Валюта КАК Валюта,
	|	ВыработкаСотрудников.НачалоПериода КАК НачалоПериода,
	|	ВыработкаСотрудников.КонецПериода КАК КонецПериода,
	|	""НеАвто"" КАК СуффиксОбласти
	|ИЗ
	|	Документ.ВыработкаСотрудников КАК ВыработкаСотрудников
	|ГДЕ
	|	ВыработкаСотрудников.Ссылка В(&МассивОбъектов)
	|	И (НЕ ВыработкаСотрудников.Автораспределение И ВыработкаСотрудников.ВидНаряда В (
	|											ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.БригадныйПоЗаказу21),
	|											ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.БригадныйБезЗаказа21),
	|											ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.ПрочиеРаботы),
	|											ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Ремонт))
	|		ИЛИ ВыработкаСотрудников.ВидНаряда = ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Персональный))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыработкаСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаСотрудниковВидыРабот.Ссылка КАК Ссылка,
	|	МИНИМУМ(ВыработкаСотрудниковВидыРабот.НомерСтроки) КАК НомерСтроки,
	|	ВыработкаСотрудниковВидыРабот.ВидРабот КАК ВидРабот,
	|	ВыработкаСотрудниковВидыРабот.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	СУММА(ВыработкаСотрудниковВидыРабот.Количество) КАК Количество,
	|	ВыработкаСотрудниковВидыРабот.Расценка КАК Расценка,
	|	СУММА(ВыработкаСотрудниковВидыРабот.Сумма) КАК Сумма,
	|	ВыработкаСотрудниковВидыРабот.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	ВыработкаСотрудниковВидыРабот.Распоряжение.Дата КАК РаспоряжениеДата,
	|	ВыработкаСотрудниковВидыРабот.ВидРабот.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ИСТИНА
	|			ТОГДА """"
	|	КОНЕЦ КАК ТипРаспоряжения
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ВыработкаСотрудниковВидыРабот
	|ГДЕ
	|	ВыработкаСотрудниковВидыРабот.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаСотрудниковВидыРабот.Ссылка,
	|	ВыработкаСотрудниковВидыРабот.ВидРабот,
	|	ВыработкаСотрудниковВидыРабот.СтатьяКалькуляции,
	|	ВыработкаСотрудниковВидыРабот.Расценка,
	|	ВыработкаСотрудниковВидыРабот.Распоряжение.Номер,
	|	ВыработкаСотрудниковВидыРабот.Распоряжение.Дата,
	|	ВыработкаСотрудниковВидыРабот.ВидРабот.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ИСТИНА
	|			ТОГДА """"
	|	КОНЕЦ 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки,
	|	ВидРабот
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаСотрудниковСотрудники.Работник.Код КАК СотрудникКод,
	|	ВыработкаСотрудниковСотрудники.Работник.Наименование КАК СотрудникФИО,
	|	НЕОПРЕДЕЛЕНО КАК ВидРабот,
	|	СУММА(ВыработкаСотрудниковСотрудники.КТУ) КАК КТУ,
	|	СУММА(ВыработкаСотрудниковСотрудники.ТарифнаяСтавка) КАК Ставка,
	|	СУММА(ВыработкаСотрудниковСотрудники.ОтработаноЧасов) КАК Время,
	|	СУММА(ВыработкаСотрудниковСотрудники.Сумма) КАК Сумма,
	|	ВыработкаСотрудниковСотрудники.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК РаспоряжениеНомер,
	|	НЕОПРЕДЕЛЕНО КАК РаспоряжениеДата,
	|	НЕОПРЕДЕЛЕНО КАК ТипРаспоряжения,
	|	ВыработкаСотрудниковСотрудники.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВыработкаСотрудников.Работники КАК ВыработкаСотрудниковСотрудники
	|ГДЕ
	|	ВыработкаСотрудниковСотрудники.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаСотрудниковСотрудники.Работник.Код,
	|	ВыработкаСотрудниковСотрудники.Работник.Наименование,
	|	ВыработкаСотрудниковСотрудники.Ссылка,
	|	ВыработкаСотрудниковСотрудники.НомерСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.Работник.Код КАК СотрудникКод,
	|	ДД.Работник.Наименование КАК СотрудникФИО,
	|	ДД.ВидРабот КАК ВидРабот,
	|	0 КАК КТУ,
	|	0 КАК ТарифнаяСтавка,
	|	0 КАК ОтработаноЧасов,
	|	СУММА(ДД.Сумма) КАК Сумма,
	|	ДД.Ссылка КАК Ссылка,
	|	ДД.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	ДД.Распоряжение.Дата КАК РаспоряжениеДата,
	|	ВЫБОР
	|		КОГДА ДД.Распоряжение ССЫЛКА Документ.ПроизводствоБезЗаказа
	|			ТОГДА &СинонимПроизводстваБезЗаказа
	|		КОГДА ИСТИНА
	|			ТОГДА """"
	|	КОНЕЦ КАК ТипРаспоряжения,
	|	ДД.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ДД
	|ГДЕ
	|	ДД.Ссылка В(&МассивОбъектов)
	|	И (НЕ ДД.Ссылка.Автораспределение И ДД.Ссылка.ВидНаряда В (ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.БригадныйПоЗаказу21),
	|												ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.БригадныйБезЗаказа21),
	|												ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.ПрочиеРаботы),
	|												ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Ремонт))
	|		ИЛИ ДД.Ссылка.ВидНаряда = ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Персональный))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДД.Работник.Код,
	|	ДД.Работник.Наименование,
	|	ДД.ВидРабот,
	|	ДД.Ссылка,
	|	ДД.Распоряжение.Номер,
	|	ДД.Распоряжение.Дата,
	|	ВЫБОР
	|		КОГДА ДД.Распоряжение ССЫЛКА Документ.ПроизводствоБезЗаказа
	|			ТОГДА &СинонимПроизводстваБезЗаказа
	|		КОГДА ИСТИНА
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ДД.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникФИО
	|ИТОГИ
	|	МАКСИМУМ(СотрудникФИО),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка,
	|	СотрудникКод";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("СинонимПроизводстваБезЗаказа", НСтр("ru='Производство без заказа'"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результат[0].Выбрать();
	ВыборкаПоВидамРабот = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоСотрудникам = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВыработкаСотрудников.ПФ_MXL_ВыработкаСотрудников");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаБригады = Макет.ПолучитьОбласть("ШапкаБригады");
	
	ОбластьИмяТаблицыВидовРабот = Макет.ПолучитьОбласть("ИмяТаб_ВыполненныеРаботы");
	
	ОбластьЗаголовокТаблицыВидовРабот = Макет.ПолучитьОбласть("ЗаголовокТаб_ВыполненныеРаботы");
	ОбластьСтрокаТаблицыВидовРабот = Макет.ПолучитьОбласть("Строка_ВыполненныеРаботы");
	
	ОбластьЗаголовокТаблицыВидовРаботБезЗаказа = Макет.ПолучитьОбласть("ЗаголовокТаб_ВыполненныеРаботы_БезЗаказа");
	ОбластьСтрокаТаблицыВидовРаботБезЗаказа = Макет.ПолучитьОбласть("Строка_ВыполненныеРаботы_БезЗаказа");
	
	ОбластьИтогТаблицыВидовРабот = Макет.ПолучитьОбласть("Итог_ВыполненныеРаботы");
	
	ОбластьИмяТаблицыСотрудники = Макет.ПолучитьОбласть("ИмяТаб_Сотрудники");
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		// Таблица Выполненные работы.
		Если Не ВыборкаПоВидамРабот.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоВидамРабот.Выбрать();
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПоДокументам.НомерДокумента, Ложь, Истина);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.Бригада) Тогда
			ОбластьШапкаБригады.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьШапкаБригады);
		КонецЕсли;
		
		ОбластьИмяТаблицыВидовРабот.Параметры.НачалоПериода = Формат(ВыборкаПоДокументам.НачалоПериода, "ДЛФ=D");
		ОбластьИмяТаблицыВидовРабот.Параметры.КонецПериода = Формат(ВыборкаПоДокументам.КонецПериода, "ДЛФ=D");
		ТабличныйДокумент.Вывести(ОбластьИмяТаблицыВидовРабот);
		
		Если ВыборкаПоДокументам.ПоРаспоряжениям Тогда
			ОбластьЗаголовокТаблицыВидовРабот.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицыВидовРабот);
		Иначе
			ОбластьЗаголовокТаблицыВидовРаботБезЗаказа.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицыВидовРаботБезЗаказа);
		КонецЕсли;
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			Если ВыборкаПоДокументам.ПоРаспоряжениям Тогда
				
				ОбластьСтрокаТаблицыВидовРабот.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ОбластьСтрокаТаблицыВидовРабот.Параметры.РаспоряжениеНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПоСтрокамТЧ.РаспоряжениеНомер, Ложь, Истина);
				ОбластьСтрокаТаблицыВидовРабот.Параметры.РаспоряжениеДата = Формат(ВыборкаПоСтрокамТЧ.РаспоряжениеДата, "ДЛФ=D");
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыВидовРабот);
				
			Иначе
				ОбластьСтрокаТаблицыВидовРаботБезЗаказа.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыВидовРаботБезЗаказа);
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьИтогТаблицыВидовРабот.Параметры.Заполнить(ВыборкаПоВидамРабот);
		ТабличныйДокумент.Вывести(ОбластьИтогТаблицыВидовРабот);
		
		// Таблица Сотрудники.
		Если Не ВыборкаПоСотрудникам.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьЗаголовокТаблицыСотрудники = Макет.ПолучитьОбласть("ЗаголовокТаб_Сотрудники_" + ВыборкаПоДокументам.СуффиксОбласти);
		ОбластьСтрокаТаблицыСотрудники = Макет.ПолучитьОбласть("Строка_Сотрудники_" + ВыборкаПоДокументам.СуффиксОбласти);
		ОбластьИтогТаблицыСотрудники = Макет.ПолучитьОбласть("Итог_Сотрудники_" + ВыборкаПоДокументам.СуффиксОбласти);
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоСотрудникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ТабличныйДокумент.Вывести(ОбластьИмяТаблицыСотрудники);
		
		ОбластьЗаголовокТаблицыСотрудники.Параметры.Заполнить(ВыборкаПоДокументам);
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицыСотрудники);
		
		НомерСтроки = 1;
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			Выборка = ВыборкаПоСтрокамТЧ.Выбрать();
			ВывестиОбластьИтогТаблицыСотрудник = Ложь;
			
			Если ВыборкаПоДокументам.СуффиксОбласти = "НеАвто" Тогда
				
				ОбластьИтогТаблицыСотрудник = Макет.ПолучитьОбласть("Итог_Сотрудник_" + ВыборкаПоДокументам.СуффиксОбласти);
				ОбластьИтогТаблицыСотрудник.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ОбластьИтогТаблицыСотрудник.Параметры.НомерСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
				ВывестиОбластьИтогТаблицыСотрудник = Истина;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Если ВывестиОбластьИтогТаблицыСотрудник Тогда
					
					ОбластьИтогТаблицыСотрудник.Параметры.Заполнить(Выборка);
					
					Если ВыборкаПоДокументам.СуффиксОбласти = "НеАвто" Тогда
						ОбластьИтогТаблицыСотрудник.Параметры.РаспоряжениеНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.РаспоряжениеНомер, Ложь, Истина);
						ОбластьИтогТаблицыСотрудник.Параметры.РаспоряжениеДата = Формат(Выборка.РаспоряжениеДата, "ДЛФ=D");
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьИтогТаблицыСотрудник);
					
					ВывестиОбластьИтогТаблицыСотрудник = Ложь;
					
				Иначе
					
					ОбластьСтрокаТаблицыСотрудники.Параметры.Заполнить(Выборка);
					
					Если ВыборкаПоДокументам.СуффиксОбласти = "НеАвто" Тогда
						ОбластьСтрокаТаблицыСотрудники.Параметры.РаспоряжениеНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.РаспоряжениеНомер, Ложь, Истина);
						ОбластьСтрокаТаблицыСотрудники.Параметры.РаспоряжениеДата = Формат(Выборка.РаспоряжениеДата, "ДЛФ=D");
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыСотрудники);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОбластьИтогТаблицыСотрудники.Параметры.Заполнить(ВыборкаПоСотрудникам);
		ТабличныйДокумент.Вывести(ОбластьИтогТаблицыСотрудники);
		
		ОбластьПодвал.Параметры.Менеджер = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Менеджер, ВыборкаПоДокументам.ДатаДокумента);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ВыработкаСотрудников.Форма.ФормаСпискаДокументов";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ВыработкаСотрудников))
		И ПравоДоступа("Добавление", Метаданные.Документы.ВыработкаСотрудников)
		И ПравоДоступа("Чтение",     Метаданные.РегистрыНакопления.ТрудозатратыКОформлению)
		И НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК ВыработкаСотрудниковТрудозатратыКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТрудозатратыКОформлению.ВидРабот КАК ВидРабот,
	|		ТрудозатратыКОформлению.Организация КАК Организация,
	|		ТрудозатратыКОформлению.Исполнитель КАК Исполнитель,
	|		ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
	|		ТрудозатратыКОформлению.Подразделение КАК Подразделение
	|	ИЗ
	|		РегистрНакопления.ТрудозатратыКОформлению.Остатки(, ) КАК ТрудозатратыКОформлению
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТрудозатратыКОформлению.Распоряжение,
	|		ТрудозатратыКОформлению.Исполнитель,
	|		ТрудозатратыКОформлению.ВидРабот,
	|		ТрудозатратыКОформлению.Организация,
	|		ТрудозатратыКОформлению.Подразделение) КАК ВложенныйЗапрос";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ВыработкаСотрудников
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ВыработкаСотрудников";
	ДелоРодитель.Представление  = НСтр("ru = 'Выработка сотрудников'");
	ДелоРодитель.ЕстьДела       = Результат.ВыработкаСотрудниковТрудозатратыКОформлению > 0;
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Производство;
	
	// ВыработкаСотрудниковТрудозатратыКОформлению
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Бригада", Справочники.Бригады.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ВидНаряда", Перечисления.ВидыБригадныхНарядов.ПустаяСсылка());
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "ГруппаТрудозатратыКОформлению");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыработкаСотрудниковТрудозатратыКОформлению";
	Дело.ЕстьДела       = Результат.ВыработкаСотрудниковТрудозатратыКОформлению > 0;
	Дело.Представление  = НСтр("ru = 'Трудозатраты к оформлению'");
	Дело.Количество     = Результат.ВыработкаСотрудниковТрудозатратыКОформлению;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыработкаСотрудников";
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеПроизводства

Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ВыработкаСотрудников) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КОформлению = ТрудозатратыКОформлению(Параметры);
	
	Выборка = КОформлению.Выбрать();
	
	ТекстГиперссылки = НСтр("ru = 'Выработка сотрудников'");
	Если Не Выборка.Следующий() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			"Документ.ВыработкаСотрудников.Форма.ФормаСпискаДокументов");
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			"Документ.ВыработкаСотрудников.Форма.ФормаСпискаДокументов");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ЗаписатьНовыйДокумент(ТекущийДокумент, СписокДокументов, СписокОшибок)
	
	Если ТекущийДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРаботников(ТекущийДокумент);
	
	ТекущийДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	Если ТекущийДокумент.ПроверитьЗаполнение() Тогда
		Попытка
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДобавитьОшибкуАвтоматическогоСоздания(ТекущийДокумент, СписокОшибок, "Проведение", ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ДобавитьОшибкуАвтоматическогоСоздания(ТекущийДокумент, СписокОшибок, "Заполнение");
	КонецЕсли;
	
	СписокДокументов.Добавить(ТекущийДокумент.Ссылка);
	
КонецПроцедуры

Процедура ДобавитьОшибкуАвтоматическогоСоздания(Документ, СписокОшибок, ТипОшибки, ОписаниеОшибки = "")
	
	Если ТипОшибки = "Заполнение" Тогда
		Если Документ.ВидНаряда = Перечисления.ВидыБригадныхНарядов.Персональный Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка заполнения персонального наряда за период с %1 по %2 по организации ""%3"" и подразделению ""%4"".'"),
				Формат(Документ.НачалоПериода,"ДЛФ=dd.MM.yyyy"),
				Формат(Документ.КонецПериода,"ДЛФ=dd.MM.yyyy"),
				Документ.Организация,
				Документ.Подразделение);
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка заполнения бригадного наряда за период с %1 по %2 по организации ""%3"", бригаде ""%4"" и подразделению ""%5"".'"),
				Формат(Документ.НачалоПериода,"ДЛФ=dd.MM.yyyy"),
				Формат(Документ.КонецПериода,"ДЛФ=dd.MM.yyyy"),
				Документ.Организация,
				Документ.Бригада,
				Документ.Подразделение);
		КонецЕсли;
	ИначеЕсли ТипОшибки = "Проведение" Тогда
		Если Документ.ВидНаряда = Перечисления.ВидыБригадныхНарядов.Персональный Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка проведения персонального наряда за период с %1 по %2 по организации ""%3"" и подразделению ""%4"": %5.'"),
				Формат(Документ.НачалоПериода,"ДЛФ=dd.MM.yyyy"),
				Формат(Документ.КонецПериода,"ДЛФ=dd.MM.yyyy"),
				Документ.Организация,
				Документ.Подразделение,
				ОписаниеОшибки);
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка проведения бригадного наряда за период с %1 по %2 по организации ""%3"", бригаде ""%4"" и подразделению ""%5"": %6.'"),
				Формат(Документ.НачалоПериода,"ДЛФ=dd.MM.yyyy"),
				Формат(Документ.КонецПериода,"ДЛФ=dd.MM.yyyy"),
				Документ.Организация,
				Документ.Бригада,
				Документ.Подразделение,
				ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли ТипОшибки = "УдалениеДокумента" Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось удалить документ %1 по причине: %2.'"),
				Документ.Ссылка,
				ОписаниеОшибки);
	КонецЕсли;
	
	СтруктураОшибки = Новый Структура();
	СтруктураОшибки.Вставить("Организация", Документ.Организация);
	СтруктураОшибки.Вставить("Документ", Документ.Ссылка);
	СтруктураОшибки.Вставить("ТекстОшибки", ТекстОшибки);
	СтруктураОшибки.Вставить("ТипОшибки", ТипОшибки);
	
	СписокОшибок.Добавить(СтруктураОшибки);
	
КонецПроцедуры

Функция СоставыБригад(Период, Бригады)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВыработкаСотрудников.Дата) КАК Дата,
	|	ВыработкаСотрудников.Бригада КАК Бригада
	|ПОМЕСТИТЬ втДатыАктуальности
	|ИЗ
	|	Документ.ВыработкаСотрудников КАК ВыработкаСотрудников
	|ГДЕ
	|	ВыработкаСотрудников.Дата <= &Период
	|	И ВыработкаСотрудников.Бригада В(&Бригады)
	|	И ВыработкаСотрудников.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаСотрудников.Бригада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВыработкаСотрудников.Ссылка) КАК Ссылка,
	|	втДатыАктуальности.Бригада КАК Бригада
	|ПОМЕСТИТЬ ДокументыСостава
	|ИЗ
	|	втДатыАктуальности КАК втДатыАктуальности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыработкаСотрудников КАК ВыработкаСотрудников
	|		ПО втДатыАктуальности.Дата = ВыработкаСотрудников.Дата
	|			И втДатыАктуальности.Бригада = ВыработкаСотрудников.Бригада
	|ГДЕ
	|	ВыработкаСотрудников.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	втДатыАктуальности.Бригада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСостава.Бригада КАК Бригада,
	|	Работники.Работник КАК Работник,
	|	СУММА(Работники.КТУ) КАК КТУ
	|ИЗ
	|	ДокументыСостава КАК ДокументыСостава
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыработкаСотрудников.Работники КАК Работники
	|		ПО ДокументыСостава.Ссылка = Работники.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыСостава.Бригада,
	|	Работники.Работник
	|ИТОГИ ПО
	|	Бригада";
	
	Запрос.УстановитьПараметр("Бригады", Бригады);
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли
