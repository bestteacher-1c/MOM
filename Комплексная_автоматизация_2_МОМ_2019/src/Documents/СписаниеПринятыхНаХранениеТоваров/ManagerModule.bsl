#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//	Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//	КомандыСозданияНаОсновании	- ТаблицаЗначений	- Таблица с командами создания на основании. Для изменения.
//		См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//	Параметры					- Структура			- Вспомогательные параметры. Для чтения.
//		См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	КомандыСоздания = Новый Массив;
	
	Команда = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КомандыСоздания.Добавить(Команда);
	
	Команда = Документы.РасходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КомандыСоздания.Добавить(Команда);
	
	Команда = Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КомандыСоздания.Добавить(Команда);
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	УстановитьВидимостьКомандСозданияНаОсновании(КомандыСоздания);
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//	КомандыОтчетов	- ТаблицаЗначений	- Таблица с командами отчетов. Для изменения.
//		См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//	Параметры		- Структура			- Вспомогательные параметры. Для чтения.
//		См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.ОстаткиТоваровОрганизаций.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий.
//
// Возвращаемое значение:
//	Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Дата";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры
//	Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение
//	Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	
	ПустаяСтруктура = Новый Структура();
	ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", ПустаяСтруктура)
										Или ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыПроизводство", ПустаяСтруктура);
	УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", ПустаяСтруктура)
										Или ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямПроизводство", ПустаяСтруктура);
	
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости    = Истина;
	
	ПараметрыУказанияСерий.ИмяТЧСерии   = "Товары";
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ДвижениеВФинансовомУчете);
	
	ПараметрыУказанияСерий.Дата         = Объект.Дата;
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ТипМестаХранения");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Подразделение");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий.
//
// Параметры:
//	ПараметрыУказанияСерий - Структура - состав полей задается в функции
//		НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Серия               КАК Серия,
	|	Товары.Количество          КАК Количество,
	|	Товары.Склад               КАК Склад,
	|	Товары.Подразделение       КАК Подразделение,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.ТипМестаХранения    КАК ТипМестаХранения
	|
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки           КАК НомерСтроки,
	|	Товары.ТипМестаХранения      КАК ТипМестаХранения,
	|	Товары.СтатусУказанияСерий   КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерийПоСкладам.ПолитикаУчетаСерий ЕСТЬ NULL
	|				И ПолитикиУчетаСерийПоПодразделениям.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерийПоСкладам.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ИЛИ ПолитикиУчетаСерийПоПодразделениям.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА ВидНоменклатуры.ПолитикаУчетаСерий.УчетСерийВПереданныхНаХранениеТоварах
	|								ТОГДА ВЫБОР
	|										КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 18
	|										ИНАЧЕ 17
	|									КОНЕЦ
	|								ИНАЧЕ 0
	|						КОНЕЦ
	|					ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерийТоварыУПартнеров
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийПоСкладам
	|		ПО ПолитикиУчетаСерийПоСкладам.Склад = Товары.Склад
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерийПоСкладам.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийПоПодразделениям
	|		ПО ПолитикиУчетаСерийПоСкладам.Склад = Товары.Подразделение
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерийПоСкладам.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидНоменклатуры
	|		ПО ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки         КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Статусы.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.ДоговорКонтрагента) ТОГДА
	|			Статусы.СтатусУказанияСерийТоварыУПартнеров
	|		ИНАЧЕ
	|			Статусы.СтатусУказанияСерий
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Статусы.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.ДоговорКонтрагента) ТОГДА
	|			Статусы.СтатусУказанияСерийТоварыУПартнеров
	|		ИНАЧЕ
	|			Статусы.СтатусУказанияСерий
	|	КОНЕЦ <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Назначения

// Возвращает структуру описания формы документа, используемую при заполнении реквизитов, связанных 
// с направлением деятельности.
//
// Возвращаемое значение:
//	Структура - см. описание НаправленияДеятельностиСервер.СтруктураОбъекта().
//
Функция ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ОформляетсяПоЗаказу = Ложь;
	
	Возврат СтруктураОбъекта;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
// Возвращаемое значение:
//	Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ДвиженияПоСкладскимРегистрам = "ИСТИНА";
	
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ВсеНазначения", Истина, "Объект.Товары.Назначение");
	
	Возврат МакетФормы;
	
КонецФункции

#КонецОбласти

#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	Возврат СписаниеПринятыхНаХранениеТоваровЛокализация.ТекстОтраженияВРеглУчете();
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламетированном учете.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат СписаниеПринятыхНаХранениеТоваровЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();
	
КонецФункции

#КонецОбласти

// Заполняет массив реквизитов, зависимых от хозяйственной операции.
//
// Параметры:
//	ХозяйственнаяОперация		- ПеречислениеСсылка.ХозяйственныеОперации	- хозяйственная операция документа.
//	МассивВсехРеквизитов		- Массив									- реквизиты, которые не зависят от хозяйственной операции.
//	МассивРеквизитовОперации	- Массив									- реквизиты, которые зависят от хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Валюта");
	МассивВсехРеквизитов.Добавить("ВалютаВзаиморасчетов");
	МассивВсехРеквизитов.Добавить("СтатьяРасходов");
	МассивВсехРеквизитов.Добавить("АналитикаРасходов");
	МассивВсехРеквизитов.Добавить("АналитикаАктивовПассивов");
	МассивВсехРеквизитов.Добавить("ГруппаФинансовогоУчета");
	МассивВсехРеквизитов.Добавить("ДатаПлатежа");
	МассивВсехРеквизитов.Добавить("ФормаОплаты");
	МассивВсехРеквизитов.Добавить("ПорядокОплаты");
	МассивВсехРеквизитов.Добавить("ПорядокРасчетов");
	МассивВсехРеквизитов.Добавить("БанковскийСчетОрганизации");
	МассивВсехРеквизитов.Добавить("БанковскийСчетКонтрагента");
	
	МассивРеквизитовОперации = Новый Массив;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы Тогда
		МассивРеквизитовОперации = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивВсехРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

#Область ФормированиеГиперссылкиВЖурналеДокументовЗакупки

// Возвращает текст гиперссылки перехода из журнала документов в рабочее место
// по оформлению списаний принятых на хранение товаров.
//
// Параметры:
//	Параметры - Структура - параметры формирования текста гиперссылки.
//
// ВозвращаемоеЗначение:
//	ФорматированнаяСтрока - текст гиперссылки перехода в рабочее место
//	по оформлению списаний принятых на хранение товаров.
//
Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыОрганизаций) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстГиперссылки = НСтр("ru = 'Списание с хранения'");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыПринятыеОстатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки КАК ТоварыПринятыеОстатки
	|ГДЕ
	|	ТоварыПринятыеОстатки.КОформлениюСписанияОстаток > 0
	|	И ИСТИНА";
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА", "ТоварыПринятыеОстатки.Организация = &Организация");
	КонецЕсли;
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки, , , ,
			"Документ.СписаниеПринятыхНаХранениеТоваров.Форма.СписокКОформлениюСписанийПринятыхНаХранение");
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки, , ЦветаСтиля.НезаполненноеПолеТаблицы, ,
			"Документ.СписаниеПринятыхНаХранениеТоваров.Форма.СписокКОформлениюСписанийПринятыхНаХранение");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Функция определяет реквизиты выбранного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПринятыхНаХранениеТоваров - Ссылка на документ.
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДанныеДокумента.Курс КАК Курс,
	|	ДанныеДокумента.Кратность КАК Кратность
	|
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		Валюта = Выборка.Валюта;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
		Кратность = Выборка.Кратность;
		Курс = Выборка.Курс;
	Иначе
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		Валюта = Справочники.Валюты.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
		Кратность = 1;
		Курс = 1;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Дата", Дата);
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Партнер", Партнер);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("Договор", Договор);
	СтруктураРеквизитов.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	СтруктураРеквизитов.Вставить("Валюта", Валюта);
	СтруктураРеквизитов.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	СтруктураРеквизитов.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("Курс", Курс);
	СтруктураРеквизитов.Вставить("Кратность", Кратность);
	СтруктураРеквизитов.Вставить("НаправлениеДеятельности", НаправлениеДеятельности);
	
	Возврат СтруктураРеквизитов;

КонецФункции

#Область Состояние

// Осуществляет вычисление текущего состояния по поступлению без заказа
//
// Параметры:
//	Списание          - ДокументСсылка.СписаниеПринятыхНаХранениеТоваров - Документ, состояние которого необходимо вычислить.
//	Договор           - СправочникСсылка.ДоговорыКонтрагентов - Договор с клиентом.
//	СостояниеРасчетов - ФормаКлиентскогоПриложения - Форма, в реквизиты которой будет помещено рассчитанное состояние.
//
Процедура РассчитатьСостояние(Знач Списание, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Новый Структура("СуммаОплаты,ПроцентОплаты",0,0));
	
	Если ЗначениеЗаполнено(Списание) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументСписаниеПринятыхНаХранениеТоваров.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументСписаниеПринятыхНаХранениеТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы) И
			|		ДокументСписаниеПринятыхНаХранениеТоваров.Проведен И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) КАК ЧИСЛО(31, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОплаты,
			|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументСписаниеПринятыхНаХранениеТоваров.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументСписаниеПринятыхНаХранениеТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы) И
			|		ДокументСписаниеПринятыхНаХранениеТоваров.Проведен И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) * 100 / РасчетыСПоставщикамиОстатки.КОплатеРасход КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОплаты
			|ИЗ
			|	Документ.СписаниеПринятыхНаХранениеТоваров КАК ДокументСписаниеПринятыхНаХранениеТоваров
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(,,,,ЗаказПоставщику = &РасчетныйДокумент) КАК РасчетыСПоставщикамиОстатки
			|ПО
			|	ИСТИНА
			|ГДЕ
			|	ДокументСписаниеПринятыхНаХранениеТоваров.Ссылка = &Списание
			|
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Списание, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("Списание", Списание);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			Списание));
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	// Выполение запроса и выгрузка полученных таблиц для формирования движений
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений,
		Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                   КАК Ссылка,
	|	ДанныеДокумента.Номер                    КАК Номер,
	|	ДанныеДокумента.Дата                     КАК Период,
	|	ДанныеДокумента.Партнер                  КАК Партнер,
	|	ДанныеДокумента.Контрагент               КАК Контрагент,
	|	ДанныеДокумента.Соглашение               КАК Соглашение,
	|	ДанныеДокумента.Организация              КАК Организация,
	|	ДанныеДокумента.Договор                  КАК Договор,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                    КАК РасчетыПоДоговорам,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|				И ЕСТЬNULL(ДанныеДокумента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                    КАК ГрафикИсполненияВДоговоре,
	|	ДанныеДокумента.ХозяйственнаяОперация    КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                    КАК ЭтоСписаниеЗаНашСчет,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|			ТОГДА ДанныеДокумента.СтатьяРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                    КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов        КАК АналитикаРасходов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ДанныеДокумента.СтатьяРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                    КАК СтатьяАктивовПассивов,
	|	ДанныеДокумента.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ДанныеДокумента.Валюта                   КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов     КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Менеджер                 КАК Менеджер,
	|	ДанныеДокумента.Подразделение            КАК Подразделение,
	|	ДанныеДокумента.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ДатаПлатежа              КАК ДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты              КАК ФормаОплаты,
	|	ДанныеДокумента.СуммаДокумента           КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаВзаиморасчетов      КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Комментарий              КАК Комментарий,
	|	ДанныеДокумента.Проведен                 КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления          КАК ПометкаУдаления
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта());
	НомерНаПечать           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер);
	ИнформацияПоДоговору    = "";
	
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru='По договору ""%Договор%""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.Договор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",        ИдентификаторМетаданных);
	Запрос.УстановитьПараметр("НомерНаПечать",                  НомерНаПечать);
	Запрос.УстановитьПараметр("ИнформацияПоДоговору",           ИнформацияПоДоговору);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",     Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                     КАК Документ,
	|	&Период                     КАК Период,
	|	&Ссылка                     КАК Регистратор,
	|	ТаблицаСерии.Номенклатура   КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаСерии.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                       КАК Назначение,
	|	ТаблицаСерии.Серия          КАК Серия,
	|	ТаблицаСерии.Количество     КАК Количество,
	|	&Партнер                    КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ДвижениеВФинансовомУчете) КАК СкладскаяОперация,
	|	ЛОЖЬ                        КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	//Порядок и состав полей запроса проведения
	ШаблонПолей = "
	|ВЫБРАТЬ
	|	Шаблон.Период                       КАК Период,
	|	Шаблон.ДатаРегистратора             КАК ДатаРегистратора,
	|	Шаблон.НомерРегистратора            КАК НомерРегистратора,
	|	Шаблон.ДатаПлатежа                  КАК ДатаПлатежа,
	|	Шаблон.ВидДвижения                  КАК ВидДвижения,
	|	Шаблон.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
	|	Шаблон.ЗаказПоставщику              КАК ЗаказПоставщику,
	|	Шаблон.ЗакупкаПоЗаказу              КАК ЗакупкаПоЗаказу,
	|	Шаблон.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	Шаблон.Валюта                       КАК Валюта,
	|	Шаблон.ФормаОплаты                  КАК ФормаОплаты,
	|	Шаблон.Сумма                        КАК Сумма,
	|	Шаблон.КОплате                      КАК КОплате,
	|	Шаблон.КПоступлению                 КАК КПоступлению,
	|	Шаблон.СуммаРегл                    КАК СуммаРегл,
	|	Шаблон.СуммаУпр                     КАК СуммаУпр,
	|	Шаблон.Организация                  КАК Организация,
	|	Шаблон.ВалютаДокумента              КАК ВалютаДокумента,
	|	Шаблон.КорОбъектРасчетов            КАК КорОбъектРасчетов
	|ИЗ
	|	#Шаблон КАК Шаблон
	|ГДЕ
	|	&ЭтоСписаниеЗаНашСчет 
	|	И &ОтборШаблон
	|";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	&Период                                КАК ДатаРегистратора,
	|	&Номер                                 КАК НомерРегистратора,
	|	&ДатаПлатежа                           КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР КОГДА &РасчетыПоДоговорам
	|		ТОГДА &Договор
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|	НЕОПРЕДЕЛЕНО                           КАК ЗакупкаПоЗаказу,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов                  КАК Валюта,
	|	НЕОПРЕДЕЛЕНО                           КАК ФормаОплаты,
	|	&СуммаВзаиморасчетов                   КАК Сумма,
	|	0                                      КАК КОплате,
	|	0                                      КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				И &Валюта <> &ВалютаРегламентированногоУчета
	|			ТОГДА &СуммаВзаиморасчетов
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(&СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31, 2))
	|	КОНЕЦ                                  КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА &СуммаВзаиморасчетов
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(&СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31, 2))
	|	КОНЕЦ                                  КАК СуммаУпр,
	|	&Организация                           КАК Организация,
	|	&Валюта                                КАК ВалютаДокумента,
	|	Неопределено                           КАК КорОбъектРасчетов
	|ГДЕ
	|	&ЭтоСписаниеЗаНашСчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(&ДатаПлатежа, День)       КАК Период,
	|	&Период                                КАК ДатаРегистратора,
	|	&Номер                                 КАК НомерРегистратора,
	|	&ДатаПлатежа                           КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР КОГДА &РасчетыПоДоговорам
	|		ТОГДА &Договор
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|	НЕОПРЕДЕЛЕНО                           КАК ЗакупкаПоЗаказу,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов                  КАК Валюта,
	|	&ФормаОплаты                           КАК ФормаОплаты,
	|	0                                      КАК Сумма,
	|	&СуммаВзаиморасчетов                   КАК КОплате,
	|	0                                      КАК КПоступлению,
	|	0                                      КАК СуммаРегл,
	|	0                                      КАК СуммаУпр,
	|	&Организация                           КАК Организация,
	|	&Валюта                                КАК ВалютаДокумента,
	|	Неопределено                           КАК КорОбъектРасчетов
	|ГДЕ
	|	&ЭтоСписаниеЗаНашСчет
	|
	|//ЗачетАвансовПоставщикуПоНакладной
	|
	|";
	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"//ЗачетАвансовПоставщикуПоНакладной",
		ВзаиморасчетыСервер.ТекстПроведенияЗачетАвансовПоставщикуПоНакладной("СписаниеПринятыхНаХранениеТоваров", ШаблонПолей));
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                  КАК Ссылка,
	|	&Период                  КАК ДатаДокументаИБ,
	|	&Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация             КАК Организация,
	|	&ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	&Партнер                 КАК Партнер,
	|	&Контрагент              КАК Контрагент,
	|	&Договор                 КАК Договор,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Партнер                 КАК МестоХранения,
	|	&Подразделение           КАК Подразделение,
	|	&Менеджер                КАК Ответственный,
	|	ВЫРАЗИТЬ(&Комментарий КАК СТРОКА(100)) КАК Комментарий,
	|	&Валюта                  КАК Валюта,
	|	&СуммаДокумента          КАК Сумма,
	|	НЕОПРЕДЕЛЕНО             КАК Статус,
	|	&Проведен                КАК Проведен,
	|	&ПометкаУдаления         КАК ПометкаУдаления,
	|	ЛОЖЬ                     КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору    КАК Дополнительно,
	|	&Период                  КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать           КАК НомерПервичногоДокумента
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                      КАК Порядок,
	|	ВидыЗапасов.НомерСтроки                КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ
	|			ВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                                  КАК АналитикаУчетаНоменклатуры,
	|	&Организация                           КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажиКОформлениюСписания) КАК РазделУчета,
	|	ВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	//	партионный учет версии 2.2
	|	НЕОПРЕДЕЛЕНО                           КАК Партия,
	|	НЕОПРЕДЕЛЕНО                           КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО                           КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО                           КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО                           КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО                           КАК КорАналитикаУчетаПартий,
	|	0                                      КАК СтоимостьЗабалансовая,
	|	0                                      КАК СтоимостьЗабалансоваяРегл,
	|	0                                      КАК Стоимость,
	|	0                                      КАК СтоимостьБезНДС,
	|	0                                      КАК СтоимостьРегл,
	|	ВидыЗапасов.Количество                 КАК Количество,
	|	0                                      КАК ПостояннаяРазница,
	|	0                                      КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КАК ТипЗаписи,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                  КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Организация                             КАК Организация,
	|	&Подразделение                           КАК Подразделение,
	|	ТаблицаТовары.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	&СтатьяАктивовПассивов                   КАК Статья,
	|	&АналитикаАктивовПассивов                КАК Аналитика,
	|	
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр)      КАК Сумма
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаТовары
	|ГДЕ
	|	&ЭтоСписаниеЗаНашСчет
	|	И &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.НаправлениеДеятельности,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК Договор,
	|	ВЫБОР КОГДА &РасчетыПоДоговорам
	|		ТОГДА &Договор
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	ВЫБОР 
	|		КОГДА &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО
	|			ТОГДА &СтатьяАктивовПассивов
	|		ИНАЧЕ &СтатьяРасходов
	|	КОНЕЦ КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|	&АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА &СуммаВзаиморасчетов
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(&СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				И &Валюта <> &ВалютаРегламентированногоУчета
	|			ТОГДА &СуммаВзаиморасчетов
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(&СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,

	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	&СуммаВзаиморасчетов КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,

	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&СуммаВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА &РасчетыПоДоговорам
	|		ТОГДА &Договор
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК ИсточникГФУРасчетов
	|ГДЕ
	|	&ЭтоСписаниеЗаНашСчет";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки          КАК НомерСтроки,
	|	&Период                                 КАК Период,
	|	&Валюта                                 КАК Валюта,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.Сумма                КАК СуммаБезНДС,
	|	0                                       КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.СуммаБезНДСРегл      КАК СуммаБезНДСРегл,
	|	0                                       КАК СуммаНДСРегл,
	|	ТаблицаВидыЗапасов.БазаНДСРегл          КАК БазаНДСРегл,
	|	ТаблицаВидыЗапасов.БазаНДСУпр           КАК БазаНДСУпр,
	|	ТаблицаВидыЗапасов.СуммаБезНДСУпр       КАК СуммаБезНДСУпр,
	|	0                                       КАК СуммаНДСУпр,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	
	|	ТаблицаВидыЗапасов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	&ВалютаВзаиморасчетов                  КАК ВалютаВзаиморасчетов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	&ЭтоСписаниеЗаНашСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                           КАК Период,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	&Организация                      КАК Организация,
	|	ТаблицаВидыЗапасов.ВидЗапасов     КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД       КАК НомерГТД,
	|	&ХозяйственнаяОперация            КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                      КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаАктивовПассивов,
	|	ТаблицаВидыЗапасов.Номенклатура   КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика КАК Характеристика,
	|	ТаблицаВидыЗапасов.Количество     КАК КОформлениюСписания
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы();
	ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + "
	|ВЫБРАТЬ
	|	&Период                                  КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Организация                             КАК Организация,
	|	&Подразделение                           КАК Подразделение,
	|	&СтатьяРасходов                          КАК СтатьяРасходов,
	|	&АналитикаРасходов                       КАК АналитикаРасходов,
	|	ТаблицаТовары.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                             КАК ВидДеятельностиНДС,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр)      КАК СуммаСНДС,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр)      КАК СуммаБезНДС,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр)      КАК СуммаБезНДСУпр,
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл)     КАК СуммаСНДСРегл,
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл)     КАК СуммаБезНДСРегл,
	|	0                                        КАК ПостояннаяРазница,
	|	0                                        КАК ВременнаяРазница,
	|	&ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статья
	|		ПО Статья.Ссылка = &СтатьяРасходов
	|ГДЕ
	|	&ЭтоСписаниеЗаНашСчет
	|	И &СтатьяРасходов <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.НаправлениеДеятельности,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	ХозяйственнаяОперация = Неопределено;
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУПР")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.Валюта,
		Запрос.Параметры.ВалютаВзаиморасчетов, Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаПартнеровИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПоАналитикам = Новый Запрос;
	
	ЗапросПоАналитикам.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация             КАК Организация,
	|	&Договор                 КАК Договор,
	|	&Контрагент              КАК Контрагент,
	|	&Партнер                 КАК Партнер,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО &Организация = Аналитика.Организация
	|			И &Контрагент = Аналитика.Контрагент
	|			И &Партнер = Аналитика.Партнер
	|			И &Договор = Аналитика.Договор
	|			И &НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ЭтоСписаниеЗаНашСчет
	|	И Аналитика.КлючАналитики ЕСТЬ NULL
	|";
	
	ЗапросПоАналитикам.УстановитьПараметр("Ссылка",                  Запрос.Параметры.Ссылка);
	ЗапросПоАналитикам.УстановитьПараметр("Организация",             Запрос.Параметры.Организация);
	ЗапросПоАналитикам.УстановитьПараметр("Контрагент",              Запрос.Параметры.Контрагент);
	ЗапросПоАналитикам.УстановитьПараметр("Партнер",                 Запрос.Параметры.Партнер);
	ЗапросПоАналитикам.УстановитьПараметр("Договор",                 Запрос.Параметры.Договор);
	ЗапросПоАналитикам.УстановитьПараметр("ЭтоСписаниеЗаНашСчет",    Запрос.Параметры.ЭтоСписаниеЗаНашСчет);
	ЗапросПоАналитикам.УстановитьПараметр("НаправлениеДеятельности", Запрос.Параметры.НаправлениеДеятельности);
	
	Выборка = ЗапросПоАналитикам.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаПартнеровИнициализированы", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАналитики = Новый Структура;
	ПараметрыАналитики.Вставить("Партнер",                 Запрос.Параметры.Партнер);
	ПараметрыАналитики.Вставить("Контрагент",              Запрос.Параметры.Контрагент);
	ПараметрыАналитики.Вставить("Организация",             Запрос.Параметры.Организация);
	ПараметрыАналитики.Вставить("Договор",                 Запрос.Параметры.Договор);
	ПараметрыАналитики.Вставить("НаправлениеДеятельности", Запрос.Параметры.НаправлениеДеятельности);
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",
							РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(ПараметрыАналитики));
	
КонецПроцедуры

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки                КАК НомерСтроки,
	|	ВидыЗапасов.Ссылка                     КАК Ссылка,
	|	&Организация                           КАК Организация,
	|	СпрВидыЗапасов.Валюта                  КАК Валюта,
	|	ВидыЗапасов.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|	ВидыЗапасов.ВидЗапасов                 КАК ВидЗапасов,
	|	СпрВидыЗапасов.ТипЗапасов              КАК ТипЗапасов,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики   КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Аналитика.Номенклатура                 КАК Номенклатура,
	|	Аналитика.Характеристика               КАК Характеристика,
	|	Аналитика.Назначение                   КАК Назначение,
	|	Аналитика.Серия                        КАК Серия,
	|	ВидыЗапасов.Количество                 КАК Количество,
	|	ВидыЗапасов.Сумма                      КАК Сумма,
	|	ВидыЗапасов.СуммаВзаиморасчетов        КАК СуммаВзаиморасчетов,
	|	ВидыЗапасов.НомерГТД                   КАК НомерГТД,
	|	ЕСТЬNULL(СпрНазначения.НаправлениеДеятельности,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
	|	
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр,
	|		ВЫБОР
	|			КОГДА &ВалютаУправленческогоУчета = &ВалютаРегламентированногоУчета
	|					И Не Суммы.СуммаБезНДСРегл ЕСТЬ NULL
	|				ТОГДА Суммы.СуммаБезНДСРегл
	|			КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|				ТОГДА ВидыЗапасов.СуммаВзаиморасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ВидыЗапасов.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31, 2))
	|		КОНЕЦ)                             КАК СуммаБезНДСУпр,
	|	
	|	ЕСТЬNULL(Суммы.БазаНДСУпр,
	|		ВЫБОР
	|			КОГДА &Валюта = &ВалютаУправленческогоУчета
	|					И &Валюта <> &ВалютаРегламентированногоУчета
	|				ТОГДА ВидыЗапасов.СуммаВзаиморасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ВидыЗапасов.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31, 2))
	|		КОНЕЦ)                             КАК БазаНДСУпр,
	|	
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл,
	|		ВЫБОР
	|			КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|					И &Валюта <> &ВалютаРегламентированногоУчета
	|				ТОГДА ВидыЗапасов.СуммаВзаиморасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ВидыЗапасов.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31, 2))
	|		КОНЕЦ)                             КАК СуммаБезНДСРегл,
	|	
	|	ЕСТЬNULL(Суммы.БазаНДСРегл,
	|		ВЫБОР
	|			КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|					И &Валюта <> &ВалютаРегламентированногоУчета
	|				ТОГДА ВидыЗапасов.СуммаВзаиморасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ВидыЗапасов.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31, 2))
	|		КОНЕЦ)                             КАК БазаНДСРегл
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО Аналитика.Номенклатура = АналитикаБезНазначения.Номенклатура
	|			И Аналитика.Характеристика = АналитикаБезНазначения.Характеристика
	|			И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаБезНазначения.Назначение
	|			И Аналитика.Серия = АналитикаБезНазначения.Серия
	|			И Аналитика.МестоХранения = АналитикаБезНазначения.МестоХранения
	|			И Аналитика.СтатьяКалькуляции = АналитикаБезНазначения.СтатьяКалькуляции
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
	|		ПО Аналитика.Назначение = СпрНазначения.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК СпрВидыЗапасов
	|		ПО ВидыЗапасов.ВидЗапасов = СпрВидыЗапасов.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|		ПО ВидыЗапасов.Ссылка = Суммы.Регистратор
	|			И ВидыЗапасов.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|			И Суммы.СуммаБезНДСРегл <> 0
	|			И ВидыЗапасов.Сумма = Суммы.СуммаБезНДС
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Номенклатура         КАК Номенклатура,
	|	Ключи.Характеристика       КАК Характеристика,
	|	&ПустоеНазначение          КАК Назначение,
	|	Ключи.Серия                КАК Серия,
	|	Ключи.МестоХранения		   КАК Склад
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|		ПО Товары.АналитикаУчетаНоменклатуры = Ключи.Ссылка
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Ключи.Номенклатура      = Аналитика.Номенклатура
	|			И Ключи.Характеристика = Аналитика.Характеристика
	|			И Ключи.Серия          = Аналитика.Серия
	|			И Ключи.МестоХранения  = Аналитика.МестоХранения
	|			И &ПустоеНазначение    = Аналитика.Назначение
	|			И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Аналитика.Номенклатура ЕСТЬ NULL
	|	И Не &УчитыватьСебестоимостьТоваровПоНазначениям";
	
	ЗапросАналитик.УстановитьПараметр("Ссылка",                 Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение",       Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = ПолноеИмяОбъекта();
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", 	ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", 		ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//	КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт о списании принятых на хранение товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор                  = "АктСписанияПринятыхНаХранениеТоваров";
	КомандаПечати.Представление                  = НСтр("ru = 'Акт о списании принятых на хранение товаров'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Формирует печатные формы объекта.
//
// Параметры:
//	МассивОбъектов        - Массив           - массив ссылок на объекты которые нужно распечатать,
//	ПараметрыПечати       - Структура        - структура дополнительных параметров печати,
//	КоллекцияПечатныхФорм - Таблица значений - сформированные табличные документы,
//	ОбъектыПечати         - СписокЗначений   - список объектов печати,
//	ПараметрыВывода       - Структура        - параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписанияПринятыхНаХранениеТоваров") Тогда
		ИмяМакета     = "АктСписанияПринятыхНаХранениеТоваров";
		СинонимМакета = НСтр("ru = 'Акт о списании принятых на хранение товаров'");
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета,
		СформироватьПечатнуюФормуАктСписанияПринятыхНаХранениеТоваров(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
	СписаниеПринятыхНаХранениеТоваровЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

// Функция формирует печатную форму документов списания принятых на хранение товаров.
//
// Параметры:
//	МассивОбъектов  - Массив         - массив ссылок на объекты которые нужно распечатать,
//	ОбъектыПечати   - СписокЗначений - список объектов печати.
//
// Возвращаемое значение:
//	ТабличныйДокумент - печатная форма документов списания принятых на хранение товаров.
//
Функция СформироватьПечатнуюФормуАктСписанияПринятыхНаХранениеТоваров(МассивОбъектов, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеТоваров.Ссылка                       КАК Ссылка,
	|	СписаниеТоваров.Номер                        КАК Номер,
	|	СписаниеТоваров.Дата                         КАК Дата,
	|	СписаниеТоваров.Контрагент                   КАК Поставщик,
	|	СписаниеТоваров.Организация                  КАК Организация,
	|	СписаниеТоваров.Организация.Префикс          КАК Префикс,
	|	СписаниеТоваров.Валюта                       КАК Валюта,
	|	СписаниеТоваров.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	СписаниеТоваров.Подразделение                КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеТоваров.Подразделение) КАК ПодразделениеПредставление,
	|	СписаниеТоваров.Менеджер.ФизическоеЛицо      КАК Ответственный
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	СписываемыеТовары.Ссылка               КАК Ссылка,
	|	СписываемыеТовары.НомерСтроки          КАК НомерСтроки,
	|	СписываемыеТовары.Номенклатура.Код     КАК Код,
	|	СписываемыеТовары.Номенклатура.Артикул КАК Артикул,
	|	СписываемыеТовары.Номенклатура         КАК Номенклатура,
	|	СписываемыеТовары.Номенклатура.НаименованиеПолное   КАК НоменклатураПредставление,
	|	СписываемыеТовары.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(СписываемыеТовары.Серия) КАК СерияПредставление,
	|	ВЫБОР
	|		КОГДА СписываемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА СписываемыеТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ СписываемыеТовары.Упаковка.Наименование
	|	КОНЕЦ                                КАК ЕдиницаИзмерения,
	|	СписываемыеТовары.КоличествоУпаковок   КАК Количество,
	|	СписываемыеТовары.Цена                 КАК Цена,
	|	СписываемыеТовары.Сумма                КАК Сумма
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК СписываемыеТовары
	|ГДЕ
	|	СписываемыеТовары.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПервыйДокумент = Истина;
	КолонкаКодов   = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды   = ЗначениеЗаполнено(КолонкаКодов);
	
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеПринятыхНаХранениеТоваров_Накладная";
	
	ДанныеПечати        = МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически
		Макет = УправлениеПечатью.МакетПечатнойФормы(
					"Документ.СписаниеПринятыхНаХранениеТоваров.ПФ_MXL_АктОСписанииПринятыхНаХранениеТоваров");
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		Если ИспользоватьПодразделения Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокБезПодразделения");
		КонецЕсли;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета,
			ДанныеПечати.Ссылка);
		
		ТекстЗаголовка            = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати,
																									НСтр("ru='Акт о списании принятых на хранение товаров'"));
		ОрганизацияПредставление  = ФормированиеПечатныхФорм.ОписаниеОрганизации(
									ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование");
		ПоставщикПредставление    = ФормированиеПечатныхФорм.ОписаниеОрганизации(
									ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.Дата), "ПолноеНаименование");
		ПодразделенеПредставление = ДанныеПечати.ПодразделениеПредставление;
		
		СтруктураДанныхШапки = Новый Структура;
		СтруктураДанныхШапки.Вставить("ТекстЗаголовка",           ТекстЗаголовка);
		СтруктураДанныхШапки.Вставить("Организация",              ДанныеПечати.Организация);
		СтруктураДанныхШапки.Вставить("ОрганизацияПредставление", ОрганизацияПредставление);
		СтруктураДанныхШапки.Вставить("Поставщик",                ДанныеПечати.Поставщик);
		СтруктураДанныхШапки.Вставить("ПоставщикПредставление",   ПоставщикПредставление);
		
		Если ИспользоватьПодразделения Тогда
			СтруктураДанныхШапки.Вставить("Подразделение",              ДанныеПечати.Подразделение);
			СтруктураДанныхШапки.Вставить("ПодразделениеПредставление", ПодразделенеПредставление);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок таблицы Товары
		СписаниеЗаНашСчет = ДанныеПечати.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы;
		СуффиксОбласти    = ?(СписаниеЗаНашСчет, "ССуммой", "");
		
		ОбластьКолонкаТовар = Макет.Область("ПерваяКолонкаТовара");
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
											+ ?(ВыводитьКоды, 0, Макет.Область("КолонкаКодов").ШиринаКолонки);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти + "|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти + "|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти + "|Товар" + СуффиксОбласти);
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти + "|Данные" + СуффиксОбласти);
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			СтруктураДанныхКоды = Новый Структура("ИмяКолонкиКодов", КолонкаКодов);
			
			ОбластьКодов.Параметры.Заполнить(СтруктураДанныхКоды);
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		ОбластьНомераСтроки = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти + "|НомерСтроки");
		ОбластьКодовСтроки  = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти + "|КолонкаКодов");
		ОбластьТоварСтроки  = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти + "|Товар" + СуффиксОбласти);
		ОбластьДанныхСтроки = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти + "|Данные" + СуффиксОбласти);
		
		Сумма       = 0;
		НомерСтроки = 0;
		
		// Выводим строки таблицы Товары
		ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
		
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			УстановитьПараметр(ОбластьНомераСтроки, "НомерСтроки", НомерСтроки);
			ТабличныйДокумент.Вывести(ОбластьНомераСтроки);
			
			Если ВыводитьКоды Тогда
				СтруктураДанныхКоды = Новый Структура("Артикул", ВыборкаПоТоварам[КолонкаКодов]);
				
				ОбластьКодовСтроки.Параметры.Заполнить(СтруктураДанныхКоды);
				ТабличныйДокумент.Присоединить(ОбластьКодовСтроки);
			КонецЕсли;
			
			ОбластьТоварСтроки.Параметры.Заполнить(ВыборкаПоТоварам);
			
			Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ВыборкаПоТоварам.НоменклатураПредставление,
																				ВыборкаПоТоварам.Характеристика,
																				Неопределено,
																				ВыборкаПоТоварам.СерияПредставление);
			
			СтруктураДанныхТовар = Новый Структура("Товар", Товар);
			
			ОбластьТоварСтроки.Параметры.Заполнить(СтруктураДанныхТовар);
			ТабличныйДокумент.Присоединить(ОбластьТоварСтроки);
			
			ОбластьДанныхСтроки.Параметры.Заполнить(ВыборкаПоТоварам);
			
			ТабличныйДокумент.Присоединить(ОбластьДанныхСтроки);
			
			Сумма = Сумма + ВыборкаПоТоварам.Сумма;
			
		КонецЦикла;
		
		// Выводим подвал
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбласти + "|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбласти + "|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбласти + "|Товар" + СуффиксОбласти);
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбласти + "|Данные" + СуффиксОбласти);
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Если СписаниеЗаНашСчет Тогда
			СтруктураДанныхВсего = Новый Структура;
			СтруктураДанныхВсего.Вставить("Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
			
			ОбластьДанных.Параметры.Заполнить(СтруктураДанныхВсего);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Выводим Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("КоличествоВсего" + СуффиксОбласти);
		
		СтруктураДанныхСуммаПрописью = Новый Структура;
		
		Если СписаниеЗаНашСчет Тогда
			СуммаКПрописи = Сумма;
			СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
			
			ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Всего наименований: %1, на сумму %2'"),
								НомерСтроки,
								ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
			
			СтруктураДанныхСуммаПрописью.Вставить("СуммаПрописью", СуммаПрописью);
		Иначе
			ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Всего наименований: %1'"),
								НомерСтроки);
		КонецЕсли;
		
		СтруктураДанныхСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		Если ЗначениеЗаполнено(ДанныеПечати.Ответственный) Тогда
			Ответственный = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Ответственный, ДанныеПечати.Дата);
			
			СтруктураДанныхОтветственный = Новый Структура;
			СтруктураДанныхОтветственный.Вставить("Ответственный", Ответственный);
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхОтветственный);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолноеИмяОбъекта()
	
	Возврат "Документ.СписаниеПринятыхНаХранениеТоваров";
	
КонецФункции

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
	
КонецПроцедуры

Процедура УстановитьВидимостьКомандСозданияНаОсновании(КомандыСоздания)
	
	Для Каждого Команда Из КомандыСоздания Цикл
		Если Команда <> Неопределено Тогда
			ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда,
																"ХозяйственнаяОперация",
																Перечисления.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы,
																ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
