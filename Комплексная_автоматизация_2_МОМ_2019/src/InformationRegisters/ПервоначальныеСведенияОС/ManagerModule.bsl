#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ПервоначальныеСведенияОС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.4.9.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cc81cf76-d3e9-4aa4-947a-d4a7f6828882");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ПервоначальныеСведенияОС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет регистр ""Первоначальные сведения ОС""
	|- заполняет новый ресурс Арендодатель'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеАрендованныхОС.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеПредметовЛизинга.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОС.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОС.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатковВнеоборотныхАктивов2_4.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыСведений.ПервоначальныеСведенияОС.ПолноеИмя();
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС КАК Данные
	|ГДЕ
	|	Данные.Регистратор ССЫЛКА Документ.ПоступлениеПредметовЛизинга
	|	И Данные.ДоговорЛизинга.ВариантУчетаИмущества = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаИмуществаПриЛизинге.ЗаБалансом)
	|	И Данные.Арендодатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьСписокЗапросовЗарегистрацииДанныхКОбработкеРегистраПервоначальныеСведенияОС(СписокЗапросов);
	
	Если СписокЗапросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	                                                                          
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПоступлениеПредметовЛизинга");
	
	ВнеоборотныеАктивыЛокализация.ДополнитьСписокРегистраторовРегистраПервоначальныеСведенияОСДляОбработки(Регистраторы);
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы, Метаданные.РегистрыСведений.ПервоначальныеСведенияОС.ПолноеИмя(), Параметры.Очередь);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли