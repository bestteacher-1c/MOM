
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Запись, ЭтотОбъект);
	
	Если Параметры.Свойство("ВозвратЗначенияБезЗаписи") Тогда
		ВозвратЗначенияБезЗаписи = Параметры.ВозвратЗначенияБезЗаписи;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ДоступныеДляВыбораОрганизации = УправлениеДоступом.РазрешенныеЗначенияДляДинамическогоСписка(
			"РегистрСведений.ПорядокОтраженияРасчетовСПартнерами", Тип("СправочникСсылка.Организации"));
		Если ДоступныеДляВыбораОрганизации <> Неопределено Тогда
			Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(ДоступныеДляВыбораОрганизации);
			Элементы.Организация.РежимВыбораИзСписка = Истина;
			Если ДоступныеДляВыбораОрганизации.Количество() = 1 Тогда
				Запись.Организация = ДоступныеДляВыбораОрганизации.Получить(0);
				Элементы.Организация.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТипыРасчетов = Новый Структура("РасчетыСКлиентами,РасчетыСПоставщиками,РасчетыСКомиссионерами,РасчетыСКомитентами,РасчетыСКредиторами,РасчетыСДебиторами");
	
	Если Параметры.Свойство("ТипыРасчетов") Тогда
		ЗаполнитьЗначенияСвойств(ТипыРасчетов, Параметры.ТипыРасчетов);
		// Установим параметры выбора для ГФУ:
		МассивПараметров = Новый Массив;
		Для каждого ТипРасчетов Из Параметры.ТипыРасчетов Цикл
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор." + ТипРасчетов.Ключ, ТипРасчетов.Значение));
		КонецЦикла;
		Элементы.ГруппаФинансовогоУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Иначе
		ОбновитьДанныеТиповРасчетовПоГФУ(ТипыРасчетов, Запись.ГруппаФинансовогоУчета);
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы(ЭтотОбъект);
	ДоступныеСчетаУчетаРасчетов();
	
	Элементы.ФормаЗаписать.Видимость = НЕ ВозвратЗначенияБезЗаписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПорядокОтраженияРасчетовСПартнерами");
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Запись.Организация) Тогда
		Текст = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Параметры.Ключ, "Запись.Организация", "Запись.Организация", Отказ);
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Если ВозвратЗначенияБезЗаписи Тогда
		
		Отказ = Истина;
		Модифицированность = Ложь;
		СтруктураВозврата = Новый Структура("Организация, ГруппаФинансовогоУчета, СчетУчетаРасчетовСКлиентами, СчетУчетаАвансовПолученных,
			| СчетУчетаРасчетовСПоставщиками, СчетУчетаАвансовВыданных, СчетУчетаРасчетовПоПретензиям, СчетУчетаНеотфактурованныеПоставки,
			| СчетУчетаРасчетовСКлиентамиТара, СчетУчетаРасчетовСПоставщикамиТара,
			| СчетУчетаРасчетовСКредиторамиОсновнойДолг, СчетУчетаРасчетовСКредиторамиПроценты, СчетУчетаРасчетовСКредиторамиКомиссия,
			| СчетУчетаРасчетовСДебиторамиОсновнойДолг, СчетУчетаРасчетовСДебиторамиПроценты, СчетУчетаРасчетовСДебиторамиКомиссия,
			| СчетУчетаРасчетовСЛизингодателемЛизинговыеУслуги, СчетУчетаРасчетовСЛизингодателемОбеспечительныйПлатеж,
			| СчетУчетаРасчетовСЛизингодателемВыкупПредметаЛизинга, СчетУчетаРасчетовСЛизингодателемАрендныеОбязательства,
			| РасчетыСКлиентами, РасчетыСПоставщиками, РасчетыСКомиссионерами,
			| РасчетыСКомитентами, РасчетыСКредиторами, РасчетыСДебиторами, РасчетыСЛизингодателями");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Запись);
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ТипыРасчетов);
		Закрыть(СтруктураВозврата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГруппаФинансовогоУчетаПриИзменении(Элемент)
	ОбновитьДанныеТиповРасчетовПоГФУ(ТипыРасчетов, Запись.ГруппаФинансовогоУчета);
	УстановитьВидимостьЭлементовФормы(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовФормы(Форма)
	
	Для каждого ТипРасчета Из Форма.ТипыРасчетов Цикл
		ГруппаФормыТекущейПроверки = Форма.Элементы.Найти("Группа"+ТипРасчета.Ключ);
		Если ГруппаФормыТекущейПроверки <> Неопределено Тогда
			ГруппаФормыТекущейПроверки.Видимость = ЗначениеЗаполнено(ТипРасчета.Значение) И ТипРасчета.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДоступныеСчетаУчетаРасчетов()
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаРасчетов();
	
	// Счета учета расчетов с поставщиками.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСПоставщиками)));
	Элементы.СчетУчетаРасчетовСПоставщиками.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСПоставщикамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСКомиссионерамиПоВознаграждению.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСКомитентамиЗаТовары.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаНеотфактурованныеПоставки.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по авансам выданным.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаВыданным)));
	Элементы.СчетУчетаАвансовВыданных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаАвансовПолученныхОтКомиссионеровПоВознаграждению.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаАвансовВыданныхОтКомитентовЗаТовары.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовПоПретензиям.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов с клиентами.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСКлиентами)));
	Элементы.СчетУчетаРасчетовСКлиентами.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСКлиентамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСКомиссионерамиЗаТовары.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСКомитентамиПоВознаграждению.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по авансам полученным.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаПолученным)));
	Элементы.СчетУчетаАвансовПолученных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаАвансовПолученныхОтКомиссионеровЗаТовары.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаАвансовПолученныхОтКомитентовПоВознаграждению.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по основному долгу - кредиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСКредиторамиОсновнойДолг)));
	Элементы.СчетУчетаРасчетовСКредиторамиОсновнойДолг.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по процентам - кредиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСКредиторамиПроценты)));
	Элементы.СчетУчетаРасчетовСКредиторамиПроценты.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по комиссии - кредиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСКредиторамиКомиссия)));
	Элементы.СчетУчетаРасчетовСКредиторамиКомиссия.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по основному долгу - дебиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСДебиторамиОсновнойДолг)));
	Элементы.СчетУчетаРасчетовСДебиторамиОсновнойДолг.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по процентам - дебиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСДебиторамиПроценты)));
	Элементы.СчетУчетаРасчетовСДебиторамиКомиссия.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по комиссии - дебиторы.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСДебиторамиКомиссия)));
	Элементы.СчетУчетаРасчетовСДебиторамиПроценты.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Лизинг
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСПоставщиками)));
	Элементы.СчетУчетаРасчетовСЛизингодателемВыкупПредметаЛизинга.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСЛизингодателемАрендныеОбязательства.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетУчетаРасчетовСЛизингодателемЛизинговыеУслуги.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаВыданным)));
	Элементы.СчетУчетаРасчетовСЛизингодателемОбеспечительныйПлатеж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанныеТиповРасчетовПоГФУ(ТипыРасчетов, ГруппаФинансовогоУчета)
	
	Если ЗначениеЗаполнено(ГруппаФинансовогоУчета) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГруппаФинансовогоУчета, ТипыРасчетов);
		ЗаполнитьЗначенияСвойств(ТипыРасчетов, ЗначенияРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
