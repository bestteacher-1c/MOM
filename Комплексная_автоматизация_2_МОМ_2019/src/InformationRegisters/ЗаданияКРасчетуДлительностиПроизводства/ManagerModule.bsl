#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет и при необходимости запускает новое задание к расчету нормативной длительности производства.
//
// Параметры:
//  ОбъектРасчета	 - СправочникСсылка.РесурсныеСпецификации, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Календари, Массив - объект расчета или список объектов
//  ПараметрыЗапуска - Структура																										 - см. ПараметрыЗапуска()
//  Отказ			 - Булево																											 - признак прерывания обработчика.
//
Процедура ДобавитьЗадание(ОбъектРасчета, ПараметрыЗапуска = Неопределено, Отказ = Ложь) Экспорт
	
	МассивСсылок = ПроизводствоСервер.МассивЗначений(ОбъектРасчета);
	ОчередьКОбработке = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗапуска) Тогда
		ПараметрыЗапуска = ПараметрыЗапуска();
	КонецЕсли;
	
	Для каждого Ссылка Из МассивСсылок Цикл
		Если ДобавитьОтложенноеЗадание(Ссылка, ПараметрыЗапуска.ПараметрыРасчета, Отказ) = 1
			ИЛИ НЕ ПараметрыЗапуска.ТолькоНовые Тогда
			ОчередьКОбработке.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыЗапуска.АвтоЗапуск Тогда
		ЗапуститьЗадание(ОчередьКОбработке);
	КонецЕсли;
	
КонецПроцедуры

// Запускает расчет длительность в фоновом режиме
//
// Параметры:
//  ОбъектРасчета - СправочникСсылка.РесурсныеСпецификации, СправочникСсылка.СтруктураПредприятия,
//                  СправочникСсылка.Календари, Массив - объект расчета или список объектов.
//
Процедура ЗапуститьЗадание(ОбъектРасчета) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектРасчета) Тогда
		Возврат;
	КонецЕсли;
	МассивОбъектов = ПроизводствоСервер.МассивЗначений(ОбъектРасчета);
	
	КоличествоОбъектов = МассивОбъектов.Количество();
	Ключ = МассивОбъектов[0].УникальныйИдентификатор();
	
	Если КоличествоОбъектов > 1 Тогда
		НаименованиеЗадания = НСтр("ru = 'Расчет нормативной длительности производства: %1 и еще %2'");
		НаименованиеЗадания = СтрШаблон(НаименованиеЗадания, МассивОбъектов[0], КоличествоОбъектов);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Расчет нормативной длительности производства: %1'");
		НаименованиеЗадания = СтрШаблон(НаименованиеЗадания, МассивОбъектов[0]);
	КонецЕсли;
	
	ИмяЭкспортнойПроцедуры = "РегистрыСведений.НормативнаяДлительностьПроизводства.Рассчитать";
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(МассивОбъектов);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Добавляет задание к расчету нормативной длительности производства.
//
// Параметры:
//  ОбъектРасчета	 - СправочникСсылка.РесурсныеСпецификации, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Календари - объект расчета
//  ПараметрыРасчета - Структура																								 - см. ПараметрыРасчета()
//  Отказ			 - Булево																									 - признак прерывания обработчика.
// 
// Возвращаемое значение:
//  Число - номер задания
//
Функция ДобавитьОтложенноеЗадание(ОбъектРасчета, ПараметрыРасчета = Неопределено, Отказ = Ложь) Экспорт
	
	НомерЗадания = 0;
	
	Если Не ЗначениеЗаполнено(ПараметрыРасчета) Тогда
		ПараметрыРасчета = ПараметрыРасчета();
	КонецЕсли;
	
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРасчетуДлительностиПроизводства");
		ЭлементБлокировки.УстановитьЗначение("ОбъектРасчета", ОбъектРасчета);
		
		Блокировка.Заблокировать();
		
		НомерЗадания = ДобавитьЗаданиеВОчередь(ОбъектРасчета, ПараметрыРасчета);
		
		Если ЛокальнаяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Отказ = Истина;
		СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеРасчетНормативнойДлительности();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка добавления задания к расчету по объекту: %1 по причине: %2'"),
							ОбъектРасчета,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, ОбъектРасчета.Метаданные(), ОбъектРасчета, ТекстСообщения);
		
	КонецПопытки;
	
	Возврат НомерЗадания;
	
КонецФункции

// Возвращает структуру параметров запуска
//
// Параметры:
//  РасчетДнейДоОкончания	 - Булево	 - признак, необходимо рассчитать количество дней до окончания.
// 
// Возвращаемое значение:
//   - Структура - параметры запуска.
//
Функция ПараметрыЗапуска(РасчетДнейДоОкончания = Истина) Экспорт
	
	Возврат Новый Структура("АвтоЗапуск,ТолькоНовые,ПараметрыРасчета", Истина, Истина, ПараметрыРасчета(РасчетДнейДоОкончания));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбслуживаниеРасчета

Функция АктивныеЗадания(ОбъектРасчета = Неопределено) Экспорт
	
	АктивныеЗадания = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Задания.ОбъектРасчета                   КАК ОбъектРасчета,
		|	МАКСИМУМ(Задания.НомерЗадания)          КАК НомерЗадания,
		|
		|	МАКСИМУМ(Задания.РасчетДнейДоОкончания) КАК РасчетДнейДоОкончания,
		|
		|	МИНИМУМ(Задания.ДатаДобавления)         КАК ДатаДобавления
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуДлительностиПроизводства КАК Задания
		|ГДЕ
		|	(&ОтборПоОбъектам И Задания.ОбъектРасчета В (&ОбъектРасчета)
		|		ИЛИ НЕ &ОтборПоОбъектам)
		|
		|СГРУППИРОВАТЬ ПО
		|	Задания.ОбъектРасчета");
		
	Запрос.УстановитьПараметр("ОбъектРасчета",   ОбъектРасчета);
	Запрос.УстановитьПараметр("ОтборПоОбъектам", ОбъектРасчета <> Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОписаниеЗадания = ОписаниеЗадания();
			ЗаполнитьЗначенияСвойств(ОписаниеЗадания,Выборка);
			АктивныеЗадания.Добавить(ОписаниеЗадания);
		КонецЦикла;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат АктивныеЗадания;
	
КонецФункции

Функция ПолучитьЗадание(ОбъектРасчета) Экспорт
	
	АктивныеЗадания = АктивныеЗадания(ОбъектРасчета);
	Если АктивныеЗадания.ВГраница() <> - 1 Тогда
		Возврат АктивныеЗадания[0];
	КонецЕсли;
	
	ОписаниеЗадания = ОписаниеЗадания();
	ОписаниеЗадания.ОбъектРасчета = ОбъектРасчета;
	Возврат ОписаниеЗадания;
	
КонецФункции

Процедура УдалитьЗадание(Задание, Осталось = 0) Экспорт
	
	Перем ОбъектРасчета,НомерЗадания;
	
	Если ТипЗнч(Задание) <> Тип("Структура") Тогда
		ОбъектРасчета = Задание;
	Иначе
		ОбъектРасчета = Задание.ОбъектРасчета;
		НомерЗадания = Задание.НомерЗадания;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЗаданияКРасчетуДлительностиПроизводства");
		ЭлементБлокировки.УстановитьЗначение("ОбъектРасчета", ОбъектРасчета);
		
		БлокировкаДанных.Заблокировать();
		
		Набор = РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.СоздатьНаборЗаписей();
		Набор.Отбор.ОбъектРасчета.Установить(ОбъектРасчета);
		
		Если НомерЗадания <> Неопределено Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Задания.ОбъектРасчета КАК ОбъектРасчета,
				|	Задания.НомерЗадания КАК НомерЗадания
				|ПОМЕСТИТЬ ВТВсеЗадания
				|ИЗ
				|	РегистрСведений.ЗаданияКРасчетуДлительностиПроизводства КАК Задания
				|ГДЕ
				|	Задания.ОбъектРасчета = &ОбъектРасчета
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ОбъектРасчета,
				|	НомерЗадания
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТВсеЗадания.ОбъектРасчета КАК ОбъектРасчета,
				|	ВТВсеЗадания.НомерЗадания КАК НомерЗадания
				|ПОМЕСТИТЬ ВТЗаданияУдалить
				|ИЗ
				|	ВТВсеЗадания КАК ВТВсеЗадания
				|ГДЕ
				|	ВТВсеЗадания.ОбъектРасчета В (&ОбъектРасчета)
				|	И ВТВсеЗадания.НомерЗадания <= &НомерЗадания
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ОбъектРасчета,
				|	НомерЗадания
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТВсеЗадания.ОбъектРасчета КАК ОбъектРасчета,
				|	ВТВсеЗадания.НомерЗадания КАК НомерЗадания
				|ИЗ
				|	ВТВсеЗадания КАК ВТВсеЗадания
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаданияУдалить КАК ВТЗаданияУдалить
				|		ПО ВТВсеЗадания.ОбъектРасчета = ВТЗаданияУдалить.ОбъектРасчета
				|			И ВТВсеЗадания.НомерЗадания = ВТЗаданияУдалить.НомерЗадания
				|ГДЕ
				|	ВТЗаданияУдалить.ОбъектРасчета ЕСТЬ NULL");
			
			Запрос.УстановитьПараметр("ОбъектРасчета", ОбъектРасчета);
			Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
			
			Задания = Запрос.Выполнить().Выгрузить();
			Набор.Загрузить(Задания);
			
		КонецЕсли;
		
		Набор.Записать(Истина);
		Осталось = Набор.Количество();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеРасчетНормативнойДлительности();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка удаления задания из очереди по объекту: %1 по причине: %2'"),
							ОбъектРасчета,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, ОбъектРасчета.Метаданные(), ОбъектРасчета, ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ДобавитьЗаданиеВОчередь(ОбъектРасчета, ПараметрыРасчета)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Задания.НомерЗадания), 0) КАК НомерЗадания
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуДлительностиПроизводства КАК Задания
		|ГДЕ
		|	Задания.ОбъектРасчета = &ОбъектРасчета");
	
	Запрос.УстановитьПараметр("ОбъектРасчета", ОбъектРасчета);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	НомерЗадания = Выборка.НомерЗадания + 1;
	
	Набор = РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.СоздатьНаборЗаписей();
	
	Набор.Отбор.ОбъектРасчета.Установить(ОбъектРасчета);
	Набор.Отбор.НомерЗадания.Установить(НомерЗадания);
	
	НовоеЗадание = Набор.Добавить();
	ЗаполнитьЗначенияСвойств(НовоеЗадание, ПараметрыРасчета);
	
	НовоеЗадание.ОбъектРасчета = ОбъектРасчета;
	НовоеЗадание.НомерЗадания = НомерЗадания;
	
	НовоеЗадание.ДатаДобавления = ТекущаяДатаСеанса();
	
	Набор.Записать(Истина);
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат НомерЗадания;
	
КонецФункции

Функция ОписаниеЗадания()
	
	Возврат Новый Структура("ОбъектРасчета,НомерЗадания,РасчетДнейДоОкончания,ДатаДобавления",,0,Ложь,'00010101');
	
КонецФункции

Функция ПараметрыРасчета(РасчетДнейДоОкончания = Истина) Экспорт
	
	Возврат Новый Структура("РасчетДнейДоОкончания", РасчетДнейДоОкончания);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли