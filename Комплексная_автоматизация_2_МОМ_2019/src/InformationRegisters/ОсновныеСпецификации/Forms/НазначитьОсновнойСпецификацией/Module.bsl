
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Спецификация = Параметры.Спецификация;
	
	ЗаполнитьНастройкуИзделий();
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособУказанияПодразделенийПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьХарактеристикиВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьХарактеристикиИзСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаИзделия = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если СтрокаИзделия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаИзделия.ТипСтроки = 1 Тогда
		СтрокаИзделия = СтрокаИзделия.ПолучитьРодителя();
	КонецЕсли; 
	
	КоллекцияХарактеристик = СтрокаИзделия.ПолучитьЭлементы();
	
	// Проверим наличие выбранной характеристики
	Для каждого ЭлементКоллекции Из КоллекцияХарактеристик Цикл
		Если ЭлементКоллекции.Характеристика = ВыбранноеЗначение Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НоваяХарактеристика = КоллекцияХарактеристик.Добавить();
	НоваяХарактеристика.Характеристика = ВыбранноеЗначение;
	НоваяХарактеристика.ТипСтроки = 1;
	
	Если КоллекцияХарактеристик.Количество() = 0 Тогда
		СтрокаИзделия.ЛюбыеХарактеристики = Истина;
	Иначе
		СтрокаИзделия.ЛюбыеХарактеристики = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьХарактеристики(Команда)
	
	ДобавитьХарактеристикиВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристики(Команда)
	
	УдалитьХарактеристикиИзСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	Если ЗаписатьНаСервере() Тогда
		УправлениеДаннымиОбИзделияхКлиент.ОповеститьОЗаписиОсновнойСпецификации();
		Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНоменклатурыПометка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНоменклатурыНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНоменклатуры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Истина, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНоменклатурыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ЛюбыеХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для любых характеристик>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНоменклатурыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ЛюбыеХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для выбранных характеристик>'"));

КонецПроцедуры

#Область НастройкаИзделий

&НаСервере
Процедура ЗаполнитьНастройкуИзделий()

	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ХарактеристикиИспользуются = Ложь;
	
	// Получим изделия спецификации и добавим их в список выбора 
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Параметры.Номенклатура) И ЗначениеЗаполнено(Параметры.Характеристика) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	&Номенклатура КАК Номенклатура,
		|	&Характеристика КАК Характеристика,
		|	&ИспользоватьХарактеристики КАК ХарактеристикиИспользуются";
		Запрос.УстановитьПараметр("Номенклатура", Параметры.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Параметры.Характеристика);
		Запрос.УстановитьПараметр("ИспользоватьХарактеристики", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Номенклатура, "ВидНоменклатуры.ИспользоватьХарактеристики"));
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура КАК Номенклатура,
		|	РесурсныеСпецификацииВыходныеИзделия.Характеристика КАК Характеристика,
		|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
		|ГДЕ
		|	РесурсныеСпецификацииВыходныеИзделия.Ссылка = &Спецификация
		|
		|УПОРЯДОЧИТЬ ПО
		|	РесурсныеСпецификацииВыходныеИзделия.НомерСтроки";
		Запрос.УстановитьПараметр("Спецификация", Спецификация);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ВыборкаНоменклатуры = Результат.Выбрать();
	
	КоллекцияНоменклатуры = СписокНоменклатуры.ПолучитьЭлементы();
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		НоваяНоменклатура = КоллекцияНоменклатуры.Добавить();
		НоваяНоменклатура.Номенклатура   = ВыборкаНоменклатуры.Номенклатура;
		НоваяНоменклатура.Характеристика = ВыборкаНоменклатуры.Характеристика;
		НоваяНоменклатура.ХарактеристикиИспользуются = ВыборкаНоменклатуры.ХарактеристикиИспользуются;
		НоваяНоменклатура.ЛюбыеХарактеристики = Истина;
		НоваяНоменклатура.Пометка = Истина;
		
		ХарактеристикиИспользуются = ХарактеристикиИспользуются ИЛИ НоваяНоменклатура.ХарактеристикиИспользуются;
		
	КонецЦикла;

	Если КоллекцияНоменклатуры.Количество() = 1 Тогда
		Элементы.СписокНоменклатурыПометка.Видимость = Ложь;
	КонецЕсли; 
	
	// Если не используются характеристики то уберем колонку "Характеристика"
	Если НЕ ИспользоватьХарактеристикиНоменклатуры ИЛИ НЕ ХарактеристикиИспользуются Тогда
		Элементы.СписокНоменклатурыХарактеристика.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Открывает форму выбора характеристики и добавляет выбранные в список
//
&НаКлиенте
Процедура ДобавитьХарактеристикиВСписок()

	СтрокаИзделия = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если СтрокаИзделия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаИзделия.ТипСтроки = 1 Тогда
		СтрокаИзделия = СтрокаИзделия.ПолучитьРодителя();
	КонецЕсли; 
	
	Если НЕ СтрокаИзделия.Характеристика.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Характеристика определена в спецификации.'"));
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", СтрокаИзделия.Номенклатура);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормы, Элементы.СписокНоменклатуры,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристикиИзСписка()

	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипСтроки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИзделия = ТекущиеДанные.ПолучитьРодителя();
	
	КоллекцияХарактеристик = СтрокаИзделия.ПолучитьЭлементы();
	КоллекцияХарактеристик.Удалить(ТекущиеДанные);
	
	Если КоллекцияХарактеристик.Количество() = 0 Тогда
		СтрокаИзделия.ЛюбыеХарактеристики = Истина;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьНастройки

&НаСервере
Процедура ДобавитьНастройкуДляИзделия(Номенклатура, Характеристика, НаборДанных)

	Если СпособУказанияПодразделения = 0 Тогда
		
		СтруктураЗаписи = РегистрыСведений.ОсновныеСпецификации.СтруктураЗаписи();
		СтруктураЗаписи.Номенклатура   = Номенклатура;
		СтруктураЗаписи.Характеристика = Характеристика;
		СтруктураЗаписи.Спецификация   = Спецификация;
		НаборДанных.Добавить(СтруктураЗаписи);
		
	Иначе
		
		Для каждого ЭлементКоллекции Из СписокПодразделений Цикл
			
			СтруктураЗаписи = РегистрыСведений.ОсновныеСпецификации.СтруктураЗаписи();
			СтруктураЗаписи.Номенклатура   = Номенклатура;
			СтруктураЗаписи.Характеристика = Характеристика;
			СтруктураЗаписи.Спецификация   = Спецификация;
			СтруктураЗаписи.Подразделение  = ЭлементКоллекции.Значение;
			НаборДанных.Добавить(СтруктураЗаписи);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Функция ЗаписатьНаСервере()
	
	ЕстьОшибки = Ложь;
	НаборДанных = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		КоллекцияНоменклатуры = СписокНоменклатуры.ПолучитьЭлементы();
		
		Для каждого СтрокаИзделия Из КоллекцияНоменклатуры Цикл
			
			Если НЕ СтрокаИзделия.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаИзделия.ЛюбыеХарактеристики Тогда
				
				ДобавитьНастройкуДляИзделия(СтрокаИзделия.Номенклатура, СтрокаИзделия.Характеристика, НаборДанных);
				
			Иначе
				
				КоллекцияХарактеристик = СтрокаИзделия.ПолучитьЭлементы();
				
				Для каждого СтрокаХарактеристики Из КоллекцияХарактеристик Цикл
					
					ДобавитьНастройкуДляИзделия(СтрокаИзделия.Номенклатура, СтрокаХарактеристики.Характеристика, НаборДанных);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЕстьОшибки = ЕстьОшибки ИЛИ НЕ УправлениеДаннымиОбИзделияхВызовСервера.УбратьПризнакОсновнойСпецификации(Спецификация)
								ИЛИ НЕ УправлениеДаннымиОбИзделияхВызовСервера.НазначитьОсновныеСпецификацииДляИзделий(НаборДанных);
		
		Если ЕстьОшибки Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось назначить основную спецификацию.'");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЕстьОшибки = Истина;
		СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеНазначениеОсновныхСпецификаций();
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

	Возврат НЕ ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ТребуетсяНастройкаПодразделений = Справочники.СтруктураПредприятия.ИспользуетсяНесколькоПодразделенийДиспетчеров();
	
	Если ТребуетсяНастройкаПодразделений Тогда
		
		ПараметрыВыбораПодразделений = Новый Массив;
		ПараметрыВыбораПодразделений.Добавить(Новый ПараметрВыбора("Отбор.ПодразделениеДиспетчер", Истина));
		
		Элементы.СписокПодразделенийЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПодразделений);
		
	КонецЕсли;
	
	Элементы.НастройкаПодразделений.Видимость = ТребуетсяНастройкаПодразделений;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма)

	Форма.Элементы.СписокПодразделений.ТолькоПросмотр  = (Форма.СпособУказанияПодразделения <> 1);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
