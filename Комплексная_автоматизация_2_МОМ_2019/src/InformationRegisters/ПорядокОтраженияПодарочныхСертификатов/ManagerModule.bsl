#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает результат выполнения анализатора отражения подарочных сертификатов с настроенными счетами.
//	
//	Параметры:
//		МассивОрганизаций - Массив - СправочникСсылка.Организации - отбор по организациям;
//		Период - СтандартныйПериод - период с датой начала и окончания анализа.
//	ВозвращаемоеЗначение:
//		РезультатЗапроса - список всех операций, удовлетворяющий входным параметрам с настроенными для них счетами.
//
Функция РезультатЗапросаПоНастройкамОтраженияВУчете(МассивОрганизаций, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ПараметрыАнализатора = Новый Структура("МассивОрганизаций, НачалоПериода, КонецПериода", МассивОрганизаций, Период.ДатаНачала, Период.ДатаОкончания);
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаДанныхПоСуществующимОперациям(ПараметрыАнализатора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втДвиженияСертификатов.Организация КАК Организация,
	|	втДвиженияСертификатов.ВидСертификата КАК ВидСертификата,
	|	ИСТИНА КАК ЕстьРасчеты,
	|	
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ПорядокОтражения.СчетУчета, &ПустойСчет) <> &ПустойСчет
	|			ТОГДА ПорядокОтражения.СчетУчета
	|		ИНАЧЕ ВидыПодарочныхСертификатов.СчетУчета
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ПорядокОтражения.СчетУчета, &ПустойСчет) = &ПустойСчет
	|				И ВидыПодарочныхСертификатов.СчетУчета <> &ПустойСчет
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СчетУчетаПоУмолчанию
	|	
	|ИЗ
	|	ТаблицаДвижений КАК втДвиженияСертификатов
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПорядокОтраженияПодарочныхСертификатов КАК ПорядокОтражения
	|	ПО 
	|		втДвиженияСертификатов.Организация = ПорядокОтражения.Организация
	|		И втДвиженияСертификатов.ВидСертификата = ПорядокОтражения.ВидСертификата
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	|	ПО
	|		втДвиженияСертификатов.ВидСертификата = ВидыПодарочныхСертификатов.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.ВидСертификата,
	|	ЛОЖЬ,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ПорядокОтражения.СчетУчета, &ПустойСчет) <> &ПустойСчет
	|			ТОГДА ПорядокОтражения.СчетУчета
	|		ИНАЧЕ ВидыПодарочныхСертификатов.СчетУчета
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ПорядокОтражения.СчетУчета, &ПустойСчет) = &ПустойСчет
	|				И ВидыПодарочныхСертификатов.СчетУчета <> &ПустойСчет
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СчетУчетаПоУмолчанию
	|	
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияПодарочныхСертификатов КАК ПорядокОтражения
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТаблицаДвижений КАК втДвиженияСертификатов
	|	ПО 
	|		ПорядокОтражения.Организация = втДвиженияСертификатов.Организация
	|		И ПорядокОтражения.ВидСертификата = втДвиженияСертификатов.ВидСертификата
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	|	ПО
	|		ПорядокОтражения.ВидСертификата = ВидыПодарочныхСертификатов.Ссылка
	|	
	|ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)
	|	И втДвиженияСертификатов.Организация ЕСТЬ NULL
	|	И &ИспользоватьПодарочныеСертификаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ВидСертификата";
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаДанныхПоСуществующимОперациям(ПараметрыАнализатора)
	
	РежимАнализа = Неопределено;
	ПараметрыАнализатора.Свойство("РежимАнализа", РежимАнализа);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	// АнулированиеПодарочныхСертификатов
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВидыСертификатов.Ссылка КАК ВидСертификата
	|ПОМЕСТИТЬ ТаблицаДвижений
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АннулированиеПодарочныхСертификатов.ПодарочныеСертификаты КАК Строки
	|			ПО ДанныеДокумента.Ссылка = Строки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыСертификатов
	|			ПО Строки.ПодарочныйСертификат.Владелец = ВидыСертификатов.Ссылка
	|ГДЕ
	|	&УсловиеДляДокумента
	|	И &ИспользоватьПодарочныеСертификаты
	|
	|ОБЪЕДИНИТЬ
	|
	// ВводОстатков
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВидыСертификатов.Ссылка КАК ВидСертификата
	|ИЗ
	|	Документ.ВводОстатков КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатков.ПодарочныеСертификаты КАК Строки
	|			ПО ДанныеДокумента.Ссылка = Строки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыСертификатов
	|			ПО Строки.ПодарочныйСертификат.Владелец = ВидыСертификатов.Ссылка
	|ГДЕ
	|	&УсловиеДляДокумента
	|	И &ИспользоватьПодарочныеСертификаты
	|
	|ОБЪЕДИНИТЬ
	|
	// ВозвратПодарочныхСертификатов
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВидыСертификатов.Ссылка КАК ВидСертификата
	|ИЗ
	|	Документ.ВозвратПодарочныхСертификатов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратПодарочныхСертификатов.ПодарочныеСертификаты КАК Строки
	|			ПО ДанныеДокумента.Ссылка = Строки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыСертификатов
	|			ПО Строки.ПодарочныйСертификат.Владелец = ВидыСертификатов.Ссылка
	|ГДЕ
	|	&УсловиеДляДокумента
	|	И &ИспользоватьПодарочныеСертификаты
	|
	|ОБЪЕДИНИТЬ
	|
	// ОтчетОРозничныхПродажах
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВидыСертификатов.Ссылка КАК ВидСертификата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК Строки
	|			ПО ДанныеДокумента.Ссылка = Строки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыСертификатов
	|			ПО Строки.ПодарочныйСертификат.Владелец = ВидыСертификатов.Ссылка
	|ГДЕ
	|	&УсловиеДляДокумента
	|	И &ИспользоватьПодарочныеСертификаты
	|
	|ОБЪЕДИНИТЬ
	|
	// РеализацияПодарочныхСертификатов
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВидыСертификатов.Ссылка КАК ВидСертификата
	|ИЗ
	|	Документ.РеализацияПодарочныхСертификатов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияПодарочныхСертификатов.ПодарочныеСертификаты КАК Строки
	|			ПО ДанныеДокумента.Ссылка = Строки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыСертификатов
	|			ПО Строки.ПодарочныйСертификат.Владелец = ВидыСертификатов.Ссылка
	|ГДЕ
	|	&УсловиеДляДокумента
	|	И &ИспользоватьПодарочныеСертификаты";
	
	Запрос.УстановитьПараметр("ИспользоватьПодарочныеСертификаты", ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты"));
	
	УсловиеВхожденияВДокумент = "ГДЕ" + Символы.ПС + Символы.Таб + "&УсловиеДляДокумента";
	ТекстСоединенияСТаблицейДокументов = "		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ДанныеДокумента.Организация = ТаблицаДокументов.Организация
	|			И ДанныеДокумента.Ссылка = ТаблицаДокументов.Документ";
	ТекстУсловийПоОрганизацииИПериоду = "ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеДокумента.Организация В (&Организации)
	|	И ДанныеДокумента.Проведен";
	
	Если РежимАнализа = "ПоНеотраженным" Тогда
		
		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета);
		Статусы.Добавить(Перечисления.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете);
		РегистрыСведений.ОтражениеДокументовВРеглУчете.ДобавитьВременнуюТаблицуДокументовСОтборомПоСтатусуОтражения(
			Запрос.МенеджерВременныхТаблиц,
			ПараметрыАнализатора.МассивОрганизаций,
			Статусы);
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, УсловиеВхожденияВДокумент, ТекстСоединенияСТаблицейДокументов);
	Иначе
		Запрос.УстановитьПараметр("Организации", ПараметрыАнализатора.МассивОрганизаций);
		Запрос.УстановитьПараметр("ДатаНачала", ПараметрыАнализатора.НачалоПериода);
		Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыАнализатора.КонецПериода);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, УсловиеВхожденияВДокумент, ТекстУсловийПоОрганизацииИПериоду);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

Функция ВременнаяТаблицаДвиженийСоСчетами(ВременнаяТаблицаДвижений)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаДвижений;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДвижений.Организация КАК Организация,
	|	ТаблицаДвижений.ВидСертификата КАК ВидСертификата,
	|	ИСТИНА КАК ЕстьРасчеты,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(ПорядокОтражения.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		ТОГДА ЕСТЬNULL(АналитикаУчета.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|		ИНАЧЕ ПорядокОтражения.СчетУчета КОНЕЦ КАК СчетУчета,
	|
	|	ЕСТЬNULL(ПорядокОтражения.СчетУчета, ЕСТЬNULL(АналитикаУчета.СчетУчета,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))) = АналитикаУчета.СчетУчета КАК СчетУчетаПоУмолчанию
	|
	|ПОМЕСТИТЬ ТаблицаДвиженийСоСчетами
	|ИЗ
	|	ТаблицаДвижений КАК ТаблицаДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияПодарочныхСертификатов КАК ПорядокОтражения
	|		ПО ТаблицаДвижений.Организация = ПорядокОтражения.Организация
	|			И ТаблицаДвижений.ВидСертификата = ПорядокОтражения.ВидСертификата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК АналитикаУчета
	|		ПО ТаблицаДвижений.ВидСертификата = АналитикаУчета.Ссылка";
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

// Выполняет анализ всех неотраженных операций отражения подарочных сертификатов,
//	ищет для них ненастроенные счета учета и заносит эти данные в регистр ненастроенных счетов учета.
//	
//	Параметры:
//		ПараметрыАнализатора - Структура, содержащая следующие значения:
//			* МассивОрганизаций - Массив - СправочникСсылка.Организации - отбор по организациям, операции которых будут анализироваться;
//			* РежимАнализа - Строка - строка вида "ПоНеотраженным" -
//					необходимо для того, чтобы анализатор работал только по документам, неотраженным в регл. учете.
//
Процедура ЗаполнитьРегистрТребующихНастройкиНаОснованииАнализаНеотраженныхОпераций(ПараметрыАнализатора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВременнаяТаблицаДвижений = ВременнаяТаблицаДанныхПоСуществующимОперациям(ПараметрыАнализатора);
	ВременнаяТаблицаДвиженийСоСчетами = ВременнаяТаблицаДвиженийСоСчетами(ВременнаяТаблицаДвижений);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаДвиженийСоСчетами;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДвиженийСоСчетами.Организация,
	|	ТаблицаДвиженийСоСчетами.ВидСертификата КАК АналитикаУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам) КАК ВидСчета
	|ИЗ
	|	ТаблицаДвиженийСоСчетами КАК ТаблицаДвиженийСоСчетами
	|ГДЕ
	|	ТаблицаДвиженийСоСчетами.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	
	СтруктураВидовСчетовИРезультатаЗапроса = Новый Соответствие;
	СтруктураВидовСчетовИРезультатаЗапроса.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам, Результат);
	
	ИмяСобытия = НСтр("ru = 'Анализ порядка отражения подарочных сертификатов, требующего настройки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.ЗаполнитьЗаписиРегистраПоВидамСчетов(СтруктураВидовСчетовИРезультатаЗапроса, ИмяСобытия);
	
КонецПроцедуры

// Выполняет анализ операций отражения подарочных сертификатов, в зависимости от параметров и дополняет исходную таблицу
// операций новыми строками.
//	
//	Параметры:
//		ПараметрыАнализа - Структура - содержит настройки анализатора со следующими свойствами:
//			* РежимАнализа - Строка - принимает значения вида "ПоНеотраженным" и "ЗаПериод". Причем если не задана, значение по умолчанию "ЗаПериод".
//			* КонецПериода - Дата - по эту дату анализируются операции, причем если режим анализа "ПоНеотраженным" не актуальна;
//			* НачалоПериода - Дата - начиная с этой даты анализируются операции, причем если режим анализа "ПоНеотраженным" не актуальна;
//			* МассивОрганизаций - Массив - СправочникСсылка.Организации - отбор по организациям, операции которых будут анализироваться;
//		АдресХранилища - Строка - адрес сохранения результата работы метода (ТаблицаЗначений).
//
Процедура ДополнитьТаблицуНаОснованииАнализаОпераций(ПараметрыАнализа, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВременнаяТаблицаДвижений = ВременнаяТаблицаДанныхПоСуществующимОперациям(ПараметрыАнализа);
	 
	ВременнаяТаблицаДвиженийСоСчетами = ВременнаяТаблицаДвиженийСоСчетами(ВременнаяТаблицаДвижений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ПараметрыАнализа.ЗаполняемаяТаблица);
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаДвиженийСоСчетами;
	 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТекущаяТаблицаСчетовУчета.Организация,
	|	ТекущаяТаблицаСчетовУчета.ВидСертификата,
	|
	|	ТекущаяТаблицаСчетовУчета.СчетУчета,
	|	ТекущаяТаблицаСчетовУчета.СчетУчетаПоУмолчанию,
	|
	|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
	|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
	|
	|ПОМЕСТИТЬ ТекущаяТаблицаСчетовУчета
	|ИЗ
	|	&Таблица КАК ТекущаяТаблицаСчетовУчета;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДвиженийСоСчетами.Организация,
	|	ТаблицаДвиженийСоСчетами.ВидСертификата,
	|
	|	ЕСТЬNULL(ТекущаяТаблицаСчетовУчета.СчетУчета, ТаблицаДвиженийСоСчетами.СчетУчета) КАК СчетУчета,
	|	ЕСТЬNULL(ТекущаяТаблицаСчетовУчета.СчетУчетаПоУмолчанию, ТаблицаДвиженийСоСчетами.СчетУчетаПоУмолчанию) КАК СчетУчетаПоУмолчанию,
	|	
	|	ЕСТЬNULL(ТекущаяТаблицаСчетовУчета.СчетУчета, ТаблицаДвиженийСоСчетами.СчетУчета) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК ТребуетсяНастройка,
	|	ЕСТЬNULL(ТекущаяТаблицаСчетовУчета.ИзмененныеДанные, ""СчетУчета"") КАК ИзмененныеДанные
	|
	|ИЗ
	|	ТаблицаДвиженийСоСчетами КАК ТаблицаДвиженийСоСчетами
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТекущаяТаблицаСчетовУчета КАК ТекущаяТаблицаСчетовУчета
	|	ПО
	|		ТаблицаДвиженийСоСчетами.Организация = ТекущаяТаблицаСчетовУчета.Организация
	|		И ТаблицаДвиженийСоСчетами.ВидСертификата = ТекущаяТаблицаСчетовУчета.ВидСертификата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТекущаяТаблицаСчетовУчета.Организация,
	|	ТекущаяТаблицаСчетовУчета.ВидСертификата,
	|
	|	ТекущаяТаблицаСчетовУчета.СчетУчета,
	|	ТекущаяТаблицаСчетовУчета.СчетУчетаПоУмолчанию,
	|
	|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
	|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
	|ИЗ
	|	ТекущаяТаблицаСчетовУчета КАК ТекущаяТаблицаСчетовУчета
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДвиженийСоСчетами КАК ТаблицаДвиженийСоСчетами
	|	ПО
	|		ТекущаяТаблицаСчетовУчета.Организация = ТаблицаДвиженийСоСчетами.Организация
	|		И ТекущаяТаблицаСчетовУчета.ВидСертификата = ТаблицаДвиженийСоСчетами.ВидСертификата
	|ГДЕ
	|	ТаблицаДвиженийСоСчетами.Организация ЕСТЬ NULL";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ПоместитьВоВременноеХранилище(Новый Структура("СчетаУчетаПодарочныхСертификатов", Таблица), АдресХранилища);
	
КонецПроцедуры

Процедура НайтиДокументыСоответствующиеНастройкам(ТаблицаНастроек, Дата, ТаблицаДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Организация КАК Организация,
	|	ИсходнаяТаблица.ВидСертификата КАК ВидСертификата
	|	
	|ПОМЕСТИТЬ ТаблицаНастроек
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|ГДЕ
	|	ИсходнаяТаблица.ИзмененныеДанные <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// АнулированиеПодарочныхСертификатов
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВидыСертификатов.Ссылка КАК ВидСертификата
	|ПОМЕСТИТЬ втДвиженияСертификатов
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АннулированиеПодарочныхСертификатов.ПодарочныеСертификаты КАК Строки
	|		ПО ДанныеДокумента.Ссылка = Строки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыСертификатов
	|		ПО Строки.ПодарочныйСертификат.Владелец = ВидыСертификатов.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеДокумента.Организация В(&Организации)
	|	И ДанныеДокумента.Проведен
	|	И &ИспользоватьПодарочныеСертификаты
	|	И ДанныеДокумента.Дата <= &ДатаОкончания ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|
	|ОБЪЕДИНИТЬ
	|
	// ВводОстатков
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВидыСертификатов.Ссылка КАК ВидСертификата
	|ИЗ
	|	Документ.ВводОстатков КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатков.ПодарочныеСертификаты КАК Строки
	|		ПО ДанныеДокумента.Ссылка = Строки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыСертификатов
	|		ПО Строки.ПодарочныйСертификат.Владелец = ВидыСертификатов.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеДокумента.Организация В(&Организации)
	|	И ДанныеДокумента.Проведен
	|	И &ИспользоватьПодарочныеСертификаты
	|	И ДанныеДокумента.Дата <= &ДатаОкончания ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|
	|ОБЪЕДИНИТЬ
	|
	// ВозвратПодарочныхСертификатов
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВидыСертификатов.Ссылка КАК ВидСертификата
	|ИЗ
	|	Документ.ВозвратПодарочныхСертификатов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратПодарочныхСертификатов.ПодарочныеСертификаты КАК Строки
	|		ПО ДанныеДокумента.Ссылка = Строки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыСертификатов
	|		ПО Строки.ПодарочныйСертификат.Владелец = ВидыСертификатов.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеДокумента.Организация В(&Организации)
	|	И ДанныеДокумента.Проведен
	|	И &ИспользоватьПодарочныеСертификаты
	|	И ДанныеДокумента.Дата <= &ДатаОкончания ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|
	|ОБЪЕДИНИТЬ
	|
	// ОтчетОРозничныхПродажах
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВидыСертификатов.Ссылка КАК ВидСертификата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК Строки
	|		ПО ДанныеДокумента.Ссылка = Строки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыСертификатов
	|		ПО Строки.ПодарочныйСертификат.Владелец = ВидыСертификатов.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеДокумента.Организация В(&Организации)
	|	И ДанныеДокумента.Проведен
	|	И &ИспользоватьПодарочныеСертификаты
	|	И ДанныеДокумента.Дата <= &ДатаОкончания ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|
	|ОБЪЕДИНИТЬ
	|
	// РеализацияПодарочныхСертификатов
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВидыСертификатов.Ссылка КАК ВидСертификата
	|ИЗ
	|	Документ.РеализацияПодарочныхСертификатов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияПодарочныхСертификатов.ПодарочныеСертификаты КАК Строки
	|		ПО ДанныеДокумента.Ссылка = Строки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыСертификатов
	|		ПО Строки.ПодарочныйСертификат.Владелец = ВидыСертификатов.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеДокумента.Организация В(&Организации)
	|	И ДанныеДокумента.Проведен
	|	И &ИспользоватьПодарочныеСертификаты
	|	И ДанныеДокумента.Дата <= &ДатаОкончания ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидСертификата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияСертификатов.Регистратор,
	|	ДвиженияСертификатов.Организация,
	|	ДвиженияСертификатов.ВидСертификата
	|ПОМЕСТИТЬ втДвижения
	|ИЗ
	|	втДвиженияСертификатов КАК ДвиженияСертификатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНастроек КАК ТаблицаНастроек
	|		ПО ДвиженияСертификатов.Организация = ТаблицаНастроек.Организация
	|		И ДвиженияСертификатов.ВидСертификата = ТаблицаНастроек.ВидСертификата
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияСертификатов.Регистратор КАК Документ,
	|	ОтражениеДокументовВРеглУчете.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументовВРеглУчете.Организация КАК Организация
	|ИЗ
	|	втДвижения КАК ДвиженияСертификатов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
	|	ПО
	|		ДвиженияСертификатов.Регистратор = ОтражениеДокументовВРеглУчете.Регистратор
	|		И ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ
	|;");
	
	ИсходнаяТаблица = ТаблицаНастроек.Выгрузить(, "Организация, НазначениеИспользования, ИзмененныеДанные");
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("ДатаОкончания", Дата);
	Запрос.УстановитьПараметр("ИспользоватьПодарочныеСертификаты", ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли