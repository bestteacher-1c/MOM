
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ТорговыеПредложения.ПравоНастройкиТорговыхПредложений(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Если Не Параметры.ТорговоеПредложение.Пустая() Тогда
		
		СвойстваПредложения = Новый Структура("Организация, Валюта");
		ТорговыеПредложенияПереопределяемый.ПолучитьСвойстваТорговогоПредложения(Параметры.ТорговоеПредложение, СвойстваПредложения);
		
		ТекущаяЗапись = ТорговыеПредложенияСлужебный.ЗаписьСостояниеСинхронизации(
			СвойстваПредложения.Организация, 
			Параметры.ТорговоеПредложение);
		
		Если ТекущаяЗапись = Неопределено Тогда
			Отказ = Истина;
		Иначе
			ЗначениеВРеквизитФормы(ТекущаяЗапись, "Запись");
		КонецЕсли;

	КонецЕсли;
	
	УстановитьВидимостьДоступность(Запись, Элементы);
	
	УстановитьЗаголовокСсылкиОткрытияАдресов();
	
	// Установка видимости публикации остатков в прикладном решении.
	ТорговыеПредложенияПереопределяемый.ВыгружатьОтносительныеОстаткиТоваров(Элементы.ПубликоватьОстатки.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокСсылкиОткрытияАдресов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Запись.УведомлятьОЗаказах Тогда
		Если ПустаяСтрока(Запись.АдресЭлектроннойПочты) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Введите адрес электронной почты'"), , "АдресЭлектроннойПочты", , Отказ);
		ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Запись.АдресЭлектроннойПочты, Истина) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Адрес электронной почты введен неверно'"), , "АдресЭлектроннойПочты", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Запись.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация");
	
	ЗначенияЗаписи = Новый Структура;
	ЗначенияЗаписи.Вставить("ТорговоеПредложение"                  , Запись.ТорговоеПредложение);
	ЗначенияЗаписи.Вставить("Организация"                          , Запись.Организация);
	ЗначенияЗаписи.Вставить("АдресЭлектроннойПочты"                , Запись.АдресЭлектроннойПочты);
	ЗначенияЗаписи.Вставить("УведомлятьОЗаказах"                   , Запись.УведомлятьОЗаказах);
	ЗначенияЗаписи.Вставить("ПубликоватьОстатки"                   , Запись.ПубликоватьОстатки);
	ЗначенияЗаписи.Вставить("ПубликоватьСрокиПоставки"             , Запись.ПубликоватьСрокиПоставки);
	ЗначенияЗаписи.Вставить("ПубликоватьЦены"                      , Запись.ПубликоватьЦены);
	ЗначенияЗаписи.Вставить("ДополнительноеОписание"               , Запись.ДополнительноеОписание);
	Оповестить("ТорговыеПредложения_ЗаписьДополнительныеНастройки" , ЗначенияЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьОбИзменении(Запись.ТорговоеПредложение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Запись.ПубликоватьРегионыДоступностиТоваров
		И Не ЗначениеЗаполнено(Запись.РегионыДоставки)
		И Не ЗначениеЗаполнено(Запись.РегионыСамовывоза) Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнены регионы доступности товаров'"));	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Функция АдресДанныхАдресовРегионов()
	
	ТекущаяЗапись = ТорговыеПредложенияСлужебный.ЗаписьСостояниеСинхронизации(Запись.Организация, Запись.ТорговоеПредложение);
	
	Результат = "";
	
	Если ТекущаяЗапись = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеАдресовРегионов = Новый Структура;
	
	Регионы = ?(
		ЗначениеЗаполнено(ТекущаяЗапись.РегионыДоставки),
		БизнесСеть.ЗначениеИзСтрокиJSON(ТекущаяЗапись.РегионыДоставки),
		Новый Массив);
	
	Адреса = ?(
		ЗначениеЗаполнено(ТекущаяЗапись.РегионыСамовывоза),
		БизнесСеть.ЗначениеИзСтрокиJSON(ТекущаяЗапись.РегионыСамовывоза),
		Новый Массив);
	
	ДанныеАдресовРегионов.Вставить("Регионы", Регионы);
	ДанныеАдресовРегионов.Вставить("Адреса",  Адреса);

	Результат = ПоместитьВоВременноеХранилище(ДанныеАдресовРегионов, УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УведомлятьОЗаказахПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность(Запись, Элементы)
	
КонецПроцедуры

&НаКлиенте
Процедура СоставРегионовНажатие(Элемент)
	
	ПараметрыФормы = БизнесСетьСлужебныйКлиент.ОписаниеПараметровФормыНастройкиРегионов();
	
	ПараметрыФормы.Организация                = Запись.Организация;
	ПараметрыФормы.АдресДанныхАдресовРегионов = АдресДанныхАдресовРегионов();
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораАдресов", ЭтотОбъект);
		
	БизнесСетьСлужебныйКлиент.ОткрытьФормуНастройкиРегионов(ПараметрыФормы, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПубликоватьРегионыПриИзменении(Элемент)
	
	Элементы.СоставРегионов.Доступность = Запись.ПубликоватьРегионыДоступностиТоваров;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Запись, Элементы)
	
	Элементы.АдресЭлектроннойПочты.Доступность               = Запись.УведомлятьОЗаказах;
	Элементы.АдресЭлектроннойПочты.АвтоОтметкаНезаполненного = Элементы.АдресЭлектроннойПочты.Доступность;
	Элементы.СоставРегионов.Доступность                      = Запись.ПубликоватьРегионыДоступностиТоваров;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораАдресов(Результат, ДополнительныеПараметры) Экспорт

	ЗаписатьДанныеАдресовРегионов(Результат);
	
	УстановитьЗаголовокСсылкиОткрытияАдресов(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеАдресовРегионов(Результат)
	
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАдресовРегионов = ПолучитьИзВременногоХранилища(Результат);
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	
	Если ЗначениеЗаполнено(ДанныеАдресовРегионов.Регионы) Тогда
		Регионы = БизнесСеть.ЗначениеВJSON(ДанныеАдресовРегионов.Регионы, ПараметрыЗаписиJSON);
	Иначе
		Регионы = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдресовРегионов.Адреса) Тогда
		Адреса  = БизнесСеть.ЗначениеВJSON(ДанныеАдресовРегионов.Адреса, ПараметрыЗаписиJSON);
	Иначе
		Адреса = "";	
	КонецЕсли;
	
	ТорговыеПредложенияСлужебный.ЗаписатьДанныеРегионовВСостояниеСинхронизации(
		Запись.Организация,
		Запись.ТорговоеПредложение,
		Регионы, 
		Адреса);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСсылкиОткрытияАдресов(ПеречитатьДанные = Ложь)
	
	Если ПеречитатьДанные Тогда
		ТекущаяЗапись = ТорговыеПредложенияСлужебный.ЗаписьСостояниеСинхронизации(Запись.Организация, Запись.ТорговоеПредложение);
		ЗаполнитьЗначенияСвойств(Запись, ТекущаяЗапись, "РегионыДоставки, РегионыСамовывоза");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.РегионыДоставки)
		ИЛИ ЗначениеЗаполнено(Запись.РегионыСамовывоза) Тогда
		
		Элементы.СоставРегионов.Заголовок = НСтр("ru = 'Изменить'");
	Иначе
		Элементы.СоставРегионов.Заголовок = "<" + НСтр("ru = 'не указаны'") + ">";
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
