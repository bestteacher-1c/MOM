#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Увеличивает номер задания в константе.
// 
// Возвращаемое значение:
//  Число - Предыдущий номер задания.
//
Функция УвеличитьНомерЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерДоРасчета = 0;
	
	НачатьТранзакцию();
	Попытка
		
		НомерДоРасчета = ТекущийНомерЗадания();
		Константы.НомерЗаданияКФормированиюДвиженийПоОС.Установить(НомерДоРасчета + 1);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + НСтр("ru = 'Значение константы'") + " = " + НомерДоРасчета;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗакрытиеМесяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,ИнформацияОбОшибке);
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НомерДоРасчета;
	
КонецФункции

// Считывает записи регистра во временную таблицу за указанный период по отборам.
//
// Параметры:
//	НачалоПериода - Период - Начало периода выборки данных.
//	ОкончаниеПериода - Период - Конец периода выборки данных.
//	Организации - Массив, СправочникСсылка.Организации - Фильтр по организации.
//
// Возвращаемое значение:
//	Структура:
//		* Организации - Массив - Массив организаций, который неактуальны в указанном периоде.
//		* ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит в себе временную таблицу КэшГраниц.
//
Функция ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗадания, Организации) Экспорт

	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьРегистрЗаданий(НомерЗадания, Организации);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Задания.Месяц               КАК Месяц,
		|	Задания.ОбъектУчета         КАК ОбъектУчета,
		|	Задания.Организация         КАК Организация,
		|	Задания.НомерЗадания        КАК НомерЗадания,
		|	Задания.Документ            КАК Документ
		|ПОМЕСТИТЬ КэшГраниц
		|ИЗ
		|	РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК Задания
		|ГДЕ
		|	Задания.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Задания.НомерЗадания <= &НомерЗадания
		|	И (Задания.Организация В (&Организации)
		|			ИЛИ &ПоВсемОрганизациям)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ОбъектУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КэшГраниц.Организация
		|ИЗ
		|	КэшГраниц КАК КэшГраниц";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
		Запрос.УстановитьПараметр("Организации", Организации);
		Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Результат = Запрос.Выполнить();
		
		ИсходныеДанные = Новый Структура;
		ИсходныеДанные.Вставить("Организация", Результат.Выгрузить().ВыгрузитьКолонку("Организация"));
		ИсходныеДанные.Вставить("ВременныеТаблицы", Запрос.МенеджерВременныхТаблиц);
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки; 
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//  Выборка		 - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПолей = Новый Структура("Месяц, Организация, ОбъектУчета, Документ");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ТекущийНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			СоздатьЗаписьРегистра(
				СтруктураПолей.Месяц, 
				СтруктураПолей.Документ, 
				СтруктураПолей.Организация, 
				СтруктураПолей.ОбъектУчета, 
				НомерЗадания);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось сформировать задание к погашению стоимости ТМЦ за %1 в организации %2 по причине: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Закрытие месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Фиксирует удачный пересчет данных.
//
// Параметры:
//  Организация		 - СправочникСсылка.Организации, Массив	 - Организация для которой выполнялся расчет.
//  НачалоРасчета	 - Дата									 - Начало периода в котором выполнялся расчет.
//  НомерЗадания	 - Число								 - Номер задания, полученный до начала расчета.
//  ЗаданияКРасчету	 - Структура							 - Формируется в методе ЗаданияКРасчетуЗаМесяц().
//
Процедура ЗафиксироватьРасчет(Организация, НачалоРасчета, НомерЗадания, ЗаданияКРасчету) Экспорт
	
	НачатьТранзакцию();
	Попытка
	
		ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация);
	
		УстановитьПривилегированныйРежим(Истина);
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задания.Месяц,
		|	Задания.ОбъектУчета,
		|	Задания.Организация,
		|	Задания.НомерЗадания
		|ИЗ
		|	КэшГраниц КАК Задания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МИНИМУМ(ДанныеДокументов.Дата), ДАТАВРЕМЯ(1, 1, 1)) КАК Месяц,
		|	ДанныеДокументов.Организация КАК Организация,
		|	ДанныеДокументов.ОбъектУчета КАК ОбъектУчета,
		|	&НомерЗадания КАК НомерЗадания
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДокументыПоОС.Дата КАК Дата,
		|		ДокументыПоОС.Организация КАК Организация,
		|		ДокументыПоОС.ОсновноеСредство КАК ОбъектУчета
		|	ИЗ
		|		РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
		|	ГДЕ
		|		ДокументыПоОС.Дата >= &НачалоСледующегоМесяца
		|		И ДокументыПоОС.Проведен
		|		И (ДокументыПоОС.ТипСсылки В(&ТипыДокументов))
		|		И (ДокументыПоОС.Организация, ДокументыПоОС.ОсновноеСредство) В
		|				(ВЫБРАТЬ
		|					КэшГраниц.Организация,
		|					КэшГраниц.ОбъектУчета
		|				ИЗ
		|					КэшГраниц КАК КэшГраниц)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ДокументыПоНМА.Дата КАК Дата,
		|		ДокументыПоНМА.Организация КАК Организация,
		|		ДокументыПоНМА.НематериальныйАктив КАК ОбъектУчета
		|	ИЗ
		|		РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
		|	ГДЕ
		|		ДокументыПоНМА.Дата >= &НачалоСледующегоМесяца
		|		И ДокументыПоНМА.Проведен
		|		И (ДокументыПоНМА.ТипСсылки В(&ТипыДокументов))
		|		И (ДокументыПоНМА.Организация, ДокументыПоНМА.НематериальныйАктив) В
		|				(ВЫБРАТЬ
		|					КэшГраниц.Организация,
		|					КэшГраниц.ОбъектУчета
		|				ИЗ
		|					КэшГраниц КАК КэшГраниц)) КАК ДанныеДокументов
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокументов.Организация,
		|	ДанныеДокументов.ОбъектУчета
		|
		|ИМЕЮЩИЕ
		|	ЕСТЬNULL(МИНИМУМ(ДанныеДокументов.Дата), ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ЗаданияКРасчету.ВременныеТаблицы;
		Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
		Запрос.УстановитьПараметр("НачалоСледующегоМесяца", КонецМесяца(НачалоРасчета) + 1);
		Запрос.УстановитьПараметр("ТипыДокументов", ВнеоборотныеАктивы.ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения());
		 
		Результат = Запрос.ВыполнитьПакет();
		
		// Очистка записей по которым был выполнен расчет.
		Выборка = Результат[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.ОбъектУчета.Установить(Выборка.ОбъектУчета);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Записать(); 
		КонецЦикла;
		
		// Добавление записей на следующий период
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Записать(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки; 
	
КонецПроцедуры

// Возвращает период с которого для данной операции закрытия месяца данные становятся неактуальными.
//
// Параметры:
//  СписокОрганизаций	 - Массив	 - Массив организаций, для которых контролируется актуальность.
// 
// Возвращаемое значение:
//  Дата - Начало месяца на который неактуально закрытие месяца.
//
Функция НачалоРасчета(СписокОрганизаций) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Задания.Месяц), ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК Задания
	|ГДЕ
	|	Задания.Организация В (&СписокОрганизаций)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НачалоРасчета;
	
КонецФункции

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.СтоимостьОС", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.АмортизацияОС", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.СтоимостьНМА", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.АмортизацияНМА", "Период", "РегламентныеОперации", "Организация");
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекущийНомерЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийНомерЗадания = Константы.НомерЗаданияКФормированиюДвиженийПоОС.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТекущийНомерЗадания;
	
КонецФункции

Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации)
	
	ВнеоборотныеАктивы.ЗаблокироватьРегистрЗаданий(
		НомерЗаданияДоРасчета, Организации, "РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА");
		
КонецПроцедуры

Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания, Организация, ОбъектУчета, НомерЗадания)
				
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		НаборЗаписей = РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.СоздатьМенеджерЗаписи();
		НаборЗаписей.Месяц        = НачалоМесяца(ПериодЗадания);
		НаборЗаписей.ОбъектУчета  = ОбъектУчета;
		НаборЗаписей.Организация  = Организация;
		НаборЗаписей.Документ     = ДокументЗадания;
		НаборЗаписей.НомерЗадания = НомерЗадания;
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки; 
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
