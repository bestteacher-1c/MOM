
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1001
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.ПустаяСсылка)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура >= &НоменклатураСсылка
	|	И ВЫБОР
	|			КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = &НоменклатураСсылка
	|				ТОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика >= &ХарактеристикаСсылка
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	Запрос.УстановитьПараметр("ПустаяХарактеристика", РаботаСНоменклатурой.ПустаяСсылкаНаХарактеристику());
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой";
	
	РазмерПорцииДанных = 1000;
	
	НоменклатураСсылка = Неопределено;
	ХарактеристикаСсылка = Неопределено;
	
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
		Запрос.УстановитьПараметр("ХарактеристикаСсылка", ХарактеристикаСсылка);
			
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок > РазмерПорцииДанных Тогда		
			
			СтрокаДанных = Выгрузка[КоличествоСтрок - 1];
			
			НоменклатураСсылка = СтрокаДанных.Номенклатура;
			ХарактеристикаСсылка = СтрокаДанных.Характеристика;
			
			Выгрузка.Удалить(СтрокаДанных);
			
		КонецЕсли;

		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);
		
		Если КоличествоСтрок <= РазмерПорцииДанных Тогда
			Прервать;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры);
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ОбработанныхЗаписей = 0;
	ПроблемныхЗаписей = 0;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);			
			
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.УстановитьЗначение("Номенклатура", Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() Тогда
				
				ТекущаяЗапись = НаборЗаписей[0];
				
				// Не установлен статус сопоставления.
				Если Не ЗначениеЗаполнено(ТекущаяЗапись.СтатусСопоставления) Тогда
					ТекущаяЗапись.СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено;
				КонецЕсли;
				
				// Не установлен режим загрузки характеристик.
				Если Не ЗначениеЗаполнено(ТекущаяЗапись.Характеристика) И Не ЗначениеЗаполнено(ТекущаяЗапись.РежимЗагрузкиХарактеристик) Тогда
					ТекущаяЗапись.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ХарактеристикиНеИспользуются;
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ОбработанныхЗаписей = ОбработанныхЗаписей + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхЗаписей = ПроблемныхЗаписей + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать запись по номенклатуре: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Номенклатура) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, Выборка.Номенклатура, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработанныхЗаписей = 0 И ПроблемныхЗаписей <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые записи. Пропущено: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхЗаписей);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция записей: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхЗаписей);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхЗаписей;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
		
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры)
	
	// Определим общее количество объектов к обработке.
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ПараметрыВыборки.ВыбиратьПорциями = Ложь;
		
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
			Параметры.Очередь, 
			Метаданные.РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.ПолноеИмя(),
			ПараметрыВыборки);
			
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли