
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	НадоСоздаватьПеремещение = Ложь;
	
	ПеремещениеТоваров = ПолучитьСсылкуНаПеремещение(ПараметрКоманды, НадоСоздаватьПеремещение);
	
	Если НадоСоздаватьПеремещение = Истина Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрКоманды",ПараметрКоманды);
		ДополнительныеПараметры.Вставить("ПеремещениеТоваров",ПеремещениеТоваров);
		
		ПоказатьВводЗначения(
		Новый ОписаниеОповещения("ВыбратьСкладЗавершение", ЭтотОбъект, ДополнительныеПараметры)
		,,"СКЛАД ПОЛУЧАТЕЛЬ", Тип("СправочникСсылка.Склады"));
		
		Сообщить("ВЫБЕРИТЕ СКЛАД ПОЛУЧАТЕЛЬ!!");

		//ЗаполнитьПеремещениеТоваровНаОснованииПроизводстваБезЗаказа(ПараметрКоманды, ПеремещениеТоваров);
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента", 
	Новый Структура("Ключ", ПеремещениеТоваров));
	
КонецПроцедуры


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ВыбратьСкладЗавершение(Склад,ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Склад) = Истина Тогда
		
		ЗаполнитьПеремещениеТоваровНаОснованииПроизводстваБезЗаказа(
		ДополнительныеПараметры.ПараметрКоманды
		, ДополнительныеПараметры.ПеремещениеТоваров, Склад);
		
		ОткрытьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента", 
		Новый Структура("Ключ", ДополнительныеПараметры.ПеремещениеТоваров));
	
	КонецЕсли;

КонецПроцедуры // ПолучитьДатуНачалаАнализаЗавершение()



&НаСервере
Функция ПолучитьСсылкуНаПеремещение(ПроизводствоБезЗаказа, НадоСоздаватьПеремещение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект
	|	И ДополнительныеСведения.Свойство.Имя = &Имя";
	
	Запрос.УстановитьПараметр("Имя", "Перемещение_d72910dfda3242fd84270dab4d0a9d1a");
	Запрос.УстановитьПараметр("Объект", ПроизводствоБезЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		УИД = Новый УникальныйИдентификатор(ВыборкаДетальныеЗаписи.Значение);
		СсылкаНаПеремещениеТоваров = Документы.ПеремещениеТоваров.ПолучитьСсылку(УИД);
		
		
		Если СсылкаНаПеремещениеТоваров.ПолучитьОбъект() = Неопределено Тогда
			
			НадоСоздаватьПеремещение = Истина;
			
			СсылкаНаПеремещениеТоваров = Документы.ПеремещениеТоваров.ПустаяСсылка();
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ПроизводствоБезЗаказа;
			МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Перемещение_d72910dfda3242fd84270dab4d0a9d1a");
			МенеджерЗаписи.Значение = "";
			
			Попытка
				
				МенеджерЗаписи.Записать();
				
			Исключение
				
				Сообщить(ОписаниеОшибки());
				Сообщить("Удалите вручную строку из свойства ""Перемещение товаров""");
				
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		СсылкаНаПеремещениеТоваров = Документы.ПеремещениеТоваров.ПустаяСсылка();
		НадоСоздаватьПеремещение = Истина;
		
	КонецЕсли;
	
	Возврат СсылкаНаПеремещениеТоваров;
	
КонецФункции // ПолучитьСсылкуНаПриход()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьПеремещениеТоваровНаОснованииПроизводстваБезЗаказа(ПроизводствоБезЗаказа, ПеремещениеТоваров, СкладПолучатель)
	
	ПеремещениеТоваровОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
	
	
	Запрос = Новый Запрос;    
	Запрос.УстановитьПараметр("ПроизводствоБезЗаказа", ПроизводствоБезЗаказа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроизводствоБезЗаказаВыходныеИзделия.Дата КАК Дата,
	|	ПроизводствоБезЗаказаВыходныеИзделия.Организация КАК Организация
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа КАК ПроизводствоБезЗаказаВыходныеИзделия
	|ГДЕ
	|	ПроизводствоБезЗаказаВыходныеИзделия.Ссылка = &ПроизводствоБезЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводствоБезЗаказаВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ПроизводствоБезЗаказаВыходныеИзделия.Характеристика КАК Характеристика,
	|	ПроизводствоБезЗаказаВыходныеИзделия.Серия КАК Серия,
	|	ПроизводствоБезЗаказаВыходныеИзделия.Получатель КАК СкладОтправитель,
	|	ПроизводствоБезЗаказаВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПроизводствоБезЗаказаВыходныеИзделия.Количество КАК Количество,
	|	ПроизводствоБезЗаказаВыходныеИзделия.Упаковка КАК Упаковка,
	|	ПроизводствоБезЗаказаВыходныеИзделия.Назначение КАК Назначение
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ПроизводствоБезЗаказаВыходныеИзделия
	|ГДЕ
	|	ПроизводствоБезЗаказаВыходныеИзделия.Ссылка = &ПроизводствоБезЗаказа
	|ИТОГИ
	|	МАКСИМУМ(СкладОтправитель)
	|ПО
	|	ОБЩИЕ";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаИтоги = МассивРезультатов.Получить(1).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаИтоги.Следующий() = Истина Тогда
		
		ВыборкаДетальныеЗаписи = ВыборкаИтоги.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() = Истина Цикл
			
			НоваяСтрока = ПеремещениеТоваровОбъект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);   // ПеремещениеТоваров
			
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = МассивРезультатов.Получить(0).Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ПеремещениеТоваровОбъект.Дата = ВыборкаДетальныеЗаписи.Дата;
		ПеремещениеТоваровОбъект.Организация = ВыборкаДетальныеЗаписи.Организация;
		ПеремещениеТоваровОбъект.СкладОтправитель = ВыборкаИтоги.СкладОтправитель;
		ПеремещениеТоваровОбъект.СкладПолучатель = СкладПолучатель;
		ПеремещениеТоваровОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		ПеремещениеТоваровОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		ПеремещениеТоваровОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
		ПеремещениеТоваровОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
		
		ПеремещениеТоваровОбъект.Ответственный = Пользователи.ТекущийПользователь();
		
		Попытка
			
			ПеремещениеТоваровОбъект.Записать();
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
		
		ПеремещениеТоваров = ПеремещениеТоваровОбъект.Ссылка;
		
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ПроизводствоБезЗаказа;
		МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Перемещение_d72910dfda3242fd84270dab4d0a9d1a");
		МенеджерЗаписи.Значение = ПеремещениеТоваров.УникальныйИдентификатор();
		
		Попытка
			
			МенеджерЗаписи.Записать();
			
			
		Исключение
			Сообщить(ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;

	
КонецПроцедуры
